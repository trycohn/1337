const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
const filePath = path.join(__dirname, 'frontend', 'src', 'components', 'TournamentDetails.js');

console.log('üîß –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TournamentDetails.js');
console.log('================================================');

try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    let content = fs.readFileSync(filePath, 'utf8');
    console.log(`üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –†–∞–∑–º–µ—Ä: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π return –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const lines = content.split('\n');
    console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${lines.length}`);
    
    // –ù–∞–π–¥–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –ø–æ—Å–ª–µ return (
    let foundReturn = false;
    let newLines = [];
    let inMainFunction = false;
    let braceCount = 0;
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        
        // –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏—é TournamentDetails
        if (line.includes('function TournamentDetails()')) {
            inMainFunction = true;
            braceCount = 0;
            console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è TournamentDetails –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
        }
        
        if (inMainFunction) {
            // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–±–∫–∏
            const openBraces = (line.match(/\{/g) || []).length;
            const closeBraces = (line.match(/\}/g) || []).length;
            braceCount += openBraces - closeBraces;
            
            // –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç JSX
            if (line.trim().includes('</section>')) {
                foundReturn = true;
                console.log(`üéØ –ù–∞–π–¥–µ–Ω </section> –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}, braceCount: ${braceCount}`);
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ return –∏ braceCount = 1, —Ç–æ —ç—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if (foundReturn && line.trim() === ');' && braceCount === 1) {
                newLines.push(line);
                newLines.push('}'); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é TournamentDetails
                newLines.push('');
                newLines.push('export default TournamentDetails;');
                console.log(`‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
                break; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            }
        }
        
        newLines.push(line);
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const newContent = newLines.join('\n');
    fs.writeFileSync(filePath, newContent, 'utf8');
    
    console.log(`‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω. –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${newContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`üìä –°—Ç—Ä–æ–∫ –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ: ${newLines.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫
    const openBraces = (newContent.match(/\{/g) || []).length;
    const closeBraces = (newContent.match(/\}/g) || []).length;
    console.log(`üìä –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏: ${openBraces}`);
    console.log(`üìä –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏: ${closeBraces}`);
    console.log(`üìä –ë–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫: ${openBraces === closeBraces ? '‚úÖ OK' : '‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û'}`);
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
}

console.log('üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!'); 