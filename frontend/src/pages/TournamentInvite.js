import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import AuthPage from './AuthPage';
import axios from 'axios';
import './TournamentInvite.css';

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–æ–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
 * 
 * Workflow:
 * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞
 * 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 * 3. –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–≤–∞–π—Ç –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–∞
 */
function TournamentInvite() {
    const { inviteCode } = useParams();
    const { user } = useAuth();
    const navigate = useNavigate();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ localStorage
    const token = localStorage.getItem('token');
    
    const [loading, setLoading] = useState(true);
    const [inviteValid, setInviteValid] = useState(false);
    const [inviteData, setInviteData] = useState(null);
    const [error, setError] = useState(null);
    const [processing, setProcessing] = useState(false);
    const [inviteUsed, setInviteUsed] = useState(false); // –§–ª–∞–≥, —á—Ç–æ –∏–Ω–≤–∞–π—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–≤–∞–π—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        checkInviteValidity();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [inviteCode]);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ï–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
    useEffect(() => {
        const currentToken = localStorage.getItem('token');
        
        // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ù–ï–¢ —Ç–æ–∫–µ–Ω–∞ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        if (!currentToken && !user && inviteValid && inviteData) {
            console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /auth');
            sessionStorage.setItem('invite_return_url', `/tournaments/invite/${inviteCode}`);
            sessionStorage.setItem('invite_tournament_name', inviteData.name || '');
            
            // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            navigate(`/auth?redirect=${encodeURIComponent(`/tournaments/invite/${inviteCode}`)}`);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [user, inviteValid, inviteData]);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    useEffect(() => {
        const currentToken = localStorage.getItem('token');
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞:', {
            user: !!user,
            token: !!currentToken,
            inviteValid,
            processing,
            inviteUsed
        });
        
        // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–≤–∞–π—Ç –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
        if (user && currentToken && inviteValid && !processing && !inviteUsed) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–≤–∞–π—Ç –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º...');
            handleUseInvite();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [user, token, inviteValid]);

    const checkInviteValidity = async () => {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–≤–∞–π—Ç–∞:', inviteCode);
            setLoading(true);
            
            const response = await axios.get(
                `${process.env.REACT_APP_API_URL}/api/tournaments/invites/${inviteCode}`
            );

            console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);

            if (response.data.valid) {
                setInviteValid(true);
                setInviteData(response.data.tournament);
                console.log('‚úÖ –ò–Ω–≤–∞–π—Ç –≤–∞–ª–∏–¥–µ–Ω, —Ç—É—Ä–Ω–∏—Ä:', response.data.tournament.name);
            } else {
                setInviteValid(false);
                setError(response.data.error || '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ');
                console.log('‚ùå –ò–Ω–≤–∞–π—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω:', response.data.error);
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
            setInviteValid(false);
            setError(err.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
        } finally {
            setLoading(false);
        }
    };

    const handleUseInvite = async () => {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
        if (inviteUsed || processing) {
            console.log('‚ö†Ô∏è –ò–Ω–≤–∞–π—Ç —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω');
            return;
        }

        try {
            setProcessing(true);
            setInviteUsed(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å—Ä–∞–∑—É
            
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞...');
            
            const response = await axios.post(
                `${process.env.REACT_APP_API_URL}/api/tournaments/invites/${inviteCode}/use`,
                {},
                {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                }
            );

            console.log('‚úÖ –ò–Ω–≤–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:', response.data);

            if (response.data.success) {
                const tournamentId = response.data.tournament.id;
                
                // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ pending –∏–Ω–≤–∞–π—Ç–∞
                sessionStorage.removeItem('pending_invite');
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location –¥–ª—è –∂–µ—Å—Ç–∫–æ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å AuthPage)
                console.log('üîÄ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ç—É—Ä–Ω–∏—Ä:', tournamentId);
                window.location.href = `/tournaments/${tournamentId}?join=true`;
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
            setError(err.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
            setInviteUsed(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            setProcessing(false);
        }
    };

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞
    if (loading) {
        return (
            <div className="tournament-invite-container">
                <div className="invite-card">
                    <div className="invite-loading">
                        <div className="spinner"></div>
                        <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...</p>
                    </div>
                </div>
            </div>
        );
    }

    // –ï—Å–ª–∏ –∏–Ω–≤–∞–π—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
    if (!inviteValid) {
        return (
            <div className="tournament-invite-container">
                <div className="invite-card error">
                    <div className="invite-icon error-icon">‚ùå</div>
                    <h2>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ</h2>
                    <p className="error-message">{error}</p>
                    <button 
                        className="btn-primary"
                        onClick={() => navigate('/tournaments')}
                    >
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
                    </button>
                </div>
            </div>
        );
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º loader
    const currentToken = localStorage.getItem('token');
    if (!currentToken && !user && inviteValid) {
        return (
            <div className="tournament-invite-container">
                <div className="invite-card">
                    <div className="invite-loading">
                        <div className="spinner"></div>
                        <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...</p>
                    </div>
                </div>
            </div>
        );
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º loader (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–≤–∞–π—Ç –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º)
    if (user && inviteValid) {
        return (
            <div className="tournament-invite-container">
                <div className="invite-card">
                    <div className="invite-loading">
                        <div className="spinner"></div>
                        <p>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...</p>
                    </div>
                </div>
            </div>
        );
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω–≤–∞–π—Ç–∞
    if (error && !processing) {
        return (
            <div className="tournament-invite-container">
                <div className="invite-card error">
                    <div className="invite-icon error-icon">‚ö†Ô∏è</div>
                    <h2>–û—à–∏–±–∫–∞</h2>
                    <p className="error-message">{error}</p>
                    <button 
                        className="btn-primary"
                        onClick={() => navigate(`/tournaments/${inviteData?.id || ''}`)}
                    >
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä–Ω–∏—Ä—É
                    </button>
                </div>
            </div>
        );
    }

    // Fallback (–æ–±—ã—á–Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è)
    return (
        <div className="tournament-invite-container">
            <div className="invite-card">
                <div className="invite-loading">
                    <div className="spinner"></div>
                    <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...</p>
                </div>
            </div>
        </div>
    );
}

export default TournamentInvite;

