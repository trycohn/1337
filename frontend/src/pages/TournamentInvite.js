import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import AuthPage from './AuthPage';
import axios from 'axios';
import './TournamentInvite.css';

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–æ–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
 * 
 * Workflow:
 * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞
 * 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 * 3. –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–≤–∞–π—Ç –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–∞
 */
function TournamentInvite() {
    const { inviteCode } = useParams();
    const { user, token } = useAuth();
    const navigate = useNavigate();
    
    const [loading, setLoading] = useState(true);
    const [inviteValid, setInviteValid] = useState(false);
    const [inviteData, setInviteData] = useState(null);
    const [error, setError] = useState(null);
    const [processing, setProcessing] = useState(false);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–≤–∞–π—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        checkInviteValidity();
    }, [inviteCode]);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        if (user && token && inviteValid && !processing) {
            useInvite();
        }
    }, [user, token, inviteValid]);

    const checkInviteValidity = async () => {
        try {
            setLoading(true);
            const response = await axios.get(
                `${process.env.REACT_APP_API_URL}/api/tournaments/invites/${inviteCode}`
            );

            if (response.data.valid) {
                setInviteValid(true);
                setInviteData(response.data.tournament);
            } else {
                setInviteValid(false);
                setError(response.data.error || '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ');
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
            setInviteValid(false);
            setError(err.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
        } finally {
            setLoading(false);
        }
    };

    const useInvite = async () => {
        try {
            setProcessing(true);
            const response = await axios.post(
                `${process.env.REACT_APP_API_URL}/api/tournaments/invites/${inviteCode}/use`,
                {},
                {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                }
            );

            if (response.data.success) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∏–Ω–≤–∞–π—Ç
                sessionStorage.setItem('invite_used', 'true');
                sessionStorage.setItem('tournament_id', response.data.tournament.id);
                
                // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å
                navigate(`/tournaments/${response.data.tournament.id}?join=true`);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
            setError(err.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
        } finally {
            setProcessing(false);
        }
    };

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞
    if (loading) {
        return (
            <div className="tournament-invite-container">
                <div className="invite-card">
                    <div className="invite-loading">
                        <div className="spinner"></div>
                        <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...</p>
                    </div>
                </div>
            </div>
        );
    }

    // –ï—Å–ª–∏ –∏–Ω–≤–∞–π—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
    if (!inviteValid) {
        return (
            <div className="tournament-invite-container">
                <div className="invite-card error">
                    <div className="invite-icon error-icon">‚ùå</div>
                    <h2>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ</h2>
                    <p className="error-message">{error}</p>
                    <button 
                        className="btn-primary"
                        onClick={() => navigate('/tournaments')}
                    >
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
                    </button>
                </div>
            </div>
        );
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!user) {
        return (
            <div className="tournament-invite-container">
                <div className="invite-info-banner">
                    <div className="banner-content">
                        <h2>üèÜ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä</h2>
                        <p>–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä <strong>{inviteData?.name}</strong></p>
                        <p className="hint">–í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</p>
                    </div>
                </div>
                <AuthPage redirectAfterAuth={`/tournaments/invite/${inviteCode}`} />
            </div>
        );
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≤–∞–π—Ç–∞
    if (processing) {
        return (
            <div className="tournament-invite-container">
                <div className="invite-card">
                    <div className="invite-loading">
                        <div className="spinner"></div>
                        <p>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è...</p>
                    </div>
                </div>
            </div>
        );
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω–≤–∞–π—Ç–∞
    if (error && !processing) {
        return (
            <div className="tournament-invite-container">
                <div className="invite-card error">
                    <div className="invite-icon error-icon">‚ö†Ô∏è</div>
                    <h2>–û—à–∏–±–∫–∞</h2>
                    <p className="error-message">{error}</p>
                    <button 
                        className="btn-primary"
                        onClick={() => navigate(`/tournaments/${inviteData?.id || ''}`)}
                    >
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä–Ω–∏—Ä—É
                    </button>
                </div>
            </div>
        );
    }

    // Fallback (–æ–±—ã—á–Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è)
    return (
        <div className="tournament-invite-container">
            <div className="invite-card">
                <div className="invite-loading">
                    <div className="spinner"></div>
                    <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...</p>
                </div>
            </div>
        </div>
    );
}

export default TournamentInvite;

