// üéÆ MyActiveMatches - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../axios';
import './MyActiveMatches.css';

function MyActiveMatches() {
    const navigate = useNavigate();
    const [loading, setLoading] = useState(true);
    const [tournamentMatches, setTournamentMatches] = useState([]);
    const [customMatches, setCustomMatches] = useState([]);
    const [hiddenMatches, setHiddenMatches] = useState(() => {
        try {
            const saved = localStorage.getItem('hidden_matches');
            return saved ? JSON.parse(saved) : [];
        } catch {
            return [];
        }
    });

    useEffect(() => {
        loadMatches();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        const interval = setInterval(loadMatches, 10000);
        return () => clearInterval(interval);
    }, [hiddenMatches]);

    const loadMatches = async () => {
        try {
            const token = localStorage.getItem('token');
            const { data } = await api.get('/api/matches/my-active', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            if (data.success) {
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–µ –º–∞—Ç—á–∏
                const filteredTournament = (data.tournamentMatches || []).filter(
                    m => !hiddenMatches.includes(`tournament_${m.id}`)
                );
                const filteredCustom = (data.customMatches || []).filter(
                    m => !hiddenMatches.includes(`custom_${m.lobby_id}`)
                );
                
                setTournamentMatches(filteredTournament);
                setCustomMatches(filteredCustom);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π:', error);
        } finally {
            setLoading(false);
        }
    };

    // –°–∫—Ä—ã—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –º–∞—Ç—á
    const hideMatch = (matchId) => {
        const key = `tournament_${matchId}`;
        const updated = [...hiddenMatches, key];
        setHiddenMatches(updated);
        localStorage.setItem('hidden_matches', JSON.stringify(updated));
        loadMatches();
    };

    // –í—ã–π—Ç–∏ –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–æ–±–±–∏
    const leaveCustomLobby = async (lobbyId) => {
        if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –ª–æ–±–±–∏?')) {
            return;
        }
        
        try {
            const token = localStorage.getItem('token');
            await api.delete(`/api/matches/custom-lobby/${lobbyId}/leave`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –£–±–∏—Ä–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            const key = `custom_${lobbyId}`;
            const updated = [...hiddenMatches, key];
            setHiddenMatches(updated);
            localStorage.setItem('hidden_matches', JSON.stringify(updated));
            
            loadMatches();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–æ–±–±–∏:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏');
        }
    };

    const getStatusText = (status, lobbyStatus) => {
        if (lobbyStatus) {
            const lobbyStatusMap = {
                'waiting': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤',
                'ready': '‚úÖ –ì–æ—Ç–æ–≤—ã –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ä—Ç',
                'picking': 'üó∫Ô∏è –í—ã–±–æ—Ä –∫–∞—Ä—Ç',
                'ready_to_create': 'üéÆ –ì–æ—Ç–æ–≤–æ –∫ –∏–≥—Ä–µ',
                'match_created': 'üöÄ –ú–∞—Ç—á —Å–æ–∑–¥–∞–Ω'
            };
            return lobbyStatusMap[lobbyStatus] || lobbyStatus;
        }
        
        const statusMap = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ',
            'ready': '‚úÖ –ì–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É',
            'in_progress': 'üéÆ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'waiting': '‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞'
        };
        return statusMap[status] || status;
    };

    if (loading) {
        return (
            <div className="my-matches-container">
                <div className="matches-loading">
                    <span className="loading-icon">‚è≥</span>
                    <span>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π...</span>
                </div>
            </div>
        );
    }

    const totalMatches = tournamentMatches.length + customMatches.length;

    return (
        <div className="my-matches-container">
            <div className="matches-header">
                <h1>üéÆ –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏</h1>
                <p className="matches-count">
                    –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {totalMatches}
                </p>
            </div>

            {totalMatches === 0 && (
                <div className="no-matches">
                    <span className="empty-icon">üì≠</span>
                    <h2>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π</h2>
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ç–µ–∫—É—â–∏—Ö –º–∞—Ç—á–µ–π</p>
                    <button 
                        className="btn-tournaments"
                        onClick={() => navigate('/tournaments')}
                    >
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
                    </button>
                </div>
            )}

            {/* –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –º–∞—Ç—á–∏ */}
            {tournamentMatches.length > 0 && (
                <section className="matches-section">
                    <h2>üèÜ –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –º–∞—Ç—á–∏ ({tournamentMatches.length})</h2>
                    <div className="matches-grid">
                        {tournamentMatches.map(match => (
                            <div 
                                key={match.id} 
                                className="match-card"
                            >
                                <button 
                                    className="btn-hide-match"
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        hideMatch(match.id);
                                    }}
                                    title="–°–∫—Ä—ã—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞"
                                >
                                    ‚úï
                                </button>
                                
                                <div onClick={() => navigate(`/tournaments/${match.tournament_id}/match/${match.id}`)}>
                                    <div className="match-card-header">
                                        <span className="tournament-badge">
                                            {match.tournament_name}
                                        </span>
                                        <span className="round-badge">
                                            {match.round}
                                        </span>
                                    </div>
                                    
                                    <div className="match-teams">
                                        <div className="team">{match.team1_name}</div>
                                        <div className="vs">VS</div>
                                        <div className="team">{match.team2_name}</div>
                                    </div>
                                    
                                    <div className="match-status">
                                        {getStatusText(match.status, match.lobby_status)}
                                    </div>
                                </div>
                                
                                {match.lobby_id && (
                                    <button 
                                        className="btn-join-lobby"
                                        onClick={(e) => {
                                            e.stopPropagation();
                                            navigate(`/match-lobby/${match.lobby_id}`);
                                        }}
                                    >
                                        –í–æ–π—Ç–∏ –≤ –ª–æ–±–±–∏
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </section>
            )}

            {/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—Ç—á–∏ */}
            {customMatches.length > 0 && (
                <section className="matches-section">
                    <h2>‚ö° –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—Ç—á–∏ ({customMatches.length})</h2>
                    <div className="matches-grid">
                        {customMatches.map(match => (
                            <div 
                                key={match.lobby_id} 
                                className="match-card custom"
                            >
                                <button 
                                    className="btn-leave-match"
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        leaveCustomLobby(match.lobby_id);
                                    }}
                                    title="–ü–æ–∫–∏–Ω—É—Ç—å –ª–æ–±–±–∏"
                                >
                                    üö™ –í—ã–π—Ç–∏
                                </button>
                                
                                <div onClick={() => navigate('/lobby/custom')}>
                                    <div className="match-card-header">
                                        <span className="custom-badge">
                                            CUSTOM
                                        </span>
                                        <span className="format-badge">
                                            {match.match_format?.toUpperCase()}
                                        </span>
                                    </div>
                                    
                                    <div className="match-teams">
                                        <div className="team">{match.team1_name}</div>
                                        <div className="vs">VS</div>
                                        <div className="team">{match.team2_name}</div>
                                    </div>
                                    
                                    <div className="match-status">
                                        {getStatusText(match.lobby_status, null)}
                                    </div>
                                </div>
                                
                                <button 
                                    className="btn-join-lobby"
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        navigate('/lobby/custom');
                                    }}
                                >
                                    –í–æ–π—Ç–∏ –≤ –ª–æ–±–±–∏
                                </button>
                            </div>
                        ))}
                    </div>
                </section>
            )}
        </div>
    );
}

export default MyActiveMatches;

