// frontend/src/pages/CreateTournamentEntry.js
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
import ModeSelector from './create-tournament/components/ModeSelector';
import CreateTournamentWizard from './create-tournament/CreateTournamentWizard';
import CreateTournamentManual from './create-tournament/CreateTournamentManual';
import DraftRecoveryModal from './create-tournament/components/DraftRecoveryModal';
import './create-tournament/styles/CreateTournamentEntry.css';

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É Wizard –∏ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
 */
function CreateTournamentEntry() {
  const navigate = useNavigate();
  const { user, loading: authLoading } = useAuth();
  const [mode, setMode] = useState(null); // null | 'wizard' | 'manual'
  const [savedDraft, setSavedDraft] = useState(null); // –ù–∞–π–¥–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
  const [showDraftModal, setShowDraftModal] = useState(false); // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–∞–ª–∫—É
  const [checkingDraft, setCheckingDraft] = useState(true); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
  const [draftToLoad, setDraftToLoad] = useState(null); // –ß–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Wizard

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
  useEffect(() => {
    const checkForDraft = async () => {
      if (!user) {
        setCheckingDraft(false);
        return;
      }

      try {
        const token = localStorage.getItem('token');
        if (!token) {
          setCheckingDraft(false);
          return;
        }

        const response = await axios.get('/api/tournaments/drafts', {
          headers: { Authorization: `Bearer ${token}` }
        });

        const drafts = response.data.drafts || [];
        
        if (drafts.length > 0) {
          // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
          const latestDraft = drafts[0];
          setSavedDraft(latestDraft);
          setShowDraftModal(true);
          console.log('üìã –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫:', latestDraft);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', error);
      } finally {
        setCheckingDraft(false);
      }
    };

    if (!authLoading && user) {
      checkForDraft();
    } else {
      setCheckingDraft(false);
    }
  }, [user, authLoading]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const getVerificationStatus = () => {
    if (!user) return { canCreate: false, reason: 'not_logged_in' };
    if (!user.email) return { canCreate: false, reason: 'no_email' };
    if (!user.is_verified) return { canCreate: false, reason: 'not_verified' };
    return { canCreate: true, reason: 'verified' };
  };

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
  const handleRestoreDraft = () => {
    setDraftToLoad(savedDraft);
    setShowDraftModal(false);
    setMode('wizard'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º Wizard —Å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
  const handleDeleteDraft = async () => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
      return;
    }

    try {
      const token = localStorage.getItem('token');
      await axios.delete(`/api/tournaments/drafts/${savedDraft.id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      console.log('üóëÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω');
      setSavedDraft(null);
      setShowDraftModal(false);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', error);
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞');
    }
  };

  // –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫)
  const handleStartNew = () => {
    setShowDraftModal(false);
    // –ù–µ —É–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (authLoading || checkingDraft) {
    return (
      <div className="create-tournament-entry loading">
        <div className="loading-spinner"></div>
        <p>{authLoading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...' : '–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤...'}</p>
      </div>
    );
  }

  const verificationStatus = getVerificationStatus();

  // –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  if (!verificationStatus.canCreate) {
    return (
      <div className="create-tournament-entry">
        <div className="verification-warning">
          <div className="warning-icon">‚ö†Ô∏è</div>
          <div className="warning-content">
            <h2>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</h2>
            {verificationStatus.reason === 'not_logged_in' && (
              <>
                <p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.</p>
                <button className="btn btn-primary" onClick={() => navigate('/register')}>
                  –í–æ–π—Ç–∏ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                </button>
              </>
            )}
            {verificationStatus.reason === 'no_email' && (
              <>
                <p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å email –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.</p>
                <button className="btn btn-primary" onClick={() => navigate('/profile')}>
                  –ü—Ä–∏–≤—è–∑–∞—Ç—å email –≤ –ø—Ä–æ—Ñ–∏–ª–µ
                </button>
              </>
            )}
            {verificationStatus.reason === 'not_verified' && (
              <>
                <p>–í–∞—à email <strong>{user.email}</strong> –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.</p>
                <button className="btn btn-primary" onClick={() => navigate('/profile')}>
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email –≤ –ø—Ä–æ—Ñ–∏–ª–µ
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    );
  }

  // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –Ω–µ —Å–¥–µ–ª–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
  if (!mode) {
    return (
      <div className="create-tournament-entry">
        <div className="entry-header">
          <h1>–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</h1>
          <p className="entry-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞</p>
        </div>
        <ModeSelector onSelect={setMode} />
      </div>
    );
  }

  // –†–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  return (
    <div className="create-tournament-entry">
      {/* –ú–æ–¥–∞–ª–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ */}
      {showDraftModal && savedDraft && (
        <DraftRecoveryModal
          draft={savedDraft}
          onRestore={handleRestoreDraft}
          onDelete={handleDeleteDraft}
          onCancel={handleStartNew}
        />
      )}

      {mode === 'wizard' && (
        <CreateTournamentWizard 
          onBack={() => setMode(null)} 
          initialDraft={draftToLoad} // üÜï –ü–µ—Ä–µ–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        />
      )}
      {mode === 'manual' && <CreateTournamentManual onBack={() => setMode(null)} />}
    </div>
  );
}

export default CreateTournamentEntry;

