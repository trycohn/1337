import { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import axios from 'axios';
import PasswordStrengthIndicator from '../components/PasswordStrengthIndicator';
import '../styles/components/Auth.css';

function AuthPage() {
  const [isLogin, setIsLogin] = useState(true);
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);
  const [validationErrors, setValidationErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  
  // üÜï –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ì–û –û–ö–ù–ê
  const [showWelcomeModal, setShowWelcomeModal] = useState(false);
  const [welcomeData, setWelcomeData] = useState({ username: '', email: '' });
  
  const navigate = useNavigate();
  const location = useLocation();
  const { login } = useAuth();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä register –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    if (searchParams.get('register') === 'true') {
      setIsLogin(false);
    }
  }, [location]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç Steam
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const token = searchParams.get('token');
    
    if (token) {
      login(token);
      setSuccessMessage('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ —á–µ—Ä–µ–∑ Steam!');
      window.history.replaceState({}, document.title, '/login');
      setTimeout(() => {
        navigate('/');
      }, 1500);
    }
    
    const errorMessage = searchParams.get('message');
    if (errorMessage) {
      setError(decodeURIComponent(errorMessage));
      window.history.replaceState({}, document.title, '/login');
    }
  }, [location, navigate]);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
  const clearFieldError = (fieldName) => {
    if (validationErrors[fieldName]) {
      setValidationErrors(prev => ({
        ...prev,
        [fieldName]: ''
      }));
    }
    if (error) {
      setError(null);
    }
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  const validateEmail = (email) => {
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return emailRegex.test(email);
  };

  // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  const validatePassword = (password) => {
    const errors = [];
    
    if (password.length < 8) {
      errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
    }
    
    if (!/[A-Z]/.test(password)) {
      errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã');
    }
    
    if (!/[a-z]/.test(password)) {
      errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã');
    }
    
    if (!/\d/.test(password)) {
      errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã');
    }
    
    if (/\s/.test(password)) {
      errors.push('–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã');
    }
    
    return errors;
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const validateRegistrationForm = () => {
    const errors = {};
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!username.trim()) {
      errors.username = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (username.length < 3) {
      errors.username = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
    } else if (username.length > 20) {
      errors.username = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤';
    } else if (!/^[a-zA-Z0-9_-]+$/.test(username)) {
      errors.username = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if (!email.trim()) {
      errors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!validateEmail(email)) {
      errors.email = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const passwordErrors = validatePassword(password);
    if (passwordErrors.length > 0) {
      errors.password = passwordErrors[0];
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    if (!confirmPassword) {
      errors.confirmPassword = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å';
    } else if (password !== confirmPassword) {
      errors.confirmPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
    }
    
    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const response = await axios.post('/api/users/login', {
        email,
        password,
      });
      
      await login(response.data.token);
      setSuccessMessage('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!');
      setError(null);
      
      setTimeout(() => {
        navigate('/');
      }, 1500);
    } catch (err) {
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      setSuccessMessage(null);
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    setError(null);
    
    if (!validateRegistrationForm()) {
      return;
    }

    setIsLoading(true);
    try {
      const response = await axios.post('/api/users/register', {
        username: username.trim(),
        email: email.trim().toLowerCase(),
        password,
      });
      
      // üÜï –ü–û–ö–ê–ó–´–í–ê–ï–ú –ú–û–î–ê–õ–¨–ù–û–ï –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –û–ö–ù–û
      if (response.data.token) {
        await login(response.data.token);
        setWelcomeData({ 
          username: username.trim(), 
          email: email.trim().toLowerCase() 
        });
        setShowWelcomeModal(true);
      } else {
        setSuccessMessage(`–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ù–∞ email ${email} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ.`);
      }
      
      setError(null);
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setUsername('');
      setEmail('');
      setPassword('');
      setConfirmPassword('');
      setValidationErrors({});
      
      // üÜï –ü–ï–†–ï–•–û–î –ù–ê –ì–õ–ê–í–ù–£–Æ –°–¢–†–ê–ù–ò–¶–£ –ü–û–°–õ–ï –ó–ê–ö–†–´–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê
      if (response.data.token) {
        setTimeout(() => {
          setShowWelcomeModal(false);
          navigate('/');
        }, 4000); // 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      } else {
        setTimeout(() => {
          navigate('/');
        }, 2000);
      }
    } catch (err) {
      const errorMessage = err.response?.data?.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
      setError(errorMessage);
      setSuccessMessage(null);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
      if (err.response?.data?.field) {
        setValidationErrors(prev => ({
          ...prev,
          [err.response.data.field]: errorMessage
        }));
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleSteamLogin = () => {
    const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';
    window.location.href = `${baseUrl}/api/users/steam`;
  };

  const handleFaceitLogin = () => {
    const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';
    window.location.href = `${baseUrl}/api/users/faceit-login`;
  };

  return (
    <div className="auth-page">
      <div className="auth-container">
        <div className="auth-tabs">
          <button
            className={`auth-tab ${isLogin ? 'active' : ''}`}
            onClick={() => setIsLogin(true)}
          >
            –í—Ö–æ–¥
          </button>
          <button
            className={`auth-tab ${!isLogin ? 'active' : ''}`}
            onClick={() => setIsLogin(false)}
          >
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
          </button>
        </div>
        
        <div className="auth-form-container">
          <form 
            onSubmit={handleLogin} 
            className={`auth-form ${isLogin ? 'visible' : 'hidden'}`}
          >
            <h2>–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</h2>
            <div className="form-group">
              <input
                type="email"
                placeholder="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="form-group">
              <input
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            <div className="forgot-password">
              <a href="/forgot-password">
                –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
              </a>
            </div>
            <button 
              type="submit" 
              className={`auth-button ${isLoading ? 'loading' : ''}`}
              disabled={isLoading}
            >
              {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
            </button>
            
            <div className="auth-divider">
              <span className="auth-divider-text">–∏–ª–∏</span>
            </div>
            
            <div className="social-login-buttons">
              <button 
                type="button" 
                className="steam-button"
                onClick={handleSteamLogin}
              >
                –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Steam
              </button>
              <button 
                type="button" 
                className="faceit-button"
                onClick={handleFaceitLogin}
              >
                –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ FACEIT
              </button>
            </div>
          </form>
          
          <form 
            onSubmit={handleRegister} 
            className={`auth-form ${!isLogin ? 'visible' : 'hidden'}`}
          >
            <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
            <div className="form-group">
              <input
                type="text"
                placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                value={username}
                onChange={(e) => {
                  setUsername(e.target.value);
                  clearFieldError('username');
                }}
                className={validationErrors.username ? 'error' : ''}
                maxLength="20"
                required
              />
              {validationErrors.username && (
                <div className="field-error">{validationErrors.username}</div>
              )}
            </div>
            <div className="form-group">
              <input
                type="email"
                placeholder="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
                value={email}
                onChange={(e) => {
                  setEmail(e.target.value);
                  clearFieldError('email');
                }}
                className={validationErrors.email ? 'error' : ''}
                required
              />
              {validationErrors.email && (
                <div className="field-error">{validationErrors.email}</div>
              )}
            </div>
            <div className="form-group">
              <input
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => {
                  setPassword(e.target.value);
                  clearFieldError('password');
                }}
                className={validationErrors.password ? 'error' : ''}
                required
              />
              {validationErrors.password && (
                <div className="field-error">{validationErrors.password}</div>
              )}
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è */}
              {password && (
                <PasswordStrengthIndicator 
                  password={password}
                  confirmPassword={confirmPassword}
                />
              )}
            </div>
            <div className="form-group">
              <input
                type="password"
                placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                value={confirmPassword}
                onChange={(e) => {
                  setConfirmPassword(e.target.value);
                  clearFieldError('confirmPassword');
                }}
                className={validationErrors.confirmPassword ? 'error' : ''}
                required
              />
              {validationErrors.confirmPassword && (
                <div className="field-error">{validationErrors.confirmPassword}</div>
              )}
            </div>
            <button 
              type="submit" 
              className={`auth-button ${isLoading ? 'loading' : ''}`}
              disabled={isLoading}
            >
              {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
            </button>
            
            <div className="auth-divider">
              <span className="auth-divider-text">–∏–ª–∏</span>
            </div>
            
            <div className="social-login-buttons">
              <button 
                type="button" 
                className="steam-button"
                onClick={handleSteamLogin}
              >
                –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Steam
              </button>
              <button 
                type="button" 
                className="faceit-button"
                onClick={handleFaceitLogin}
              >
                –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ FACEIT
              </button>
            </div>
          </form>
          
          {error && <p className="error-message">{error}</p>}
          {successMessage && <div className="success-message">{successMessage}</div>}
        </div>
      </div>
      
      {/* üÜï –ú–û–î–ê–õ–¨–ù–û–ï –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –û–ö–ù–û */}
      {showWelcomeModal && (
        <div className="welcome-modal-overlay">
          <div className="welcome-modal">
            <div className="welcome-modal-header">
              <div className="welcome-icon">üéâ</div>
              <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
            </div>
            <div className="welcome-modal-content">
              <h3>–ü—Ä–∏–≤–µ—Ç, {welcomeData.username}!</h3>
              <p>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.</p>
              <p>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ <strong>{welcomeData.email}</strong></p>
              <div className="welcome-features">
                <div className="feature-item">
                  <span className="feature-icon">üèÜ</span>
                  <span>–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö</span>
                </div>
                <div className="feature-item">
                  <span className="feature-icon">üë•</span>
                  <span>–ù–∞—Ö–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</span>
                </div>
                <div className="feature-item">
                  <span className="feature-icon">üìä</span>
                  <span>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</span>
                </div>
              </div>
            </div>
            <div className="welcome-modal-footer">
              <button 
                className="welcome-close-btn"
                onClick={() => {
                  setShowWelcomeModal(false);
                  navigate('/');
                }}
              >
                –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è! üöÄ
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default AuthPage; 