// frontend/src/pages/create-tournament/components/steps/Step4_Rules.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

/**
 * –®–∞–≥ 4: –ü—Ä–∞–≤–∏–ª–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç—á–µ–π
 * –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ä—Ç CS2
 */
function Step4_Rules({ data, format, basicInfo, onChange }) {
  const [cs2Maps, setCs2Maps] = useState([]);
  const [loadingMaps, setLoadingMaps] = useState(false);
  const [mapsInitialized, setMapsInitialized] = useState(false); // üÜï –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

  const handleChange = (field, value) => {
    onChange({ ...data, [field]: value });
  };

  const isCS2 = basicInfo.game === 'counter strike 2';
  
  // üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
  console.log('üîç [Step4_Rules] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è:', {
    format: format?.format,
    participant_type: format?.participant_type,
    isSingleElimination: format?.format === 'single_elimination',
    isDoubleElimination: format?.format === 'double_elimination',
    isTeam: format?.participant_type === 'team',
    shouldShow: format && (format.format === 'single_elimination' || format.format === 'double_elimination') && format.participant_type === 'team'
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç CS2 –∏–∑ –ë–î (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  useEffect(() => {
    if (!isCS2) return;
    if (cs2Maps.length > 0) return; // –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã

    const fetchMaps = async () => {
      try {
        setLoadingMaps(true);
        const response = await axios.get('/api/maps?game=Counter-Strike 2');
        setCs2Maps(response.data);
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç CS2:', response.data.length);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç CS2:', error);
        // Fallback: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É–ª –∫–∞—Ä—Ç
        const fallbackMaps = [
          { id: 1, name: 'de_mirage', display_name: 'Mirage' },
          { id: 2, name: 'de_inferno', display_name: 'Inferno' },
          { id: 3, name: 'de_nuke', display_name: 'Nuke' },
          { id: 4, name: 'de_overpass', display_name: 'Overpass' },
          { id: 5, name: 'de_vertigo', display_name: 'Vertigo' },
          { id: 6, name: 'de_ancient', display_name: 'Ancient' },
          { id: 7, name: 'de_anubis', display_name: 'Anubis' }
        ];
        setCs2Maps(fallbackMaps);
      } finally {
        setLoadingMaps(false);
      }
    };

    fetchMaps();
  }, [isCS2, cs2Maps.length]);

  // –ê–≤—Ç–æ–≤—ã–±–æ—Ä –≤—Å–µ—Ö –∫–∞—Ä—Ç –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ª–æ–±–±–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  useEffect(() => {
    if (!data.lobby_enabled) return;
    if (!cs2Maps.length) return;
    if (mapsInitialized) return; // –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    if (data.selected_maps && data.selected_maps.length > 0) return; // –£–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã
    const allMapNames = cs2Maps.map(m => m.name);
    if (allMapNames.length === 7) {
      handleChange('selected_maps', allMapNames);
      setMapsInitialized(true); // üÜï –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    }
  }, [data.lobby_enabled, cs2Maps.length, mapsInitialized, data.selected_maps]); // –£–±—Ä–∞–ª–∏ handleChange –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
  const handleMapToggle = (mapName) => {
    const currentMaps = data.selected_maps || [];
    const isSelected = currentMaps.includes(mapName);

    if (isSelected) {
      // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É
      handleChange('selected_maps', currentMaps.filter(m => m !== mapName));
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
      handleChange('selected_maps', [...currentMaps, mapName]);
    }
  };

  // –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã
  const handleSelectAllMaps = () => {
    const allMapNames = cs2Maps.map(m => m.name);
    handleChange('selected_maps', allMapNames);
  };

  // –°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç
  const handleDeselectAllMaps = () => {
    handleChange('selected_maps', []);
  };

  return (
    <div className="wizard-step step-rules">
      <div className="step-header">
        <h2>üìú –ü—Ä–∞–≤–∏–ª–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
        <p className="step-description">
          –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ç—á–µ–π
        </p>
      </div>

      <div className="step-section">
        <h3>–ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞</h3>
        
        <div className="form-group">
          <label>–ü—Ä–∞–≤–∏–ª–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
          <textarea
            placeholder="–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è..."
            value={data.rules || ''}
            onChange={(e) => handleChange('rules', e.target.value)}
            rows="5"
          />
          <small className="form-hint">
            –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —à—Ç—Ä–∞—Ñ—ã –∏ —Ç.–¥.
          </small>
        </div>

        <div className="form-group">
          <label>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</label>
          <select
            value={data.seeding_type || 'random'}
            onChange={(e) => handleChange('seeding_type', e.target.value)}
          >
            <option value="random">–°–ª—É—á–∞–π–Ω–æ–µ</option>
            <option value="rating">–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É</option>
            <option value="balanced">–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ</option>
          </select>
        </div>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏ –¥–ª—è CS2 */}
      {isCS2 && (
        <div className="step-section">
          <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏ CS2</h3>
          
          <div className="form-group">
            <label className="checkbox-label">
              <input
                type="checkbox"
                checked={data.lobby_enabled || false}
                onChange={(e) => handleChange('lobby_enabled', e.target.checked)}
              />
              <span>–í–∫–ª—é—á–∏—Ç—å –ª–æ–±–±–∏ –º–∞—Ç—á–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ä—Ç</span>
            </label>
            <small className="form-hint">
              –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –∏ –±–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –º–∞—Ç—á–∞
            </small>
          </div>

          {data.lobby_enabled && (
            <>
              <div className="form-group">
                <label>–§–æ—Ä–º–∞—Ç –º–∞—Ç—á–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</label>
                <select
                  value={data.lobby_match_format || ''}
                  onChange={(e) => handleChange('lobby_match_format', e.target.value)}
                >
                  <option value="">–í—ã–±–æ—Ä –≤ –ª–æ–±–±–∏</option>
                  <option value="bo1">Best of 1</option>
                  <option value="bo3">Best of 3</option>
                  <option value="bo5">Best of 5</option>
                </select>
                <small className="form-hint">
                  –§–æ—Ä–º–∞—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –º–∞—Ç—á–∞–º, –∫—Ä–æ–º–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω –æ—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–Ω–∞–ª–∞)
                </small>
              </div>

              {/* üÜï –û—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª–∞ */}
              <div className="form-group">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={data.enable_final_format || false}
                    onChange={(e) => handleChange('enable_final_format', e.target.checked)}
                  />
                  <span>–û—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞—Ç—á–µ–π —Ñ–∏–Ω–∞–ª–∞</span>
                </label>
                <small className="form-hint">
                  –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π (—Ñ–∏–Ω–∞–ª, –ø–æ–ª—É—Ñ–∏–Ω–∞–ª, –≥—Ä–∞–Ω–¥-—Ñ–∏–Ω–∞–ª)
                </small>
              </div>

              {data.enable_final_format && (
                <div className="form-group" style={{ marginLeft: '30px', paddingLeft: '15px', borderLeft: '2px solid #ff0000' }}>
                  <label>–§–æ—Ä–º–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π</label>
                  <select
                    value={data.final_match_format || 'bo3'}
                    onChange={(e) => handleChange('final_match_format', e.target.value)}
                  >
                    <option value="bo1">Best of 1</option>
                    <option value="bo3">Best of 3</option>
                    <option value="bo5">Best of 5</option>
                  </select>
                  <small className="form-hint">
                    –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫ —Ñ–∏–Ω–∞–ª—É, –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∞–º –∏ –≥—Ä–∞–Ω–¥-—Ñ–∏–Ω–∞–ª—É
                  </small>
                </div>
              )}

              {/* –í—ã–±–æ—Ä –∫–∞—Ä—Ç —Ç—É—Ä–Ω–∏—Ä–∞ */}
              <div className="form-group">
                <label>–ö–∞—Ä—Ç—ã —Ç—É—Ä–Ω–∏—Ä–∞ (–≤—ã–±–µ—Ä–∏—Ç–µ 7 –∫–∞—Ä—Ç) *</label>
                
                {loadingMaps ? (
                  <div style={{ padding: '20px', textAlign: 'center', color: '#888' }}>
                    –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç...
                  </div>
                ) : (
                  <>
                    {/* –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ */}
                    <div style={{ 
                      display: 'flex', 
                      gap: '10px', 
                      marginBottom: '15px',
                      flexWrap: 'wrap'
                    }}>
                      <button
                        type="button"
                        className="btn btn-secondary"
                        onClick={handleSelectAllMaps}
                        style={{ fontSize: '13px', padding: '6px 12px' }}
                      >
                        ‚úì –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
                      </button>
                      <button
                        type="button"
                        className="btn btn-secondary"
                        onClick={handleDeselectAllMaps}
                        style={{ fontSize: '13px', padding: '6px 12px' }}
                      >
                        ‚úó –°–Ω—è—Ç—å –≤—ã–±–æ—Ä
                      </button>
                      <div style={{ 
                        marginLeft: 'auto', 
                        padding: '6px 12px', 
                        background: '#1a1a1a',
                        border: '1px solid #333',
                        borderRadius: '6px',
                        fontSize: '13px',
                        color: (data.selected_maps?.length === 7) ? '#00ff00' : '#888'
                      }}>
                        –í—ã–±—Ä–∞–Ω–æ: {data.selected_maps?.length || 0}/7
                      </div>
                    </div>

                    {/* –°–µ—Ç–∫–∞ –∫–∞—Ä—Ç */}
                    <div className="maps-grid">
                      {cs2Maps.map((map) => {
                        const isSelected = (data.selected_maps || []).includes(map.name);
                        
                        return (
                          <label
                            key={map.id}
                            className={`map-card ${isSelected ? 'selected' : ''}`}
                          >
                            <input
                              type="checkbox"
                              value={map.name}
                              checked={isSelected}
                              onChange={() => handleMapToggle(map.name)}
                            />
                            
                            {/* –ò–∫–æ–Ω–∫–∞ —á–µ–∫–±–æ–∫—Å–∞ */}
                            <div className="map-checkbox-icon">
                              {isSelected && '‚úì'}
                            </div>

                            {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã */}
                            <span className="map-name">
                              {map.display_name || map.name.replace('de_', '').charAt(0).toUpperCase() + map.name.replace('de_', '').slice(1)}
                            </span>
                          </label>
                        );
                      })}
                    </div>

                    {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–∞—Ä—Ç */}
                    {data.selected_maps && data.selected_maps.length !== 7 && (
                      <div style={{
                        marginTop: '12px',
                        padding: '10px 12px',
                        background: 'rgba(255, 165, 0, 0.1)',
                        border: '1px solid rgba(255, 165, 0, 0.3)',
                        borderRadius: '6px',
                        color: '#ffa500',
                        fontSize: '13px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px'
                      }}>
                        ‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 7 –∫–∞—Ä—Ç (–≤—ã–±—Ä–∞–Ω–æ: {data.selected_maps.length})
                      </div>
                    )}

                    {data.selected_maps && data.selected_maps.length === 7 && (
                      <div style={{
                        marginTop: '12px',
                        padding: '10px 12px',
                        background: 'rgba(0, 255, 0, 0.1)',
                        border: '1px solid rgba(0, 255, 0, 0.3)',
                        borderRadius: '6px',
                        color: '#00ff00',
                        fontSize: '13px',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px'
                      }}>
                        ‚úì –í—ã–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
                      </div>
                    )}
                  </>
                )}
              </div>
            </>
          )}
        </div>
      )}

      {/* –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ Single/Double Elimination */}
      {format && (format.format === 'single_elimination' || format.format === 'double_elimination') && format.participant_type === 'team' && (
        <div className="step-section">
          <h3>üìã –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è</h3>
          
          <div className="form-group">
            <label className="checkbox-label">
              <input
                type="checkbox"
                checked={format.waiting_list_enabled || false}
                onChange={(e) => onChange({ ...format, waiting_list_enabled: e.target.checked })}
              />
              <span>–í–∫–ª—é—á–∏—Ç—å –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–ª–æ –∏–≥—Ä–æ–∫–æ–≤?</span>
            </label>
            <small className="form-hint">
              üìã –ò–≥—Ä–æ–∫–∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥ —Å–º–æ–≥—É—Ç –∑–∞—è–≤–∏—Ç—å—Å—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é
            </small>
          </div>

          {format.waiting_list_enabled && (
            <div style={{ marginTop: '16px', paddingLeft: '30px', paddingTop: '12px', borderLeft: '2px solid #ff0000' }}>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={format.waiting_list_require_faceit || false}
                    onChange={(e) => onChange({ ...format, waiting_list_require_faceit: e.target.checked })}
                  />
                  <span>–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É FACEIT –∞–∫–∫–∞—É–Ω—Ç–∞</span>
                </label>
                
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={format.waiting_list_require_steam || false}
                    onChange={(e) => onChange({ ...format, waiting_list_require_steam: e.target.checked })}
                  />
                  <span>–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É Steam ID</span>
                </label>
                
                <small className="form-hint" style={{ marginTop: '8px', color: '#888' }}>
                  ‚ö†Ô∏è –ò–≥—Ä–æ–∫–∏ –±–µ–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –Ω–µ —Å–º–æ–≥—É—Ç –∑–∞—è–≤–∏—Ç—å—Å—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
                </small>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default Step4_Rules;

