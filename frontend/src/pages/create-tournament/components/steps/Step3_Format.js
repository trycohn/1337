// frontend/src/pages/create-tournament/components/steps/Step3_Format.js
import React, { useEffect } from 'react';

/**
 * –®–∞–≥ 3: –§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
 */
function Step3_Format({ data, basicInfo, onChange }) {
  const handleChange = (field, value) => {
    onChange({ ...data, [field]: value });
  };

  const isCS2 = basicInfo.game === 'counter strike 2';
  const isMixFormat = data.format === 'mix';
  const isSingleOrDouble = data.format === 'single' || data.format === 'double';

  // üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è bracket_type —Å format
  useEffect(() => {
    if (data.format === 'single' && data.bracket_type !== 'single_elimination') {
      onChange({ ...data, bracket_type: 'single_elimination' });
    } else if (data.format === 'double' && data.bracket_type !== 'double_elimination') {
      onChange({ ...data, bracket_type: 'double_elimination' });
    }
  }, [data.format, data.bracket_type, onChange, data]);

  // üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ participant_type –¥–ª—è Mix
  useEffect(() => {
    if (isMixFormat && data.participant_type !== 'solo') {
      onChange({ ...data, participant_type: 'solo' });
    }
  }, [isMixFormat, data.participant_type, onChange, data]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
  const handleFormatChange = (newFormat) => {
    const updates = { format: newFormat };
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bracket_type –∏ participant_type
    if (newFormat === 'single') {
      updates.bracket_type = 'single_elimination';
      updates.participant_type = 'team'; // ‚úÖ –í—Å–µ–≥–¥–∞ team –¥–ª—è Single/Double
      updates.team_size = 5; // –î–µ—Ñ–æ–ª—Ç 5v5
    } else if (newFormat === 'double') {
      updates.bracket_type = 'double_elimination';
      updates.participant_type = 'team'; // ‚úÖ –í—Å–µ–≥–¥–∞ team –¥–ª—è Single/Double
      updates.team_size = 5; // –î–µ—Ñ–æ–ª—Ç 5v5
    } else if (newFormat === 'mix') {
      updates.bracket_type = 'swiss';
      updates.participant_type = 'solo'; // ‚úÖ Solo —Ç–æ–ª—å–∫–æ –¥–ª—è Mix
      updates.team_size = 5;
      updates.mix_type = 'classic';
      updates.mix_rating_type = 'faceit';
    }
    
    onChange({ ...data, ...updates });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ UI –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ CS2
  // –í–Ω—É—Ç—Ä–∏ —Ö—Ä–∞–Ω–∏—Ç team_size, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ "5—Ö5" –∏–ª–∏ "2—Ö2"
  const handleCS2ModeChange = (mode) => {
    const updates = { 
      participant_type: 'team' // ‚úÖ –û—Å—Ç–∞–µ—Ç—Å—è team
    };
    
    if (mode === '5v5') {
      updates.team_size = 5;
    } else if (mode === '2v2') {
      updates.team_size = 2;
    }
    
    onChange({ ...data, ...updates });
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π CS2 —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ team_size
  const getCurrentCS2Mode = () => {
    if (data.participant_type !== 'team') return null;
    return data.team_size === 2 ? '2v2' : '5v5';
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è bracket_type
  const getBracketTypeLabel = () => {
    if (data.format === 'single') return 'Single Elimination (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)';
    if (data.format === 'double') return 'Double Elimination (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)';
    return '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Ç–∫–∏';
  };

  return (
    <div className="wizard-step step-format">
      <div className="step-header">
        <h2>üéØ –§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞</h2>
        <p className="step-description">
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è
        </p>
      </div>

      <div className="step-section">
        <h3>–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞</h3>
        
        <div className="form-group">
          <label>–§–æ—Ä–º–∞—Ç *</label>
          <select
            value={data.format || ''}
            onChange={(e) => handleFormatChange(e.target.value)}
            required
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç</option>
            <option value="single">Single Elimination</option>
            <option value="double">Double Elimination</option>
            <option value="mix">Mix (–ê–≤—Ç–æ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥)</option>
          </select>
          <small className="form-hint">
            {data.format === 'single' && '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ'}
            {data.format === 'double' && '–°–∏—Å—Ç–µ–º–∞ –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–±—ã–≤–∞–Ω–∏—è - –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑'}
            {data.format === 'mix' && '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}
          </small>
        </div>

        {/* –¢–∏–ø —Å–µ—Ç–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–ª—è Single/Double, –≤—ã–±–æ—Ä –¥–ª—è Mix) */}
        <div className="form-group">
          <label>–¢–∏–ø —Å–µ—Ç–∫–∏ *</label>
          <select
            value={data.bracket_type || 'single_elimination'}
            onChange={(e) => handleChange('bracket_type', e.target.value)}
            disabled={isSingleOrDouble} // üÜï Disabled –¥–ª—è Single/Double
            required
            style={isSingleOrDouble ? { opacity: 0.6, cursor: 'not-allowed' } : {}}
          >
            {data.format === 'single' && (
              <option value="single_elimination">Single Elimination (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)</option>
            )}
            {data.format === 'double' && (
              <option value="double_elimination">Double Elimination (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)</option>
            )}
            {data.format === 'mix' && (
              <>
                <option value="swiss">Swiss System</option>
                <option value="single_elimination">Single Elimination</option>
                <option value="double_elimination">Double Elimination</option>
              </>
            )}
          </select>
          <small className="form-hint">
            {isSingleOrDouble && '–¢–∏–ø —Å–µ—Ç–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞'}
            {isMixFormat && '–î–ª—è Mix —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Swiss System'}
          </small>
        </div>

        {/* –¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞) */}
        {!isMixFormat && isCS2 && (
          <div className="form-group">
            <label>–†–µ–∂–∏–º CS2 *</label>
            <select
              value={getCurrentCS2Mode() || '5v5'}
              onChange={(e) => handleCS2ModeChange(e.target.value)}
              required
            >
              <option value="5v5">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 5—Ö5</option>
              <option value="2v2">Wingman 2—Ö2</option>
            </select>
            <small className="form-hint">
              {getCurrentCS2Mode() === '5v5' && 'üèÜ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: –∫–æ–º–∞–Ω–¥—ã –∏–∑ 5 –∏–≥—Ä–æ–∫–æ–≤'}
              {getCurrentCS2Mode() === '2v2' && '‚ö° Wingman —Ñ–æ—Ä–º–∞—Ç: –∫–æ–º–∞–Ω–¥—ã –∏–∑ 2 –∏–≥—Ä–æ–∫–æ–≤'}
            </small>
          </div>
        )}

        {isMixFormat && (
          <div className="form-group">
            <label>–¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ *</label>
            <div style={{ 
              padding: '12px', 
              background: '#1a1a1a', 
              border: '1px solid #333', 
              borderRadius: '6px',
              color: '#ccc'
            }}>
              üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π (Solo)
              <small style={{ display: 'block', marginTop: '5px', color: '#888', fontSize: '12px' }}>
                Mix —Ç—É—Ä–Ω–∏—Ä—ã –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ —Å –∞–≤—Ç–æ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥
              </small>
            </div>
          </div>
        )}

        {/* –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã */}
        <div className="form-group">
          <label>–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã *</label>
          <input
            type="number"
            min="1"
            max="10"
            value={data.team_size || 5}
            onChange={(e) => handleChange('team_size', parseInt(e.target.value, 10))}
            disabled={!isMixFormat && isCS2} // üÜï –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–ª—è CS2 –≤ Single/Double —Ä–µ–∂–∏–º–µ
            style={
              (!isMixFormat && isCS2) 
                ? { opacity: 0.6, cursor: 'not-allowed', background: '#0a0a0a' } 
                : {}
            }
            required
          />
          <small className="form-hint">
            {!isMixFormat && isCS2 && data.team_size === 5 && 'üîí –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 5—Ö5'}
            {!isMixFormat && isCS2 && data.team_size === 2 && 'üîí –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ Wingman 2—Ö2'}
            {(isMixFormat || !isCS2) && '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ'}
          </small>
        </div>

        {/* –ú–∞–∫—Å–∏–º—É–º –∫–æ–º–∞–Ω–¥ (—Ä–∞–∑–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Solo –∏ Team) */}
        <div className="form-group">
          <label>
            {isMixFormat ? '–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ *' : '–ú–∞–∫—Å–∏–º—É–º –∫–æ–º–∞–Ω–¥ *'}
          </label>
          
          {isMixFormat ? (
            // Solo (Mix) - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
            <>
              <input
                type="number"
                min="4"
                max="128"
                value={data.max_teams || ''}
                onChange={(e) => handleChange('max_teams', e.target.value ? parseInt(e.target.value, 10) : null)}
                placeholder="–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"
              />
              <small className="form-hint">
                –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
              </small>
            </>
          ) : (
            // Team - –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
            <>
              <select
                value={data.max_teams || ''}
                onChange={(e) => handleChange('max_teams', e.target.value ? parseInt(e.target.value, 10) : null)}
                required
              >
                <option value="">–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ</option>
                <option value="4">4 –∫–æ–º–∞–Ω–¥—ã</option>
                <option value="8">8 –∫–æ–º–∞–Ω–¥</option>
                <option value="16">16 –∫–æ–º–∞–Ω–¥</option>
                <option value="32">32 –∫–æ–º–∞–Ω–¥—ã</option>
                <option value="64">64 –∫–æ–º–∞–Ω–¥—ã</option>
              </select>
              <small className="form-hint">
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
              </small>
            </>
          )}
        </div>
      </div>

      {/* Mix —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      {isMixFormat && (
        <div className="step-section">
          <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MIX —Ç—É—Ä–Ω–∏—Ä–∞</h3>
          
          <div className="form-group">
            <label>–¢–∏–ø –º–∏–∫—Å–∞</label>
            <select
              value={data.mix_type || 'classic'}
              onChange={(e) => {
                const newMixType = e.target.value;
                const updates = { mix_type: newMixType };
                
                // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ Full Mix –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏–º Swiss
                if (newMixType === 'full') {
                  updates.bracket_type = 'swiss';
                  updates.mix_rating_type = 'mixed';
                }
                
                onChange({ ...data, ...updates });
              }}
            >
              <option value="classic">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π (—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ 1 —Ä–∞–∑)</option>
              <option value="full">Full MIX (–ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞)</option>
            </select>
            <small className="form-hint">
              {data.mix_type === 'classic' && '–ö–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–∞'}
              {data.mix_type === 'full' && '–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞'}
            </small>
          </div>

          <div className="form-group">
            <label>–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥</label>
            <select
              value={data.mix_rating_type || 'faceit'}
              onChange={(e) => handleChange('mix_rating_type', e.target.value)}
            >
              <option value="faceit">–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É FACEIT</option>
              <option value="premier">–ü–æ —Ä–∞–Ω–≥—É CS2 Premier</option>
              <option value="mixed">–°–ª—É—á–∞–π–Ω–æ–µ</option>
            </select>
            <small className="form-hint">
              –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            </small>
          </div>

          {data.mix_type === 'full' && data.bracket_type === 'swiss' && (
            <div className="form-group">
              <label>–ú–∏–Ω–∏–º—É–º –ø–æ–±–µ–¥ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ —Ñ–∏–Ω–∞–ª</label>
              <input
                type="number"
                min="1"
                max="10"
                value={data.wins_to_win || 4}
                onChange={(e) => handleChange('wins_to_win', parseInt(e.target.value, 10))}
              />
              <small className="form-hint">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ñ–∏–Ω–∞–ª (Swiss System)
              </small>
            </div>
          )}

          {data.mix_rating_type === 'faceit' && (
            <div className="form-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={data.require_faceit_linked || false}
                  onChange={(e) => handleChange('require_faceit_linked', e.target.checked)}
                />
                <span>–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É FACEIT –∞–∫–∫–∞—É–Ω—Ç–∞</span>
              </label>
            </div>
          )}

          {data.mix_rating_type === 'premier' && (
            <div className="form-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={data.require_steam_linked || false}
                  onChange={(e) => handleChange('require_steam_linked', e.target.checked)}
                />
                <span>–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É Steam –∞–∫–∫–∞—É–Ω—Ç–∞</span>
              </label>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default Step3_Format;

