// frontend/src/pages/create-tournament/components/steps/Step2_BasicInfo.js
import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import DatePicker, { registerLocale } from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { ru } from 'date-fns/locale';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è DatePicker
registerLocale('ru', ru);

/**
 * –®–∞–≥ 2: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ
 * –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å DatePicker, –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–≥—Ä –∏ –ª–æ–≥–æ—Ç–∏–ø–∞
 */
function Step2_BasicInfo({ data, onChange }) {
  const [games, setGames] = useState([]);
  const [loadingGames, setLoadingGames] = useState(true);
  const [logoFile, setLogoFile] = useState(null);
  const [logoPreview, setLogoPreview] = useState(null);
  const fileInputRef = useRef(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –∏–∑ –ë–î
  useEffect(() => {
    const fetchGames = async () => {
      try {
        setLoadingGames(true);
        const response = await axios.get('/api/tournaments/games');
        setGames(response.data);
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–≥—Ä:', response.data.length);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä:', error);
        // Fallback: –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        setGames([
          { id: 1, name: 'Counter-Strike 2' },
          { id: 2, name: 'Dota 2' }
        ]);
      } finally {
        setLoadingGames(false);
      }
    };

    fetchGames();
  }, []);

  const handleChange = (field, value) => {
    onChange({ ...data, [field]: value });
  };

  const handleLogoChange = (e) => {
    const file = e.target.files && e.target.files[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 2MB)
    if (file.size > 2 * 1024 * 1024) {
      alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2MB');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      alert('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }

    setLogoFile(file);
    const url = URL.createObjectURL(file);
    setLogoPreview(url);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
    handleChange('logo_file', file);
  };

  const handleRemoveLogo = () => {
    setLogoFile(null);
    setLogoPreview(null);
    handleChange('logo_file', null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="wizard-step step-basic-info">
      <div className="step-header">
        <h2>üìù –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
        <p className="step-description">
          –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —Ç—É—Ä–Ω–∏—Ä–µ
        </p>
      </div>

      <div className="step-section">
        <h3>–û—Å–Ω–æ–≤–Ω–æ–µ</h3>
        
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ */}
        <div className="form-group">
          <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ *</label>
          <input
            type="text"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: CS2 Winter Cup 2025"
            value={data.name || ''}
            onChange={(e) => handleChange('name', e.target.value)}
            maxLength={100}
            required
          />
          <small className="form-hint">
            {data.name?.length || 0}/100 —Å–∏–º–≤–æ–ª–æ–≤
          </small>
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div className="form-group">
          <label>–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</label>
          <textarea
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞, –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏..."
            value={data.description || ''}
            onChange={(e) => handleChange('description', e.target.value)}
            rows="4"
            maxLength={500}
          />
          <small className="form-hint">
            {data.description?.length || 0}/500 —Å–∏–º–≤–æ–ª–æ–≤. –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞.
          </small>
        </div>

        {/* –ò–≥—Ä–∞ */}
        <div className="form-group">
          <label>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ *</label>
          {loadingGames ? (
            <div style={{ padding: '12px', color: '#888' }}>
              –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä...
            </div>
          ) : (
            <>
              <select
                value={data.game || ''}
                onChange={(e) => handleChange('game', e.target.value)}
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É</option>
                {games.map((game) => (
                  <option key={game.id} value={game.name.toLowerCase()}>
                    {game.name}
                  </option>
                ))}
              </select>
              <small className="form-hint">
                –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É —Ç—É—Ä–Ω–∏—Ä–∞. –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
              </small>
            </>
          )}
        </div>

        {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ */}
        <div className="form-group">
          <label>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ *</label>
          <DatePicker
            selected={data.start_date ? new Date(data.start_date) : null}
            onChange={(date) => handleChange('start_date', date)}
            showTimeSelect
            dateFormat="dd.MM.yyyy HH:mm"
            timeFormat="HH:mm"
            timeIntervals={15}
            timeCaption="–í—Ä–µ–º—è"
            placeholderText="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞"
            locale="ru"
            calendarStartDay={1}
            minDate={new Date()}
            className="date-picker-input"
            required
          />
          <small className="form-hint">
            –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
          </small>
        </div>

        {/* –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ */}
        <div className="form-group">
          <label>–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥</label>
          <input
            type="text"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 10,000‚ÇΩ –∏–ª–∏ 5,000 Leet Coins"
            value={data.prize_pool || ''}
            onChange={(e) => handleChange('prize_pool', e.target.value)}
            maxLength={50}
          />
          <small className="form-hint">
            –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
          </small>
        </div>

        {/* –¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ */}
        <div className="form-group">
          <label>–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ *</label>
          <select
            value={data.tournament_type || 'open'}
            onChange={(e) => handleChange('tournament_type', e.target.value)}
            required
          >
            <option value="open">–û—Ç–∫—Ä—ã—Ç—ã–π</option>
            <option value="closed">–ó–∞–∫—Ä—ã—Ç—ã–π</option>
            <option value="hidden">–°–∫—Ä—ã—Ç—ã–π</option>
            <option value="final">–§–∏–Ω–∞–ª —Å–µ—Ä–∏–∏</option>
          </select>
          <small className="form-hint">
            {data.tournament_type === 'open' && 'üåç –°–≤–æ–±–æ–¥–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö'}
            {data.tournament_type === 'closed' && 'üîí –¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º –∏–ª–∏ –∏–∑ –æ—Ç–±–æ—Ä–æ—á–Ω—ã—Ö'}
            {data.tournament_type === 'hidden' && 'üëª –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ'}
            {data.tournament_type === 'final' && 'üèÜ –§–∏–Ω–∞–ª —Å–µ—Ä–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ - —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ—Ç–±–æ—Ä–æ—á–Ω—ã—Ö'}
          </small>
        </div>
      </div>

      {/* –°–µ–∫—Ü–∏—è –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */}
      <div className="step-section">
        <h3>–í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</h3>
        
        <div className="form-group">
          <label>–õ–æ–≥–æ—Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞</label>
          <div style={{ display: 'flex', gap: '15px', alignItems: 'flex-start' }}>
            <button 
              type="button" 
              className="btn btn-secondary"
              onClick={() => fileInputRef.current?.click()}
              style={{ whiteSpace: 'nowrap' }}
            >
              {logoPreview ? 'üì§ –ó–∞–º–µ–Ω–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø' : 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø'}
            </button>
            
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleLogoChange}
              accept="image/*"
              style={{ display: 'none' }}
            />
            
            {logoPreview && (
              <div style={{ position: 'relative' }}>
                <img
                  src={logoPreview}
                  alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ—Ç–∏–ø–∞"
                  style={{
                    width: '100px',
                    height: '100px',
                    objectFit: 'cover',
                    borderRadius: '8px',
                    border: '2px solid #333'
                  }}
                />
                <button
                  type="button"
                  onClick={handleRemoveLogo}
                  style={{
                    position: 'absolute',
                    top: '-8px',
                    right: '-8px',
                    width: '24px',
                    height: '24px',
                    borderRadius: '50%',
                    background: '#ff0000',
                    color: '#fff',
                    border: 'none',
                    cursor: 'pointer',
                    fontSize: '14px',
                    lineHeight: '24px',
                    padding: 0
                  }}
                  title="–£–¥–∞–ª–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø"
                >
                  √ó
                </button>
              </div>
            )}
          </div>
          <small className="form-hint">
            –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 500x500 px, –º–∞–∫—Å–∏–º—É–º 2MB. –§–æ—Ä–º–∞—Ç—ã: JPG, PNG, SVG.
          </small>
        </div>
      </div>
    </div>
  );
}

export default Step2_BasicInfo;

