import React, { createContext, useState, useContext, useEffect, useRef } from 'react';
import api from '../utils/api';

const AuthContext = createContext({
  user: null,
  isAuthenticated: false,
  login: () => {},
  logout: () => {},
  updateUser: () => {},
  loading: false
});

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /api/users/me
  const lastCheckTime = useRef(0);
  const CHECK_COOLDOWN = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const checkAuth = async () => {
      const token = localStorage.getItem('token');
      if (!token) {
        setLoading(false);
        return;
      }

      // –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const now = Date.now();
      if (now - lastCheckTime.current < CHECK_COOLDOWN) {
        console.log('üõ°Ô∏è [AuthContext] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –≤—ã–∑–æ–≤');
        setLoading(false);
        return;
      }
      
      try {
        lastCheckTime.current = now;
        console.log('üîê [AuthContext] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
        const response = await api.get('/api/users/me', {
          headers: { Authorization: `Bearer ${token}` }
        });
        console.log('‚úÖ [AuthContext] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', response.data.username);
        setUser(response.data);
      } catch (error) {
        console.error('‚ùå [AuthContext] –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        localStorage.removeItem('token');
        setUser(null);
      }
      setLoading(false);
    };

    checkAuth();

    // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π localStorage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
    const handleStorageChange = (event) => {
      if (event.key === 'token') {
        if (event.newValue) {
          // –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          checkAuth();
        } else {
          // –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω - –≤—ã—Ö–æ–¥–∏–º
          setUser(null);
        }
      }
    };

    window.addEventListener('storage', handleStorageChange);
    
    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
  const login = async (token, userData) => {
    localStorage.setItem('token', token);
    if (userData) {
      console.log('‚úÖ [AuthContext] –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData.username);
      setUser(userData);
    } else {
      try {
        const response = await api.get('/api/users/me', {
          headers: { Authorization: `Bearer ${token}` }
        });
        console.log('‚úÖ [AuthContext] –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.data.username);
        setUser(response.data);
      } catch (error) {
        console.error('‚ùå [AuthContext] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  const logout = () => {
    console.log('üö™ [AuthContext] –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    localStorage.removeItem('token');
    setUser(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUser = (updatedData) => {
    setUser(prevUser => prevUser ? { ...prevUser, ...updatedData } : null);
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        login,
        logout,
        updateUser,
        loading
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

export default AuthContext; 