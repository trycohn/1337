/**
 * üéØ –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ô HOOK –î–õ–Ø –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–Ø –ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø v2.1
 * 
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–¥–∏–Ω hook
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º .bracket-renderer
 * –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–ø–æ–¥–≤–∏–∂–Ω—ã–º, –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 * 
 * @param {Object} options - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è hook
 * @param {Object} options.initialPosition - –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è {x, y}
 * @param {number} options.initialZoom - –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.6)
 * @param {number} options.minZoom - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± 
 * @param {number} options.maxZoom - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
 * @param {number} options.zoomStep - —à–∞–≥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {boolean} options.requireCtrl - —Ç—Ä–µ–±–æ–≤–∞—Ç—å Ctrl –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–µ—Å–æ–º
 * @param {Array} options.excludeSelectors - CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * @param {Function} options.onDragStart - –∫–æ–ª–±—ç–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
 * @param {Function} options.onDragMove - –∫–æ–ª–±—ç–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
 * @param {Function} options.onDragEnd - –∫–æ–ª–±—ç–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
 * @param {Function} options.onZoomChange - –∫–æ–ª–±—ç–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
 */

import { useRef, useCallback, useMemo } from 'react';
import useDrag from './useDrag';
import useZoom from './useZoom';

const useDragAndZoom = ({
    initialPosition = { x: 0, y: 0 },
    initialZoom = 0.6,
    minZoom = 0.3,
    maxZoom = 3,
    zoomStep = 0.05,
    requireCtrl = true,
    excludeSelectors = [
        '.bracket-navigation-panel',
        '.bracket-nav-icon-button',
        '.bracket-match-card',
        '.bracket-edit-match-btn'
    ],
    onDragStart = null,
    onDragMove = null,
    onDragEnd = null,
    onZoomChange = null,
    enableShiftWheelPan = true
} = {}) => {
    // –ï–¥–∏–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    const containerRef = useRef(null);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º hook –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const {
        position,
        isDragging,
        setPosition,
        resetPosition: resetDragPosition,
        dragHandlers
    } = useDrag({
        initialPosition,
        onDragStart,
        onDragMove,
        onDragEnd,
        excludeSelectors
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º hook –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    const {
        zoom,
        zoomPercentage,
        setZoom,
        zoomIn,
        zoomOut,
        resetZoom: resetZoomLevel,
        canZoomIn,
        canZoomOut,
        zoomHandlers
    } = useZoom({
        initialZoom,
        minZoom,
        maxZoom,
        zoomStep,
        requireCtrl,
        onZoomChange
    });
    
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const resetAll = useCallback(() => {
        resetDragPosition();
        resetZoomLevel();
    }, [resetDragPosition, resetZoomLevel]);
    
    const centerView = useCallback(() => {
        setPosition({ x: 0, y: 0 });
    }, [setPosition]);
    
    const fitToScreen = useCallback(() => {
        setPosition({ x: 0, y: 0 });
        setZoom(initialZoom);
    }, [setPosition, setZoom, initialZoom]);
    
    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è DOM —ç–ª–µ–º–µ–Ω—Ç–∞
    const combinedHandlers = useMemo(() => {
        const handleWheel = (e) => {
            try {
                if (enableShiftWheelPan && e.shiftKey && !e.ctrlKey) {
                    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª: —Å–¥–≤–∏–≥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ –æ—Å–∏ X
                    e.preventDefault();
                    const primaryDelta = Math.abs(e.deltaX) > Math.abs(e.deltaY) ? e.deltaX : e.deltaY;
                    setPosition((prev) => ({ x: prev.x - primaryDelta, y: prev.y }));
                    return;
                }
                if (typeof zoomHandlers.onWheel === 'function') zoomHandlers.onWheel(e);
            } catch (_) {}
        };

        return {
            ref: containerRef,
            style: {
                ...dragHandlers.style,
                transform: `translate(${position.x}px, ${position.y}px) scale(${zoom})`,
                transformOrigin: 'top left'
            },
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag –∏ zoom
            onMouseDown: dragHandlers.onMouseDown,
            onWheel: handleWheel,
            onTouchStart: zoomHandlers.onTouchStart,
            onTouchMove: zoomHandlers.onTouchMove,
            onTouchEnd: zoomHandlers.onTouchEnd
        };
    }, [dragHandlers, zoomHandlers, position, zoom, enableShiftWheelPan, setPosition]);
    
    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    const getTransformedCoordinates = useCallback((clientX, clientY) => {
        const rect = containerRef.current?.getBoundingClientRect();
        if (!rect) return { x: clientX, y: clientY };
        
        const x = (clientX - rect.left - position.x) / zoom;
        const y = (clientY - rect.top - position.y) / zoom;
        
        return { x, y };
    }, [position, zoom]);
    
    const getScreenCoordinates = useCallback((transformedX, transformedY) => {
        const rect = containerRef.current?.getBoundingClientRect();
        if (!rect) return { x: transformedX, y: transformedY };
        
        const x = transformedX * zoom + position.x + rect.left;
        const y = transformedY * zoom + position.y + rect.top;
        
        return { x, y };
    }, [position, zoom]);
    
    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        position,
        zoom,
        isDragging,
        zoomPercentage,
        
        // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π
        setPosition,
        resetPosition: resetDragPosition,
        centerView,
        
        // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º
        zoomIn,
        zoomOut,
        setZoom,
        resetZoom: resetZoomLevel,
        canZoomIn,
        canZoomOut,
        
        // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        resetAll,
        fitToScreen,
        
        // –£—Ç–∏–ª–∏—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        getTransformedCoordinates,
        getScreenCoordinates,
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è DOM
        handlers: combinedHandlers,
        containerRef
    };
};

export default useDragAndZoom; 