/**
 * üéØ –°–û–í–†–ï–ú–ï–ù–ù–´–ô HOOK –î–õ–Ø –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–Ø v2.1
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ mouse events –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å requestAnimationFrame
 * 
 * @param {Object} options - –æ–ø—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
 * @param {Object} options.initialPosition - –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è {x, y}
 * @param {Function} options.onDragStart - –∫–æ–ª–±—ç–∫ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
 * @param {Function} options.onDragMove - –∫–æ–ª–±—ç–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
 * @param {Function} options.onDragEnd - –∫–æ–ª–±—ç–∫ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
 * @param {boolean} options.disabled - –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
 * @param {Array} options.excludeSelectors - CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
 */

import { useState, useRef, useCallback, useEffect } from 'react';

const useDrag = ({
    initialPosition = { x: 0, y: 0 },
    onDragStart = null,
    onDragMove = null,
    onDragEnd = null,
    disabled = false,
    excludeSelectors = []
} = {}) => {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const [position, setPosition] = useState(initialPosition);
    const [isDragging, setIsDragging] = useState(false);
    
    // –†–µ—Ñ—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const dragStateRef = useRef({
        isDragging: false,
        startPosition: { x: 0, y: 0 },
        lastPosition: { x: 0, y: 0 },
        mouseStartPosition: { x: 0, y: 0 },
        animationId: null
    });
    
    const containerRef = useRef(null);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–ª–∂–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const shouldExcludeElement = useCallback((element) => {
        if (!excludeSelectors.length) return false;
        
        for (const selector of excludeSelectors) {
            if (element.matches?.(selector) || element.closest?.(selector)) {
                return true;
            }
        }
        return false;
    }, [excludeSelectors]);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const handleMouseDown = useCallback((e) => {
        if (disabled) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
        if (e.button !== 0) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if (shouldExcludeElement(e.target)) return;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        dragStateRef.current = {
            isDragging: true,
            startPosition: { ...position },
            lastPosition: { ...position },
            mouseStartPosition: { x: e.clientX, y: e.clientY },
            animationId: null
        };
        
        setIsDragging(true);
        
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∫—Ä–æ–ª–ª/–ø–æ–≤–µ–¥–µ–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ —É–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ CSS
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
        const mouseMove = (e) => {
            if (!dragStateRef.current.isDragging) return;
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
            
            // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
            if (dragStateRef.current.animationId) {
                cancelAnimationFrame(dragStateRef.current.animationId);
            }
            
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
            dragStateRef.current.animationId = requestAnimationFrame(() => {
                if (!dragStateRef.current.isDragging) return;
                
                const deltaX = e.clientX - dragStateRef.current.mouseStartPosition.x;
                const deltaY = e.clientY - dragStateRef.current.mouseStartPosition.y;
                
                const newPosition = {
                    x: dragStateRef.current.startPosition.x + deltaX,
                    y: dragStateRef.current.startPosition.y + deltaY
                };
                
                setPosition(newPosition);
                dragStateRef.current.lastPosition = newPosition;
                
                // –ö–æ–ª–±—ç–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                if (onDragMove) {
                    onDragMove({ 
                        position: newPosition,
                        delta: { x: deltaX, y: deltaY },
                        event: e 
                    });
                }
            });
        };
        
        const mouseUp = (e) => {
            if (!dragStateRef.current.isDragging) return;
            
            // –û—Ç–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if (dragStateRef.current.animationId) {
                cancelAnimationFrame(dragStateRef.current.animationId);
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            dragStateRef.current.isDragging = false;
            setIsDragging(false);
            
            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document.removeEventListener('mousemove', mouseMove);
            document.removeEventListener('mouseup', mouseUp);
            
            // –ö–æ–ª–±—ç–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            if (onDragEnd) {
                onDragEnd({ 
                    position: dragStateRef.current.lastPosition,
                    event: e 
                });
            }
        };
        
        document.addEventListener('mousemove', mouseMove, { passive: true });
        document.addEventListener('mouseup', mouseUp, { passive: true });
        
        // –ö–æ–ª–±—ç–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        if (onDragStart) {
            onDragStart({ position, event: e });
        }
    }, [disabled, position, shouldExcludeElement, onDragStart, onDragMove, onDragEnd]);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    // const handleMouseMove = useCallback((e) => {...}, [onDragMove]);
    // const handleMouseUp = useCallback((e) => {...}, [handleMouseMove, onDragEnd]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    useEffect(() => {
        const container = containerRef.current;
        if (!container) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ mousedown –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
        container.addEventListener('mousedown', handleMouseDown, { passive: false });
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        container.style.userSelect = 'none';
        container.style.webkitUserSelect = 'none';
        container.style.msUserSelect = 'none';
        container.style.mozUserSelect = 'none';
        
        return () => {
            container.removeEventListener('mousedown', handleMouseDown);
            
            // –û—Ç–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ cleanup
            if (dragStateRef.current.animationId) {
                cancelAnimationFrame(dragStateRef.current.animationId);
            }
        };
    }, [handleMouseDown]);
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π
    const setDragPosition = useCallback((newPosition) => {
        setPosition(newPosition);
        dragStateRef.current.lastPosition = newPosition;
    }, []);
    
    const resetPosition = useCallback(() => {
        setDragPosition(initialPosition);
    }, [initialPosition, setDragPosition]);
    
    // –û–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ DOM —ç–ª–µ–º–µ–Ω—Ç—É
    const dragHandlers = {
        ref: containerRef,
        style: {
            cursor: isDragging ? 'grabbing' : 'grab',
            transform: `translate(${position.x}px, ${position.y}px)`,
            willChange: isDragging ? 'transform' : 'auto',
            userSelect: 'none',
            webkitUserSelect: 'none',
            msUserSelect: 'none',
            mozUserSelect: 'none'
        },
        onMouseDown: handleMouseDown
    };
    
    return {
        position,
        isDragging,
        setPosition: setDragPosition,
        resetPosition,
        dragHandlers,
        containerRef
    };
};

export default useDrag; 