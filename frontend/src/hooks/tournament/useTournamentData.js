/**
 * useTournamentData - Custom Hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞
 * 
 * @version 1.1.0 
 * @created 2025-01-22
 * @updated 2025-01-22 (VDS deployment update)
 * 
 * –ß–∞—Å—Ç—å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã TournamentDetails v2.0
 * –ò–∑–≤–ª–µ—á–µ–Ω –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:
 * - –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
 * - –¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ 
 * - –†–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 * - Performance –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

import { useState, useEffect, useCallback } from 'react';
import api from '../../utils/api';

/**
 * Custom hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞
 * –ò–∑–≤–ª–µ—á–µ–Ω –∏–∑ TournamentDetails.js –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
 */
export const useTournamentData = (tournamentId) => {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    const [tournament, setTournament] = useState(null);
    const [matches, setMatches] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [creator, setCreator] = useState(null);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–µ—à–∞
    const fetchTournamentDataForcefully = useCallback(async (clearCache = false) => {
        if (!tournamentId) return;

        try {
            setLoading(true);
            setError(null);

            // –û—á–∏—â–∞–µ–º –∫–µ—à –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
            if (clearCache) {
                const cacheKeys = ['tournament_', 'user_', 'teams_', 'matches_'];
                cacheKeys.forEach(prefix => {
                    Object.keys(localStorage).forEach(key => {
                        if (key.startsWith(prefix)) {
                            localStorage.removeItem(key);
                        }
                    });
                });
                console.log('üßπ –ö–µ—à —Ç—É—Ä–Ω–∏—Ä–∞ –æ—á–∏—â–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            }

            console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ ID: ${tournamentId}`);
            
            const response = await api.get(`/api/tournaments/${tournamentId}`);
            
            if (response.data) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data.name);
                setTournament(response.data);
                setMatches(response.data.matches || []);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (response.data.created_by) {
                    await fetchCreatorInfo(response.data.created_by);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            setError(error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä');
        } finally {
            setLoading(false);
        }
    }, [tournamentId]);

    // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (—Å –∫–µ—à–µ–º)
    const fetchTournamentData = useCallback(async () => {
        return fetchTournamentDataForcefully(false);
    }, [fetchTournamentDataForcefully]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞
    const fetchCreatorInfo = useCallback(async (creatorId) => {
        if (!creatorId) return;
        
        try {
            console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ (ID: ${creatorId})`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            const cacheKey = `user_${creatorId}`;
            const cachedCreator = localStorage.getItem(cacheKey);
            const cacheTimestamp = localStorage.getItem(`${cacheKey}_timestamp`);
            const cacheValidityPeriod = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
            
            if (cachedCreator && cacheTimestamp) {
                const now = new Date().getTime();
                const timestamp = parseInt(cacheTimestamp, 10);
                
                if (!isNaN(timestamp) && (now - timestamp) < cacheValidityPeriod) {
                    try {
                        const parsedCreator = JSON.parse(cachedCreator);
                        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è');
                        setCreator(parsedCreator);
                        return;
                    } catch (parseError) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç–µ–ª—è:', parseError);
                    }
                }
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
            const response = await api.get(`/api/users/profile/${creatorId}`);
            
            if (response.data) {
                console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', response.data.username);
                setCreator(response.data);
                
                // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                localStorage.setItem(cacheKey, JSON.stringify(response.data));
                localStorage.setItem(`${cacheKey}_timestamp`, Date.now().toString());
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç–µ–ª—è:', error);
            
            // Fallback - –∏—â–µ–º –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
            if (tournament && tournament.participants) {
                const creatorFromParticipants = tournament.participants.find(
                    participant => participant.user_id === creatorId || participant.id === creatorId
                );
                
                if (creatorFromParticipants) {
                    const creatorInfo = {
                        id: creatorId,
                        username: creatorFromParticipants.name || `–£—á–∞—Å—Ç–Ω–∏–∫ #${creatorId}`,
                        avatar_url: creatorFromParticipants.avatar_url || null,
                        fromParticipants: true
                    };
                    setCreator(creatorInfo);
                }
            }
        }
    }, [tournament]);

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
    const updateTournament = useCallback((updatedData) => {
        setTournament(prev => ({ ...prev, ...updatedData }));
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π  
    const updateMatches = useCallback((updatedMatches) => {
        setMatches(updatedMatches);
    }, []);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        if (tournamentId) {
            fetchTournamentData();
        }
    }, [tournamentId, fetchTournamentData]);

    return {
        // –î–∞–Ω–Ω—ã–µ
        tournament,
        matches,
        creator,
        loading,
        error,
        
        // –§—É–Ω–∫—Ü–∏–∏
        fetchTournamentData,
        fetchTournamentDataForcefully,
        fetchCreatorInfo,
        updateTournament,
        updateMatches,
        
        // –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        setTournament,
        setMatches,
        setCreator,
        setLoading,
        setError
    };
}; 