import { useEffect, useRef, useState, useCallback } from 'react';
import io from 'socket.io-client';

const API_URL = process.env.REACT_APP_API_URL || 'https://1337community.com';

/**
 * –•—É–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket —Å–æ–±—ã—Ç–∏—è–º —Ç—É—Ä–Ω–∏—Ä–∞
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç live –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –º–∞—Ç—á–µ–π –∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
 */
function useTournamentSocket({ 
    tournamentId, 
    user, 
    onTournamentUpdate,
    onParticipantUpdate,
    onError 
}) {
    const socketRef = useRef(null);
    const [isConnected, setIsConnected] = useState(false);
    const reconnectAttemptsRef = useRef(0);
    const maxReconnectAttempts = 5;

    const disconnect = useCallback(() => {
        if (socketRef.current) {
            console.log(`üîå [useTournamentSocket] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            socketRef.current.disconnect();
            socketRef.current = null;
            setIsConnected(false);
        }
    }, [tournamentId]);

    useEffect(() => {
        const token = localStorage.getItem('token');
        
        // –ù–µ —Å–æ–∑–¥–∞–µ–º socket –µ—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (!tournamentId || !token) {
            if (tournamentId) {
                console.warn('‚ö†Ô∏è [useTournamentSocket] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', { 
                    tournamentId,
                    hasToken: !!token
                });
            }
            return;
        }

        console.log(`üîå [useTournamentSocket] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É ${tournamentId}`);
        
        // –°–æ–∑–¥–∞–µ–º socket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const socket = io(API_URL, { 
            auth: { token }, 
            transports: ['polling', 'websocket'],
            upgrade: true,
            reconnectionDelay: 1000,
            reconnectionDelayMax: 5000,
            reconnectionAttempts: maxReconnectAttempts,
            timeout: 10000
        });
        
        socketRef.current = socket;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        socket.on('connect', () => {
            console.log(`‚úÖ [useTournamentSocket] Socket –ø–æ–¥–∫–ª—é—á–µ–Ω`, { 
                socketId: socket.id,
                tournamentId
            });
            
            setIsConnected(true);
            reconnectAttemptsRef.current = 0;
            
            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Ç—É—Ä–Ω–∏—Ä–∞
            socket.emit('join_tournament', { 
                tournamentId: Number(tournamentId),
                userId: user?.id 
            });
            
            console.log(`üì° [useTournamentSocket] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ tournament_${tournamentId}`);
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä–∞
        socket.on('tournament_update', (data) => {
            console.log(`üîÑ [useTournamentSocket] tournament_update –ø–æ–ª—É—á–µ–Ω–æ:`, data);
            if (data && onTournamentUpdate) {
                onTournamentUpdate(data);
            }
        });

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        socket.on('participant_update', (data) => {
            console.log(`üë• [useTournamentSocket] participant_update –ø–æ–ª—É—á–µ–Ω–æ:`, data);
            if (data && onParticipantUpdate) {
                onParticipantUpdate(data);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
        socket.on('error', (error) => {
            console.error(`‚ùå [useTournamentSocket] Socket error:`, error);
            if (onError) {
                onError(error);
            }
        });

        socket.on('connect_error', (error) => {
            console.error(`‚ùå [useTournamentSocket] Connect error:`, error);
            setIsConnected(false);
            reconnectAttemptsRef.current++;
            
            if (reconnectAttemptsRef.current >= maxReconnectAttempts) {
                console.error(`‚ùå [useTournamentSocket] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`);
                if (onError) {
                    onError(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É'));
                }
            }
        });

        socket.on('disconnect', (reason) => {
            console.log(`üîå [useTournamentSocket] –û—Ç–∫–ª—é—á–µ–Ω–æ:`, reason);
            setIsConnected(false);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º
            if (reason === 'io server disconnect') {
                console.log(`üîÑ [useTournamentSocket] –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...`);
                socket.connect();
            }
        });

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            console.log(`üîå [useTournamentSocket] –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            if (socket.connected) {
                socket.emit('leave_tournament', { tournamentId: Number(tournamentId) });
            }
            socket.disconnect();
            socketRef.current = null;
            setIsConnected(false);
        };
    }, [tournamentId, user?.id, onTournamentUpdate, onParticipantUpdate, onError]);

    return {
        socket: socketRef.current,
        isConnected,
        disconnect
    };
}

export default useTournamentSocket;

