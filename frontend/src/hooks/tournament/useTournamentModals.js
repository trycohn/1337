import { useState, useCallback } from 'react';

const useTournamentModals = () => {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const [showAddParticipantModal, setShowAddParticipantModal] = useState(false);
    const [showParticipantSearchModal, setShowParticipantSearchModal] = useState(false);
    const [showMatchResultModal, setShowMatchResultModal] = useState(false);
    
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const [newParticipantData, setNewParticipantData] = useState({
        display_name: '',
        email: '',
        faceit_elo: '',
        cs2_premier_rank: ''
    });
    
    const [searchQuery, setSearchQuery] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [isSearching, setIsSearching] = useState(false);
    
    const [selectedMatch, setSelectedMatch] = useState(null);
    const [matchResultData, setMatchResultData] = useState({
        score1: 0,
        score2: 0,
        maps_data: []
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const openAddParticipantModal = useCallback(() => {
        setNewParticipantData({
            display_name: '',
            email: '',
            faceit_elo: '',
            cs2_premier_rank: ''
        });
        setShowAddParticipantModal(true);
    }, []);

    const closeAddParticipantModal = useCallback(() => {
        setShowAddParticipantModal(false);
        setNewParticipantData({
            display_name: '',
            email: '',
            faceit_elo: '',
            cs2_premier_rank: ''
        });
    }, []);

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const openParticipantSearchModal = useCallback(() => {
        setSearchQuery('');
        setSearchResults([]);
        setIsSearching(false);
        setShowParticipantSearchModal(true);
    }, []);

    const closeParticipantSearchModal = useCallback(() => {
        setShowParticipantSearchModal(false);
        setSearchQuery('');
        setSearchResults([]);
        setIsSearching(false);
    }, []);

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–º
    const updateSearchResults = useCallback((results) => {
        setSearchResults(results);
        setIsSearching(false);
    }, []);

    const setSearchLoading = useCallback((loading) => {
        setIsSearching(loading);
    }, []);

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞
    const openMatchResultModal = useCallback((match) => {
        console.log('üîç [useTournamentModals] openMatchResultModal –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:');
        console.log('üîç [useTournamentModals] - match:', match);
        console.log('üîç [useTournamentModals] - —Ç–∏–ø match:', typeof match);
        console.log('üîç [useTournamentModals] - match —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º:', typeof match === 'number');
        console.log('üîç [useTournamentModals] - match —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º:', typeof match === 'object' && match !== null);
        
        if (typeof match === 'object' && match !== null) {
            console.log('üîç [useTournamentModals] - –∫–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ match:', Object.keys(match));
            console.log('üîç [useTournamentModals] - match.id:', match?.id);
        }
        
        // üîß TRACE –°–¢–ï–ö–ê –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        console.log('üîç [useTournamentModals] Stack trace:');
        console.trace();

        if (!match && match !== 0) {
            console.error('‚ùå [useTournamentModals] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: match –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ openMatchResultModal!');
            return;
        }

        // üîß –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê MATCH
        let matchData = null;
        let matchId = null;
        
        if (typeof match === 'number') {
            console.log('üîß [useTournamentModals] –ü–æ–ª—É—á–µ–Ω ID –º–∞—Ç—á–∞ –∫–∞–∫ —á–∏—Å–ª–æ:', match);
            matchId = match;
            // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –º–∞—Ç—á–∞
            matchData = {
                id: match,
                team1_name: '–ö–æ–º–∞–Ω–¥–∞ 1',
                team2_name: '–ö–æ–º–∞–Ω–¥–∞ 2',
                score1: 0,
                score2: 0,
                maps_data: []
            };
        } else if (typeof match === 'object' && match !== null) {
            console.log('üîß [useTournamentModals] –ü–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç –º–∞—Ç—á–∞:', match);
            matchData = match;
            matchId = match.id;
        } else {
            console.error('‚ùå [useTournamentModals] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø match:', typeof match, match);
            return;
        }

        if (!matchId && matchId !== 0) {
            console.error('‚ùå [useTournamentModals] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞!', {
                match,
                matchData,
                matchId
            });
            return;
        }

        console.log('‚úÖ [useTournamentModals] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º selectedMatch:', matchData);
        setSelectedMatch(matchData);
        setMatchResultData({
            score1: matchData.score1 || 0,
            score2: matchData.score2 || 0,
            maps_data: matchData.maps_data || []
        });
        setShowMatchResultModal(true);
        
        console.log('‚úÖ [useTournamentModals] –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:', {
            selectedMatchId: matchData?.id,
            showModal: true,
            score1: matchData.score1 || 0,
            score2: matchData.score2 || 0,
            mapsCount: matchData.maps_data?.length || 0
        });
    }, []);

    const closeMatchResultModal = useCallback(() => {
        setShowMatchResultModal(false);
        setSelectedMatch(null);
        setMatchResultData({
            score1: 0,
            score2: 0,
            maps_data: []
        });
    }, []);

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const closeAllModals = useCallback(() => {
        setShowAddParticipantModal(false);
        setShowParticipantSearchModal(false);
        setShowMatchResultModal(false);
        
        setNewParticipantData({
            display_name: '',
            email: '',
            faceit_elo: '',
            cs2_premier_rank: ''
        });
        
        setSearchQuery('');
        setSearchResults([]);
        setIsSearching(false);
        
        setSelectedMatch(null);
        setMatchResultData({
            score1: 0,
            score2: 0,
            maps_data: []
        });
    }, []);

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        showAddParticipantModal,
        showParticipantSearchModal,
        showMatchResultModal,
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        newParticipantData,
        setNewParticipantData,
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        searchQuery,
        setSearchQuery,
        searchResults,
        isSearching,
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞
        selectedMatch,
        matchResultData,
        setMatchResultData,
        
        // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
        openAddParticipantModal,
        closeAddParticipantModal,
        openParticipantSearchModal,
        closeParticipantSearchModal,
        openMatchResultModal,
        closeMatchResultModal,
        closeAllModals,
        
        // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º
        updateSearchResults,
        setSearchLoading
    };
};

export default useTournamentModals; 