import { useEffect, useRef, useState, useCallback } from 'react';
// üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π Socket.IO –∫–ª–∏–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
import { getSocketInstance, authenticateSocket, watchTournament, unwatchTournament } from '../../services/socketClient_final';

/**
 * Custom hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞
 * üîß –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π socketClient_final.js –¥–ª—è HTTP/1.1 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export const useWebSocket = (tournamentId, user, onTournamentUpdate, onChatMessage) => {
    const wsRef = useRef(null);
    const [wsConnected, setWsConnected] = useState(false);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const setupWebSocket = useCallback(() => {
        // –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ ID —Ç—É—Ä–Ω–∏—Ä–∞
        if (!user || !tournamentId) {
            console.log('üîß [useWebSocket] –û—Ç–ª–æ–∂–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID —Ç—É—Ä–Ω–∏—Ä–∞');
            return;
        }
        
        console.log('üîß [useWebSocket] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞', tournamentId);
        const token = localStorage.getItem('token');
        if (!token) {
            console.log('üîß [useWebSocket] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º singleton instance –Ω–∞—à–µ–≥–æ Socket.IO –∫–ª–∏–µ–Ω—Ç–∞
        const socket = getSocketInstance();
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º —Å–æ–∫–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
        authenticateSocket(token);
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
        const handleConnect = () => {
            console.log('‚úÖ [useWebSocket] Socket.IO —Ç—É—Ä–Ω–∏—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', socket.id);
            console.log('üéâ [useWebSocket] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π socketClient_final!');
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            watchTournament(tournamentId);
            socket.emit('join_tournament_chat', tournamentId);
            setWsConnected(true);
        };
        
        const handleDisconnect = (reason) => {
            console.log('‚ùå [useWebSocket] Socket.IO —Ç—É—Ä–Ω–∏—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', reason);
            setWsConnected(false);
        };
        
        const handleError = (error) => {
            console.error('üî• [useWebSocket] –û—à–∏–±–∫–∞ Socket.IO —Ç—É—Ä–Ω–∏—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
            setWsConnected(false);
        };
        
        const handleConnectError = (error) => {
            console.error('üî• [useWebSocket] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO —Ç—É—Ä–Ω–∏—Ä:', error);
            setWsConnected(false);
        };
        
        const handleTournamentUpdate = (tournamentData) => {
            if (tournamentData.tournamentId === parseInt(tournamentId) || tournamentData.id === parseInt(tournamentId)) {
                console.log('üîÑ [useWebSocket] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ WebSocket:', tournamentData);
                
                // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
                if (onTournamentUpdate) {
                    onTournamentUpdate(tournamentData);
                }
            }
        };

        const handleTournamentMessage = (message) => {
            if (onChatMessage) {
                onChatMessage(message);
            }
        };
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        socket.on('connect', handleConnect);
        socket.on('disconnect', handleDisconnect);
        socket.on('error', handleError);
        socket.on('connect_error', handleConnectError);
        socket.on('tournament_update', handleTournamentUpdate);
        socket.on('tournament_message', handleTournamentMessage);

        wsRef.current = socket;
        
        // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å—Ä–∞–∑—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if (socket.connected) {
            handleConnect();
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
        return () => {
            console.log('üßπ [useWebSocket] –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π —Ç—É—Ä–Ω–∏—Ä–∞');
            socket.off('connect', handleConnect);
            socket.off('disconnect', handleDisconnect);
            socket.off('error', handleError);
            socket.off('connect_error', handleConnectError);
            socket.off('tournament_update', handleTournamentUpdate);
            socket.off('tournament_message', handleTournamentMessage);
            
            // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞
            unwatchTournament(tournamentId);
        };
    }, [tournamentId, user, onTournamentUpdate, onChatMessage]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    const sendChatMessage = useCallback((content) => {
        if (wsRef.current && wsRef.current.connected && content.trim()) {
            wsRef.current.emit('tournament_message', { 
                tournamentId, 
                content: content.trim() 
            });
            return true;
        }
        return false;
    }, [tournamentId]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const reconnectWebSocket = useCallback(() => {
        console.log('üîÑ [useWebSocket] –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket');
        setupWebSocket();
    }, [setupWebSocket]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket
    const disconnectWebSocket = useCallback(() => {
        console.log('üîå [useWebSocket] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        if (wsRef.current) {
            // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞
            unwatchTournament(tournamentId);
            wsRef.current = null;
        }
        setWsConnected(false);
    }, [tournamentId]);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    useEffect(() => {
        const cleanup = setupWebSocket();
        
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            console.log('üßπ [useWebSocket] –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
            if (cleanup) {
                cleanup();
            }
            setWsConnected(false);
        };
    }, [setupWebSocket]);

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        wsConnected,
        
        // –§—É–Ω–∫—Ü–∏–∏
        sendChatMessage,
        reconnectWebSocket,
        disconnectWebSocket,
        
        // Ref –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∫–µ—Ç—É
        wsRef
    };
}; 