import { useEffect, useRef, useState, useCallback } from 'react';
import { io } from 'socket.io-client';

// üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location.origin –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ production
const getSocketURL = () => {
    // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω, –≤ development - localhost:3000
    if (process.env.NODE_ENV === 'production') {
        return window.location.origin;
    }
    return process.env.REACT_APP_API_URL || 'http://localhost:3000';
};

/**
 * Custom hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞
 * –ò–∑–≤–ª–µ—á–µ–Ω –∏–∑ TournamentDetails.js –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
 */
export const useWebSocket = (tournamentId, user, onTournamentUpdate, onChatMessage) => {
    const wsRef = useRef(null);
    const [wsConnected, setWsConnected] = useState(false);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const setupWebSocket = useCallback(() => {
        // –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ ID —Ç—É—Ä–Ω–∏—Ä–∞
        if (!user || !tournamentId) {
            console.log('–û—Ç–ª–æ–∂–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID —Ç—É—Ä–Ω–∏—Ä–∞');
            return;
        }
        
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞', tournamentId);
        const token = localStorage.getItem('token');
        if (!token) {
            console.log('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }
        
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
        if (wsRef.current) {
            console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            wsRef.current.disconnect();
            wsRef.current = null;
        }
        
        // üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è production
        const socket = io(getSocketURL(), {
            query: { token },
            // üîå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ websocket, –ø–æ—Ç–æ–º polling fallback
            transports: ['websocket', 'polling'],
            // üç™ –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies –Ω–∞ HTTPS
            withCredentials: true,
            // ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            reconnectionAttempts: 5,
            reconnectionDelay: 1000,
            timeout: 20000,
            // üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            forceNew: false,
            autoConnect: true,
            upgrade: true
        });
        
        socket.on('connect', () => {
            console.log('‚úÖ Socket.IO —Ç—É—Ä–Ω–∏—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', socket.id);
            socket.emit('watch_tournament', tournamentId);
            socket.emit('join_tournament_chat', tournamentId);
            setWsConnected(true);
        });
        
        socket.on('disconnect', (reason) => {
            console.log('‚ùå Socket.IO —Ç—É—Ä–Ω–∏—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', reason);
            setWsConnected(false);
        });
        
        socket.on('error', (error) => {
            console.error('üî• –û—à–∏–±–∫–∞ Socket.IO —Ç—É—Ä–Ω–∏—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
            setWsConnected(false);
        });
        
        socket.on('connect_error', (error) => {
            console.error('üî• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO —Ç—É—Ä–Ω–∏—Ä:', error);
            setWsConnected(false);
        });
        
        socket.on('tournament_update', (tournamentData) => {
            if (tournamentData.tournamentId === parseInt(tournamentId) || tournamentData.id === parseInt(tournamentId)) {
                console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ WebSocket:', tournamentData);
                
                // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
                if (onTournamentUpdate) {
                    onTournamentUpdate(tournamentData);
                }
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        socket.on('tournament_message', (message) => {
            if (onChatMessage) {
                onChatMessage(message);
            }
        });

        wsRef.current = socket;
    }, [tournamentId, user, onTournamentUpdate, onChatMessage]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    const sendChatMessage = useCallback((content) => {
        if (wsRef.current && wsRef.current.connected && content.trim()) {
            wsRef.current.emit('tournament_message', { 
                tournamentId, 
                content: content.trim() 
            });
            return true;
        }
        return false;
    }, [tournamentId]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const reconnectWebSocket = useCallback(() => {
        console.log('üîÑ –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket');
        setupWebSocket();
    }, [setupWebSocket]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket
    const disconnectWebSocket = useCallback(() => {
        console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        if (wsRef.current) {
            wsRef.current.disconnect();
            wsRef.current = null;
        }
        setWsConnected(false);
    }, []);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    useEffect(() => {
        setupWebSocket();
        
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            console.log('üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
            if (wsRef.current) {
                wsRef.current.disconnect();
            }
            setWsConnected(false);
        };
    }, [setupWebSocket]);

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        wsConnected,
        
        // –§—É–Ω–∫—Ü–∏–∏
        sendChatMessage,
        reconnectWebSocket,
        disconnectWebSocket,
        
        // Ref –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∫–µ—Ç—É
        wsRef
    };
}; 