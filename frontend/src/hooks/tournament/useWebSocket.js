import { useEffect, useState, useCallback } from 'react';
import { useSocket } from '../useSocket';

/**
 * Custom hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞
 * üöÄ –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π useSocket hook
 */
export const useWebSocket = (tournamentId, user, onTournamentUpdate, onChatMessage) => {
    const socket = useSocket();
    const [wsConnected, setWsConnected] = useState(false);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    useEffect(() => {
        if (!user || !tournamentId) {
            console.log('üîß [useWebSocket] –û—Ç–ª–æ–∂–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID —Ç—É—Ä–Ω–∏—Ä–∞');
            return;
        }

        const token = localStorage.getItem('token');
        if (!token) {
            console.log('üîß [useWebSocket] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }

        console.log('üöÄ [useWebSocket] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É', tournamentId);
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Socket.IO
        const connected = socket.connect(token);
        
        if (connected) {
            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É
            socket.tournament.join(tournamentId);
            setWsConnected(socket.connected);
        }
    }, [tournamentId, user?.id]); // –£–±—Ä–∞–ª–∏ socket –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
    useEffect(() => {
        if (!tournamentId) return;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const handleTournamentUpdate = (tournamentData) => {
            if (tournamentData.tournamentId === parseInt(tournamentId) || tournamentData.id === parseInt(tournamentId)) {
                console.log('üîÑ [useWebSocket] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:', tournamentData);
                if (onTournamentUpdate) {
                    onTournamentUpdate(tournamentData);
                }
            }
        };

        const handleTournamentMessage = (message) => {
            console.log('üí¨ [useWebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:', message);
            if (onChatMessage) {
                onChatMessage(message);
            }
        };

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        socket.on('tournament_updated', handleTournamentUpdate);
        socket.on('tournament_message', handleTournamentMessage);

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setWsConnected(socket.connected);

        // Cleanup
        return () => {
            console.log('üßπ [useWebSocket] –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π —Ç—É—Ä–Ω–∏—Ä–∞');
            socket.off('tournament_updated', handleTournamentUpdate);
            socket.off('tournament_message', handleTournamentMessage);
            
            // –ü–æ–∫–∏–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
            if (socket.connected) {
                socket.tournament.leave(tournamentId);
            }
        };
    }, [tournamentId]); // –£–±—Ä–∞–ª–∏ –≤—Å–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    const sendChatMessage = useCallback((content) => {
        if (socket.connected && content.trim()) {
            socket.tournament.sendMessage(tournamentId, content.trim());
            console.log('üì® [useWebSocket] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:', content);
            return true;
        }
        console.warn('‚ö†Ô∏è [useWebSocket] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        return false;
    }, [tournamentId]); // –£–±—Ä–∞–ª–∏ socket –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const reconnectWebSocket = useCallback(() => {
        console.log('üîÑ [useWebSocket] –†—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        const token = localStorage.getItem('token');
        if (token) {
            socket.connect(token);
        }
    }, []); // –£–±—Ä–∞–ª–∏ socket –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    const disconnectWebSocket = useCallback(() => {
        console.log('üîå [useWebSocket] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ');
        if (socket.connected && tournamentId) {
            socket.tournament.leave(tournamentId);
        }
        setWsConnected(false);
    }, [tournamentId]); // –£–±—Ä–∞–ª–∏ socket –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        wsConnected: socket.connected,
        
        // –§—É–Ω–∫—Ü–∏–∏
        sendChatMessage,
        reconnectWebSocket,
        disconnectWebSocket,
        
        // –û–±—ä–µ–∫—Ç —Å–æ–∫–µ—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        wsRef: { current: socket.getSocket() }
    };
}; 