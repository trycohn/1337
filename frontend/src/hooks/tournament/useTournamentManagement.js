import { useState, useCallback, useContext } from 'react';
import axios from '../../axios';
import AuthContext from '../../context/AuthContext';

const useTournamentManagement = (tournamentId) => {
    const { user } = useContext(AuthContext);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const getAuthHeaders = useCallback(() => {
        const token = localStorage.getItem('token');
        return token ? { Authorization: `Bearer ${token}` } : {};
    }, []);

    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
    const clearError = useCallback(() => {
        setError(null);
    }, []);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–≥–æ—Å—Ç—è)
    const addGuestParticipant = useCallback(async (participantData) => {
        setIsLoading(true);
        setError(null);

        try {
            // üéØ –ü–ï–†–ï–î–ê–ï–ú –í–°–ï –ü–û–õ–Ø –£–ß–ê–°–¢–ù–ò–ö–ê –í–ö–õ–Æ–ß–ê–Ø –†–ï–ô–¢–ò–ù–ì–ò
            const requestData = {
                participantName: participantData.display_name,
                userId: null // –î–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if (participantData.email && participantData.email.trim()) {
                requestData.email = participantData.email.trim();
            }

            if (participantData.faceit_elo && participantData.faceit_elo.toString().trim()) {
                requestData.faceit_elo = parseInt(participantData.faceit_elo);
            }

            if (participantData.cs2_premier_rank && participantData.cs2_premier_rank.toString().trim()) {
                requestData.cs2_premier_rank = parseInt(participantData.cs2_premier_rank);
            }

            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', requestData);

            const response = await axios.post(`/api/tournaments/${tournamentId}/add-participant`, requestData, {
                headers: getAuthHeaders()
            });

            return { success: true, data: response.data };
        } catch (error) {
            const errorMessage = error.response?.data?.error || error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞';
            setError(errorMessage);
            return { success: false, error: errorMessage };
        } finally {
            setIsLoading(false);
        }
    }, [tournamentId, getAuthHeaders]);

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const searchUsers = useCallback(async (query) => {
        console.log('üîç [useTournamentManagement] –ù–ê–ß–ê–õ–û –ü–û–ò–°–ö–ê');
        console.log('üîç [useTournamentManagement] –ó–∞–ø—Ä–æ—Å:', query);
        
        if (!query || query.trim().length < 2) {
            console.log('üîç [useTournamentManagement] –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
            return { success: true, data: [] };
        }

        setIsLoading(true);
        setError(null);

        try {
            console.log('üîç [useTournamentManagement] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
            const headers = getAuthHeaders();
            console.log('üîç [useTournamentManagement] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', headers);
            
            const response = await axios.get(`/api/users/search`, {
                params: { query: query.trim() },
                headers: headers
            });

            console.log('üîç [useTournamentManagement] –û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω:', response.data);
            console.log('üîç [useTournamentManagement] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', response.data.length);

            return { success: true, data: response.data };
        } catch (error) {
            console.error('üîç [useTournamentManagement] –û—à–∏–±–∫–∞ API:', error);
            console.error('üîç [useTournamentManagement] –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:', error.response?.status);
            console.error('üîç [useTournamentManagement] –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response?.data);
            console.error('üîç [useTournamentManagement] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.config?.headers);
            
            const errorMessage = error.response?.data?.error || error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
            setError(errorMessage);
            return { success: false, error: errorMessage };
        } finally {
            setIsLoading(false);
            console.log('üîç [useTournamentManagement] –ö–û–ù–ï–¶ –ü–û–ò–°–ö–ê');
        }
    }, [getAuthHeaders]);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const addRegisteredParticipant = useCallback(async (userId, userName) => {
        setIsLoading(true);
        setError(null);

        try {
            const response = await axios.post(`/api/tournaments/${tournamentId}/add-participant`, {
                participantName: userName || `User ${userId}`,
                userId: userId
            }, {
                headers: getAuthHeaders()
            });

            return { success: true, data: response.data };
        } catch (error) {
            const errorMessage = error.response?.data?.error || error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞';
            setError(errorMessage);
            return { success: false, error: errorMessage };
        } finally {
            setIsLoading(false);
        }
    }, [tournamentId, getAuthHeaders]);

    // –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const removeParticipant = useCallback(async (participantId) => {
        setIsLoading(true);
        setError(null);

        try {
            await axios.delete(`/api/tournaments/${tournamentId}/participants/${participantId}`, {
                headers: getAuthHeaders()
            });
            return { success: true };
        } catch (error) {
            const errorMessage = error.response?.data?.error || error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞';
            setError(errorMessage);
            return { success: false, error: errorMessage };
        } finally {
            setIsLoading(false);
        }
    }, [tournamentId, getAuthHeaders]);

    // –ó–∞–ø—É—Å–∫ —Ç—É—Ä–Ω–∏—Ä–∞
    const startTournament = useCallback(async () => {
        setIsLoading(true);
        setError(null);

        try {
            const response = await axios.post(`/api/tournaments/${tournamentId}/start`, {}, {
                headers: getAuthHeaders()
            });
            return { success: true, data: response.data };
        } catch (error) {
            const errorMessage = error.response?.data?.error || error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞';
            setError(errorMessage);
            return { success: false, error: errorMessage };
        } finally {
            setIsLoading(false);
        }
    }, [tournamentId, getAuthHeaders]);

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    const endTournament = useCallback(async () => {
        setIsLoading(true);
        setError(null);

        try {
            const response = await axios.post(`/api/tournaments/${tournamentId}/end`, {}, {
                headers: getAuthHeaders()
            });
            return { success: true, data: response.data };
        } catch (error) {
            const errorMessage = error.response?.data?.error || error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞';
            setError(errorMessage);
            return { success: false, error: errorMessage };
        } finally {
            setIsLoading(false);
        }
    }, [tournamentId, getAuthHeaders]);

    // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏
    const regenerateBracket = useCallback(async () => {
        setIsLoading(true);
        setError(null);

        try {
            const response = await axios.post(`/api/tournaments/${tournamentId}/regenerate-bracket`, {}, {
                headers: getAuthHeaders()
            });
            return { success: true, data: response.data };
        } catch (error) {
            const errorMessage = error.response?.data?.error || error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏';
            setError(errorMessage);
            return { success: false, error: errorMessage };
        } finally {
            setIsLoading(false);
        }
    }, [tournamentId, getAuthHeaders]);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
    const saveMatchResult = useCallback(async (matchId, resultData) => {
        setIsLoading(true);
        setError(null);

        try {
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π POST —Ä–æ—É—Ç /api/tournaments/:id/update-match
            console.log('üîç Sending request to saveMatchResult:', {
                tournamentId,
                matchId,
                resultData
            });
            
            const requestData = {
                matchId: matchId,
                winner_team_id: null, // –û–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∏–∂–µ
                score1: resultData.score1 || 0,
                score2: resultData.score2 || 0,
                maps: resultData.maps_data && resultData.maps_data.length > 0 ? resultData.maps_data : null
            };
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if (resultData.winner === 'team1') {
                // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å team1_id –∏–∑ –º–∞—Ç—á–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ localStorage
                try {
                    const tournamentData = localStorage.getItem('currentTournament');
                    if (tournamentData) {
                        const tournament = JSON.parse(tournamentData);
                        const match = tournament.matches?.find(m => m.id === matchId);
                        if (match) {
                            requestData.winner_team_id = match.team1_id;
                        }
                    }
                } catch (error) {
                    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å team1_id –∏–∑ localStorage:', error);
                }
            } else if (resultData.winner === 'team2') {
                try {
                    const tournamentData = localStorage.getItem('currentTournament');
                    if (tournamentData) {
                        const tournament = JSON.parse(tournamentData);
                        const match = tournament.matches?.find(m => m.id === matchId);
                        if (match) {
                            requestData.winner_team_id = match.team2_id;
                        }
                    }
                } catch (error) {
                    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å team2_id –∏–∑ localStorage:', error);
                }
            }
            
            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', requestData);
            
            const response = await axios.post(`/api/tournaments/${tournamentId}/update-match`, requestData, {
                headers: getAuthHeaders()
            });

            return { success: true, data: response.data };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞:', error);
            const errorMessage = error.response?.data?.error || error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞';
            setError(errorMessage);
            return { success: false, error: errorMessage };
        } finally {
            setIsLoading(false);
        }
    }, [tournamentId, getAuthHeaders]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    const checkAccess = useCallback((tournament) => {
        if (!user || !tournament) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç—É—Ä–Ω–∏—Ä–∞
        const isCreator = tournament.created_by === user.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const isAdmin = user.role === 'admin';
        
        return isCreator || isAdmin;
    }, [user]);

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        isLoading,
        error,
        
        // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        addGuestParticipant,
        searchUsers,
        addRegisteredParticipant,
        removeParticipant,
        startTournament,
        endTournament,
        regenerateBracket,
        saveMatchResult,
        
        // –£—Ç–∏–ª–∏—Ç—ã
        checkAccess,
        clearError
    };
};

export default useTournamentManagement; 