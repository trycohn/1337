/**
 * üèóÔ∏è –°–ò–°–¢–ï–ú–ê –ü–õ–ê–ì–ò–ù–û–í –î–õ–Ø –§–û–†–ú–ê–¢–û–í –¢–£–†–ù–ò–†–û–í
 * 
 * –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:
 * - Single Elimination
 * - Double Elimination  
 * - Swiss (–±—É–¥—É—â–µ–µ)
 * - Round Robin (–±—É–¥—É—â–µ–µ)
 */

// –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
export class TournamentFormat {
  constructor(name, config = {}) {
    this.name = name;
    this.config = config;
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Ç—á–µ–π –ø–æ —Ä–∞—É–Ω–¥–∞–º –∏ —Ç–∏–ø–∞–º
   * @param {Array} matches - –ú–∞—Å—Å–∏–≤ –º–∞—Ç—á–µ–π
   * @returns {Object} –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
   */
  groupMatches(matches) {
    throw new Error('groupMatches must be implemented');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞
   * @param {number} round - –ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
   * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç (totalRounds, hasSpecialMatches –∏ —Ç.–¥.)
   * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
   */
  getRoundName(round, context) {
    throw new Error('getRoundName must be implemented');
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –º–∞—Ç—á–µ–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
   * @param {Object} groupedMatches - –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
   * @returns {Map} –ö–∞—Ä—Ç–∞ –ø–æ–∑–∏—Ü–∏–π {matchId => {x, y, type}}
   */
  calculatePositions(groupedMatches) {
    throw new Error('calculatePositions must be implemented');
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
   * @param {Array} matches - –ú–∞—Å—Å–∏–≤ –º–∞—Ç—á–µ–π
   * @param {Map} positions - –ü–æ–∑–∏—Ü–∏–∏ –º–∞—Ç—á–µ–π
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  calculateConnections(matches, positions) {
    const connections = [];
    
    matches.forEach(match => {
      if (match.next_match_id && positions.has(match.id) && positions.has(match.next_match_id)) {
        const from = positions.get(match.id);
        const to = positions.get(match.next_match_id);
        
        connections.push({
          from: {
            matchId: match.id,
            x: from.x + from.width,
            y: from.y + from.height / 2
          },
          to: {
            matchId: match.next_match_id,
            x: to.x,
            y: to.y + to.height / 2
          },
          type: this.getConnectionType(match),
          curved: this.shouldCurveConnection(from, to)
        });
      }
    });
    
    return connections;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  getConnectionType(match) {
    if (match.bracket_type === 'loser') return 'loser';
    if (match.bracket_type === 'placement') return 'third-place';
    return 'winner';
  }

  /**
   * –ù—É–∂–Ω–æ –ª–∏ –∏–∑–≥–∏–±–∞—Ç—å –ª–∏–Ω–∏—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  shouldCurveConnection(from, to) {
    // –ò–∑–≥–∏–±–∞–µ–º –µ—Å–ª–∏ –º–∞—Ç—á–∏ –Ω–µ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    return Math.abs(from.y - to.y) > 50;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫ –¥–ª—è –º–∞—Ç—á–µ–π
   * @param {Object} match - –ú–∞—Ç—á
   * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç—É—Ä–Ω–∏—Ä–∞
   * @returns {string|null} –ú–µ—Ç–∫–∞ –º–∞—Ç—á–∞
   */
  getMatchLabel(match, context) {
    return null;
  }

  /**
   * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  getVisualizationConfig() {
    return {
      roundSpacing: 300,
      matchSpacing: 80,
      matchWidth: 250,
      matchHeight: 80,
      connectorColor: '#ff0000',
      connectorWidth: 2,
      animateConnections: true
    };
  }
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ—Ä–º–∞—Ç–æ–≤
export class FormatManager {
  constructor() {
    this.formats = new Map();
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
   */
  register(format) {
    if (!(format instanceof TournamentFormat)) {
      throw new Error('Format must extend TournamentFormat');
    }
    this.formats.set(format.name, format);
    console.log(`üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–æ—Ä–º–∞—Ç: ${format.name}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
   */
  getFormat(formatName) {
    const format = this.formats.get(formatName);
    if (!format) {
      console.warn(`‚ö†Ô∏è –§–æ—Ä–º–∞—Ç ${formatName} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SingleElimination –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
      return this.formats.get('single_elimination');
    }
    return format;
  }

  /**
   * –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
   */
  getAvailableFormats() {
    return Array.from(this.formats.keys());
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
export const formatManager = new FormatManager(); 