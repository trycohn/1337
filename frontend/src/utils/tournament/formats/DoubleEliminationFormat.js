/**
 * üèÜ DOUBLE ELIMINATION FORMAT
 * 
 * –§–æ—Ä–º–∞—Ç –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–±—ã–≤–∞–Ω–∏—è —Å Winners –∏ Losers Bracket
 * –í–∫–ª—é—á–∞–µ—Ç Grand Final —Å –≤–æ–∑–º–æ–∂–Ω—ã–º reset –º–∞—Ç—á–µ–º
 */

import { TournamentFormat } from '../bracketFormats';

export class DoubleEliminationFormat extends TournamentFormat {
  constructor() {
    super('double_elimination', {
      supportsWinnersBracket: true,
      supportsLosersBracket: true,
      supportsGrandFinal: true,
      supportsGrandFinalReset: true
    });
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Ç—á–µ–π –ø–æ bracket_type –¥–ª—è Double Elimination
   */
  groupMatches(matches) {
    const grouped = {
      winners: [],
      losers: [],
      grandFinal: []
    };
    
    matches.forEach(match => {
      const bracketType = match.bracket_type || 'winner';
      
      switch (bracketType) {
        case 'winner':
          grouped.winners.push(match);
          break;
        
        case 'loser':
        case 'loser_semifinal':    // üÜï –ú–∞–ª—ã–π —Ñ–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤
        case 'loser_final':        // üÜï –§–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤
          grouped.losers.push(match);
          break;
          
        case 'grand_final':
        case 'grand_final_reset':
          grouped.grandFinal.push(match);
          break;
          
        default:
          // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ–º –≤ winners
          grouped.winners.push(match);
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    Object.keys(grouped).forEach(key => {
      grouped[key].sort((a, b) => {
        if (a.round !== b.round) {
          return a.round - b.round;
        }
        return (a.match_number || 0) - (b.match_number || 0);
      });
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞—É–Ω–¥–∞–º –¥–ª—è Winners –∏ Losers
    const result = {
      winners: this._groupByRounds(grouped.winners),
      losers: this._groupByRounds(grouped.losers),
      grandFinal: grouped.grandFinal
    };
    
    return result;
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Ç—á–µ–π –ø–æ —Ä–∞—É–Ω–¥–∞–º
   */
  _groupByRounds(matches) {
    const rounds = {};
    
    matches.forEach(match => {
      const round = match.round || 1;
      if (!rounds[round]) {
        rounds[round] = [];
      }
      rounds[round].push(match);
    });
    
    return rounds;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –¥–ª—è Double Elimination —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
   */
  getRoundName(round, context) {
    const { bracketType, totalRounds, matchesInRound, isLastRound } = context;
    
    if (bracketType === 'grand_final') {
      return 'Grand Final';
    }
    
    if (bracketType === 'loser') {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–∞–ª–æ–≥–æ —Ñ–∏–Ω–∞–ª–∞ –ª—É–∑–µ—Ä–æ–≤
      if (isLastRound || round === totalRounds) {
        return 'Losers Small Final';
      }
      
      // –ë–æ–ª–µ–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è Losers Bracket
      if (round === 1) {
        return 'Losers First Round';
      } else if (round === 2) {
        return 'Losers Second Round';
      } else if (round === totalRounds - 1) {
        return 'Losers Semi-Final';
      } else {
        return `Losers Round ${round}`;
      }
    }
    
    // Winners bracket –Ω–∞–∑–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    const roundsFromEnd = totalRounds - round;
    
    switch (roundsFromEnd) {
      case 0:
        return 'Winners Final';
      case 1:
        return 'Winners Semi-Final';
      case 2:
        return 'Winners Quarter-Final';
      case 3:
        return 'Winners Round of 16';
      case 4:
        return 'Winners Round of 32';
      case 5:
        return 'Winners Round of 64';
      case 6:
        return 'Winners Round of 128';
      default:
        return `Winners Round ${round}`;
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –º–∞—Ç—á–µ–π –¥–ª—è Double Elimination
   */
  calculatePositions(groupedMatches) {
    const positions = new Map();
    const config = this.getVisualizationConfig();
    
    let currentY = 50; // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è Y
    
    // 1. –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è Winners Bracket
    if (groupedMatches.winners) {
      this._calculateBracketPositions(
        groupedMatches.winners, 
        positions, 
        config,
        50, // startX
        currentY,
        'winners'
      );
      
      currentY += 400; // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É bracket'–∞–º–∏
    }
    
    // 2. –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è Losers Bracket
    if (groupedMatches.losers) {
      this._calculateBracketPositions(
        groupedMatches.losers, 
        positions, 
        config,
        50, // startX
        currentY,
        'losers'
      );
      
      currentY += 400;
    }
    
    // 3. –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è Grand Final
    if (groupedMatches.grandFinal && groupedMatches.grandFinal.length > 0) {
      const grandFinalX = this._getMaxX(positions) + config.roundSpacing;
      
      groupedMatches.grandFinal.forEach((match, index) => {
        positions.set(match.id, {
          x: grandFinalX,
          y: currentY / 2 + (index * config.matchSpacing), // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
          width: config.matchWidth,
          height: config.matchHeight,
          matchType: 'grand-final',
          bracketType: match.bracket_type
        });
      });
    }
    
    return positions;
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ bracket
   */
  _calculateBracketPositions(rounds, positions, config, startX, startY, bracketType) {
    let currentX = startX;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—É–Ω–¥—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    const sortedRounds = Object.entries(rounds)
      .sort(([a], [b]) => parseInt(a) - parseInt(b));
    
    sortedRounds.forEach(([round, matches], roundIndex) => {
      const totalMatches = matches.length;
      const spacing = config.matchSpacing;
      const centerY = startY + 200; // –¶–µ–Ω—Ç—Ä –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è bracket
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é Y –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–µ–π
      const totalHeight = (totalMatches - 1) * spacing;
      const startMatchY = centerY - (totalHeight / 2);
      
      matches.forEach((match, matchIndex) => {
        const y = startMatchY + (matchIndex * spacing);
        
        positions.set(match.id, {
          x: currentX,
          y: y,
          width: config.matchWidth,
          height: config.matchHeight,
          round: parseInt(round),
          bracketType: bracketType,
          matchType: this.getMatchType(match)
        });
      });
      
      currentX += config.roundSpacing;
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
   */
  _getMaxX(positions) {
    let maxX = 0;
    positions.forEach(pos => {
      if (pos.x > maxX) {
        maxX = pos.x;
      }
    });
    return maxX;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–∞—Ç—á–∞
   */
  getMatchType(match) {
    switch (match.bracket_type) {
      case 'grand_final':
        return 'grand-final-main';
      case 'grand_final_reset':
        return 'grand-final-triumph';
      case 'loser':
        return 'loser';
      case 'winner':
        return 'winner';
      default:
        return 'regular';
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è –º–∞—Ç—á–∞
   */
  getMatchLabel(match, context) {
    if (match.bracket_type === 'grand_final') {
      return 'üèÜ –ú–∞—Ç—á –∑–∞ 1-–µ –º–µ—Å—Ç–æ'; // üÜï –ò–∑–º–µ–Ω–µ–Ω–æ —Å "üèÅ Grand Final"
    }
    
    if (match.bracket_type === 'grand_final_reset') {
      return 'üîÑ Grand Final Triumph'; // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: –±–æ–ª–µ–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    }
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª–æ–≤ winners/losers
    if (match.bracket_position) {
      if (match.bracket_position.includes('WB') && match.bracket_position.includes('R' + context.totalWinnersRounds)) {
        return 'üèÜ Winners Final';
      }
      if (match.bracket_position.includes('LB') && match.bracket_position.includes('R' + context.totalLosersRounds)) {
        return 'üíî Losers Final';
      }
    }
    
    return null;
  }

  /**
   * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è Double Elimination
   */
  getConnectionType(match) {
    // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –∏–∑ Winners –∏–¥–µ—Ç –≤ Losers
    if (match.loser_next_match_id) {
      return 'to-losers';
    }
    
    // –û–±—ã—á–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ bracket
    return match.bracket_type || 'winner';
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º loser_next_match_id
   */
  calculateConnections(matches, positions) {
    const connections = [];
    
    matches.forEach(match => {
      const fromPos = positions.get(match.id);
      if (!fromPos) return;
      
      // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      if (match.next_match_id && positions.has(match.next_match_id)) {
        const toPos = positions.get(match.next_match_id);
        
        connections.push({
          from: {
            matchId: match.id,
            x: fromPos.x + fromPos.width,
            y: fromPos.y + fromPos.height / 2
          },
          to: {
            matchId: match.next_match_id,
            x: toPos.x,
            y: toPos.y + toPos.height / 2
          },
          type: 'winner',
          curved: true
        });
      }
      
      // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (–ø–µ—Ä–µ—Ö–æ–¥ –≤ Losers Bracket)
      if (match.loser_next_match_id && positions.has(match.loser_next_match_id)) {
        const toPos = positions.get(match.loser_next_match_id);
        
        connections.push({
          from: {
            matchId: match.id,
            x: fromPos.x + fromPos.width / 2,
            y: fromPos.y + fromPos.height
          },
          to: {
            matchId: match.loser_next_match_id,
            x: toPos.x + toPos.width / 2,
            y: toPos.y
          },
          type: 'to-losers',
          curved: true,
          style: 'dashed' // –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Losers
        });
      }
    });
    
    return connections;
  }

  /**
   * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Double Elimination
   */
  getVisualizationConfig() {
    return {
      roundSpacing: 300,
      matchSpacing: 120,
      matchWidth: 250,
      matchHeight: 80,
      connectorColor: '#ff0000',
      connectorColorWinner: '#00ff00',
      connectorColorLoser: '#ff6b6b',
      connectorColorToLosers: '#ff6b6b',
      connectorWidth: 2,
      animateConnections: true,
      matchColors: {
        winner: '#001100',
        loser: '#220000',
        'grand-final': '#1a1a00',
        'grand-final-triumph': '#1a0d00'
      }
    };
  }
} 