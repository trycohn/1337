/**
 * üèÜ SINGLE ELIMINATION FORMAT
 * 
 * –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–±—ã–≤–∞–Ω–∏—è
 * —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –∏ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
 */

import { TournamentFormat } from '../bracketFormats';

export class SingleEliminationFormat extends TournamentFormat {
  constructor() {
    super('single_elimination', {
      supportsPreliminary: true,
      supportsThirdPlace: true
    });
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Ç—á–µ–π –ø–æ —Ä–∞—É–Ω–¥–∞–º —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
   */
  groupMatches(matches) {
    const rounds = {};
    
    matches.forEach(match => {
      const roundKey = match.round;
      
      if (!rounds[roundKey]) {
        rounds[roundKey] = {
          regular: [],
          special: []
        };
      }
      
      // –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –∏–¥–µ—Ç –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ
      if (match.bracket_type === 'placement' || match.is_third_place_match) {
        rounds[roundKey].special.push(match);
      } else {
        rounds[roundKey].regular.push(match);
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–∞—É–Ω–¥–æ–≤
    Object.values(rounds).forEach(round => {
      round.regular.sort((a, b) => (a.match_number || 0) - (b.match_number || 0));
      round.special.sort((a, b) => (a.match_number || 0) - (b.match_number || 0));
    });
    
    return rounds;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞
   */
  getRoundName(round, context) {
    const { totalRounds, isFinalsRound, hasThirdPlace } = context;
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
    if (round === -1 || round === 0) {
      return '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥';
    }
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∏–Ω–∞–ª –∏/–∏–ª–∏ –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ)
    if (isFinalsRound) {
      return '–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è';
    }
    
    // –†–∞—Å—á–µ—Ç –æ—Ç –∫–æ–Ω—Ü–∞
    const roundsFromEnd = totalRounds - round;
    
    switch (roundsFromEnd) {
      case 0:
        return '–§–∏–Ω–∞–ª';
      case 1:
        return '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª';
      case 2:
        return '–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª';
      case 3:
        return '1/8 —Ñ–∏–Ω–∞–ª–∞';
      case 4:
        return '1/16 —Ñ–∏–Ω–∞–ª–∞';
      case 5:
        return '1/32 —Ñ–∏–Ω–∞–ª–∞';
      case 6:
        return '1/64 —Ñ–∏–Ω–∞–ª–∞';
      default:
        return round === 1 ? '–ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥' : `–†–∞—É–Ω–¥ ${round}`;
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –º–∞—Ç—á–µ–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  calculatePositions(groupedMatches) {
    const positions = new Map();
    const config = this.getVisualizationConfig();
    
    let currentX = 50; // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—É–Ω–¥—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    const sortedRounds = Object.entries(groupedMatches)
      .sort(([a], [b]) => parseInt(a) - parseInt(b));
    
    sortedRounds.forEach(([round, roundData], roundIndex) => {
      const { regular, special } = roundData;
      const allMatches = [...special, ...regular]; // –°–ø–µ—Ü. –º–∞—Ç—á–∏ —Å–≤–µ—Ä—Ö—É
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
      const totalMatches = allMatches.length;
      const availableHeight = 600; // –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏
      const matchSpacing = Math.min(config.matchSpacing, availableHeight / totalMatches);
      const startY = (availableHeight - (totalMatches * matchSpacing)) / 2 + 100;
      
      allMatches.forEach((match, index) => {
        const y = startY + (index * matchSpacing);
        
        positions.set(match.id, {
          x: currentX,
          y: y,
          width: config.matchWidth,
          height: config.matchHeight,
          round: parseInt(round),
          isSpecial: special.includes(match),
          matchType: this.getMatchType(match)
        });
      });
      
      currentX += config.roundSpacing;
    });
    
    return positions;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–∞—Ç—á–∞
   */
  getMatchType(match) {
    if (match.bracket_type === 'placement' || match.is_third_place_match) {
      return 'third-place';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª–æ–º
    if (match.match_number === 1 && !match.is_third_place_match) {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–Ω–∞
      return 'final';
    }
    
    return 'regular';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –º–µ—Ç–∫–∏ –¥–ª—è –º–∞—Ç—á–∞
   */
  getMatchLabel(match, context) {
    const matchType = this.getMatchType(match);
    
    switch (matchType) {
      case 'third-place':
        return 'ü•â –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ';
      case 'final':
        return 'üèÜ –§–∏–Ω–∞–ª';
      default:
        return null;
    }
  }

  /**
   * –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–≥–∏–±–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  shouldCurveConnection(from, to) {
    // –í—Å–µ–≥–¥–∞ –∏–∑–≥–∏–±–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    return true;
  }

  /**
   * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Single Elimination
   */
  getVisualizationConfig() {
    return {
      roundSpacing: 300,
      matchSpacing: 100,
      matchWidth: 250,
      matchHeight: 80,
      connectorColor: '#ff0000',
      connectorColorHighlight: '#ffffff',
      connectorWidth: 2,
      animateConnections: true,
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∞—Ç—á–µ–π
      matchColors: {
        regular: '#111111',
        final: '#1a1a1a',
        'third-place': '#0d0d0d'
      }
    };
  }
} 