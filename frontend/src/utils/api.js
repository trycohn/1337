import axios from 'axios';

// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:3000';

console.log(' üîç axios baseURL:', baseURL);

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const api = axios.create({
    baseURL,
    timeout: 10000, // —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
    headers: {
        'Content-Type': 'application/json',
    },
    withCredentials: true, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É–∫–∏ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
});

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
api.interceptors.request.use(
    (config) => {
        const token = localStorage.getItem('token');
        
        // –õ–æ–≥–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(' üîç Sending request to:', config.url);
        
        if (token && !config.headers.Authorization) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
    },
    (error) => {
        console.error('Request error:', error);
        return Promise.reject(error);
    }
);

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
api.interceptors.response.use(
    (response) => {
        return response;
    },
    (error) => {
        if (error.response) {
            // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 2xx
            console.error(`API Error (${error.response.status}):`, error.response.data);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ 401 –æ—à–∏–±–∫–∏ (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
            if (error.response.status === 401) {
                // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –º–æ–∂–Ω–æ —Ç—É—Ç –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
                // localStorage.removeItem('token');
            }
        } else if (error.request) {
            // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç
            console.error('No response received:', error.request);
        } else {
            // –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
            console.error('Request config error:', error.message);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± URL –≤ –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
        if (error.config) {
            error.apiUrl = error.config.url;
        }
        
        return Promise.reject(error);
    }
);

export default api; 