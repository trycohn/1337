/**
 * üîß –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–ô –†–ê–ë–û–¢–´ –° API
 * 
 * –ù–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –æ—Ç–≤–µ—Ç–æ–≤
 */

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ API
 */
export const API_RESPONSE_STRUCTURES = {
  CREATE_TOURNAMENT: {
    path: 'tournament.id',
    structure: { message: 'string', tournament: { id: 'number' } }
  },
  GET_TOURNAMENT: {
    path: 'id',
    structure: { id: 'number', name: 'string' }
  },
  GET_TOURNAMENTS: {
    path: null,
    structure: 'array'
  },
  UPDATE_TOURNAMENT: {
    path: 'tournament.id',
    structure: { message: 'string', tournament: { id: 'number' } }
  }
};

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
 * @param {Object} response - –û—Ç–≤–µ—Ç –æ—Ç API
 * @param {string} responseType - –¢–∏–ø –æ—Ç–≤–µ—Ç–∞ (–∫–ª—é—á –∏–∑ API_RESPONSE_STRUCTURES)
 * @returns {number|null} - ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ null
 */
export const extractTournamentId = (response, responseType = 'CREATE_TOURNAMENT') => {
  try {
    if (!response || !response.data) {
      console.error('‚ùå [extractTournamentId] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API:', response);
      return null;
    }

    const structure = API_RESPONSE_STRUCTURES[responseType];
    if (!structure) {
      console.error('‚ùå [extractTournamentId] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:', responseType);
      return null;
    }

    const { path } = structure;
    if (!path) {
      console.error('‚ùå [extractTournamentId] –ù–µ—Ç –ø—É—Ç–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID:', responseType);
      return null;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ –ø—É—Ç–∏
    const id = getNestedValue(response.data, path);
    
    if (!id || typeof id !== 'number' || id <= 0) {
      console.error('‚ùå [extractTournamentId] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞:', {
        id,
        type: typeof id,
        path,
        responseType,
        responseData: response.data
      });
      return null;
    }

    console.log('‚úÖ [extractTournamentId] ID —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω:', {
      id,
      responseType,
      path
    });

    return id;
  } catch (error) {
    console.error('‚ùå [extractTournamentId] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ ID:', error);
    return null;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–æ –ø—É—Ç–∏
 * @param {Object} obj - –û–±—ä–µ–∫—Ç
 * @param {string} path - –ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'tournament.id')
 * @returns {any} - –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ undefined
 */
export const getNestedValue = (obj, path) => {
  return path.split('.').reduce((current, key) => {
    return current && current[key] !== undefined ? current[key] : undefined;
  }, obj);
};

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É
 * @param {Function} navigate - –§—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Ç react-router
 * @param {Object} response - –û—Ç–≤–µ—Ç –æ—Ç API
 * @param {string} responseType - –¢–∏–ø –æ—Ç–≤–µ—Ç–∞
 * @param {Function} onError - Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
export const safeNavigateToTournament = (navigate, response, responseType = 'CREATE_TOURNAMENT', onError = null) => {
  try {
    const tournamentId = extractTournamentId(response, responseType);
    
    if (!tournamentId) {
      const error = new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
      console.error('‚ùå [safeNavigateToTournament]', error.message);
      
      if (onError) {
        onError(error);
      }
      return false;
    }

    console.log('‚úÖ [safeNavigateToTournament] –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É:', tournamentId);
    navigate(`/tournaments/${tournamentId}`);
    return true;
  } catch (error) {
    console.error('‚ùå [safeNavigateToTournament] –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
    
    if (onError) {
      onError(error);
    }
    return false;
  }
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API
 * @param {Object} response - –û—Ç–≤–µ—Ç –æ—Ç API
 * @param {string} responseType - –¢–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ { isValid: boolean, errors: string[] }
 */
export const validateApiResponse = (response, responseType) => {
  const errors = [];
  
  if (!response || !response.data) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç response.data');
    return { isValid: false, errors };
  }

  const structure = API_RESPONSE_STRUCTURES[responseType];
  if (!structure) {
    errors.push(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: ${responseType}`);
    return { isValid: false, errors };
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤
  if (structure.structure === 'array') {
    if (!Array.isArray(response.data)) {
      errors.push('–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤');
    }
    return { isValid: errors.length === 0, errors };
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
  if (typeof structure.structure === 'object') {
    for (const [key, expectedType] of Object.entries(structure.structure)) {
      const value = getNestedValue(response.data, key);
      
      if (expectedType === 'string' && typeof value !== 'string') {
        errors.push(`–ü–æ–ª–µ ${key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π`);
      } else if (expectedType === 'number' && typeof value !== 'number') {
        errors.push(`–ü–æ–ª–µ ${key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
      } else if (typeof expectedType === 'object' && typeof value !== 'object') {
        errors.push(`–ü–æ–ª–µ ${key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º`);
      }
    }
  }

  return { isValid: errors.length === 0, errors };
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ API —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @param {Error} error - –û—à–∏–±–∫–∞
 * @param {string} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param {Function} onError - Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
export const handleApiError = (error, context = 'API –æ–ø–µ—Ä–∞—Ü–∏—è', onError = null) => {
  console.error(`‚ùå [${context}] –û—à–∏–±–∫–∞:`, error);
  
  let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏';
  
  if (error.response?.data?.error) {
    errorMessage = error.response.data.error;
  } else if (error.response?.data?.message) {
    errorMessage = error.response.data.message;
  } else if (error.message) {
    errorMessage = error.message;
  }
  
  console.error(`‚ùå [${context}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${errorMessage}`);
  
  if (onError) {
    onError(errorMessage);
  }
  
  return errorMessage;
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –æ—à–∏–±–∫–∏ –¥–ª—è API
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {string} code - –ö–æ–¥ –æ—à–∏–±–∫–∏
 * @param {Object} details - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
 */
export const createApiError = (message, code = 'API_ERROR', details = {}) => {
  return {
    error: true,
    message,
    code,
    details,
    timestamp: new Date().toISOString()
  };
}; 