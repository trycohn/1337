/**
 * üß™ –¢–ï–°–¢–´ –î–õ–Ø –£–¢–ò–õ–ò–¢ API
 */

import {
  extractTournamentId,
  getNestedValue,
  validateApiResponse,
  handleApiError,
  API_RESPONSE_STRUCTURES
} from './apiUtils';

// –ú–æ–∫ –¥–ª—è console.log/error
const originalConsole = console;
const mockConsole = {
  log: jest.fn(),
  error: jest.fn(),
  warn: jest.fn()
};

beforeEach(() => {
  global.console = mockConsole;
});

afterEach(() => {
  global.console = originalConsole;
  jest.clearAllMocks();
});

describe('apiUtils', () => {
  describe('getNestedValue', () => {
    test('–¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ–∫–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', () => {
      const obj = { tournament: { id: 123 } };
      expect(getNestedValue(obj, 'tournament.id')).toBe(123);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å undefined –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—É—Ç–∏', () => {
      const obj = { tournament: { id: 123 } };
      expect(getNestedValue(obj, 'tournament.nonexistent')).toBeUndefined();
    });
  });

  describe('extractTournamentId', () => {
    test('–¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ–∫–∞—Ç—å ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ CREATE_TOURNAMENT', () => {
      const response = {
        data: {
          message: '–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω',
          tournament: { id: 123 }
        }
      };
      
      expect(extractTournamentId(response, 'CREATE_TOURNAMENT')).toBe(123);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞', () => {
      const response = {
        data: {
          message: '–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω',
          tournament: { id: 'invalid' }
        }
      };
      
      expect(extractTournamentId(response, 'CREATE_TOURNAMENT')).toBeNull();
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ response.data', () => {
      const response = {};
      expect(extractTournamentId(response, 'CREATE_TOURNAMENT')).toBeNull();
    });
  });

  describe('validateApiResponse', () => {
    test('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É CREATE_TOURNAMENT', () => {
      const response = {
        data: {
          message: '–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω',
          tournament: { id: 123 }
        }
      };
      
      const result = validateApiResponse(response, 'CREATE_TOURNAMENT');
      expect(result.isValid).toBe(true);
      expect(result.errors).toHaveLength(0);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã', () => {
      const response = {
        data: {
          message: 123, // –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
          tournament: { id: 'invalid' } // –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º
        }
      };
      
      const result = validateApiResponse(response, 'CREATE_TOURNAMENT');
      expect(result.isValid).toBe(false);
      expect(result.errors.length).toBeGreaterThan(0);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –¥–ª—è GET_TOURNAMENTS', () => {
      const response = {
        data: [{ id: 1 }, { id: 2 }]
      };
      
      const result = validateApiResponse(response, 'GET_TOURNAMENTS');
      expect(result.isValid).toBe(true);
    });

    test('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–∞—Å—Å–∏–≤–∞', () => {
      const response = {
        data: { notAnArray: true }
      };
      
      const result = validateApiResponse(response, 'GET_TOURNAMENTS');
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤');
    });
  });

  describe('handleApiError', () => {
    test('–¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ response.data.error', () => {
      const error = {
        response: {
          data: { error: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞' }
        }
      };
      
      const result = handleApiError(error, '–¢–µ—Å—Ç');
      expect(result).toBe('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞');
    });

    test('–¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ response.data.message', () => {
      const error = {
        response: {
          data: { message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' }
        }
      };
      
      const result = handleApiError(error, '–¢–µ—Å—Ç');
      expect(result).toBe('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    });

    test('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å error.message –∫–∞–∫ fallback', () => {
      const error = {
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ error.message'
      };
      
      const result = handleApiError(error, '–¢–µ—Å—Ç');
      expect(result).toBe('–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ error.message');
    });

    test('–¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å onError callback', () => {
      const onError = jest.fn();
      const error = { message: '–¢–µ—Å—Ç' };
      
      handleApiError(error, '–¢–µ—Å—Ç', onError);
      expect(onError).toHaveBeenCalledWith('–¢–µ—Å—Ç');
    });
  });
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
export const mockApiResponse = {
  createTournament: {
    success: {
      data: {
        message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        tournament: { id: 123, name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä' }
      }
    },
    error: {
      response: {
        data: { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞' }
      }
    }
  },
  
  getTournaments: {
    success: {
      data: [
        { id: 1, name: '–¢—É—Ä–Ω–∏—Ä 1' },
        { id: 2, name: '–¢—É—Ä–Ω–∏—Ä 2' }
      ]
    }
  }
}; 