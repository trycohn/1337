// üîß –§–ò–ù–ê–õ–¨–ù–´–ô Socket.IO –∫–ª–∏–µ–Ω—Ç –±–µ–∑ HTTP/2
import { io } from 'socket.io-client';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è HTTP/1.1 setup
const SOCKET_CONFIG = {
  url: process.env.NODE_ENV === 'production' 
    ? 'https://1337community.com'
    : 'http://localhost:3000',
    
  options: {
    path: '/socket.io',  // ‚Üê –ë–ï–ó trailing slash –¥–ª—è nginx
    
    // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∞—á–∏–Ω–∞–µ–º —Å polling –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è Session ID unknown
    transports: ['polling', 'websocket'],
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è Session ID unknown
    upgrade: true,
    tryAllTransports: true,
    forceNew: false,
    autoConnect: false, // ‚Üê –ö–û–ù–¢–†–û–õ–ò–†–£–ï–ú–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    
    // üõ°Ô∏è STICKY SESSIONS: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è polling
    withCredentials: true,
    addTrailingSlash: false, // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±–µ–∑ trailing slash
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è polling —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    transportOptions: {
      polling: {
        extraHeaders: {}  // ‚Üê –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ authenticateSocket
      }
    },
    
    // üîÑ –¢–ê–ô–ú–ê–£–¢–´: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    pingTimeout: 20000,  // ‚Üê –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    pingInterval: 25000, // ‚Üê –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    
    // üì° POLLING: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è Session ID unknown
    rememberUpgrade: false, // ‚Üê –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç session conflicts
    enablesXDR: false,      // ‚Üê –û—Ç–∫–ª—é—á–∞–µ–º XDomainRequest –¥–ª—è —Å—Ç–∞—Ä—ã—Ö IE
    jsonp: false,           // ‚Üê –û—Ç–∫–ª—é—á–∞–µ–º JSONP
    
    // üîß –û–¢–õ–ê–î–ö–ê
    timestampRequests: true,
    timestampParam: 't'
  }
};

let socket = null;
let isInitialized = false;
let lastToken = null;

// üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø —Å–æ–∑–¥–∞–Ω–∏—è Socket —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
const createSocketSafely = () => {
  try {
    console.log('üîß [Socket.IO Final] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Socket —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:', SOCKET_CONFIG);
    
    const newSocket = io(SOCKET_CONFIG.url, SOCKET_CONFIG.options);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Socket —Å–æ–∑–¥–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if (!newSocket || typeof newSocket.on !== 'function') {
      console.error('‚ùå [Socket.IO Final] –°–æ–∑–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Socket –æ–±—ä–µ–∫—Ç');
      return createFallbackSocket();
    }
    
    console.log('‚úÖ [Socket.IO Final] Socket —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID:', newSocket.id);
    return newSocket;
    
  } catch (error) {
    console.error('‚ùå [Socket.IO Final] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Socket:', error);
    return createFallbackSocket();
  }
};

// üîÑ FALLBACK –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è undefined –æ—à–∏–±–æ–∫
const createFallbackSocket = () => {
  console.warn('‚ö†Ô∏è [Socket.IO Final] –°–æ–∑–¥–∞–µ–º fallback Socket –æ–±—ä–µ–∫—Ç');
  return {
    on: () => {},
    emit: () => {},
    connect: () => {},
    disconnect: () => {},
    id: 'fallback-socket',
    connected: false
  };
};

// üîå –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Socket
export const getSocketInstance = () => {
  if (!socket) {
    console.log('üîß [Socket.IO Final] –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket...');
    socket = createSocketSafely();
    isInitialized = false;
  }
  
  return socket;
};

// üîê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
export const authenticateSocket = (token) => {
  if (!token) {
    console.warn('‚ö†Ô∏è [Socket.IO Final] –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return;
  }
  
  console.log('üîê [Socket.IO Final] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Socket —Å —Ç–æ–∫–µ–Ω–æ–º...');
  
  try {
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º Socket –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (lastToken !== token || !socket) {
      console.log('üîÑ [Socket.IO Final] –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º Socket –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
      
      // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–π Socket
      if (socket && typeof socket.disconnect === 'function') {
        socket.disconnect();
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Socket —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      const authConfig = {
        ...SOCKET_CONFIG.options,
        auth: { token }, // ‚Üê –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–∞
        transportOptions: {
          polling: {
            extraHeaders: {
              'Authorization': `Bearer ${token}` // ‚Üê –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è polling
            }
          }
        }
      };
      
      socket = io(SOCKET_CONFIG.url, authConfig);
      lastToken = token;
      isInitialized = false;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    if (!isInitialized) {
      setupSocketEventHandlers();
      isInitialized = true;
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if (!socket.connected) {
      console.log('üîå [Socket.IO Final] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
      socket.connect();
    } else {
      console.log('‚úÖ [Socket.IO Final] Socket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
    
  } catch (error) {
    console.error('‚ùå [Socket.IO Final] –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Socket:', error);
  }
};

// üéß –ù–ê–°–¢–†–û–ô–ö–ê –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
const setupSocketEventHandlers = () => {
  if (!socket) return;
  
  console.log('üéß [Socket.IO Final] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
  
  // üéâ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
  socket.on('connect', () => {
    console.log('üéâ [Socket.IO Final] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!', {
      socketId: socket.id,
      transport: socket.io?.engine?.transport?.name,
      upgraded: socket.io?.engine?.upgraded
    });
  });
  
  // üíî –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï
  socket.on('disconnect', (reason, details) => {
    console.log('üíî [Socket.IO Final] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', {
      reason,
      details,
      socketId: socket.id
    });
  });
  
  // ‚ùå –û–®–ò–ë–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø - Context7 best practice
  socket.on('connect_error', (error) => {
    console.error('‚ùå [Socket.IO Final] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', {
      message: error.message,
      type: error.type,
      description: error.description,
      context: error.context,
      data: error.data
    });
    
    // Fallback –Ω–∞ polling –µ—Å–ª–∏ WebSocket –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if (error.message?.includes('websocket')) {
      console.log('üîÑ [Socket.IO Final] –ü–æ–ø—ã—Ç–∫–∞ fallback –Ω–∞ polling...');
      if (socket.io?.opts) {
        socket.io.opts.transports = ['polling'];
      }
    }
  });
  
  // üîÑ –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
  socket.on('reconnect', (attemptNumber) => {
    console.log('üîÑ [Socket.IO Final] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', attemptNumber);
  });
  
  socket.on('reconnect_attempt', (attemptNumber) => {
    console.log('üîÑ [Socket.IO Final] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', attemptNumber);
  });
  
  socket.on('reconnecting', (attemptNumber) => {
    console.log('üîÑ [Socket.IO Final] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', attemptNumber);
  });
  
  socket.on('reconnect_error', (error) => {
    console.error('‚ùå [Socket.IO Final] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
  });
  
  socket.on('reconnect_failed', () => {
    console.error('‚ùå [Socket.IO Final] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
  });
};

// üéØ –¢–£–†–ù–ò–†–´: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
export const watchTournament = (tournamentId) => {
  const socket = getSocketInstance();
  
  if (!tournamentId) {
    console.warn('‚ö†Ô∏è [Socket.IO Final] Tournament ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
    return;
  }
  
  console.log('üéØ [Socket.IO Final] –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç—É—Ä–Ω–∏—Ä:', tournamentId);
  
  try {
    socket.emit('join-tournament', tournamentId);
    console.log('‚úÖ [Socket.IO Final] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É:', tournamentId);
  } catch (error) {
    console.error('‚ùå [Socket.IO Final] –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É:', error);
  }
};

// üéØ –¢–£–†–ù–ò–†–´: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞
export const unwatchTournament = (tournamentId) => {
  const socket = getSocketInstance();
  
  if (!tournamentId) {
    console.warn('‚ö†Ô∏è [Socket.IO Final] Tournament ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏');
    return;
  }
  
  console.log('üëã [Socket.IO Final] –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞:', tournamentId);
  
  try {
    socket.emit('leave-tournament', tournamentId);
    console.log('‚úÖ [Socket.IO Final] –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞:', tournamentId);
  } catch (error) {
    console.error('‚ùå [Socket.IO Final] –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞:', error);
  }
};

// üîÑ –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï: –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const recreateSocket = () => {
  console.log('üîÑ [Socket.IO Final] –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ Socket...');
  
  // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π Socket
  if (socket) {
    try {
      socket.disconnect();
    } catch (error) {
      console.warn('‚ö†Ô∏è [Socket.IO Final] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ Socket:', error);
    }
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  socket = null;
  isInitialized = false;
  lastToken = null;
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Socket
  socket = createSocketSafely();
  
  console.log('‚úÖ [Socket.IO Final] Socket –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω');
  return socket;
};

// üìä –°–¢–ê–¢–£–°: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
export const getConnectionStatus = () => {
  const socket = getSocketInstance();
  
  return {
    connected: socket.connected || false,
    id: socket.id || null,
    transport: socket.io?.engine?.transport?.name || 'unknown',
    url: SOCKET_CONFIG.url,
    hasAuth: !!socket.auth?.token,
    timestamp: new Date().toISOString()
  };
};

console.log('üîß [Socket.IO Final] –ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
console.log('üåê [Socket.IO Final] –†–µ–∂–∏–º:', process.env.NODE_ENV);
console.log('üîó [Socket.IO Final] URL:', SOCKET_CONFIG.url);
