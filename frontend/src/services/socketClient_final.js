// üîß –§–ò–ù–ê–õ–¨–ù–´–ô Socket.IO –∫–ª–∏–µ–Ω—Ç –±–µ–∑ HTTP/2
import { io } from 'socket.io-client';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è HTTP/1.1 setup
const SOCKET_CONFIG = {
  url: process.env.NODE_ENV === 'production' 
    ? 'https://1337community.com'
    : 'http://localhost:3000',
    
  options: {
    path: '/socket.io/',
    
    // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∞—á–∏–Ω–∞–µ–º —Å polling –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è Session ID unknown
    transports: ['polling', 'websocket'],
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è Session ID unknown
    upgrade: true,
    tryAllTransports: true,
    forceNew: false,
    autoConnect: false, // ‚Üê –ö–û–ù–¢–†–û–õ–ò–†–£–ï–ú–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    
    // üõ°Ô∏è STICKY SESSIONS: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è polling
    withCredentials: true,
    addTrailingSlash: false, // ‚Üê /socket.io –≤–º–µ—Å—Ç–æ /socket.io/
    
    // –ü—Ä–æ–¥–∞–∫—à–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    timeout: 30000, // ‚Üê –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    reconnection: true,
    reconnectionDelay: 2000, // ‚Üê –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞
    reconnectionDelayMax: 10000, // ‚Üê –ë–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º
    maxReconnectionAttempts: 5, // ‚Üê –ú–µ–Ω—å—à–µ –ø–æ–ø—ã—Ç–æ–∫, –Ω–æ –¥–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    
    // üìã TRANSPORT OPTIONS: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è polling
    transportOptions: {
      polling: {
        extraHeaders: {},
        // ‚úÖ –í–ê–ñ–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è polling
        requestTimeout: 20000,
        responseTimeout: 20000,
      },
      websocket: {
        extraHeaders: {},
      }
    },
    
    // üîß Engine.IO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Session ID unknown
    pingInterval: 25000, // ‚Üê –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    pingTimeout: 20000,  // ‚Üê –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    // CORS –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    extraHeaders: {},
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    query: {},
    
    // üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Å—Å–∏–π
    enablesXDR: false,
    timestampRequests: true,
    timestampParam: 't',
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    jsonp: false,
    forceJSONP: false,
    forceBase64: false,
  }
};

// üõ°Ô∏è FALLBACK SOCKET: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è undefined –æ—à–∏–±–æ–∫
const createFallbackSocket = () => ({
  connected: false,
  id: null,
  auth: {},
  io: { 
    opts: { 
      transportOptions: { 
        polling: { extraHeaders: {} }, 
        websocket: { extraHeaders: {} } 
      }, 
      extraHeaders: {} 
    } 
  },
  on: (event, callback) => { 
    console.warn(`‚ö†Ô∏è [Socket.IO Final] Fallback: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ "${event}"`); 
    return this; 
  },
  emit: (event, ...args) => { 
    console.warn(`‚ö†Ô∏è [Socket.IO Final] Fallback: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º emit "${event}"`); 
    return this; 
  },
  connect: () => { 
    console.warn('‚ö†Ô∏è [Socket.IO Final] Fallback: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º connect()'); 
    return this; 
  },
  disconnect: () => { 
    console.warn('‚ö†Ô∏è [Socket.IO Final] Fallback: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º disconnect()'); 
    return this; 
  },
  off: (event, callback) => {
    console.warn(`‚ö†Ô∏è [Socket.IO Final] Fallback: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º off "${event}"`);
    return this;
  },
  removeAllListeners: (event) => {
    console.warn(`‚ö†Ô∏è [Socket.IO Final] Fallback: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º removeAllListeners "${event}"`);
    return this;
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å Socket
let socketInstance = null;

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Socket —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Session ID unknown
const createSocketInstance = () => {
  try {
    console.log('üîß [Socket.IO Final] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Socket –∏–Ω—Å—Ç–∞–Ω—Å...');
    console.log('üîó [Socket.IO Final] URL:', SOCKET_CONFIG.url);
    console.log('‚öôÔ∏è [Socket.IO Final] –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã:', SOCKET_CONFIG.options.transports);
    
    const socket = io(SOCKET_CONFIG.url, SOCKET_CONFIG.options);
    
    // üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    if (!socket) {
      throw new Error('Socket.IO client initialization failed');
    }
    
    if (typeof socket.on !== 'function') {
      throw new Error('Socket.IO client missing "on" method');
    }
    
    // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê Session ID unknown –∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    socket.on('connect_error', (error) => {
      console.error('‚ùå [Socket.IO Final] –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:', error);
      
      if (error.message && error.message.includes('Session ID unknown')) {
        console.warn('üîÑ [Socket.IO Final] Session ID unknown - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
          if (socket && socket.connected === false) {
            console.log('üîÑ [Socket.IO Final] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
            socket.connect();
          }
        }, 3000);
      }
      
      if (error.message && error.message.includes('xhr poll error')) {
        console.warn('üîÑ [Socket.IO Final] XHR polling error - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ websocket...');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ websocket –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö polling
        if (socket.io && socket.io.opts) {
          socket.io.opts.transports = ['websocket'];
        }
      }
    });
    
    // ‚úÖ POLLING EVENTS: –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Session ID unknown
    socket.on('disconnect', (reason, details) => {
      console.warn('üíî [Socket.IO Final] –û–¢–ö–õ–Æ–ß–ï–ù–û:', { reason, details });
      
      if (reason === 'transport error' && details && details.message) {
        console.error('üö® [Socket.IO Final] Transport error:', details.message);
        
        if (details.message.includes('Session ID unknown')) {
          console.warn('üîÑ [Socket.IO Final] Session lost - –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
        }
      }
    });
    
    // ‚úÖ –£–°–ü–ï–®–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
    socket.on('connect', () => {
      console.log('‚úÖ [Socket.IO Final] –ü–û–î–ö–õ–Æ–ß–ï–ù–û!');
      console.log('üîó [Socket.IO Final] Socket ID:', socket.id);
      console.log('üöÄ [Socket.IO Final] Transport:', socket.io.engine.transport.name);
      console.log('üîå [Socket.IO Final] Connected:', socket.connected);
    });
    
    // ‚úÖ TRANSPORT UPGRADE LOGS
    socket.io.on('upgrade', () => {
      console.log('‚¨ÜÔ∏è [Socket.IO Final] Transport upgraded to:', socket.io.engine.transport.name);
    });
    
    console.log('‚úÖ [Socket.IO Final] Socket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    return socket;
    
  } catch (error) {
    console.error('‚ùå [Socket.IO Final] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Socket:', error);
    console.error('üìç [Socket.IO Final] Stack trace:', error.stack);
    return createFallbackSocket();
  }
};

// üîß –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ Socket –∏–Ω—Å—Ç–∞–Ω—Å–∞
export const getSocketInstance = () => {
  if (!socketInstance) {
    socketInstance = createSocketInstance();
  }
  
  // üõ°Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ–±—ä–µ–∫—Ç –≤–∞–ª–∏–¥–Ω—ã–π
  if (!socketInstance || typeof socketInstance.on !== 'function') {
    console.warn('‚ö†Ô∏è [Socket.IO Final] –ò–Ω—Å—Ç–∞–Ω—Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ–∑–¥–∞–µ–º fallback...');
    socketInstance = createFallbackSocket();
  }
  
  return socketInstance;
};

// üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const authenticateSocket = (token) => {
  const socket = getSocketInstance();
  
  if (!token) {
    console.warn('‚ö†Ô∏è [Socket.IO Final] –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    return;
  }
  
  console.log('üîê [Socket.IO Final] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
  
  try {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ auth –æ–±—ä–µ–∫—Ç
    socket.auth = { token };
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
    const authHeader = `Bearer ${token}`;
    
    // –î–ª—è polling —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    if (socket.io.opts.transportOptions && socket.io.opts.transportOptions.polling) {
      socket.io.opts.transportOptions.polling.extraHeaders.authorization = authHeader;
    }
    
    // –î–ª—è websocket —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞  
    if (socket.io.opts.transportOptions && socket.io.opts.transportOptions.websocket) {
      socket.io.opts.transportOptions.websocket.extraHeaders.authorization = authHeader;
    }
    
    // –î–ª—è –æ–±—â–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if (socket.io.opts.extraHeaders) {
      socket.io.opts.extraHeaders.authorization = authHeader;
    }
    
    // ‚úÖ –ü–û–î–ö–õ–Æ–ß–ê–ï–ú–°–Ø –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if (!socket.connected) {
      console.log('üîå [Socket.IO Final] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...');
      socket.connect();
    } else {
      console.log('‚úÖ [Socket.IO Final] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('‚ùå [Socket.IO Final] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
  }
};

// üéØ –¢–£–†–ù–ò–†–´: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
export const watchTournament = (tournamentId) => {
  const socket = getSocketInstance();
  
  if (!tournamentId) {
    console.warn('‚ö†Ô∏è [Socket.IO Final] Tournament ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
    return;
  }
  
  console.log('üéØ [Socket.IO Final] –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç—É—Ä–Ω–∏—Ä:', tournamentId);
  
  try {
    socket.emit('join-tournament', tournamentId);
    console.log('‚úÖ [Socket.IO Final] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É:', tournamentId);
  } catch (error) {
    console.error('‚ùå [Socket.IO Final] –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç—É—Ä–Ω–∏—Ä—É:', error);
  }
};

// üîÑ –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï: –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const recreateSocket = () => {
  console.log('üîÑ [Socket.IO Final] –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º Socket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
  
  try {
    if (socketInstance) {
      socketInstance.disconnect();
      socketInstance = null;
    }
    
    socketInstance = createSocketInstance();
    console.log('‚úÖ [Socket.IO Final] Socket —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω');
    return socketInstance;
    
  } catch (error) {
    console.error('‚ùå [Socket.IO Final] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è Socket:', error);
    return createFallbackSocket();
  }
};

// üìä –°–¢–ê–¢–£–°: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
export const getConnectionStatus = () => {
  const socket = getSocketInstance();
  
  return {
    connected: socket.connected || false,
    id: socket.id || null,
    transport: socket.io?.engine?.transport?.name || 'unknown',
    url: SOCKET_CONFIG.url,
    hasAuth: !!socket.auth?.token,
    timestamp: new Date().toISOString()
  };
};

console.log('üîß [Socket.IO Final] –ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
console.log('üåê [Socket.IO Final] –†–µ–∂–∏–º:', process.env.NODE_ENV);
console.log('üîó [Socket.IO Final] URL:', SOCKET_CONFIG.url);
