// üîß –§–ò–ù–ê–õ–¨–ù–´–ô Socket.IO –∫–ª–∏–µ–Ω—Ç –±–µ–∑ HTTP/2 —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
import { io } from 'socket.io-client';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è HTTP/1.1 setup
const SOCKET_CONFIG = {
  url: process.env.NODE_ENV === 'production' 
    ? 'https://1337community.com'
    : 'http://localhost:3000',
    
  options: {
    path: '/socket.io/',
    
    // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: WebSocket –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å –Ω–∞–¥–µ–∂–Ω—ã–º fallback
    transports: ['websocket', 'polling'],
    
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π retry –¥–ª—è WebSocket
    tryAllTransports: true,
    forceNew: false,
    upgrade: true,
    
    // –ü—Ä–æ–¥–∞–∫—à–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    timeout: 20000,
    reconnection: true,
    reconnectionDelay: 1000,
    reconnectionDelayMax: 5000,
    maxReconnectionAttempts: 10,
    
    // CORS –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    withCredentials: true,
    autoConnect: false,
    
    // üîê –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    auth: {
      token: null // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    },
    
    // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    transportOptions: {
      polling: {
        extraHeaders: {
          'X-Requested-With': 'XMLHttpRequest'
          // Authorization –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        }
      },
      websocket: {
        extraHeaders: {
          'Origin': process.env.NODE_ENV === 'production' ? 'https://1337community.com' : 'http://localhost:3000'
          // Authorization –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        }
      }
    }
  }
};

// –°–æ–∑–¥–∞–µ–º singleton instance
let socketInstance = null;

// üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
const createSocketInstance = () => {
  try {
    console.log('üîß [Socket.IO Final] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP/1.1 –∫–ª–∏–µ–Ω—Ç–∞...');
    console.log(`üîó [Socket.IO Final] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${SOCKET_CONFIG.url}`);
    
    // –°–æ–∑–¥–∞–µ–º Socket.IO –∫–ª–∏–µ–Ω—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    const socket = io(SOCKET_CONFIG.url, SOCKET_CONFIG.options);
    
    // üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    if (!socket) {
      throw new Error('Socket.IO client initialization failed - returned null/undefined');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
    if (typeof socket.on !== 'function') {
      throw new Error('Socket.IO client initialization failed - missing "on" method');
    }
    
    console.log('‚úÖ [Socket.IO Final] Socket.IO –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupSocketEvents(socket);
    
    return socket;
    
  } catch (error) {
    console.error('üö® [Socket.IO Final] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
    console.error('üö® [Socket.IO Final] Stack trace:', error.stack);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è undefined –æ—à–∏–±–æ–∫
    return createFallbackSocket();
  }
};

// üõ°Ô∏è Fallback –æ–±—ä–µ–∫—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
const createFallbackSocket = () => {
  console.log('üîß [Socket.IO Final] –°–æ–∑–¥–∞–µ–º fallback socket –æ–±—ä–µ–∫—Ç...');
  
  const fallbackSocket = {
    connected: false,
    id: null,
    auth: {},
    io: {
      engine: { transport: { name: 'fallback' } },
      opts: {
        transportOptions: {
          polling: { extraHeaders: {} },
          websocket: { extraHeaders: {} }
        },
        extraHeaders: {}
      }
    },
    
    // Mock –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    on: (event, callback) => {
      console.warn(`‚ö†Ô∏è [Socket.IO Final] Fallback socket - event "${event}" ignored`);
      return fallbackSocket;
    },
    emit: (event, ...args) => {
      console.warn(`‚ö†Ô∏è [Socket.IO Final] Fallback socket - emit "${event}" ignored`);
      return fallbackSocket;
    },
    connect: () => {
      console.warn('‚ö†Ô∏è [Socket.IO Final] Fallback socket - connect ignored');
      return fallbackSocket;
    },
    disconnect: () => {
      console.warn('‚ö†Ô∏è [Socket.IO Final] Fallback socket - disconnect ignored');
      return fallbackSocket;
    }
  };
  
  return fallbackSocket;
};

// üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π Socket.IO
const setupSocketEvents = (socket) => {
  // Debug events
  socket.on('connect', () => {
    console.log('‚úÖ [Socket.IO Final] –ü–û–î–ö–õ–Æ–ß–ï–ù–û! Transport:', socket.io.engine.transport.name);
    console.log('üîó [Socket.IO Final] Socket ID:', socket.id);
    console.log('üéâ [Socket.IO Final] WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ HTTP/2!');
  });
  
  socket.on('connect_error', (error) => {
    console.error('‚ùå [Socket.IO Final] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    console.log('üîÑ [Socket.IO Final] –ü–æ–ø—ã—Ç–∫–∞ fallback –Ω–∞ polling...');
    console.log('üîç [Socket.IO Final] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      type: error.type,
      description: error.description,
      context: error.context,
      message: error.message
    });
  });
  
  socket.on('disconnect', (reason) => {
    console.warn('‚ö†Ô∏è [Socket.IO Final] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', reason);
    if (reason === 'io server disconnect') {
      console.log('üîÑ [Socket.IO Final] –°–µ—Ä–≤–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
      socket.connect();
    }
  });
  
  // Transport events
  socket.io.on('ping', () => {
    console.log('üèì [Socket.IO Final] Ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
  });
  
  if (socket.io.engine) {
    socket.io.engine.on('upgrade', () => {
      console.log('‚¨ÜÔ∏è [Socket.IO Final] –£—Å–ø–µ—à–Ω—ã–π upgrade –Ω–∞ WebSocket!');
    });
    
    socket.io.engine.on('upgradeError', (error) => {
      console.warn('‚ö†Ô∏è [Socket.IO Final] –û—à–∏–±–∫–∞ upgrade, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling:', error.message);
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
  socket.on('error', (error) => {
    console.error('üö® [Socket.IO Final] –û—à–∏–±–∫–∞ Socket.IO:', error);
  });
  
  socket.on('reconnect', (attemptNumber) => {
    console.log(`üîÑ [Socket.IO Final] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ ${attemptNumber})`);
  });
  
  socket.on('reconnect_attempt', (attemptNumber) => {
    console.log(`üîÑ [Socket.IO Final] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${attemptNumber}...`);
  });
  
  socket.on('reconnect_error', (error) => {
    console.error('‚ùå [Socket.IO Final] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
  });
  
  socket.on('reconnect_failed', () => {
    console.error('‚ùå [Socket.IO Final] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
  });
};

// üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Socket.IO
export const getSocketInstance = () => {
  if (!socketInstance) {
    socketInstance = createSocketInstance();
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ–±—ä–µ–∫—Ç –≤–∞–ª–∏–¥–Ω—ã–π
  if (!socketInstance || typeof socketInstance.on !== 'function') {
    console.error('üö® [Socket.IO Final] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Socket instance –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π');
    socketInstance = createFallbackSocket();
  }
  
  return socketInstance;
};

// üîê –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
export const authenticateSocket = (token) => {
  const socket = getSocketInstance();
  
  console.log('üîê [Socket.IO Final] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —Ç–æ–∫–µ–Ω–æ–º');
  
  if (!token) {
    console.error('‚ùå [Socket.IO Final] –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!');
    return;
  }
  
  // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ auth –æ–±—ä–µ–∫—Ç
  socket.auth = { token };
  
  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ extraHeaders –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
  const authHeader = `Bearer ${token}`;
  
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è polling
    if (socket.io.opts.transportOptions.polling) {
      socket.io.opts.transportOptions.polling.extraHeaders.Authorization = authHeader;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è websocket
    if (socket.io.opts.transportOptions.websocket) {
      socket.io.opts.transportOptions.websocket.extraHeaders.Authorization = authHeader;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –æ–±—â–∏–µ extraHeaders (–¥–ª—è Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    if (!socket.io.opts.extraHeaders) {
      socket.io.opts.extraHeaders = {};
    }
    socket.io.opts.extraHeaders.Authorization = authHeader;
  } catch (error) {
    console.warn('‚ö†Ô∏è [Socket.IO Final] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
  }
  
  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï —Ä–∞–∑—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  if (!socket.connected) {
    console.log('üîå [Socket.IO Final] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...');
    socket.connect();
  } else {
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
    console.log('üîÑ [Socket.IO Final] –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    socket.emit('authenticate', { token });
  }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã
export const watchTournament = (tournamentId) => {
  const socket = getSocketInstance();
  if (socket && typeof socket.emit === 'function') {
    socket.emit('watch_tournament', tournamentId);
  }
};

export const unwatchTournament = (tournamentId) => {
  const socket = getSocketInstance();
  if (socket && typeof socket.emit === 'function') {
    socket.emit('unwatch_tournament', tournamentId);
  }
};

export default getSocketInstance;
