import React from 'react';
import { useAchievements } from './achievements/useAchievements';
import './PlayerLevel.css';

/**
 * PlayerLevel - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å, XP –∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
 */
function PlayerLevel({ userId, stats }) {
    const { 
        playerLevel, 
        playerXP,
        dailyStreak,
        isLoading 
    } = useAchievements(userId);

    // –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ XP –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const getXPForLevel = (level) => {
        return Math.floor(100 * Math.pow(1.5, level - 1));
    };

    // –¢–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    const currentLevel = playerLevel || 1;
    const nextLevel = currentLevel + 1;
    
    // XP –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const currentLevelXP = getXPForLevel(currentLevel);
    const nextLevelXP = getXPForLevel(nextLevel);
    const xpInCurrentLevel = playerXP - currentLevelXP;
    const xpNeededForNext = nextLevelXP - playerXP;
    const progressPercent = ((xpInCurrentLevel) / (nextLevelXP - currentLevelXP)) * 100;

    // –ü—Ä–æ–≥–Ω–æ–∑: —Å–∫–æ–ª—å–∫–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤/–º–∞—Ç—á–µ–π –Ω—É–∂–Ω–æ
    const avgXPPerTournament = 50; // –°—Ä–µ–¥–Ω–∏–π XP –∑–∞ —Ç—É—Ä–Ω–∏—Ä
    const avgXPPerMatch = 15; // –°—Ä–µ–¥–Ω–∏–π XP –∑–∞ –º–∞—Ç—á
    
    const tournamentsNeeded = Math.ceil(xpNeededForNext / avgXPPerTournament);
    const matchesNeeded = Math.ceil(xpNeededForNext / avgXPPerMatch);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏—Ç—É–ª –ø–æ —É—Ä–æ–≤–Ω—é
    const getPlayerTitle = (level) => {
        if (level >= 50) return { title: '–õ–µ–≥–µ–Ω–¥–∞', color: '#FFD700' };
        if (level >= 40) return { title: '–ú–∞—Å—Ç–µ—Ä', color: '#FF4500' };
        if (level >= 30) return { title: '–≠–∫—Å–ø–µ—Ä—Ç', color: '#9370DB' };
        if (level >= 20) return { title: '–í–µ—Ç–µ—Ä–∞–Ω', color: '#4169E1' };
        if (level >= 10) return { title: '–û–ø—ã—Ç–Ω—ã–π', color: '#32CD32' };
        return { title: '–ù–æ–≤–∏—á–æ–∫', color: '#A9A9A9' };
    };

    const playerTitle = getPlayerTitle(currentLevel);

    if (isLoading) {
        return (
            <div className="player-level skeleton">
                <div className="level-info">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
        );
    }

    return (
        <div className="player-level">
            <div className="level-header">
                <div className="level-badge" style={{ borderColor: playerTitle.color }}>
                    <div className="level-number">{currentLevel}</div>
                    <div className="level-title" style={{ color: playerTitle.color }}>
                        {playerTitle.title}
                    </div>
                </div>
                
                <div className="level-details">
                    <div className="xp-info">
                        <span className="xp-current">{playerXP.toLocaleString()}</span>
                        <span className="xp-separator">/</span>
                        <span className="xp-next">{nextLevelXP.toLocaleString()}</span>
                        <span className="xp-label">XP</span>
                    </div>
                    
                    {dailyStreak > 0 && (
                        <div className="daily-streak">
                            üî• –°–µ—Ä–∏—è: {dailyStreak} {dailyStreak === 1 ? '–¥–µ–Ω—å' : '–¥–Ω–µ–π'}
                        </div>
                    )}
                </div>
            </div>

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
            <div className="level-progress-container">
                <div className="level-progress-bar">
                    <div 
                        className="level-progress-fill"
                        style={{ 
                            width: `${Math.min(progressPercent, 100)}%`,
                            background: `linear-gradient(90deg, ${playerTitle.color}, ${playerTitle.color}dd)`
                        }}
                    >
                        <span className="progress-text">
                            {Math.round(progressPercent)}%
                        </span>
                    </div>
                </div>
                <div className="level-progress-label">
                    –î–æ {nextLevel} —É—Ä–æ–≤–Ω—è: <strong>{xpNeededForNext.toLocaleString()} XP</strong>
                </div>
            </div>

            {/* –ü—Ä–æ–≥–Ω–æ–∑ */}
            <div className="level-forecast">
                <div className="forecast-title">üí° –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</div>
                <div className="forecast-items">
                    <div className="forecast-item">
                        <span className="forecast-icon">üèÜ</span>
                        <span className="forecast-value">{tournamentsNeeded}</span>
                        <span className="forecast-label">
                            {tournamentsNeeded === 1 ? '—Ç—É—Ä–Ω–∏—Ä' : tournamentsNeeded < 5 ? '—Ç—É—Ä–Ω–∏—Ä–∞' : '—Ç—É—Ä–Ω–∏—Ä–æ–≤'}
                        </span>
                    </div>
                    <div className="forecast-separator">–∏–ª–∏</div>
                    <div className="forecast-item">
                        <span className="forecast-icon">üéÆ</span>
                        <span className="forecast-value">{matchesNeeded}</span>
                        <span className="forecast-label">
                            {matchesNeeded === 1 ? '–º–∞—Ç—á' : matchesNeeded < 5 ? '–º–∞—Ç—á–∞' : '–º–∞—Ç—á–µ–π'}
                        </span>
                    </div>
                </div>
            </div>

            {/* –ë–æ–Ω—É—Å—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å */}
            {currentLevel % 5 === 0 && (
                <div className="level-milestone">
                    üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ä—É–±–µ–∂ {currentLevel} —É—Ä–æ–≤–Ω—è!
                </div>
            )}
        </div>
    );
}

export default PlayerLevel;

