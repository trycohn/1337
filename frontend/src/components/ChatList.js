import React, { useState } from 'react';
import './ChatList.css';
import { formatDate } from '../utils/dateHelpers';

function ChatList({ chats, activeChat, onChatSelect, unreadCounts, onCreateChat }) {
    const [searchQuery, setSearchQuery] = useState('');
    const [showFriendsList, setShowFriendsList] = useState(false);
    const [friends, setFriends] = useState([]);
    const [loadingFriends, setLoadingFriends] = useState(false);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
    const formatLastMessage = (message) => {
        if (!message) return '';
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        let content = message.content;
        if (content.length > 40) {
            content = content.substring(0, 38) + '...';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        switch (message.message_type) {
            case 'image':
                return 'üì∑ –§–æ—Ç–æ';
            case 'file':
                return 'üìé –§–∞–π–ª';
            case 'document':
                return 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç';
            case 'announcement':
                return 'üì£ ' + content;
            default:
                return content;
        }
    };
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —á–∞—Ç–∞
    const getChatStatusPrefix = (chat) => {
        if (chat.is_pinned) return 'üìå ';
        if (chat.is_muted) return 'üîá ';
        return '';
    };
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const getMessageStatusIndicator = (message) => {
        if (!message) return '';
        
        if (message.is_read) return '‚úÖ ';
        
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ formatLastMessage
        switch (message.message_type) {
            case 'image':
                return '';
            case 'file':
                return '';
            case 'document':
                return '';
            case 'announcement':
                // –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                return '';
            default:
                return '';
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const getSenderPrefix = (chat) => {
        if (!chat.last_message) return '';
        // –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        if (chat.type === 'private') {
            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            if (chat.last_message.sender_id === chat.user_id) {
                return `${chat.name}: `;
            }
            // –ò–Ω–∞—á–µ ‚Äî –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return '–í—ã: ';
        }
        // –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if (chat.last_message.sender_username) {
            return `${chat.last_message.sender_username}: `;
        }
        return '';
    };
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    const filteredChats = chats.filter(chat => 
        chat.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (chat.last_message && chat.last_message.content.toLowerCase().includes(searchQuery.toLowerCase()))
    );
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    const loadFriends = async () => {
        setLoadingFriends(true);
        try {
            const token = localStorage.getItem('token');
            const response = await fetch('/api/friends', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            if (response.ok) {
                const data = await response.json();
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
                const acceptedFriends = data.filter(f => f.status === 'accepted');
                setFriends(acceptedFriends);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π:', error);
        } finally {
            setLoadingFriends(false);
        }
    };
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
    const openFriendsList = () => {
        setShowFriendsList(true);
        loadFriends();
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    const handleFriendSelect = (friendId) => {
        onCreateChat(friendId);
        setShowFriendsList(false);
    };

    return (
        <div className="chat-list">
            <div className="chat-list-header">
                <h2>–°–æ–æ–±—â–µ–Ω–∏—è</h2>
                <button className="new-chat-btn" onClick={openFriendsList}>
                    –ù–æ–≤—ã–π —á–∞—Ç
                </button>
            </div>
            
            <div className="chat-search">
                <input 
                    type="text" 
                    placeholder="–ü–æ–∏—Å–∫..." 
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                />
            </div>
            
            <div className="chats-container">
                {filteredChats.length > 0 ? (
                    filteredChats.map(chat => (
                        <div 
                            key={chat.id} 
                            className={`chat-item ${activeChat?.id === chat.id ? 'active' : ''}`}
                            onClick={() => onChatSelect(chat)}
                        >
                            <div className="chat-avatar">
                                <img 
                                    src={chat.avatar_url || '/default-avatar.png'} 
                                    alt={chat.name} 
                                />
                            </div>
                            
                            <div className="chat-info">
                                <div className="chat-name">
                                    {getChatStatusPrefix(chat)}{chat.name}
                                </div>
                                <div className="chat-last-message-container">
                                    <div className="chat-last-message">
                                        {getSenderPrefix(chat)}
                                        {getMessageStatusIndicator(chat.last_message)}
                                        {formatLastMessage(chat.last_message)}
                                    </div>
                                    {unreadCounts[chat.id] > 0 && (
                                        <div className="unread-count">
                                            {unreadCounts[chat.id]}
                                        </div>
                                    )}
                                </div>
                            </div>
                            
                            <div className="chat-meta">
                                {chat.last_message && (
                                    <div className="chat-time">
                                        {formatDate(chat.last_message.created_at)}
                                    </div>
                                )}
                            </div>
                        </div>
                    ))
                ) : (
                    <div className="no-chats">
                        {searchQuery ? '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞' : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}
                    </div>
                )}
            </div>
            
            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ */}
            {showFriendsList && (
                <div className="friends-modal-overlay" onClick={() => setShowFriendsList(false)}>
                    <div className="friends-modal-content" onClick={e => e.stopPropagation()}>
                        <h3>–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞ –¥–ª—è —á–∞—Ç–∞</h3>
                        
                        {loadingFriends ? (
                            <div className="loading-friends">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π...</div>
                        ) : (
                            <div className="friends-list">
                                {friends.length > 0 ? (
                                    friends.map(friend => (
                                        <div 
                                            key={friend.id} 
                                            className="friend-item"
                                            onClick={() => handleFriendSelect(friend.friend.id)}
                                        >
                                            <img 
                                                src={friend.friend.avatar_url || '/default-avatar.png'} 
                                                alt={friend.friend.username} 
                                                className="friend-avatar" 
                                            />
                                            <span className="friend-username">{friend.friend.username}</span>
                                        </div>
                                    ))
                                ) : (
                                    <div className="no-friends">
                                        –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–∑–µ–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ.
                                    </div>
                                )}
                            </div>
                        )}
                        
                        <button 
                            className="close-friends-modal" 
                            onClick={() => setShowFriendsList(false)}
                        >
                            –ó–∞–∫—Ä—ã—Ç—å
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
}

export default ChatList; 