import { useState, useEffect } from 'react';
import { Link, Outlet, useNavigate, useLocation } from 'react-router-dom';
import api from '../axios';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faEnvelope } from '@fortawesome/free-regular-svg-icons';
import './Home.css';
import './Layout.css';
import Loader from './Loader';
import { useLoader } from '../context/LoaderContext';
import { useAuth } from '../context/AuthContext';
import { ensureHttps } from '../utils/userHelpers';
import { useSocket } from '../hooks/useSocket';

function Layout() {
    const { user, logout } = useAuth(); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ AuthContext
    const [error, setError] = useState(null);
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const [unreadCount, setUnreadCount] = useState(0);
    const navigate = useNavigate();
    const location = useLocation();
    const { loading, setLoading } = useLoader();
    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
    const [prevPathname, setPrevPathname] = useState(location.pathname);


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const fetchUnreadCount = async () => {
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                console.log('üìä [Layout] –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞');
                return;
            }
            
            console.log('üìä [Layout] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
            const response = await api.get('/api/chats/unread-count', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            const count = response.data.unread_count || 0;
            console.log('üìä [Layout] –ü–æ–ª—É—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –∏–∑ API:', count);
            setUnreadCount(count);
        } catch (error) {
            console.error('‚ùå [Layout] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ —É–≤–∏–¥–µ–Ω–Ω—ã—Ö
    const markAllMessagesSeen = async () => {
        try {
            const token = localStorage.getItem('token');
            if (!token) return;
            
            console.log('üëÅÔ∏è [Layout] –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–≤–∏–¥–µ–Ω–Ω—ã–µ...');
            await api.post('/api/chats/mark-all-seen', {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            console.log('‚úÖ [Layout] –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —É–≤–∏–¥–µ–Ω–Ω—ã–µ');
            setUnreadCount(0);
        } catch (error) {
            console.error('‚ùå [Layout] –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ —É–≤–∏–¥–µ–Ω–Ω—ã—Ö:', error);
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        if (user) {
            console.log('üìä [Layout] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π');
            fetchUnreadCount();
        }
    }, [user]);

    // üöÄ Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º hook
    const socket = useSocket();

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    useEffect(() => {
        if (!user) return;

        const token = localStorage.getItem('token');
        if (!token) return;

        console.log('üöÄ [Layout] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO...');
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        const connected = socket.connect(token);
        
        if (connected) {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            const handleNewMessage = (message) => {
                console.log('üì¨ [Layout] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
                console.log('üì¨ [Layout] Sender ID:', message.sender_id, 'Current user ID:', user.id);
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (message.sender_id !== user.id) {
                    console.log('üì¨ [Layout] –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
                    setUnreadCount(prev => {
                        const newCount = prev + 1;
                        console.log('üì¨ [Layout] –ù–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫:', newCount);
                        return newCount;
                    });
                } else {
                    console.log('üì¨ [Layout] –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)');
                }
            };

            const handleReadStatus = () => {
                console.log('üì¨ [Layout] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ read_status, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫');
                fetchUnreadCount();
            };

            const handleMessagesRead = (data) => {
                console.log('üìñ [Layout] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ messages_read –¥–ª—è —á–∞—Ç–∞:', data.chat_id);
                fetchUnreadCount();
            };

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            socket.on('new_message', handleNewMessage);
            socket.on('read_status', handleReadStatus);
            socket.on('messages_read', handleMessagesRead);

            // Cleanup
            return () => {
                console.log('üßπ [Layout] –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç Socket.IO —Å–æ–±—ã—Ç–∏–π');
                socket.off('new_message', handleNewMessage);
                socket.off('read_status', handleReadStatus);
                socket.off('messages_read', handleMessagesRead);
            };
        }
    }, [user?.id]); // –¢–æ–ª—å–∫–æ user.id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    useEffect(() => {
        if (user) {
            console.log('üìä [Layout] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', location.pathname, '—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π:', prevPathname);
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–æ–≤, –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–≤–∏–¥–µ–Ω–Ω—ã–µ
            if (location.pathname === '/messages') {
                console.log('üìä [Layout] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–æ–≤, –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞–∫ —É–≤–∏–¥–µ–Ω–Ω—ã–µ');
                markAllMessagesSeen();
            } else {
                // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                fetchUnreadCount();
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
            setPrevPathname(location.pathname);
        }
    }, [location.pathname, user]);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
    useEffect(() => {
        if (!user) return;

        const handleFocus = () => {
            console.log('üìä [Layout] –û–∫–Ω–æ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫');
            fetchUnreadCount();
        };

        const handleVisibilityChange = () => {
            if (!document.hidden) {
                console.log('üìä [Layout] –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫');
                fetchUnreadCount();
            }
        };

        window.addEventListener('focus', handleFocus);
        document.addEventListener('visibilitychange', handleVisibilityChange);

        return () => {
            window.removeEventListener('focus', handleFocus);
            document.removeEventListener('visibilitychange', handleVisibilityChange);
        };
    }, [user]);

    useEffect(() => {
        setLoading(true);
        const timer = setTimeout(() => {
            setLoading(false);
        }, 800);
        return () => clearTimeout(timer);
    }, [location.pathname, setLoading]);

    const handleLogout = () => {
        logout(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º logout –∏–∑ AuthContext
        navigate('/');
    };

    const toggleMenu = () => {
        setIsMenuOpen(!isMenuOpen);
    };

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    useEffect(() => {
        const handleResize = () => {
            setIsMobile(window.innerWidth <= 768);
        };
        
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    const handleMessagesIconClick = () => {
        console.log('üìä [Layout] –ö–ª–∏–∫ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–≤–∏–¥–µ–Ω–Ω—ã–µ');
        markAllMessagesSeen();
    };

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏ –∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (isMenuOpen && !event.target.closest('.navigation') && !event.target.closest('.hamburger')) {
                setIsMenuOpen(false);
            }
        };

        const handleEscapeKey = (event) => {
            if (event.key === 'Escape' && isMenuOpen) {
                setIsMenuOpen(false);
            }
        };

        if (isMenuOpen) {
            document.addEventListener('mousedown', handleClickOutside);
            document.addEventListener('keydown', handleEscapeKey);
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ñ–æ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–µ–Ω—é
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = 'unset';
        }

        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
            document.removeEventListener('keydown', handleEscapeKey);
            document.body.style.overflow = 'unset';
        };
    }, [isMenuOpen]);

    return (
        <div className="home-container">
            {loading && <Loader />}
            <header className="header">
                    <div className="nav-container">
                        <button className="hamburger" onClick={toggleMenu}>
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M3 6H21V8H3V6Z" fill="#ffffff"/>
                                <path d="M3 11H21V13H3V11Z" fill="#ffffff"/>
                                <path d="M3 16H21V18H3V16Z" fill="#ffffff"/>
                            </svg>
                        </button>
                        <nav 
                            className={`navigation ${isMenuOpen ? 'open' : ''}`}
                            onClick={(e) => {
                                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Ñ–æ–Ω—É (–Ω–µ –ø–æ —Å—Å—ã–ª–∫–∞–º)
                                if (e.target === e.currentTarget) {
                                    setIsMenuOpen(false);
                                }
                            }}
                        >
                            <Link to="/" onClick={() => setIsMenuOpen(false)}>–ì–ª–∞–≤–Ω–∞—è</Link>
                            <Link to="/tournaments" onClick={() => setIsMenuOpen(false)}>–¢—É—Ä–Ω–∏—Ä—ã</Link>
                            {user && (
                                <>
                                    <Link to="/create" onClick={() => setIsMenuOpen(false)}>
                                        –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
                                    </Link>
                                    <Link to="/profile" onClick={() => setIsMenuOpen(false)}>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</Link>
                                    <Link to="/messages" onClick={() => setIsMenuOpen(false)}>–ß–∞—Ç—ã</Link>
                                    {user.role === 'admin' && (
                                        <Link to="/admin" onClick={() => setIsMenuOpen(false)} className="admin-link">
                                            –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
                                        </Link>
                                    )}
                                    {isMobile && (
                                        <button onClick={() => { 
                                            handleLogout(); 
                                            setIsMenuOpen(false); 
                                        }}>
                                            –í—ã–π—Ç–∏
                                        </button>
                                    )}
                                </>
                            )}
                        </nav>
                    </div>
                    <div className="auth-block">
                        {user ? (
                            <div className="user-info">
                                <Link to="/profile" className="header-avatar-link">
                                    <img
                                        src={ensureHttps(user.avatar_url) || '/default-avatar.png'}
                                        alt={user.username || 'User'}
                                        className="profile-avatar"
                                    />
                                </Link>
                                <Link to="/profile" className="username-link">
                                    {user.username}
                                </Link>
                                <Link to="/messages" className="messages-link" onClick={handleMessagesIconClick}>
                                    <div className="messages-icon-container">
                                        <FontAwesomeIcon
                                            icon={faEnvelope}
                                            className="messages-icon"
                                            style={{ color: '#FFFFFF' }}
                                        />
                                        {unreadCount > 0 && (
                                            <span className="unread-badge">
                                                {unreadCount > 99 ? '99+' : unreadCount}
                                            </span>
                                        )}
                                    </div>
                                </Link>
                                <button onClick={handleLogout}>–í—ã–π—Ç–∏</button>
                            </div>
                        ) : (
                            <div className="login-button-container">
                                <Link to="/auth" className="login-button">–í–æ–π—Ç–∏</Link>
                            </div>
                        )}
                    </div>
                </header>

            <main className={isMobile && location.pathname === '/messages' ? 'messenger-page' : ''}>
                <Outlet />
            </main>
        </div>
    );
}

export default Layout;