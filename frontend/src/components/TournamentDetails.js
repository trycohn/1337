/**
 * TournamentDetails v4.1.0 - Full Feature Restoration
 * 
 * @version 4.1.0 (–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
 * @created 2025-01-22
 * @author 1337 Community Development Team
 * @purpose –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useParams, Link } from 'react-router-dom';
import { io } from 'socket.io-client';
import api from '../utils/api';
import './TournamentDetails.css';
import TeamGenerator from './TeamGenerator';
import BracketRenderer from './BracketRenderer';
import { ensureHttps } from '../utils/userHelpers';

// Error Boundary –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
class TournamentErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false, errorInfo: null };
    }

    static getDerivedStateFromError(error) {
        return { hasError: true };
    }

    componentDidCatch(error, errorInfo) {
        console.error('üö® TournamentDetails Critical Error:', error, errorInfo);
        this.setState({ errorInfo });
    }

    render() {
        if (this.state.hasError) {
            return (
                <div className="tournament-critical-error">
                    <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h2>
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
                    <button onClick={() => window.location.reload()}>
                        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    </button>
                </div>
            );
        }
        return this.props.children;
    }
}

function TournamentDetails() {
    const { id } = useParams();
    
    // üéØ –û–°–ù–û–í–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø
    const [tournament, setTournament] = useState(null);
    const [user, setUser] = useState(null);
    const [matches, setMatches] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [activeTab, setActiveTab] = useState('info');
    
    // üéØ UI –°–û–°–¢–û–Ø–ù–ò–Ø
    const [message, setMessage] = useState('');
    const [wsConnected, setWsConnected] = useState(false);
    const [selectedMatch, setSelectedMatch] = useState(null);
    const [mixedTeams, setMixedTeams] = useState([]);
    const [ratingType, setRatingType] = useState('faceit');
    const [dataLoadingStates, setDataLoadingStates] = useState({
        tournament: false,
        matches: false,
        user: false
    });
    
    // üéØ –ü–†–ê–í–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    const userPermissions = useMemo(() => {
        if (!user || !tournament) {
            return {
                isParticipating: false,
                isCreator: false,
                isAdminOrCreator: false,
                canEdit: false
            };
        }

        const isCreator = tournament.creator_id === user.id;
        const isParticipating = tournament.participants?.some(
            p => p.user_id === user.id || p.id === user.id
        ) || false;

        return {
            isParticipating,
            isCreator,
            isAdminOrCreator: isCreator,
            canEdit: isCreator
        };
    }, [user, tournament]);

    // üéØ –ó–ê–ì–†–£–ó–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    const loadUser = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) return;

        try {
            setDataLoadingStates(prev => ({ ...prev, user: true }));
            const response = await api.get('/api/users/me');
            setUser(response.data);
        } catch (error) {
            console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω:', error.message);
        } finally {
            setDataLoadingStates(prev => ({ ...prev, user: false }));
        }
    }, []);

    // üéØ –ó–ê–ì–†–£–ó–ö–ê –¢–£–†–ù–ò–†–ê –ò –î–ê–ù–ù–´–•
    const loadTournamentData = useCallback(async () => {
        if (!id) return;

        try {
            setLoading(true);
            setError(null);
            setDataLoadingStates(prev => ({ ...prev, tournament: true }));

            // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Ç—É—Ä–Ω–∏—Ä–∞
            const tournamentResponse = await api.get(`/api/tournaments/${id}`);
            const tournamentData = tournamentResponse.data;
            
            setTournament(tournamentData);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç—á–∏
            let matchesData = [];
            
            if (tournamentData.matches && Array.isArray(tournamentData.matches)) {
                matchesData = tournamentData.matches;
                console.log('‚úÖ –ú–∞—Ç—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞');
            } else {
                try {
                    setDataLoadingStates(prev => ({ ...prev, matches: true }));
                    const matchesResponse = await api.get(`/api/tournaments/${id}/matches`);
                    matchesData = matchesResponse.data || [];
                    console.log('‚úÖ –ú–∞—Ç—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º');
                } catch (matchesError) {
                    console.warn('‚ö†Ô∏è –ú–∞—Ç—á–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:', matchesError.message);
                    matchesData = [];
                }
            }

            setMatches(matchesData);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–∫—Å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è mix —Ç—É—Ä–Ω–∏—Ä–æ–≤
            if (tournamentData.format === 'mix' && tournamentData.mixed_teams) {
                setMixedTeams(tournamentData.mixed_teams);
            }

        } catch (tournamentError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', tournamentError);
            setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞: ${tournamentError.message}`);
        } finally {
            setLoading(false);
            setDataLoadingStates(prev => ({ 
                ...prev, 
                tournament: false, 
                matches: false 
            }));
        }
    }, [id]);

    // üéØ WEBSOCKET –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
    const setupWebSocket = useCallback(() => {
        if (!user?.id || !tournament?.id) return null;

        const token = localStorage.getItem('token');
        if (!token) return null;

        try {
            console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞', tournament.id);
            
            const socket = io(process.env.REACT_APP_API_URL || 'http://localhost:3000', {
                query: { token },
                transports: ['websocket', 'polling'],
                timeout: 10000,
                forceNew: true
            });

            socket.on('connect', () => {
                console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç—É—Ä–Ω–∏—Ä—É', tournament.id);
                setWsConnected(true);
                
                socket.emit('join-tournament', tournament.id);
                
                socket.emit('join_tournament_chat', tournament.id);
                
                console.log(`üì° –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É ${tournament.id} –∏ —á–∞—Ç—É`);
            });

            socket.on('disconnect', (reason) => {
                console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
                setWsConnected(false);
            });

            socket.on('tournament-update', (data) => {
                console.log('üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ WebSocket:', data);
                setTournament(prev => ({ ...prev, ...data }));
                
                if (data.message) {
                    setMessage(data.message);
                    setTimeout(() => setMessage(''), 3000);
                }
            });

            socket.on('tournament_message', (data) => {
                console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', data);
            });

            socket.on('connect_error', (error) => {
                console.warn('‚ö†Ô∏è WebSocket –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
                setWsConnected(false);
            });

            socket.on('error', (error) => {
                console.warn('‚ö†Ô∏è WebSocket –æ—à–∏–±–∫–∞:', error.message);
                setWsConnected(false);
            });

            return socket;
        } catch (error) {
            console.warn('‚ö†Ô∏è WebSocket –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å:', error.message);
            return null;
        }
    }, [user?.id, tournament?.id]);

    // üéØ –≠–§–§–ï–ö–¢–´
    useEffect(() => {
        loadUser();
    }, []);

    useEffect(() => {
        if (id) {
            loadTournamentData();
        }
    }, [id, loadTournamentData]);

    useEffect(() => {
        const socket = setupWebSocket();
        
        return () => {
            if (socket) {
                console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket');
                socket.disconnect();
            }
        };
    }, [setupWebSocket]);

    // üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô
    const handleParticipate = useCallback(async () => {
        if (!user || !tournament) return;

        try {
            const token = localStorage.getItem('token');
            await api.post(`/api/tournaments/${id}/participate`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ!');
            setTimeout(() => setMessage(''), 3000);
            loadTournamentData();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–∏—è:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [user, tournament, id, loadTournamentData]);

    // üéØ –§–£–ù–ö–¶–ò–Ø –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò –ú–ê–¢–ß–ï–ô –î–õ–Ø BRACKETRENDERER
    const transformMatchesToGames = useCallback((matchesArray) => {
        if (!matchesArray || !Array.isArray(matchesArray)) {
            console.warn('transformMatchesToGames: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π', matchesArray);
            return [];
        }

        console.log('üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –º–∞—Ç—á–µ–π –¥–ª—è BracketRenderer:', matchesArray.length);

        return matchesArray.map(match => {
            // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞
            const participants = [];
            
            // –£—á–∞—Å—Ç–Ω–∏–∫ 1
            if (match.team1_id || match.team1_name) {
                participants.push({
                    id: match.team1_id || `team1_${match.id}`,
                    name: match.team1_name || 'TBD',
                    score: match.team1_score || 0,
                    isWinner: match.winner_id === match.team1_id,
                    avatarUrl: match.team1_avatar_url || null
                });
            }

            // –£—á–∞—Å—Ç–Ω–∏–∫ 2
            if (match.team2_id || match.team2_name) {
                participants.push({
                    id: match.team2_id || `team2_${match.id}`,
                    name: match.team2_name || 'TBD', 
                    score: match.team2_score || 0,
                    isWinner: match.winner_id === match.team2_id,
                    avatarUrl: match.team2_avatar_url || null
                });
            }

            // –ï—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã—Ö
            while (participants.length < 2) {
                participants.push({
                    id: `empty_${match.id}_${participants.length}`,
                    name: 'TBD',
                    score: 0,
                    isWinner: false,
                    avatarUrl: null
                });
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º BracketRenderer
            return {
                id: match.id,
                round: match.round !== undefined ? match.round : 0,
                match_number: match.match_number || 0,
                bracket_type: match.bracket_type || 'winner',
                is_third_place_match: match.is_third_place_match || false,
                state: match.status === 'completed' ? 'DONE' : 'OPEN',
                name: match.name || `–ú–∞—Ç—á ${match.match_number || match.id}`,
                participants: participants,
                winner_id: match.winner_id || null,
                status: match.status || 'pending'
            };
        });
    }, []);

    // üéØ –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø BRACKETRENDERER
    const bracketGames = useMemo(() => {
        if (!matches || matches.length === 0) {
            console.log('üéØ –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏');
            return [];
        }

        const transformedGames = transformMatchesToGames(matches);
        console.log('üéØ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è BracketRenderer:', transformedGames.length);
        return transformedGames;
    }, [matches, transformMatchesToGames]);

    const handleWithdraw = useCallback(async () => {
        if (!user || !tournament) return;

        try {
            const token = localStorage.getItem('token');
            await api.delete(`/api/tournaments/${id}/participate`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ç—É—Ä–Ω–∏—Ä');
            setTimeout(() => setMessage(''), 3000);
            loadTournamentData();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [user, tournament, id, loadTournamentData]);

    const handleGenerateBracket = useCallback(async () => {
        if (!userPermissions.canEdit) return;

        try {
            const token = localStorage.getItem('token');
            await api.post(`/api/tournaments/${id}/generate-bracket`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –°–µ—Ç–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
            setTimeout(() => setMessage(''), 3000);
            loadTournamentData();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [userPermissions.canEdit, id, loadTournamentData]);

    const handleStartTournament = useCallback(async () => {
        if (!userPermissions.canEdit) return;

        try {
            const token = localStorage.getItem('token');
            await api.post(`/api/tournaments/${id}/start`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–ø—É—â–µ–Ω!');
            setTimeout(() => setMessage(''), 3000);
            loadTournamentData();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [userPermissions.canEdit, id, loadTournamentData]);

    const handleEndTournament = useCallback(async () => {
        if (!userPermissions.canEdit || !window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä?')) return;

        try {
            const token = localStorage.getItem('token');
            await api.post(`/api/tournaments/${id}/end`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!');
            setTimeout(() => setMessage(''), 3000);
            loadTournamentData();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [userPermissions.canEdit, id, loadTournamentData]);

    const handleClearResults = useCallback(async () => {
        if (!userPermissions.canEdit || !window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!')) return;

        try {
            const token = localStorage.getItem('token');
            await api.post(`/api/tournaments/${id}/clear-results`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!');
            setTimeout(() => setMessage(''), 3000);
            loadTournamentData();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [userPermissions.canEdit, id, loadTournamentData]);

    const handleTeamClick = useCallback((teamName) => {
        console.log('–ö–ª–∏–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ:', teamName);
        // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã
    }, []);

    const handleMatchClick = useCallback((match) => {
        setSelectedMatch(match);
    }, []);

    const handleRemoveParticipant = useCallback(async (participantId) => {
        if (!userPermissions.canEdit || !window.confirm('–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?')) return;

        try {
            const token = localStorage.getItem('token');
            await api.delete(`/api/tournaments/${id}/participants/${participantId}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω');
            setTimeout(() => setMessage(''), 3000);
            loadTournamentData();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [userPermissions.canEdit, id, loadTournamentData]);

    const handleTeamsGenerated = useCallback((teams) => {
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', teams);
        setMixedTeams(teams);
        loadTournamentData();
    }, [loadTournamentData]);

    const handleTeamsUpdated = useCallback(() => {
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        loadTournamentData();
    }, [loadTournamentData]);

    // üéØ –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –í–ö–õ–ê–î–ö–ê–ú
    const tabs = useMemo(() => [
        { id: 'info', label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', icon: '‚ÑπÔ∏è' },
        { id: 'participants', label: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', icon: 'üë•' },
        { id: 'bracket', label: '–°–µ—Ç–∫–∞', icon: 'üèÜ' },
        { id: 'results', label: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', icon: 'üìä' },
        { id: 'admin', label: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', icon: '‚öôÔ∏è', adminOnly: true }
    ], []);

    const visibleTabs = useMemo(() => 
        tabs.filter(tab => !tab.adminOnly || userPermissions.isAdminOrCreator),
        [tabs, userPermissions.isAdminOrCreator]
    );

    // üéØ –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò
    if (loading) {
        return (
            <div className="tournament-details-tournamentdetails tournament-loading">
                <div className="loading-spinner"></div>
                <h2>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä...</h2>
                <div className="loading-details">
                    {dataLoadingStates.tournament && <p>üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞...</p>}
                    {dataLoadingStates.matches && <p>üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π...</p>}
                    {dataLoadingStates.user && <p>üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>}
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="tournament-details-tournamentdetails tournament-error">
                <h2>‚ùå –û—à–∏–±–∫–∞</h2>
                <p>{error}</p>
                <div className="error-actions">
                    <button onClick={() => {
                        setError(null);
                        loadTournamentData();
                    }}>
                        üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                    <Link to="/tournaments">
                        ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
                    </Link>
                </div>
            </div>
        );
    }

    if (!tournament) {
        return (
            <div className="tournament-details-tournamentdetails tournament-not-found">
                <h2>üîç –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
                <p>–¢—É—Ä–Ω–∏—Ä —Å ID {id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.</p>
                <Link to="/tournaments">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤</Link>
            </div>
        );
    }

    return (
        <TournamentErrorBoundary>
            <section className="tournament-details-tournamentdetails">
                {/* üéØ –ó–ê–ì–û–õ–û–í–û–ö –¢–£–†–ù–ò–†–ê */}
                <div className="tournament-header-tournamentdetails">
                    <h2>{tournament.name}</h2>
                    <div className="tournament-meta">
                        <span className={`status-badge ${tournament.status?.toLowerCase()}`}>
                            {tournament.status === 'registration' && 'üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}
                            {tournament.status === 'active' && 'üéÆ –ê–∫—Ç–∏–≤–Ω—ã–π'}
                            {tournament.status === 'in_progress' && '‚öîÔ∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                            {tournament.status === 'completed' && 'üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω'}
                        </span>
                        {wsConnected && (
                            <span className="websocket-indicator connected" title="–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏">
                                üü¢ Online
                            </span>
                        )}
                        <span className="participants-count">
                            üë• {tournament.participants?.length || 0}
                            {tournament.max_participants && ` / ${tournament.max_participants}`}
                        </span>
                    </div>
                </div>

                {/* üéØ –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –í–ö–õ–ê–î–ö–ê–ú */}
                <nav className="tabs-navigation-tournamentdetails">
                    {visibleTabs.map(tab => (
                        <button
                            key={tab.id}
                            className={`tab-button-tournamentdetails ${activeTab === tab.id ? 'active' : ''}`}
                            onClick={() => setActiveTab(tab.id)}
                        >
                            <span className="tab-icon">{tab.icon}</span>
                            <span className="tab-label-tournamentdetails">{tab.label}</span>
                        </button>
                    ))}
                </nav>

                {/* üéØ –°–û–î–ï–†–ñ–ò–ú–û–ï –í–ö–õ–ê–î–û–ö */}
                <div className="tournament-content-tournamentdetails">
                    {/* –í–ö–õ–ê–î–ö–ê: –ò–ù–§–û–†–ú–ê–¶–ò–Ø */}
                    {activeTab === 'info' && (
                        <div className="tab-content-tournamentdetails tab-info-tournamentdetails">
                            <div className="tournament-info-grid-tournamentdetails">
                                <div className="info-main-tournamentdetails">
                                    <div className="info-block-tournamentdetails">
                                        <h3>üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                                        <div className="tournament-meta-info-tournamentdetails">
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üéÆ –ò–≥—Ä–∞:</strong> {tournament.game || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                                            </div>
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üèÜ –§–æ—Ä–º–∞—Ç:</strong> {tournament.format || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                            </div>
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong> {tournament.participants?.length || 0}
                                                {tournament.max_participants && ` –∏–∑ ${tournament.max_participants}`}
                                            </div>
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üìÖ –°–æ–∑–¥–∞–Ω:</strong> {new Date(tournament.created_at).toLocaleString('ru-RU')}
                                            </div>
                                            {tournament.start_date && (
                                                <div className="meta-item-tournamentdetails">
                                                    <strong>üïê –ù–∞—á–∞–ª–æ:</strong> {new Date(tournament.start_date).toLocaleString('ru-RU')}
                                                </div>
                                            )}
                                        </div>
                                    </div>

                                    {tournament.description && (
                                        <div className="info-block-tournamentdetails">
                                            <h3>üìù –û–ø–∏—Å–∞–Ω–∏–µ</h3>
                                            <p className="tournament-description">{tournament.description}</p>
                                        </div>
                                    )}

                                    {tournament.rules && (
                                        <div className="info-block-tournamentdetails">
                                            <h3>üìú –ü—Ä–∞–≤–∏–ª–∞</h3>
                                            <p className="tournament-rules">{tournament.rules}</p>
                                        </div>
                                    )}

                                    {tournament.prize_pool && (
                                        <div className="info-block-tournamentdetails">
                                            <h3>üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥</h3>
                                            <p className="tournament-prize">{tournament.prize_pool}</p>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* –ö–ù–û–ü–ö–ò –£–ß–ê–°–¢–ò–Ø */}
                            {user && tournament.status === 'registration' && (
                                <div className="participation-controls">
                                    {!userPermissions.isParticipating ? (
                                        <button 
                                            className="btn btn-primary participate-btn"
                                            onClick={handleParticipate}
                                        >
                                            üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                                        </button>
                                    ) : (
                                        <button 
                                            className="btn btn-secondary withdraw-btn"
                                            onClick={handleWithdraw}
                                        >
                                            ‚ùå –ü–æ–∫–∏–Ω—É—Ç—å —Ç—É—Ä–Ω–∏—Ä
                                        </button>
                                    )}
                                </div>
                            )}
                        </div>
                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –£–ß–ê–°–¢–ù–ò–ö–ò */}
                    {activeTab === 'participants' && (
                        <div className="tab-content-tournamentdetails">
                            <h3>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ({tournament.participants?.length || 0})</h3>
                            
                            {tournament.participants && tournament.participants.length > 0 ? (
                                <>
                                    <div className="original-participants-list-wrapper">
                                        <h3>üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h3>
                                        <div className="original-participants-grid">
                                            {tournament.participants.map((participant, index) => (
                                                <div key={participant.id || index} className="participant-card">
                                                    <div className="participant-avatar">
                                                        {participant.avatar_url ? (
                                                            <img 
                                                                src={ensureHttps(participant.avatar_url)} 
                                                                alt={participant.name || participant.username || '–£—á–∞—Å—Ç–Ω–∏–∫'}
                                                                onError={(e) => {e.target.src = '/default-avatar.png'}}
                                                            />
                                                        ) : (
                                                            <div className="avatar-placeholder">
                                                                {(participant.name || participant.username || '–£').charAt(0).toUpperCase()}
                                                            </div>
                                                        )}
                                                    </div>
                                                    <div className="participant-info">
                                                        <Link 
                                                            to={`/profile/${participant.user_id || participant.id}`}
                                                            className="participant-name"
                                                        >
                                                            {participant.name || participant.username || '–£—á–∞—Å—Ç–Ω–∏–∫'}
                                                        </Link>
                                                        {participant.faceit_elo && (
                                                            <div className="participant-elo">
                                                                FACEIT: {participant.faceit_elo}
                                                            </div>
                                                        )}
                                                        {participant.cs2_rank && (
                                                            <div className="participant-rank">
                                                                CS2: {participant.cs2_rank}
                                                            </div>
                                                        )}
                                                    </div>
                                                    {userPermissions.isAdminOrCreator && (
                                                        <button
                                                            className="remove-participant"
                                                            onClick={() => handleRemoveParticipant(participant.id)}
                                                            title="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                                                        >
                                                            ‚ùå
                                                        </button>
                                                    )}
                                                </div>
                                            ))}
                                        </div>
                                    </div>

                                    {/* MIX –¢–£–†–ù–ò–†–´: –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ö–û–ú–ê–ù–î */}
                                    {tournament.format === 'mix' && mixedTeams && mixedTeams.length > 0 && (
                                        <div className="mixed-teams">
                                            <h3>üé≤ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</h3>
                                            <div className="mixed-teams-grid">
                                                {mixedTeams.map((team, index) => (
                                                    <div key={team.id || index} className="team-card">
                                                        <h4>
                                                            {team.name || `–ö–æ–º–∞–Ω–¥–∞ ${index + 1}`}
                                                            <span className="team-rating">
                                                                –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {team.averageRating || '‚Äî'}
                                                            </span>
                                                        </h4>
                                                        <table className="team-table">
                                                            <thead>
                                                                <tr>
                                                                    <th>–ò–≥—Ä–æ–∫</th>
                                                                    <th>{ratingType === 'faceit' ? 'FACEIT ELO' : 'CS2 Premier'}</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                {team.players?.map((player, playerIndex) => (
                                                                    <tr key={player.id || playerIndex}>
                                                                        <td>
                                                                            <Link to={`/profile/${player.id}`}>
                                                                                {player.name || player.username}
                                                                            </Link>
                                                                        </td>
                                                                        <td>
                                                                            {ratingType === 'faceit' 
                                                                                ? player.faceit_elo || '‚Äî'
                                                                                : player.cs2_rank || '‚Äî'
                                                                            }
                                                                        </td>
                                                                    </tr>
                                                                ))}
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                    )}
                                </>
                            ) : (
                                <div className="empty-state">
                                    <p>üë§ –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
                                    {user && tournament.status === 'registration' && !userPermissions.isParticipating && (
                                        <button 
                                            className="btn btn-primary"
                                            onClick={handleParticipate}
                                        >
                                            –°—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
                                        </button>
                                    )}
                                </div>
                            )}

                            {/* MIX –¢–£–†–ù–ò–†–´: –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î */}
                            {tournament.format === 'mix' && userPermissions.isAdminOrCreator && tournament.status === 'registration' && (
                                <div className="team-generator-section">
                                    <h3>‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</h3>
                                    <div className="rating-type-selector">
                                        <label>–¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏:</label>
                                        <select 
                                            value={ratingType} 
                                            onChange={(e) => setRatingType(e.target.value)}
                                        >
                                            <option value="faceit">FACEIT ELO</option>
                                            <option value="cs2">CS2 Premier</option>
                                        </select>
                                    </div>
                                    <TeamGenerator 
                                        tournament={tournament}
                                        participants={tournament.participants || []}
                                        onTeamsGenerated={handleTeamsGenerated}
                                        onTeamsUpdated={handleTeamsUpdated}
                                        onRemoveParticipant={handleRemoveParticipant}
                                        isAdminOrCreator={userPermissions.isAdminOrCreator}
                                        toast={(msg) => {
                                            setMessage(msg);
                                            setTimeout(() => setMessage(''), 3000);
                                        }}
                                    />
                                </div>
                            )}
                        </div>
                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –°–ï–¢–ö–ê */}
                    {activeTab === 'bracket' && (
                        <div className="tab-content-tournamentdetails">
                            <h3>üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞</h3>
                            
                            {matches && matches.length > 0 ? (
                                <div className="custom-tournament-bracket">
                                    <BracketRenderer 
                                        games={bracketGames}
                                        canEditMatches={userPermissions.canEdit}
                                        selectedMatch={selectedMatch}
                                        setSelectedMatch={setSelectedMatch}
                                        handleTeamClick={handleTeamClick}
                                        format={tournament.format}
                                        onMatchClick={handleMatchClick}
                                    />
                                </div>
                            ) : (
                                <div className="empty-state">
                                    <p>üèÜ –°–µ—Ç–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞</p>
                                    {userPermissions.isAdminOrCreator && tournament.status === 'registration' && (
                                        <button 
                                            className="btn btn-primary generate-bracket-button"
                                            onClick={handleGenerateBracket}
                                        >
                                            ‚ö° –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É
                                        </button>
                                    )}
                                </div>
                            )}
                        </div>
                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –†–ï–ó–£–õ–¨–¢–ê–¢–´ */}
                    {activeTab === 'results' && (
                        <div className="tab-content-tournamentdetails">
                            <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π</h3>
                            
                            {matches && matches.filter(m => m.status === 'completed').length > 0 ? (
                                <div className="results-compact-list">
                                    {matches
                                        .filter(match => match.status === 'completed')
                                        .sort((a, b) => b.round - a.round || new Date(b.completed_at) - new Date(a.completed_at))
                                        .map(match => (
                                            <div key={match.id} className="result-compact-item">
                                                <div className="result-compact-content">
                                                    <div className="result-compact-round">
                                                        –†–∞—É–Ω–¥ {match.round}
                                                        {match.is_third_place_match && (
                                                            <span className="third-place-indicator">ü•â –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ</span>
                                                        )}
                                                    </div>
                                                    <div className="result-compact-match">
                                                        <button 
                                                            className={`team-name-btn ${match.winner_id === match.team1_id ? 'winner' : ''}`}
                                                            onClick={() => handleTeamClick(match.team1_name)}
                                                        >
                                                            {match.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1'}
                                                        </button>
                                                        <span className="match-score">
                                                            {match.team1_score || 0} : {match.team2_score || 0}
                                                        </span>
                                                        <button 
                                                            className={`team-name-btn ${match.winner_id === match.team2_id ? 'winner' : ''}`}
                                                            onClick={() => handleTeamClick(match.team2_name)}
                                                        >
                                                            {match.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'}
                                                        </button>
                                                    </div>
                                                    <button 
                                                        className="details-btn"
                                                        onClick={() => handleMatchClick(match)}
                                                    >
                                                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                                    </button>
                                                </div>
                                            </div>
                                        ))
                                    }
                                </div>
                            ) : (
                                <div className="empty-state">
                                    <p>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                                    <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–µ–π</p>
                                </div>
                            )}

                            {/* –ü–û–ë–ï–î–ò–¢–ï–õ–ò */}
                            {tournament.status === 'completed' && tournament.winner_id && (
                                <div className="winners-section">
                                    <h3>üèÜ –ü—Ä–∏–∑—ë—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                                    <div className="winners-podium">
                                        {/* –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ */}
                                        <div className="winner-card place-1">
                                            <div className="medal-icon gold-medal">ü•á</div>
                                            <div className="winner-info">
                                                {tournament.format === 'mix' ? (
                                                    <div className="team-winner">
                                                        <h4>{tournament.winner_name || '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å'}</h4>
                                                        {/* –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã */}
                                                    </div>
                                                ) : (
                                                    <Link to={`/profile/${tournament.winner_id}`} className="winner-name">
                                                        {tournament.winner_name || '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å'}
                                                    </Link>
                                                )}
                                            </div>
                                        </div>

                                        {/* –í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ */}
                                        {tournament.second_place_id && (
                                            <div className="winner-card place-2">
                                                <div className="medal-icon silver-medal">ü•à</div>
                                                <div className="winner-info">
                                                    {tournament.format === 'mix' ? (
                                                        <div className="team-winner">
                                                            <h4>{tournament.second_place_name || '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ'}</h4>
                                                        </div>
                                                    ) : (
                                                        <Link to={`/profile/${tournament.second_place_id}`} className="winner-name">
                                                            {tournament.second_place_name || '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ'}
                                                        </Link>
                                                    )}
                                                </div>
                                            </div>
                                        )}

                                        {/* –¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ */}
                                        {tournament.third_place_id && (
                                            <div className="winner-card place-3">
                                                <div className="medal-icon bronze-medal">ü•â</div>
                                                <div className="winner-info">
                                                    {tournament.format === 'mix' ? (
                                                        <div className="team-winner">
                                                            <h4>{tournament.third_place_name || '–¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ'}</h4>
                                                        </div>
                                                    ) : (
                                                        <Link to={`/profile/${tournament.third_place_id}`} className="winner-name">
                                                            {tournament.third_place_name || '–¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ'}
                                                        </Link>
                                                    )}
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            )}
                        </div>
                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –£–ü–†–ê–í–õ–ï–ù–ò–ï */}
                    {activeTab === 'admin' && userPermissions.isAdminOrCreator && (
                        <div className="tab-content-tournamentdetails">
                            <div className="tournament-management-panel">
                                <h3 className="management-title">‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–º</h3>
                                
                                <div className="management-actions">
                                    {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º */}
                                    <div className="action-group">
                                        <h4 className="action-group-title">üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º</h4>
                                        <div className="action-buttons">
                                            {tournament.status === 'registration' && (
                                                <>
                                                    {(!matches || matches.length === 0) && (
                                                        <button 
                                                            className="management-btn generate-bracket-button"
                                                            onClick={handleGenerateBracket}
                                                            title="–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É"
                                                        >
                                                            <span className="btn-icon">‚ö°</span>
                                                            –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É
                                                        </button>
                                                    )}
                                                    
                                                    {matches && matches.length > 0 && (
                                                        <button 
                                                            className="management-btn start-tournament"
                                                            onClick={handleStartTournament}
                                                            title="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"
                                                        >
                                                            <span className="btn-icon">üöÄ</span>
                                                            –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
                                                        </button>
                                                    )}
                                                </>
                                            )}
                                            
                                            {(tournament.status === 'active' || tournament.status === 'in_progress') && (
                                                <button 
                                                    className="management-btn end-tournament"
                                                    onClick={handleEndTournament}
                                                    title="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"
                                                >
                                                    <span className="btn-icon">üèÅ</span>
                                                    –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
                                                </button>
                                            )}
                                            
                                            {matches && matches.length > 0 && tournament.status !== 'completed' && (
                                                <button 
                                                    className="management-btn regenerate-bracket"
                                                    onClick={handleGenerateBracket}
                                                    title="–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É"
                                                >
                                                    <span className="btn-icon">üîÑ</span>
                                                    –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É
                                                </button>
                                            )}
                                        </div>
                                    </div>

                                    {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
                                    <div className="action-group">
                                        <h4 className="action-group-title">üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏</h4>
                                        <div className="action-buttons">
                                            {matches && matches.some(m => m.status === 'completed') && (
                                                <button 
                                                    className="management-btn clear-results-button"
                                                    onClick={handleClearResults}
                                                    title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
                                                >
                                                    <span className="btn-icon">üóëÔ∏è</span>
                                                    –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                                </button>
                                            )}
                                            
                                            <button 
                                                className="management-btn"
                                                onClick={loadTournamentData}
                                                title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞"
                                            >
                                                <span className="btn-icon">üîÑ</span>
                                                –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                                            </button>
                                        </div>
                                    </div>

                                    {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                                    <div className="action-group">
                                        <h4 className="action-group-title">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞</h4>
                                        <div className="tournament-stats">
                                            <div className="stat-item">
                                                <span className="stat-label">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</span>
                                                <span className="stat-value">{tournament.participants?.length || 0}</span>
                                            </div>
                                            <div className="stat-item">
                                                <span className="stat-label">–ú–∞—Ç—á–µ–π:</span>
                                                <span className="stat-value">{matches?.length || 0}</span>
                                            </div>
                                            <div className="stat-item">
                                                <span className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</span>
                                                <span className="stat-value">
                                                    {matches?.filter(m => m.status === 'completed').length || 0}
                                                </span>
                                            </div>
                                            <div className="stat-item">
                                                <span className="stat-label">–í –ø—Ä–æ—Ü–µ—Å—Å–µ:</span>
                                                <span className="stat-value">
                                                    {matches?.filter(m => m.status === 'in_progress').length || 0}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ */}
                                {tournament.status === 'completed' && (
                                    <div className="tournament-completed-info">
                                        <div className="completed-status">
                                            <span className="btn-icon">üèÜ</span>
                                            <div className="status-text">
                                                <p>–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω</p>
                                                {tournament.winner_name && (
                                                    <p>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <strong>{tournament.winner_name}</strong></p>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>
                    )}
                </div>

                {/* üéØ –°–û–û–ë–©–ï–ù–ò–Ø */}
                {message && (
                    <div className={`message-notification ${message.includes('‚úÖ') ? 'success' : 'error'}`}>
                        {message}
                    </div>
                )}
            </section>
        </TournamentErrorBoundary>
    );
}

export default TournamentDetails;