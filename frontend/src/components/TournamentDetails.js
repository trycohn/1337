// üîß QA REFACTORED VERSION - TournamentDetails.js v5.0 –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
// ‚úÖ –£–±—Ä–∞–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ API endpoints
// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã API –ø—É—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
// ‚úÖ –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞

// –ò–º–ø–æ—Ä—Ç—ã React –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ
import React, { useState, useEffect, useRef, useMemo, useCallback, Suspense, lazy } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import api from '../utils/api';
import { getSocketInstance, authenticateSocket, watchTournament, unwatchTournament } from '../services/socketClient_v5_simplified';
import { useModalSystem } from '../hooks/useModalSystem';
import useTournamentManagement from '../hooks/tournament/useTournamentManagement';
import { useLoaderAutomatic } from '../hooks/useLoaderAutomaticHook';
import { enrichMatchWithParticipantNames, validateParticipantData } from '../utils/participantHelpers';

// –£—Ç–∏–ª–∏—Ç—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã
import { ensureHttps } from '../utils/userHelpers';
import { 
    isCounterStrike2, 
    gameHasMaps, 
    getGameMaps as getGameMapsHelper, 
    getDefaultMap as getDefaultMapHelper, 
    getDefaultCS2Maps 
} from '../utils/mapHelpers';

// –ö–æ–Ω—Ç–µ–∫—Å—Ç
import { useUser } from '../context/UserContext';

// –°—Ç–∏–ª–∏
import './TournamentDetails.css';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import TournamentInfoSection from './TournamentInfoSection';
import MatchResultModal from './tournament/modals/MatchResultModal';
import MatchDetailsModal from './tournament/modals/MatchDetailsModal';
import ParticipantSearchModal from './tournament/modals/ParticipantSearchModal';
import AddParticipantModal from './tournament/modals/AddParticipantModal';
import ThirdPlaceMatchModal from './tournament/modals/ThirdPlaceMatchModal';
import TournamentFloatingActionPanel from './tournament/TournamentFloatingActionPanel';
import TournamentAdminPanel from './tournament/TournamentAdminPanel';
import TournamentParticipants from './tournament/TournamentParticipants';
import TournamentWinners from './tournament/TournamentWinners';
import TournamentResults from './tournament/TournamentResults';
import BracketManagementPanel from './tournament/BracketManagementPanel';
import DeleteTournamentModal from './tournament/modals/DeleteTournamentModal';
import './tournament/BracketManagementPanel.css';

// üèÜ –û–±—ã—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç PodiumSection (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏)
import PodiumSection from './tournament/PodiumSection';

// üÜï –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ç—É—Ä–Ω–∏—Ä–∞
import TournamentProgressBar from './tournament/TournamentProgressBar';

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ BracketRenderer —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const LazyBracketRenderer = React.lazy(() => 
    import('./BracketRenderer').catch(err => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ BracketRenderer:', err);
        return { 
            default: () => (
                <div className="bracket-error" data-testid="bracket-load-error">
                    <h3>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏</h3>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
                    <button onClick={() => window.location.reload()}>üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
                </div>
            ) 
        };
    })
);

// Error Boundary –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
class TournamentErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false, errorInfo: null };
    }

    static getDerivedStateFromError(error) {
        return { hasError: true };
    }

    componentDidCatch(error, errorInfo) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ TournamentDetails:', error, errorInfo);
        this.setState({ errorInfo });
    }

    render() {
        if (this.state.hasError) {
            return (
                <div className="tournament-error-boundary" data-testid="tournament-error">
                    <h2>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h2>
                    <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
                    <details style={{ marginTop: '20px' }}>
                        <summary>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary>
                        <pre style={{ whiteSpace: 'pre-wrap', fontSize: '12px' }}>
                            {this.state.errorInfo?.componentStack}
                        </pre>
                    </details>
                    <button onClick={() => window.location.reload()}>üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
                </div>
            );
        }

        return this.props.children;
    }
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CACHE_VALIDITY_PERIOD = 30 * 1000; // üîß –ê–î–ê–ü–¢–ò–í–ù–û–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const MAPS_CACHE_VALIDITY_PERIOD = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

// üÜï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ì–ò–ë–†–ò–î–ù–û–ì–û –†–ï–®–ï–ù–ò–Ø
const HYBRID_CONFIG = {
    // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    CACHE_NORMAL: 30 * 1000,     // 30 —Å–µ–∫—É–Ω–¥ - –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    CACHE_ACTIVE: 10 * 1000,     // 10 —Å–µ–∫—É–Ω–¥ - –∫–æ–≥–¥–∞ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–Ω—ã–π
    CACHE_UPDATING: 5 * 1000,    // 5 —Å–µ–∫—É–Ω–¥ - –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π
    CACHE_CRITICAL: 1 * 1000,    // 1 —Å–µ–∫—É–Ω–¥–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø)
    
    // WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    WEBSOCKET_TIMEOUT: 3000,     // –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è WebSocket
    FALLBACK_DELAY: 2000,        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ fallback
    
    // Retry –ª–æ–≥–∏–∫–∞
    MAX_RETRIES: 3,
    RETRY_DELAY: 1000,
    
    // –¢–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    UPDATE_TYPES: {
        STATUS_CHANGE: 'status_change',
        PARTICIPANTS: 'participants_update', 
        MATCHES: 'matches_update',
        TEAMS: 'teams_update',
        GENERAL: 'general_update'
    }
};

// üéØ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const CACHE_DURATION = 30000; // 30 —Å–µ–∫—É–Ω–¥

// –£—Ç–∏–ª–∏—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const validateTournamentData = (data) => {
    if (!data || typeof data !== 'object') {
        return { isValid: false, error: '–î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç' };
    }
    
    if (!data.id || !data.name) {
        return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ (id, name)' };
    }
    
    return { isValid: true };
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function TournamentDetails() {
    const { id } = useParams();
    const navigate = useNavigate();
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    const [tournament, setTournament] = useState(null);
    const [user, setUser] = useState(null);
    const [teams, setTeams] = useState([]);
    const [message, setMessage] = useState('');
    const [isParticipating, setIsParticipating] = useState(false);
    const [adminRequestStatus, setAdminRequestStatus] = useState(null);
    const [matches, setMatches] = useState([]);
    const [selectedMatch, setSelectedMatch] = useState(null);
    const [availableMaps, setAvailableMaps] = useState({});
    const [originalParticipants, setOriginalParticipants] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isCreator, setIsCreator] = useState(false);
    const [isAdminOrCreator, setIsAdminOrCreator] = useState(false);

    // üÜï –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    const [activeTab, setActiveTab] = useState('info');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä tab –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        const urlParams = new URLSearchParams(window.location.search);
        const tabParam = urlParams.get('tab');
        if (tabParam && ['info', 'bracket', 'participants', 'results', 'management'].includes(tabParam)) {
            setActiveTab(tabParam);
        }
    }, []);
    
    // üÜï –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
    const [showThirdPlaceModal, setShowThirdPlaceModal] = useState(false);
    const [thirdPlaceMatch, setThirdPlaceMatch] = useState(false);
    const [isRegenerationMode, setIsRegenerationMode] = useState(false);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const [modals, setModals] = useState({
        addParticipant: false,
        participantSearch: false,
        matchResult: false,
        matchDetails: false
    });

    // üÜï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ü–û–ò–°–ö–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í
    const [adminSearchQuery, setAdminSearchQuery] = useState('');
    const [adminSearchResults, setAdminSearchResults] = useState([]);
    const [isSearchingAdmins, setIsSearchingAdmins] = useState(false);
    const [adminSearchModal, setAdminSearchModal] = useState(false);

    // üÜï –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –£–î–ê–õ–ï–ù–ò–Ø –¢–£–†–ù–ò–†–ê
    const [deleteTournamentModal, setDeleteTournamentModal] = useState(false);
    const [isDeletingTournament, setIsDeletingTournament] = useState(false);

    // üÜï –ì–ò–ë–†–ò–î–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –°–û–°–¢–û–Ø–ù–ò–Ø
    const [hybridState, setHybridState] = useState({
        isWebSocketConnected: false,
        lastWebSocketEvent: null,
        cacheStrategy: 'normal',
        pendingOperations: new Set(),
        fallbackActive: false,
        updateQueue: [],
        retryCount: 0
    });

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const [newParticipantData, setNewParticipantData] = useState({
        display_name: '',
        email: '',
        faceit_elo: '',
        cs2_premier_rank: ''
    });
    
    const [matchResultData, setMatchResultData] = useState({
        score1: 0,
        score2: 0,
        maps_data: []
    });
    
    const [selectedMatchForDetails, setSelectedMatchForDetailsBase] = useState(null);

    // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π selectedMatchForDetails
    const setSelectedMatchForDetails = useCallback((match) => {
        console.log('üîÑ setSelectedMatchForDetails –≤—ã–∑–≤–∞–Ω:', {
            oldMatchId: selectedMatchForDetails?.id,
            newMatchId: match?.id,
            newMatchData: match,
            stackTrace: new Error().stack?.split('\n')[1]?.trim()
        });
        setSelectedMatchForDetailsBase(match);
    }, [selectedMatchForDetails]);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π selectedMatchForDetails
    useEffect(() => {
        console.log('üîç selectedMatchForDetails –∏–∑–º–µ–Ω–∏–ª—Å—è:', {
            matchId: selectedMatchForDetails?.id,
            team1: selectedMatchForDetails?.team1_name,
            team2: selectedMatchForDetails?.team2_name
        });
    }, [selectedMatchForDetails]);

    // –†–µ—Ñ—ã
    const wsRef = useRef(null);

    // üÜï –•–£–ö –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–£–†–ù–ò–†–û–ú
    const tournamentManagement = useTournamentManagement(id);

    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
    const openModal = useCallback((modalName) => {
        setModals(prev => ({ ...prev, [modalName]: true }));
    }, []);

    const closeModal = useCallback((modalName) => {
        setModals(prev => ({ ...prev, [modalName]: false }));
    }, []);

    // üÜï –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø
    const getAdaptiveCacheTime = useCallback(() => {
        if (hybridState.pendingOperations.size > 0) {
            return 1000; // CACHE_CRITICAL: 1 —Å–µ–∫—É–Ω–¥–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        }
        
        if (tournament?.status === 'in_progress') {
            return 10000; // CACHE_ACTIVE: 10 —Å–µ–∫—É–Ω–¥ - –∫–æ–≥–¥–∞ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–Ω—ã–π
        }
        
        if (hybridState.cacheStrategy === 'updating') {
            return 5000; // CACHE_UPDATING: 5 —Å–µ–∫—É–Ω–¥ - –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π
        }
        
        return 30000; // CACHE_NORMAL: 30 —Å–µ–∫—É–Ω–¥ - –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }, [tournament?.status, hybridState.pendingOperations.size, hybridState.cacheStrategy]);

    // üÜï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ö–ï–®–ê –° –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨–Æ
    const clearAdaptiveCache = useCallback((reason = 'manual') => {
        const cacheKey = `tournament_cache_${id}`;
        const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
        localStorage.removeItem(cacheKey);
        localStorage.removeItem(cacheTimestampKey);
        
        console.log(`üßπ [AdaptiveCache] –ö–µ—à –æ—á–∏—â–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`);
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        setHybridState(prev => ({
            ...prev,
            cacheStrategy: 'updating'
        }));
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            setHybridState(prev => ({
                ...prev,
                cacheStrategy: 'normal'
            }));
        }, 10000);
    }, [id]);

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const handleAuthError = useCallback((error, context = '') => {
        if (error.response && error.response.status === 403) {
            console.log(`üîê –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏${context ? ` –ø—Ä–∏ ${context}` : ''}, –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω`);
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–µ—à–∏
            Object.keys(localStorage).forEach(key => {
                if (key.includes('tournament_cache_') || key.includes('invitedUsers_')) {
                    localStorage.removeItem(key);
                }
            });
            
            setError('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            setTimeout(() => {
                navigate('/');
            }, 1000);
            
            return true;
        }
        return false;
    }, [navigate]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isUserParticipant = useCallback((userId) => {
        if (!tournament?.participants || !userId) return false;
        return tournament.participants.some(participant => 
            validateParticipantData(participant) && participant.id === userId
        );
    }, [tournament]);

    // üÜï –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –° –ê–î–ê–ü–¢–ò–í–ù–´–ú –ö–ï–®–ò–†–û–í–ê–ù–ò–ï–ú
    const fetchTournamentDataHybrid = useCallback(async (forceRefresh = false, operation = null) => {
        if (!id) {
            setError('–ù–µ —É–∫–∞–∑–∞–Ω ID —Ç—É—Ä–Ω–∏—Ä–∞');
            return;
        }

        console.log('üîÑ [Hybrid] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞', {
            id,
            forceRefresh,
            operation,
            cacheStrategy: hybridState.cacheStrategy
        });

        setLoading(true);
        setError(null);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (operation) {
            setHybridState(prev => ({
                ...prev,
                pendingOperations: new Set(prev.pendingOperations).add(operation)
            }));
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const adaptiveCacheTime = getAdaptiveCacheTime();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        const cacheKey = `tournament_cache_${id}`;
        const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
        
        try {
            if (!forceRefresh) {
                const cachedTournament = localStorage.getItem(cacheKey);
                const cacheTimestamp = localStorage.getItem(cacheTimestampKey);
                
                if (cachedTournament && cacheTimestamp) {
                    const now = Date.now();
                    const timestamp = parseInt(cacheTimestamp, 10);
                    
                    if (!isNaN(timestamp) && (now - timestamp) < adaptiveCacheTime) {
                        try {
                            const parsedTournament = JSON.parse(cachedTournament);
                            const validation = validateTournamentData(parsedTournament);
                            
                            if (validation.isValid) {
                                console.log(`‚úÖ [Hybrid] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞ (${adaptiveCacheTime/1000}s TTL)`);
                                setTournament(parsedTournament);
                                setOriginalParticipants(parsedTournament.participants || []);
                                setMatches(parsedTournament.matches || []);
                                setLoading(false);
                                
                                // –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                                if (operation) {
                                    setHybridState(prev => {
                                        const newPending = new Set(prev.pendingOperations);
                                        newPending.delete(operation);
                                        return { ...prev, pendingOperations: newPending };
                                    });
                                }
                                return;
                            }
                        } catch (parseError) {
                            console.warn('‚ö†Ô∏è [Hybrid] –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∫–µ—à, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞');
                            localStorage.removeItem(cacheKey);
                            localStorage.removeItem(cacheTimestampKey);
                        }
                    }
                }
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
            let retryCount = 0;
            const maxRetries = HYBRID_CONFIG.MAX_RETRIES;
            
            while (retryCount <= maxRetries) {
                try {
                    const response = await api.get(`/api/tournaments/${id}`);
                    
                    if (response.data) {
                        const validation = validateTournamentData(response.data);
                        if (!validation.isValid) {
                            throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞: ${validation.error}`);
                        }

                        console.log(`‚úÖ [Hybrid] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1})`);
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                        localStorage.setItem(cacheKey, JSON.stringify(response.data));
                        localStorage.setItem(cacheTimestampKey, Date.now().toString());
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        setTournament(response.data);
                        setOriginalParticipants(response.data.participants || []);
                        setMatches(response.data.matches || []);
                        
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ retry
                        setHybridState(prev => ({ ...prev, retryCount: 0 }));
                        
                        break; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                    }
                } catch (apiError) {
                    retryCount++;
                    console.warn(`‚ö†Ô∏è [Hybrid] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries + 1}):`, apiError.message);
                    
                    if (retryCount > maxRetries) {
                        throw apiError; // –ò—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏
                    }
                    
                    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    await new Promise(resolve => 
                        setTimeout(resolve, HYBRID_CONFIG.RETRY_DELAY * Math.pow(2, retryCount - 1))
                    );
                }
            }
            
        } catch (error) {
            console.error('‚ùå [Hybrid] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            
            if (handleAuthError(error, '–∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞')) {
                return;
            }
            
            setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞: ${error.message}`);
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º fallback —Ä–µ–∂–∏–º
            setHybridState(prev => ({ 
                ...prev, 
                fallbackActive: true,
                retryCount: prev.retryCount + 1 
            }));
            
        } finally {
            setLoading(false);
            
            // –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (operation) {
                setHybridState(prev => {
                    const newPending = new Set(prev.pendingOperations);
                    newPending.delete(operation);
                    return { ...prev, pendingOperations: newPending };
                });
            }
        }
    }, [id, hybridState.cacheStrategy, getAdaptiveCacheTime, handleAuthError]);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    const fetchTournamentData = fetchTournamentDataHybrid;

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã
    const fetchMapsForGame = useCallback(async (gameName) => {
        if (!gameName || availableMaps[gameName]) return;

        try {
            setAvailableMaps(prev => ({
                ...prev,
                [`${gameName}_loading`]: true
            }));

            const cacheKey = `maps_cache_${gameName}`;
            const cacheTimestampKey = `maps_cache_timestamp_${gameName}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∫–∞—Ä—Ç
            const cachedMaps = localStorage.getItem(cacheKey);
            const cacheTimestamp = localStorage.getItem(cacheTimestampKey);
            
            if (cachedMaps && cacheTimestamp) {
                const now = Date.now();
                const timestamp = parseInt(cacheTimestamp, 10);
                
                if (!isNaN(timestamp) && (now - timestamp) < MAPS_CACHE_VALIDITY_PERIOD) {
                    const parsedMaps = JSON.parse(cachedMaps);
                    if (Array.isArray(parsedMaps)) {
                        console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã ${gameName}`);
                        setAvailableMaps(prev => ({
                            ...prev,
                            [gameName]: parsedMaps,
                            [`${gameName}_loading`]: false
                        }));
                        return;
                    }
                }
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
            console.log(`üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã ${gameName} —Å —Å–µ—Ä–≤–µ—Ä–∞...`);
            const response = await api.get(`/api/maps?game=${encodeURIComponent(gameName)}`);
            
            if (response.data && Array.isArray(response.data)) {
                localStorage.setItem(cacheKey, JSON.stringify(response.data));
                localStorage.setItem(cacheTimestampKey, Date.now().toString());
                
                setAvailableMaps(prev => ({
                    ...prev,
                    [gameName]: response.data,
                    [`${gameName}_loading`]: false
                }));
            } else {
                throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç');
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã ${gameName}:`, error);
            
            // Fallback –¥–ª—è CS2
            if (isCounterStrike2(gameName)) {
                const defaultMaps = getDefaultCS2Maps();
                setAvailableMaps(prev => ({
                    ...prev,
                    [gameName]: defaultMaps,
                    [`${gameName}_loading`]: false
                }));
        } else {
                setAvailableMaps(prev => ({
                    ...prev,
                    [gameName]: [],
                    [`${gameName}_loading`]: false
                }));
            }
        }
    }, [availableMaps]);

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
    const getGameMaps = useCallback((game) => {
        return getGameMapsHelper(game, availableMaps);
    }, [availableMaps]);

    const getDefaultMap = useCallback((game) => {
        return getDefaultMapHelper(game, availableMaps);
    }, [availableMaps]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
    const handleTeamsGenerated = useCallback((teams) => {
        if (Array.isArray(teams)) {
            if (tournament?.participants?.length > 0) {
                setOriginalParticipants([...tournament.participants]);
            }
        }
    }, [tournament?.participants]);

    // üîß –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë –£–ß–ê–°–¢–ù–ò–ö–ï (–≤—ã–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
    const getParticipantInfo = useCallback((teamId) => {
        if (!teamId) return null;

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
        const participantsMap = {};
        const teamsMap = {};

        if (tournament?.participants) {
            tournament.participants.forEach(participant => {
                if (validateParticipantData(participant)) {
                    participantsMap[participant.id] = participant;
                }
            });
        }

        if (tournament?.teams) {
            tournament.teams.forEach(team => {
                if (team?.id) {
                    teamsMap[team.id] = team;
                }
            });
        }

            if (teamsMap[teamId]) {
                const team = teamsMap[teamId];
                return {
                    id: teamId,
                    name: team.name,
                    avatar_url: team.members?.[0]?.avatar_url || null,
                    members: team.members || []
                };
            }

            if (participantsMap[teamId]) {
                const participant = participantsMap[teamId];
                return {
                    id: teamId,
                    name: participant.name || participant.username,
                    avatar_url: participant.avatar_url,
                    members: []
                };
            }

            return null;
    }, [tournament]);

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏
    const games = useMemo(() => {
        if (!Array.isArray(matches) || matches.length === 0) {
            console.log('üö´ Games: –Ω–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return [];
        }

        console.log('üéÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BracketRenderer —Å', matches.length, '–º–∞—Ç—á–∞–º–∏');

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
        const participantsMap = {};
        const teamsMap = {};

        if (tournament?.participants) {
            tournament.participants.forEach(participant => {
                if (validateParticipantData(participant)) {
                    participantsMap[participant.id] = participant;
                }
            });
        }

        if (tournament?.teams) {
            tournament.teams.forEach(team => {
                if (team?.id) {
                    teamsMap[team.id] = team;
                }
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const createSafeParticipant = (teamId, resultText, isWinner, status = 'PLAYED') => {
            const participantInfo = getParticipantInfo(teamId);

            // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ BYE —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const isBYE = !teamId;
            const participantName = isBYE ? 'BYE' : (participantInfo?.name || 'TBD');

            return {
                id: teamId ? String(teamId) : 'tbd',
                resultText: resultText !== null ? String(resultText) : null,
                isWinner: Boolean(isWinner),
                status: status || 'NO_SHOW',
                name: participantName,
                score: resultText,
                avatarUrl: participantInfo?.avatar_url ? ensureHttps(participantInfo.avatar_url) : null
            };
        };

        // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏–≥—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        const safeGames = matches
            .filter(match => match != null && match !== undefined && match.id) // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            .map(match => {
                // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ match –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä–µ–∫—Ç
                if (typeof match !== 'object' || match === null) {
                    console.warn('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –º–∞—Ç—á:', match);
                    return null;
                }

                let status = 'SCHEDULED';
                // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î –¥–ª—è BYE –º–∞—Ç—á–µ–π
                if (match.status === 'completed' || match.winner_team_id) {
                    status = 'DONE';
                } else if (match.team1_id && match.team2_id) {
                    status = 'READY';
                }

                const team1Result = match.score1 !== null ? match.score1 : null;
                const team2Result = match.score2 !== null ? match.score2 : null;

                return {
                    id: String(match.id),
                    nextMatchId: match.next_match_id ? String(match.next_match_id) : null,
                    tournamentRoundText: `–†–∞—É–Ω–¥ ${match.round || '?'}`,
                    startTime: match.scheduled_time || '',
                    state: status,
                    // üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î –¥–ª—è BYE –º–∞—Ç—á–µ–π
                    status: match.status,
                    name: match.name || `–ú–∞—Ç—á ${match.tournament_match_number || match.match_number || match.id}`,
                    bracket_type: match.bracket_type || 'winner',
                    round: match.round !== undefined ? match.round : 0,
                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É bracket_type –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                    is_third_place_match: (match.bracket_type && match.bracket_type === 'placement') || false,
                    // üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º tournament_match_number –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                    tournament_match_number: match.tournament_match_number,
                    match_number: match.match_number,
                    // üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º maps_data –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞ –∫–∞—Ä—Ç
                    maps_data: match.maps_data || [],
                    participants: [
                        createSafeParticipant(
                            match.team1_id,
                            team1Result,
                            match.winner_team_id === match.team1_id,
                            match.team1_id ? 'PLAYED' : 'NO_SHOW'
                        ),
                        createSafeParticipant(
                            match.team2_id,
                            team2Result,
                            match.winner_team_id === match.team2_id,
                            match.team2_id ? 'PLAYED' : 'NO_SHOW'
                        )
                    ]
                };
            })
            .filter(game => game !== null); // –£–¥–∞–ª—è–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ map

        console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è BracketRenderer —Å–æ–∑–¥–∞–Ω—ã:', safeGames.length);
        return safeGames;
    }, [matches, tournament]);

    // üîß –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ú–ê–¢–ß–ê (API v2.0)
    const saveMatchResult = useCallback(async (resultData) => {
        if (!selectedMatch) {
            console.error('‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
            return;
        }

        const matchId = typeof selectedMatch === 'object' ? selectedMatch.id : selectedMatch;
        
        if (!matchId && matchId !== 0) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞:', selectedMatch);
            return;
        }

        console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ —á–µ—Ä–µ–∑ API v2.0:', {
            matchId,
            resultData,
            tournamentId: id,
            selectedMatch: selectedMatch
        });

        try {
            setLoading(true);
            const token = localStorage.getItem('token');
            
            if (!token) {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

            // üîß –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º winner_team_id –¥–ª—è –∫–æ–º–∞–Ω–¥ –ò —Å–æ–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            let winner_team_id = null;
            
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å winner_team_id –≤ resultData, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (resultData.winner_team_id) {
                winner_team_id = resultData.winner_team_id;
                console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π winner_team_id:', winner_team_id);
            } 
            // –ï—Å–ª–∏ –µ—Å—Ç—å winner ('team1' –∏–ª–∏ 'team2'), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ ID
            else if (resultData.winner && selectedMatch) {
                const matchData = typeof selectedMatch === 'object' ? selectedMatch : 
                                  matches.find(m => m.id === parseInt(selectedMatch));
                
                if (matchData && matchData.team1_id && matchData.team2_id) {
                    if (resultData.winner === 'team1') {
                        winner_team_id = matchData.team1_id;
                    } else if (resultData.winner === 'team2') {
                        winner_team_id = matchData.team2_id;
                    }
                    
                    // üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    const participantType = tournament?.participant_type || 'unknown';
                    const entityType = participantType === 'solo' ? '—É—á–∞—Å—Ç–Ω–∏–∫–∞' : '–∫–æ–º–∞–Ω–¥—ã';
                    
                    console.log('‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω winner –≤ winner_team_id –¥–ª—è', entityType, ':', {
                        participant_type: participantType,
                        winner: resultData.winner,
                        team1_id: matchData.team1_id,
                        team2_id: matchData.team2_id,
                        winner_team_id: winner_team_id,
                        entity_type: entityType
                    });
            } else {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ team1_id/team2_id –≤ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞:', matchData);
                }
            }

            // üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ winner_team_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (winner_team_id && tournament) {
                let isValidWinner = false;
                
                if (tournament.participant_type === 'solo' && tournament.participants) {
                    // –î–ª—è —Å–æ–ª–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    isValidWinner = tournament.participants.some(p => p.id === winner_team_id);
                } else if (tournament.participant_type === 'team' && tournament.teams) {
                    // –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥
                    isValidWinner = tournament.teams.some(t => t.id === winner_team_id);
                }
                
                if (!isValidWinner) {
                    console.warn('‚ö†Ô∏è winner_team_id –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:', {
                        winner_team_id,
                        participant_type: tournament.participant_type,
                        available_participants: tournament.participants?.length || 0,
                        available_teams: tournament.teams?.length || 0
                    });
                }
            }

            console.log('üéØ –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ):', {
                score1: parseInt(resultData.score1) || 0,
                score2: parseInt(resultData.score2) || 0,
                maps_data: resultData.maps_data || [],
                winner_team_id: winner_team_id,
                participant_type: tournament?.participant_type,
                tournament_format: tournament?.format
            });

            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API endpoint —Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
            const response = await api.post(`/api/tournaments/${id}/matches/${matchId}/result`, {
                score1: parseInt(resultData.score1) || 0,
                score2: parseInt(resultData.score2) || 0,
                maps_data: resultData.maps_data || [],
                winner_team_id: winner_team_id  // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º winner_team_id –≤–º–µ—Å—Ç–æ winner
            }, {
                headers: { 
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ API v2.0:', response.data);

            // –û—á–∏—â–∞–µ–º –∫–µ—à —Ç—É—Ä–Ω–∏—Ä–∞
            const cacheKey = `tournament_cache_${id}`;
            const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
            localStorage.removeItem(cacheKey);
            localStorage.removeItem(cacheTimestampKey);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            closeModal('matchResult');
            setSelectedMatch(null);
            setMatchResultData({ score1: 0, score2: 0, maps_data: [] });

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                await fetchTournamentData();
            setMessage('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
            setTimeout(() => setMessage(''), 3000);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞:', error);
            
            let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞';
            
            if (error.response?.status === 403) {
                errorMessage = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞';
            } else if (error.response?.status === 404) {
                errorMessage = '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω';
            } else if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            setMessage(`‚ùå ${errorMessage}`);
            setTimeout(() => setMessage(''), 5000);
        } finally {
            setLoading(false);
        }
    }, [selectedMatch, id, fetchTournamentData, closeModal, matches, tournament]);

    // üîß –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–ë–†–û–°–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (API v2.0)
    const resetMatchResults = useCallback(async () => {
        const confirmMessage = `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n` +
            `–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞.\n\n` +
            `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n` +
            `‚Ä¢ –û—á–∏—Å—Ç–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π (—Å—á–µ—Ç, –∫–∞—Ä—Ç—ã)\n` +
            `‚Ä¢ –í–µ—Ä–Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º –≤ —Å–µ—Ç–∫–µ\n` +
            `‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ "–ê–∫—Ç–∏–≤–Ω—ã–π"\n` +
            `‚Ä¢ –ü–æ–∑–≤–æ–ª–∏—Ç –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—É—Ä–Ω–∏—Ä —Å —Ç–æ–π –∂–µ —Å–µ—Ç–∫–æ–π\n` +
            `‚Ä¢ –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –û–¢–ú–ï–ù–ï–ù–û\n\n` +
            `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`;

        const confirmed = window.confirm(confirmMessage);
        if (!confirmed) return;

        try {
            setLoading(true);
            const token = localStorage.getItem('token');
            
            if (!token) {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ API v2.0 –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞', id);

            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API endpoint
            const response = await api.post(`/api/tournaments/${id}/clear-match-results`, {}, {
                headers: { 
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã —á–µ—Ä–µ–∑ API v2.0:', response.data);

            // –û—á–∏—â–∞–µ–º –∫–µ—à —Ç—É—Ä–Ω–∏—Ä–∞
            const cacheKey = `tournament_cache_${id}`;
            const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
            localStorage.removeItem(cacheKey);
            localStorage.removeItem(cacheTimestampKey);

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            await fetchTournamentData();

            setMessage('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã! –¢—É—Ä–Ω–∏—Ä –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é.');
            setTimeout(() => setMessage(''), 5000);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π:', error);
            
            let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π';
            
            if (error.response?.status === 403) {
                errorMessage = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞';
            } else if (error.response?.status === 404) {
                errorMessage = '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω';
            } else if (error.response?.status === 400) {
                errorMessage = error.response.data?.error || '–°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞';
            } else if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            setMessage(`‚ùå ${errorMessage}`);
            setTimeout(() => setMessage(''), 5000);
        } finally {
            setLoading(false);
        }
    }, [id, fetchTournamentData]);

    // üÜï –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    const switchTab = useCallback((tabName) => {
        setActiveTab(tabName);
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
    }, []);

    // üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const shouldShowParticipantsTab = useMemo(() => {
        // –í–∫–ª–∞–¥–∫–∞ "–£—á–∞—Å—Ç–Ω–∏–∫–∏" –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ–≥–¥–∞
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ TournamentParticipants
        return tournament ? true : false;
    }, [tournament]);

    // üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    useEffect(() => {
        if (!shouldShowParticipantsTab && activeTab === 'participants') {
            // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            setActiveTab('info');
            console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å –≤–∫–ª–∞–¥–∫–∏ "–£—á–∞—Å—Ç–Ω–∏–∫–∏" –Ω–∞ "–ì–ª–∞–≤–Ω–∞—è"');
        }
    }, [shouldShowParticipantsTab, activeTab]);

    // üÜï –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–æ–∫
    const renderTabContent = () => {
        switch (activeTab) {
            case 'info':
                return (
                    <div className="tab-content-info">
                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è */}
                        <TournamentInfoSection 
                            tournament={tournament}
                            user={user}
                            isCreator={isCreator}
                            isAdminOrCreator={isAdminOrCreator}
                            onParticipationUpdate={fetchTournamentData}
                            userTeams={teams}
                            matches={matches}
                        />

                        {/* üèÜ –ü–û–î–ò–£–ú –° –ü–†–ò–ó–ï–†–ê–ú–ò –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ */}
                        {tournament?.status === 'completed' && games.length > 0 && (
                            <PodiumSection tournament={tournament} matches={matches} />
                        )}

                        {/* üÜï –ü–†–û–ì–†–ï–°–°-–ë–ê–† –¢–£–†–ù–ò–†–ê */}
                        {tournament && (
                            <div className="bracket-stage-wrapper bracket-full-bleed">
                                <TournamentProgressBar 
                                    matches={matches}
                                    tournamentStatus={tournament?.status}
                                    tournament={tournament}
                                />
                            </div>
                        )}

                        {/* –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ */}
                        {games.length > 0 && (
                            <div className="bracket-stage-wrapper bracket-full-bleed" style={{ overscrollBehavior: 'contain' }}>
                                <h3 className="bracket-section-title">üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞</h3>
                                <TournamentErrorBoundary>
                                    <Suspense fallback={
                                        <div className="bracket-loading" data-testid="bracket-loading">
                                            üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏...
                                        </div>
                                    }>
                                        <LazyBracketRenderer
                                            games={games}
                                            tournament={tournament}
                                            canEditMatches={false}
                                            readOnly
                                            selectedMatch={selectedMatch}
                                            setSelectedMatch={(match) => {
                                                if (match === null || match === undefined) {
                                                    setSelectedMatch(null);
            return;
        }
        
                                                const matchId = typeof match === 'object' && match !== null ? match.id : match;
                                                
                                                if (matchId) {
                                                    const fullMatch = matches.find(m => m.id === parseInt(matchId));
                                                    if (fullMatch && false) {
                                                        setSelectedMatch(fullMatch);
                                                        setMatchResultData({
                                                            score1: fullMatch.score1 || 0,
                                                            score2: fullMatch.score2 || 0,
                                                            maps_data: fullMatch.maps_data || []
                                                        });
                                                        openModal('matchResult');
                                                    } else {
                                                        setSelectedMatch(matchId);
                                                    }
                                                } else {
                                                    setSelectedMatch(null);
                                                }
                                            }}
                                            handleTeamClick={() => {}}
                                            format={tournament.format}
                                            isAdminOrCreator={isAdminOrCreator}
                                            onMatchClick={(match) => {
                                                if (match && match.id) {
                                                    // –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ç—á–∞ –≤–º–µ—Å—Ç–æ –º–æ–¥–∞–ª–∫–∏
                                                    if (tournament?.status === 'completed') {
                                                        window.location.href = `/tournaments/${tournament.id}/match/${match.id}`;
                                                        return;
                                                    }
                                                    const originalMatch = matches.find(m => m.id === parseInt(match.id));
                                                    if (originalMatch) {
                                                        const enrichedMatch = enrichMatchWithParticipantNames(originalMatch, tournament);
                                                        setSelectedMatchForDetails(enrichedMatch);
                                                        openModal('matchDetails');
                                                    }
                                                }
                                            }}
                                        />
                                    </Suspense>
                                </TournamentErrorBoundary>
                            </div>
                        )}

                        {/* –ü—Ä–∏–∑–µ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞ */}
                        <TournamentWinners tournament={tournament} />
                    </div>
                );

            case 'participants':
                return (
                    <div className="tab-content-participants">
                        <TournamentParticipants
                            tournament={tournament}
                            user={user}
                            isAdminOrCreator={isAdminOrCreator}
                            originalParticipants={originalParticipants}
                            onTeamsGenerated={handleTeamsGenerated}
                            onTournamentUpdate={async (updateInfo) => {
                                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                                if (updateInfo?.action === 'remove_participant') {
                                    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                                    const participantId = updateInfo.participantId;
                                    
                                    console.log('üöÄ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', participantId);
                                    
                                    // –û–±–Ω–æ–≤–ª—è–µ–º tournament.participants
                                    setTournament(prev => ({
                                        ...prev,
                                        participants: prev.participants?.filter(p => p.id !== participantId) || []
                                    }));
                                    
                                    // –û–±–Ω–æ–≤–ª—è–µ–º originalParticipants
                                    setOriginalParticipants(prev => prev.filter(p => p.id !== participantId));
                                    
                                    // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                                    const cacheKey = `tournament_cache_${id}`;
                                    const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
                                    localStorage.removeItem(cacheKey);
                                    localStorage.removeItem(cacheTimestampKey);
                                    
                                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ
                                    setTimeout(() => {
                                        fetchTournamentData();
                                    }, 1000);
                                } else {
                                    // –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                                    await fetchTournamentData();
                                }
                            }}
                        />
                    </div>
                );

            case 'bracket':
                return (
                    <div className="tab-content-bracket">
                        {/* –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∫–æ–π */}
                        <BracketManagementPanel
                            tournament={tournament}
                            user={user}
                            matches={matches}
                            isAdminOrCreator={isAdminOrCreator}
                            onBracketUpdate={async (updateData) => {
                                console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏:', updateData);
                                
                                // –û—á–∏—â–∞–µ–º –∫–µ—à —Ç—É—Ä–Ω–∏—Ä–∞
                                const cacheKey = `tournament_cache_${id}`;
                                const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
                                localStorage.removeItem(cacheKey);
                                localStorage.removeItem(cacheTimestampKey);
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                                await fetchTournamentData();
                                
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                                if (updateData.type === 'generated') {
                                    setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
                                } else if (updateData.type === 'regenerated') {
                                    setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
                                }
                                
                                setTimeout(() => setMessage(''), 5000);
                            }}
                        />

                        <div className="bracket-stage-wrapper bracket-full-bleed" style={{ overscrollBehavior: 'contain' }}>
                            {/* üÜï –ü–†–û–ì–†–ï–°–°-–ë–ê–† –¢–£–†–ù–ò–†–ê –ù–ê –í–ö–õ–ê–î–ö–ï –°–ï–¢–ö–ê */}
                            {tournament && (
                                <TournamentProgressBar 
                                    matches={matches}
                                    tournamentStatus={tournament?.status}
                                    tournament={tournament}
                                />
                            )}

                            {games.length > 0 ? (
                                <TournamentErrorBoundary>
                                    <Suspense fallback={
                                        <div className="bracket-loading" data-testid="bracket-loading">
                                            üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏...
                                        </div>
                                    }>
                                        <LazyBracketRenderer
                                            games={games}
                                            tournament={tournament}
                                            canEditMatches={false}
                                            selectedMatch={selectedMatch}
                                            setSelectedMatch={(match) => {
                                                if (match === null || match === undefined) {
                                                    setSelectedMatch(null);
                                                    return;
                                                }
                                                
                                                const matchId = typeof match === 'object' && match !== null ? match.id : match;
                                                
                                                if (matchId) {
                                                    const fullMatch = matches.find(m => m.id === parseInt(matchId));
                                                    if (fullMatch && false) {
                                                        setSelectedMatch(fullMatch);
                                                        setMatchResultData({
                                                            score1: fullMatch.score1 || 0,
                                                            score2: fullMatch.score2 || 0,
                                                            maps_data: fullMatch.maps_data || []
                                                        });
                                                        openModal('matchResult');
                                                    } else {
                                                        setSelectedMatch(matchId);
                                                    }
                                                } else {
                                                    setSelectedMatch(null);
                                                }
                                            }}
                                            handleTeamClick={() => {}}
                                            format={tournament.format}
                                            isAdminOrCreator={isAdminOrCreator}
                                            onMatchClick={(match) => {
                                                if (match && match.id) {
                                                    const originalMatch = matches.find(m => m.id === parseInt(match.id));
                                                    if (originalMatch) {
                                                        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞
                                                        const enrichedMatch = enrichMatchWithParticipantNames(originalMatch, tournament);
                                                        setSelectedMatchForDetails(enrichedMatch);
                                                        openModal('matchDetails');
                                                    }
                                                }
                                            }}
                                            readOnly
                                        />
                                    </Suspense>
                                </TournamentErrorBoundary>
                            ) : (
                                <div className="no-bracket">
                                    <p>–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞</p>
                                    <small>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—à–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏</small>
                                </div>
                            )}
                        </div>
                    </div>
                );

            case 'results':
                return (
                    <div className="tab-content-results">
                        <TournamentResults 
                            tournament={tournament}
                        />
                    </div>
                );

            case 'management':
        return (
                    <div className="tab-content-management">
                        {isAdminOrCreator ? (
                            <TournamentAdminPanel
                                tournament={tournament}
                                participants={tournament.participants || []}
                                matches={matches}
                                isCreatorOrAdmin={isAdminOrCreator}
                                isLoading={loading}
                                onStartTournament={handleStartTournament}
                                onEndTournament={handleEndTournament}
                                onRegenerateBracket={handleGenerateBracket}
                                onShowAddParticipantModal={() => openModal('addParticipant')}
                                onShowParticipantSearchModal={() => openModal('participantSearch')}
                                onRemoveParticipant={() => {}}
                                onEditMatchResult={(match) => {
                                    setSelectedMatch(match);
                                    setMatchResultData({
                                        score1: match.score1 || 0,
                                        score2: match.score2 || 0,
                                        maps_data: match.maps_data || []
                                    });
                                    openModal('matchResult');
                                }}
                                onGenerateBracket={handleGenerateBracket}
                                onClearResults={resetMatchResults}
                                onInviteAdmin={inviteAdmin}
                                onRemoveAdmin={removeAdmin}
                                onShowAdminSearchModal={openAdminSearchModal}
                                onUpdateTournamentSetting={handleUpdateTournamentSetting}
                                onDeleteTournament={openDeleteTournamentModal}
                                onCreateMatchLobby={handleCreateMatchLobby}
                                user={user}
                            />
                        ) : (
                            <div className="access-denied">
                                <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º —Ç—É—Ä–Ω–∏—Ä–æ–º</p>
                            </div>
                        )}
            </div>
        );

            default:
                return (
                    <div className="tab-content-info">
                        <TournamentInfoSection 
                            tournament={tournament}
                            user={user}
                            isCreator={isCreator}
                            isAdminOrCreator={isAdminOrCreator}
                            onParticipationUpdate={fetchTournamentData}
                            userTeams={teams}
                            matches={matches}
                        />
                    </div>
                );
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–∞–Ω–¥—ã...');
            api.get('/api/users/me', { headers: { Authorization: `Bearer ${token}` } })
                .then((userResponse) => {
                    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', userResponse.data.username);
                    setUser(userResponse.data);
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    return api.get('/api/teams/my-teams', { 
                        headers: { Authorization: `Bearer ${token}` } 
                    });
                })
                .then((res) => {
                    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', res.data.length);
                    setTeams(Array.isArray(res.data) ? res.data : []);
                })
                .catch((error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥:', error);
                    if (error.response?.status === 403) {
                        console.log('üîê –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω');
                        localStorage.removeItem('token');
                        localStorage.removeItem('user');
                        setError('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
                        setTimeout(() => navigate('/'), 1000);
                    }
                });
        } else {
            setUser(null);
            setTeams([]);
        }
    }, []); // –£–±–∏—Ä–∞–µ–º handleAuthError –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
    useEffect(() => {
        fetchTournamentData();
    }, [fetchTournamentData]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã
    useEffect(() => {
        if (tournament?.game && gameHasMaps(tournament.game)) {
            console.log(`üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã: ${tournament.game}`);
            fetchMapsForGame(tournament.game);
        }
    }, [tournament?.game, fetchMapsForGame]);

    // üÜï Root‚Äë—Ñ–æ–Ω –¥–ª—è CS2 (body.classList + inline backgroundImage —Å 70% –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é)
    useEffect(() => {
        const isCS2 = tournament?.game && /counter\s*strike\s*2|cs2/i.test(tournament.game);
        if (isCS2) {
            document.body.classList.add('cs2-root-bg');
            document.body.style.backgroundImage = "linear-gradient(rgba(0, 0, 0, 0.3), rgba(0,0,0,0.3)), url('/images/headers/CS2-header.png')";
        } else {
            document.body.classList.remove('cs2-root-bg');
            document.body.style.backgroundImage = '';
        }
        return () => {
            document.body.classList.remove('cs2-root-bg');
            document.body.style.backgroundImage = '';
        };
    }, [tournament?.game]);

    // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    useEffect(() => {
        if (!user || !tournament?.id) {
            console.log('‚è≥ –û—Ç–ª–æ–∂–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID —Ç—É—Ä–Ω–∏—Ä–∞');
            return;
        }
        
        const token = localStorage.getItem('token');
        if (!token) {
            console.log('‚è≥ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }

        console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞', tournament.id);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (wsRef.current) {
            console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            wsRef.current.disconnect();
            wsRef.current = null;
        }

        // üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π socketClient_v5_simplified
        const socket = getSocketInstance();
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º socket —Å —Ç–æ–∫–µ–Ω–æ–º
        authenticateSocket(token);

        socket.on('connect', () => {
            console.log('‚úÖ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ socketClient_v5_simplified');
            watchTournament(id);
            socket.emit('join_tournament_chat', id);
        });

        socket.on('disconnect', (reason) => {
            console.log('üîå Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', reason);
        });

        socket.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        });

        // üÜï –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í
        socket.on('participant_update', (updateData) => {
            console.log('üë• [WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ participant_update:', updateData);
            console.log('üë• [WebSocket] –¢–µ–∫—É—â–∏–π ID —Ç—É—Ä–Ω–∏—Ä–∞:', parseInt(id));
            console.log('üë• [WebSocket] ID —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Å–æ–±—ã—Ç–∏–∏:', updateData.tournamentId);
            
            if (updateData.tournamentId === parseInt(id)) {
                const { action, participant } = updateData;
                
                console.log('‚úÖ [WebSocket] –°–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞, –¥–µ–π—Å—Ç–≤–∏–µ:', action);
                console.log('‚úÖ [WebSocket] –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', participant);
                
                if (action === 'added') {
                    console.log('‚ûï [WebSocket] –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    setTournament(prev => {
                        if (!prev) return prev;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫
                        const existingParticipant = prev.participants?.find(p => p.id === participant.id);
                        if (existingParticipant) {
                            console.log('‚ö†Ô∏è [WebSocket] –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
                            return prev;
                        }
                        
                        const newParticipants = [...(prev.participants || []), participant];
                        console.log('‚úÖ [WebSocket] –û–±–Ω–æ–≤–ª—è–µ–º tournament.participants:', newParticipants.length);
                        
                        return {
                            ...prev,
                            participants: newParticipants
                        };
                    });
                    
                    setOriginalParticipants(prev => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫
                        const existingParticipant = prev.find(p => p.id === participant.id);
                        if (existingParticipant) {
                            console.log('‚ö†Ô∏è [WebSocket] –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ originalParticipants');
                            return prev;
                        }
                        
                        const newOriginalParticipants = [...prev, participant];
                        console.log('‚úÖ [WebSocket] –û–±–Ω–æ–≤–ª—è–µ–º originalParticipants:', newOriginalParticipants.length);
                        
                        return newOriginalParticipants;
                    });
                    
                    console.log('‚úÖ [WebSocket] –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket:', participant.name);
                    
                } else if (action === 'removed') {
                    console.log('‚ûñ [WebSocket] –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
                    
                    // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    setTournament(prev => {
                        if (!prev) return prev;
                        
                        const newParticipants = prev.participants?.filter(p => p.id !== participant.id) || [];
                        console.log('‚úÖ [WebSocket] –û–±–Ω–æ–≤–ª—è–µ–º tournament.participants –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', newParticipants.length);
                        
                        return {
                            ...prev,
                            participants: newParticipants
                        };
                    });
                    
                    setOriginalParticipants(prev => {
                        const newOriginalParticipants = prev.filter(p => p.id !== participant.id);
                        console.log('‚úÖ [WebSocket] –û–±–Ω–æ–≤–ª—è–µ–º originalParticipants –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', newOriginalParticipants.length);
                        
                        return newOriginalParticipants;
                    });
                    
                    console.log('‚úÖ [WebSocket] –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket:', participant.name);
                    
                } else if (action === 'updated') {
                    console.log('üîÑ [WebSocket] –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    setTournament(prev => {
                        if (!prev) return prev;
                        
                        const newParticipants = prev.participants?.map(p => 
                            p.id === participant.id ? { ...p, ...participant } : p
                        ) || [];
                        console.log('‚úÖ [WebSocket] –û–±–Ω–æ–≤–ª—è–µ–º tournament.participants:', newParticipants.length);
                        
                        return {
                            ...prev,
                            participants: newParticipants
                        };
                    });
                    
                    setOriginalParticipants(prev => {
                        const newOriginalParticipants = prev.map(p => 
                            p.id === participant.id ? { ...p, ...participant } : p
                        );
                        console.log('‚úÖ [WebSocket] –û–±–Ω–æ–≤–ª—è–µ–º originalParticipants:', newOriginalParticipants.length);
                        
                        return newOriginalParticipants;
                    });
                    
                    console.log('‚úÖ [WebSocket] –£—á–∞—Å—Ç–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket:', participant.name);
                }
                
                // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                const cacheKey = `tournament_cache_${id}`;
                const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
                localStorage.removeItem(cacheKey);
                localStorage.removeItem(cacheTimestampKey);
                
                console.log('üßπ [WebSocket] –ö–µ—à –æ—á–∏—â–µ–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
            } else {
                console.log('‚ùå [WebSocket] –°–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
            }
        });

        socket.on('tournament_update', (tournamentData) => {
            if (tournamentData.tournamentId === parseInt(id) || tournamentData.id === parseInt(id)) {
                console.log('üì° [Hybrid] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ WebSocket:', tournamentData);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket
                setHybridState(prev => ({
                    ...prev,
                    isWebSocketConnected: true,
                    lastWebSocketEvent: Date.now(),
                    fallbackActive: false
                }));

                // üÜï –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–¢–ê–î–ê–ù–ù–´–• –°–û–ë–´–¢–ò–Ø
                const metadata = tournamentData._metadata;
                if (metadata) {
                    console.log('üìä [Hybrid] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', {
                        eventId: metadata.eventId,
                        source: metadata.source,
                        updateType: metadata.updateType,
                        timestamp: metadata.timestamp
                    });
                }

                // üÜï –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ü–û –¢–ò–ü–£ –û–ë–ù–û–í–õ–ï–ù–ò–Ø
                const updateType = metadata?.updateType || HYBRID_CONFIG.UPDATE_TYPES.GENERAL;
                
                switch (updateType) {
                    case HYBRID_CONFIG.UPDATE_TYPES.STATUS_CHANGE:
                        console.log('‚ö° [Hybrid] –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', {
                            oldStatus: tournament?.status,
                            newStatus: tournamentData.status,
                            source: metadata?.source
                        });
                        
                        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        setTournament(prev => ({
                            ...prev,
                            status: tournamentData.status
                        }));
                        
                        // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                        clearAdaptiveCache('status_change');
                        
                        // –í —Ñ–æ–Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                        setTimeout(() => {
                            fetchTournamentData(true, 'status_sync');
                        }, 1000);
                        
                        return; // –ù–µ –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ä–∞–∑—É

                    case HYBRID_CONFIG.UPDATE_TYPES.PARTICIPANTS:
                        console.log('üë• [Hybrid] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
                        // –£—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ –≤ participant_update
                        return;

                    case HYBRID_CONFIG.UPDATE_TYPES.MATCHES:
                        console.log('‚öîÔ∏è [Hybrid] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π');
                        if (tournamentData.matches) {
                            setMatches(tournamentData.matches);
                            clearAdaptiveCache('matches_update');
                        }
                        break;

                    case HYBRID_CONFIG.UPDATE_TYPES.TEAMS:
                        console.log('üèÜ [Hybrid] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥');
                        if (tournamentData.teams || tournamentData.mixed_teams) {
                            setTournament(prev => ({
                                ...prev,
                                teams: tournamentData.teams || tournamentData.mixed_teams,
                                mixed_teams: tournamentData.mixed_teams || tournamentData.teams
                            }));
                            clearAdaptiveCache('teams_update');
                        }
                        break;

                    case HYBRID_CONFIG.UPDATE_TYPES.GENERAL:
                    default:
                        console.log('üîÑ [Hybrid] –û–±—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞');
                        break;
                }
                
                // üÜï –ü–†–û–í–ï–†–Ø–ï–ú –¢–ò–ü –û–ë–ù–û–í–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                if (tournamentData.lastUpdate?.type === 'participant_update') {
                    console.log('üîÑ [Hybrid] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É');
                    return;
                }
                
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                setTimeout(() => {
                    fetchTournamentData(true, 'websocket_general');
                }, HYBRID_CONFIG.FALLBACK_DELAY);
            }
        });

        wsRef.current = socket;

        return () => {
            console.log('üîå –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
            unwatchTournament(id);
            // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: socket.disconnect() –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è singleton, –æ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        };
    }, [id, user, tournament?.id, fetchTournamentData]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        if (!user || !tournament) return;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è
        const participants = Array.isArray(tournament.participants) ? tournament.participants : [];
        const isParticipant = participants.some(p => {
            if (!validateParticipantData(p)) return false;
            return (tournament.participant_type === 'solo' && p.user_id === user.id) ||
                   (tournament.participant_type === 'team' && p.creator_id === user.id);
        });
        setIsParticipating(isParticipant);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        setIsCreator(user.id === tournament.created_by);
        const isAdmin = Array.isArray(tournament.admins) ? 
            tournament.admins.some(admin => admin?.user_id === user.id) : false;
        setIsAdminOrCreator(user.id === tournament.created_by || isAdmin);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        const token = localStorage.getItem('token');
        if (token) {
            api.get(`/api/tournaments/${id}/admin-request-status`, {
                headers: { Authorization: `Bearer ${token}` },
            })
            .then((statusResponse) => setAdminRequestStatus(statusResponse.data.status))
            .catch((error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            });
        }
    }, [user, tournament, id]);

    // üÜï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
    const searchAdmins = useCallback(async (query) => {
        if (!query || query.trim().length < 3) {
            setAdminSearchResults([]);
            return;
        }

        setIsSearchingAdmins(true);
        try {
            const result = await tournamentManagement.searchUsers(query.trim());
            if (result.success) {
                setAdminSearchResults(result.data || []);
            } else {
                setAdminSearchResults([]);
                setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
            setAdminSearchResults([]);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            setTimeout(() => setMessage(''), 3000);
        } finally {
            setIsSearchingAdmins(false);
        }
    }, [tournamentManagement]);

    // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
    const inviteAdmin = useCallback(async (userId, userName) => {
        try {
            setIsSearchingAdmins(true);
            const result = await tournamentManagement.inviteAdmin(userId);
            
            if (result.success) {
                // üîß –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï: —É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                let message = `‚úÖ ${userName} –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞`;
                
                if (result.isResend && result.cancelledInvitations > 0) {
                    message = `üîÑ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. ${userName} –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞`;
                }
                
                setMessage(message);
                setAdminSearchModal(false);
                setAdminSearchQuery('');
                setAdminSearchResults([]);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                await fetchTournamentData();
            } else {
                // üîß –£–ü–†–û–©–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö (—É–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π)
                let errorMessage = result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞';
                setMessage(`‚ùå ${errorMessage}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ ${userName}: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        } finally {
            setIsSearchingAdmins(false);
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, fetchTournamentData]);

    // –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const removeAdmin = useCallback(async (userId) => {
        const confirmed = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?');
        if (!confirmed) return;

        try {
            const result = await tournamentManagement.removeAdmin(userId);
            
            if (result.success) {
                setMessage('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                await fetchTournamentData();
            } else {
                setMessage(`‚ùå ${result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        } finally {
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, fetchTournamentData]);

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const openAdminSearchModal = useCallback(() => {
        setAdminSearchModal(true);
        setAdminSearchQuery('');
        setAdminSearchResults([]);
    }, []);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const closeAdminSearchModal = useCallback(() => {
        setAdminSearchModal(false);
        setAdminSearchQuery('');
        setAdminSearchResults([]);
        setIsSearchingAdmins(false);
    }, []);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    const canEditMatches = useMemo(() => {
        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ò (—è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ò–õ–ò –∞–¥–º–∏–Ω–æ–º)
        // 2. –¢—É—Ä–Ω–∏—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ "in_progress" (–ò–¥–µ—Ç)
        return user && (isCreator || adminRequestStatus === 'accepted') && tournament?.status === 'in_progress';
    }, [user, isCreator, adminRequestStatus, tournament?.status]);

    // üîß –ì–ò–ë–†–ò–î–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –¢–£–†–ù–ò–†–ê
    const handleStartTournament = useCallback(async () => {
        // üÜï –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –ö–†–ò–¢–ò–ß–ï–°–ö–£–Æ –û–ü–ï–†–ê–¶–ò–Æ
        const operationId = 'startTournament';
        
        try {
            setLoading(true);
            
            setHybridState(prev => ({
                ...prev,
                pendingOperations: new Set(prev.pendingOperations).add(operationId),
                cacheStrategy: 'critical'
            }));
            
            // üÜï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ö–ï–®–ê –ü–ï–†–ï–î –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–ü–ï–†–ê–¶–ò–ï–ô
            clearAdaptiveCache('start_tournament_pre');
            console.log('üßπ [Hybrid] –ö–µ—à –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç—É—Ä–Ω–∏—Ä–∞');
            
            // üÜï –¢–ê–ô–ú–ï–† –û–ñ–ò–î–ê–ù–ò–Ø WEBSOCKET –û–ë–ù–û–í–õ–ï–ù–ò–Ø
            let websocketReceived = false;
            const websocketTimeout = setTimeout(() => {
                if (!websocketReceived) {
                    console.warn('‚ö†Ô∏è [Hybrid] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                    setHybridState(prev => ({ ...prev, fallbackActive: true }));
                    fetchTournamentData(true, 'start_fallback');
                }
            }, HYBRID_CONFIG.WEBSOCKET_TIMEOUT);
            
            // üÜï –ü–û–î–ü–ò–°–´–í–ê–ï–ú–°–Ø –ù–ê WEBSOCKET –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê
            const handleStatusUpdate = (data) => {
                if (data._metadata?.updateType === HYBRID_CONFIG.UPDATE_TYPES.STATUS_CHANGE && 
                    data._metadata?.source === 'startTournament') {
                    websocketReceived = true;
                    clearTimeout(websocketTimeout);
                    console.log('‚úÖ [Hybrid] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—É—á–µ–Ω–æ');
                }
            };
            
            const result = await tournamentManagement.startTournament();
            
            if (result.success) {
                setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
                
                // üÜï –û–ñ–ò–î–ê–ï–ú WEBSOCKET –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–õ–ò –ò–°–ü–û–õ–¨–ó–£–ï–ú FALLBACK
                if (!websocketReceived) {
                    setTimeout(() => {
                        if (!websocketReceived) {
                            console.log('üîÑ [Hybrid] Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API');
                            clearAdaptiveCache('start_tournament_fallback');
                            fetchTournamentData(true, 'start_tournament_success');
                        }
                    }, HYBRID_CONFIG.FALLBACK_DELAY);
                }
                
            } else {
                clearTimeout(websocketTimeout);
                setMessage(`‚ùå ${result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞'}`);
                
                // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
                clearAdaptiveCache('start_tournament_error');
            }
        } catch (error) {
            console.error('‚ùå [Hybrid] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞');
            
            // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º
            clearAdaptiveCache('start_tournament_exception');
            setTimeout(() => {
                fetchTournamentData(true, 'start_tournament_error_recovery');
            }, 1000);
            
        } finally {
            setLoading(false);
            
            // –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setHybridState(prev => {
                const newPending = new Set(prev.pendingOperations);
                newPending.delete(operationId);
                return { 
                    ...prev, 
                    pendingOperations: newPending,
                    cacheStrategy: newPending.size > 0 ? 'updating' : 'normal'
                };
            });
            
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, clearAdaptiveCache, fetchTournamentData]);

    // üÜï –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ï–ö –¢–£–†–ù–ò–†–ê
    const handleUpdateTournamentSetting = useCallback(async (field, value) => {
        console.log(`üîß [handleUpdateTournamentSetting] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${field} = ${value}`);
        
        const token = localStorage.getItem('token');
        if (!token) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }

        let endpoint;
        let payload;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –∏ payload –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
        switch (field) {
            case 'game':
                endpoint = `/api/tournaments/${id}/game`;
                payload = { game: value };
                break;
            case 'format':
                endpoint = `/api/tournaments/${id}/format`;
                payload = { format: value };
                break;
            case 'bracket_type':
                endpoint = `/api/tournaments/${id}/bracket-type`;
                payload = { bracket_type: value };
                break;
            case 'mix_rating_type':
                endpoint = `/api/tournaments/${id}/rating-type`;
                payload = { mix_rating_type: value };
                break;
            case 'team_size':
                endpoint = `/api/tournaments/${id}/team-size`;
                payload = { team_size: value };
                break;
            case 'start_date':
                endpoint = `/api/tournaments/${id}/start-date`;
                payload = { start_date: value };
                break;
            case 'lobby_enabled':
                endpoint = `/api/tournaments/${id}/lobby-enabled`;
                payload = { lobby_enabled: value };
                break;
            case 'mix_link_requirements':
                endpoint = `/api/tournaments/${id}/mix-link-requirements`;
                payload = { 
                    require_faceit_linked: !!value.require_faceit_linked,
                    require_steam_linked: !!value.require_steam_linked
                };
                break;
            default:
                throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${field}`);
        }

        try {
            const response = await api.put(endpoint, payload, {
                headers: { 
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log(`‚úÖ [handleUpdateTournamentSetting] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:`, response.data);

            // –û—á–∏—â–∞–µ–º –∫–µ—à —Ç—É—Ä–Ω–∏—Ä–∞
            const cacheKey = `tournament_cache_${id}`;
            const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
            localStorage.removeItem(cacheKey);
            localStorage.removeItem(cacheTimestampKey);

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            await fetchTournamentData();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            setMessage(`‚úÖ ${response.data.message || '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'}`);
            setTimeout(() => setMessage(''), 5000);

        } catch (error) {
            console.error(`‚ùå [handleUpdateTournamentSetting] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${field}:`, error);
            const errorMessage = error.response?.data?.message || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            throw new Error(errorMessage);
        }
    }, [id, fetchTournamentData]);

    // üîß –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø –¢–£–†–ù–ò–†–ê (–ß–ï–†–ï–ó –•–£–ö)
    const handleEndTournament = useCallback(async () => {
        const confirmMessage = `üèÅ –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä.\n\n–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:\n‚Ä¢ –ù–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n‚Ä¢ –ë—É–¥—É—Ç –ø–æ–¥–≤–µ–¥–µ–Ω—ã –∏—Ç–æ–≥–∏\n‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`;
        
        if (!window.confirm(confirmMessage)) return;

        try {
            setLoading(true);
            const result = await tournamentManagement.endTournament();
            
            if (result.success) {
                setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
                await fetchTournamentData();
            } else {
                setMessage(`‚ùå ${result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞'}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞');
        } finally {
            setLoading(false);
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, fetchTournamentData]);

    // üóëÔ∏è –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –¢–£–†–ù–ò–†–ê
    const handleDeleteTournament = useCallback(async () => {
        if (!tournament?.id) {
            setMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ç—É—Ä–Ω–∏—Ä–∞');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        try {
            setIsDeletingTournament(true);
            const token = localStorage.getItem('token');
            
            if (!token) {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

            console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:', tournament.id);

            const response = await api.delete(`/api/tournaments/${tournament.id}`, {
                headers: { 
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:', response.data);

            // –û—á–∏—â–∞–µ–º –∫–µ—à —Ç—É—Ä–Ω–∏—Ä–∞
            const cacheKey = `tournament_cache_${tournament.id}`;
            const cacheTimestampKey = `tournament_cache_timestamp_${tournament.id}`;
            localStorage.removeItem(cacheKey);
            localStorage.removeItem(cacheTimestampKey);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            setDeleteTournamentModal(false);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                navigate('/');
            }, 2000);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            
            let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞';
            
            if (error.response?.status === 403) {
                errorMessage = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞';
            } else if (error.response?.status === 404) {
                errorMessage = '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω';
            } else if (error.response?.status === 400) {
                errorMessage = error.response.data?.error || '–¢—É—Ä–Ω–∏—Ä –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏';
            } else if (error.response?.data?.error) {
                errorMessage = error.response.data.error;
            } else if (error.message) {
                errorMessage = error.message;
            }

            setMessage(`‚ùå ${errorMessage}`);
            setTimeout(() => setMessage(''), 5000);
        } finally {
            setIsDeletingTournament(false);
        }
    }, [tournament, navigate]);

    // üîß –§–£–ù–ö–¶–ò–Ø –û–¢–ö–†–´–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –£–î–ê–õ–ï–ù–ò–Ø –¢–£–†–ù–ò–†–ê
    const openDeleteTournamentModal = useCallback(() => {
        setDeleteTournamentModal(true);
        console.log('üóëÔ∏è –û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞');
    }, []);

    // üîß –§–£–ù–ö–¶–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –£–î–ê–õ–ï–ù–ò–Ø –¢–£–†–ù–ò–†–ê
    const closeDeleteTournamentModal = useCallback(() => {
        if (isDeletingTournament) {
            console.log('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
            return;
        }
        setDeleteTournamentModal(false);
        console.log('üóëÔ∏è –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞');
    }, [isDeletingTournament]);

    // üèÜ –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ï–¢–ö–ò (API v2.0)
    const handleGenerateBracket = useCallback(async (useThirdPlace = null) => {
        // –î–ª—è Double Elimination –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (tournament?.bracket_type === 'double_elimination') {
            console.log('üéØ Double Elimination: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ');
            useThirdPlace = true;
        }
        
        // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (useThirdPlace === null) {
            console.log('üéØ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ –¥–ª—è –ì–ï–ù–ï–†–ê–¶–ò–ò');
            setIsRegenerationMode(false);
            setShowThirdPlaceModal(true);
            return;
        }

        if (loading) {
            console.log('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫');
            return;
        }

        console.log(`üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É —á–µ—Ä–µ–∑ API v2.0 —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º thirdPlaceMatch: ${useThirdPlace}`);

        try {
            setLoading(true);
            
            const token = localStorage.getItem('token');
            const response = await api.post(`/api/tournaments/${id}/generate-bracket`, {
                thirdPlaceMatch: useThirdPlace
            }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            if (response.data.success) {
                const matchText = useThirdPlace ? '—Å –º–∞—Ç—á–µ–º –∑–∞ 3-–µ –º–µ—Å—Ç–æ' : '–±–µ–∑ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ';
                setMessage(`‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ${matchText}!`);
                
                // –û—á–∏—â–∞–µ–º –∫–µ—à —Ç—É—Ä–Ω–∏—Ä–∞
                const cacheKey = `tournament_cache_${id}`;
                const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
                localStorage.removeItem(cacheKey);
                localStorage.removeItem(cacheTimestampKey);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await fetchTournamentData();
                
                // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                setTimeout(() => {
                    setMessage(null);
                }, 3000);
                
            } else {
                setError(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏: ${response.data.error}`);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
            setError(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏: ${error.response?.data?.error || error.message}`);
        } finally {
            setLoading(false);
        }
    }, [id, loading, tournament?.bracket_type, setMessage, setError, fetchTournamentData]);

    // ÔøΩÔøΩ –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ï–ì–ï–ù–ï–†–ê–¶–ò–ò –°–ï–¢–ö–ò (API v2.0)
    const handleRegenerateBracket = useCallback(async (useThirdPlace = null) => {
        // –î–ª—è Double Elimination –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (tournament?.bracket_type === 'double_elimination') {
            console.log('üéØ Double Elimination: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ');
            useThirdPlace = true;
        }
        
        // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (useThirdPlace === null) {
            console.log('üéØ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ –¥–ª—è –†–ï–ì–ï–ù–ï–†–ê–¶–ò–ò');
            setIsRegenerationMode(true);
            setShowThirdPlaceModal(true);
            return;
        }

        if (loading) {
            console.log('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫');
            return;
        }

        console.log(`üöÄ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É —á–µ—Ä–µ–∑ API v2.0 —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º thirdPlaceMatch: ${useThirdPlace}`);
        
        const shuffleText = '\n‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç —Å–ª—É—á–∞–π–Ω–æ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏';
        const thirdPlaceText = useThirdPlace ? '\n‚Ä¢ –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ' : '\n‚Ä¢ –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω';
        
        const confirmMessage = `üîÑ –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É.\n\n–í–ù–ò–ú–ê–ù–ò–ï:\n‚Ä¢ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n‚Ä¢ –°–µ—Ç–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ${shuffleText}${thirdPlaceText}\n‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`;

        if (!window.confirm(confirmMessage)) {
            return;
        }

        try {
            setLoading(true);
            
            const token = localStorage.getItem('token');
            const response = await api.post(`/api/tournaments/${id}/regenerate-bracket`, {
                shuffle: true,
                thirdPlaceMatch: Boolean(useThirdPlace)
            }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            if (response.data.success) {
                const matchText = useThirdPlace ? '—Å –º–∞—Ç—á–µ–º –∑–∞ 3-–µ –º–µ—Å—Ç–æ' : '–±–µ–∑ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ';
                setMessage(`‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ${matchText}!`);
                
                // –û—á–∏—â–∞–µ–º –∫–µ—à —Ç—É—Ä–Ω–∏—Ä–∞
                const cacheKey = `tournament_cache_${id}`;
                const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
                localStorage.removeItem(cacheKey);
                localStorage.removeItem(cacheTimestampKey);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await fetchTournamentData();
                
                // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                setTimeout(() => {
                    setMessage(null);
                }, 3000);
                
            } else {
                setError(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏: ${response.data.error}`);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
            setError(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏: ${error.response?.data?.error || error.message}`);
        } finally {
            setLoading(false);
        }
    }, [id, loading, tournament?.bracket_type, setMessage, setError, fetchTournamentData]);

    // üö® –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –≠–ö–°–¢–†–ï–ù–ù–û–ô –û–°–¢–ê–ù–û–í–ö–ò (API v2.0)
    const handleKillGeneration = useCallback(async () => {
        if (user?.role !== 'admin') {
            setMessage('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        const confirmMessage = `üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ü–†–û–¶–ï–°–°–û–í\n\n–í–ù–ò–ú–ê–ù–ò–ï:\n‚Ä¢ –ë—É–¥—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å—à–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n‚Ä¢ –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–µ—Ä–≤–∞–Ω—ã\n‚Ä¢ –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã!\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`;
        
        if (!window.confirm(confirmMessage)) return;

        try {
            setLoading(true);
            setMessage('üö® –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...');
            
            const token = localStorage.getItem('token');
            const response = await api.post(`/api/tournaments/${id}/kill-generation`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            if (response.data.success) {
                setMessage(`‚úÖ ${response.data.message}`);
                console.log('üö® –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', response.data);
                
                // –û—á–∏—â–∞–µ–º –∫–µ—à —Ç—É—Ä–Ω–∏—Ä–∞
                const cacheKey = `tournament_cache_${id}`;
                const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
                localStorage.removeItem(cacheKey);
                localStorage.removeItem(cacheTimestampKey);
                
                await fetchTournamentData();
            } else {
                setMessage(`‚ùå ${response.data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error);
            let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤';
            
            if (error.response?.data?.details) {
                errorMessage = error.response.data.details;
            } else if (error.message) {
                errorMessage = error.message;
            }
            
            setMessage(`‚ùå ${errorMessage}`);
        } finally {
            setLoading(false);
            setTimeout(() => setMessage(''), 8000);
        }
    }, [id, user?.role, fetchTournamentData]);

    // üîí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cooldown —Å—á–µ—Ç—á–∏–∫–∞ - –£–ë–†–ê–ù–û, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–π–º–∞—É—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    // useEffect(() => {
    //     let interval;
    //     if (regenerationCooldown > 0) {
    //         interval = setInterval(() => {
    //             setRegenerationCooldown(prev => Math.max(0, prev - 100));
    //         }, 100);
    //     }
    //     return () => clearInterval(interval);
    // }, [regenerationCooldown]);

    // üÜï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ú–ê–¢–ß–ê –ó–ê 3-–ï –ú–ï–°–¢–û (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    const handleThirdPlaceModalConfirm = useCallback((needThirdPlace) => {
        const mode = isRegenerationMode ? '–†–ï–ì–ï–ù–ï–†–ê–¶–ò–ò' : '–ì–ï–ù–ï–†–ê–¶–ò–ò';
        console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: ${needThirdPlace ? '–Ω—É–∂–µ–Ω' : '–Ω–µ –Ω—É–∂–µ–Ω'} –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –¥–ª—è ${mode}`);
        setThirdPlaceMatch(needThirdPlace);
        setShowThirdPlaceModal(false);
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if (isRegenerationMode) {
            handleRegenerateBracket(needThirdPlace);
        } else {
        handleGenerateBracket(needThirdPlace);
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
        setIsRegenerationMode(false);
    }, [handleGenerateBracket, handleRegenerateBracket, isRegenerationMode]);

    const handleThirdPlaceModalClose = useCallback(() => {
        const mode = isRegenerationMode ? '—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é' : '–≥–µ–Ω–µ—Ä–∞—Ü–∏—é';
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª ${mode} —Å–µ—Ç–∫–∏`);
        setShowThirdPlaceModal(false);
        setIsRegenerationMode(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
    }, [isRegenerationMode]);

    // üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –º–∞—Ç—á–∞
    const handleCreateMatchLobby = useCallback(async (matchId) => {
        try {
            setLoading(true);
            const token = localStorage.getItem('token');
            
            if (!token) {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }
            
            console.log('üéÆ –°–æ–∑–¥–∞–µ–º –ª–æ–±–±–∏ –¥–ª—è –º–∞—Ç—á–∞:', matchId);
            
            const response = await api.post(
                `/api/tournaments/${id}/matches/${matchId}/create-lobby`,
                {},
                {
                    headers: { 
                        Authorization: `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            
            console.log('‚úÖ –õ–æ–±–±–∏ –º–∞—Ç—á–∞ —Å–æ–∑–¥–∞–Ω–æ:', response.data);
            
            setMessage('‚úÖ –õ–æ–±–±–∏ –º–∞—Ç—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            await fetchTournamentData();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏:', error);
            
            let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏ –º–∞—Ç—á–∞';
            
            if (error.response?.status === 403) {
                errorMessage = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏';
            } else if (error.response?.data?.error) {
                errorMessage = error.response.data.error;
            } else if (error.message) {
                errorMessage = error.message;
            }
            
            setMessage(`‚ùå ${errorMessage}`);
        } finally {
            setLoading(false);
            setTimeout(() => setMessage(''), 5000);
        }
    }, [id, fetchTournamentData]);

    // üë§ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const handleAddParticipant = useCallback(async () => {
        if (!newParticipantData.display_name?.trim()) {
            setMessage('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        try {
            setLoading(true);
            console.log('üë§ –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞:', newParticipantData);

            const result = await tournamentManagement.addUnregisteredParticipant(newParticipantData);
            
            if (result.success) {
                console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', result.data);
                
                // üöÄ –ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø - –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const newParticipant = {
                    id: result.data?.id || Date.now(), // –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –µ—Å–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞
                    name: newParticipantData.display_name,
                    display_name: newParticipantData.display_name,
                    email: newParticipantData.email || null,
                    faceit_elo: newParticipantData.faceit_elo || null,
                    cs2_premier_rank: newParticipantData.cs2_premier_rank || null,
                    user_id: null, // –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
                    avatar_url: null,
                    in_team: false,
                    created_at: new Date().toISOString()
                };
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                setTournament(prev => ({
                    ...prev,
                    participants: [...(prev.participants || []), newParticipant]
                }));
                
                // –û–±–Ω–æ–≤–ª—è–µ–º originalParticipants –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤
                setOriginalParticipants(prev => [...prev, newParticipant]);
                
                console.log('üöÄ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ');
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                closeModal('addParticipant');
                
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                setNewParticipantData({
                    display_name: '',
                    email: '',
                    faceit_elo: '',
                    cs2_premier_rank: ''
                });
                
                // –û—á–∏—â–∞–µ–º –∫–µ—à —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                const cacheKey = `tournament_cache_${id}`;
                const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
                localStorage.removeItem(cacheKey);
                localStorage.removeItem(cacheTimestampKey);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ–Ω–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                setTimeout(() => {
                    fetchTournamentData();
                }, 1000);
                
                setMessage(`‚úÖ ${newParticipantData.display_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä`);
                setTimeout(() => setMessage(''), 3000);
            } else {
                setMessage(`‚ùå ${result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞'}`);
                setTimeout(() => setMessage(''), 5000);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 5000);
        } finally {
            setLoading(false);
        }
    }, [newParticipantData, tournamentManagement, id, fetchTournamentData, closeModal, setMessage, setLoading]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    if (loading) {
                        return (
            <div className="tournament-loading" data-testid="tournament-loading">
                <div className="loading-content">
                    <h2>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞...</h2>
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
                </div>
                                            </div>
        );
    }

    if (error) {
        return (
            <div className="auth-error-container" data-testid="tournament-error">
                <div className="auth-error-message">
                    <h2>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞</h2>
                    <p>{error}</p>
                                                        <button 
                        className="auth-error-button" 
                        onClick={() => {
                            setError(null);
                            fetchTournamentData();
                        }}
                    >
                        ÔøΩÔøΩ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                                                        </button>
                                                    </div>
                                            </div>
        );
    }

    if (!tournament) {
        return (
            <div className="tournament-not-found" data-testid="tournament-not-found">
                <h2>‚ùì –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
                <p>–¢—É—Ä–Ω–∏—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.</p>
                <button onClick={() => navigate('/')}>üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é</button>
                                                        </div>
        );
    }

    // üÜï –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–∫–ª–∞–¥–æ–∫
    return (
        <TournamentErrorBoundary>
            <div
                className={`tournament-details-tournamentdetails ${tournament?.game && /counter\s*strike\s*2|cs2/i.test(tournament.game) ? 'with-root-bg' : ''}`}
                data-testid="tournament-details"
            >
                <div className="tournament-layout">
                    <div className="tournament-main">
                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—É—Ä–Ω–∏—Ä–∞ (CS2: –¥–µ–ª–∏–º –Ω–∞ 2 –±–ª–æ–∫–∞ –≤ –æ–±—â–µ–º —Ñ–ª–µ–∫—Å–µ) */}
                        <div className={`tournament-header ${tournament?.game && /counter\s*strike\s*2|cs2/i.test(tournament.game) ? 'with-cs2-hero' : ''}`}>
                            <div className={`tournament-header-tournamentdetails ${tournament?.game && /counter\s*strike\s*2|cs2/i.test(tournament.game) ? 'with-cs2-hero' : ''}`}>
                                <h2 data-testid="tournament-title">{tournament.name}</h2>
                                <div className="header-meta">
                                    <div className="header-meta-row">
                                        <span className="meta-label">–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</span>
                                        <span className="meta-value">
                                            {tournament?.organizer_name || tournament?.organizer?.name || tournament?.organizer || tournament?.organizer_slug || '‚Äî'}
                                        </span>
                                    </div>
                                    <div className="header-meta-row">
                                        <span className="meta-label">–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</span>
                                        <span className="meta-value">{tournament?.game || '‚Äî'}</span>
                                    </div>
                                </div>
                                <div className="header-actions">
                                    {tournament?.access_type === 'closed' ? (
                                        <span className="invite-only">üîí Invite only</span>
                                    ) : (
                                        <button 
                                            className="btn btn-primary"
                                            onClick={async () => {
                                                try {
                                                    if (!user) {
                                                        localStorage.setItem('returnToTournament', tournament.id);
                                                        localStorage.setItem('tournamentAction', 'participate');
                                                        window.location.href = '/register?action=participate';
                                                        return;
                                                    }
                                                    const participantType = tournament.participant_type;
                                                    const payload = tournament.format === 'mix'
                                                        ? {}
                                                        : participantType === 'solo' ? {} : { teamId: null, newTeamName: null };
                                                    const token = localStorage.getItem('token');
                                                    await api.post(`/api/tournaments/${tournament.id}/participate`, payload, {
                                                        headers: { Authorization: `Bearer ${token}` }
                                                    });
                                                    await fetchTournamentData();
                                                } catch (e) {
                                                    console.error('–û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–∏—è:', e);
                                                }
                                            }}
                                        >
                                            –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ
                                        </button>
                                    )}
                                    <button 
                                        className="btn btn-secondary"
                                        onClick={() => {
                                            setActiveTab('info');
                                            requestAnimationFrame(() => {
                                                setTimeout(() => {
                                                    const el = document.querySelector('.rules-block');
                                                    if (el && typeof el.scrollIntoView === 'function') {
                                                        el.scrollIntoView({ behavior: 'smooth', block: 'start' });
                                                    }
                                                }, 50);
                                            });
                                        }}
                                    >
                                        –†–µ–≥–ª–∞–º–µ–Ω—Ç
                                    </button>
                                </div>
                            </div>
                            <div className={`tournament-header-infoblock ${tournament?.game && /counter\s*strike\s*2|cs2/i.test(tournament.game) ? 'with-cs2-hero' : ''}`}>
                                {/* –ü—Ä–∞–≤—ã–π –∏–Ω—Ñ–æ–±–ª–æ–∫: –ø—Ä–∏–∑–æ–≤–æ–π, —Å—Ç–∞—Ä—Ç, —Å—Ç–∞—Ç—É—Å, –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ñ–æ—Ä–º–∞—Ç, —É—á–∞—Å—Ç–Ω–∏–∫–∏, –∫–æ–º–∞–Ω–¥–∞ */}
                                <div className="infoblock-stats">
                                    <div className="infoblock-grid infoblock-top">
                                        <div className="infoblock-item infoblock-prize">
                                            <div className="infoblock-label">–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥</div>
                                            <div className="infoblock-value">{tournament?.prize_pool ? tournament.prize_pool : '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                                        </div>
                                        <div className="infoblock-item infoblock-start">
                                            <div className="infoblock-label">–°—Ç–∞—Ä—Ç</div>
                                            <div className="infoblock-value">{tournament?.start_date ? new Date(tournament.start_date).toLocaleString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' }) : '‚Äî'}</div>
                                        </div>
                                        <div className="infoblock-item infoblock-status">
                                            <div className="infoblock-label">–°—Ç–∞—Ç—É—Å</div>
                                            <div className="infoblock-value">{(() => { const map = { registration: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', active: '–ê–∫—Ç–∏–≤–Ω—ã–π', in_progress: '–ò–¥–µ—Ç', completed: '–ó–∞–≤–µ—Ä—à–µ–Ω', upcoming: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π' }; return map[tournament?.status] || tournament?.status || '‚Äî'; })()}</div>
                                        </div>
                                    </div>
                                    <div className="infoblock-progress">
                                        <TournamentProgressBar matches={matches || []} tournamentStatus={tournament?.status} tournament={tournament} compact={true} />
                                    </div>
                                    <div className="infoblock-grid infoblock-bottom">
                                        <div className="infoblock-item infoblock-format">
                                            <div className="infoblock-label">–§–æ—Ä–º–∞—Ç</div>
                                            <div className="infoblock-value">{tournament?.format === 'mix' ? '–ú–∏–∫—Å' : (tournament?.participant_type === 'team' ? '–ö–æ–º–∞–Ω–¥–Ω—ã–π' : '–°–æ–ª–æ')}</div>
                                        </div>
                                        <div className="infoblock-item infoblock-participants">
                                            <div className="infoblock-label">–£—á–∞—Å—Ç–Ω–∏–∫–∏</div>
                                            <div className="infoblock-value">{(() => { const displayed = tournament?.format === 'mix' ? (tournament?.players_count ?? tournament?.participant_count ?? 0) : (tournament?.participant_count ?? 0); return tournament?.max_participants ? `${displayed} –∏–∑ ${tournament.max_participants}` : displayed; })()}</div>
                                        </div>
                                        <div className="infoblock-item infoblock-team-size">
                                            <div className="infoblock-label">–í –∫–æ–º–∞–Ω–¥–µ</div>
                                            <div className="infoblock-value">{tournament?.team_size || 5}</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* üÜï –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º */}
                        <div className={`tabs-navigation-tournamentdetails ${tournament?.game && /counter\s*strike\s*2|cs2/i.test(tournament.game) ? 'offset-from-hero' : ''}`}>
                            <button 
                                className={`tab-button-tournamentdetails ${activeTab === 'info' ? 'active' : ''}`}
                                onClick={() => switchTab('info')}
                            >
                                <span className="tab-label-tournamentdetails">üìã –ì–ª–∞–≤–Ω–∞—è</span>
                            </button>
                            
                            {shouldShowParticipantsTab && (
                                <button 
                                    className={`tab-button-tournamentdetails ${activeTab === 'participants' ? 'active' : ''}`}
                                    onClick={() => switchTab('participants')}
                                >
                                    <span className="tab-label-tournamentdetails">üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏</span>
                                </button>
                            )}
                            
                            <button 
                                className={`tab-button-tournamentdetails ${activeTab === 'bracket' ? 'active' : ''}`}
                                onClick={() => switchTab('bracket')}
                            >
                                <span className="tab-label-tournamentdetails">üèÜ –°–µ—Ç–∫–∞</span>
                            </button>
                            
                            <button 
                                className={`tab-button-tournamentdetails ${activeTab === 'results' ? 'active' : ''}`}
                                onClick={() => switchTab('results')}
                            >
                                <span className="tab-label-tournamentdetails">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</span>
                            </button>
                            
                            {isAdminOrCreator && (
                                <button 
                                    className={`tab-button-tournamentdetails ${activeTab === 'management' ? 'active' : ''}`}
                                    onClick={() => switchTab('management')}
                                >
                                    <span className="tab-label-tournamentdetails">‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</span>
                                </button>
                            )}
                        </div>

                        {/* üÜï –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
                        <div className="tournament-content-tournamentdetails">
                            <div className="tab-content-tournamentdetails">
                                {renderTabContent()}
                            </div>
                        </div>
                    </div>
                </div>

                {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
                {modals.addParticipant && (
                    <AddParticipantModal
                        isOpen={modals.addParticipant}
                        onClose={() => closeModal('addParticipant')}
                        newParticipantData={newParticipantData}
                        setNewParticipantData={setNewParticipantData}
                        onSubmit={handleAddParticipant}
                        isLoading={loading}
                    />
                )}

                {modals.participantSearch && (
                    <ParticipantSearchModal
                        isOpen={modals.participantSearch}
                        onClose={() => closeModal('participantSearch')}
                        onInvite={() => {}}
                        searchQuery=""
                        setSearchQuery={() => {}}
                        searchResults={[]}
                        isSearching={false}
                        onSearch={() => {}}
                        existingParticipants={tournament.participants || []}
                    />
                )}

                {modals.matchResult && selectedMatch && (
                    <MatchResultModal
                        isOpen={modals.matchResult}
                        onClose={() => closeModal('matchResult')}
                        selectedMatch={selectedMatch}
                        matchResultData={matchResultData}
                        setMatchResultData={setMatchResultData}
                        onSave={saveMatchResult}
                        isLoading={loading}
                        tournament={tournament}
                    />
                )}

                {modals.matchDetails && selectedMatchForDetails && (
                    <MatchDetailsModal
                        isOpen={modals.matchDetails}
                        onClose={() => closeModal('matchDetails')}
                        selectedMatch={selectedMatchForDetails}
                        canEdit={canEditMatches}
                        onEdit={() => {
                            closeModal('matchDetails');
                            setSelectedMatch(selectedMatchForDetails);
                            openModal('matchResult');
                        }}
                        tournament={tournament}
                    />
                )}

                {/* üÜï –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ */}
                <ThirdPlaceMatchModal
                    isOpen={showThirdPlaceModal}
                    onClose={handleThirdPlaceModalClose}
                    onConfirm={handleThirdPlaceModalConfirm}
                    participantCount={tournament?.participants?.length || 0}
                    tournamentName={tournament?.name || ''}
                />

                {/* üÜï –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ */}
                {adminSearchModal && (
                    <ParticipantSearchModal
                        isOpen={adminSearchModal}
                        onClose={closeAdminSearchModal}
                        mode="admin"
                        onInviteAdmin={inviteAdmin}
                        searchQuery={adminSearchQuery}
                        setSearchQuery={setAdminSearchQuery}
                        searchResults={adminSearchResults}
                        isSearching={isSearchingAdmins}
                        onSearch={searchAdmins}
                        existingAdmins={tournament?.admins || []}
                        existingParticipants={[]} // –ù–µ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–æ–≤
                    />
                )}

                {/* üóëÔ∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ */}
                {deleteTournamentModal && (
                    <DeleteTournamentModal
                        isOpen={deleteTournamentModal}
                        onClose={closeDeleteTournamentModal}
                        onConfirm={handleDeleteTournament}
                        tournament={tournament}
                        isLoading={isDeletingTournament}
                    />
                )}

                {/* –ü–ª–∞–≤–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π */}
                <TournamentFloatingActionPanel
                    tournament={tournament}
                    user={user}
                    hasAccess={isAdminOrCreator}
                    onStartTournament={handleStartTournament}
                    onEndTournament={handleEndTournament}
                    onClearResults={resetMatchResults}
                    hasMatches={matches.length > 0}
                    hasBracket={games.length > 0}
                    // üÜï –ü—Ä–æ–ø—Å—ã –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤
                    mixedTeams={tournament?.teams || []}
                />

                {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
                {message && (
                    <div className="tournament-message" data-testid="tournament-message">
                        {message}
                    </div>
                )}
            </div>
        </TournamentErrorBoundary>
    );
}

export default TournamentDetails;
