/**
 * TournamentDetails v4.1.0 - Full Feature Restoration
 * 
 * @version 4.1.0 (–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
 * @created 2025-01-22
 * @author 1337 Community Development Team
 * @purpose –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useParams, Link } from 'react-router-dom';
import { io } from 'socket.io-client';
import api from '../utils/api';
import './TournamentDetails.css';
import TeamGenerator from './TeamGenerator';
import BracketRenderer from './BracketRenderer';
import { ensureHttps } from '../utils/userHelpers';

// –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Ö—É–∫–∏
import TournamentAdminPanel from './tournament/TournamentAdminPanel';
import AddParticipantModal from './tournament/modals/AddParticipantModal';
import ParticipantSearchModal from './tournament/modals/ParticipantSearchModal';
import MatchResultModal from './tournament/modals/MatchResultModal';
import useTournamentManagement from '../hooks/tournament/useTournamentManagement';
import useTournamentModals from '../hooks/tournament/useTournamentModals';

// Error Boundary –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
class TournamentErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false, errorInfo: null };
    }

    static getDerivedStateFromError(error) {
        return { hasError: true };
    }

    componentDidCatch(error, errorInfo) {
        console.error('üö® TournamentDetails Critical Error:', error, errorInfo);
        this.setState({ errorInfo });
    }

    render() {
        if (this.state.hasError) {
            return (
                <div className="tournament-critical-error">
                    <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h2>
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
                    <button onClick={() => window.location.reload()}>
                        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    </button>
                </div>
            );
        }
        return this.props.children;
    }
}

function TournamentDetails() {
    const { id } = useParams();
    
    // üéØ –û–°–ù–û–í–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø
    const [tournament, setTournament] = useState(null);
    const [user, setUser] = useState(null);
    const [matches, setMatches] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [activeTab, setActiveTab] = useState('info');
    
    // üéØ UI –°–û–°–¢–û–Ø–ù–ò–Ø
    const [message, setMessage] = useState('');
    const [wsConnected, setWsConnected] = useState(false);
    const [selectedMatch, setSelectedMatch] = useState(null);
    const [mixedTeams, setMixedTeams] = useState([]);
    const [ratingType, setRatingType] = useState('faceit');
    const [dataLoadingStates, setDataLoadingStates] = useState({
        tournament: false,
        matches: false,
        user: false
    });
    
    // üéØ –ù–û–í–´–ï –•–£–ö–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø
    const tournamentManagement = useTournamentManagement(id);
    const modals = useTournamentModals();
    
    // üéØ LEGACY –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
    const [showConfirmModal, setShowConfirmModal] = useState(false);
    const [confirmAction, setConfirmAction] = useState({
        type: '',
        title: '',
        message: '',
        onConfirm: null,
        onCancel: null,
        data: null
    });
    
    // üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò
    const [searchQuery, setSearchQuery] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [isSearching, setIsSearching] = useState(false);
    const [newParticipantData, setNewParticipantData] = useState({
        name: '',
        email: '',
        faceit_elo: '',
        cs2_premier_rank: ''
    });
    
    // üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–¢–ß–ê–ú–ò
    const [editingMatchResult, setEditingMatchResult] = useState(null);
    const [matchResultData, setMatchResultData] = useState({
        score1: 0,
        score2: 0,
        maps_data: []
    });
    
    // üéØ –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –°–†–ï–î–ù–ï–ì–û –†–ï–ô–¢–ò–ù–ì–ê –ö–û–ú–ê–ù–î–´
    const calculateTeamAverageRating = useCallback((team) => {
        if (!team.members || team.members.length === 0) return '‚Äî';
        
        const ratings = team.members.map(member => {
            if (ratingType === 'faceit') {
                return parseInt(member.faceit_elo) || 1000; // –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ FACEIT
            } else {
                return parseInt(member.cs2_premier_rank) || 0; // –ë–∞–∑–æ–≤—ã–π —Ä–∞–Ω–≥ CS2
            }
        }).filter(rating => rating > 0);
        
        if (ratings.length === 0) return '‚Äî';
        
        const average = ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length;
        return Math.round(average);
    }, [ratingType]);

    // üéØ –ü–†–ê–í–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    const userPermissions = useMemo(() => {
        if (!user || !tournament) {
            return {
                isParticipating: false,
                isCreator: false,
                isAdminOrCreator: false,
                canEdit: false
            };
        }

        const isCreator = tournament.creator_id === user.id || tournament.created_by === user.id;
        const isParticipating = tournament.participants?.some(
            p => p.user_id === user.id || p.id === user.id
        ) || false;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ö—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const hasAccess = tournamentManagement.checkAccess(tournament);

        return {
            isParticipating,
            isCreator,
            isAdminOrCreator: hasAccess,
            canEdit: hasAccess
        };
    }, [user, tournament, tournamentManagement]);

    // üéØ –ó–ê–ì–†–£–ó–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    const loadUser = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) return;

        try {
            setDataLoadingStates(prev => ({ ...prev, user: true }));
            const response = await api.get('/api/users/me');
            setUser(response.data);
        } catch (error) {
            console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω:', error.message);
        } finally {
            setDataLoadingStates(prev => ({ ...prev, user: false }));
        }
    }, []);

    // üéØ –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò –ë–ï–ó –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
    // –û–ü–†–ï–î–ï–õ–ï–ù–ê –í–´–®–ï –í–°–ï–• –§–£–ù–ö–¶–ò–ô –ö–û–¢–û–†–´–ï –ï–ï –ò–°–ü–û–õ–¨–ó–£–Æ–¢
    const reloadTournamentData = useCallback(() => {
        if (!id) return;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
        const loadData = async () => {
            try {
                setLoading(true);
                setError(null);
                
                const tournamentResponse = await api.get(`/api/tournaments/${id}`);
                const tournamentData = tournamentResponse.data;
                
                setTournament(tournamentData);
                setMatches(tournamentData.matches || []);
                
                if (tournamentData.format === 'mix' || tournamentData.participant_type === 'team') {
                    setMixedTeams(tournamentData.teams || tournamentData.mixed_teams || []);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
                setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
            } finally {
                setLoading(false);
            }
        };
        
        loadData();
    }, [id]); // –¢–æ–ª—å–∫–æ id –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    // üéØ –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –¢–£–†–ù–ò–†
    const searchUsers = useCallback(async (query) => {
        if (!query || query.length < 2) {
            modals.updateSearchResults([]);
            return;
        }

        try {
            modals.setSearchLoading(true);
            const result = await tournamentManagement.searchUsers(query);
            
            if (result.success) {
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                const existingParticipantIds = tournament.participants?.map(p => p.user_id || p.id) || [];
                const filteredResults = result.data.filter(user => 
                    !existingParticipantIds.includes(user.id)
                );
                
                modals.updateSearchResults(filteredResults);
                console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', filteredResults.length);
            } else {
                modals.updateSearchResults([]);
                setMessage(`‚ùå ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            modals.updateSearchResults([]);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [tournament, tournamentManagement, modals]);

    // üéØ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–û–ì–û –£–ß–ê–°–¢–ù–ò–ö–ê
    const addRegisteredParticipant = useCallback(async (userId) => {
        try {
            const result = await tournamentManagement.addRegisteredParticipant(userId);
            
            if (result.success) {
                setMessage('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä!');
                setTimeout(() => setMessage(''), 3000);
                modals.closeParticipantSearchModal();
                reloadTournamentData();
            } else {
                setMessage(`‚ùå ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [tournamentManagement, modals, reloadTournamentData]);

    // üéØ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–û–ì–û –£–ß–ê–°–¢–ù–ò–ö–ê
    const addUnregisteredParticipant = useCallback(async () => {
        if (!modals.newParticipantData.display_name?.trim()) {
            setMessage('‚ùå –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        try {
            const result = await tournamentManagement.addGuestParticipant(modals.newParticipantData);
            
            if (result.success) {
                setMessage('‚úÖ –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!');
                setTimeout(() => setMessage(''), 3000);
                modals.closeAddParticipantModal();
                reloadTournamentData();
            } else {
                setMessage(`‚ùå ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [tournamentManagement, modals, reloadTournamentData]);

    // üéØ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ú–ê–¢–ß–ê
    const saveMatchResult = useCallback(async () => {
        if (!modals.selectedMatch) return;

        try {
            const result = await tournamentManagement.saveMatchResult(
                modals.selectedMatch.id,
                modals.matchResultData
            );
            
            if (result.success) {
                setMessage('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
                setTimeout(() => setMessage(''), 3000);
                modals.closeMatchResultModal();
                reloadTournamentData();
            } else {
                setMessage(`‚ùå ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [tournamentManagement, modals, reloadTournamentData]);

    // üéØ –û–¢–ö–†–´–¢–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ú–ê–¢–ß–ê
    const openMatchResultModal = useCallback((match) => {
        modals.openMatchResultModal(match);
    }, [modals]);

    // üéØ –§–£–ù–ö–¶–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –î–ï–ô–°–¢–í–ò–ô
    const showConfirmation = useCallback((type, title, message, onConfirm, data = null) => {
        setConfirmAction({
            type,
            title,
            message,
            onConfirm,
            onCancel: () => setShowConfirmModal(false),
            data
        });
        setShowConfirmModal(true);
    }, []);

    // üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–ê
    const confirmRemoveParticipant = useCallback((participantId, participantName) => {
        showConfirmation(
            'remove_participant',
            '–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?',
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å "${participantName}" –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
            async () => {
                try {
                    const token = localStorage.getItem('token');
                    await api.delete(`/api/tournaments/${id}/participants/${participantId}`, {
                        headers: { Authorization: `Bearer ${token}` }
                    });
                    
                    setMessage('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞');
                    setTimeout(() => setMessage(''), 3000);
                    setShowConfirmModal(false);
                    reloadTournamentData();
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
                    setTimeout(() => setMessage(''), 3000);
                }
            },
            { participantId, participantName }
        );
    }, [id, showConfirmation, reloadTournamentData]);

    // üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ü–£–°–ö–ê –¢–£–†–ù–ò–†–ê
    const confirmStartTournament = useCallback(() => {
        showConfirmation(
            'start_tournament',
            '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä?',
            '–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ.',
            async () => {
                try {
                    const token = localStorage.getItem('token');
                    await api.post(`/api/tournaments/${id}/start`, {}, {
                        headers: { Authorization: `Bearer ${token}` }
                    });
                    
                    setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–ø—É—â–µ–Ω!');
                    setTimeout(() => setMessage(''), 3000);
                    setShowConfirmModal(false);
                    reloadTournamentData();
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
                    setTimeout(() => setMessage(''), 3000);
                }
            }
        );
    }, [id, showConfirmation, reloadTournamentData]);

    // üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø –¢–£–†–ù–ò–†–ê
    const confirmEndTournament = useCallback(() => {
        showConfirmation(
            'end_tournament',
            '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä?',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä? –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π.',
            async () => {
                try {
                    const token = localStorage.getItem('token');
                    await api.post(`/api/tournaments/${id}/end`, {}, {
                        headers: { Authorization: `Bearer ${token}` }
                    });
                    
                    setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!');
                    setTimeout(() => setMessage(''), 3000);
                    setShowConfirmModal(false);
                    reloadTournamentData();
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
                    setTimeout(() => setMessage(''), 3000);
                }
            }
        );
    }, [id, showConfirmation, reloadTournamentData]);

    // üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ï–¢–ö–ò
    const confirmGenerateBracket = useCallback(() => {
        const participantsCount = tournament?.participants?.length || 0;
        if (participantsCount < 2) {
            setMessage('‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        showConfirmation(
            'generate_bracket',
            '–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É?',
            `–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç–∫–∞ –¥–ª—è ${participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ï—Å–ª–∏ —Å–µ—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞.`,
            async () => {
                try {
                    const token = localStorage.getItem('token');
                    await api.post(`/api/tournaments/${id}/generate-bracket`, {}, {
                        headers: { Authorization: `Bearer ${token}` }
                    });
                    
                    setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!');
                    setTimeout(() => setMessage(''), 3000);
                    setShowConfirmModal(false);
                    reloadTournamentData();
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
                    setTimeout(() => setMessage(''), 3000);
                }
            }
        );
    }, [tournament, id, showConfirmation, reloadTournamentData]);

    // üéØ –§–£–ù–ö–¶–ò–Ø –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò –ú–ê–¢–ß–ï–ô –î–õ–Ø BRACKETRENDERER (–£–õ–£–ß–®–ï–ù–ê –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í)
    const transformMatchesToGames = useCallback((matchesArray, teamsArray = null) => {
        if (!matchesArray || !Array.isArray(matchesArray)) {
            console.warn('transformMatchesToGames: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π', matchesArray);
            return [];
        }

        console.log('üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –º–∞—Ç—á–µ–π –¥–ª—è BracketRenderer:', {
            matchesCount: matchesArray.length,
            teamsCount: teamsArray?.length || 0,
            hasTournamentData: !!tournament
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const teams = teamsArray || mixedTeams || tournament?.teams || [];
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—ã:', teams.length);

        return matchesArray.map((match, index) => {
            // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞
            const participants = [];
            
            // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ ID
            const findTeamById = (teamId) => {
                if (!teamId || !teams.length) return null;
                return teams.find(team => team.id === teamId);
            };
            
            // –£—á–∞—Å—Ç–Ω–∏–∫ 1
            let team1Name = match.team1_name || match.participant1_name;
            let team1Avatar = match.team1_avatar_url;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å team1_id, –∏—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Å–ø–∏—Å–∫–µ
            if (match.team1_id && teams.length > 0) {
                const team1 = findTeamById(match.team1_id);
                if (team1) {
                    team1Name = team1.name;
                    team1Avatar = team1.avatar_url || team1Avatar;
                    console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 1: ${team1.name} (ID: ${match.team1_id})`);
                }
            }
            
            if (match.team1_id || team1Name) {
                participants.push({
                    id: match.team1_id || `team1_${match.id}`,
                    name: team1Name || 'TBD',
                    score: match.score1 !== undefined ? Number(match.score1) : 
                           (match.team1_score !== undefined ? Number(match.team1_score) : 0),
                    isWinner: match.winner_team_id && (match.winner_team_id === match.team1_id),
                    avatarUrl: team1Avatar || null
                });
            }

            // –£—á–∞—Å—Ç–Ω–∏–∫ 2
            let team2Name = match.team2_name || match.participant2_name;
            let team2Avatar = match.team2_avatar_url;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å team2_id, –∏—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Å–ø–∏—Å–∫–µ
            if (match.team2_id && teams.length > 0) {
                const team2 = findTeamById(match.team2_id);
                if (team2) {
                    team2Name = team2.name;
                    team2Avatar = team2.avatar_url || team2Avatar;
                    console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 2: ${team2.name} (ID: ${match.team2_id})`);
                }
            }
            
            if (match.team2_id || team2Name) {
                participants.push({
                    id: match.team2_id || `team2_${match.id}`,
                    name: team2Name || 'TBD',
                    score: match.score2 !== undefined ? Number(match.score2) : 
                           (match.team2_score !== undefined ? Number(match.team2_score) : 0),
                    isWinner: match.winner_team_id && (match.winner_team_id === match.team2_id),
                    avatarUrl: team2Avatar || null
                });
            }

            // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ 2, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã—Ö (–¥–ª—è –±—É–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π)
            while (participants.length < 2) {
                participants.push({
                    id: `empty_${match.id}_${participants.length}`,
                    name: 'TBD',
                    score: 0,
                    isWinner: false,
                    avatarUrl: null
                });
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—É–Ω–¥
            let round = 0;
            if (match.round !== undefined && match.round !== null) {
                round = Number(match.round);
            } else if (match.round_number !== undefined && match.round_number !== null) {
                round = Number(match.round_number);
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ç—á–∞
            let bracket_type = 'winner';
            if (match.bracket_type) {
                bracket_type = match.bracket_type;
            } else if (match.match_type) {
                bracket_type = match.match_type;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞
            let state = 'OPEN';
            if (match.status === 'completed' || match.status === 'DONE' || match.state === 'DONE' || match.winner_team_id) {
                state = 'DONE';
            } else if (match.status === 'in_progress' || match.status === 'PENDING') {
                state = 'PENDING';
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º BracketRenderer
            const transformedGame = {
                id: match.id,
                round: round,
                match_number: match.match_number || match.number || index + 1,
                bracket_type: bracket_type,
                is_third_place_match: Boolean(match.is_third_place_match || match.is_third_place),
                state: state,
                name: match.name || `–ú–∞—Ç—á ${match.match_number || match.number || index + 1}`,
                participants: participants,
                winner_id: match.winner_team_id || match.winner_id || null,
                status: match.status || 'pending',
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                completed_at: match.completed_at || match.updated_at,
                maps_data: match.maps_data || null
            };

            console.log(`üîÑ –ú–∞—Ç—á ${match.id} —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:`, {
                round: transformedGame.round,
                bracket_type: transformedGame.bracket_type,
                state: transformedGame.state,
                participants: transformedGame.participants.map(p => p.name),
                hasWinner: !!transformedGame.winner_id,
                scores: transformedGame.participants.map(p => p.score)
            });

            return transformedGame;
        });
    }, [mixedTeams, tournament?.format]);

    // üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –¢–£–†–ù–ò–†–ê –ò –î–ê–ù–ù–´–•
    const loadTournamentData = useCallback(async () => {
        if (!id) return;

        try {
            setLoading(true);
            setError(null);
            setDataLoadingStates(prev => ({ ...prev, tournament: true }));

            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞:', id);

            // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Ç—É—Ä–Ω–∏—Ä–∞
            const tournamentResponse = await api.get(`/api/tournaments/${id}`);
            const tournamentData = tournamentResponse.data;
            
            console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–≥—Ä—É–∂–µ–Ω:', {
                name: tournamentData.name,
                status: tournamentData.status,
                participantsCount: tournamentData.participants?.length,
                hasMatches: !!tournamentData.matches
            });
            
            setTournament(tournamentData);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç—á–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            let matchesData = [];
            
            // –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –ú–∞—Ç—á–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            if (tournamentData.matches && Array.isArray(tournamentData.matches) && tournamentData.matches.length > 0) {
                matchesData = tournamentData.matches;
                console.log('‚úÖ –ú–∞—Ç—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', matchesData.length);
            } 
            // –ò—Å—Ç–æ—á–Ω–∏–∫ 2: –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π (fallback)
            else {
                try {
                    setDataLoadingStates(prev => ({ ...prev, matches: true }));
                    console.log('üîç –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç—á–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º...');
                    
                    const matchesResponse = await api.get(`/api/tournaments/${id}/matches`);
                    matchesData = matchesResponse.data || [];
                    
                    if (matchesData.length > 0) {
                        console.log('‚úÖ –ú–∞—Ç—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º:', matchesData.length);
                    } else {
                        console.log('‚ÑπÔ∏è –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
                    }
                } catch (matchesError) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º:', matchesError.message);
                    
                    // –ò—Å—Ç–æ—á–Ω–∏–∫ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                    if (tournamentData.bracket_matches) {
                        matchesData = tournamentData.bracket_matches;
                        console.log('‚úÖ –ú–∞—Ç—á–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ bracket_matches:', matchesData.length);
                    } else if (tournamentData.tournament_matches) {
                        matchesData = tournamentData.tournament_matches;
                        console.log('‚úÖ –ú–∞—Ç—á–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ tournament_matches:', matchesData.length);
                    } else {
                        console.log('‚ÑπÔ∏è –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ');
                        matchesData = [];
                    }
                }
            }

            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if (matchesData.length > 0) {
                console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞:', matchesData[0]);
                console.log('üîç –í—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞:', Object.keys(matchesData[0]));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                const completedMatches = matchesData.filter(m => 
                    m.status === 'completed' || m.state === 'DONE' || m.status === 'DONE'
                );
                console.log(`üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${completedMatches.length} –∏–∑ ${matchesData.length}`);
            }

            setMatches(matchesData);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è mix —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ò –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            if (tournamentData.format === 'mix' || tournamentData.participant_type === 'team') {
                let teamsData = [];
                
                // –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –ö–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–æ–≤–æ–µ –ø–æ–ª–µ)
                if (tournamentData.teams && Array.isArray(tournamentData.teams)) {
                    teamsData = tournamentData.teams;
                    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ teams:', teamsData.length);
                }
                // –ò—Å—Ç–æ—á–Ω–∏–∫ 2: –ö–æ–º–∞–Ω–¥—ã –∏–∑ mixed_teams (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                else if (tournamentData.mixed_teams && Array.isArray(tournamentData.mixed_teams)) {
                    teamsData = tournamentData.mixed_teams;
                    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ mixed_teams:', teamsData.length);
                }
                // –ò—Å—Ç–æ—á–Ω–∏–∫ 3: –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥ (fallback)
                else {
                    try {
                        const teamsResponse = await api.get(`/api/tournaments/${id}/teams`);
                        if (teamsResponse.data && Array.isArray(teamsResponse.data)) {
                            teamsData = teamsResponse.data;
                            console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º:', teamsData.length);
                        }
                    } catch (teamsError) {
                        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥:', teamsError.message);
                        teamsData = [];
                    }
                }
                
                setMixedTeams(teamsData);
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if (teamsData.length > 0) {
                    console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã:', teamsData[0]);
                    console.log('üîç –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥:', teamsData.map(team => ({
                        name: team.name,
                        membersCount: team.members?.length || 0,
                        members: team.members?.map(m => m.name || m.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    })));
                }
            }

        } catch (tournamentError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', tournamentError);
            setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞: ${tournamentError.message}`);
        } finally {
            setLoading(false);
            setDataLoadingStates(prev => ({ 
                ...prev, 
                tournament: false, 
                matches: false 
            }));
        }
    }, [id]); // –¢–û–õ–¨–ö–û id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

    // üéØ WEBSOCKET –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
    const setupWebSocket = useCallback(() => {
        if (!user?.id || !tournament?.id) return null;

        const token = localStorage.getItem('token');
        if (!token) return null;

        try {
            console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞', tournament.id);
            
            const socket = io(process.env.REACT_APP_API_URL || 'http://localhost:3000', {
                query: { token },
                transports: ['websocket', 'polling'],
                timeout: 10000,
                forceNew: true
            });

            socket.on('connect', () => {
                console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç—É—Ä–Ω–∏—Ä—É', tournament.id);
                setWsConnected(true);
                
                socket.emit('join-tournament', tournament.id);
                
                socket.emit('join_tournament_chat', tournament.id);
                
                console.log(`üì° –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É ${tournament.id} –∏ —á–∞—Ç—É`);
            });

            socket.on('disconnect', (reason) => {
                console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
                setWsConnected(false);
            });

            socket.on('tournament-update', (data) => {
                console.log('üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ WebSocket:', data);
                setTournament(prev => ({ ...prev, ...data }));
                
                if (data.message) {
                    setMessage(data.message);
                    setTimeout(() => setMessage(''), 3000);
                }
            });

            socket.on('tournament_message', (data) => {
                console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', data);
            });

            socket.on('connect_error', (error) => {
                console.warn('‚ö†Ô∏è WebSocket –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
                setWsConnected(false);
            });

            socket.on('error', (error) => {
                console.warn('‚ö†Ô∏è WebSocket –æ—à–∏–±–∫–∞:', error.message);
                setWsConnected(false);
            });

            return socket;
        } catch (error) {
            console.warn('‚ö†Ô∏è WebSocket –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å:', error.message);
            return null;
        }
    }, [user?.id, tournament?.id]);

    // üéØ –≠–§–§–ï–ö–¢–´
    useEffect(() => {
        loadUser();
    }, []);

    useEffect(() => {
        if (id) {
            loadTournamentData();
        }
    }, [id]); // –£–ë–ò–†–ê–ï–ú loadTournamentData –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∞

    useEffect(() => {
        const socket = setupWebSocket();
        
        return () => {
            if (socket) {
                console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket');
                socket.disconnect();
            }
        };
    }, [setupWebSocket]);

    // üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô (–ë–ï–ó –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô)
    const handleParticipate = useCallback(async () => {
        if (!user || !tournament) return;

        try {
            const token = localStorage.getItem('token');
            await api.post(`/api/tournaments/${id}/participate`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ!');
            setTimeout(() => setMessage(''), 3000);
            reloadTournamentData(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–∏—è:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [user, tournament, id, reloadTournamentData]);

    // üéØ –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø BRACKETRENDERER
    const bracketGames = useMemo(() => {
        if (!matches || matches.length === 0) {
            console.log('üéØ –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏');
            return [];
        }

        console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –º–∞—Ç—á–µ–π:', {
            totalMatches: matches.length,
            teamsAvailable: mixedTeams?.length || 0,
            tournamentFormat: tournament?.format,
            sampleMatch: matches[0] ? {
                id: matches[0].id,
                status: matches[0].status,
                hasTeam1: !!matches[0].team1_id,
                hasTeam2: !!matches[0].team2_id,
                hasScore: matches[0].score1 !== undefined || matches[0].team1_score !== undefined,
                winner: matches[0].winner_team_id || matches[0].winner_id
            } : '–Ω–µ—Ç –º–∞—Ç—á–µ–π'
        });

        // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const transformedGames = transformMatchesToGames(matches, mixedTeams);
        
        console.log('üéØ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è BracketRenderer:', {
            totalGames: transformedGames.length,
            validGames: transformedGames.filter(g => g.participants.length >= 2).length,
            completedGames: transformedGames.filter(g => g.state === 'DONE').length,
            gamesWithResults: transformedGames.filter(g => g.participants.some(p => p.score > 0)).length
        });
        
        return transformedGames;
    }, [matches, mixedTeams, tournament?.format]);

    const handleWithdraw = useCallback(async () => {
        if (!user || !tournament) return;

        try {
            const token = localStorage.getItem('token');
            await api.delete(`/api/tournaments/${id}/participate`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ç—É—Ä–Ω–∏—Ä');
            setTimeout(() => setMessage(''), 3000);
            reloadTournamentData(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [user, tournament, id, reloadTournamentData]);

    const handleGenerateBracket = useCallback(async () => {
        confirmGenerateBracket();
    }, [confirmGenerateBracket]);

    const handleStartTournament = useCallback(async () => {
        confirmStartTournament();
    }, [confirmStartTournament]);

    const handleEndTournament = useCallback(async () => {
        confirmEndTournament();
    }, [confirmEndTournament]);

    const handleClearResults = useCallback(async () => {
        if (!userPermissions.canEdit || !window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!')) return;

        try {
            const token = localStorage.getItem('token');
            await api.post(`/api/tournaments/${id}/clear-results`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!');
            setTimeout(() => setMessage(''), 3000);
            reloadTournamentData(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [userPermissions.canEdit, id, reloadTournamentData]);

    const handleTeamClick = useCallback((teamName) => {
        console.log('–ö–ª–∏–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ:', teamName);
        // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã
    }, []);

    const handleMatchClick = useCallback((matchParam) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –º–∞—Ç—á–∞ - –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ —á–∏—Å–ª–æ –∏–ª–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º id
        const matchId = typeof matchParam === 'object' ? matchParam.id : matchParam;
        
        console.log('üîç –ö–ª–∏–∫ –ø–æ –º–∞—Ç—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:', matchId);
        console.log('üîç –¢–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:', typeof matchParam, ', –∑–Ω–∞—á–µ–Ω–∏–µ:', matchParam);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ 54
        if (tournament?.id === 54 || tournament?.id === '54') {
            console.log('üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–£–†–ù–ò–†–ê 54:');
            console.log('- ID —Ç—É—Ä–Ω–∏—Ä–∞:', tournament.id);
            console.log('- –ò–≥—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', tournament.game);
            console.log('- –í—Å–µ –º–∞—Ç—á–∏:', matches.length, '—à—Ç.');
            console.log('- –ú–∞—Ç—á–∏ —Å maps_data:', matches.filter(m => m.maps_data).length, '—à—Ç.');
            matches.filter(m => m.maps_data).forEach((m, i) => {
                console.log(`  –ú–∞—Ç—á ${i + 1} (ID ${m.id}): maps_data =`, m.maps_data);
            });
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ç—á–∞
            console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê –ú–ê–¢–ß–ê:');
            console.log('- –ò—â–µ–º –º–∞—Ç—á —Å ID:', matchId);
            console.log('- –í—Å–µ ID –º–∞—Ç—á–µ–π –≤ –º–∞—Å—Å–∏–≤–µ:', matches.map(m => m.id));
            console.log('- –¢–∏–ø—ã ID –≤ –º–∞—Å—Å–∏–≤–µ:', matches.map(m => typeof m.id));
            console.log('- –¢–∏–ø –∏—Å–∫–æ–º–æ–≥–æ ID:', typeof matchId);
        }
        
        // –ò—â–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–∞—Å—Å–∏–≤–µ matches
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞–∫ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É, —Ç–∞–∫ –∏ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É ID
        let fullMatchData = matches.find(m => m.id === matchId);
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–∏–ø—ã
        if (!fullMatchData) {
            fullMatchData = matches.find(m => 
                String(m.id) === String(matchId) || 
                Number(m.id) === Number(matchId)
            );
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç –º–∞—Ç—á–∞, –ø—Ä–æ–±—É–µ–º –ø–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—è–º
        if (!fullMatchData && typeof matchParam === 'object') {
            fullMatchData = matches.find(m => 
                m.match_number === matchParam.match_number ||
                m.number === matchParam.match_number ||
                (m.round === matchParam.round && m.match_number === matchParam.match_number)
            );
        }
        
        if (fullMatchData) {
            console.log('‚úÖ –ù–ê–ô–î–ï–ù –ú–ê–¢–ß –í –ú–ê–°–°–ò–í–ï!');
            console.log('- –ù–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç—á ID:', fullMatchData.id);
            console.log('- maps_data –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞:', fullMatchData.maps_data);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ª—é–±–æ–≥–æ –º–∞—Ç—á–∞
            console.log('üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –ú–ê–¢–ß–ê:');
            console.log('- ID –º–∞—Ç—á–∞:', fullMatchData.id);
            console.log('- maps_data:', fullMatchData.maps_data);
            console.log('- –¢–∏–ø maps_data:', typeof fullMatchData.maps_data);
            console.log('- –î–ª–∏–Ω–∞ (–µ—Å–ª–∏ –º–∞—Å—Å–∏–≤):', Array.isArray(fullMatchData.maps_data) ? fullMatchData.maps_data.length : 'N/A');
            console.log('- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ maps_data:', fullMatchData.maps_data);
            
            // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ö–ê–†–¢
            if (Array.isArray(fullMatchData.maps_data)) {
                console.log('üó∫Ô∏è –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–†–¢:');
                fullMatchData.maps_data.forEach((mapData, index) => {
                    console.log(`–ö–∞—Ä—Ç–∞ ${index + 1}:`, mapData);
                    console.log(`- –í—Å–µ –∫–ª—é—á–∏:`, Object.keys(mapData));
                    console.log(`- –ù–∞–∑–≤–∞–Ω–∏–µ (map):`, mapData.map);
                    console.log(`- –ù–∞–∑–≤–∞–Ω–∏–µ (name):`, mapData.name);
                    console.log(`- –°—á–µ—Ç 1 (score1):`, mapData.score1);
                    console.log(`- –°—á–µ—Ç 2 (score2):`, mapData.score2);
                    console.log(`- –°—á–µ—Ç –∫–æ–º–∞–Ω–¥—ã 1 (team1_score):`, mapData.team1_score);
                    console.log(`- –°—á–µ—Ç –∫–æ–º–∞–Ω–¥—ã 2 (team2_score):`, mapData.team2_score);
                    console.log(`- –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å):`, mapData.map && typeof mapData.map === 'object' ? mapData.map : 'N/A');
                });
            }
            
            // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ game –æ–±—ä–µ–∫—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç)
            const enrichedMatch = {
                ...fullMatchData,
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                team1_name: fullMatchData.team1_name || 
                           (typeof matchParam === 'object' && matchParam.participants?.[0] 
                            ? matchParam.participants[0].name : '–ö–æ–º–∞–Ω–¥–∞ 1'),
                team2_name: fullMatchData.team2_name || 
                           (typeof matchParam === 'object' && matchParam.participants?.[1] 
                            ? matchParam.participants[1].name : '–ö–æ–º–∞–Ω–¥–∞ 2')
            };
            
            console.log('üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º selectedMatch:', enrichedMatch);
            setSelectedMatch(enrichedMatch);
        } else {
            console.warn('‚ö†Ô∏è –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–∞—Å—Å–∏–≤–µ matches');
            console.log('- –ü–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Ç—á–∞:', matchParam);
            console.log('- –ò—Å–∫–æ–º—ã–π ID:', matchId);
            console.log('- –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –≤ matches:', matches.map(m => m.id));
            
            // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const fallbackMatch = {
                id: matchId,
                team1_name: typeof matchParam === 'object' && matchParam.participants?.[0]?.name || '–ö–æ–º–∞–Ω–¥–∞ 1',
                team2_name: typeof matchParam === 'object' && matchParam.participants?.[1]?.name || '–ö–æ–º–∞–Ω–¥–∞ 2',
                score1: typeof matchParam === 'object' && matchParam.participants?.[0]?.score || 0,
                score2: typeof matchParam === 'object' && matchParam.participants?.[1]?.score || 0,
                winner_team_id: typeof matchParam === 'object' ? matchParam.winner_id : null,
                maps_data: null // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
            };
            
            console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ:', fallbackMatch);
            setSelectedMatch(fallbackMatch);
        }
    }, [matches, tournament]);

    const handleRemoveParticipant = useCallback(async (participantId) => {
        const participant = tournament.participants?.find(p => p.id === participantId);
        const participantName = participant?.name || participant?.username || '–£—á–∞—Å—Ç–Ω–∏–∫';
        confirmRemoveParticipant(participantId, participantName);
    }, [tournament, confirmRemoveParticipant]);

    const handleTeamsGenerated = useCallback((teams) => {
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', teams);
        setMixedTeams(teams);
        reloadTournamentData(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    }, [reloadTournamentData]);

    const handleTeamsUpdated = useCallback(() => {
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        reloadTournamentData(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    }, [reloadTournamentData]);

    // üéØ –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –í–ö–õ–ê–î–ö–ê–ú
    const tabs = useMemo(() => [
        { id: 'info', label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', icon: '‚ÑπÔ∏è' },
        { id: 'participants', label: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', icon: 'üë•' },
        { id: 'bracket', label: '–°–µ—Ç–∫–∞', icon: 'üèÜ' },
        { id: 'results', label: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', icon: 'üìä' },
        { id: 'admin', label: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', icon: '‚öôÔ∏è', adminOnly: true }
    ], []);

    const visibleTabs = useMemo(() => 
        tabs.filter(tab => !tab.adminOnly || userPermissions.isAdminOrCreator),
        [tabs, userPermissions.isAdminOrCreator]
    );

    // üéØ –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò
    if (loading) {
        return (
            <div className="tournament-details-tournamentdetails tournament-loading">
                <div className="loading-spinner"></div>
                <h2>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä...</h2>
                <div className="loading-details">
                    {dataLoadingStates.tournament && <p>üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞...</p>}
                    {dataLoadingStates.matches && <p>üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π...</p>}
                    {dataLoadingStates.user && <p>üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>}
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="tournament-details-tournamentdetails tournament-error">
                <h2>‚ùå –û—à–∏–±–∫–∞</h2>
                <p>{error}</p>
                <div className="error-actions">
                    <button onClick={() => {
                        setError(null);
                        loadTournamentData();
                    }}>
                        üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                    <Link to="/tournaments">
                        ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
                    </Link>
                </div>
            </div>
        );
    }

    if (!tournament) {
        return (
            <div className="tournament-details-tournamentdetails tournament-not-found">
                <h2>üîç –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
                <p>–¢—É—Ä–Ω–∏—Ä —Å ID {id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.</p>
                <Link to="/tournaments">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤</Link>
            </div>
        );
    }

    return (
        <TournamentErrorBoundary>
            <section className="tournament-details-tournamentdetails">
                {/* üéØ –ó–ê–ì–û–õ–û–í–û–ö –¢–£–†–ù–ò–†–ê */}
                <div className="tournament-header-tournamentdetails">
                    <h2>{tournament.name}</h2>
                    <div className="tournament-meta">
                        <span className={`status-badge ${tournament.status?.toLowerCase()}`}>
                            {tournament.status === 'registration' && 'üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}
                            {tournament.status === 'active' && 'üéÆ –ê–∫—Ç–∏–≤–Ω—ã–π'}
                            {tournament.status === 'in_progress' && '‚öîÔ∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                            {tournament.status === 'completed' && 'üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω'}
                        </span>
                        {wsConnected && (
                            <span className="websocket-indicator connected" title="–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏">
                                üü¢ Online
                            </span>
                        )}
                        <span className="participants-count">
                            üë• {tournament.participants?.length || 0}
                            {tournament.max_participants && ` / ${tournament.max_participants}`}
                        </span>
                    </div>
                </div>

                {/* üéØ –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –í–ö–õ–ê–î–ö–ê–ú */}
                <nav className="tabs-navigation-tournamentdetails">
                    {visibleTabs.map(tab => (
                        <button
                            key={tab.id}
                            className={`tab-button-tournamentdetails ${activeTab === tab.id ? 'active' : ''}`}
                            onClick={() => setActiveTab(tab.id)}
                        >
                            <span className="tab-icon">{tab.icon}</span>
                            <span className="tab-label-tournamentdetails">{tab.label}</span>
                        </button>
                    ))}
                </nav>

                {/* üéØ –°–û–î–ï–†–ñ–ò–ú–û–ï –í–ö–õ–ê–î–û–ö */}
                <div className="tournament-content-tournamentdetails">
                    {/* –í–ö–õ–ê–î–ö–ê: –ò–ù–§–û–†–ú–ê–¶–ò–Ø */}
                    {activeTab === 'info' && (
                        <div className="tab-content-tournamentdetails tab-info-tournamentdetails">
                            <div className="tournament-info-grid-tournamentdetails">
                                <div className="info-main-tournamentdetails">
                                    <div className="info-block-tournamentdetails">
                                        <h3>üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                                        <div className="tournament-meta-info-tournamentdetails">
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üéÆ –ò–≥—Ä–∞:</strong> {tournament.game || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                                            </div>
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üèÜ –§–æ—Ä–º–∞—Ç:</strong> {tournament.format || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                            </div>
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong> {tournament.participants?.length || 0}
                                                {tournament.max_participants && ` –∏–∑ ${tournament.max_participants}`}
                                            </div>
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üìÖ –°–æ–∑–¥–∞–Ω:</strong> {new Date(tournament.created_at).toLocaleString('ru-RU')}
                                            </div>
                                            {tournament.start_date && (
                                                <div className="meta-item-tournamentdetails">
                                                    <strong>üïê –ù–∞—á–∞–ª–æ:</strong> {new Date(tournament.start_date).toLocaleString('ru-RU')}
                                                </div>
                                            )}
                                        </div>
                                    </div>

                                    {tournament.description && (
                                        <div className="info-block-tournamentdetails">
                                            <h3>üìù –û–ø–∏—Å–∞–Ω–∏–µ</h3>
                                            <p className="tournament-description">{tournament.description}</p>
                                        </div>
                                    )}

                                    {tournament.rules && (
                                        <div className="info-block-tournamentdetails">
                                            <h3>üìú –ü—Ä–∞–≤–∏–ª–∞</h3>
                                            <p className="tournament-rules">{tournament.rules}</p>
                                        </div>
                                    )}

                                    {tournament.prize_pool && (
                                        <div className="info-block-tournamentdetails">
                                            <h3>üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥</h3>
                                            <p className="tournament-prize">{tournament.prize_pool}</p>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* –ö–ù–û–ü–ö–ò –£–ß–ê–°–¢–ò–Ø */}
                            {user && tournament.status === 'registration' && (
                                <div className="participation-controls">
                                    {!userPermissions.isParticipating ? (
                                        <button 
                                            className="btn btn-primary participate-btn"
                                            onClick={handleParticipate}
                                        >
                                            üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                                        </button>
                                    ) : (
                                        <button 
                                            className="btn btn-secondary withdraw-btn"
                                            onClick={handleWithdraw}
                                        >
                                            ‚ùå –ü–æ–∫–∏–Ω—É—Ç—å —Ç—É—Ä–Ω–∏—Ä
                                        </button>
                                    )}
                                </div>
                            )}
                        </div>
                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –£–ß–ê–°–¢–ù–ò–ö–ò */}
                    {activeTab === 'participants' && (
                        <div className="tab-content-tournamentdetails">
                            <div className="participants-header">
                                <h3>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ({tournament.participants?.length || 0})</h3>
                                
                                {/* –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò */}
                                {userPermissions.isAdminOrCreator && tournament.status === 'registration' && (
                                    <div className="participant-management-controls">
                                        <button 
                                            className="btn btn-primary add-participant-btn"
                                            onClick={() => modals.openParticipantSearchModal()}
                                            title="–ù–∞–π—Ç–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                                        >
                                            üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                                        </button>
                                        <button 
                                            className="btn btn-secondary add-unregistered-btn"
                                            onClick={() => modals.openAddParticipantModal()}
                                            title="–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                                        >
                                            üë§ –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
                                        </button>
                                    </div>
                                )}
                            </div>
                            
                            {tournament.participants && tournament.participants.length > 0 ? (
                                <>
                                    <div className="original-participants-list-wrapper">
                                        <h3>üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h3>
                                        <div className="original-participants-grid">
                                            {tournament.participants.map((participant, index) => (
                                                <div key={participant.id || index} className="participant-card">
                                                    <div className="participant-avatar">
                                                        {participant.avatar_url ? (
                                                            <img 
                                                                src={ensureHttps(participant.avatar_url)} 
                                                                alt={participant.name || participant.username || '–£—á–∞—Å—Ç–Ω–∏–∫'}
                                                                onError={(e) => {e.target.src = '/default-avatar.png'}}
                                                            />
                                                        ) : (
                                                            <div className="avatar-placeholder">
                                                                {(participant.name || participant.username || '–£').charAt(0).toUpperCase()}
                                                            </div>
                                                        )}
                                                    </div>
                                                    <div className="participant-info">
                                                        {participant.user_id ? (
                                                            <Link 
                                                                to={`/profile/${participant.user_id}`}
                                                                className="participant-name"
                                                            >
                                                                {participant.name || participant.username || '–£—á–∞—Å—Ç–Ω–∏–∫'}
                                                            </Link>
                                                        ) : (
                                                            <span className="participant-name unregistered-participant">
                                                                {participant.name || '–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫'}
                                                                <span className="unregistered-badge">üë§ –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</span>
                                                            </span>
                                                        )}
                                                        {participant.faceit_elo && (
                                                            <div className="participant-elo">
                                                                FACEIT: {participant.faceit_elo}
                                                            </div>
                                                        )}
                                                        {participant.cs2_premier_rank && (
                                                            <div className="participant-rank">
                                                                CS2: {participant.cs2_premier_rank}
                                                            </div>
                                                        )}
                                                        {participant.email && (
                                                            <div className="participant-email">
                                                                üìß {participant.email}
                                                            </div>
                                                        )}
                                                    </div>
                                                    {userPermissions.isAdminOrCreator && tournament.status === 'registration' && (
                                                        <button
                                                            className="remove-participant"
                                                            onClick={() => handleRemoveParticipant(participant.id)}
                                                            title="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                                                        >
                                                            üóëÔ∏è
                                                        </button>
                                                    )}
                                                </div>
                                            ))}
                                        </div>
                                    </div>

                                    {/* MIX –¢–£–†–ù–ò–†–´: –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ö–û–ú–ê–ù–î */}
                                    {tournament.format === 'mix' && mixedTeams && mixedTeams.length > 0 && (
                                        <div className="mixed-teams">
                                            <h3>üé≤ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</h3>
                                            <div className="mixed-teams-grid">
                                                {mixedTeams.map((team, index) => (
                                                    <div key={team.id || index} className="team-card">
                                                        <h4>
                                                            {team.name || `–ö–æ–º–∞–Ω–¥–∞ ${index + 1}`}
                                                            <span className="team-rating">
                                                                Team elo: {calculateTeamAverageRating(team)}
                                                            </span>
                                                        </h4>
                                                        <table className="team-table">
                                                            <thead>
                                                                <tr>
                                                                    <th>–ò–≥—Ä–æ–∫</th>
                                                                    <th>{ratingType === 'faceit' ? 'FACEIT ELO' : 'CS2 Premier'}</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                {team.members?.map((member, memberIndex) => (
                                                                    <tr key={member.user_id || member.participant_id || memberIndex}>
                                                                        <td>
                                                                            {member.user_id ? (
                                                                                <Link to={`/profile/${member.user_id}`}>
                                                                                    {member.name || member.username || '–ò–≥—Ä–æ–∫'}
                                                                                </Link>
                                                                            ) : (
                                                                                <span className="unregistered-member">
                                                                                    {member.name || '–ò–≥—Ä–æ–∫'}
                                                                                </span>
                                                                            )}
                                                                        </td>
                                                                        <td>
                                                                            {ratingType === 'faceit' 
                                                                                ? member.faceit_elo || '‚Äî'
                                                                                : member.cs2_premier_rank || '‚Äî'
                                                                            }
                                                                        </td>
                                                                    </tr>
                                                                ))}
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                    )}
                                </>
                            ) : (
                                <div className="empty-state">
                                    <p>üë§ –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
                                    {user && tournament.status === 'registration' && !userPermissions.isParticipating && (
                                        <button 
                                            className="btn btn-primary"
                                            onClick={handleParticipate}
                                        >
                                            –°—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
                                        </button>
                                    )}
                                    {userPermissions.isAdminOrCreator && tournament.status === 'registration' && (
                                        <div className="empty-state-management">
                                            <p>–ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ:</p>
                                            <div className="empty-state-actions">
                                                <button 
                                                    className="btn btn-primary"
                                                    onClick={() => modals.openParticipantSearchModal()}
                                                >
                                                    üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                                </button>
                                                <button 
                                                    className="btn btn-secondary"
                                                    onClick={() => modals.openAddParticipantModal()}
                                                >
                                                    üë§ –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
                                                </button>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            )}

                            {/* MIX –¢–£–†–ù–ò–†–´: –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î */}
                            {tournament.format === 'mix' && userPermissions.isAdminOrCreator && tournament.status === 'registration' && (
                                <div className="team-generator-section">
                                    <h3>‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</h3>
                                    <div className="rating-type-selector">
                                        <label>–¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏:</label>
                                        <select 
                                            value={ratingType} 
                                            onChange={(e) => setRatingType(e.target.value)}
                                        >
                                            <option value="faceit">FACEIT ELO</option>
                                            <option value="cs2">CS2 Premier</option>
                                        </select>
                                    </div>
                                    <TeamGenerator 
                                        tournament={tournament}
                                        participants={tournament.participants || []}
                                        onTeamsGenerated={handleTeamsGenerated}
                                        onTeamsUpdated={handleTeamsUpdated}
                                        onRemoveParticipant={handleRemoveParticipant}
                                        isAdminOrCreator={userPermissions.isAdminOrCreator}
                                        toast={(msg) => {
                                            setMessage(msg);
                                            setTimeout(() => setMessage(''), 3000);
                                        }}
                                    />
                                </div>
                            )}
                        </div>
                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –°–ï–¢–ö–ê */}
                    {activeTab === 'bracket' && (
                        <div className="tab-content-tournamentdetails">
                            <h3>üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞</h3>
                            
                            {matches && matches.length > 0 ? (
                                <div className="custom-tournament-bracket">
                                    <BracketRenderer 
                                        games={bracketGames}
                                        canEditMatches={userPermissions.canEdit}
                                        selectedMatch={selectedMatch}
                                        setSelectedMatch={setSelectedMatch}
                                        handleTeamClick={handleTeamClick}
                                        format={tournament.format}
                                        onMatchClick={handleMatchClick}
                                    />
                                </div>
                            ) : (
                                <div className="empty-state">
                                    <p>üèÜ –°–µ—Ç–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞</p>
                                    {userPermissions.isAdminOrCreator && tournament.status === 'registration' && (
                                        <button 
                                            className="btn btn-primary generate-bracket-button"
                                            onClick={handleGenerateBracket}
                                        >
                                            ‚ö° –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É
                                        </button>
                                    )}
                                </div>
                            )}
                        </div>
                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –†–ï–ó–£–õ–¨–¢–ê–¢–´ */}
                    {activeTab === 'results' && (
                        <div className="tab-content-tournamentdetails">
                            <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π</h3>
                            
                            {(() => {
                                // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
                                const completedMatches = matches.filter(match => 
                                    match.status === 'completed' || 
                                    match.status === 'DONE' || 
                                    match.state === 'DONE' || 
                                    match.winner_team_id || 
                                    match.winner_id ||
                                    (match.score1 !== undefined && match.score2 !== undefined) ||
                                    (match.team1_score !== undefined && match.team2_score !== undefined)
                                );

                                console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π:', completedMatches.length, '–∏–∑', matches.length);
                                
                                if (completedMatches.length > 0) {
                                    return (
                                        <div className="results-compact-list">
                                            {completedMatches
                                                .sort((a, b) => {
                                                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—É–Ω–¥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é) –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                                                    const roundA = Number(a.round) || 0;
                                                    const roundB = Number(b.round) || 0;
                                                    if (roundB !== roundA) return roundB - roundA;
                                                    
                                                    const timeA = new Date(a.completed_at || a.updated_at || 0);
                                                    const timeB = new Date(b.completed_at || b.updated_at || 0);
                                                    return timeB - timeA;
                                                })
                                                .map(match => {
                                                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—á–µ—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                                                    const score1 = match.score1 !== undefined ? Number(match.score1) : 
                                                                   (match.team1_score !== undefined ? Number(match.team1_score) : 0);
                                                    const score2 = match.score2 !== undefined ? Number(match.score2) : 
                                                                   (match.team2_score !== undefined ? Number(match.team2_score) : 0);
                                                    
                                                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                                                    const winnerId = match.winner_team_id || match.winner_id;
                                                    const team1IsWinner = winnerId === match.team1_id;
                                                    const team2IsWinner = winnerId === match.team2_id;
                                                    
                                                    // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥ (–¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫ –ø–æ ID)
                                                    let team1Name = match.team1_name || match.participant1_name || '–ö–æ–º–∞–Ω–¥–∞ 1';
                                                    let team2Name = match.team2_name || match.participant2_name || '–ö–æ–º–∞–Ω–¥–∞ 2';
                                                    
                                                    // –ï—Å–ª–∏ –µ—Å—Ç—å ID –∫–æ–º–∞–Ω–¥ –∏ –º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥, –∏—â–µ–º –∏–º–µ–Ω–∞
                                                    if (match.team1_id && mixedTeams && mixedTeams.length > 0) {
                                                        const team1 = mixedTeams.find(team => team.id === match.team1_id);
                                                        if (team1) team1Name = team1.name;
                                                    }
                                                    if (match.team2_id && mixedTeams && mixedTeams.length > 0) {
                                                        const team2 = mixedTeams.find(team => team.id === match.team2_id);
                                                        if (team2) team2Name = team2.name;
                                                    }
                                                    
                                                    return (
                                                        <div key={match.id} className="result-compact-item">
                                                            <div className="result-compact-content">
                                                                <div className="result-compact-round">
                                                                    {match.round !== undefined ? (
                                                                        match.round === -1 ? '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π' : `–†–∞—É–Ω–¥ ${match.round}`
                                                                    ) : (
                                                                        `–ú–∞—Ç—á ${match.match_number || match.number || match.id}`
                                                                    )}
                                                                    {match.is_third_place_match && (
                                                                        <span className="third-place-indicator">ü•â –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ</span>
                                                                    )}
                                                                    {match.bracket_type === 'grand_final' && (
                                                                        <span className="grand-final-indicator">üëë –ì—Ä–∞–Ω–¥-—Ñ–∏–Ω–∞–ª</span>
                                                                    )}
                                                                </div>
                                                                <div className="result-compact-match">
                                                                    <button 
                                                                        className={`team-name-btn ${team1IsWinner ? 'winner' : ''}`}
                                                                        onClick={() => handleTeamClick(team1Name)}
                                                                        title={team1IsWinner ? '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å' : ''}
                                                                    >
                                                                        {team1IsWinner && 'üèÜ '}{team1Name}
                                                                    </button>
                                                                    <span className="match-score">
                                                                        <span className={team1IsWinner ? 'winner-score' : ''}>{score1}</span>
                                                                        <span className="score-separator">:</span>
                                                                        <span className={team2IsWinner ? 'winner-score' : ''}>{score2}</span>
                                                                    </span>
                                                                    <button 
                                                                        className={`team-name-btn ${team2IsWinner ? 'winner' : ''}`}
                                                                        onClick={() => handleTeamClick(team2Name)}
                                                                        title={team2IsWinner ? '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å' : ''}
                                                                    >
                                                                        {team2IsWinner && 'üèÜ '}{team2Name}
                                                                    </button>
                                                                </div>
                                                                <div className="result-compact-actions">
                                                                    <button 
                                                                        className="details-btn"
                                                                        onClick={() => handleMatchClick(match)}
                                                                        title="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–∞—Ç—á–∞"
                                                                    >
                                                                        üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                                                    </button>
                                                                    {userPermissions.canEdit && tournament.status !== 'completed' && (
                                                                        <button 
                                                                            className="edit-compact-btn"
                                                                            onClick={() => openMatchResultModal(match)}
                                                                            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                                                                        >
                                                                            ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                                                                        </button>
                                                                    )}
                                                                    {match.completed_at && (
                                                                        <span className="match-completed-time">
                                                                            {new Date(match.completed_at).toLocaleString('ru-RU')}
                                                                        </span>
                                                                    )}
                                                                </div>
                                                            </div>
                                                        </div>
                                                    );
                                                })
                                            }
                                        </div>
                                    );
                                } else {
                                    return (
                                        <div className="empty-state">
                                            <p>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                                            <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–µ–π</p>
                                            {matches && matches.length > 0 && (
                                                <div className="matches-debug-info">
                                                    <details>
                                                        <summary>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π ({matches.length} –≤—Å–µ–≥–æ)</summary>
                                                        <ul>
                                                            {matches.slice(0, 5).map(match => (
                                                                <li key={match.id}>
                                                                    –ú–∞—Ç—á {match.id}: —Å—Ç–∞—Ç—É—Å="{match.status}", state="{match.state}", 
                                                                    winner_id={match.winner_team_id || match.winner_id || '–Ω–µ—Ç'}, 
                                                                    —Å—á–µ—Ç={match.score1 || match.team1_score || 0}:{match.score2 || match.team2_score || 0}
                                                                </li>
                                                            ))}
                                                            {matches.length > 5 && <li>... –∏ –µ—â–µ {matches.length - 5} –º–∞—Ç—á–µ–π</li>}
                                                        </ul>
                                                    </details>
                                                </div>
                                            )}
                                        </div>
                                    );
                                }
                            })()}

                            {/* –ü–û–ë–ï–î–ò–¢–ï–õ–ò */}
                            {tournament.status === 'completed' && tournament.winner_id && (
                                <div className="winners-section">
                                    <h3>üèÜ –ü—Ä–∏–∑—ë—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                                    <div className="winners-podium">
                                        {/* –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ */}
                                        <div className="winner-card place-1">
                                            <div className="medal-icon gold-medal">ü•á</div>
                                            <div className="winner-info">
                                                {tournament.format === 'mix' ? (
                                                    <div className="team-winner">
                                                        <h4>{tournament.winner_name || '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å'}</h4>
                                                        {/* –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã */}
                                                    </div>
                                                ) : (
                                                    <Link to={`/profile/${tournament.winner_id}`} className="winner-name">
                                                        {tournament.winner_name || '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å'}
                                                    </Link>
                                                )}
                                            </div>
                                        </div>

                                        {/* –í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ */}
                                        {tournament.second_place_id && (
                                            <div className="winner-card place-2">
                                                <div className="medal-icon silver-medal">ü•à</div>
                                                <div className="winner-info">
                                                    {tournament.format === 'mix' ? (
                                                        <div className="team-winner">
                                                            <h4>{tournament.second_place_name || '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ'}</h4>
                                                        </div>
                                                    ) : (
                                                        <Link to={`/profile/${tournament.second_place_id}`} className="winner-name">
                                                            {tournament.second_place_name || '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ'}
                                                        </Link>
                                                    )}
                                                </div>
                                            </div>
                                        )}

                                        {/* –¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ */}
                                        {tournament.third_place_id && (
                                            <div className="winner-card place-3">
                                                <div className="medal-icon bronze-medal">ü•â</div>
                                                <div className="winner-info">
                                                    {tournament.format === 'mix' ? (
                                                        <div className="team-winner">
                                                            <h4>{tournament.third_place_name || '–¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ'}</h4>
                                                        </div>
                                                    ) : (
                                                        <Link to={`/profile/${tournament.third_place_id}`} className="winner-name">
                                                            {tournament.third_place_name || '–¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ'}
                                                        </Link>
                                                    )}
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            )}
                        </div>
                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –£–ü–†–ê–í–õ–ï–ù–ò–ï */}
                    {activeTab === 'admin' && userPermissions.isAdminOrCreator && (
                        <div className="tab-content-tournamentdetails">
                            <div className="tournament-management-panel">
                                <h3 className="management-title">‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–º</h3>
                                
                                <div className="management-actions">
                                    {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º */}
                                    <div className="action-group">
                                        <h4 className="action-group-title">üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º</h4>
                                        <div className="action-buttons">
                                            {tournament.status === 'registration' && (
                                                <>
                                                    {(!matches || matches.length === 0) && (
                                                        <button 
                                                            className="management-btn generate-bracket-button"
                                                            onClick={handleGenerateBracket}
                                                            title="–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É"
                                                        >
                                                            <span className="btn-icon">‚ö°</span>
                                                            –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É
                                                        </button>
                                                    )}
                                                    
                                                    {matches && matches.length > 0 && (
                                                        <button 
                                                            className="management-btn start-tournament"
                                                            onClick={handleStartTournament}
                                                            title="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"
                                                        >
                                                            <span className="btn-icon">üöÄ</span>
                                                            –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
                                                        </button>
                                                    )}
                                                </>
                                            )}
                                            
                                            {(tournament.status === 'active' || tournament.status === 'in_progress') && (
                                                <button 
                                                    className="management-btn end-tournament"
                                                    onClick={handleEndTournament}
                                                    title="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"
                                                >
                                                    <span className="btn-icon">üèÅ</span>
                                                    –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
                                                </button>
                                            )}
                                            
                                            {matches && matches.length > 0 && tournament.status !== 'completed' && (
                                                <button 
                                                    className="management-btn regenerate-bracket"
                                                    onClick={handleGenerateBracket}
                                                    title="–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É"
                                                >
                                                    <span className="btn-icon">üîÑ</span>
                                                    –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É
                                                </button>
                                            )}
                                        </div>
                                    </div>

                                    {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
                                    <div className="action-group">
                                        <h4 className="action-group-title">üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏</h4>
                                        <div className="action-buttons">
                                            {matches && matches.some(m => m.status === 'completed') && (
                                                <button 
                                                    className="management-btn clear-results-button"
                                                    onClick={handleClearResults}
                                                    title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
                                                >
                                                    <span className="btn-icon">üóëÔ∏è</span>
                                                    –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                                </button>
                                            )}
                                            
                                            <button 
                                                className="management-btn"
                                                onClick={loadTournamentData}
                                                title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞"
                                            >
                                                <span className="btn-icon">üîÑ</span>
                                                –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                                            </button>
                                        </div>
                                    </div>

                                    {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                                    <div className="action-group">
                                        <h4 className="action-group-title">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞</h4>
                                        <div className="tournament-stats">
                                            <div className="stat-item">
                                                <span className="stat-label">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</span>
                                                <span className="stat-value">{tournament.participants?.length || 0}</span>
                                            </div>
                                            <div className="stat-item">
                                                <span className="stat-label">–ú–∞—Ç—á–µ–π:</span>
                                                <span className="stat-value">{matches?.length || 0}</span>
                                            </div>
                                            <div className="stat-item">
                                                <span className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</span>
                                                <span className="stat-value">
                                                    {matches?.filter(m => m.status === 'completed').length || 0}
                                                </span>
                                            </div>
                                            <div className="stat-item">
                                                <span className="stat-label">–í –ø—Ä–æ—Ü–µ—Å—Å–µ:</span>
                                                <span className="stat-value">
                                                    {matches?.filter(m => m.status === 'in_progress').length || 0}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ */}
                                {tournament.status === 'completed' && (
                                    <div className="tournament-completed-info">
                                        <div className="completed-status">
                                            <span className="btn-icon">üèÜ</span>
                                            <div className="status-text">
                                                <p>–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω</p>
                                                {tournament.winner_name && (
                                                    <p>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <strong>{tournament.winner_name}</strong></p>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>
                    )}
                </div>

                {/* üéØ –°–û–û–ë–©–ï–ù–ò–Ø */}
                {message && (
                    <div className={`message-notification ${message.includes('‚úÖ') ? 'success' : 'error'}`}>
                        {message}
                    </div>
                )}
            </section>
        </TournamentErrorBoundary>
    );
}

export default TournamentDetails;