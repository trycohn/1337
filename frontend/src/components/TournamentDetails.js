/**
 * TournamentDetails v4.2.0 - –°–∏–Ω–µ—Ä–≥–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ 1+3
 * 
 * @version 4.2.0 (–°–∏–Ω–µ—Ä–≥–∏—è AdminPanel + FloatingPanel)
 * @created 2025-01-22
 * @author 1337 Community Development Team
 * @purpose –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
 * @features AdminPanel (–≤–∫–ª–∞–¥–∫–∞) + FloatingActionPanel (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞—è)
 */

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useParams, Link } from 'react-router-dom';
import api from '../utils/api';
import './TournamentDetails.css';
import TeamGenerator from './TeamGenerator';
import BracketRenderer from './BracketRenderer';
import { ensureHttps } from '../utils/userHelpers';
import { useAuth } from '../context/AuthContext';

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π Socket.IO –∫–ª–∏–µ–Ω—Ç –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
import { useSocket } from '../hooks/useSocket';

// –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Ö—É–∫–∏
import TournamentAdminPanel from './tournament/TournamentAdminPanel';
import TournamentFloatingActionPanel from './tournament/TournamentFloatingActionPanel';
import UnifiedParticipantsPanel from './tournament/UnifiedParticipantsPanel';
import AddParticipantModal from './tournament/modals/AddParticipantModal';
import ParticipantSearchModal from './tournament/modals/ParticipantSearchModal';
import MatchResultModal from './tournament/modals/MatchResultModal';
import MatchDetailsModal from './tournament/modals/MatchDetailsModal';  // üîß –î–û–ë–ê–í–õ–ï–ù–û: –ù–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
import TournamentChat from './TournamentChat';  // üîß –î–û–ë–ê–í–õ–ï–ù–û: –ß–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
import useTournamentManagement from '../hooks/tournament/useTournamentManagement';
import useTournamentModals from '../hooks/tournament/useTournamentModals';

// Error Boundary –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
class TournamentErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false, errorInfo: null };
    }

    static getDerivedStateFromError(error) {
        return { hasError: true };
    }

    componentDidCatch(error, errorInfo) {
        console.error('üö® TournamentDetails Critical Error:', error, errorInfo);
        this.setState({ errorInfo });
    }

    render() {
        if (this.state.hasError) {
            return (
                <div className="tournament-critical-error">
                    <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h2>
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
                    <button onClick={() => window.location.reload()}>
                        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    </button>
                </div>
            );
        }
        return this.props.children;
    }
}

function TournamentDetails() {
    const { id } = useParams();
    const { user } = useAuth(); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ AuthContext
    
    // üéØ –û–°–ù–û–í–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø
    const [tournament, setTournament] = useState(null);
    const [matches, setMatches] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [activeTab, setActiveTab] = useState('info');
    
    // üéØ UI –°–û–°–¢–û–Ø–ù–ò–Ø
    const [message, setMessage] = useState('');
    const [wsConnected, setWsConnected] = useState(false);
    const [selectedMatch, setSelectedMatch] = useState(null);
    const [activeMatchTab, setActiveMatchTab] = useState('overview'); // üöÄ –ù–û–í–û–ï –î–õ–Ø –í–ê–†–ò–ê–ù–¢–ê 3
    const [mixedTeams, setMixedTeams] = useState([]);
    const [ratingType, setRatingType] = useState('faceit');
    const [dataLoadingStates, setDataLoadingStates] = useState({
        tournament: false,
        matches: false
    });
    
    // üéØ –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–ê–í–ò–õ –ò –û–ü–ò–°–ê–ù–ò–Ø
    const [isEditingRules, setIsEditingRules] = useState(false);
    const [editedRules, setEditedRules] = useState('');
    const [isEditingDescription, setIsEditingDescription] = useState(false);
    const [editedDescription, setEditedDescription] = useState('');
    const [saveLoading, setSaveLoading] = useState(false);
    
    // üéØ –ù–û–í–´–ï –•–£–ö–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø
    const tournamentManagement = useTournamentManagement(id);
    const modals = useTournamentModals();
    
    // üéØ LEGACY –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
    const [showConfirmModal, setShowConfirmModal] = useState(false);
    const [confirmAction, setConfirmAction] = useState({
        type: '',
        title: '',
        message: '',
        onConfirm: null,
        onCancel: null,
        data: null
    });
    
    // üéØ –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –û–¢–ö–ê–ó–ê –û–¢ –£–ß–ê–°–¢–ò–Ø
    const [showWithdrawConfirmModal, setShowWithdrawConfirmModal] = useState(false);
    
    // üÜï –°–û–°–¢–û–Ø–ù–ò–ï –í–ò–î–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í
    const [displayMode, setDisplayMode] = useState('smart-cards');
    
    // üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò
    const [searchQuery, setSearchQuery] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [isSearching, setIsSearching] = useState(false);
    const [newParticipantData, setNewParticipantData] = useState({
        name: '',
        email: '',
        faceit_elo: '',
        cs2_premier_rank: ''
    });
    
    // üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–¢–ß–ê–ú–ò
    const [editingMatchResult, setEditingMatchResult] = useState(null);
    const [matchResultData, setMatchResultData] = useState({
        score1: 0,
        score2: 0,
        maps_data: []
    });
    
    // üéØ –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –°–†–ï–î–ù–ï–ì–û –†–ï–ô–¢–ò–ù–ì–ê –ö–û–ú–ê–ù–î–´
    const calculateTeamAverageRating = useCallback((team) => {
        if (!team.members || team.members.length === 0) return '‚Äî';
        
        const ratings = team.members.map(member => {
            if (ratingType === 'faceit') {
                return parseInt(member.faceit_elo) || 1000; // –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ FACEIT
            } else {
                return parseInt(member.cs2_premier_rank) || 0; // –ë–∞–∑–æ–≤—ã–π —Ä–∞–Ω–≥ CS2
            }
        }).filter(rating => rating > 0);
        
        if (ratings.length === 0) return '‚Äî';
        
        const average = ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length;
        return Math.round(average);
    }, [ratingType]);

    // üéØ –§–£–ù–ö–¶–ò–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–ò–ó–ï–†–û–í –¢–£–†–ù–ò–†–ê
    const calculateTournamentWinners = useCallback(() => {
        if (!tournament || tournament?.status !== 'completed') {
            return { winner: null, secondPlace: null, thirdPlace: null };
        }

        console.log('üèÜ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–µ—Ä–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞:', tournament.name);

        // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (tournament.winner_id || tournament.winner_name) {
            console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–∑–µ—Ä–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
            
            let winner = null;
            let secondPlace = null;
            let thirdPlace = null;
            
            // –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
            if (tournament.winner_id || tournament.winner_name) {
                winner = {
                    id: tournament.winner_id,
                    name: tournament.winner_name || '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å',
                    type: tournament.format === 'mix' || tournament.participant_type === 'team' ? 'team' : 'solo'
                };
                
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
                if (winner.type === 'team' && mixedTeams && tournament.winner_id) {
                    const winnerTeam = mixedTeams.find(team => team.id === tournament.winner_id) || 
                                      tournament.teams?.find(team => team.id === tournament.winner_id);
                    if (winnerTeam) {
                        winner.members = winnerTeam.members;
                        winner.avatar = winnerTeam.avatar_url;
                    }
                } else if (winner.type === 'solo' && tournament.participants && tournament.winner_id) {
                    const winnerParticipant = tournament.participants.find(p => p.id === tournament.winner_id);
                    if (winnerParticipant) {
                        winner.user_id = winnerParticipant.user_id;
                        winner.avatar = winnerParticipant.avatar_url;
                    }
                }
            }
            
            // –í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ
            if (tournament.second_place_id || tournament.second_place_name) {
                secondPlace = {
                    id: tournament.second_place_id,
                    name: tournament.second_place_name || '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ',
                    type: tournament.format === 'mix' || tournament.participant_type === 'team' ? 'team' : 'solo'
                };
                
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if (secondPlace.type === 'team' && mixedTeams && tournament.second_place_id) {
                    const secondTeam = mixedTeams.find(team => team.id === tournament.second_place_id) || 
                                      tournament.teams?.find(team => team.id === tournament.second_place_id);
                    if (secondTeam) {
                        secondPlace.members = secondTeam.members;
                        secondPlace.avatar = secondTeam.avatar_url;
                    }
                } else if (secondPlace.type === 'solo' && tournament.participants && tournament.second_place_id) {
                    const secondParticipant = tournament.participants.find(p => p.id === tournament.second_place_id);
                    if (secondParticipant) {
                        secondPlace.user_id = secondParticipant.user_id;
                        secondPlace.avatar = secondParticipant.avatar_url;
                    }
                }
            }
            
            // –¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ
            if (tournament.third_place_id || tournament.third_place_name) {
                thirdPlace = {
                    id: tournament.third_place_id,
                    name: tournament.third_place_name || '–¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ',
                    type: tournament.format === 'mix' || tournament.participant_type === 'team' ? 'team' : 'solo'
                };
                
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if (thirdPlace.type === 'team' && mixedTeams && tournament.third_place_id) {
                    const thirdTeam = mixedTeams.find(team => team.id === tournament.third_place_id) || 
                                     tournament.teams?.find(team => team.id === tournament.third_place_id);
                    if (thirdTeam) {
                        thirdPlace.members = thirdTeam.members;
                        thirdPlace.avatar = thirdTeam.avatar_url;
                    }
                } else if (thirdPlace.type === 'solo' && tournament.participants && tournament.third_place_id) {
                    const thirdParticipant = tournament.participants.find(p => p.id === tournament.third_place_id);
                    if (thirdParticipant) {
                        thirdPlace.user_id = thirdParticipant.user_id;
                        thirdPlace.avatar = thirdParticipant.avatar_url;
                    }
                }
            }
            
            return { winner, secondPlace, thirdPlace };
        }

        // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç—á–µ–π (fallback)
        if (!matches || matches.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–∑–µ—Ä–∞—Ö –≤ –ë–î –∏ –Ω–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è');
            return { winner: null, secondPlace: null, thirdPlace: null };
        }

        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç—á–µ–π');
        console.log('üèÜ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π:', matches.length);

        // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á –∑–∞ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ
        const thirdPlaceMatch = matches.find(match => 
            match.is_third_place_match === true || match.is_third_place === true
        );

        // –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á (—Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π —Ä–∞—É–Ω–¥, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Ç—á–µ–º –∑–∞ 3-–µ –º–µ—Å—Ç–æ)
        const completedMatches = matches.filter(match => 
            match.winner_team_id || match.winner_id || 
            match.status === 'completed' || match.status === 'DONE'
        );

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—É–Ω–¥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é) –∏ –Ω–∞—Ö–æ–¥–∏–º —Ñ–∏–Ω–∞–ª
        const sortedMatches = completedMatches
            .filter(match => !match.is_third_place_match && !match.is_third_place)
            .sort((a, b) => (b.round || 0) - (a.round || 0));

        const finalMatch = sortedMatches.find(match => match.winner_team_id || match.winner_id);

        console.log('üèÜ –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á:', finalMatch);
        console.log('üèÜ –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ:', thirdPlaceMatch);

        let winner = null;
        let secondPlace = null;
        let thirdPlace = null;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞
        if (finalMatch) {
            const winnerId = finalMatch.winner_team_id || finalMatch.winner_id;
            const loserId = winnerId === finalMatch.team1_id ? finalMatch.team2_id : finalMatch.team1_id;

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
            if (tournament.format === 'mix' || tournament.participant_type === 'team') {
                const winnerTeam = mixedTeams?.find(team => team.id === winnerId) || 
                                tournament.teams?.find(team => team.id === winnerId);
                if (winnerTeam) {
                    winner = {
                        id: winnerId,
                        name: winnerTeam.name,
                        type: 'team',
                        members: winnerTeam.members,
                        avatar: winnerTeam.avatar_url
                    };
                } else {
                    // Fallback: –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∞–º –≤ –º–∞—Ç—á–µ
                    winner = {
                        id: winnerId,
                        name: winnerId === finalMatch.team1_id ? 
                              finalMatch.team1_name || finalMatch.participant1_name || '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å' :
                              finalMatch.team2_name || finalMatch.participant2_name || '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å',
                        type: 'team',
                        members: null
                    };
                }

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—Ç–µ
                const secondTeam = mixedTeams?.find(team => team.id === loserId) || 
                                 tournament.teams?.find(team => team.id === loserId);
                if (secondTeam) {
                    secondPlace = {
                        id: loserId,
                        name: secondTeam.name,
                        type: 'team',
                        members: secondTeam.members,
                        avatar: secondTeam.avatar_url
                    };
                } else {
                    secondPlace = {
                        id: loserId,
                        name: loserId === finalMatch.team1_id ? 
                              finalMatch.team1_name || finalMatch.participant1_name || '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ' :
                              finalMatch.team2_name || finalMatch.participant2_name || '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ',
                        type: 'team',
                        members: null
                    };
                }
            } else {
                // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
                const winnerParticipant = tournament.participants?.find(p => p.id === winnerId);
                const loserParticipant = tournament.participants?.find(p => p.id === loserId);

                winner = {
                    id: winnerId,
                    name: winnerParticipant?.name || winnerParticipant?.username || '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å',
                    type: 'solo',
                    user_id: winnerParticipant?.user_id,
                    avatar: winnerParticipant?.avatar_url
                };

                secondPlace = {
                    id: loserId,
                    name: loserParticipant?.name || loserParticipant?.username || '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ',
                    type: 'solo',
                    user_id: loserParticipant?.user_id,
                    avatar: loserParticipant?.avatar_url
                };
            }
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ –∏–∑ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
        if (thirdPlaceMatch && (thirdPlaceMatch.winner_team_id || thirdPlaceMatch.winner_id)) {
            const thirdWinnerId = thirdPlaceMatch.winner_team_id || thirdPlaceMatch.winner_id;

            if (tournament.format === 'mix' || tournament.participant_type === 'team') {
                const thirdTeam = mixedTeams?.find(team => team.id === thirdWinnerId) || 
                                tournament.teams?.find(team => team.id === thirdWinnerId);
                if (thirdTeam) {
                    thirdPlace = {
                        id: thirdWinnerId,
                        name: thirdTeam.name,
                        type: 'team',
                        members: thirdTeam.members,
                        avatar: thirdTeam.avatar_url
                    };
                } else {
                    thirdPlace = {
                        id: thirdWinnerId,
                        name: thirdWinnerId === thirdPlaceMatch.team1_id ? 
                              thirdPlaceMatch.team1_name || thirdPlaceMatch.participant1_name || '–¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ' :
                              thirdPlaceMatch.team2_name || thirdPlaceMatch.participant2_name || '–¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ',
                        type: 'team',
                        members: null
                    };
                }
            } else {
                const thirdParticipant = tournament.participants?.find(p => p.id === thirdWinnerId);
                thirdPlace = {
                    id: thirdWinnerId,
                    name: thirdParticipant?.name || thirdParticipant?.username || '–¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ',
                    type: 'solo',
                    user_id: thirdParticipant?.user_id,
                    avatar: thirdParticipant?.avatar_url
                };
            }
        }

        const result = { winner, secondPlace, thirdPlace };
        console.log('üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–∑–µ—Ä–æ–≤:', result);
        return result;
    }, [matches, tournament, mixedTeams]);

    // üéØ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ò–ú–ï–ù –£–ß–ê–°–¢–ù–ò–ö–û–í –ö–û–ú–ê–ù–î (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ TeamGenerator)
    const formatMemberName = useCallback((memberName) => {
        if (!memberName) return { displayName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', isLongName: false, isTruncated: false };
        
        const name = String(memberName);
        const nameLength = name.length;
        
        // –ï—Å–ª–∏ –∏–º—è –¥–ª–∏–Ω–Ω–µ–µ 13 —Å–∏–º–≤–æ–ª–æ–≤ - –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 13
        const displayName = nameLength > 13 ? name.substring(0, 13) + '...' : name;
        
        // –ï—Å–ª–∏ –∏–º—è –¥–ª–∏–Ω–Ω–µ–µ 9 —Å–∏–º–≤–æ–ª–æ–≤ - –ø—Ä–∏–º–µ–Ω—è–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
        const isLongName = nameLength > 9;
        const isTruncated = nameLength > 13;
        
        return {
            displayName,
            isLongName,
            isTruncated,
            originalName: name
        };
    }, []);

    // üéØ –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–†–ò–ó–ï–†–´ –¢–£–†–ù–ò–†–ê
    const tournamentWinners = useMemo(() => {
        return calculateTournamentWinners();
    }, [calculateTournamentWinners]);

    // üéØ –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ü–õ–ê–í–ê–Æ–©–ï–ô –ü–ê–ù–ï–õ–ò (–í–ê–†–ò–ê–ù–¢ 3)
    const hasBracket = useMemo(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç—á–µ–π –∏–ª–∏ –∫–æ–º–∞–Ω–¥ —Å —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π
        return matches && matches.length > 0;
    }, [matches]);

    const hasMatches = useMemo(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç—á–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        return matches && matches.some(match => 
            match.winner_id || match.winner_team_id || 
            match.status === 'completed' || match.status === 'DONE'
        );
    }, [matches]);

    // üéØ –ü–†–ê–í–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    const userPermissions = useMemo(() => {
        if (!user || !tournament) {
            return {
                isParticipating: false,
                isCreator: false,
                isAdminOrCreator: false,
                canEdit: false
            };
        }

        const isCreator = tournament.creator_id === user.id || tournament.created_by === user.id;
        const isParticipating = tournament.participants?.some(
            p => p.user_id === user.id || p.id === user.id
        ) || false;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ö—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const hasAccess = tournamentManagement.checkAccess(tournament);

        return {
            isParticipating,
            isCreator,
            isAdminOrCreator: hasAccess,
            canEdit: hasAccess
        };
    }, [user, tournament, tournamentManagement]);

    // üéØ –ó–ê–ì–†–£–ó–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - —É–±—Ä–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –∏–∑ AuthContext

    // üéØ –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò –ë–ï–ó –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
    // –û–ü–†–ï–î–ï–õ–ï–ù–ê –í–´–®–ï –í–°–ï–• –§–£–ù–ö–¶–ò–ô –ö–û–¢–û–†–´–ï –ï–ï –ò–°–ü–û–õ–¨–ó–£–Æ–¢
    const reloadTournamentData = useCallback(() => {
        if (!id) return;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
        const loadData = async () => {
            try {
                setLoading(true);
                setError(null);
                
                const tournamentResponse = await api.get(`/api/tournaments/${id}`);
                const tournamentData = tournamentResponse.data;
                
                setTournament(tournamentData);
                setMatches(tournamentData.matches || []);
                
                if (tournamentData.format === 'mix' || tournamentData.participant_type === 'team') {
                    setMixedTeams(tournamentData.teams || tournamentData.mixed_teams || []);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
                setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
            } finally {
                setLoading(false);
            }
        };
        
        loadData();
    }, [id]); // –¢–æ–ª—å–∫–æ id –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    // üéØ –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –¢–£–†–ù–ò–†
    const searchUsers = useCallback(async (query) => {
        console.log('üîç –ù–ê–ß–ê–õ–û –ü–û–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
        console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:', {
            query,
            queryType: typeof query,
            queryLength: query?.length,
            tournamentId: tournament?.id,
            userLoggedIn: !!user
        });

        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ query –Ω–∞ undefined/null/–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if (!query || typeof query !== 'string' || query.trim().length < 2) {
            console.log('üîç –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
            modals.updateSearchResults([]);
            return;
        }

        try {
            console.log('üîç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...');
            modals.setSearchLoading(true);
            
            console.log('üîç –í—ã–∑—ã–≤–∞–µ–º tournamentManagement.searchUsers —Å –∑–∞–ø—Ä–æ—Å–æ–º:', query);
            const result = await tournamentManagement.searchUsers(query);
            console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç tournamentManagement.searchUsers:', result);
            
            if (result.success) {
                console.log('üîç –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', result.data);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                const existingParticipantIds = tournament?.participants?.map(p => p.user_id || p.id) || [];
                console.log('üîç ID —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', existingParticipantIds);
                
                const filteredResults = result.data.filter(user => 
                    !existingParticipantIds.includes(user.id)
                );
                console.log('üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', filteredResults);
                
                modals.updateSearchResults(filteredResults);
                console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filteredResults.length);
                
                if (filteredResults.length === 0 && result.data.length > 0) {
                    setMessage('‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ');
                    setTimeout(() => setMessage(''), 3000);
                }
            } else {
                console.error('üîç –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', result.error);
                modals.updateSearchResults([]);
                setMessage(`‚ùå ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('üîç –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                message: error.message,
                stack: error.stack,
                response: error.response?.data
            });
            modals.updateSearchResults([]);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        } finally {
            console.log('üîç –°–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...');
            modals.setSearchLoading(false);
            console.log('üîç –ö–û–ù–ï–¶ –ü–û–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
        }
    }, [tournament, tournamentManagement, modals]);

    // üéØ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–û–ì–û –£–ß–ê–°–¢–ù–ò–ö–ê
    const addRegisteredParticipant = useCallback(async (userId) => {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
        const selectedUser = modals.searchResults.find(user => user.id === userId);
        const userName = selectedUser?.username || `User ${userId}`;
        
        try {
            const result = await tournamentManagement.addRegisteredParticipant(userId, userName);
            
            if (result.success) {
                setMessage('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä!');
                setTimeout(() => setMessage(''), 3000);
                modals.closeParticipantSearchModal();
                reloadTournamentData();
            } else {
                setMessage(`‚ùå ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [tournamentManagement, modals, reloadTournamentData]);

    // üéØ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–û–ì–û –£–ß–ê–°–¢–ù–ò–ö–ê
    const addUnregisteredParticipant = useCallback(async () => {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        console.log('üîç –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', modals.newParticipantData);
        
        if (!modals.newParticipantData.display_name?.trim()) {
            console.warn('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            setMessage('‚ùå –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        try {
            console.log('üîç –í—ã–∑—ã–≤–∞–µ–º tournamentManagement.addGuestParticipant...');
            const result = await tournamentManagement.addGuestParticipant(modals.newParticipantData);
            console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', result);
            
            if (result.success) {
                console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
                setMessage('‚úÖ –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!');
                setTimeout(() => setMessage(''), 3000);
                modals.closeAddParticipantModal();
                reloadTournamentData();
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:', result.error);
                setMessage(`‚ùå ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [tournamentManagement, modals, reloadTournamentData]);

    // üéØ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ú–ê–¢–ß–ê
    const saveMatchResult = useCallback(async (resultData) => {
        // üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê ID –ú–ê–¢–ß–ê
        let matchId = null;
        
        if (typeof modals.selectedMatch === 'number') {
            // –ï—Å–ª–∏ selectedMatch —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, —Ç–æ —ç—Ç–æ –∏ –µ—Å—Ç—å ID –º–∞—Ç—á–∞
            matchId = modals.selectedMatch;
            console.log('‚úÖ [saveMatchResult] selectedMatch —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (ID –º–∞—Ç—á–∞):', matchId);
        } else if (modals.selectedMatch && typeof modals.selectedMatch === 'object') {
            // –ï—Å–ª–∏ selectedMatch —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –∏–∑–≤–ª–µ–∫–∞–µ–º ID
            matchId = modals.selectedMatch.id;
            console.log('‚úÖ [saveMatchResult] selectedMatch —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –∏–∑–≤–ª–µ–∫–∞–µ–º ID:', matchId);
        } else {
            console.error('‚ùå [saveMatchResult] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: selectedMatch –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø!', {
                selectedMatch: modals.selectedMatch,
                type: typeof modals.selectedMatch
            });
        }

        if (!matchId && matchId !== 0) {
            console.error('‚ùå [saveMatchResult] –ù–µ –Ω–∞–π–¥–µ–Ω ID –º–∞—Ç—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', {
                selectedMatch: modals.selectedMatch,
                matchId: matchId,
                selectedMatchType: typeof modals.selectedMatch
            });
            setMessage('‚ùå –û—à–∏–±–∫–∞: ID –º–∞—Ç—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        try {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞:', {
                matchId: matchId,
                resultData: resultData
            });

            const result = await tournamentManagement.saveMatchResult(
                matchId,
                resultData
            );
            
            if (result.success) {
                setMessage('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
                setTimeout(() => setMessage(''), 3000);
                modals.closeMatchResultModal();
                reloadTournamentData();
            } else {
                setMessage(`‚ùå ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [tournamentManagement, modals, reloadTournamentData]);

    // üéØ –û–¢–ö–†–´–¢–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ú–ê–¢–ß–ê
    const openMatchResultModal = useCallback((match) => {
        modals.openMatchResultModal(match);
    }, [modals]);

    // üéØ –§–£–ù–ö–¶–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –î–ï–ô–°–¢–í–ò–ô
    const showConfirmation = useCallback((type, title, message, onConfirm, data = null) => {
        setConfirmAction({
            type,
            title,
            message,
            onConfirm,
            onCancel: () => setShowConfirmModal(false),
            data
        });
        setShowConfirmModal(true);
    }, []);

    // üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–ê
    const confirmRemoveParticipant = useCallback((participantId, participantName) => {
        showConfirmation(
            'remove_participant',
            '–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?',
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å "${participantName}" –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
            async () => {
                try {
                    const token = localStorage.getItem('token');
                    await api.delete(`/api/tournaments/${id}/participants/${participantId}`, {
                        headers: { Authorization: `Bearer ${token}` }
                    });
                    
                    setMessage('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞');
                    setTimeout(() => setMessage(''), 3000);
                    setShowConfirmModal(false);
                    reloadTournamentData();
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
                    setTimeout(() => setMessage(''), 3000);
                }
            },
            { participantId, participantName }
        );
    }, [id, showConfirmation, reloadTournamentData]);

    // üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ü–£–°–ö–ê –¢–£–†–ù–ò–†–ê
    const confirmStartTournament = useCallback(() => {
        showConfirmation(
            'start_tournament',
            '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä?',
            '–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ.',
            async () => {
                try {
                    const token = localStorage.getItem('token');
                    await api.post(`/api/tournaments/${id}/start`, {}, {
                        headers: { Authorization: `Bearer ${token}` }
                    });
                    
                    setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–ø—É—â–µ–Ω!');
                    setTimeout(() => setMessage(''), 3000);
                    setShowConfirmModal(false);
                    reloadTournamentData();
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
                    setTimeout(() => setMessage(''), 3000);
                }
            }
        );
    }, [id, showConfirmation, reloadTournamentData]);

    // üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø –¢–£–†–ù–ò–†–ê
    const confirmEndTournament = useCallback(() => {
        showConfirmation(
            'end_tournament',
            '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä?',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä? –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π.',
            async () => {
                try {
                    const token = localStorage.getItem('token');
                    await api.post(`/api/tournaments/${id}/end`, {}, {
                        headers: { Authorization: `Bearer ${token}` }
                    });
                    
                    setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!');
                    setTimeout(() => setMessage(''), 3000);
                    setShowConfirmModal(false);
                    reloadTournamentData();
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
                    setTimeout(() => setMessage(''), 3000);
                }
            }
        );
    }, [id, showConfirmation, reloadTournamentData]);

    // üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ï–¢–ö–ò
    const confirmGenerateBracket = useCallback(() => {
        const participantsCount = tournament?.participants?.length || 0;
        if (participantsCount < 2) {
            setMessage('‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        showConfirmation(
            'generate_bracket',
            '–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É?',
            `–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç–∫–∞ –¥–ª—è ${participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ï—Å–ª–∏ —Å–µ—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞.`,
            async () => {
                try {
                    const token = localStorage.getItem('token');
                    await api.post(`/api/tournaments/${id}/generate-bracket`, {}, {
                        headers: { Authorization: `Bearer ${token}` }
                    });
                    
                    setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!');
                    setTimeout(() => setMessage(''), 3000);
                    setShowConfirmModal(false);
                    reloadTournamentData();
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`);
                    setTimeout(() => setMessage(''), 3000);
                }
            }
        );
    }, [tournament, id, showConfirmation, reloadTournamentData]);

    // üéØ –§–£–ù–ö–¶–ò–Ø –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò –ú–ê–¢–ß–ï–ô –î–õ–Ø BRACKETRENDERER (–£–õ–£–ß–®–ï–ù–ê –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í)
    const transformMatchesToGames = useCallback((matchesArray, teamsArray = null) => {
        if (!matchesArray || !Array.isArray(matchesArray)) {
            console.warn('transformMatchesToGames: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π', matchesArray);
            return [];
        }

        console.log('üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –º–∞—Ç—á–µ–π –¥–ª—è BracketRenderer:', {
            matchesCount: matchesArray.length,
            teamsCount: teamsArray?.length || 0,
            hasTournamentData: !!tournament
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const teams = teamsArray || mixedTeams || tournament?.teams || [];
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—ã:', teams.length);

        return matchesArray.map((match, index) => {
            // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞
            const participants = [];
            
            // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ ID
            const findTeamById = (teamId) => {
                if (!teamId || !teams.length) return null;
                return teams.find(team => team.id === teamId);
            };
            
            // –£—á–∞—Å—Ç–Ω–∏–∫ 1
            let team1Name = match.team1_name || match.participant1_name;
            let team1Avatar = match.team1_avatar_url;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å team1_id, –∏—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Å–ø–∏—Å–∫–µ
            if (match.team1_id && teams.length > 0) {
                const team1 = findTeamById(match.team1_id);
                if (team1) {
                    team1Name = team1.name;
                    team1Avatar = team1.avatar_url || team1Avatar;
                    console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 1: ${team1.name} (ID: ${match.team1_id})`);
                }
            }
            
            if (match.team1_id || team1Name) {
                participants.push({
                    id: match.team1_id || `team1_${match.id}`,
                    name: team1Name || 'TBD',
                    score: match.score1 !== undefined ? Number(match.score1) : 
                           (match.team1_score !== undefined ? Number(match.team1_score) : 0),
                    isWinner: match.winner_team_id && (match.winner_team_id === match.team1_id),
                    avatarUrl: team1Avatar || null
                });
            }

            // –£—á–∞—Å—Ç–Ω–∏–∫ 2
            let team2Name = match.team2_name || match.participant2_name;
            let team2Avatar = match.team2_avatar_url;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å team2_id, –∏—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Å–ø–∏—Å–∫–µ
            if (match.team2_id && teams.length > 0) {
                const team2 = findTeamById(match.team2_id);
                if (team2) {
                    team2Name = team2.name;
                    team2Avatar = team2.avatar_url || team2Avatar;
                    console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 2: ${team2.name} (ID: ${match.team2_id})`);
                }
            }
            
            if (match.team2_id || team2Name) {
                participants.push({
                    id: match.team2_id || `team2_${match.id}`,
                    name: team2Name || 'TBD',
                    score: match.score2 !== undefined ? Number(match.score2) : 
                           (match.team2_score !== undefined ? Number(match.team2_score) : 0),
                    isWinner: match.winner_team_id && (match.winner_team_id === match.team2_id),
                    avatarUrl: team2Avatar || null
                });
            }

            // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ 2, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã—Ö (–¥–ª—è –±—É–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π)
            while (participants.length < 2) {
                participants.push({
                    id: `empty_${match.id}_${participants.length}`,
                    name: 'TBD',
                    score: 0,
                    isWinner: false,
                    avatarUrl: null
                });
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—É–Ω–¥
            let round = 0;
            if (match.round !== undefined && match.round !== null) {
                round = Number(match.round);
            } else if (match.round_number !== undefined && match.round_number !== null) {
                round = Number(match.round_number);
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ç—á–∞
            let bracket_type = 'winner';
            if (match.bracket_type) {
                bracket_type = match.bracket_type;
            } else if (match.match_type) {
                bracket_type = match.match_type;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞
            let state = 'OPEN';
            if (match.status === 'completed' || match.status === 'DONE' || match.state === 'DONE' || match.winner_team_id) {
                state = 'DONE';
            } else if (match.status === 'in_progress' || match.status === 'PENDING') {
                state = 'PENDING';
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º BracketRenderer
            const transformedGame = {
                id: match.id,
                round: round,
                match_number: match.match_number || match.number || index + 1,
                bracket_type: bracket_type,
                is_third_place_match: Boolean(match.is_third_place_match || match.is_third_place),
                state: state,
                name: match.name || `–ú–∞—Ç—á ${match.match_number || match.number || index + 1}`,
                participants: participants,
                winner_id: match.winner_team_id || match.winner_id || null,
                status: match.status || 'pending',
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                completed_at: match.completed_at || match.updated_at,
                maps_data: match.maps_data || null
            };

            console.log(`üîÑ –ú–∞—Ç—á ${match.id} —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:`, {
                round: transformedGame.round,
                bracket_type: transformedGame.bracket_type,
                state: transformedGame.state,
                participants: transformedGame.participants.map(p => p.name),
                hasWinner: !!transformedGame.winner_id,
                scores: transformedGame.participants.map(p => p.score)
            });

            return transformedGame;
        });
    }, [mixedTeams, tournament?.format]);

    // üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –¢–£–†–ù–ò–†–ê –ò –î–ê–ù–ù–´–•
    const loadTournamentData = useCallback(async () => {
        if (!id) return;

        try {
            setLoading(true);
            setError(null);
            setDataLoadingStates(prev => ({ ...prev, tournament: true }));

            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞:', id);

            // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Ç—É—Ä–Ω–∏—Ä–∞
            const tournamentResponse = await api.get(`/api/tournaments/${id}`);
            const tournamentData = tournamentResponse.data;
            
            console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–≥—Ä—É–∂–µ–Ω:', {
                name: tournamentData.name,
                status: tournamentData.status,
                participantsCount: tournamentData.participants?.length,
                hasMatches: !!tournamentData.matches,
                // üîß –û–¢–õ–ê–î–ö–ê: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
                creatorId: tournamentData.creator_id,
                creatorName: tournamentData.creator_name,
                creatorAvatar: tournamentData.creator_avatar_url,
                createdBy: tournamentData.created_by,
                // üîß –û–¢–õ–ê–î–ö–ê: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
                admins: tournamentData.admins?.length || 0,
                adminsList: tournamentData.admins
            });
            
            setTournament(tournamentData);

            // üîß –î–û–ë–ê–í–õ–ï–ù–û: –ö—ç—à–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä –≤ localStorage –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
            try {
                localStorage.setItem('currentTournament', JSON.stringify(tournamentData));
            } catch (error) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –≤ localStorage:', error);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç—á–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            let matchesData = [];
            
            // –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –ú–∞—Ç—á–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            if (tournamentData.matches && Array.isArray(tournamentData.matches) && tournamentData.matches.length > 0) {
                matchesData = tournamentData.matches;
                console.log('‚úÖ –ú–∞—Ç—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', matchesData.length);
            } 
            // –ò—Å—Ç–æ—á–Ω–∏–∫ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
            else {
                console.log('‚ÑπÔ∏è –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ—Ç–≤–µ—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è...');
                
                if (tournamentData.bracket_matches) {
                    matchesData = tournamentData.bracket_matches;
                    console.log('‚úÖ –ú–∞—Ç—á–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ bracket_matches:', matchesData.length);
                } else if (tournamentData.tournament_matches) {
                    matchesData = tournamentData.tournament_matches;
                    console.log('‚úÖ –ú–∞—Ç—á–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ tournament_matches:', matchesData.length);
                } else {
                    console.log('‚ÑπÔ∏è –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ');
                    matchesData = [];
                }
            }

            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if (matchesData.length > 0) {
                console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞:', matchesData[0]);
                console.log('üîç –í—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞:', Object.keys(matchesData[0]));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                const completedMatches = matchesData.filter(m => 
                    m.status === 'completed' || m.state === 'DONE' || m.status === 'DONE'
                );
                console.log(`üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${completedMatches.length} –∏–∑ ${matchesData.length}`);
            }

            setMatches(matchesData);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è mix —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ò –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            if (tournamentData.format === 'mix' || tournamentData.participant_type === 'team') {
                let teamsData = [];
                
                // –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –ö–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–æ–≤–æ–µ –ø–æ–ª–µ)
                if (tournamentData.teams && Array.isArray(tournamentData.teams)) {
                    teamsData = tournamentData.teams;
                    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ teams:', teamsData.length);
                }
                // –ò—Å—Ç–æ—á–Ω–∏–∫ 2: –ö–æ–º–∞–Ω–¥—ã –∏–∑ mixed_teams (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                else if (tournamentData.mixed_teams && Array.isArray(tournamentData.mixed_teams)) {
                    teamsData = tournamentData.mixed_teams;
                    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ mixed_teams:', teamsData.length);
                }
                // –ò—Å—Ç–æ—á–Ω–∏–∫ 3: –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥ (fallback)
                else {
                    try {
                        const teamsResponse = await api.get(`/api/tournaments/${id}/teams`);
                        if (teamsResponse.data && Array.isArray(teamsResponse.data)) {
                            teamsData = teamsResponse.data;
                            console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º:', teamsData.length);
                        }
                    } catch (teamsError) {
                        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥:', teamsError.message);
                        teamsData = [];
                    }
                }
                
                setMixedTeams(teamsData);
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if (teamsData.length > 0) {
                    console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã:', teamsData[0]);
                    console.log('üîç –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥:', teamsData.map(team => ({
                        name: team.name,
                        membersCount: team.members?.length || 0,
                        members: team.members?.map(m => m.name || m.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    })));
                }
            }

        } catch (tournamentError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', tournamentError);
            setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞: ${tournamentError.message}`);
        } finally {
            setLoading(false);
            setDataLoadingStates(prev => ({ 
                ...prev, 
                tournament: false, 
                matches: false 
            }));
        }
    }, [id]); // –¢–û–õ–¨–ö–û id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

    // üöÄ Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º hook
    const socketHook = useSocket();

    // üéØ –≠–§–§–ï–ö–¢–´ - —É–±—Ä–∞–ª–∏ loadUser(), –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ AuthContext

    useEffect(() => {
        if (id) {
            loadTournamentData();
        }
    }, [id]); // –£–ë–ò–†–ê–ï–ú loadTournamentData –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∞

    // üîß –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        return () => {
            try {
                localStorage.removeItem('currentTournament');
            } catch (error) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            }
        };
    }, []);

    // Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    useEffect(() => {
        if (!user?.id || !tournament?.id) return;

        const token = localStorage.getItem('token');
        if (!token) return;

        console.log('üöÄ [TournamentDetails] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É:', tournament.id);
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Socket.IO
        const connected = socketHook.connect(token);
        
        if (connected) {
            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É
            socketHook.tournament.join(tournament.id);
            setWsConnected(socketHook.connected);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä–∞
            const handleTournamentUpdate = (data) => {
                console.log('üîÑ [TournamentDetails] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:', data);
                setTournament(prev => ({ ...prev, ...data }));
                
                if (data.message) {
                    setMessage(data.message);
                    setTimeout(() => setMessage(''), 3000);
                }
            };
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
            socketHook.on('tournament_updated', handleTournamentUpdate);
            
            console.log('‚úÖ [TournamentDetails] Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç—É—Ä–Ω–∏—Ä—É');
            
            // Cleanup
            return () => {
                console.log('üßπ [TournamentDetails] –ü–æ–∫–∏–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
                if (socketHook.connected) {
                    socketHook.tournament.leave(tournament.id);
                }
                socketHook.off('tournament_updated', handleTournamentUpdate);
            };
        }
    }, [user?.id, tournament?.id]); // –£–±—Ä–∞–ª–∏ socketHook –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    // üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô (–ë–ï–ó –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô)
    const handleParticipate = useCallback(async () => {
        if (!user || !tournament) return;

        try {
            const token = localStorage.getItem('token');
            await api.post(`/api/tournaments/${id}/participate`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ!');
            setTimeout(() => setMessage(''), 3000);
            reloadTournamentData(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–∏—è:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [user, tournament, id, reloadTournamentData]);

    // üéØ –ú–ï–ú–û–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø BRACKETRENDERER
    const bracketGames = useMemo(() => {
        if (!matches || matches.length === 0) {
            console.log('üéØ –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏');
            return [];
        }

        console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –º–∞—Ç—á–µ–π:', {
            totalMatches: matches.length,
            teamsAvailable: mixedTeams?.length || 0,
            tournamentFormat: tournament?.format,
            sampleMatch: matches[0] ? {
                id: matches[0].id,
                status: matches[0].status,
                hasTeam1: !!matches[0].team1_id,
                hasTeam2: !!matches[0].team2_id,
                hasScore: matches[0].score1 !== undefined || matches[0].team1_score !== undefined,
                winner: matches[0].winner_team_id || matches[0].winner_id
            } : '–Ω–µ—Ç –º–∞—Ç—á–µ–π'
        });

        // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const transformedGames = transformMatchesToGames(matches, mixedTeams);
        
        console.log('üéØ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è BracketRenderer:', {
            totalGames: transformedGames.length,
            validGames: transformedGames.filter(g => g.participants.length >= 2).length,
            completedGames: transformedGames.filter(g => g.state === 'DONE').length,
            gamesWithResults: transformedGames.filter(g => g.participants.some(p => p.score > 0)).length
        });
        
        return transformedGames;
    }, [matches, mixedTeams, tournament?.format]);

    const handleWithdraw = useCallback(async () => {
        if (!user || !tournament) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –∏ —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (tournament.status === 'in_progress' && tournament.participant_type === 'solo') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –¥–ª—è –∏–¥—É—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            setShowWithdrawConfirmModal(true);
            return;
        }

        // –î–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ 'active' –≤—ã—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        await performWithdraw();
    }, [user, tournament]);

    // –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —É—á–∞—Å—Ç–∏—è
    const performWithdraw = useCallback(async () => {
        try {
            const token = localStorage.getItem('token');
            await api.post(`/api/tournaments/${tournament.id}/withdraw`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setMessage('‚úÖ –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ');
            await reloadTournamentData();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —É—á–∞—Å—Ç–∏—è:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.error || error.message}`);
        }
    }, [tournament?.id, reloadTournamentData]);

    // –û—Ç–º–µ–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —É—á–∞—Å—Ç–∏—è
    const cancelWithdraw = useCallback(() => {
        setShowWithdrawConfirmModal(false);
    }, []);

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    const confirmWithdrawFromInProgressTournament = useCallback(async () => {
        setShowWithdrawConfirmModal(false);
        await performWithdraw();
    }, [performWithdraw]);

    const handleGenerateBracket = useCallback(async () => {
        confirmGenerateBracket();
    }, [confirmGenerateBracket]);

    const handleStartTournament = useCallback(async () => {
        confirmStartTournament();
    }, [confirmStartTournament]);

    const handleEndTournament = useCallback(async () => {
        confirmEndTournament();
    }, [confirmEndTournament]);

    const handleClearResults = useCallback(async () => {
        if (!userPermissions.canEdit || !window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!')) return;

        try {
            const token = localStorage.getItem('token');
            await api.post(`/api/tournaments/${id}/clear-results`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!');
            setTimeout(() => setMessage(''), 3000);
            reloadTournamentData(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
            setTimeout(() => setMessage(''), 3000);
        }
    }, [userPermissions.canEdit, id, reloadTournamentData]);

    const handleTeamClick = useCallback((teamName) => {
        console.log('–ö–ª–∏–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ:', teamName);
        // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã
    }, []);

    // üé® –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const handleDisplayModeChange = useCallback((newMode) => {
        console.log('üé® –°–º–µ–Ω–∞ –≤–∏–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', newMode);
        setDisplayMode(newMode);
    }, []);

    // üéØ –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ú–ê–¢–ß–ê
    const canEditMatch = useCallback((match) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!userPermissions.canEdit || tournament.status === 'completed') {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
        if (!matches || matches.length === 0) {
            return true; // –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –º–∞—Ç—á–µ–π, –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        }
        
        const winnerId = match.winner_team_id || match.winner_id;
        if (!winnerId) {
            return true; // –ï—Å–ª–∏ –º–∞—Ç—á –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        }
        
        // –ò—â–µ–º –º–∞—Ç—á–∏, –≥–¥–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞ —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç
        const hasSubsequentMatches = matches.some(m => {
            if (m.id === match.id) return false; // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º –º–∞—Ç—á
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –≤ –¥—Ä—É–≥–∏—Ö –º–∞—Ç—á–∞—Ö
            return (m.team1_id === winnerId || m.team2_id === winnerId) &&
                   (m.winner_team_id || m.winner_id || m.status === 'completed' || m.status === 'DONE');
        });
        
        return !hasSubsequentMatches;
    }, [userPermissions.canEdit, tournament?.status, matches]);

    // üéØ –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–û–°–¢–ê–í–ê –ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–£–õ–¢–ò–ü–ê
    const getTeamComposition = useCallback((teamId, teamName) => {
        if (!teamId) return null;
        
        // –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ mixedTeams –∏–ª–∏ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
        let team = null;
        
        if (mixedTeams && mixedTeams.length > 0) {
            team = mixedTeams.find(t => t.id === teamId);
        }
        
        if (!team && tournament?.teams) {
            team = tournament.teams.find(t => t.id === teamId);
        }
        
        if (!team || !team.members || team.members.length === 0) {
            return null;
        }
        
        return {
            name: team.name || teamName,
            members: team.members.map(member => ({
                name: member.name || member.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                rating: member.faceit_elo || member.cs2_premier_rank || null,
                user_id: member.user_id
            }))
        };
    }, [mixedTeams, tournament?.teams]);

    const handleMatchClick = useCallback((matchParam) => {
        const matchId = typeof matchParam === 'object' ? matchParam.id : matchParam;
        
        console.log('üîç –ö–ª–∏–∫ –ø–æ –º–∞—Ç—á—É (–£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞):', {
            matchParam,
            extractedMatchId: matchId,
            matchParamType: typeof matchParam,
            allMatches: matches.length
        });
        
        // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ matchId –Ω–µ undefined
        if (!matchId && matchId !== 0) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ID –º–∞—Ç—á–∞ undefined –∏–ª–∏ null!', {
                matchParam,
                matchParamType: typeof matchParam,
                objectKeys: typeof matchParam === 'object' ? Object.keys(matchParam) : '–Ω–µ –æ–±—ä–µ–∫—Ç'
            });
            setMessage('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞');
            setTimeout(() => setMessage(''), 3000);
            return;
        }
        
        // –ò—â–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
        let fullMatchData = matches.find(m => 
            m.id === matchId || String(m.id) === String(matchId) || Number(m.id) === Number(matchId)
        );
        
        // Fallback –ø–æ–∏—Å–∫ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –ø–æ–ª—è–º
        if (!fullMatchData && typeof matchParam === 'object') {
            fullMatchData = matches.find(m => 
                m.match_number === matchParam.match_number ||
                (m.round === matchParam.round && m.match_number === matchParam.match_number)
            );
        }
        
        // üîß –û–ë–û–ì–ê–©–ê–ï–ú –î–ê–ù–ù–´–ï –ú–ê–¢–ß–ê, –ì–ê–†–ê–ù–¢–ò–†–£–Ø –ù–ê–õ–ò–ß–ò–ï ID
        const enrichedMatch = fullMatchData ? {
            ...fullMatchData,
            // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ ID –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            id: fullMatchData.id || matchId,
            team1_name: fullMatchData.team1_name || 
                       (typeof matchParam === 'object' && matchParam.participants?.[0]?.name) || '–ö–æ–º–∞–Ω–¥–∞ 1',
            team2_name: fullMatchData.team2_name || 
                       (typeof matchParam === 'object' && matchParam.participants?.[1]?.name) || '–ö–æ–º–∞–Ω–¥–∞ 2'
        } : {
            // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: Fallback —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º ID
            id: matchId,
            team1_name: (typeof matchParam === 'object' && matchParam.participants?.[0]?.name) || '–ö–æ–º–∞–Ω–¥–∞ 1',
            team2_name: (typeof matchParam === 'object' && matchParam.participants?.[1]?.name) || '–ö–æ–º–∞–Ω–¥–∞ 2',
            score1: (typeof matchParam === 'object' && matchParam.participants?.[0]?.score) || 0,
            score2: (typeof matchParam === 'object' && matchParam.participants?.[1]?.score) || 0,
            winner_team_id: typeof matchParam === 'object' ? matchParam.winner_id : null,
            maps_data: null,
            // üîß –î–û–ë–ê–í–õ–Ø–ï–ú –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
            team1_id: typeof matchParam === 'object' ? matchParam.participants?.[0]?.id : null,
            team2_id: typeof matchParam === 'object' ? matchParam.participants?.[1]?.id : null
        };
        
        // üîß –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ID
        if (!enrichedMatch.id && enrichedMatch.id !== 0) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: enrichedMatch.id –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É undefined!', {
                enrichedMatch,
                originalMatchId: matchId,
                fullMatchData
            });
            setMessage('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            setTimeout(() => setMessage(''), 5000);
            return;
        }
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', {
            id: enrichedMatch.id,
            team1_name: enrichedMatch.team1_name,
            team2_name: enrichedMatch.team2_name,
            hasResults: !!(enrichedMatch.winner_team_id || enrichedMatch.score1 > 0 || enrichedMatch.score2 > 0)
        });
        
        // üöÄ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê –ú–ê–¢–ß–ê
        const hasResults = enrichedMatch.winner_team_id || 
                          enrichedMatch.winner_id ||
                          (enrichedMatch.score1 > 0 || enrichedMatch.score2 > 0) ||
                          (enrichedMatch.maps_data && enrichedMatch.maps_data.length > 0) ||
                          enrichedMatch.status === 'completed' || 
                          enrichedMatch.status === 'DONE';
        
        const canEdit = canEditMatch(enrichedMatch);
        const hasMapData = enrichedMatch.maps_data && Array.isArray(enrichedMatch.maps_data) && enrichedMatch.maps_data.length > 0;
        const isAdmin = userPermissions.canEdit;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É–ª—Ç–∏–ø–æ–≤
        const team1Composition = getTeamComposition(enrichedMatch.team1_id, enrichedMatch.team1_name);
        const team2Composition = getTeamComposition(enrichedMatch.team2_id, enrichedMatch.team2_name);
        
        console.log('üéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞:', {
            hasResults,
            canEdit,
            hasMapData,
            isAdmin,
            gameSupportsCards: tournament.game === 'Counter-Strike 2' || tournament.game === 'CS2',
            team1Composition: team1Composition?.members?.length || 0,
            team2Composition: team2Composition?.members?.length || 0
        });
        
        // üéØ –°–¶–ï–ù–ê–†–ò–ô 1: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä + –º–∞—Ç—á –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ = –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (isAdmin && !hasResults) {
            console.log('üîß –°—Ü–µ–Ω–∞—Ä–∏–π: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –∫ –¥–∞–Ω–Ω—ã–º –º–∞—Ç—á–∞
            const matchWithCompositions = {
                ...enrichedMatch,
                team1_composition: team1Composition,
                team2_composition: team2Composition
            };
            
            console.log('üîß –ü–µ—Ä–µ–¥–∞–µ–º –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞—Ç—á —Å ID:', matchWithCompositions.id);
            modals.openMatchResultModal(matchWithCompositions);
            return;
        }
        
        // üéØ –°–¶–ï–ù–ê–†–ò–ô 2: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä + –º–∞—Ç—á —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º = –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (isAdmin && hasResults) {
            if (canEdit) {
                console.log('üîß –°—Ü–µ–Ω–∞—Ä–∏–π: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞');
                
                const matchWithCompositions = {
                    ...enrichedMatch,
                    team1_composition: team1Composition,
                    team2_composition: team2Composition
                };
                
                console.log('üîß –ü–µ—Ä–µ–¥–∞–µ–º –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞—Ç—á —Å ID:', matchWithCompositions.id);
                modals.openMatchResultModal(matchWithCompositions);
        } else {
                console.log('üëÅÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –º–∞—Ç—á (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)');
                
                setMessage('‚ÑπÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–∞—Ö');
                setTimeout(() => setMessage(''), 4000);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π)
                const matchWithCompositions = {
                    ...enrichedMatch,
                    team1_composition: team1Composition,
                    team2_composition: team2Composition,
                    editBlocked: true,
                    editBlockReason: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–∞—Ö'
                };
                
                setSelectedMatch(matchWithCompositions);
            }
            return;
        }
        
        // üéØ –°–¶–ï–ù–ê–†–ò–ô 3: –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –º–∞—Ç—á –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ = —Ç—É–ª—Ç–∏–ø
        if (!isAdmin && !hasResults) {
            console.log('‚ÑπÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π: –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ—Å—ã–≥—Ä–∞–Ω–Ω—ã–π –º–∞—Ç—á');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            setMessage('‚è≥ –ú–∞—Ç—á –µ—â–µ –Ω–µ —Å—ã–≥—Ä–∞–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã.');
            setTimeout(() => setMessage(''), 3000);
            return;
        }
        
        // üéØ –°–¶–ï–ù–ê–†–ò–ô 4: –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –º–∞—Ç—á —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º = –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if (!isAdmin && hasResults) {
            console.log('üëÅÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π: –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –º–∞—Ç—á');
            
            const matchWithCompositions = {
                ...enrichedMatch,
                team1_composition: team1Composition,
                team2_composition: team2Composition
            };
            
            setSelectedMatch(matchWithCompositions);
            return;
        }
        
        // üéØ FALLBACK: –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
        console.warn('‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –º–∞—Ç—á:', {
            isAdmin, hasResults, canEdit
        });
        
        setMessage('‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        setTimeout(() => setMessage(''), 3000);
        
    }, [matches, modals, userPermissions, tournament, canEditMatch, getTeamComposition]);

    const handleRemoveParticipant = useCallback(async (participantId) => {
        const participant = tournament.participants?.find(p => p.id === participantId);
        const participantName = participant?.name || participant?.username || '–£—á–∞—Å—Ç–Ω–∏–∫';
        confirmRemoveParticipant(participantId, participantName);
    }, [tournament, confirmRemoveParticipant]);

    const handleTeamsGenerated = useCallback((teams) => {
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ TournamentDetails:', teams);
        
        // üéØ –ü–†–Ø–ú–û –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ö–û–ú–ê–ù–î –ë–ï–ó –ü–û–õ–ù–û–ô –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò
        setMixedTeams(teams);
        
        // üéØ –ù–ï –í–´–ó–´–í–ê–ï–ú reloadTournamentData() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        // –ö–æ–º–∞–Ω–¥—ã —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã—à–µ
        
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞');
    }, []); // –£–±–∏—Ä–∞–µ–º reloadTournamentData –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    const handleTeamsUpdated = useCallback(() => {
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        reloadTournamentData(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    }, [reloadTournamentData]);

    // üéØ –§–£–ù–ö–¶–ò–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–ê–í–ò–õ –ò –û–ü–ò–°–ê–ù–ò–Ø –¢–£–†–ù–ò–†–ê
    const startEditingRules = useCallback(() => {
        setEditedRules(tournament?.rules || '');
        setIsEditingRules(true);
    }, [tournament?.rules]);

    const cancelEditingRules = useCallback(() => {
        setIsEditingRules(false);
        setEditedRules('');
    }, []);

    const saveRules = useCallback(async () => {
        if (!userPermissions.isAdminOrCreator) {
            setMessage('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        try {
            setSaveLoading(true);
            const token = localStorage.getItem('token');
            
            await api.patch(`/api/tournaments/${id}`, {
                rules: editedRules
            }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
            setTimeout(() => setMessage(''), 3000);
            setIsEditingRules(false);
            reloadTournamentData();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.response?.data?.message || error.message}`);
            setTimeout(() => setMessage(''), 3000);
        } finally {
            setSaveLoading(false);
        }
    }, [editedRules, userPermissions.isAdminOrCreator, id, reloadTournamentData]);

    const startEditingDescription = useCallback(() => {
        setEditedDescription(tournament?.description || '');
        setIsEditingDescription(true);
    }, [tournament?.description]);

    const cancelEditingDescription = useCallback(() => {
        setIsEditingDescription(false);
        setEditedDescription('');
    }, []);

    const saveDescription = useCallback(async () => {
        if (!userPermissions.isAdminOrCreator) {
            setMessage('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        try {
            setSaveLoading(true);
            const token = localStorage.getItem('token');
            
            await api.patch(`/api/tournaments/${id}`, {
                description: editedDescription
            }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessage('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
            setTimeout(() => setMessage(''), 3000);
            setIsEditingDescription(false);
            reloadTournamentData();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.response?.data?.message || error.message}`);
            setTimeout(() => setMessage(''), 3000);
        } finally {
            setSaveLoading(false);
        }
    }, [editedDescription, userPermissions.isAdminOrCreator, id, reloadTournamentData]);

    // üéØ –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –í–ö–õ–ê–î–ö–ê–ú
    const tabs = useMemo(() => [
        { id: 'info', label: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', icon: '‚ÑπÔ∏è' },
        { id: 'participants', label: '–£—á–∞—Å—Ç–Ω–∏–∫–∏', icon: 'üë•' },
        { id: 'bracket', label: '–°–µ—Ç–∫–∞', icon: 'üèÜ' },
        { id: 'results', label: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', icon: 'üìä' },
        { id: 'admin', label: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', icon: '‚öôÔ∏è', adminOnly: true }
    ], []);

    const visibleTabs = useMemo(() => 
        tabs.filter(tab => !tab.adminOnly || userPermissions.isAdminOrCreator),
        [tabs, userPermissions.isAdminOrCreator]
    );

    // üéØ –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–õ–ê–í–ê–Æ–©–ï–ô –ü–ê–ù–ï–õ–ò (–°–ò–ù–ï–†–ì–ò–Ø 1+3)
    const shouldShowFloatingPanel = useMemo(() => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–≤–∞—é—â—É—é –ø–∞–Ω–µ–ª—å –µ—Å–ª–∏:
        // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞
        // 2. –ù–ï –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å AdminPanel)
        // 3. –¢—É—Ä–Ω–∏—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return (
            userPermissions.isAdminOrCreator && 
            activeTab !== 'admin' && 
            tournament
        );
    }, [userPermissions.isAdminOrCreator, activeTab, tournament]);

    // üéØ –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò
    if (loading) {
        return (
            <div className="tournament-details-tournamentdetails tournament-loading">
                <div className="loading-spinner"></div>
                <h2>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä...</h2>
                <div className="loading-details">
                    {dataLoadingStates.tournament && <p>üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞...</p>}
                    {dataLoadingStates.matches && <p>üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π...</p>}
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="tournament-details-tournamentdetails tournament-error">
                <h2>‚ùå –û—à–∏–±–∫–∞</h2>
                <p>{error}</p>
                <div className="error-actions">
                    <button onClick={() => {
                        setError(null);
                        loadTournamentData();
                    }}>
                        üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                    <Link to="/tournaments">
                        ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
                    </Link>
                </div>
            </div>
        );
    }

    if (!tournament) {
        return (
            <div className="tournament-details-tournamentdetails tournament-not-found">
                <h2>üîç –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
                <p>–¢—É—Ä–Ω–∏—Ä —Å ID {id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.</p>
                <Link to="/tournaments">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤</Link>
            </div>
        );
    }

    // üÜï –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ê–ù–î –î–õ–Ø –ü–õ–ê–í–ê–Æ–©–ï–ô –ü–ê–ù–ï–õ–ò
    const handleReformTeamsFromPanel = async () => {
        // –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
        if (!tournament || tournament.format !== 'mix' || tournament.status !== 'active') {
            setMessage('‚ùå –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞');
            setTimeout(() => setMessage(''), 3000);
            return;
        }
        
        if (matches && matches.length > 0) {
            setMessage('‚ùå –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞');
            setTimeout(() => setMessage(''), 3000);
            return;
        }
        
        if (!mixedTeams || mixedTeams.length === 0) {
            setMessage('‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π teamSize –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
        const teamSizeFromTournament = parseInt(tournament.team_size) || 5;
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ ratingType –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å localStorage –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const currentRatingType = localStorage.getItem(`tournament_${tournament.id}_ratingType`) || ratingType || 'faceit';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const confirmed = window.confirm(
            `üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã?\n\n` +
            `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n` +
            `–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n` +
            `‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${tournament.participants?.length || 0}\n` +
            `‚Ä¢ –ö–æ–º–∞–Ω–¥: ${mixedTeams.length}\n` +
            `‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: ${mixedTeams.reduce((total, team) => total + (team.members?.length || 0), 0)}\n` +
            `‚Ä¢ –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ${teamSizeFromTournament} –∏–≥—Ä–æ–∫–æ–≤\n` +
            `‚Ä¢ –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞: ${currentRatingType === 'faceit' ? 'FACEIT ELO' : 'CS2 Premier Rank'}\n\n` +
            `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`
        );

        if (!confirmed) return;

        try {
            setMessage('üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...');
            
            console.log('üîÑ [FloatingPanel] –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã:', {
                teamSize: teamSizeFromTournament,
                ratingType: currentRatingType,
                tournamentId: tournament.id,
                participantsCount: tournament.participants?.length,
                currentTeamsCount: mixedTeams.length
            });
            
            const token = localStorage.getItem('token');
            const response = await api.post(`/api/tournaments/${tournament.id}/mix-generate-teams`, {
                ratingType: currentRatingType, // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞
                teamSize: teamSizeFromTournament // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
            }, {
                headers: { Authorization: `Bearer ${token}` }
            });

            console.log('‚úÖ [FloatingPanel] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);

            if (response.data && response.data.teams) {
                console.log('‚úÖ [FloatingPanel] –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã:', response.data.teams);
                console.log('üìä [FloatingPanel] –°–≤–æ–¥–∫–∞:', response.data.summary);
                
                // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–∞–ø—Ä—è–º—É—é
                setMixedTeams(response.data.teams);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏
                const summary = response.data.summary;
                let successMessage = '‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!';
                if (summary) {
                    successMessage += `\nüìä –°–æ–∑–¥–∞–Ω–æ ${summary.teamsCreated} –∫–æ–º–∞–Ω–¥ –∏–∑ ${summary.participantsInTeams} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
                    if (summary.participantsNotInTeams > 0) {
                        successMessage += `\nüîç ${summary.participantsNotInTeams} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å –≤–Ω–µ –∫–æ–º–∞–Ω–¥`;
                    }
                    successMessage += `\nüéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–π—Ç–∏–Ω–≥: ${summary.ratingType === 'faceit' ? 'FACEIT ELO' : 'CS2 Premier Rank'}`;
                    successMessage += `\nüë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥: ${teamSizeFromTournament} –∏–≥—Ä–æ–∫–æ–≤`;
                }
                
                setMessage(successMessage);
                setTimeout(() => setMessage(''), 5000);
                
                // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ä—ã–º –∫–æ–º–∞–Ω–¥–∞–º
                // setTimeout(() => {
                //     console.log('üîÑ [FloatingPanel] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞...');
                //     reloadTournamentData();
                // }, 500);
                
            } else {
                console.error('‚ùå [FloatingPanel] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥');
            }
        } catch (error) {
            console.error('‚ùå [FloatingPanel] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥:', error);
            console.error('‚ùå [FloatingPanel] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                message: error.message,
                status: error.response?.status,
                statusText: error.response?.statusText,
                responseData: error.response?.data,
                stack: error.stack
            });
            
            // üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
            let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã';
            
            if (error.response?.data?.error) {
                errorMessage = error.response.data.error;
            } else if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (errorMessage.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')) {
                errorMessage += '\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã.';
            }
            
            setMessage(`‚ùå ${errorMessage}`);
            setTimeout(() => setMessage(''), 5000);
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
            // setTimeout(() => {
            //     console.log('üîÑ [FloatingPanel] –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
            //     reloadTournamentData();
            // }, 1000);
        }
    };

    // üÜï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ö—É–∫–∏)
    const searchUsersForAdmin = async (query) => {
        console.log('üîç –ù–ê–ß–ê–õ–û –ü–û–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø');
        
        if (!query || query.length < 2) {
            console.log('üîç –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, —Å–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            modals.updateAdminSearchResults([]);
            return;
        }

        try {
            console.log('üîç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...');
            modals.setAdminSearchLoading(true);
            
            console.log('üîç –í—ã–∑—ã–≤–∞–µ–º tournamentManagement.searchUsers —Å –∑–∞–ø—Ä–æ—Å–æ–º:', query);
            const result = await tournamentManagement.searchUsers(query);
            console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç tournamentManagement.searchUsers:', result);
            
            if (result.success) {
                console.log('üîç –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', result.data);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
                const existingAdminIds = tournament?.admins?.map(admin => admin.user_id || admin.id) || [];
                const creatorId = tournament?.creator_id || tournament?.created_by;
                const allAdminIds = [...existingAdminIds, creatorId].filter(Boolean);
                
                console.log('üîç ID —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', allAdminIds);
                
                const filteredResults = result.data.filter(user => 
                    !allAdminIds.includes(user.id)
                );
                console.log('üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', filteredResults);
                
                modals.updateAdminSearchResults(filteredResults);
                console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filteredResults.length);
                
                if (filteredResults.length === 0 && result.data.length > 0) {
                    setMessage('‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏');
                    setTimeout(() => setMessage(''), 3000);
                }
            } else {
                console.warn('üîç –ü–æ–∏—Å–∫ –Ω–µ—É—Å–ø–µ—à–µ–Ω:', result.message);
                modals.updateAdminSearchResults([]);
                setMessage(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('üîç –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            modals.updateAdminSearchResults([]);
            setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            setTimeout(() => setMessage(''), 3000);
        } finally {
            modals.setAdminSearchLoading(false);
        }
    };

    const inviteAdmin = async (userId) => {
        try {
            console.log('üëë –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', userId);
            
            // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            const result = await tournamentManagement.inviteAdmin(userId);
            
            if (result.success) {
                setMessage('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ.');
                setTimeout(() => setMessage(''), 5000);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞
                modals.closeAdminSearchModal();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                // loadTournamentData(); // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            } else {
                setMessage(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
            setTimeout(() => setMessage(''), 3000);
        }
    };

    // üÜï –£–î–ê–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    const removeAdmin = async (userId) => {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        const confirmDelete = window.confirm(
            '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?\\n\\n' +
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–µ—Ç –≤—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.'
        );
        
        if (!confirmDelete) {
            return;
        }

        try {
            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', userId);
            
            // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const result = await tournamentManagement.removeAdmin(userId);
            
            if (result.success) {
                setMessage('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
                setTimeout(() => setMessage(''), 3000);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                reloadTournamentData();
            } else {
                setMessage(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            setTimeout(() => setMessage(''), 3000);
        }
    };

    // üéØ –†–ï–ù–î–ï–†–ò–ù–ì –ö–û–ú–ü–û–ù–ï–ù–¢–ê
    return (
        <TournamentErrorBoundary>
            <section className="tournament-details-tournamentdetails">
                {/* üéØ –ó–ê–ì–û–õ–û–í–û–ö –¢–£–†–ù–ò–†–ê */}
                <div className="tournament-header-tournamentdetails">
                    <h2>{tournament.name}</h2>
                    
                    {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º */}
                <nav className="tabs-navigation-tournamentdetails">
                    {visibleTabs.map(tab => (
                        <button
                            key={tab.id}
                            className={`tab-button-tournamentdetails ${activeTab === tab.id ? 'active' : ''}`}
                            onClick={() => setActiveTab(tab.id)}
                        >
                                <span className="tab-label-tournamentdetails">
                                    {tab.icon} {tab.label}
                                </span>
                        </button>
                    ))}
                </nav>
                </div>

                {/* üéØ –ö–û–ù–¢–ï–ù–¢ –í–ö–õ–ê–î–û–ö */}
                <div className="tournament-content-tournamentdetails">
                    {/* –í–ö–õ–ê–î–ö–ê: –ò–ù–§–û–†–ú–ê–¶–ò–Ø */}
                    {activeTab === 'info' && (
                        <div className="tab-content-tournamentdetails tab-info-tournamentdetails">
                            <div className="tournament-info-horizontal-grid">
                                {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                                <div className="info-main-tournamentdetails">
                                    <div className="info-block-tournamentdetails main-info-block">
                                        <h3>üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                                        <div className="tournament-meta-info-tournamentdetails">
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üìä –°—Ç–∞—Ç—É—Å</strong>
                                                <span>{tournament.status === 'active' ? '–û—Ç–∫—Ä—ã—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' : 
                                                      tournament.status === 'in_progress' ? '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' :
                                                      tournament.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–°–æ–∑–¥–∞–Ω'}</span>
                                            </div>
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üéÆ –ò–≥—Ä–∞</strong>
                                                <span>{tournament.game || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                                            </div>
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</strong>
                                                <span>{new Date(tournament.created_at).toLocaleDateString('ru-RU')}</span>
                                            </div>
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üèÜ –§–æ—Ä–º–∞—Ç</strong>
                                                <span>{tournament.format === 'single_elimination' ? '–ù–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ' : 
                                                      tournament.format === 'double_elimination' ? '–î–≤–æ–π–Ω–æ–µ –≤—ã–±—ã–≤–∞–Ω–∏–µ' : 
                                                      tournament.format === 'mix' ? '–ú–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä' : tournament.format}</span>
                                            </div>
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏</strong>
                                                <span>{tournament.participants?.length || 0} —á–µ–ª–æ–≤–µ–∫</span>
                                            </div>
                                            <div className="meta-item-tournamentdetails">
                                                <strong>üïò –û–±–Ω–æ–≤–ª–µ–Ω</strong>
                                                <span>{new Date(tournament.updated_at).toLocaleDateString('ru-RU')}</span>
                                            </div>
                                        </div>
                                        
                                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ */}
                                        <div className="creator-info-tournamentdetails">
                                            <strong>üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞</strong>
                                            <div className="creator-display">
                                                <div className="creator-avatar">
                                                    {tournament.creator_avatar_url ? (
                                                        <img 
                                                            src={ensureHttps(tournament.creator_avatar_url)} 
                                                            alt={tournament.creator_name || tournament.creator_username || '–°–æ–∑–¥–∞—Ç–µ–ª—å'}
                                                            onError={(e) => {e.target.src = '/default-avatar.png'}}
                                                        />
                                                    ) : (
                                                        <div className="avatar-placeholder">
                                                            {(tournament.creator_name || tournament.creator_username || '–£').charAt(0).toUpperCase()}
                                                        </div>
                                                    )}
                                                </div>
                                                {tournament.creator_id ? (
                                                    <Link to={`/profile/${tournament.creator_id}`} className="creator-link">
                                                        <span className="creator-name">
                                                            {tournament.creator_name || tournament.creator_username || `ID: ${tournament.creator_id}`}
                                                        </span>
                                                    </Link>
                                                ) : (
                                                    <span className="creator-name">
                                                        {tournament.creator_name || tournament.creator_username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å'}
                                                    </span>
                                                )}
                                            </div>
                                        </div>

                                        {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ */}
                                        <div className="tournament-description-section description-block">
                                        <div className="block-header">
                                                <h4>üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</h4>
                                                {userPermissions.isAdminOrCreator && !isEditingDescription && (
                                                <div className="edit-controls">
                                                        <button 
                                                            className="edit-btn"
                                                            onClick={startEditingDescription}
                                                            disabled={saveLoading}
                                                        >
                                                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                                        </button>
                                                    </div>
                                                )}
                                            </div>
                                            
                                            {isEditingDescription ? (
                                                <div className="edit-field">
                                                    <textarea
                                                        className="description-editor"
                                                        value={editedDescription}
                                                        onChange={(e) => setEditedDescription(e.target.value)}
                                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞..."
                                                        rows={5}
                                                        disabled={saveLoading}
                                                    />
                                                        <div className="edit-actions">
                                                            <button 
                                                                className="save-btn"
                                                                onClick={saveDescription}
                                                                disabled={saveLoading}
                                                            >
                                                            {saveLoading ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                                                            </button>
                                                            <button 
                                                                className="cancel-btn"
                                                                onClick={cancelEditingDescription}
                                                                disabled={saveLoading}
                                                            >
                                                                ‚ùå –û—Ç–º–µ–Ω–∞
                                                            </button>
                                                        </div>
                                                </div>
                                            ) : (
                                                <div className="tournament-description-content">
                                                    {tournament.description && tournament.description.trim() ? (
                                                        <div className="tournament-description">
                                                            {tournament.description.split('\n').map((line, index) => (
                                                                <p key={index}>{line}</p>
                                                            ))}
                                                        </div>
                                                    ) : (
                                                        <div className={userPermissions.isAdminOrCreator ? "no-description" : "no-description-readonly"}>
                                                            {userPermissions.isAdminOrCreator ? 
                                                                "üìù –ù–∞–∂–º–∏—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞" :
                                                                "üìù –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
                                                            }
                                                </div>
                                            )}
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </div>

                                {/* –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ */}
                                <div className="info-rules-tournamentdetails">
                                    <div className="info-block-tournamentdetails rules-block">
                                        <div className="block-header">
                                            <h3>üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                                            {userPermissions.isAdminOrCreator && !isEditingRules && (
                                                <div className="edit-controls">
                                                        <button 
                                                            className="edit-btn"
                                                            onClick={startEditingRules}
                                                        disabled={saveLoading}
                                                        >
                                                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                                        </button>
                                                </div>
                                            )}
                                        </div>
                                        
                                        <div className="tournament-rules-content">
                                            {isEditingRules ? (
                                                <div className="edit-field">
                                                    <textarea
                                                        className="rules-editor"
                                                        value={editedRules}
                                                        onChange={(e) => setEditedRules(e.target.value)}
                                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞..."
                                                        rows={10}
                                                        disabled={saveLoading}
                                                    />
                                                        <div className="edit-actions">
                                                            <button 
                                                                className="save-btn"
                                                                onClick={saveRules}
                                                                disabled={saveLoading}
                                                            >
                                                            {saveLoading ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                                                            </button>
                                                            <button 
                                                                className="cancel-btn"
                                                                onClick={cancelEditingRules}
                                                                disabled={saveLoading}
                                                            >
                                                                ‚ùå –û—Ç–º–µ–Ω–∞
                                                            </button>
                                                        </div>
                                                </div>
                                            ) : (
                                                        <div className="rules-text">
                                                    {tournament.rules && tournament.rules.trim() ? (
                                                        tournament.rules.split('\n').map((rule, index) => (
                                                            <div key={index} className="rule-item">
                                                                {rule}
                                                        </div>
                                                        ))
                                                    ) : (
                                                        userPermissions.isAdminOrCreator ? (
                                                            <div 
                                                                className="no-rules-admin"
                                                                onClick={startEditingRules}
                                                            >
                                                                üìú –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞
                                                            </div>
                                                        ) : (
                                                            <div className="default-rules">
                                                                    <div className="rule-section">
                                                                    <h4>üéÆ –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞</h4>
                                                                    <ul>
                                                                        <li>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–±–ª—é–¥–∞—Ç—å —á–µ—Å—Ç–Ω—É—é –∏–≥—Ä—É</li>
                                                                        <li>–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∏—Ç–æ–≤ –∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º</li>
                                                                        <li>–£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</li>
                                                                        </ul>
                                                                    </div>
                                                                    <div className="rule-section">
                                                                    <h4>‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h4>
                                                                        <ul>
                                                                        <li>–ú–∞—Ç—á–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–µ</li>
                                                                        <li>–í —Å–ª—É—á–∞–µ –Ω–µ—è–≤–∫–∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ</li>
                                                                        <li>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ - 15 –º–∏–Ω—É—Ç</li>
                                                                        </ul>
                                                                    </div>
                                                                    <div className="rule-section">
                                                                    <h4>üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h4>
                                                                    <ul>
                                                                        <li>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –≤–≤–æ–¥—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</li>
                                                                        <li>–°–ø–æ—Ä–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Ä–µ—à–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π</li>
                                                                        <li>–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—é</li>
                                                                        </ul>
                                                                    </div>
                                                            </div>
                                                        )
                                                            )}
                                                        </div>
                                                    )}
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* –°–µ–∫—Ü–∏—è —Å —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π */}
                            <div className="info-bracket-section">
                                <div className="info-bracket-header">
                                    <h3>üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞</h3>
                                    <div className="bracket-stats">
                                        <span className={`bracket-stat ${tournament.status === 'in_progress' ? 'status-active' : 
                                                        tournament.status === 'completed' ? 'status-completed' : 'status-pending'}`}>
                                            {tournament.status === 'active' && '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞'}
                                            {tournament.status === 'in_progress' && 'üî• –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                                            {tournament.status === 'completed' && '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω'}
                                        </span>
                                        {matches && matches.length > 0 && (
                                            <span className="bracket-stat">
                                                üìä {matches.length} –º–∞—Ç—á–µ–π
                                            </span>
                                        )}
                                        {tournament.participants && tournament.participants.length > 0 && (
                                            <span className="bracket-stat">
                                                üë• {tournament.participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                            </span>
                                            )}
                                        </div>
                                    </div>
                                
                                {/* –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
                                {bracketGames && bracketGames.length > 0 ? (
                                    <BracketRenderer
                                        games={bracketGames}
                                        canEditMatches={userPermissions.canEdit && tournament.status !== 'completed'}
                                        selectedMatch={selectedMatch}
                                        setSelectedMatch={setSelectedMatch}
                                        handleTeamClick={handleTeamClick}
                                        format={tournament.format}
                                        onMatchClick={handleMatchClick}
                                    />
                                ) : (
                                    <div className="empty-bracket-content">
                                        <div className="empty-bracket-icon">üèÜ</div>
                                        <h4>–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞</h4>
                                        <p>–°–µ—Ç–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –µ—ë –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</p>
                                        {userPermissions.isAdminOrCreator && tournament.participants?.length >= 2 && (
                                            <button 
                                                className="generate-bracket-button"
                                                onClick={handleGenerateBracket}
                                            >
                                                üéØ –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É
                                            </button>
                                        )}
                                </div>
                                )}
                            </div>

                            {/* –°–µ–∫—Ü–∏—è —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
                            {tournament.status === 'completed' && tournamentWinners.winner && (
                                <div className="info-winners-section">
                                    {/* –¢–æ—Ç –∂–µ –∫–æ–¥ —á—Ç–æ –∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, –Ω–æ –≤ –¥—Ä—É–≥–æ–º —Å—Ç–∏–ª–µ */}
                                    <div className="winners-section">
                                        <h3>üèÜ –ü—Ä–∏–∑—ë—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                                        <div className="winners-podium">
                                            {/* –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ */}
                                            <div className="winner-card place-1">
                                                <div className="medal-icon gold-medal">ü•á</div>
                                                <div className="winner-info">
                                                    {tournamentWinners.winner.type === 'team' ? (
                                                        <div className="team-winner">
                                                            <h4>{tournamentWinners.winner.name}</h4>
                                                            {tournamentWinners.winner.members && Array.isArray(tournamentWinners.winner.members) && tournamentWinners.winner.members.length > 0 && (
                                                                <div className="team-members">
                                                                    <h5>üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è:</h5>
                                                                    <ul>
                                                                        {tournamentWinners.winner.members.map((member, idx) => {
                                                                            const memberName = member.name || member.username;
                                                                            const formattedName = formatMemberName(memberName);
                                                                            
                                                                            return (
                                                                                <li key={idx} className="team-member winner-member">
                                                                                    <span className="member-medal">ü•á</span>
                                                                                    {member.user_id ? (
                                                                                        <Link 
                                                                                            to={`/profile/${member.user_id}`} 
                                                                                            className={`member-name winner-name-link ${formattedName.isLongName ? 'member-name-long' : ''}`}
                                                                                            title={formattedName.isTruncated ? formattedName.originalName : undefined}
                                                                                        >
                                                                                            {formattedName.displayName}
                                                                                        </Link>
                                                                                    ) : (
                                                                                        <span 
                                                                                            className={`member-name winner-name-text ${formattedName.isLongName ? 'member-name-long' : ''}`}
                                                                                            title={formattedName.isTruncated ? formattedName.originalName : undefined}
                                                                                        >
                                                                                            {formattedName.displayName}
                                                                                        </span>
                                                                                    )}
                                                                                    {member.faceit_elo && (
                                                                                        <span className="member-elo">({member.faceit_elo} ELO)</span>
                                                                                    )}
                                                                                </li>
                                                                            );
                                                                        })}
                                                                    </ul>
                                                                </div>
                                                            )}
                                                        </div>
                                                    ) : (
                                                        <div className="solo-winner">
                                                            <Link to={`/profile/${tournamentWinners.winner.user_id}`} className="winner-name">
                                                                <span className="winner-medal">ü•á</span>
                                                                {tournamentWinners.winner.name}
                                                            </Link>
                                                        </div>
                                                    )}
                                                </div>
                                            </div>

                                            {/* –í—Ç–æ—Ä–æ–µ –∏ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ */}
                                            {tournamentWinners.secondPlace && (
                                                <div className="winner-card place-2">
                                                    <div className="medal-icon silver-medal">ü•à</div>
                                                    <div className="winner-info">
                                                        {tournamentWinners.secondPlace.type === 'team' ? (
                                                            <div className="team-winner">
                                                                <h4>{tournamentWinners.secondPlace.name}</h4>
                                                            </div>
                                                        ) : (
                                                            <div className="solo-winner">
                                                                <Link to={`/profile/${tournamentWinners.secondPlace.user_id}`} className="winner-name">
                                                                    <span className="winner-medal">ü•à</span>
                                                                    {tournamentWinners.secondPlace.name}
                                                                </Link>
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            )}

                                            {tournamentWinners.thirdPlace && (
                                                <div className="winner-card place-3">
                                                    <div className="medal-icon bronze-medal">ü•â</div>
                                                    <div className="winner-info">
                                                        {tournamentWinners.thirdPlace.type === 'team' ? (
                                                            <div className="team-winner">
                                                                <h4>{tournamentWinners.thirdPlace.name}</h4>
                                                            </div>
                                                        ) : (
                                                            <div className="solo-winner">
                                                                <Link to={`/profile/${tournamentWinners.thirdPlace.user_id}`} className="winner-name">
                                                                    <span className="winner-medal">ü•â</span>
                                                                    {tournamentWinners.thirdPlace.name}
                                                                </Link>
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </div>
                                            )}
                                        </div>
                                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –£–ß–ê–°–¢–ù–ò–ö–ò */}
                    {activeTab === 'participants' && (
                        <div className="tab-content-tournamentdetails">
                            {/* –£–ß–ê–°–¢–ò–ï –í –¢–£–†–ù–ò–†–ï */}
                            {!userPermissions.isParticipating && tournament.status === 'active' && user && (
                                <div className="participation-controls">
                                    <button onClick={handleParticipate} className="participate-btn">
                                        ‚ûï –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                                                </button>
                                    </div>
                                )}

                            {userPermissions.isParticipating && tournament.status === 'active' && (
                                <div className="participation-controls">
                                    <button onClick={handleWithdraw} className="withdraw-btn">
                                        ‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è
                                                </button>
                                </div>
                            )}

                            {tournament.status === 'in_progress' && (
                                <div className="bracket-generated-notice">
                                    <p className="info-message">
                                        ‚ÑπÔ∏è –¢—É—Ä–Ω–∏—Ä —É–∂–µ –Ω–∞—á–∞–ª—Å—è - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                                            </p>
                                        </div>
                                    )}

                            {tournament.status === 'completed' && (
                                <div className="bracket-generated-notice">
                                    <p className="info-message">
                                        ‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
                                    </p>
                        </div>
                    )}

                            {/* –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –£–ß–ê–°–¢–ù–ò–ö–û–í */}
                            <UnifiedParticipantsPanel
                                tournament={tournament}
                                participants={tournament.participants || []}
                                mixedTeams={mixedTeams}
                                isCreatorOrAdmin={userPermissions.isAdminOrCreator}
                                onAddParticipant={() => modals.openParticipantSearchModal()}
                                onAddUnregistered={() => modals.openAddParticipantModal()}
                                onRemoveParticipant={handleRemoveParticipant}
                                onGenerateTeams={handleTeamsGenerated}
                                onUpdateTeams={handleTeamsUpdated}
                                ratingType={ratingType}
                                setRatingType={setRatingType}
                                displayMode={displayMode}
                                showDisplayModeSelector={true}
                                onDisplayModeChange={handleDisplayModeChange}
                            />
                        </div>
                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –°–ï–¢–ö–ê */}
                    {activeTab === 'bracket' && (
                        <div className="tab-content-tournamentdetails">
                            <div className="bracket-tab-header">
                                <h3>üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞</h3>
                                {userPermissions.isAdminOrCreator && (
                                    <div className="bracket-controls">
                                        {(!matches || matches.length === 0) && tournament.participants?.length >= 2 && (
                                            <button 
                                                className="generate-bracket-button"
                                                onClick={handleGenerateBracket}
                                            >
                                                üéØ –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É
                                            </button>
                                        )}
                                        {matches && matches.length > 0 && tournament.status === 'active' && (
                                            <button 
                                                className="regenerate-bracket-button"
                                                onClick={confirmGenerateBracket}
                                            >
                                                üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É
                                            </button>
                                        )}
                                    </div>
                                )}
                            </div>
                            
                            {bracketGames && bracketGames.length > 0 ? (
                                    <BracketRenderer 
                                        games={bracketGames}
                                    canEditMatches={userPermissions.canEdit && tournament.status !== 'completed'}
                                        selectedMatch={selectedMatch}
                                        setSelectedMatch={setSelectedMatch}
                                        handleTeamClick={handleTeamClick}
                                        format={tournament.format}
                                        onMatchClick={handleMatchClick}
                                    />
                            ) : (
                                <div className="empty-state">
                                    <p>üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞</p>
                                    {userPermissions.isAdminOrCreator ? (
                                        tournament.participants?.length >= 2 ? (
                                            <>
                                                <p className="text-muted">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏</p>
                                        <button 
                                                    className="generate-bracket-button"
                                            onClick={handleGenerateBracket}
                                        >
                                                    üéØ –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É
                                        </button>
                                            </>
                                        ) : (
                                        <p className="text-muted">–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞</p>
                                        )
                                    ) : (
                                        <p className="text-muted">–°–µ—Ç–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</p>
                                    )}
                                </div>
                            )}
                        </div>
                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –†–ï–ó–£–õ–¨–¢–ê–¢–´ */}
                    {activeTab === 'results' && (
                        <div className="tab-content-tournamentdetails">
                            {(() => {
                                // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                                if (!matches || !Array.isArray(matches) || matches.length === 0) {
                                    return (
                                        <div className="empty-state">
                                            <p>üèÜ –¢—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω</p>
                                            <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π</p>
                                        </div>
                                    );
                                }
                                
                                const completedMatches = matches.filter(match => 
                                    match && (
                                        match.status === 'completed' || match.status === 'DONE' || match.state === 'DONE' ||
                                        match.winner_team_id || match.winner_id ||
                                        (match.score1 !== undefined && match.score2 !== undefined && (match.score1 > 0 || match.score2 > 0))
                                    )
                                );

                                if (completedMatches.length === 0) {
                                    return (
                                        <div className="empty-state">
                                            <p>üèÜ –¢—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω</p>
                                            <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π</p>
                                        </div>
                                    );
                                }
                                                                        
                                return (
                                    <div className="matches-list">
                                        {completedMatches.map(match => (
                                            <div key={match.id} className="match-item">
                                                <div className="match-info">
                                                    <div className="team-info">
                                                        <div className="team-name">{match.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1'}</div>
                                                        <div className="team-name">{match.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'}</div>
                                                    </div>
                                                    <div className="score-info">
                                                        <div className="score">{match.score1 || 0}</div>
                                                        <div className="score">{match.score2 || 0}</div>
                                                    </div>
                                                </div>
                                                <div className="match-actions">
                                                    <button onClick={() => handleMatchClick(match)}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                );
                            })()}
                        </div>
                    )}

                    {/* –í–ö–õ–ê–î–ö–ê: –£–ü–†–ê–í–õ–ï–ù–ò–ï */}
                    {activeTab === 'admin' && userPermissions.isAdminOrCreator && (
                        <div className="tab-content-tournamentdetails">
                            <TournamentAdminPanel
                                tournament={tournament}
                                participants={tournament.participants || []}
                                matches={matches}
                                isCreatorOrAdmin={userPermissions.isAdminOrCreator}
                                isLoading={false}
                                onStartTournament={handleStartTournament}
                                onEndTournament={handleEndTournament}
                                onRegenerateBracket={confirmGenerateBracket}
                                onShowAddParticipantModal={() => modals.openAddParticipantModal()}
                                onShowParticipantSearchModal={() => modals.openParticipantSearchModal()}
                                onRemoveParticipant={handleRemoveParticipant}
                                onEditMatchResult={openMatchResultModal}
                                onGenerateBracket={confirmGenerateBracket}
                                onClearResults={handleClearResults}
                                // üÜï –ù–û–í–´–ï –ü–†–û–ü–°–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò
                                onInviteAdmin={inviteAdmin}
                                onRemoveAdmin={removeAdmin}
                                onShowAdminSearchModal={() => modals.openAdminSearchModal()}
                            />
                        </div>
                    )}
                </div>

                {/* üéØ –ß–ê–¢ –¢–£–†–ù–ò–†–ê */}
                {user && userPermissions.isParticipating && (
                    <TournamentChat
                        tournamentId={id}
                        user={user}
                        isVisible={true}
                    />
                )}

                {/* üéØ –°–û–û–ë–©–ï–ù–ò–Ø */}
                {message && (
                    <div className={`message-notification ${message.includes('‚úÖ') ? 'success' : 'error'}`}>
                        {message}
                    </div>
                )}

                {/* üéØ –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –û–¢–ö–ê–ó–ê –û–¢ –£–ß–ê–°–¢–ò–Ø */}
                {showWithdrawConfirmModal && (
                    <div className="modal">
                        <div className="modal-content withdraw-confirm-modal">
                            <div className="modal-header">
                                <h3>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –æ—Ç —É—á–∞—Å—Ç–∏—è</h3>
                                <button 
                                    className="close-btn"
                                    onClick={cancelWithdraw}
                                    title="–ó–∞–∫—Ä—ã—Ç—å"
                                >
                                    ‚úï
                                </button>
                            </div>
                            
                            <div className="modal-body">
                                <div className="warning-content">
                                    <div className="warning-icon">‚ö†Ô∏è</div>
                                    <div className="warning-text">
                                        <h4>–¢—É—Ä–Ω–∏—Ä —É–∂–µ –Ω–∞—á–∞–ª—Å—è!</h4>
                                        <p className="warning-message">
                                            <strong>–ü—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤–∞–º –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–∞—Ç—á–∞—Ö.</strong>
                                        </p>
                                        <p className="warning-details">
                                            –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ:
                                        </p>
                                        <ul className="warning-list">
                                            <li>–í—Å–µ –≤–∞—à–∏ –Ω–µ—Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–≥—Ä–∞–Ω—ã</li>
                                            <li>–°–æ–ø–µ—Ä–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–±–µ–¥—ã</li>
                                            <li>–≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É –∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ö–æ–¥ —Ç—É—Ä–Ω–∏—Ä–∞</li>
                                            <li>–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å</li>
                                        </ul>
                                        <p className="confirmation-question">
                                            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Ç—É—Ä–Ω–∏—Ä?
                                        </p>
                                    </div>
                                </div>
                            </div>
                            
                            <div className="modal-footer">
                                <button 
                                    className="btn-cancel"
                                    onClick={cancelWithdraw}
                                >
                                    ‚ùå –û—Å—Ç–∞—Ç—å—Å—è
                                </button>
                                <button 
                                    className="btn-confirm-withdraw"
                                    onClick={confirmWithdrawFromInProgressTournament}
                                >
                                    ‚ö†Ô∏è –ü–æ–∫–∏–Ω—É—Ç—å —Ç—É—Ä–Ω–∏—Ä
                                </button>
                            </div>
                        </div>
                    </div>
                )}

                {/* üéØ –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–û–ò–°–ö–ê –£–ß–ê–°–¢–ù–ò–ö–û–í */}
                <ParticipantSearchModal
                    isOpen={modals.showParticipantSearchModal}
                    onClose={modals.closeParticipantSearchModal}
                    searchQuery={modals.searchQuery}
                    setSearchQuery={modals.setSearchQuery}
                    searchResults={modals.searchResults}
                    isSearching={modals.isSearching}
                    onSearchUsers={searchUsers}
                    onAddParticipant={addRegisteredParticipant}
                    existingParticipants={tournament.participants || []}
                />

                {/* üéØ –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–ï–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–û–ì–û –£–ß–ê–°–¢–ù–ò–ö–ê */}
                <AddParticipantModal
                    isOpen={modals.showAddParticipantModal}
                    onClose={modals.closeAddParticipantModal}
                    newParticipantData={modals.newParticipantData}
                    setNewParticipantData={modals.setNewParticipantData}
                    onSubmit={addUnregisteredParticipant}
                    isLoading={tournamentManagement.isLoading}
                />

                {/* üéØ –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ú–ê–¢–ß–ê */}
                <MatchResultModal
                    isOpen={modals.showMatchResultModal}
                    onClose={modals.closeMatchResultModal}
                    selectedMatch={modals.selectedMatch}  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ match, —Ç–µ–ø–µ—Ä—å selectedMatch
                    tournament={tournament}              // üîß –î–û–ë–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä—ã
                    matchResultData={modals.matchResultData}
                    setMatchResultData={modals.setMatchResultData}
                    onSave={saveMatchResult}
                    isLoading={tournamentManagement.isLoading}
                />

                {/* üéØ LEGACY –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø */}
                {showConfirmModal && (
                    <div className="modal">
                        <div className="modal-content">
                            <div className="modal-header">
                                <h3>{confirmAction.title}</h3>
                                <button 
                                    className="close-btn"
                                    onClick={confirmAction.onCancel}
                                    title="–ó–∞–∫—Ä—ã—Ç—å"
                                >
                                    ‚úï
                                </button>
                            </div>
                            
                            <div className="modal-body">
                                <p>{confirmAction.message}</p>
                            </div>
                            
                            <div className="modal-footer">
                                <button 
                                    className="btn-cancel"
                                    onClick={confirmAction.onCancel}
                                >
                                    –û—Ç–º–µ–Ω–∞
                                </button>
                                <button 
                                    className="btn-confirm"
                                    onClick={confirmAction.onConfirm}
                                >
                                    ‚úì –î–∞
                                </button>
                            </div>
                        </div>
                    </div>
                )}

                {/* üéØ –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–†–û–°–ú–û–¢–†–ê –î–ï–¢–ê–õ–ï–ô –ú–ê–¢–ß–ê */}
                <MatchDetailsModal
                    isOpen={!!selectedMatch}
                    onClose={() => setSelectedMatch(null)}
                    selectedMatch={selectedMatch}
                    canEdit={userPermissions.canEdit && tournament?.status !== 'completed'}
                    onEdit={(match) => {
                        setSelectedMatch(null);
                        modals.openMatchResultModal(match);
                    }}
                    tournament={tournament}
                />

                {/* üéØ –ü–õ–ê–í–ê–Æ–©–ê–Ø –ü–ê–ù–ï–õ–¨ –î–ï–ô–°–¢–í–ò–ô (–°–ò–ù–ï–†–ì–ò–Ø 1+3) */}
                {shouldShowFloatingPanel && (
                    <TournamentFloatingActionPanel
                        tournament={tournament}
                        user={user}
                        hasAccess={userPermissions.isAdminOrCreator}
                        onStartTournament={handleStartTournament}
                        onEndTournament={handleEndTournament}
                        onGenerateBracket={handleGenerateBracket}
                        onRegenerateBracket={confirmGenerateBracket}
                        onClearResults={handleClearResults}
                        hasMatches={hasMatches}
                        hasBracket={hasBracket}
                        // üÜï –ü—Ä–æ–ø—Å—ã –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –≤–∏–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        displayMode={displayMode}
                        onDisplayModeChange={handleDisplayModeChange}
                        showDisplayModeSelector={activeTab === 'participants'}
                        // üÜï –ü—Ä–æ–ø—Å—ã –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
                        mixedTeams={mixedTeams}
                        onReformTeams={handleReformTeamsFromPanel}
                    />
                )}

                {/* üÜï –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–û–ò–°–ö–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í */}
                <ParticipantSearchModal
                    isOpen={modals.showAdminSearchModal}
                    onClose={modals.closeAdminSearchModal}
                    searchQuery={modals.adminSearchQuery}
                    setSearchQuery={modals.setAdminSearchQuery}
                    searchResults={modals.adminSearchResults}
                    isSearching={modals.isAdminSearching}
                    onSearchUsers={searchUsersForAdmin}
                    onInviteAdmin={inviteAdmin}
                    existingAdmins={tournament?.admins || []}
                    mode="admin"
                />
            </section>
        </TournamentErrorBoundary>
    );
}

export default TournamentDetails;