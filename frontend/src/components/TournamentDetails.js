// üîß QA REFACTORED VERSION - TournamentDetails.js v4.2.5
// ‚úÖ –†–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—É—Ä–Ω–∏—Ä–∞ —Å —Ç–∞–±–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
// ‚úÖ –£–±—Ä–∞–Ω –±–ª–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
// ‚úÖ –°–∫—Ä—ã—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫

// –ò–º–ø–æ—Ä—Ç—ã React –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ
import React, { useState, useEffect, useCallback, useMemo, useRef, Suspense } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { io } from 'socket.io-client';
import api from '../utils/api';

// –£—Ç–∏–ª–∏—Ç—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã
import { ensureHttps } from '../utils/userHelpers';
import { 
    isCounterStrike2, 
    gameHasMaps, 
    getGameMaps as getGameMapsHelper, 
    getDefaultMap as getDefaultMapHelper, 
    getDefaultCS2Maps 
} from '../utils/mapHelpers';

// üÜï –ò–ú–ü–û–†–¢ –•–£–ö–ê –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–£–†–ù–ò–†–û–ú
import useTournamentManagement from '../hooks/tournament/useTournamentManagement';

// –°—Ç–∏–ª–∏
import './TournamentDetails.css';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import TeamGenerator from './TeamGenerator';
import TournamentInfoSection from './TournamentInfoSection';
import MatchResultModal from './tournament/modals/MatchResultModal';
import MatchDetailsModal from './tournament/modals/MatchDetailsModal';
import ParticipantSearchModal from './tournament/modals/ParticipantSearchModal';
import AddParticipantModal from './tournament/modals/AddParticipantModal';
import TournamentFloatingActionPanel from './tournament/TournamentFloatingActionPanel';
import UnifiedParticipantsPanel from './tournament/UnifiedParticipantsPanel';
import TournamentAdminPanel from './tournament/TournamentAdminPanel';

// –ö–æ–Ω—Ç–µ–∫—Å—Ç
import { useUser } from '../context/UserContext';

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ BracketRenderer —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const LazyBracketRenderer = React.lazy(() => 
    import('./BracketRenderer').catch(err => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ BracketRenderer:', err);
        return { 
            default: () => (
                <div className="bracket-error" data-testid="bracket-load-error">
                    <h3>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏</h3>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
                    <button onClick={() => window.location.reload()}>üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
                </div>
            ) 
        };
    })
);

// Error Boundary –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
class TournamentErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false, errorInfo: null };
    }

    static getDerivedStateFromError(error) {
        return { hasError: true };
    }

    componentDidCatch(error, errorInfo) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ TournamentDetails:', error, errorInfo);
        this.setState({ errorInfo });
    }

    render() {
        if (this.state.hasError) {
            return (
                <div className="tournament-error-boundary" data-testid="tournament-error">
                    <h2>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h2>
                    <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
                    <details style={{ marginTop: '20px' }}>
                        <summary>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary>
                        <pre style={{ whiteSpace: 'pre-wrap', fontSize: '12px' }}>
                            {this.state.errorInfo?.componentStack}
                        </pre>
                    </details>
                    <button onClick={() => window.location.reload()}>üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
                </div>
            );
        }

        return this.props.children;
    }
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';
const CACHE_VALIDITY_PERIOD = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã
const MAPS_CACHE_VALIDITY_PERIOD = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

// –£—Ç–∏–ª–∏—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const validateTournamentData = (data) => {
    if (!data || typeof data !== 'object') {
        return { isValid: false, error: '–î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç' };
    }
    
    if (!data.id || !data.name) {
        return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ (id, name)' };
    }
    
    return { isValid: true };
};

const validateParticipantData = (participant) => {
    if (!participant || typeof participant !== 'object') {
        return false;
    }
    return participant.id && (participant.name || participant.username);
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–∑–µ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
const TournamentWinners = React.memo(({ tournament }) => {
    if (tournament.status !== 'completed' || !tournament.winners) {
        return null;
    }

    const winners = Array.isArray(tournament.winners) ? tournament.winners : [];
    
    if (winners.length === 0) {
        return null;
    }

    return (
        <div className="winners-section">
            <h3>üèÜ –ü—Ä–∏–∑–µ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞</h3>
            <div className="winners-podium">
                {winners.slice(0, 3).map((winner, index) => (
                    <div key={winner.id || index} className={`winner-card place-${index + 1}`}>
                        <div className="medal-icon">
                            {index === 0 && <span className="gold-medal">ü•á</span>}
                            {index === 1 && <span className="silver-medal">ü•à</span>}
                            {index === 2 && <span className="bronze-medal">ü•â</span>}
                        </div>
                        <div className="winner-info">
                            {winner.avatar_url && (
                                <img 
                                    src={ensureHttps(winner.avatar_url)} 
                                    alt={`–ü—Ä–∏–∑–µ—Ä ${index + 1}`}
                                    className="winner-avatar"
                                    onError={(e) => { e.target.src = '/default-avatar.png'; }}
                                />
                            )}
                            <div className="winner-name">
                                {winner.user_id ? (
                                    <Link to={`/user/${winner.user_id}`} target="_blank" rel="noopener noreferrer">
                                        {winner.name || winner.username || '–£—á–∞—Å—Ç–Ω–∏–∫'}
                                    </Link>
                                ) : (
                                    <span>{winner.name || winner.username || '–£—á–∞—Å—Ç–Ω–∏–∫'}</span>
                                )}
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
});

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function TournamentDetails() {
    const { id } = useParams();
    const navigate = useNavigate();
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    const [tournament, setTournament] = useState(null);
    const [user, setUser] = useState(null);
    const [teams, setTeams] = useState([]);
    const [message, setMessage] = useState('');
    const [isParticipating, setIsParticipating] = useState(false);
    const [adminRequestStatus, setAdminRequestStatus] = useState(null);
    const [matches, setMatches] = useState([]);
    const [selectedMatch, setSelectedMatch] = useState(null);
    const [maps, setMaps] = useState([]);
    const [availableMaps, setAvailableMaps] = useState({});
    const [originalParticipants, setOriginalParticipants] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [isCreator, setIsCreator] = useState(false);
    const [isAdminOrCreator, setIsAdminOrCreator] = useState(false);

    // üÜï –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    const [activeTab, setActiveTab] = useState('info');

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ö—É–∫–∞)
    const [modals, setModals] = useState({
        addParticipant: false,
        participantSearch: false,
        matchResult: false,
        matchDetails: false
    });

    // üÜï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ü–û–ò–°–ö–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í
    const [adminSearchQuery, setAdminSearchQuery] = useState('');
    const [adminSearchResults, setAdminSearchResults] = useState([]);
    const [isSearchingAdmins, setIsSearchingAdmins] = useState(false);
    const [adminSearchModal, setAdminSearchModal] = useState(false);

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const [newParticipantData, setNewParticipantData] = useState({
        display_name: '',
        email: '',
        faceit_elo: '',
        cs2_premier_rank: ''
    });

    const [matchResultData, setMatchResultData] = useState({
        score1: 0,
        score2: 0,
        maps_data: []
    });

    const [selectedMatchForDetails, setSelectedMatchForDetails] = useState(null);

    // –†–µ—Ñ—ã
    const wsRef = useRef(null);

    // üÜï –•–£–ö –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–£–†–ù–ò–†–û–ú
    const tournamentManagement = useTournamentManagement(id);

    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
    const openModal = useCallback((modalName) => {
        setModals(prev => ({ ...prev, [modalName]: true }));
    }, []);

    const closeModal = useCallback((modalName) => {
        setModals(prev => ({ ...prev, [modalName]: false }));
    }, []);

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const handleAuthError = useCallback((error, context = '') => {
        if (error.response && error.response.status === 403) {
            console.log(`üîê –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏${context ? ` –ø—Ä–∏ ${context}` : ''}, –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω`);
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–µ—à–∏
            Object.keys(localStorage).forEach(key => {
                if (key.includes('tournament_cache_') || key.includes('invitedUsers_')) {
                    localStorage.removeItem(key);
                }
            });
            
            setError('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            setTimeout(() => {
                navigate('/');
            }, 1000);
            
            return true;
        }
        return false;
    }, [navigate]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isUserParticipant = useCallback((userId) => {
        if (!tournament?.participants || !userId) return false;
        return tournament.participants.some(participant => 
            validateParticipantData(participant) && participant.id === userId
        );
    }, [tournament]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    const fetchTournamentData = useCallback(async () => {
        if (!id) {
            setError('–ù–µ —É–∫–∞–∑–∞–Ω ID —Ç—É—Ä–Ω–∏—Ä–∞');
            return;
        }

        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞', id);
        setLoading(true);
        setError(null);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        const cacheKey = `tournament_cache_${id}`;
        const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
        
        try {
            const cachedTournament = localStorage.getItem(cacheKey);
            const cacheTimestamp = localStorage.getItem(cacheTimestampKey);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞
            if (cachedTournament && cacheTimestamp) {
                const now = Date.now();
                const timestamp = parseInt(cacheTimestamp, 10);
                
                if (!isNaN(timestamp) && (now - timestamp) < CACHE_VALIDITY_PERIOD) {
                    const parsedTournament = JSON.parse(cachedTournament);
                    const validation = validateTournamentData(parsedTournament);
                    
                    if (validation.isValid) {
                        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞');
                        setTournament(parsedTournament);
                        setMatches(Array.isArray(parsedTournament.matches) ? parsedTournament.matches : []);
                        
                        if (Array.isArray(parsedTournament.participants)) {
                            setOriginalParticipants(parsedTournament.participants);
                        }
                        
                        setLoading(false);
                        return;
                    } else {
                        console.warn('‚ö†Ô∏è –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã:', validation.error);
                        localStorage.removeItem(cacheKey);
                        localStorage.removeItem(cacheTimestampKey);
                    }
                }
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
            console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            const response = await api.get(`/api/tournaments/${id}`);
            const tournamentData = response.data;

            const validation = validateTournamentData(tournamentData);
            if (!validation.isValid) {
                throw new Error(validation.error);
            }

            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã –∏ –≤–∞–ª–∏–¥–Ω—ã');
            setTournament(tournamentData);
            setMatches(Array.isArray(tournamentData.matches) ? tournamentData.matches : []);
            
            if (Array.isArray(tournamentData.participants)) {
                setOriginalParticipants(tournamentData.participants);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            localStorage.setItem(cacheKey, JSON.stringify(tournamentData));
            localStorage.setItem(cacheTimestampKey, Date.now().toString());

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            
            if (!handleAuthError(error, '–∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞')) {
                setError(error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞');
            }
            
            // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∫–µ—à
            localStorage.removeItem(cacheKey);
            localStorage.removeItem(cacheTimestampKey);
        } finally {
            setLoading(false);
        }
    }, [id, handleAuthError]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã
    const fetchMapsForGame = useCallback(async (gameName) => {
        if (!gameName || availableMaps[gameName]) return;

        try {
            setAvailableMaps(prev => ({
                ...prev,
                [`${gameName}_loading`]: true
            }));

            const cacheKey = `maps_cache_${gameName}`;
            const cacheTimestampKey = `maps_cache_timestamp_${gameName}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∫–∞—Ä—Ç
            const cachedMaps = localStorage.getItem(cacheKey);
            const cacheTimestamp = localStorage.getItem(cacheTimestampKey);
            
            if (cachedMaps && cacheTimestamp) {
                const now = Date.now();
                const timestamp = parseInt(cacheTimestamp, 10);
                
                if (!isNaN(timestamp) && (now - timestamp) < MAPS_CACHE_VALIDITY_PERIOD) {
                    const parsedMaps = JSON.parse(cachedMaps);
                    if (Array.isArray(parsedMaps)) {
                        console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã ${gameName}`);
                        setAvailableMaps(prev => ({
                            ...prev,
                            [gameName]: parsedMaps,
                            [`${gameName}_loading`]: false
                        }));
                        return;
                    }
                }
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
            console.log(`üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã ${gameName} —Å —Å–µ—Ä–≤–µ—Ä–∞...`);
            const response = await api.get(`/api/maps?game=${encodeURIComponent(gameName)}`);
            
            if (response.data && Array.isArray(response.data)) {
                localStorage.setItem(cacheKey, JSON.stringify(response.data));
                localStorage.setItem(cacheTimestampKey, Date.now().toString());
                
                setAvailableMaps(prev => ({
                    ...prev,
                    [gameName]: response.data,
                    [`${gameName}_loading`]: false
                }));
            } else {
                throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç');
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã ${gameName}:`, error);
            
            // Fallback –¥–ª—è CS2
            if (isCounterStrike2(gameName)) {
                const defaultMaps = getDefaultCS2Maps();
                setAvailableMaps(prev => ({
                    ...prev,
                    [gameName]: defaultMaps,
                    [`${gameName}_loading`]: false
                }));
            } else {
                setAvailableMaps(prev => ({
                    ...prev,
                    [gameName]: [],
                    [`${gameName}_loading`]: false
                }));
            }
        }
    }, [availableMaps]);

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
    const getGameMaps = useCallback((game) => {
        return getGameMapsHelper(game, availableMaps);
    }, [availableMaps]);

    const getDefaultMap = useCallback((game) => {
        return getDefaultMapHelper(game, availableMaps);
    }, [availableMaps]);

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –≤ –º–∞—Ç—á–µ
    const addMap = useCallback(() => {
        const defaultMap = getDefaultMap(tournament?.game);
        setMaps(prevMaps => [...prevMaps, { map: defaultMap, score1: 0, score2: 0 }]);
    }, [tournament?.game, getDefaultMap]);

    const removeMap = useCallback((index) => {
        setMaps(prevMaps => prevMaps.filter((_, i) => i !== index));
    }, []);

    const updateMapScore = useCallback((index, team, score) => {
        setMaps(prevMaps => {
            const newMaps = [...prevMaps];
            if (newMaps[index]) {
                newMaps[index][`score${team}`] = score;
            }
            return newMaps;
        });
    }, []);

    const updateMapSelection = useCallback((index, mapName) => {
        setMaps(prevMaps => {
            const newMaps = [...prevMaps];
            if (newMaps[index]) {
                newMaps[index].map = mapName;
            }
            return newMaps;
        });
    }, []);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    const canGenerateBracket = useMemo(() => {
        return user && (isCreator || adminRequestStatus === 'accepted') && matches.length === 0;
    }, [user, isCreator, adminRequestStatus, matches.length]);

    const canEditMatches = useMemo(() => {
        return user && (isCreator || adminRequestStatus === 'accepted');
    }, [user, isCreator, adminRequestStatus]);

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏
    const games = useMemo(() => {
        if (!Array.isArray(matches) || matches.length === 0) {
            console.log('üö´ Games: –Ω–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return [];
        }

        console.log('üéÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BracketRenderer —Å', matches.length, '–º–∞—Ç—á–∞–º–∏');

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
        const participantsMap = {};
        const teamsMap = {};

        if (tournament?.participants) {
            tournament.participants.forEach(participant => {
                if (validateParticipantData(participant)) {
                    participantsMap[participant.id] = participant;
                }
            });
        }

        if (tournament?.teams) {
            tournament.teams.forEach(team => {
                if (team?.id) {
                    teamsMap[team.id] = team;
                }
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ/–∫–æ–º–∞–Ω–¥–µ
        const getParticipantInfo = (teamId) => {
            if (!teamId) return null;

            if (teamsMap[teamId]) {
                const team = teamsMap[teamId];
                return {
                    id: teamId,
                    name: team.name,
                    avatar_url: team.members?.[0]?.avatar_url || null,
                    members: team.members || []
                };
            }

            if (participantsMap[teamId]) {
                const participant = participantsMap[teamId];
                return {
                    id: teamId,
                    name: participant.name || participant.username,
                    avatar_url: participant.avatar_url,
                    members: []
                };
            }

            return null;
        };

        // –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const createSafeParticipant = (teamId, resultText, isWinner, status = 'PLAYED') => {
            const participantInfo = getParticipantInfo(teamId);

            return {
                id: teamId ? String(teamId) : 'tbd',
                resultText: resultText !== null ? String(resultText) : null,
                isWinner: Boolean(isWinner),
                status: status || 'NO_SHOW',
                name: participantInfo?.name || 'TBD',
                score: resultText,
                avatarUrl: participantInfo?.avatar_url ? ensureHttps(participantInfo.avatar_url) : null
            };
        };

        // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏–≥—Ä
        const safeGames = matches.map(match => {
            let status = 'SCHEDULED';
            if (match.winner_team_id) {
                status = 'DONE';
            } else if (match.team1_id && match.team2_id) {
                status = 'READY';
            }

            const team1Result = match.score1 !== null ? match.score1 : null;
            const team2Result = match.score2 !== null ? match.score2 : null;

            return {
                id: String(match.id),
                nextMatchId: match.next_match_id ? String(match.next_match_id) : null,
                tournamentRoundText: `–†–∞—É–Ω–¥ ${match.round || '?'}`,
                startTime: match.scheduled_time || '',
                state: status,
                name: match.name || `–ú–∞—Ç—á ${match.id}`,
                bracket_type: match.bracket_type || 'winner',
                round: match.round !== undefined ? match.round : 0,
                is_third_place_match: Boolean(match.is_third_place_match),
                participants: [
                    createSafeParticipant(
                        match.team1_id,
                        team1Result,
                        match.winner_team_id === match.team1_id,
                        match.team1_id ? 'PLAYED' : 'NO_SHOW'
                    ),
                    createSafeParticipant(
                        match.team2_id,
                        team2Result,
                        match.winner_team_id === match.team2_id,
                        match.team2_id ? 'PLAYED' : 'NO_SHOW'
                    )
                ]
            };
        });

        console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è BracketRenderer —Å–æ–∑–¥–∞–Ω—ã:', safeGames.length);
        return safeGames;
    }, [matches, tournament]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
    const handleTeamsGenerated = useCallback((teams) => {
        if (Array.isArray(teams)) {
            if (tournament?.participants?.length > 0) {
                setOriginalParticipants([...tournament.participants]);
            }
        }
    }, [tournament?.participants]);

    // üÜï –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
    const saveMatchResult = useCallback(async (resultData) => {
        if (!selectedMatch) {
            console.error('‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Ç—á–∞ –∏–∑ selectedMatch
        const matchId = typeof selectedMatch === 'object' ? selectedMatch.id : selectedMatch;
        
        if (!matchId && matchId !== 0) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞:', selectedMatch);
            return;
        }

        console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞:', {
            matchId,
            resultData,
            tournamentId: id
        });

        try {
            setLoading(true);
            const token = localStorage.getItem('token');
            
            if (!token) {
                throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const submitData = {
                score1: parseInt(resultData.score1) || 0,
                score2: parseInt(resultData.score2) || 0,
                maps_data: resultData.maps_data || [],
                winner_team_id: null
            };

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if (resultData.winner === 'team1') {
                submitData.winner_team_id = selectedMatch.team1_id;
            } else if (resultData.winner === 'team2') {
                submitData.winner_team_id = selectedMatch.team2_id;
            } else if (submitData.score1 > submitData.score2) {
                submitData.winner_team_id = selectedMatch.team1_id;
            } else if (submitData.score2 > submitData.score1) {
                submitData.winner_team_id = selectedMatch.team2_id;
            }

            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', submitData);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await api.post(`/api/tournaments/matches/${matchId}/result`, submitData, {
                headers: { 
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', response.data);

            // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –∫–µ—à —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const cacheKey = `tournament_cache_${id}`;
            const cacheTimestampKey = `tournament_cache_timestamp_${id}`;
            localStorage.removeItem(cacheKey);
            localStorage.removeItem(cacheTimestampKey);
            console.log('üóëÔ∏è –ö–µ—à —Ç—É—Ä–Ω–∏—Ä–∞ –æ—á–∏—â–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            closeModal('matchResult');
            setSelectedMatch(null);
            setMatchResultData({ score1: 0, score2: 0, maps_data: [] });

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            await fetchTournamentData();

            setMessage('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
            setTimeout(() => setMessage(''), 3000);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞:', error);
            
            let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞';
            
            if (error.response?.status === 403) {
                errorMessage = '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞';
            } else if (error.response?.status === 404) {
                errorMessage = '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω';
            } else if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            setMessage(`‚ùå ${errorMessage}`);
            setTimeout(() => setMessage(''), 5000);
        } finally {
            setLoading(false);
        }
    }, [selectedMatch, id, fetchTournamentData, closeModal]);

    // üÜï –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    const switchTab = useCallback((tabName) => {
        setActiveTab(tabName);
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
    }, []);

    // üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const shouldShowParticipantsTab = useMemo(() => {
        if (!tournament) return false;
        
        // –î–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        if (tournament.format === 'mix') {
            // –°–∫—Ä—ã–≤–∞–µ–º –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö "in-progress" –∏ "completed"
            if (tournament.status === 'in-progress' || tournament.status === 'completed') {
                return false;
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã
            if (tournament.teams && tournament.teams.length > 0) {
                return false;
            }
        }
        
        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤ (solo, team) –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        return true;
    }, [tournament]);

    // üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    useEffect(() => {
        if (!shouldShowParticipantsTab && activeTab === 'participants') {
            // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            setActiveTab('info');
            console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å –≤–∫–ª–∞–¥–∫–∏ "–£—á–∞—Å—Ç–Ω–∏–∫–∏" –Ω–∞ "–ì–ª–∞–≤–Ω–∞—è"');
        }
    }, [shouldShowParticipantsTab, activeTab]);

    // üÜï –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–æ–∫
    const renderTabContent = () => {
        switch (activeTab) {
            case 'info':
                return (
                    <div className="tab-content-info">
                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è */}
                        <TournamentInfoSection 
                            tournament={tournament}
                            user={user}
                            isCreator={isCreator}
                            isAdminOrCreator={isAdminOrCreator}
                        />

                        {/* –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ */}
                        {games.length > 0 && (
                            <div className="bracket-section">
                                <h3>üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞</h3>
                                <TournamentErrorBoundary>
                                    <Suspense fallback={
                                        <div className="bracket-loading" data-testid="bracket-loading">
                                            üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏...
                                        </div>
                                    }>
                                        <LazyBracketRenderer
                                            games={games}
                                            canEditMatches={canEditMatches}
                                            selectedMatch={selectedMatch}
                                            setSelectedMatch={(match) => {
                                                // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º match –∫–∞–∫ –æ–±—ä–µ–∫—Ç –∏–ª–∏ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null
                                                console.log('üéØ setSelectedMatch –≤—ã–∑–≤–∞–Ω —Å:', match, '—Ç–∏–ø:', typeof match);
                                                
                                                if (match === null || match === undefined) {
                                                    console.log('üéØ –í—ã–±—Ä–∞–Ω –º–∞—Ç—á: null/undefined - —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ');
                                                    setSelectedMatch(null);
                                                    return;
                                                }
                                                
                                                const matchId = typeof match === 'object' && match !== null ? match.id : match;
                                                console.log('üéØ –í—ã–±—Ä–∞–Ω –º–∞—Ç—á ID:', matchId, '–∏–∑ –æ–±—ä–µ–∫—Ç–∞:', match);
                                                
                                                if (matchId) {
                                                    // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –º–∞—Ç—á–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                                                    const fullMatch = matches.find(m => m.id === parseInt(matchId));
                                                    if (fullMatch && canEditMatches) {
                                                        console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –º–∞—Ç—á–∞:', fullMatch);
                                                        
                                                        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
                                                        const team1Info = tournament.teams?.find(t => t.id === fullMatch.team1_id) || 
                                                                         tournament.participants?.find(p => p.id === fullMatch.team1_id);
                                                        const team2Info = tournament.teams?.find(t => t.id === fullMatch.team2_id) || 
                                                                         tournament.participants?.find(p => p.id === fullMatch.team2_id);
                                                        
                                                        // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –º–∞—Ç—á–∞
                                                        const matchWithTeamInfo = {
                                                            ...fullMatch,
                                                            team1_name: team1Info?.name || team1Info?.username || '–ö–æ–º–∞–Ω–¥–∞ 1',
                                                            team2_name: team2Info?.name || team2Info?.username || '–ö–æ–º–∞–Ω–¥–∞ 2',
                                                            team1_composition: team1Info,
                                                            team2_composition: team2Info
                                                        };
                                                        
                                                        setSelectedMatch(matchWithTeamInfo);
                                                        setMatchResultData({
                                                            score1: fullMatch.score1 || 0,
                                                            score2: fullMatch.score2 || 0,
                                                            maps_data: fullMatch.maps_data || []
                                                        });
                                                        openModal('matchResult');
                                                        console.log('üéØ –û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞:', matchId);
                                                    } else {
                                                        console.warn('‚ö†Ô∏è –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:', matchId);
                                                        setSelectedMatch(matchId);
                                                    }
                                                } else {
                                                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞ –∏–∑:', match);
                                                    setSelectedMatch(null);
                                                }
                                            }}
                                            handleTeamClick={() => {}}
                                            format={tournament.format}
                                            onMatchClick={(match) => {
                                                console.log('üéØ onMatchClick –≤—ã–∑–≤–∞–Ω —Å:', match);
                                                if (match && match.id) {
                                                    setSelectedMatchForDetails(match);
                                                    openModal('matchDetails');
                                                } else {
                                                    console.warn('‚ö†Ô∏è onMatchClick: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –º–∞—Ç—á–∞:', match);
                                                }
                                            }}
                                        />
                                    </Suspense>
                                </TournamentErrorBoundary>
                            </div>
                        )}

                        {/* –ü—Ä–∏–∑–µ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞ */}
                        <TournamentWinners tournament={tournament} />
                    </div>
                );

            case 'participants':
                return (
                    <div className="tab-content-participants">
                        <h3>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                        
                        {/* –ü–∞–Ω–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - —Å–∫—Ä—ã–≤–∞–µ–º –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ */}
                        {!(tournament.format === 'mix' && tournament.teams && tournament.teams.length > 0) && (
                            <UnifiedParticipantsPanel
                                tournament={tournament}
                                participants={tournament.participants || []}
                                matches={matches}
                                mixedTeams={tournament.teams || []}
                                isCreatorOrAdmin={isAdminOrCreator}
                                user={user}
                                onRemoveParticipant={() => {}}
                                onShowAddParticipantModal={() => openModal('addParticipant')}
                                onShowParticipantSearchModal={() => openModal('participantSearch')}
                                onTeamsGenerated={handleTeamsGenerated}
                                onTeamsUpdated={() => {}}
                                calculateTeamAverageRating={() => 0}
                                setRatingType={() => {}}
                                userPermissions={{}}
                                handleParticipate={() => {}}
                                setMessage={setMessage}
                            />
                        )}

                        {/* –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤ */}
                        {tournament.format === 'mix' && (
                            <TeamGenerator
                                tournament={tournament}
                                participants={tournament.teams && tournament.teams.length > 0 ? [] : originalParticipants}
                                onTeamsGenerated={handleTeamsGenerated}
                                onTeamsUpdated={() => {}}
                                onRemoveParticipant={() => {}}
                                isAdminOrCreator={isAdminOrCreator}
                            />
                        )}

                        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ */}
                        {tournament.format === 'mix' && tournament.teams && tournament.teams.length > 0 && (
                            <div className="teams-formed-notice">
                                <div className="notice-content">
                                    <h4>‚úÖ –ö–æ–º–∞–Ω–¥—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã</h4>
                                    <p>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ –∫–æ–º–∞–Ω–¥–∞–º. –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∫–æ–º–∞–Ω–¥.</p>
                                </div>
                            </div>
                        )}
                    </div>
                );

            case 'bracket':
                return (
                    <div className="tab-content-bracket">
                        <div className="bracket-tab-header">
                            <h3>üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞</h3>
                            <div className="bracket-controls">
                                {canGenerateBracket && (
                                    <button 
                                        className="generate-bracket-button"
                                        onClick={() => {}}
                                    >
                                        üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É
                                    </button>
                                )}
                                {canEditMatches && games.length > 0 && (
                                    <button 
                                        className="regenerate-bracket-button"
                                        onClick={() => {}}
                                    >
                                        üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É
                                    </button>
                                )}
                            </div>
                        </div>

                        {games.length > 0 ? (
                            <TournamentErrorBoundary>
                                <Suspense fallback={
                                    <div className="bracket-loading" data-testid="bracket-loading">
                                        üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏...
                                    </div>
                                }>
                                    <LazyBracketRenderer
                                        games={games}
                                        canEditMatches={canEditMatches}
                                        selectedMatch={selectedMatch}
                                        setSelectedMatch={setSelectedMatch}
                                        handleTeamClick={() => {}}
                                        format={tournament.format}
                                        onMatchClick={(match) => {
                                            setSelectedMatchForDetails(match);
                                            openModal('matchDetails');
                                        }}
                                    />
                                </Suspense>
                            </TournamentErrorBoundary>
                        ) : (
                            <div className="empty-state">
                                <p>üèóÔ∏è –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞</p>
                                <p className="text-muted">
                                    {canGenerateBracket 
                                        ? '–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞' 
                                        : '–î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞'
                                    }
                                </p>
                            </div>
                        )}
                    </div>
                );

            case 'results':
                return (
                    <div className="tab-content-results">
                        <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π</h3>
                        
                        {matches.length > 0 ? (
                            <div className="results-compact-list">
                                {matches
                                    .filter(match => match.winner_team_id || (match.score1 !== null && match.score2 !== null))
                                    .sort((a, b) => new Date(b.updated_at || b.completed_at) - new Date(a.updated_at || a.completed_at))
                                    .map((match) => {
                                        const team1Info = tournament.teams?.find(t => t.id === match.team1_id) || 
                                                         tournament.participants?.find(p => p.id === match.team1_id);
                                        const team2Info = tournament.teams?.find(t => t.id === match.team2_id) || 
                                                         tournament.participants?.find(p => p.id === match.team2_id);

                                        return (
                                            <div key={match.id} className="result-compact-item">
                                                <div className="result-compact-content">
                                                    <div className="result-compact-round">
                                                        {match.is_third_place_match && (
                                                            <span className="third-place-indicator">ü•â –ó–∞ 3-–µ –º–µ—Å—Ç–æ</span>
                                                        )}
                                                        {match.round === Math.max(...matches.map(m => m.round)) && !match.is_third_place_match && (
                                                            <span className="grand-final-indicator">üèÜ –§–∏–Ω–∞–ª</span>
                                                        )}
                                                        {!match.is_third_place_match && match.round !== Math.max(...matches.map(m => m.round)) && (
                                                            <span>–†–∞—É–Ω–¥ {match.round}</span>
                                                        )}
                                                    </div>
                                                    
                                                    <div className="result-compact-match">
                                                        <button 
                                                            className={`team-name-btn ${match.winner_team_id === match.team1_id ? 'winner' : ''}`}
                                                            onClick={() => {
                                                                if (team1Info) {
                                                                    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
                                                                }
                                                            }}
                                                        >
                                                            {team1Info?.name || team1Info?.username || '–ö–æ–º–∞–Ω–¥–∞ 1'}
                                                        </button>
                                                        
                                                        <div className="match-score">
                                                            <span className={match.winner_team_id === match.team1_id ? 'winner-score' : ''}>{match.score1 || 0}</span>
                                                            <span className="score-separator">:</span>
                                                            <span className={match.winner_team_id === match.team2_id ? 'winner-score' : ''}>{match.score2 || 0}</span>
                                                        </div>
                                                        
                                                        <button 
                                                            className={`team-name-btn ${match.winner_team_id === match.team2_id ? 'winner' : ''}`}
                                                            onClick={() => {
                                                                if (team2Info) {
                                                                    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
                                                                }
                                                            }}
                                                        >
                                                            {team2Info?.name || team2Info?.username || '–ö–æ–º–∞–Ω–¥–∞ 2'}
                                                        </button>
                                                    </div>

                                                    <div className="result-compact-actions">
                                                        <button 
                                                            className="details-btn"
                                                            onClick={() => {
                                                                setSelectedMatchForDetails(match);
                                                                openModal('matchDetails');
                                                            }}
                                                        >
                                                            üìã –î–µ—Ç–∞–ª–∏
                                                        </button>
                                                        
                                                        {canEditMatches && (
                                                            <button 
                                                                className="edit-compact-btn"
                                                                onClick={() => {
                                                                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –º–∞—Ç—á–∞, –Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö
                                                                    const matchWithTeamInfo = {
                                                                        ...match,
                                                                        team1_name: team1Info?.name || team1Info?.username || '–ö–æ–º–∞–Ω–¥–∞ 1',
                                                                        team2_name: team2Info?.name || team2Info?.username || '–ö–æ–º–∞–Ω–¥–∞ 2',
                                                                        team1_composition: team1Info,
                                                                        team2_composition: team2Info
                                                                    };
                                                                    setSelectedMatch(matchWithTeamInfo);
                                                                    setMatchResultData({
                                                                        score1: match.score1 || 0,
                                                                        score2: match.score2 || 0,
                                                                        maps_data: match.maps_data || []
                                                                    });
                                                                    openModal('matchResult');
                                                                }}
                                                            >
                                                                ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                                                            </button>
                                                        )}
                                                    </div>

                                                    {match.completed_at && (
                                                        <div className="match-completed-time">
                                                            –ó–∞–≤–µ—Ä—à–µ–Ω: {new Date(match.completed_at).toLocaleString()}
                                                        </div>
                                                    )}
                                                </div>
                                            </div>
                                        );
                                    })}
                            </div>
                        ) : (
                            <div className="empty-state">
                                <p>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
                                <p className="text-muted">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Ç—á–µ–π</p>
                            </div>
                        )}
                    </div>
                );

            case 'management':
                return (
                    <div className="tab-content-management">
                        {isAdminOrCreator ? (
                            <TournamentAdminPanel
                                tournament={tournament}
                                participants={tournament.participants || []}
                                matches={matches}
                                isCreatorOrAdmin={isAdminOrCreator}
                                isLoading={loading}
                                onStartTournament={() => {}}
                                onEndTournament={() => {}}
                                onRegenerateBracket={() => {}}
                                onShowAddParticipantModal={() => openModal('addParticipant')}
                                onShowParticipantSearchModal={() => openModal('participantSearch')}
                                onRemoveParticipant={() => {}}
                                onEditMatchResult={(match) => {
                                    setSelectedMatch(match);
                                    setMatchResultData({
                                        score1: match.score1 || 0,
                                        score2: match.score2 || 0,
                                        maps_data: match.maps_data || []
                                    });
                                    openModal('matchResult');
                                }}
                                onGenerateBracket={() => {}}
                                onClearResults={() => {}}
                                onInviteAdmin={inviteAdmin}
                                onRemoveAdmin={removeAdmin}
                                onShowAdminSearchModal={openAdminSearchModal}
                            />
                        ) : (
                            <div className="access-denied">
                                <h3>üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h3>
                                <p>–≠—Ç–∞ —Å–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ç—É—Ä–Ω–∏—Ä–∞.</p>
                            </div>
                        )}
                    </div>
                );

            default:
                return <div>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞</div>;
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            api.get('/api/users/me', { headers: { Authorization: `Bearer ${token}` } })
                .then((userResponse) => {
                    setUser(userResponse.data);
                    return api.get(`/api/teams?userId=${userResponse.data.id}`, { 
                        headers: { Authorization: `Bearer ${token}` } 
                    });
                })
                .then((res) => setTeams(Array.isArray(res.data) ? res.data : []))
                .catch((error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥:', error);
                    handleAuthError(error, '–∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                });
        } else {
            setUser(null);
            setTeams([]);
        }
    }, [handleAuthError]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
    useEffect(() => {
        fetchTournamentData();
    }, [fetchTournamentData]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã
    useEffect(() => {
        if (tournament?.game && gameHasMaps(tournament.game)) {
            console.log(`üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã: ${tournament.game}`);
            fetchMapsForGame(tournament.game);
        }
    }, [tournament?.game, fetchMapsForGame]);

    // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    useEffect(() => {
        if (!user || !tournament?.id) {
            console.log('‚è≥ –û—Ç–ª–æ–∂–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID —Ç—É—Ä–Ω–∏—Ä–∞');
            return;
        }

        const token = localStorage.getItem('token');
        if (!token) {
            console.log('‚è≥ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }

        console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞', tournament.id);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (wsRef.current) {
            console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            wsRef.current.disconnect();
            wsRef.current = null;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const socket = io(API_URL, {
            query: { token },
            transports: ['websocket', 'polling'],
            reconnectionAttempts: 5,
            reconnectionDelay: 1000,
            timeout: 10000
        });

        socket.on('connect', () => {
            console.log('‚úÖ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            socket.emit('watch_tournament', id);
            socket.emit('join_tournament_chat', id);
        });

        socket.on('disconnect', (reason) => {
            console.log('üîå Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', reason);
        });

        socket.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        });

        socket.on('tournament_update', (tournamentData) => {
            if (tournamentData.tournamentId === parseInt(id) || tournamentData.id === parseInt(id)) {
                console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ WebSocket');
                fetchTournamentData();
            }
        });

        wsRef.current = socket;

        return () => {
            console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
            if (socket) {
                socket.disconnect();
            }
        };
    }, [id, user, tournament?.id, fetchTournamentData]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        if (!user || !tournament) return;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è
        const participants = Array.isArray(tournament.participants) ? tournament.participants : [];
        const isParticipant = participants.some(p => {
            if (!validateParticipantData(p)) return false;
            return (tournament.participant_type === 'solo' && p.user_id === user.id) ||
                   (tournament.participant_type === 'team' && p.creator_id === user.id);
        });
        setIsParticipating(isParticipant);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        setIsCreator(user.id === tournament.created_by);
        const isAdmin = Array.isArray(tournament.admins) ? 
            tournament.admins.some(admin => admin?.id === user.id) : false;
        setIsAdminOrCreator(user.id === tournament.created_by || isAdmin);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        const token = localStorage.getItem('token');
        if (token) {
            api.get(`/api/tournaments/${id}/admin-request-status`, {
                headers: { Authorization: `Bearer ${token}` },
            })
            .then((statusResponse) => setAdminRequestStatus(statusResponse.data.status))
            .catch((error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            });
        }
    }, [user, tournament, id]);

    // üÜï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
    const searchAdmins = useCallback(async (query) => {
        if (!query || query.trim().length < 3) {
            setAdminSearchResults([]);
            return;
        }

        setIsSearchingAdmins(true);
        try {
            const result = await tournamentManagement.searchUsers(query.trim());
            if (result.success) {
                setAdminSearchResults(result.data || []);
            } else {
                setAdminSearchResults([]);
                setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
            setAdminSearchResults([]);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            setTimeout(() => setMessage(''), 3000);
        } finally {
            setIsSearchingAdmins(false);
        }
    }, [tournamentManagement]);

    // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
    const inviteAdmin = useCallback(async (userId, userName) => {
        try {
            setIsSearchingAdmins(true);
            const result = await tournamentManagement.inviteAdmin(userId);
            
            if (result.success) {
                setMessage(`‚úÖ ${userName} –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞`);
                setAdminSearchModal(false);
                setAdminSearchQuery('');
                setAdminSearchResults([]);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                await fetchTournamentData();
            } else {
                setMessage(`‚ùå ${result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        } finally {
            setIsSearchingAdmins(false);
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, fetchTournamentData]);

    // –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const removeAdmin = useCallback(async (userId) => {
        const confirmed = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?');
        if (!confirmed) return;

        try {
            const result = await tournamentManagement.removeAdmin(userId);
            
            if (result.success) {
                setMessage('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                await fetchTournamentData();
            } else {
                setMessage(`‚ùå ${result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        } finally {
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, fetchTournamentData]);

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const openAdminSearchModal = useCallback(() => {
        setAdminSearchModal(true);
        setAdminSearchQuery('');
        setAdminSearchResults([]);
    }, []);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const closeAdminSearchModal = useCallback(() => {
        setAdminSearchModal(false);
        setAdminSearchQuery('');
        setAdminSearchResults([]);
        setIsSearchingAdmins(false);
    }, []);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    if (loading) {
        return (
            <div className="tournament-loading" data-testid="tournament-loading">
                <div className="loading-content">
                    <h2>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞...</h2>
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="auth-error-container" data-testid="tournament-error">
                <div className="auth-error-message">
                    <h2>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞</h2>
                    <p>{error}</p>
                    <button 
                        className="auth-error-button" 
                        onClick={() => {
                            setError(null);
                            fetchTournamentData();
                        }}
                    >
                        üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            </div>
        );
    }

    if (!tournament) {
        return (
            <div className="tournament-not-found" data-testid="tournament-not-found">
                <h2>‚ùì –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
                <p>–¢—É—Ä–Ω–∏—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.</p>
                <button onClick={() => navigate('/')}>üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é</button>
            </div>
        );
    }

    // üÜï –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–∫–ª–∞–¥–æ–∫
    return (
        <TournamentErrorBoundary>
            <div className="tournament-details-tournamentdetails" data-testid="tournament-details">
                <div className="tournament-layout">
                    <div className="tournament-main">
                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—É—Ä–Ω–∏—Ä–∞ */}
                        <div className="tournament-header-tournamentdetails">
                            <h2 data-testid="tournament-title">{tournament.name}</h2>
                        </div>

                        {/* üÜï –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º */}
                        <div className="tabs-navigation-tournamentdetails">
                            <button 
                                className={`tab-button-tournamentdetails ${activeTab === 'info' ? 'active' : ''}`}
                                onClick={() => switchTab('info')}
                            >
                                <span className="tab-label-tournamentdetails">üìã –ì–ª–∞–≤–Ω–∞—è</span>
                            </button>
                            
                            {shouldShowParticipantsTab && (
                                <button 
                                    className={`tab-button-tournamentdetails ${activeTab === 'participants' ? 'active' : ''}`}
                                    onClick={() => switchTab('participants')}
                                >
                                    <span className="tab-label-tournamentdetails">üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏</span>
                                </button>
                            )}
                            
                            <button 
                                className={`tab-button-tournamentdetails ${activeTab === 'bracket' ? 'active' : ''}`}
                                onClick={() => switchTab('bracket')}
                            >
                                <span className="tab-label-tournamentdetails">üèÜ –°–µ—Ç–∫–∞</span>
                            </button>
                            
                            <button 
                                className={`tab-button-tournamentdetails ${activeTab === 'results' ? 'active' : ''}`}
                                onClick={() => switchTab('results')}
                            >
                                <span className="tab-label-tournamentdetails">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</span>
                            </button>
                            
                            {isAdminOrCreator && (
                                <button 
                                    className={`tab-button-tournamentdetails ${activeTab === 'management' ? 'active' : ''}`}
                                    onClick={() => switchTab('management')}
                                >
                                    <span className="tab-label-tournamentdetails">‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</span>
                                </button>
                            )}
                        </div>

                        {/* üÜï –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
                        <div className="tournament-content-tournamentdetails">
                            <div className="tab-content-tournamentdetails">
                                {renderTabContent()}
                            </div>
                        </div>
                    </div>
                </div>

                {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
                {modals.addParticipant && (
                    <AddParticipantModal
                        isOpen={modals.addParticipant}
                        onClose={() => closeModal('addParticipant')}
                        newParticipantData={newParticipantData}
                        setNewParticipantData={setNewParticipantData}
                        onSubmit={() => {}}
                        isLoading={false}
                    />
                )}

                {modals.participantSearch && (
                    <ParticipantSearchModal
                        isOpen={modals.participantSearch}
                        onClose={() => closeModal('participantSearch')}
                        onInvite={() => {}}
                        searchQuery=""
                        setSearchQuery={() => {}}
                        searchResults={[]}
                        isSearching={false}
                        onSearch={() => {}}
                        existingParticipants={tournament.participants || []}
                    />
                )}

                {modals.matchResult && selectedMatch && (
                    <MatchResultModal
                        isOpen={modals.matchResult}
                        onClose={() => closeModal('matchResult')}
                        selectedMatch={selectedMatch}
                        matchResultData={matchResultData}
                        setMatchResultData={setMatchResultData}
                        onSave={saveMatchResult}
                        isLoading={loading}
                        tournament={tournament}
                    />
                )}

                {modals.matchDetails && selectedMatchForDetails && (
                    <MatchDetailsModal
                        isOpen={modals.matchDetails}
                        onClose={() => closeModal('matchDetails')}
                        selectedMatch={selectedMatchForDetails}
                        canEdit={canEditMatches}
                        onEdit={() => {
                            closeModal('matchDetails');
                            setSelectedMatch(selectedMatchForDetails);
                            openModal('matchResult');
                        }}
                        tournament={tournament}
                    />
                )}

                {/* üÜï –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ */}
                {adminSearchModal && (
                    <ParticipantSearchModal
                        isOpen={adminSearchModal}
                        onClose={closeAdminSearchModal}
                        mode="admin"
                        onInviteAdmin={inviteAdmin}
                        searchQuery={adminSearchQuery}
                        setSearchQuery={setAdminSearchQuery}
                        searchResults={adminSearchResults}
                        isSearching={isSearchingAdmins}
                        onSearch={searchAdmins}
                        existingAdmins={tournament?.admins || []}
                        existingParticipants={[]} // –ù–µ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–æ–≤
                    />
                )}

                {/* –ü–ª–∞–≤–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π */}
                <TournamentFloatingActionPanel
                    tournament={tournament}
                    user={user}
                    hasAccess={isAdminOrCreator}
                    onStartTournament={() => {}}
                    onEndTournament={() => {}}
                    onGenerateBracket={() => {}}
                    onRegenerateBracket={() => {}}
                    onClearResults={() => {}}
                    hasMatches={matches.length > 0}
                    hasBracket={games.length > 0}
                />

                {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
                {message && (
                    <div className="tournament-message" data-testid="tournament-message">
                        {message}
                    </div>
                )}
            </div>
        </TournamentErrorBoundary>
    );
}

export default TournamentDetails; 