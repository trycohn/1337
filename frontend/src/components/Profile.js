import React, { useState, useEffect, useRef } from 'react';
import api from '../axios';
import './Profile.css';
import { isCurrentUser, ensureHttps } from '../utils/userHelpers';
// V4 ULTIMATE: –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ WebSocket
import {
    Chart as ChartJS,
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    BarElement,
    Title,
    Tooltip,
    Legend,
    RadialLinearScale,
    ArcElement,
    Filler
} from 'chart.js';
import { Line, Bar, Radar, Doughnut } from 'react-chartjs-2';

// ‚ú® V4 ULTIMATE: –ò–º–ø–æ—Ä—Ç—ã —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { useV4ProfileHooks } from './V4ProfileHooks';
import V4StatsDashboard from './V4StatsDashboard';
import './V4Stats.css';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Chart.js
ChartJS.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    BarElement,
    Title,
    Tooltip,
    Legend,
    RadialLinearScale,
    ArcElement,
    Filler
);

function Profile() {
    const [user, setUser] = useState(null);
    const [stats, setStats] = useState(null);
    const [cs2Stats, setCs2Stats] = useState(null);
    const [isLoadingCs2Stats, setIsLoadingCs2Stats] = useState(false);
    const [faceitId, setFaceitId] = useState('');
    const [faceitInfo, setFaceitInfo] = useState(null);
    const [isLoadingFaceitInfo, setIsLoadingFaceitInfo] = useState(false);
    const [newUsername, setNewUsername] = useState('');
    const [error, setError] = useState('');
    const [showModal, setShowModal] = useState(false);
    const [steamNickname, setSteamNickname] = useState('');
    const [premierRank, setPremierRank] = useState(0);
    
    // Avatar states
    const [avatar, setAvatar] = useState(null);
    const [uploadingAvatar, setUploadingAvatar] = useState(false);
    const [showAvatarModal, setShowAvatarModal] = useState(false);
    const fileInputRef = useRef(null);
    
    // Email verification states re
    const [showEmailVerificationModal, setShowEmailVerificationModal] = useState(false);
    const [verificationCode, setVerificationCode] = useState('');
    const [isResendDisabled, setIsResendDisabled] = useState(false);
    const [resendCountdown, setResendCountdown] = useState(0);
    const [isClosingModal, setIsClosingModal] = useState(false);
    const [verificationError, setVerificationError] = useState('');
    
    // Email adding states
    const [showAddEmailModal, setShowAddEmailModal] = useState(false);
    const [newEmail, setNewEmail] = useState('');
    const [addEmailError, setAddEmailError] = useState('');
    
    // Email required modal state
    const [showEmailRequiredModal, setShowEmailRequiredModal] = useState(false);

    // Friends states
    const [friends, setFriends] = useState([]);
    const [friendRequests, setFriendRequests] = useState([]);
    const [loadingFriends, setLoadingFriends] = useState(false);

    // Match history states
    const [matchHistory, setMatchHistory] = useState([]);
    const [loadingMatchHistory, setLoadingMatchHistory] = useState(false);
    const [showMatchHistoryModal, setShowMatchHistoryModal] = useState(false);

    // Active tab state
    const [activeTab, setActiveTab] = useState('main');

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const [searchQuery, setSearchQuery] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [isSearching, setIsSearching] = useState(false);
    const [searchPerformed, setSearchPerformed] = useState(false);
    const searchTimeoutRef = useRef(null);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è
    const [sentFriendRequests, setSentFriendRequests] = useState([]);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    const [organizationData, setOrganizationData] = useState({
        organizationName: '',
        description: '',
        websiteUrl: '',
        vkUrl: '',
        telegramUrl: ''
    });
    const [organizationLogo, setOrganizationLogo] = useState(null);
    const [organizationLogoPreview, setOrganizationLogoPreview] = useState(null);
    const [isSubmittingOrganization, setIsSubmittingOrganization] = useState(false);
    const [organizationError, setOrganizationError] = useState('');
    const [organizationSuccess, setOrganizationSuccess] = useState('');
    const organizationFileInputRef = useRef(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö
    const [userOrganizations, setUserOrganizations] = useState([]);
    const [loadingOrganizations, setLoadingOrganizations] = useState(false);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    const [organizationRequest, setOrganizationRequest] = useState(null);
    const [loadingRequest, setLoadingRequest] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const [dotaProfile, setDotaProfile] = useState(null);
    const [dotaStats, setDotaStats] = useState(null);
    const [isLoadingDotaStats, setIsLoadingDotaStats] = useState(false);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏–≥—Ä–æ–∫–∞
    const [userTournaments, setUserTournaments] = useState([]);
    const [loadingTournaments, setLoadingTournaments] = useState(false);
    const [tournamentFilters, setTournamentFilters] = useState({
        game: '',
        name: '',
        format: '',
        status: '',
        start_date: null,
    });
    const [tournamentSort, setTournamentSort] = useState({ field: '', direction: 'asc' });
    const [activeTournamentFilter, setActiveTournamentFilter] = useState(null);
    const [tournamentViewMode, setTournamentViewMode] = useState('table');
    const tournamentFilterRefs = {
        name: useRef(null),
        game: useRef(null),
        format: useRef(null),
        status: useRef(null),
        start_date: useRef(null),
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
    const [isRecalculating, setIsRecalculating] = useState(false);
    const [recalculationStatus, setRecalculationStatus] = useState('');
    const [recalculationError, setRecalculationError] = useState('');

    // ‚ú® V4 ULTIMATE: –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    const [v4EnhancedStats, setV4EnhancedStats] = useState(null);
    const [achievements, setAchievements] = useState([]);
    const [userAchievements, setUserAchievements] = useState([]);
    const [aiAnalysis, setAiAnalysis] = useState(null);
    const [performanceData, setPerformanceData] = useState([]);
    const [leaderboards, setLeaderboards] = useState([]);
    const [currentStreak, setCurrentStreak] = useState(null);
    const [isLoadingV4Stats, setIsLoadingV4Stats] = useState(false);
    const [isLoadingAchievements, setIsLoadingAchievements] = useState(false);
    const [isLoadingAI, setIsLoadingAI] = useState(false);
    const [websocket, setWebsocket] = useState(null);
    const [realTimeUpdates, setRealTimeUpdates] = useState([]);
    const [showAchievementNotification, setShowAchievementNotification] = useState(null);
    const [globalRank, setGlobalRank] = useState(null);
    const [weeklyProgress, setWeeklyProgress] = useState(null);
    const [personalBests, setPersonalBests] = useState({});
    const [v4ActiveView, setV4ActiveView] = useState('overview'); // overview, charts, achievements, ai

    // ‚ú® V4 ULTIMATE: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ö—É–∫–∞
    const v4Data = useV4ProfileHooks(user, activeTab);

    // üîÑ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
    const requestEnhancedRecalculation = async () => {
        if (!user?.id) return;
        
        setIsRecalculating(true);
        setRecalculationStatus('–ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        setRecalculationError('');
        
        try {
            const token = localStorage.getItem('token');
            
            // –ë–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const basicResponse = await api.post('/api/users/recalculate-tournament-stats', {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            if (basicResponse.data.success) {
                setRecalculationStatus('‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑...');
                
                // V4 —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å AI
                const enhancedResponse = await api.post(`/api/v4/recalculate-enhanced/${user.id}`, {}, {
                    headers: { Authorization: `Bearer ${token}` }
                });
                
                if (enhancedResponse.data.success) {
                    setRecalculationStatus('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                    await Promise.all([
                        fetchStats(token),
                        v4Data.fetchV4EnhancedStats(),
                        v4Data.fetchAchievements(),
                        v4Data.fetchAIAnalysis && v4Data.fetchAIAnalysis(),
                        v4Data.fetchLeaderboards()
                    ]);
                } else {
                    setRecalculationStatus('‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. AI –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ.');
                }
            }
            
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', err);
            setRecalculationError('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª—É–±–æ–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç.');
        } finally {
            setIsRecalculating(false);
            setTimeout(() => {
                setRecalculationStatus('');
                setRecalculationError('');
            }, 5000);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≥–µ—Ä–æ—è Dota 2
    const getHeroImageUrl = (heroId) => {
        if (!heroId) return '/default-hero.png';
        return `https://cdn.dota2.com/apps/dota2/images/heroes/${getHeroName(heroId)}_full.png`;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≥–µ—Ä–æ—è –ø–æ ID
    const getHeroName = (heroId) => {
        const heroNames = {
            1: 'antimage',
            2: 'axe',
            3: 'bane',
            4: 'bloodseeker',
            5: 'crystal_maiden',
            6: 'drow_ranger',
            7: 'earthshaker',
            8: 'juggernaut',
            9: 'mirana',
            10: 'morphling',
            11: 'nevermore',
            12: 'phantom_lancer',
            13: 'puck',
            14: 'pudge',
            15: 'razor',
            16: 'sand_king',
            17: 'storm_spirit',
            18: 'sven',
            19: 'tiny',
            20: 'vengefulspirit',
            21: 'windrunner',
            22: 'zuus',
            23: 'kunkka',
            25: 'lina',
            26: 'lion',
            27: 'shadow_shaman',
            28: 'slardar',
            29: 'tidehunter',
            30: 'witch_doctor',
            31: 'lich',
            32: 'riki',
            33: 'enigma',
            34: 'tinker',
            35: 'sniper',
            36: 'necrolyte',
            37: 'warlock',
            38: 'beastmaster',
            39: 'queenofpain',
            40: 'venomancer',
            41: 'faceless_void',
            42: 'skeleton_king',
            43: 'death_prophet',
            44: 'phantom_assassin',
            45: 'pugna',
            46: 'templar_assassin',
            47: 'viper',
            48: 'luna',
            49: 'dragon_knight',
            50: 'dazzle',
            51: 'rattletrap',
            52: 'leshrac',
            53: 'furion',
            54: 'life_stealer',
            55: 'dark_seer',
            56: 'clinkz',
            57: 'omniknight',
            58: 'enchantress',
            59: 'huskar',
            60: 'night_stalker',
            61: 'broodmother',
            62: 'bounty_hunter',
            63: 'weaver',
            64: 'jakiro',
            65: 'batrider',
            66: 'chen',
            67: 'spectre',
            68: 'ancient_apparition',
            69: 'doom_bringer',
            70: 'ursa',
            71: 'spirit_breaker',
            72: 'gyrocopter',
            73: 'alchemist',
            74: 'invoker',
            75: 'silencer',
            76: 'obsidian_destroyer',
            77: 'lycan',
            78: 'brewmaster',
            79: 'shadow_demon',
            80: 'lone_druid',
            81: 'chaos_knight',
            82: 'meepo',
            83: 'treant',
            84: 'ogre_magi',
            85: 'undying',
            86: 'rubick',
            87: 'disruptor',
            88: 'nyx_assassin',
            89: 'naga_siren',
            90: 'keeper_of_the_light',
            91: 'wisp',
            92: 'visage',
            93: 'slark',
            94: 'medusa',
            95: 'troll_warlord',
            96: 'centaur',
            97: 'magnataur',
            98: 'shredder',
            99: 'bristleback',
            100: 'tusk',
            101: 'skywrath_mage',
            102: 'abaddon',
            103: 'elder_titan',
            104: 'legion_commander',
            105: 'techies',
            106: 'ember_spirit',
            107: 'earth_spirit',
            108: 'abyssal_underlord',
            109: 'terrorblade',
            110: 'phoenix',
            111: 'oracle',
            112: 'winter_wyvern',
            113: 'arc_warden',
            114: 'monkey_king',
            119: 'dark_willow',
            120: 'pangolier',
            121: 'grimstroke',
            123: 'hoodwink',
            126: 'void_spirit',
            128: 'snapfire',
            129: 'mars',
            135: 'dawnbreaker',
            136: 'marci',
            137: 'primal_beast',
            138: 'muerta'
        };
        
        return heroNames[heroId] || `hero_${heroId}`;
    };

    const fetchUserData = async (token) => {
        try {
            const response = await api.get('/api/users/me', {
                headers: { Authorization: `Bearer ${token}` }
            });
            setUser(response.data);
            setNewUsername(response.data.username);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (response.data.avatar_url) {
                setAvatar(response.data.avatar_url);
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–Ω–≥ Premier –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (response.data.cs2_premier_rank) {
                setPremierRank(response.data.cs2_premier_rank);
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CS2 —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–∏–≤—è–∑–∫–µ Steam
            // (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å steam_id –∏ –Ω–µ—Ç cs2_premier_rank)
            if (response.data.steam_id && response.data.cs2_premier_rank === 0) {
                fetchCs2Stats(response.data.steam_id);
            }
        } catch (err) {
            setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    };

    const fetchCs2Stats = async (steamId) => {
        const id = steamId || (user && user.steam_id);
        if (!id) return;
        
        setIsLoadingCs2Stats(true);
        try {
            const response = await api.get(`/api/playerStats/${id}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            if (response.data.success) {
                setCs2Stats(response.data.data);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥ Premier –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
                if (response.data.premier_rank !== undefined) {
                    setPremierRank(response.data.premier_rank);
                }
            }
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ CS2');
        } finally {
            setIsLoadingCs2Stats(false);
        }
    };   

    const fetchStats = async (token) => {
        try {
            // üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–ï–†–ï–°–ß–ï–¢ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
            setIsRecalculating(true);
            setRecalculationStatus('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤...');
            setRecalculationError('');
            
            try {
                const recalcResponse = await api.post('/api/users/recalculate-tournament-stats', {}, {
                    headers: { Authorization: `Bearer ${token}` }
                });
                
                if (recalcResponse.data.success) {
                    const details = recalcResponse.data.details;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    if (details.total === 0) {
                        setRecalculationStatus('–¢—É—Ä–Ω–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    } else if (details.errors === 0) {
                        setRecalculationStatus(
                            `‚úÖ ${recalcResponse.data.statusMessage || `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${details.updated} –∏–∑ ${details.total} —Ç—É—Ä–Ω–∏—Ä–æ–≤`}`
                        );
                    } else {
                        setRecalculationStatus(
                            `‚ö†Ô∏è ${recalcResponse.data.statusMessage || `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${details.updated} –∏–∑ ${details.total}, –æ—à–∏–±–æ–∫: ${details.errors}`}`
                        );
                    }
                    
                    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞:', {
                        total: details.total,
                        updated: details.updated,
                        skipped: details.skipped,
                        errors: details.errors
                    });
                } else {
                    setRecalculationError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
                }
            } catch (recalcErr) {
                console.log('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω:', recalcErr.response?.data);
                
                const errorData = recalcErr.response?.data;
                
                // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                if (errorData?.needsTableCreation) {
                    setRecalculationError('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                } else if (errorData?.sqlErrorCode === '23505') {
                    setRecalculationError('‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                } else if (errorData?.sqlErrorCode === '23503') {
                    setRecalculationError('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                } else if (recalcErr.response?.status === 500) {
                    setRecalculationError('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                } else {
                    setRecalculationError('‚ö†Ô∏è –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                }
                
                // Graceful degradation - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å
            setTimeout(() => {
                if (!recalculationError) {
                    setRecalculationStatus('–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
                }
            }, 500);
            
            const response = await api.get('/api/users/stats', {
                headers: { Authorization: `Bearer ${token}` }
            });
            setStats(response.data);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞
            if (!recalculationError) {
                setRecalculationStatus('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞');
                setTimeout(() => {
                    setRecalculationStatus('');
                }, 3000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö 3 —Å–µ–∫—É–Ω–¥—ã
            }
            
        } catch (err) {
            setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            setRecalculationError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        } finally {
            setIsRecalculating(false);
            // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            if (recalculationError) {
                setTimeout(() => {
                    setRecalculationError('');
                }, 8000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É 8 —Å–µ–∫—É–Ω–¥
            }
        }
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Dota 2
    const fetchDotaProfile = async () => {
        if (!user?.id) return;
        
        try {
            const response = await api.get(`/api/dota-stats/profile/${user.id}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            setDotaProfile(response.data);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (response.data.steam_id) {
                fetchDotaStats(response.data.steam_id);
            }
        } catch (err) {
            // –ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            setDotaProfile(null);
        }
    };

    const fetchDotaStats = async (steamId) => {
        if (!steamId) return;
        
        setIsLoadingDotaStats(true);
        try {
            const response = await api.get(`/api/dota-stats/player/${steamId}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            setDotaStats(response.data);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await api.post('/api/dota-stats/profile/save', {
                user_id: user.id,
                steam_id: steamId,
                dota_stats: response.data
            }, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
        } catch (err) {
            // Dota API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            setDotaStats(null);
        } finally {
            setIsLoadingDotaStats(false);
        }
    };

    const linkDotaSteam = async () => {
        if (!user?.steam_id) {
            setError('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ Steam –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"');
            return;
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π Steam ID
            const response = await api.get(`/api/dota-stats/player/${user.steam_id}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
            // –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await api.post('/api/dota-stats/profile/save', {
                user_id: user.id,
                steam_id: user.steam_id,
                dota_stats: response.data
            }, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });

            setDotaStats(response.data);
            setDotaProfile({ user_id: user.id, steam_id: user.steam_id, dota_stats: response.data });
            setError('');
        } catch (err) {
            setError('Dota API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    };

    const unlinkDotaSteam = async () => {
        try {
            await api.delete(`/api/dota-stats/profile/${user.id}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            setDotaProfile(null);
            setDotaStats(null);
            setError('');
        } catch (err) {
            setError('Dota API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    };

    const linkSteam = () => {
        const token = localStorage.getItem('token');
        if (token) {
            const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';
            const steamLoginUrl = `https://steamcommunity.com/openid/login?openid.ns=http://specs.openid.net/auth/2.0&openid.mode=checkid_setup&openid.return_to=${baseUrl}/api/users/steam-callback&openid.realm=${baseUrl}&openid.identity=http://specs.openid.net/auth/2.0/identifier_select&openid.claimed_id=http://specs.openid.net/auth/2.0/identifier_select`;
            window.location.href = steamLoginUrl;
        } else {
            setError('–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Steam');
        }
    };

    const handleSteamCallback = async (steamId, token) => {
        try {
            const response = await api.post('/api/users/link-steam', { steamId }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setUser(prevUser => prevUser ? { ...prevUser, steam_id: steamId, steam_url: `https://steamcommunity.com/profiles/${steamId}` } : null);
            setError('');
            window.history.replaceState({}, document.title, '/profile');
            
            // –ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ Steam –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CS2
            fetchCs2Stats(steamId);
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Steam');
        }
    };

    const unlinkSteam = async () => {
        const token = localStorage.getItem('token');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞
        if (!user.email) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ—á—Ç—É
            setShowEmailRequiredModal(true);
            return;
        }
        
        try {
            await api.post('/api/users/unlink-steam', {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setUser(prevUser => prevUser ? { ...prevUser, steam_id: null, steam_url: null } : null);
            setError('');
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ Steam');
        }
    };

    const unlinkFaceit = async () => {
        const token = localStorage.getItem('token');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞
        if (!user.email) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ—á—Ç—É
            setShowEmailRequiredModal(true);
            return;
        }
        
        try {
            await api.post('/api/users/unlink-faceit', {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setUser(prevUser => prevUser ? { ...prevUser, faceit_id: null } : null);
            setFaceitInfo(null);
            setError('');
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ FACEIT');
        }
    };

    const updateUsername = async () => {
        const token = localStorage.getItem('token');
        try {
            const response = await api.post('/api/users/update-username', { username: newUsername }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setUser(prevUser => prevUser ? { ...prevUser, username: newUsername } : null);
            setError('');
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞');
        }
    };

    const fetchAndSetSteamNickname = async () => {
        const token = localStorage.getItem('token');
        try {
            const response = await api.get('/api/users/steam-nickname', {
                headers: { Authorization: `Bearer ${token}` }
            });
            setSteamNickname(response.data.steamNickname);
            setShowModal(true);
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ Steam');
        }
    };

    const confirmSteamNickname = async () => {
        setNewUsername(steamNickname);
        await updateUsername();
        setShowModal(false);
    };

    const closeModal = () => {
        setShowModal(false);
    };

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const openEmailVerificationModal = async () => {
        setShowEmailVerificationModal(true);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ —Ä–∞–Ω–µ–µ
        const codeWasSentBefore = localStorage.getItem('verification_code_sent') === 'true';
        
        if (!codeWasSentBefore) {
            // –ï—Å–ª–∏ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
            await sendVerificationCode();
            localStorage.setItem('verification_code_sent', 'true');
        }
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeEmailVerificationModal = () => {
        setIsClosingModal(true);
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Å–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        setTimeout(() => {
            setShowEmailVerificationModal(false);
            setIsClosingModal(false);
            setVerificationCode('');
            setVerificationError(''); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        }, 300); // –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ CSS (0.3s)
    };

    const sendVerificationCode = async () => {
        if (isResendDisabled) return;
        
        try {
            const token = localStorage.getItem('token');
            await api.post('/api/users/verify-email', {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
            setVerificationError('');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            setIsResendDisabled(true);
            const countdownTime = 180; // 3 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            setResendCountdown(countdownTime);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ localStorage
            const endTime = Date.now() + countdownTime * 1000;
            localStorage.setItem('resendCodeEndTime', endTime.toString());
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
            startCountdown(countdownTime);
            
            setError('');
        } catch (err) {
            setVerificationError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        }
    };

    const startCountdown = (seconds) => {
        let remainingSeconds = seconds;
        const intervalId = setInterval(() => {
            remainingSeconds -= 1;
            setResendCountdown(remainingSeconds);
            
            if (remainingSeconds <= 0) {
                clearInterval(intervalId);
                setIsResendDisabled(false);
                setResendCountdown(0);
                localStorage.removeItem('resendCodeEndTime');
            }
        }, 1000);
    };

    const submitVerificationCode = async () => {
        if (verificationCode.length !== 6) {
            setVerificationError('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä');
            return;
        }
        
        try {
            const token = localStorage.getItem('token');
            await api.post('/api/users/confirm-email', { code: verificationCode }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setUser(prevUser => prevUser ? { ...prevUser, is_verified: true } : null);
            closeEmailVerificationModal();
            setError('');
        } catch (err) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –≤–º–µ—Å—Ç–æ –æ–±—â–µ–π –æ—à–∏–±–∫–∏
            setVerificationError(err.response?.data?.message || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    const handleCodeChange = (e) => {
        const value = e.target.value;
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –Ω–µ –±–æ–ª–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤
        const code = value.replace(/\D/g, '').slice(0, 6);
        setVerificationCode(code);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
    const handleCodePaste = async (e) => {
        e.preventDefault();
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
            const text = await navigator.clipboard.readText();
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            const code = text.replace(/\D/g, '').slice(0, 6);
            setVerificationCode(code);
        } catch (err) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞:', err);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–∫—Ä—ã—Ç–æ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ü–∏—Ñ—Ä
    const handleCodeContainerClick = () => {
        document.getElementById('hidden-code-input').focus();
    };

    // –î–æ–±–∞–≤–∏–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞, –∫–æ–≥–¥–∞ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
    useEffect(() => {
        if (verificationCode.length === 6) {
            submitVerificationCode();
        }
    }, [verificationCode]);

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            fetchUserData(token);
            fetchStats(token);
            const urlParams = new URLSearchParams(window.location.search);
            const steamId = urlParams.get('steamId');
            if (steamId) {
                handleSteamCallback(steamId, token);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            fetchFriends();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
            fetchFriendRequests();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
            fetchSentFriendRequests();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
            fetchMatchHistory();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            fetchUserOrganizations();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            fetchOrganizationRequest();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å Dota 2
            fetchDotaProfile();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            fetchUserTournaments();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        const savedEndTime = localStorage.getItem('resendCodeEndTime');
        if (savedEndTime) {
            const endTime = parseInt(savedEndTime);
            const now = Date.now();
            const remainingTime = Math.max(0, Math.floor((endTime - now) / 1000));
            
            if (remainingTime > 0) {
                setIsResendDisabled(true);
                setResendCountdown(remainingTime);
                startCountdown(remainingTime);
            } else {
                localStorage.removeItem('resendCodeEndTime');
            }
        }
    }, []);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∏–∫–Ω–µ–π–º Steam –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ user.steam_id
    useEffect(() => {
        if (user && user.steam_id) {
            fetchSteamNickname();
        }
    }, [user?.steam_id]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ FACEit –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ user.faceit_id
    useEffect(() => {
        if (user && user.faceit_id) {
            fetchFaceitInfo();
        }
    }, [user?.faceit_id]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å Dota 2 –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ user.id
    useEffect(() => {
        if (user && user.id) {
            fetchDotaProfile();
        }
    }, [user?.id]);

    const fetchSteamNickname = async () => {
        const token = localStorage.getItem('token');
        try {
            const response = await api.get('/api/users/steam-nickname', {
                headers: { Authorization: `Bearer ${token}` }
            });
            setSteamNickname(response.data.steamNickname);
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ Steam');
        }
    };

    const fetchFaceitInfo = async () => {
        const token = localStorage.getItem('token');
        setIsLoadingFaceitInfo(true);
        try {
            const response = await api.get('/api/users/faceit-info', {
                headers: { Authorization: `Bearer ${token}` }
            });
            setFaceitInfo(response.data);
            setError('');
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ FACEit');
        } finally {
            setIsLoadingFaceitInfo(false);
        }
    };

    useEffect(() => {
        const params = new URLSearchParams(window.location.search);
        if (params.get('faceit') === 'success') {
            fetchUserData(localStorage.getItem('token'));
        } else if (params.get('error')) {
            setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ FACEIT: ${params.get('error')}`);
        }
    }, []);

    const linkFaceit = () => {
        const token = localStorage.getItem('token');
        const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';
        window.location.href = `${baseUrl}/api/users/link-faceit?token=${token}`;
    };

    const renderRankGroups = () => {
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–∞–Ω–≥–∞ Premier, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (!premierRank) {
            return <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–Ω–≥–µ Premier</p>;
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CS2, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
        if (cs2Stats && cs2Stats.ranks) {
            // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
            let filteredRanks = cs2Stats.ranks.filter(url => !url.includes('logo-cs2.png'));
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ logo-csgo.png, –æ—Ç—Ä–µ–∑–∞–µ–º –µ—ë –∏ –≤—Å–µ, —á—Ç–æ –ø–æ—Å–ª–µ
            const csgoIdx = filteredRanks.findIndex(url => url.includes('logo-csgo.png'));
            if (csgoIdx !== -1) {
                filteredRanks = filteredRanks.slice(0, csgoIdx);
            }
            
            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–Ω–≥ premier.png
            const lastPremierIndex = filteredRanks.findLastIndex(url => url.includes('premier.png'));
            
            // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω premier.png, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            if (lastPremierIndex !== -1) {
                return (
                    <div>
                        <div className="rank-row">
                            <div className="rank-group">
                                <img src={filteredRanks[lastPremierIndex]} alt="premier" className="rank-image" />
                            </div>
                            <div className="rank-win">
                                <span>{premierRank}</span>
                            </div>
                        </div>
                    </div>
                );
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–Ω–≥–∞, –Ω–æ –µ—Å—Ç—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
        return (
            <div className="rank-row">
                <p>Premier Rank: {premierRank}</p>
            </div>
        );
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—á—Ç—ã
    const openAddEmailModal = () => {
        setShowAddEmailModal(true);
        setAddEmailError('');
    };

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—á—Ç—ã
    const closeAddEmailModal = () => {
        setIsClosingModal(true);
        
        setTimeout(() => {
            setShowAddEmailModal(false);
            setIsClosingModal(false);
            setNewEmail('');
            setAddEmailError('');
        }, 300);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ—á—Ç—ã
    const saveEmail = async () => {
        if (!newEmail || !newEmail.includes('@')) {
            setAddEmailError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
            return;
        }
        
        try {
            const token = localStorage.getItem('token');
            await api.post('/api/users/update-email', { email: newEmail }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º email
            setUser(prevUser => prevUser ? { ...prevUser, email: newEmail, is_verified: false } : null);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è email
            closeAddEmailModal();
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
            setShowEmailVerificationModal(true);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            await sendVerificationCode();
            localStorage.setItem('verification_code_sent', 'true');
            
        } catch (err) {
            setAddEmailError(err.response?.data?.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email');
        }
    };

    // –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ—á—Ç—É
    const closeEmailRequiredModal = () => {
        setIsClosingModal(true);
        
        setTimeout(() => {
            setShowEmailRequiredModal(false);
            setIsClosingModal(false);
        }, 300);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
    const handleAvatarUpload = async (event) => {
        const file = event.target.files[0];
        if (!file) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ (—Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        if (!file.type.startsWith('image/')) {
            setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –ú–ë)
        const maxSize = 5 * 1024 * 1024; // 5 –ú–ë –≤ –±–∞–π—Ç–∞—Ö
        if (file.size > maxSize) {
            setError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë');
            return;
        }

        const formData = new FormData();
        formData.append('avatar', file);

        setUploadingAvatar(true);
        try {
            const token = localStorage.getItem('token');
            // –£–±–∏—Ä–∞–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ Content-Type, —á—Ç–æ–±—ã axios —Å–∞–º –ø—Ä–æ—Å—Ç–∞–≤–∏–ª boundary
            const response = await api.post('/api/users/upload-avatar', formData, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            setAvatar(response.data.avatar_url);
            setUser(prevUser => ({...prevUser, avatar_url: response.data.avatar_url}));
            setError('');
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞');
        } finally {
            setUploadingAvatar(false);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ Steam
    const setAvatarFromSteam = async () => {
        if (!user.steam_id) {
            setError('Steam –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω');
            return;
        }

        try {
            const token = localStorage.getItem('token');
            const response = await api.post('/api/users/set-steam-avatar', {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            setAvatar(response.data.avatar_url);
            setUser(prevUser => ({...prevUser, avatar_url: response.data.avatar_url}));
            setError('');
            setShowAvatarModal(false);
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ Steam');
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ FACEIT
    const setAvatarFromFaceit = async () => {
        if (!user.faceit_id) {
            setError('FACEIT –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω');
            return;
        }

        try {
            const token = localStorage.getItem('token');
            const response = await api.post('/api/users/set-faceit-avatar', {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            setAvatar(response.data.avatar_url);
            setUser(prevUser => ({...prevUser, avatar_url: response.data.avatar_url}));
            setError('');
            setShowAvatarModal(false);
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ FACEIT');
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    const triggerFileInput = () => {
        fileInputRef.current.click();
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞
    const openAvatarModal = () => {
        setShowAvatarModal(true);
    };

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞
    const closeAvatarModal = () => {
        setShowAvatarModal(false);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
    const fetchFriends = async () => {
        setLoadingFriends(true);
        try {
            const token = localStorage.getItem('token');
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
            const response = await api.get('/api/friends', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏
            const acceptedFriends = response.data.filter(f => f.status === 'accepted');
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
            const friendsWithDetails = await Promise.all(
                acceptedFriends.map(async (friend) => {
                    try {
                        const detailsResponse = await api.get(`/api/users/profile/${friend.friend.id}`, {
                            headers: { Authorization: `Bearer ${token}` }
                        });
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –æ–Ω–ª–∞–π–Ω
                        return {
                            ...friend,
                            friend: {
                                ...friend.friend,
                                online_status: detailsResponse.data.online_status
                            }
                        };
                    } catch (err) {
                        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –¥—Ä—É–≥–∞ ${friend.friend.id}:`, err);
                        return friend; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    }
                })
            );
            
            setFriends(friendsWithDetails);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π:', err);
        } finally {
            setLoadingFriends(false);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è
    const fetchFriendRequests = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.get('/api/friends/requests/incoming', {
                headers: { Authorization: `Bearer ${token}` }
            });
            setFriendRequests(response.data);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è:', err);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
    const acceptFriendRequest = async (requestId) => {
        try {
            const token = localStorage.getItem('token');
            await api.post('/api/friends/accept', { requestId }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥—Ä—É–∑–µ–π –∏ –∑–∞—è–≤–æ–∫
            fetchFriends();
            fetchFriendRequests();
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è');
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
    const rejectFriendRequest = async (requestId) => {
        try {
            const token = localStorage.getItem('token');
            await api.post('/api/friends/reject', { requestId }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
            fetchFriendRequests();
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è');
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–∑–µ–π
    const removeFriend = async (friendId) => {
        try {
            const token = localStorage.getItem('token');
            await api.delete(`/api/friends/${friendId}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
            fetchFriends();
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–∑–µ–π');
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
    const fetchMatchHistory = async () => {
        setLoadingMatchHistory(true);
        try {
            const token = localStorage.getItem('token');
            const response = await api.get('/api/users/match-history', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMatchHistory(response.data || []);
        } catch (err) {
            // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            setMatchHistory([]);
        } finally {
            setLoadingMatchHistory(false);
        }
    };

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
    const switchTab = (tabName) => {
        setActiveTab(tabName);
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
    const openMatchHistoryModal = () => {
        setShowMatchHistoryModal(true);
    };

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
    const closeMatchHistoryModal = () => {
        setIsClosingModal(true);
        
        setTimeout(() => {
            setShowMatchHistoryModal(false);
            setIsClosingModal(false);
        }, 300);
    };

    // Rendering last 5 matches
    const renderLastFiveMatches = () => {
        if (loadingMatchHistory) {
            return <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π...</p>;
        }

        const lastFive = matchHistory.slice(0, 5);
        
        if (lastFive.length === 0) {
            return <p>–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π</p>;
        }

        return (
            <div className="recent-matches">
                <h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∞—Ç—á–µ–π</h4>
                <div className="matches-list">
                    {lastFive.map((match, index) => (
                        <div key={index} className={`match-item ${match.result === 'win' ? 'win' : 'loss'}`}>
                            <div className="match-date">{new Date(match.date).toLocaleDateString()}</div>
                            <div className="match-info">
                                <span className="match-opponent">{match.opponent}</span>
                                <span className="match-score">{match.score}</span>
                            </div>
                            <div className="match-tournament">
                                <a href={`/tournament/${match.tournament_id}`}>{match.tournament_name}</a>
                            </div>
                        </div>
                    ))}
                </div>
                <button className="view-all-btn" onClick={openMatchHistoryModal}>
                    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—Ç—á–∏
                </button>
            </div>
        );
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω
    const getOnlineStatusClass = (status) => {
        if (!status) return '';
        
        if (status === 'online') {
            return 'status-online';
        } else {
            return 'status-offline';
        }
    };

    // Render friend item with additional info on hover
    const renderFriendItem = (friend) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        const onlineStatus = friend.friend.online_status || 'offline';
        
        return (
            <div key={friend.id} className="friend-card">
                <div className="friend-card-content">
                    <img 
                        src={ensureHttps(friend.friend.avatar_url) || '/default-avatar.png'} 
                        alt={friend.friend.username} 
                        className="friend-avatar"
                    />
                    <div className="friend-info">
                        <a 
                            href={isCurrentUser(friend.friend.id) ? `/profile` : `/user/${friend.friend.id}`} 
                            className="friend-username"
                            title={friend.friend.username}
                        >
                            {friend.friend.username}
                        </a>
                        <div className={`friend-status ${getOnlineStatusClass(onlineStatus)}`}>
                            {onlineStatus === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–ù–µ –≤ —Å–µ—Ç–∏'}
                        </div>
                        {onlineStatus === 'offline' && friend.friend.last_online && (
                            <div className="friend-last-online">
                                –ë—ã–ª –≤ —Å–µ—Ç–∏: {new Date(friend.friend.last_online).toLocaleDateString('ru-RU')}
                            </div>
                        )}
                    </div>
                </div>
                <div className="friend-actions">
                    <button 
                        className="remove-friend-btn" 
                        onClick={() => removeFriend(friend.friend.id)}
                        title="–£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π"
                    >
                        ‚úï
                    </button>
                </div>
            </div>
        );
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è
    const fetchSentFriendRequests = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.get('/api/friends/requests/outgoing', {
                headers: { Authorization: `Bearer ${token}` }
            });
            setSentFriendRequests(response.data);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è:', err);
        }
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
    const sendFriendRequest = async (userId) => {
        try {
            await api.post('/api/friends/request', { friendId: userId }, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            await fetchSentFriendRequests();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
            setSearchResults(prev => prev.map(user => {
                if (user.id === userId) {
                    return { ...user, requestSent: true };
                }
                return user;
            }));
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è:', err);
        }
    };

    // –î–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è
    const cancelSentFriendRequest = async (requestId) => {
        try {
            const token = localStorage.getItem('token');
            await api.delete(`/api/friends/requests/outgoing/${requestId}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–æ–∫
            await fetchSentFriendRequests();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∏—Å—Ö–æ–¥—è—â–µ–π –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è:', err);
        }
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
    const handleSearchChange = async (e) => {
        const value = e.target.value;
        setSearchQuery(value);
        
        // Clear any existing timeout
        if (searchTimeoutRef.current) {
            clearTimeout(searchTimeoutRef.current);
        }
        
        if (value.length < 2) {
            setSearchResults([]);
            setSearchPerformed(false);
            return;
        }
        
        // Set a new timeout (debounce)
        searchTimeoutRef.current = setTimeout(async () => {
            setIsSearching(true);
            try {
                const response = await api.get(`/api/users/search?query=${encodeURIComponent(value)}`, {
                    headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
                });
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –¥—Ä—É–∑—å—è
                const data = response.data;
                const friendIds = friends.map(f => f.friend.id);
                const sentRequestIds = sentFriendRequests.map(req => req.friendId);
                
                // –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö
                const filtered = data.filter(user => !friendIds.includes(user.id));
                
                // –û—Ç–º–µ—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞—è–≤–∫–∏
                const markedResults = filtered.map(user => ({
                    ...user,
                    requestSent: sentRequestIds.includes(user.id)
                }));
                
                setSearchResults(markedResults);
                setSearchPerformed(true);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
            } finally {
                setIsSearching(false);
            }
        }, 500); // 500ms delay before executing search
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    const handleOrganizationInputChange = (e) => {
        const { name, value } = e.target;
        setOrganizationData(prev => ({
            ...prev,
            [name]: value
        }));
        // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        if (organizationError) {
            setOrganizationError('');
        }
    };

    const handleOrganizationLogoChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if (!file.type.startsWith('image/')) {
                setOrganizationError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
            if (file.size > 5 * 1024 * 1024) {
                setOrganizationError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
                return;
            }
            
            setOrganizationLogo(file);
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
            const reader = new FileReader();
            reader.onload = (e) => {
                setOrganizationLogoPreview(e.target.result);
            };
            reader.readAsDataURL(file);
            
            if (organizationError) {
                setOrganizationError('');
            }
        }
    };

    const triggerOrganizationFileInput = () => {
        organizationFileInputRef.current?.click();
    };

    const removeOrganizationLogo = () => {
        setOrganizationLogo(null);
        setOrganizationLogoPreview(null);
        if (organizationFileInputRef.current) {
            organizationFileInputRef.current.value = '';
        }
    };

    const submitOrganizationRequest = async (e) => {
        e.preventDefault();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!organizationData.organizationName.trim() || !organizationData.description.trim()) {
            setOrganizationError('–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            return;
        }
        
        setIsSubmittingOrganization(true);
        setOrganizationError('');
        setOrganizationSuccess('');
        
        try {
            const token = localStorage.getItem('token');
            const formData = new FormData();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            Object.keys(organizationData).forEach(key => {
                if (organizationData[key]) {
                    formData.append(key, organizationData[key]);
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (organizationLogo) {
                formData.append('logo', organizationLogo);
            }
            
            const response = await api.post('/api/users/create-organization-request', formData, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'multipart/form-data'
                }
            });
            
            setOrganizationSuccess('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.');
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            setOrganizationData({
                organizationName: '',
                description: '',
                websiteUrl: '',
                vkUrl: '',
                telegramUrl: ''
            });
            removeOrganizationLogo();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            fetchOrganizationRequest();
            
        } catch (err) {
            setOrganizationError(err.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É');
        } finally {
            setIsSubmittingOrganization(false);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fetchUserOrganizations = async () => {
        setLoadingOrganizations(true);
        try {
            const token = localStorage.getItem('token');
            const response = await api.get('/api/organizers/user/my-organizations', {
                headers: { Authorization: `Bearer ${token}` }
            });
            setUserOrganizations(response.data || []);
        } catch (err) {
            // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            setUserOrganizations([]);
        } finally {
            setLoadingOrganizations(false);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    const fetchOrganizationRequest = async () => {
        setLoadingRequest(true);
        try {
            const token = localStorage.getItem('token');
            const response = await api.get('/api/users/organization-request-status', {
                headers: { Authorization: `Bearer ${token}` }
            });
            setOrganizationRequest(response.data);
        } catch (err) {
            // 404 –¥–ª—è –∑–∞—è–≤–∫–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
            setOrganizationRequest(null);
        } finally {
            setLoadingRequest(false);
        }
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ –∏–≥—Ä–æ–∫–∞
    const fetchUserTournaments = async () => {
        setLoadingTournaments(true);
        try {
            const token = localStorage.getItem('token');
            const response = await api.get('/api/users/tournaments', {
                headers: { Authorization: `Bearer ${token}` }
            });
            setUserTournaments(response.data);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            setUserTournaments([]);
        } finally {
            setLoadingTournaments(false);
        }
    };

    const handleTournamentFilterChange = (e) => {
        const { name, value } = e.target;
        setTournamentFilters((prev) => ({ ...prev, [name]: value }));
    };

    const handleTournamentSort = (field) => {
        setTournamentSort((prev) => ({
            field,
            direction: prev.field === field && prev.direction === 'asc' ? 'desc' : 'asc',
        }));
    };

    const applyTournamentFilter = (field, value) => {
        setTournamentFilters((prev) => ({ ...prev, [field]: value }));
        setActiveTournamentFilter(null);
    };

    const clearTournamentFilter = (field) => {
        setTournamentFilters((prev) => ({ ...prev, [field]: field === 'start_date' ? null : '' }));
        setActiveTournamentFilter(null);
    };

    const clearAllTournamentFilters = () => {
        setTournamentFilters({
            game: '',
            name: '',
            format: '',
            status: '',
            start_date: null,
        });
        setActiveTournamentFilter(null);
    };

    const toggleTournamentFilter = (filterName) => {
        const newActiveFilter = activeTournamentFilter === filterName ? null : filterName;
        setActiveTournamentFilter(newActiveFilter);
    };

    const uniqueTournamentValues = (field) => {
        let values = [...new Set(userTournaments.map((t) => t[field]).filter(Boolean))].sort();
        return values;
    };

    const hasActiveTournamentFilters = () => {
        return tournamentFilters.game !== '' || tournamentFilters.name !== '' || tournamentFilters.format !== '' || 
               tournamentFilters.status !== '' || tournamentFilters.start_date !== null;
    };

    const filteredAndSortedUserTournaments = userTournaments
        .filter((tournament) => {
            return (
                (tournamentFilters.game === '' || tournament.game === tournamentFilters.game) &&
                (tournamentFilters.name === '' || tournament.name?.toLowerCase().includes(tournamentFilters.name.toLowerCase())) &&
                (tournamentFilters.format === '' || tournament.format === tournamentFilters.format) &&
                (tournamentFilters.status === '' || tournament.status === tournamentFilters.status) &&
                (tournamentFilters.start_date === null ||
                    new Date(tournament.start_date).toLocaleDateString('ru-RU') ===
                    tournamentFilters.start_date.toLocaleDateString('ru-RU'))
            );
        })
        .sort((a, b) => {
            if (!tournamentSort.field) return 0;
            if (tournamentSort.field === 'participant_count') {
                return tournamentSort.direction === 'asc'
                    ? a.participant_count - b.participant_count
                    : b.participant_count - a.participant_count;
            }
            if (tournamentSort.field === 'start_date') {
                return tournamentSort.direction === 'asc'
                    ? new Date(a.start_date) - new Date(b.start_date)
                    : new Date(b.start_date) - new Date(a.start_date);
            }
            return 0;
        });

    if (!user) return <div className="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

    return (
        <div className="profile-page">
            {/* –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω */}
            <div className="profile-layout">
                {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
                <aside className="profile-aside">
                    {/* –°–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                    <div className="user-section">
                        <div className="user-avatar-wrapper">
                            <img 
                                src={ensureHttps(avatar) || '/default-avatar.png'} 
                                alt="User avatar" 
                                className="user-avatar"
                                onClick={openAvatarModal}
                            />
                            <button className="avatar-edit-btn" onClick={openAvatarModal}>
                                <span className="icon">‚úé</span>
                            </button>
                            {user?.online_status === 'online' && (
                                <div className="online-indicator"></div>
                            )}
                        </div>
                        
                        <h1 className="user-name">{user?.username}</h1>
                        <p className="user-id">ID: {user?.id}</p>
                        
                        {/* –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                        <div className="user-quick-stats">
                            <div className="quick-stat">
                                <span className="stat-value">
                                    {stats ? (stats.solo.wins || 0) + (stats.team.wins || 0) : 0}
                                </span>
                                <span className="stat-label">–ü–æ–±–µ–¥</span>
                            </div>
                            <div className="quick-stat">
                                <span className="stat-value">
                                    {stats?.tournaments ? stats.tournaments.length : 0}
                                </span>
                                <span className="stat-label">–¢—É—Ä–Ω–∏—Ä–æ–≤</span>
                            </div>
                            <div className="quick-stat">
                                <span className="stat-value">
                                    {(() => {
                                        if (!stats) return '0%';
                                        const totalWins = (stats.solo.wins || 0) + (stats.team.wins || 0);
                                        const totalMatches = totalWins + (stats.solo.losses || 0) + (stats.team.losses || 0);
                                        return totalMatches > 0 ? Math.round((totalWins / totalMatches) * 100) + '%' : '0%';
                                    })()}
                                </span>
                                <span className="stat-label">–í–∏–Ω—Ä–µ–π—Ç</span>
                            </div>
                        </div>
                    </div>
                    
                    {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
                    <nav className="profile-nav">
                        <button 
                            className={`nav-item ${activeTab === 'main' ? 'active' : ''}`}
                            onClick={() => switchTab('main')}
                        >
                            <span className="nav-icon">‚öô</span>
                            <span className="nav-text">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
                        </button>
                        <button 
                            className={`nav-item ${activeTab === 'stats' ? 'active' : ''}`}
                            onClick={() => switchTab('stats')}
                        >
                            <span className="nav-icon">üìä</span>
                            <span className="nav-text">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>
                        </button>
                        <button 
                            className={`nav-item ${activeTab === 'friends' ? 'active' : ''}`}
                            onClick={() => switchTab('friends')}
                        >
                            <span className="nav-icon">üë•</span>
                            <span className="nav-text">–î—Ä—É–∑—å—è</span>
                            {friendRequests.length > 0 && (
                                <span className="nav-badge">{friendRequests.length}</span>
                            )}
                        </button>
                        <button 
                            className={`nav-item ${activeTab === 'organization' ? 'active' : ''}`}
                            onClick={() => switchTab('organization')}
                        >
                            <span className="nav-icon">üè¢</span>
                            <span className="nav-text">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</span>
                        </button>
                        <button 
                            className={`nav-item ${activeTab === 'tournaments' ? 'active' : ''}`}
                            onClick={() => switchTab('tournaments')}
                        >
                            <span className="nav-icon">üèÜ</span>
                            <span className="nav-text">–¢—É—Ä–Ω–∏—Ä—ã</span>
                        </button>
                        <button 
                            className={`nav-item ${activeTab === 'v4analytics' ? 'active' : ''}`}
                            onClick={() => switchTab('v4analytics')}
                        >
                            <span className="nav-icon">üî•</span>
                            <span className="nav-text">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ V4</span>
                            <span className="nav-badge new">NEW</span>
                        </button>
                    </nav>
                    
                    {/* –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ */}
                    <div className="account-status">
                        <h3 className="status-title">–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞</h3>
                        <div className="status-items">
                            <div className={`status-item ${user?.email ? 'connected' : ''}`}>
                                <span className="status-icon">‚úâ</span>
                                <span className="status-text">
                                    {user?.email ? 'Email –ø—Ä–∏–≤—è–∑–∞–Ω' : 'Email –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}
                                </span>
                            </div>
                            <div className={`status-item ${user?.steam_id ? 'connected' : ''}`}>
                                <span className="status-icon">üéÆ</span>
                                <span className="status-text">
                                    {user?.steam_id ? 'Steam –ø—Ä–∏–≤—è–∑–∞–Ω' : 'Steam –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}
                                </span>
                            </div>
                            <div className={`status-item ${user?.faceit_id ? 'connected' : ''}`}>
                                <span className="status-icon">üéØ</span>
                                <span className="status-text">
                                    {user?.faceit_id ? 'FACEIT –ø—Ä–∏–≤—è–∑–∞–Ω' : 'FACEIT –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}
                                </span>
                            </div>
                        </div>
                    </div>
                </aside>
                
                {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
                <main className="profile-main">
                    {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
                    {error && (
                        <div className="notification error">
                            <span className="notification-icon">‚ö†</span>
                            <span className="notification-text">{error}</span>
                            <button className="notification-close" onClick={() => setError('')}>√ó</button>
                        </div>
                    )}
                    
                    {!user?.email && (
                        <div className="notification warning">
                            <span className="notification-icon">‚ö†</span>
                            <div className="notification-content">
                                <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> 
                                <p>–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω email. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã.</p>
                            </div>
                            <button className="notification-action" onClick={openAddEmailModal}>
                                –ü—Ä–∏–≤—è–∑–∞—Ç—å email
                            </button>
                        </div>
                    )}
                    
                    {user?.email && !user?.is_verified && (
                        <div className="notification warning">
                            <span className="notification-icon">‚ö†</span>
                            <div className="notification-content">
                                <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong>
                                <p>–í–∞—à email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã.</p>
                            </div>
                            <button className="notification-action" onClick={openEmailVerificationModal}>
                                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
                            </button>
                        </div>
                    )}
                    
                    {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
                    <div className="tab-content">
                        {/* –í–∫–ª–∞–¥–∫–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                        {activeTab === 'main' && (
                            <div className="settings-tab">
                                <header className="tab-header">
                                    <h2 className="tab-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h2>
                                </header>
                                
                                <div className="settings-sections">
                                    {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                                    <section className="settings-section">
                                        <h3 className="section-title">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                                        <div className="settings-card">
                                            <div className="setting-item">
                                                <label className="setting-label">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                                                <div className="setting-control">
                                                    <input
                                                        type="text"
                                                        className="setting-input"
                                                        value={newUsername}
                                                        onChange={(e) => setNewUsername(e.target.value)}
                                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º"
                                                    />
                                                    <div className="setting-actions">
                                                        <button className="btn btn-primary" onClick={updateUsername}>
                                                            –ò–∑–º–µ–Ω–∏—Ç—å
                                                        </button>
                                                        {user?.steam_id && (
                                                            <button className="btn btn-secondary" onClick={fetchAndSetSteamNickname}>
                                                                –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Steam
                                                            </button>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div className="setting-item">
                                                <label className="setting-label">Email</label>
                                                <div className="setting-control">
                                                    <div className="setting-value">
                                                        {user?.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                                        {user?.email && (
                                                            <span className={`verification-badge ${user.is_verified ? 'verified' : 'unverified'}`}>
                                                                {user.is_verified ? '‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '‚ö† –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}
                                                            </span>
                                                        )}
                                                    </div>
                                                    <div className="setting-actions">
                                                        {!user?.email ? (
                                                            <button className="btn btn-primary" onClick={openAddEmailModal}>
                                                                –ü—Ä–∏–≤—è–∑–∞—Ç—å email
                                                            </button>
                                                        ) : !user.is_verified && (
                                                            <button className="btn btn-primary" onClick={openEmailVerificationModal}>
                                                                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
                                                            </button>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </section>
                                    
                                    {/* –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ */}
                                    <section className="settings-section">
                                        <h3 className="section-title">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h3>
                                        
                                        <div className="integration-card">
                                            <div className="integration-header">
                                                <div className="integration-info">
                                                    <img src="/steam-icon.svg" alt="Steam" className="integration-icon" />
                                                    <div>
                                                        <h4 className="integration-name">Steam</h4>
                                                        <p className="integration-status">
                                                            {user?.steam_url ? (
                                                                <>
                                                                    –ü—Ä–∏–≤—è–∑–∞–Ω: 
                                                                    <a href={user.steam_url} target="_blank" rel="noopener noreferrer" className="integration-link">
                                                                        {steamNickname || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
                                                                    </a>
                                                                </>
                                                            ) : (
                                                                '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'
                                                            )}
                                                        </p>
                                                    </div>
                                                </div>
                                                <div className="integration-actions">
                                                    {!user?.steam_url ? (
                                                        <button className="btn btn-primary" onClick={linkSteam}>
                                                            –ü—Ä–∏–≤—è–∑–∞—Ç—å
                                                        </button>
                                                    ) : (
                                                        <button className="btn btn-danger" onClick={unlinkSteam}>
                                                            –û—Ç–≤—è–∑–∞—Ç—å
                                                        </button>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div className="integration-card">
                                            <div className="integration-header">
                                                <div className="integration-info">
                                                    <img src="/faceit-icon.svg" alt="FACEIT" className="integration-icon" />
                                                    <div>
                                                        <h4 className="integration-name">FACEIT</h4>
                                                        <p className="integration-status">
                                                            {user?.faceit_id ? (
                                                                <>
                                                                    –ü—Ä–∏–≤—è–∑–∞–Ω: 
                                                                    {isLoadingFaceitInfo ? (
                                                                        '–ó–∞–≥—Ä—É–∑–∫–∞...'
                                                                    ) : faceitInfo ? (
                                                                        <a href={faceitInfo.faceitUrl} target="_blank" rel="noopener noreferrer" className="integration-link">
                                                                            {faceitInfo.faceitNickname}
                                                                        </a>
                                                                    ) : (
                                                                        user.faceit_id
                                                                    )}
                                                                </>
                                                            ) : (
                                                                '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'
                                                            )}
                                                        </p>
                                                    </div>
                                                </div>
                                                <div className="integration-actions">
                                                    {!user?.faceit_id ? (
                                                        <button className="btn btn-primary" onClick={linkFaceit}>
                                                            –ü—Ä–∏–≤—è–∑–∞—Ç—å
                                                        </button>
                                                    ) : (
                                                        <button className="btn btn-danger" onClick={unlinkFaceit}>
                                                            –û—Ç–≤—è–∑–∞—Ç—å
                                                        </button>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    </section>
                                </div>
                            </div>
                        )}
                        
                        {/* –í–∫–ª–∞–¥–∫–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                        {activeTab === 'stats' && (
                            <div className="stats-tab">
                                <header className="tab-header">
                                    <h2 className="tab-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                                    {(isRecalculating || recalculationStatus || recalculationError) && (
                                        <div className="recalculation-status">
                                            {isRecalculating && (
                                                <div className="status-message loading">
                                                    <span className="status-icon">‚ü≥</span>
                                                    {recalculationStatus || '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...'}
                                                </div>
                                            )}
                                            {!isRecalculating && recalculationStatus && (
                                                <div className="status-message success">
                                                    {recalculationStatus}
                                                </div>
                                            )}
                                            {recalculationError && (
                                                <div className="status-message error">
                                                    {recalculationError}
                                                </div>
                                            )}
                                        </div>
                                    )}
                                </header>
                                
                                {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                                <section className="stats-overview">
                                    <div className="stats-grid">
                                        <div className="stat-card">
                                            <div className="stat-icon">üéÆ</div>
                                            <div className="stat-content">
                                                <div className="stat-number">
                                                    {stats ? (stats.solo.wins || 0) + (stats.solo.losses || 0) + (stats.team.wins || 0) + (stats.team.losses || 0) : 0}
                                                </div>
                                                <div className="stat-description">–í—Å–µ–≥–æ –º–∞—Ç—á–µ–π</div>
                                            </div>
                                        </div>
                                        
                                        <div className="stat-card">
                                            <div className="stat-icon">üèÜ</div>
                                            <div className="stat-content">
                                                <div className="stat-number">
                                                    {stats?.tournaments ? stats.tournaments.length : 0}
                                                </div>
                                                <div className="stat-description">–¢—É—Ä–Ω–∏—Ä–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ</div>
                                            </div>
                                        </div>
                                        
                                        <div className="stat-card">
                                            <div className="stat-icon">ü•á</div>
                                            <div className="stat-content">
                                                <div className="stat-number">
                                                    {stats?.tournaments ? stats.tournaments.filter(t => t.result === '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å').length : 0}
                                                </div>
                                                <div className="stat-description">–¢—É—Ä–Ω–∏—Ä–æ–≤ –≤—ã–∏–≥—Ä–∞–Ω–æ</div>
                                            </div>
                                        </div>
                                        
                                        <div className="stat-card">
                                            <div className="stat-icon">üìà</div>
                                            <div className="stat-content">
                                                <div className="stat-number">
                                                    {(() => {
                                                        if (!stats) return '0%';
                                                        const totalWins = (stats.solo.wins || 0) + (stats.team.wins || 0);
                                                        const totalMatches = totalWins + (stats.solo.losses || 0) + (stats.team.losses || 0);
                                                        return totalMatches > 0 ? Math.round((totalWins / totalMatches) * 100) + '%' : '0%';
                                                    })()}
                                                </div>
                                                <div className="stat-description">–û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç</div>
                                            </div>
                                        </div>
                                    </div>
                                </section>
                                
                                {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ */}
                                <section className="recent-matches-section">
                                    <h3 className="section-title">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏</h3>
                                    {renderLastFiveMatches()}
                                </section>
                                
                                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º */}
                                {stats?.byGame && Object.keys(stats.byGame).length > 0 && (
                                    <section className="game-stats-section">
                                        <h3 className="section-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º</h3>
                                        <div className="game-stats-grid">
                                            {Object.entries(stats.byGame).map(([game, gameStats]) => {
                                                const totalSolo = gameStats.solo.wins + gameStats.solo.losses;
                                                const totalTeam = gameStats.team.wins + gameStats.team.losses;
                                                const soloWinRate = totalSolo > 0 ? ((gameStats.solo.wins / totalSolo) * 100).toFixed(1) : 0;
                                                const teamWinRate = totalTeam > 0 ? ((gameStats.team.wins / totalTeam) * 100).toFixed(1) : 0;
                                                
                                                return (
                                                    <div key={game} className="game-stat-card">
                                                        <div className="game-stat-header">
                                                            <h4 className="game-name">{game}</h4>
                                                        </div>
                                                        <div className="game-stat-content">
                                                            <div className="game-mode">
                                                                <h5>Solo</h5>
                                                                <div className="mode-stats">
                                                                    <div className="mode-stat">
                                                                        <span className="mode-stat-value">{gameStats.solo.wins}</span>
                                                                        <span className="mode-stat-label">–ü–æ–±–µ–¥</span>
                                                                    </div>
                                                                    <div className="mode-stat">
                                                                        <span className="mode-stat-value">{gameStats.solo.losses}</span>
                                                                        <span className="mode-stat-label">–ü–æ—Ä–∞–∂–µ–Ω–∏–π</span>
                                                                    </div>
                                                                    <div className="mode-stat">
                                                                        <span className="mode-stat-value">{soloWinRate}%</span>
                                                                        <span className="mode-stat-label">–í–∏–Ω—Ä–µ–π—Ç</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div className="game-mode">
                                                                <h5>Team</h5>
                                                                <div className="mode-stats">
                                                                    <div className="mode-stat">
                                                                        <span className="mode-stat-value">{gameStats.team.wins}</span>
                                                                        <span className="mode-stat-label">–ü–æ–±–µ–¥</span>
                                                                    </div>
                                                                    <div className="mode-stat">
                                                                        <span className="mode-stat-value">{gameStats.team.losses}</span>
                                                                        <span className="mode-stat-label">–ü–æ—Ä–∞–∂–µ–Ω–∏–π</span>
                                                                    </div>
                                                                    <div className="mode-stat">
                                                                        <span className="mode-stat-value">{teamWinRate}%</span>
                                                                        <span className="mode-stat-label">–í–∏–Ω—Ä–µ–π—Ç</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    </section>
                                )}
                                
                                {/* CS2 Stats */}
                                {user?.steam_url && (
                                    <section className="cs2-stats-section">
                                        <div className="section-header">
                                            <h3 className="section-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CS2</h3>
                                            {premierRank > 0 && (
                                                <button 
                                                    className="btn btn-secondary btn-sm" 
                                                    onClick={() => fetchCs2Stats()}
                                                    disabled={isLoadingCs2Stats}
                                                >
                                                    {isLoadingCs2Stats ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
                                                </button>
                                            )}
                                        </div>
                                        <div className="cs2-stats-content">
                                            {renderRankGroups()}
                                        </div>
                                    </section>
                                )}
                                
                                {/* FACEIT Stats */}
                                {faceitInfo && faceitInfo.elo > 0 && (
                                    <section className="faceit-stats-section">
                                        <h3 className="section-title">
                                            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FACEIT{faceitInfo.statsFrom === 'csgo' ? ' (CS:GO)' : ''}
                                        </h3>
                                        <div className="faceit-stats-content">
                                            <div className="faceit-main-stats">
                                                <div className="faceit-stat">
                                                    <span className="faceit-stat-value">{faceitInfo.elo}</span>
                                                    <span className="faceit-stat-label">ELO</span>
                                                </div>
                                                <div className="faceit-stat">
                                                    <span className="faceit-stat-value">{faceitInfo.level}</span>
                                                    <span className="faceit-stat-label">–£—Ä–æ–≤–µ–Ω—å</span>
                                                </div>
                                            </div>
                                            {faceitInfo.stats && (
                                                <div className="faceit-detailed-stats">
                                                    <div className="faceit-detail-stat">
                                                        <span className="detail-label">–ú–∞—Ç—á–∏:</span>
                                                        <span className="detail-value">{faceitInfo.stats.Matches || 0}</span>
                                                    </div>
                                                    <div className="faceit-detail-stat">
                                                        <span className="detail-label">–í–∏–Ω—Ä–µ–π—Ç:</span>
                                                        <span className="detail-value">{faceitInfo.stats['Win Rate %'] || '0'}%</span>
                                                    </div>
                                                    <div className="faceit-detail-stat">
                                                        <span className="detail-label">K/D:</span>
                                                        <span className="detail-value">{faceitInfo.stats['Average K/D Ratio'] || '0'}</span>
                                                    </div>
                                                    <div className="faceit-detail-stat">
                                                        <span className="detail-label">HS %:</span>
                                                        <span className="detail-value">{faceitInfo.stats['Average Headshots %'] || '0'}%</span>
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </section>
                                )}
                                
                                {/* Dota 2 Stats */}
                                <section className="dota-stats-section">
                                    <div className="section-header">
                                        <h3 className="section-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Dota 2</h3>
                                        {!dotaProfile && user?.steam_id && (
                                            <button 
                                                className="btn btn-secondary btn-sm" 
                                                onClick={linkDotaSteam}
                                                disabled={isLoadingDotaStats}
                                            >
                                                {isLoadingDotaStats ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'}
                                            </button>
                                        )}
                                    </div>
                                    <div className="dota-stats-content">
                                        {isLoadingDotaStats ? (
                                            <div className="loading-state">
                                                <div className="loading-spinner"></div>
                                                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Dota 2...</p>
                                            </div>
                                        ) : dotaStats ? (
                                            <div className="dota-stats-container">
                                                {/* –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ */}
                                                <div className="dota-profile-card">
                                                    <img 
                                                        src={dotaStats.profile?.avatarfull || '/default-avatar.png'} 
                                                        alt="Steam Avatar" 
                                                        className="dota-player-avatar" 
                                                    />
                                                    <div className="dota-player-info">
                                                        <h4>{dotaStats.profile?.personaname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</h4>
                                                        <p className="dota-account-id">Account ID: {dotaStats.profile?.account_id}</p>
                                                        {dotaStats.profile?.rank_tier && (
                                                            <p className="dota-rank">–ú–µ–¥–∞–ª—å: {dotaStats.profile.rank_tier}</p>
                                                        )}
                                                        {dotaStats.profile?.mmr_estimate && (
                                                            <p className="dota-mmr">MMR: ~{dotaStats.profile.mmr_estimate}</p>
                                                        )}
                                                    </div>
                                                    <button 
                                                        className="btn btn-danger btn-sm"
                                                        onClick={unlinkDotaSteam}
                                                    >
                                                        –û—Ç–≤—è–∑–∞—Ç—å
                                                    </button>
                                                </div>

                                                {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                                                <div className="dota-general-stats">
                                                    <div className="dota-stat">
                                                        <span className="dota-stat-value">{dotaStats.stats?.win || 0}</span>
                                                        <span className="dota-stat-label">–ü–æ–±–µ–¥</span>
                                                    </div>
                                                    <div className="dota-stat">
                                                        <span className="dota-stat-value">{dotaStats.stats?.lose || 0}</span>
                                                        <span className="dota-stat-label">–ü–æ—Ä–∞–∂–µ–Ω–∏–π</span>
                                                    </div>
                                                    <div className="dota-stat">
                                                        <span className="dota-stat-value">{dotaStats.stats?.winrate || 0}%</span>
                                                        <span className="dota-stat-label">–í–∏–Ω—Ä–µ–π—Ç</span>
                                                    </div>
                                                </div>

                                                {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ */}
                                                {dotaStats.recent_matches && dotaStats.recent_matches.length > 0 && (
                                                    <div className="dota-recent-matches">
                                                        <h5>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏</h5>
                                                        <div className="dota-matches-list">
                                                            {dotaStats.recent_matches.slice(0, 5).map((match, index) => (
                                                                <div key={index} className={`dota-match ${match.win ? 'win' : 'loss'}`}>
                                                                    <img 
                                                                        src={getHeroImageUrl(match.hero_id)} 
                                                                        alt={`Hero ${match.hero_id}`}
                                                                        className="dota-hero-icon"
                                                                        onError={(e) => {
                                                                            e.target.src = '/default-hero.png';
                                                                        }}
                                                                    />
                                                                    <div className="dota-match-kda">{match.kills}/{match.deaths}/{match.assists}</div>
                                                                    <div className="dota-match-duration">
                                                                        {Math.floor(match.duration / 60)}:{(match.duration % 60).toString().padStart(2, '0')}
                                                                    </div>
                                                                    <div className="dota-match-result">
                                                                        {match.win ? '–ü–æ–±–µ–¥–∞' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}
                                                                    </div>
                                                                </div>
                                                            ))}
                                                        </div>
                                                    </div>
                                                )}

                                                {/* –¢–æ–ø –≥–µ—Ä–æ–µ–≤ */}
                                                {dotaStats.top_heroes && dotaStats.top_heroes.length > 0 && (
                                                    <div className="dota-top-heroes">
                                                        <h5>–¢–æ–ø –≥–µ—Ä–æ–µ–≤</h5>
                                                        <div className="dota-heroes-grid">
                                                            {dotaStats.top_heroes.slice(0, 5).map((hero, index) => (
                                                                <div key={index} className="dota-hero-card">
                                                                    <img 
                                                                        src={getHeroImageUrl(hero.hero_id)} 
                                                                        alt={`Hero ${hero.hero_id}`}
                                                                        className="dota-hero-image"
                                                                        onError={(e) => {
                                                                            e.target.src = '/default-hero.png';
                                                                        }}
                                                                    />
                                                                    <div className="dota-hero-stats">
                                                                        <div className="hero-stat">
                                                                            <span className="hero-stat-value">{hero.games}</span>
                                                                            <span className="hero-stat-label">–ò–≥—Ä</span>
                                                                        </div>
                                                                        <div className="hero-stat">
                                                                            <span className="hero-stat-value">{hero.winrate}%</span>
                                                                            <span className="hero-stat-label">–í–∏–Ω—Ä–µ–π—Ç</span>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            ))}
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                        ) : !user?.steam_id ? (
                                            <div className="empty-state">
                                                <p>–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Dota 2 –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å Steam –∞–∫–∫–∞—É–Ω—Ç</p>
                                                <p className="empty-state-hint">–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ Steam</p>
                                            </div>
                                        ) : (
                                            <div className="empty-state">
                                                <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Dota 2 –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</p>
                                                <p className="empty-state-hint">–ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</p>
                                            </div>
                                        )}
                                    </div>
                                </section>
                                
                                {/* V4 Dashboard */}
                                <V4StatsDashboard
                                    v4Data={v4Data}
                                    stats={stats}
                                    requestEnhancedRecalculation={requestEnhancedRecalculation}
                                    isRecalculating={isRecalculating}
                                    recalculationStatus={recalculationStatus}
                                    recalculationError={recalculationError}
                                />
                            </div>
                        )}
                        
                        {/* V4 Analytics Tab */}
                        {activeTab === 'v4analytics' && (
                            <div className="v4-analytics-tab">
                                <header className="tab-header">
                                    <h2 className="tab-title">
                                        üî• –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ V4 ULTIMATE
                                        <span className="v4-badge">ULTIMATE</span>
                                    </h2>
                                </header>
                                
                                <div className="v4-content">
                                    <V4StatsDashboard
                                        v4Data={v4Data}
                                        stats={stats}
                                        requestEnhancedRecalculation={requestEnhancedRecalculation}
                                        isRecalculating={isRecalculating}
                                        recalculationStatus={recalculationStatus}
                                        recalculationError={recalculationError}
                                    />
                                </div>
                            </div>
                        )}
                        
                        {/* Friends Tab */}
                        {activeTab === 'friends' && (
                            <div className="friends-tab">
                                <header className="tab-header">
                                    <h2 className="tab-title">–î—Ä—É–∑—å—è</h2>
                                </header>
                                
                                {/* –ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π */}
                                <section className="friends-search-section">
                                    <div className="search-container">
                                        <div className="search-input-wrapper">
                                            <span className="search-icon">üîç</span>
                                            <input
                                                type="text"
                                                className="search-input"
                                                placeholder="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É..."
                                                value={searchQuery}
                                                onChange={handleSearchChange}
                                            />
                                        </div>
                                        
                                        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
                                        {searchResults.length > 0 && (
                                            <div className="search-results">
                                                {searchResults.map(user => (
                                                    <div key={user.id} className="search-result-item">
                                                        <img
                                                            src={ensureHttps(user.avatar_url) || '/default-avatar.png'}
                                                            alt={user.username}
                                                            className="search-result-avatar"
                                                        />
                                                        <div className="search-result-info">
                                                            <a href={`/user/${user.id}`} className="search-result-name">
                                                                {user.username}
                                                            </a>
                                                        </div>
                                                        <div className="search-result-action">
                                                            {user.requestSent ? (
                                                                <button className="btn btn-secondary btn-sm" disabled>
                                                                    –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
                                                                </button>
                                                            ) : (
                                                                <button 
                                                                    onClick={() => sendFriendRequest(user.id)} 
                                                                    className="btn btn-primary btn-sm"
                                                                >
                                                                    –î–æ–±–∞–≤–∏—Ç—å
                                                                </button>
                                                            )}
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                        
                                        {searchQuery.length >= 2 && searchResults.length === 0 && !isSearching && searchPerformed && (
                                            <div className="search-empty">
                                                <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                                            </div>
                                        )}
                                    </div>
                                </section>
                                
                                {/* –ó–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è */}
                                {friendRequests.length > 0 && (
                                    <section className="friend-requests-section">
                                        <h3 className="section-title">–í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏ ({friendRequests.length})</h3>
                                        <div className="friend-requests-list">
                                            {friendRequests.map(request => (
                                                <div key={request.id} className="friend-request-item">
                                                    <img
                                                        src={ensureHttps(request.user.avatar_url) || '/default-avatar.png'}
                                                        alt={request.user.username}
                                                        className="friend-request-avatar"
                                                    />
                                                    <div className="friend-request-info">
                                                        <a href={`/user/${request.user.id}`} className="friend-request-name">
                                                            {request.user.username}
                                                        </a>
                                                    </div>
                                                    <div className="friend-request-actions">
                                                        <button 
                                                            className="btn btn-success btn-sm" 
                                                            onClick={() => acceptFriendRequest(request.id)}
                                                        >
                                                            –ü—Ä–∏–Ω—è—Ç—å
                                                        </button>
                                                        <button 
                                                            className="btn btn-danger btn-sm" 
                                                            onClick={() => rejectFriendRequest(request.id)}
                                                        >
                                                            –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                                                        </button>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </section>
                                )}
                                
                                {/* –ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏ */}
                                {sentFriendRequests.length > 0 && (
                                    <section className="sent-requests-section">
                                        <h3 className="section-title">–ò—Å—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏ ({sentFriendRequests.length})</h3>
                                        <div className="sent-requests-list">
                                            {sentFriendRequests.map(request => (
                                                <div key={request.id} className="sent-request-item">
                                                    <img
                                                        src={ensureHttps(request.user.avatar_url) || '/default-avatar.png'}
                                                        alt={request.user.username}
                                                        className="sent-request-avatar"
                                                    />
                                                    <div className="sent-request-info">
                                                        <a href={`/user/${request.user.id}`} className="sent-request-name">
                                                            {request.user.username}
                                                        </a>
                                                    </div>
                                                    <div className="sent-request-actions">
                                                        <button
                                                            className="btn btn-danger btn-sm"
                                                            onClick={() => cancelSentFriendRequest(request.id)}
                                                        >
                                                            –û—Ç–º–µ–Ω–∏—Ç—å
                                                        </button>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </section>
                                )}
                                
                                {/* –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π */}
                                <section className="friends-list-section">
                                    <h3 className="section-title">–ú–æ–∏ –¥—Ä—É–∑—å—è ({friends.length})</h3>
                                    {loadingFriends ? (
                                        <div className="loading-state">
                                            <div className="loading-spinner"></div>
                                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π...</p>
                                        </div>
                                    ) : friends.length > 0 ? (
                                        <div className="friends-grid">
                                            {friends.map(friend => (
                                                <div key={friend.id} className="friend-card">
                                                    <div className="friend-avatar-wrapper">
                                                        <img 
                                                            src={ensureHttps(friend.friend.avatar_url) || '/default-avatar.png'} 
                                                            alt={friend.friend.username} 
                                                            className="friend-avatar"
                                                        />
                                                        <div className={`friend-status-indicator ${friend.friend.online_status || 'offline'}`}></div>
                                                    </div>
                                                    <div className="friend-info">
                                                        <a 
                                                            href={isCurrentUser(friend.friend.id) ? `/profile` : `/user/${friend.friend.id}`} 
                                                            className="friend-name"
                                                        >
                                                            {friend.friend.username}
                                                        </a>
                                                        <p className="friend-status">
                                                            {friend.friend.online_status === 'online' ? '–û–Ω–ª–∞–π–Ω' : 
                                                             friend.friend.last_online ? 
                                                             `–ë—ã–ª –≤ —Å–µ—Ç–∏: ${new Date(friend.friend.last_online).toLocaleDateString('ru-RU')}` : 
                                                             '–ù–µ –≤ —Å–µ—Ç–∏'}
                                                        </p>
                                                    </div>
                                                    <button 
                                                        className="friend-remove-btn" 
                                                        onClick={() => removeFriend(friend.friend.id)}
                                                        title="–£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π"
                                                    >
                                                        √ó
                                                    </button>
                                                </div>
                                            ))}
                                        </div>
                                    ) : (
                                        <div className="empty-state">
                                            <div className="empty-icon">üë•</div>
                                            <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</p>
                                            <p className="empty-state-hint">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–∑–µ–π</p>
                                        </div>
                                    )}
                                </section>
                            </div>
                        )}
                        
                        {/* Organization Tab */}
                        {activeTab === 'organization' && (
                            <div className="organization-tab">
                                <header className="tab-header">
                                    <h2 className="tab-title">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</h2>
                                </header>
                                
                                {loadingOrganizations || loadingRequest ? (
                                    <div className="loading-state">
                                        <div className="loading-spinner"></div>
                                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö...</p>
                                    </div>
                                ) : userOrganizations && userOrganizations.length > 0 ? (
                                    <section className="my-organizations-section">
                                        <h3 className="section-title">–ú–æ–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</h3>
                                        <div className="organizations-grid">
                                            {userOrganizations.map(org => (
                                                <div key={org.id} className="organization-card">
                                                    <div className="org-header">
                                                        <img 
                                                            src={ensureHttps(org.logo_url) || '/default-org-logo.png'}
                                                            alt={org.name}
                                                            className="org-logo"
                                                        />
                                                        <div className="org-info">
                                                            <h4 className="org-name">
                                                                <a href={`/organizer/${org.slug}`} target="_blank" rel="noopener noreferrer">
                                                                    {org.name}
                                                                </a>
                                                            </h4>
                                                            <p className="org-role">
                                                                {org.role === 'manager' ? '–ú–µ–Ω–µ–¥–∂–µ—Ä' : 
                                                                 org.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–£—á–∞—Å—Ç–Ω–∏–∫'}
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div className="org-stats">
                                                        <div className="org-stat">
                                                            <span className="org-stat-value">{org.tournaments_count}</span>
                                                            <span className="org-stat-label">–¢—É—Ä–Ω–∏—Ä–æ–≤</span>
                                                        </div>
                                                        <div className="org-stat">
                                                            <span className="org-stat-value">
                                                                {new Date(org.joined_at).toLocaleDateString('ru-RU')}
                                                            </span>
                                                            <span className="org-stat-label">–°–æ—Å—Ç–æ—é —Å</span>
                                                        </div>
                                                    </div>
                                                    {org.description && (
                                                        <p className="org-description">{org.description}</p>
                                                    )}
                                                </div>
                                            ))}
                                        </div>
                                    </section>
                                ) : organizationRequest ? (
                                    <section className="organization-request-section">
                                        <div className="request-status-card">
                                            <div className="request-header">
                                                <h3>{organizationRequest.organization_name}</h3>
                                                <span className={`status-badge ${organizationRequest.status}`}>
                                                    {organizationRequest.status === 'pending' && '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'}
                                                    {organizationRequest.status === 'approved' && '–û–¥–æ–±—Ä–µ–Ω–∞'}
                                                    {organizationRequest.status === 'rejected' && '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'}
                                                </span>
                                            </div>
                                            <div className="request-details">
                                                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {organizationRequest.description}</p>
                                                <p><strong>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</strong> {new Date(organizationRequest.created_at).toLocaleDateString('ru-RU')}</p>
                                                {organizationRequest.reviewed_at && (
                                                    <p><strong>–î–∞—Ç–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:</strong> {new Date(organizationRequest.reviewed_at).toLocaleDateString('ru-RU')}</p>
                                                )}
                                                {organizationRequest.admin_comment && (
                                                    <div className="admin-comment">
                                                        <p><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</strong></p>
                                                        <p className="comment-text">{organizationRequest.admin_comment}</p>
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    </section>
                                ) : (
                                    <section className="create-organization-section">
                                        <div className="section-intro">
                                            <h3 className="section-title">–°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é</h3>
                                            <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.</p>
                                        </div>
                                        
                                        {/* –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π */}
                                        {!user?.email && (
                                            <div className="requirement-alert error">
                                                <span className="alert-icon">‚ö†</span>
                                                <div className="alert-content">
                                                    <h4>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã</h4>
                                                    <p>–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å email –∫ –∞–∫–∫–∞—É–Ω—Ç—É.</p>
                                                </div>
                                                <button className="btn btn-primary" onClick={openAddEmailModal}>
                                                    –ü—Ä–∏–≤—è–∑–∞—Ç—å email
                                                </button>
                                            </div>
                                        )}
                                        
                                        {user?.email && !user?.is_verified && (
                                            <div className="requirement-alert error">
                                                <span className="alert-icon">‚ö†</span>
                                                <div className="alert-content">
                                                    <h4>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã</h4>
                                                    <p>–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email.</p>
                                                </div>
                                                <button className="btn btn-primary" onClick={openEmailVerificationModal}>
                                                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
                                                </button>
                                            </div>
                                        )}
                                        
                                        {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ */}
                                        {user?.email && user?.is_verified && (
                                            <form onSubmit={submitOrganizationRequest} className="organization-form">
                                                {organizationError && (
                                                    <div className="form-error">
                                                        <span className="error-icon">‚ö†</span>
                                                        {organizationError}
                                                    </div>
                                                )}
                                                
                                                {organizationSuccess && (
                                                    <div className="form-success">
                                                        <span className="success-icon">‚úì</span>
                                                        {organizationSuccess}
                                                    </div>
                                                )}
                                                
                                                <div className="form-group">
                                                    <label className="form-label">
                                                        –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ <span className="required">*</span>
                                                    </label>
                                                    <input
                                                        type="text"
                                                        className="form-input"
                                                        name="organizationName"
                                                        value={organizationData.organizationName}
                                                        onChange={handleOrganizationInputChange}
                                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
                                                        required
                                                    />
                                                </div>
                                                
                                                <div className="form-group">
                                                    <label className="form-label">
                                                        –û–ø–∏—Å–∞–Ω–∏–µ <span className="required">*</span>
                                                    </label>
                                                    <textarea
                                                        className="form-textarea"
                                                        name="description"
                                                        value={organizationData.description}
                                                        onChange={handleOrganizationInputChange}
                                                        placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏..."
                                                        rows="4"
                                                        required
                                                    />
                                                </div>
                                                
                                                <div className="form-group">
                                                    <label className="form-label">–õ–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</label>
                                                    <div className="logo-upload-area">
                                                        <input 
                                                            type="file" 
                                                            ref={organizationFileInputRef}
                                                            onChange={handleOrganizationLogoChange}
                                                            accept="image/*"
                                                            style={{ display: 'none' }}
                                                        />
                                                        
                                                        {organizationLogoPreview ? (
                                                            <div className="logo-preview">
                                                                <img 
                                                                    src={organizationLogoPreview} 
                                                                    alt="–õ–æ–≥–æ—Ç–∏–ø" 
                                                                    className="logo-preview-image"
                                                                />
                                                                <div className="logo-actions">
                                                                    <button 
                                                                        type="button" 
                                                                        onClick={triggerOrganizationFileInput}
                                                                        className="btn btn-secondary btn-sm"
                                                                    >
                                                                        –ò–∑–º–µ–Ω–∏—Ç—å
                                                                    </button>
                                                                    <button 
                                                                        type="button" 
                                                                        onClick={removeOrganizationLogo}
                                                                        className="btn btn-danger btn-sm"
                                                                    >
                                                                        –£–¥–∞–ª–∏—Ç—å
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        ) : (
                                                            <div className="logo-upload-placeholder" onClick={triggerOrganizationFileInput}>
                                                                <span className="upload-icon">üìÅ</span>
                                                                <p>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞</p>
                                                                <p className="upload-hint">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 200x200px</p>
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                                
                                                <div className="form-row">
                                                    <div className="form-group">
                                                        <label className="form-label">–°–∞–π—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</label>
                                                        <input
                                                            type="url"
                                                            className="form-input"
                                                            name="websiteUrl"
                                                            value={organizationData.websiteUrl}
                                                            onChange={handleOrganizationInputChange}
                                                            placeholder="https://example.com"
                                                        />
                                                    </div>
                                                    
                                                    <div className="form-group">
                                                        <label className="form-label">VK</label>
                                                        <input
                                                            type="url"
                                                            className="form-input"
                                                            name="vkUrl"
                                                            value={organizationData.vkUrl}
                                                            onChange={handleOrganizationInputChange}
                                                            placeholder="https://vk.com/..."
                                                        />
                                                    </div>
                                                    
                                                    <div className="form-group">
                                                        <label className="form-label">Telegram</label>
                                                        <input
                                                            type="url"
                                                            className="form-input"
                                                            name="telegramUrl"
                                                            value={organizationData.telegramUrl}
                                                            onChange={handleOrganizationInputChange}
                                                            placeholder="https://t.me/..."
                                                        />
                                                    </div>
                                                </div>
                                                
                                                <button 
                                                    type="submit" 
                                                    className="btn btn-primary btn-lg btn-block"
                                                    disabled={isSubmittingOrganization}
                                                >
                                                    {isSubmittingOrganization ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
                                                </button>
                                                
                                                <div className="form-info">
                                                    <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ:</h4>
                                                    <ul>
                                                        <li>–ó–∞—è–≤–∫–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</li>
                                                        <li>–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è</li>
                                                        <li>–í—Å–µ –ø–æ–ª—è —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</li>
                                                        <li>–õ–æ–≥–æ—Ç–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –∏–ª–∏ JPG, –¥–æ 5MB</li>
                                                    </ul>
                                                </div>
                                            </form>
                                        )}
                                    </section>
                                )}
                            </div>
                        )}
                        
                        {/* Tournaments Tab */}
                        {activeTab === 'tournaments' && (
                            <div className="tournaments-tab">
                                <header className="tab-header">
                                    <h2 className="tab-title">–¢—É—Ä–Ω–∏—Ä—ã</h2>
                                    <div className="tab-controls">
                                        <div className="view-switcher">
                                            <button 
                                                className={`view-btn ${tournamentViewMode === 'table' ? 'active' : ''}`} 
                                                onClick={() => setTournamentViewMode('table')}
                                            >
                                                –¢–∞–±–ª–∏—Ü–∞
                                            </button>
                                            <button 
                                                className={`view-btn ${tournamentViewMode === 'card' ? 'active' : ''}`} 
                                                onClick={() => setTournamentViewMode('card')}
                                            >
                                                –ö–∞—Ä—Ç–æ—á–∫–∏
                                            </button>
                                        </div>
                                    </div>
                                </header>
                                
                                {/* –§–∏–ª—å—Ç—Ä—ã */}
                                <div className="tournaments-filters">
                                    <input
                                        type="text"
                                        placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
                                        value={tournamentFilters.name}
                                        onChange={(e) => setTournamentFilters({...tournamentFilters, name: e.target.value})}
                                        className="filter-input"
                                    />
                                    
                                    {hasActiveTournamentFilters() && (
                                        <button 
                                            onClick={clearAllTournamentFilters}
                                            className="clear-filters-btn"
                                        >
                                            –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                                        </button>
                                    )}
                                </div>
                                
                                {loadingTournaments ? (
                                    <div className="loading-state">
                                        <div className="loading-spinner"></div>
                                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤...</p>
                                    </div>
                                ) : filteredAndSortedUserTournaments.length > 0 ? (
                                    <>
                                        {tournamentViewMode === 'table' ? (
                                            <div className="tournaments-table-wrapper">
                                                <table className="tournaments-table">
                                                    <thead>
                                                        <tr>
                                                            <th 
                                                                className={tournamentFilters.game ? 'filtered' : ''}
                                                                onClick={() => toggleTournamentFilter('game')}
                                                            >
                                                                –ò–≥—Ä–∞ {tournamentFilters.game && <span className="filter-active">‚úì</span>}
                                                            </th>
                                                            <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                                            <th onClick={() => handleTournamentSort('participant_count')}>
                                                                –£—á–∞—Å—Ç–Ω–∏–∫–∏
                                                                <span className="sort-icon">
                                                                    {tournamentSort.field === 'participant_count' && 
                                                                     (tournamentSort.direction === 'asc' ? '‚Üë' : '‚Üì')}
                                                                </span>
                                                            </th>
                                                            <th 
                                                                className={tournamentFilters.status ? 'filtered' : ''}
                                                                onClick={() => toggleTournamentFilter('status')}
                                                            >
                                                                –°—Ç–∞—Ç—É—Å {tournamentFilters.status && <span className="filter-active">‚úì</span>}
                                                            </th>
                                                            <th onClick={() => handleTournamentSort('start_date')}>
                                                                –î–∞—Ç–∞
                                                                <span className="sort-icon">
                                                                    {tournamentSort.field === 'start_date' && 
                                                                     (tournamentSort.direction === 'asc' ? '‚Üë' : '‚Üì')}
                                                                </span>
                                                            </th>
                                                            <th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        {filteredAndSortedUserTournaments.map((tournament) => (
                                                            <tr key={tournament.id}>
                                                                <td>{tournament.game}</td>
                                                                <td>
                                                                    <a href={`/tournaments/${tournament.id}`} className="tournament-link">
                                                                        {tournament.name}
                                                                    </a>
                                                                </td>
                                                                <td>
                                                                    {tournament.max_participants
                                                                        ? `${tournament.participant_count} –∏–∑ ${tournament.max_participants}`
                                                                        : tournament.participant_count}
                                                                </td>
                                                                <td>
                                                                    <span className={`tournament-status ${tournament.status}`}>
                                                                        {tournament.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : 
                                                                         tournament.status === 'in_progress' ? '–ò–¥–µ—Ç' : 
                                                                         tournament.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                                                                         '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                                                                    </span>
                                                                </td>
                                                                <td>{new Date(tournament.start_date).toLocaleDateString('ru-RU')}</td>
                                                                <td>
                                                                    {tournament.tournament_result ? (
                                                                        <span className={`tournament-result ${
                                                                            tournament.tournament_result.toLowerCase().includes('–ø–æ–±–µ–¥–∏—Ç–µ–ª—å') ? 'winner' :
                                                                            tournament.tournament_result.toLowerCase().includes('–º–µ—Å—Ç–æ') ? 'top' :
                                                                            'participant'
                                                                        }`}>
                                                                            {tournament.tournament_result}
                                                                        </span>
                                                                    ) : (
                                                                        <span className="tournament-result pending">
                                                                            {tournament.status === 'completed' ? '–ù–µ —É–∫–∞–∑–∞–Ω' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                                                                        </span>
                                                                    )}
                                                                    {tournament.wins !== undefined && tournament.losses !== undefined && (
                                                                        <span className="tournament-score">
                                                                            ({tournament.wins}W/{tournament.losses}L)
                                                                        </span>
                                                                    )}
                                                                </td>
                                                            </tr>
                                                        ))}
                                                    </tbody>
                                                </table>
                                                
                                                {/* –í—ã–ø–∞–¥–∞—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
                                                {activeTournamentFilter === 'game' && (
                                                    <div className="filter-dropdown" ref={tournamentFilterRefs.game}>
                                                        {tournamentFilters.game && (
                                                            <div
                                                                onClick={() => clearTournamentFilter('game')}
                                                                className="filter-option clear"
                                                            >
                                                                ‚úï –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
                                                            </div>
                                                        )}
                                                        {uniqueTournamentValues('game').map((value) => (
                                                            <div
                                                                key={value}
                                                                onClick={() => applyTournamentFilter('game', value)}
                                                                className="filter-option"
                                                            >
                                                                {value}
                                                            </div>
                                                        ))}
                                                    </div>
                                                )}
                                                
                                                {activeTournamentFilter === 'status' && (
                                                    <div className="filter-dropdown" ref={tournamentFilterRefs.status}>
                                                        {tournamentFilters.status && (
                                                            <div
                                                                onClick={() => clearTournamentFilter('status')}
                                                                className="filter-option clear"
                                                            >
                                                                ‚úï –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
                                                            </div>
                                                        )}
                                                        {uniqueTournamentValues('status').map((value) => (
                                                            <div
                                                                key={value}
                                                                onClick={() => applyTournamentFilter('status', value)}
                                                                className="filter-option"
                                                            >
                                                                {value === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : 
                                                                 value === 'in_progress' ? '–ò–¥–µ—Ç' : 
                                                                 value === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                                                                 value}
                                                            </div>
                                                        ))}
                                                    </div>
                                                )}
                                            </div>
                                        ) : (
                                            <div className="tournaments-cards">
                                                {filteredAndSortedUserTournaments.map((tournament) => (
                                                    <div key={tournament.id} className="tournament-card">
                                                        <div className="tournament-card-header">
                                                            <h3 className="tournament-name">
                                                                <a href={`/tournaments/${tournament.id}`}>
                                                                    {tournament.name}
                                                                </a>
                                                            </h3>
                                                            <span className={`tournament-status ${tournament.status}`}>
                                                                {tournament.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : 
                                                                 tournament.status === 'in_progress' ? '–ò–¥–µ—Ç' : 
                                                                 tournament.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                                                                 '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                                                            </span>
                                                        </div>
                                                        <div className="tournament-card-body">
                                                            <div className="tournament-detail">
                                                                <span className="detail-label">–ò–≥—Ä–∞:</span>
                                                                <span className="detail-value">{tournament.game}</span>
                                                            </div>
                                                            <div className="tournament-detail">
                                                                <span className="detail-label">–£—á–∞—Å—Ç–Ω–∏–∫–∏:</span>
                                                                <span className="detail-value">
                                                                    {tournament.max_participants
                                                                        ? `${tournament.participant_count} –∏–∑ ${tournament.max_participants}`
                                                                        : tournament.participant_count}
                                                                </span>
                                                            </div>
                                                            <div className="tournament-detail">
                                                                <span className="detail-label">–î–∞—Ç–∞:</span>
                                                                <span className="detail-value">
                                                                    {new Date(tournament.start_date).toLocaleDateString('ru-RU')}
                                                                </span>
                                                            </div>
                                                            <div className="tournament-detail">
                                                                <span className="detail-label">–†–µ–∑—É–ª—å—Ç–∞—Ç:</span>
                                                                <span className="detail-value">
                                                                    {tournament.tournament_result ? (
                                                                        <span className={`tournament-result ${
                                                                            tournament.tournament_result.toLowerCase().includes('–ø–æ–±–µ–¥–∏—Ç–µ–ª—å') ? 'winner' :
                                                                            tournament.tournament_result.toLowerCase().includes('–º–µ—Å—Ç–æ') ? 'top' :
                                                                            'participant'
                                                                        }`}>
                                                                            {tournament.tournament_result}
                                                                        </span>
                                                                    ) : (
                                                                        <span className="tournament-result pending">
                                                                            {tournament.status === 'completed' ? '–ù–µ —É–∫–∞–∑–∞–Ω' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                                                                        </span>
                                                                    )}
                                                                    {tournament.wins !== undefined && tournament.losses !== undefined && (
                                                                        <span className="tournament-score">
                                                                            ({tournament.wins}W/{tournament.losses}L)
                                                                        </span>
                                                                    )}
                                                                </span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </>
                                ) : (
                                    <div className="empty-state">
                                        <div className="empty-icon">üèÜ</div>
                                        <p>
                                            {userTournaments.length === 0 
                                                ? '–í—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö'
                                                : '–¢—É—Ä–Ω–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.'}
                                        </p>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>
                </main>
            </div>
            
            {/* –í—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
            {showEmailVerificationModal && (
                <div className={`modal-overlay ${isClosingModal ? 'closing' : ''}`} onClick={closeEmailVerificationModal}>
                    <div className="modal-content email-verification-modal" onClick={(e) => e.stopPropagation()}>
                        <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email</h3>
                        <p>–ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É {user.email} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ:</p>
                        
                        <div className="code-input-container" onClick={handleCodeContainerClick}>
                            <input 
                                id="hidden-code-input"
                                className="code-input-hidden"
                                type="text"
                                inputMode="numeric"
                                pattern="[0-9]*"
                                maxLength={6}
                                value={verificationCode}
                                onChange={handleCodeChange}
                                onPaste={handleCodePaste}
                                autoFocus
                            />
                            <div className="code-display">
                                {[0, 1, 2, 3, 4, 5].map((index) => (
                                    <div 
                                        key={index} 
                                        className={`code-digit ${verificationCode[index] ? 'filled' : ''} ${index === verificationCode.length ? 'active' : ''}`}
                                    >
                                        {verificationCode[index] || ''}
                                    </div>
                                ))}
                            </div>
                        </div>
                        
                        {verificationError && (
                            <div className="verification-error">
                                {verificationError}
                            </div>
                        )}
                        
                        <div className="modal-buttons">
                            <button 
                                onClick={sendVerificationCode} 
                                disabled={isResendDisabled}
                            >
                                {localStorage.getItem('verification_code_sent') === 'true' ? '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥'}
                                {isResendDisabled && (
                                    <span className="resend-countdown">
                                        {Math.floor(resendCountdown / 60)}:{(resendCountdown % 60).toString().padStart(2, '0')}
                                    </span>
                                )}
                            </button>
                        </div>
                    </div>
                </div>
            )}
            
            {showAddEmailModal && (
                <div className={`modal-overlay ${isClosingModal ? 'closing' : ''}`} onClick={closeAddEmailModal}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <h3>–ü—Ä–∏–≤—è–∑–∫–∞ email</h3>
                        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:</p>
                        
                        <input 
                            type="email"
                            value={newEmail}
                            onChange={(e) => setNewEmail(e.target.value)}
                            placeholder="example@example.com"
                            className="email-input"
                            autoFocus
                        />
                        
                        {addEmailError && (
                            <div className="verification-error">
                                {addEmailError}
                            </div>
                        )}
                        
                        <div className="modal-buttons">
                            <button onClick={saveEmail}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                            <button onClick={closeAddEmailModal}>–û—Ç–º–µ–Ω–∞</button>
                        </div>
                    </div>
                </div>
            )}
            
            {showModal && (
                <div className="modal-overlay" onClick={closeModal}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <p>–¢–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –≤ Steam "{steamNickname}", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å?</p>
                        <button onClick={confirmSteamNickname}>–î–∞</button>
                        <button onClick={closeModal}>–ù–µ—Ç</button>
                    </div>
                </div>
            )}
            
            {showEmailRequiredModal && (
                <div className={`modal-overlay ${isClosingModal ? 'closing' : ''}`} onClick={closeEmailRequiredModal}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <h3>–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø—Ä–∏–≤—è–∑–∫–∞ email</h3>
                        <p>–î–ª—è –æ—Ç–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Steam –∏–ª–∏ FACEIT –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∑–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.</p>
                        <p>–≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É –≤–∞—Å —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É.</p>
                        
                        <div className="modal-buttons">
                            <button onClick={() => {
                                closeEmailRequiredModal();
                                setTimeout(() => openAddEmailModal(), 350);
                            }}>–ü—Ä–∏–≤—è–∑–∞—Ç—å email</button>
                            <button onClick={closeEmailRequiredModal}>–û—Ç–º–µ–Ω–∞</button>
                        </div>
                    </div>
                </div>
            )}
            
            {showAvatarModal && (
                <div className={`modal-overlay ${isClosingModal ? 'closing' : ''}`} onClick={closeAvatarModal}>
                    <div className="modal-content avatar-modal" onClick={(e) => e.stopPropagation()}>
                        <h3>–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä</h3>
                        
                        <div className="avatar-preview">
                            <img 
                                src={ensureHttps(avatar) || '/default-avatar.png'} 
                                alt="–¢–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä" 
                                className="current-avatar"
                            />
                        </div>
                        
                        <div className="avatar-options">
                            <button 
                                onClick={triggerFileInput} 
                                disabled={uploadingAvatar}
                            >
                                {uploadingAvatar ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä'}
                            </button>
                            
                            <input 
                                type="file" 
                                ref={fileInputRef} 
                                onChange={handleAvatarUpload} 
                                accept="image/*" 
                                style={{ display: 'none' }} 
                            />
                            
                            {user.steam_id && (
                                <button onClick={setAvatarFromSteam}>
                                    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∏–∑ Steam
                                </button>
                            )}
                            
                            {user.faceit_id && (
                                <button onClick={setAvatarFromFaceit}>
                                    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∏–∑ FACEIT
                                </button>
                            )}
                        </div>
                        
                        <button onClick={closeAvatarModal} className="close-modal-btn">
                            –ó–∞–∫—Ä—ã—Ç—å
                        </button>
                    </div>
                </div>
            )}
            
            {showMatchHistoryModal && (
                <div className={`modal-overlay ${isClosingModal ? 'closing' : ''}`} onClick={closeMatchHistoryModal}>
                    <div className="modal-content match-history-modal" onClick={(e) => e.stopPropagation()}>
                        <h3>–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π</h3>
                        
                        {loadingMatchHistory ? (
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π...</p>
                        ) : (
                            <div className="full-match-history">
                                {matchHistory.length > 0 ? (
                                    <table className="match-history-table">
                                        <thead>
                                            <tr>
                                                <th>–î–∞—Ç–∞</th>
                                                <th>–¢—É—Ä–Ω–∏—Ä</th>
                                                <th>–°–æ–ø–µ—Ä–Ω–∏–∫</th>
                                                <th>–°—á–µ—Ç</th>
                                                <th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
                                                <th>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {matchHistory.map((match, index) => (
                                                <tr key={index} className={match.result === 'win' ? 'win' : 'loss'}>
                                                    <td>{new Date(match.date).toLocaleDateString()}</td>
                                                    <td>
                                                        <a href={`/tournament/${match.tournament_id}`}>
                                                            {match.tournament_name}
                                                        </a>
                                                    </td>
                                                    <td>{match.opponent}</td>
                                                    <td>{match.score}</td>
                                                    <td>
                                                        {match.result === 'win' ? '–ü–æ–±–µ–¥–∞' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}
                                                    </td>
                                                    <td>{match.discipline}</td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                ) : (
                                    <p>–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>
                                )}
                            </div>
                        )}
                        
                        <button onClick={closeMatchHistoryModal} className="close-modal-btn">
                            –ó–∞–∫—Ä—ã—Ç—å
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
}

export default Profile;