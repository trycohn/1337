// frontend/src/components/TournamentsList.js
import { useState, useEffect, useRef } from 'react';
import api from '../axios'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios
import { Link } from 'react-router-dom';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import './Home.css';
import TournamentFilterModal from './TournamentFilterModal'; // üÜï –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞

function TournamentsList() {
    const [tournaments, setTournaments] = useState([]);
    const [error, setError] = useState(null);
    
    // üÜï –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –§–ò–õ–¨–¢–†–û–í
    const [filters, setFilters] = useState({
        // –°—Ç–∞—Ä—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        game: '',
        name: '',
        format: '',
        status: '',
        start_date: null,
        
        // üÜï –ù–æ–≤—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        games: [], // –ú–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
        formats: [], // –ú–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        participantTypes: [], // –ú–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        statuses: [], // –ú–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        hasPrizePool: null, // null, true, false
        participantCount: { min: 0, max: 128 }
    });

    // üÜï –°–ò–°–¢–ï–ú–ê –°–û–†–¢–ò–†–û–í–ö–ò
    const [sort, setSort] = useState({ 
        field: 'created_at', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        direction: 'desc' 
    });
    
    // üÜï –°–û–°–¢–û–Ø–ù–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –§–ò–õ–¨–¢–†–ê
    const [showFilterModal, setShowFilterModal] = useState(false);
    
    const [activeFilter, setActiveFilter] = useState(null);
    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
    const [viewMode, setViewMode] = useState(window.innerWidth <= 768 ? 'card' : 'table');
    const filterRefs = {
        name: useRef(null),
        game: useRef(null),
        format: useRef(null),
        status: useRef(null),
        start_date: useRef(null),
    };

    // üÜï –î–û–°–¢–£–ü–ù–´–ï –í–ê–†–ò–ê–ù–¢–´ –°–û–†–¢–ò–†–û–í–ö–ò
    const sortOptions = [
        { value: 'created_at', label: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è' },
        { value: 'start_date', label: '–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞' },
        { value: 'participant_count', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' },
        { value: 'prize_pool', label: '–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥' },
        { value: 'name', label: '–ù–∞–∑–≤–∞–Ω–∏–µ' }
    ];

    useEffect(() => {
        const handleResize = () => {
            const nowMobile = window.innerWidth <= 768;
            setIsMobile(nowMobile);
            if (nowMobile) setViewMode('card');
        };
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    const effectiveViewMode = isMobile ? 'card' : viewMode;

    useEffect(() => {
        const fetchTournaments = async () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –≤ localStorage
            const cacheKey = 'tournaments_cache';
            const cacheTimestampKey = 'tournaments_cache_timestamp';
            const cachedTournaments = localStorage.getItem(cacheKey);
            const cacheTimestamp = localStorage.getItem(cacheTimestampKey);
            const cacheValidityPeriod = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –∫–µ—à (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (cachedTournaments && cacheTimestamp) {
                const now = new Date().getTime();
                const timestamp = parseInt(cacheTimestamp, 10);
                
                if (!isNaN(timestamp) && (now - timestamp) < cacheValidityPeriod) {
                    try {
                        const parsedTournaments = JSON.parse(cachedTournaments);
                        if (Array.isArray(parsedTournaments) && parsedTournaments.length > 0) {
                            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö');
                            setTournaments(parsedTournaments);
                            return;
                        }
                    } catch (parseError) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö:', parseError);
                        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ, –æ—á–∏—â–∞–µ–º –∫–µ—à
                        localStorage.removeItem(cacheKey);
                        localStorage.removeItem(cacheTimestampKey);
                    }
                } else {
                    // –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª, –æ—á–∏—â–∞–µ–º –µ–≥–æ
                    localStorage.removeItem(cacheKey);
                    localStorage.removeItem(cacheTimestampKey);
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–µ—à–∞, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            
            try {
                const response = await api.get('/api/tournaments');
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response.data ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤
                if (Array.isArray(response.data)) {
                    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ localStorage
                    localStorage.setItem(cacheKey, JSON.stringify(response.data));
                    localStorage.setItem(cacheTimestampKey, new Date().getTime().toString());
                    
                    setTournaments(response.data);
                    console.log('üîç Tournaments data:', response.data);
                } else {
                    console.error('‚ùå –û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ:', response.data);
                    setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
                    setTournaments([]);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error.response ? error.response.data : error.message);
                setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤');
                setTournaments([]);
                
                // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ
                try {
                    const oldCache = localStorage.getItem(cacheKey);
                    if (oldCache) {
                        const parsedOldCache = JSON.parse(oldCache);
                        if (Array.isArray(parsedOldCache) && parsedOldCache.length > 0) {
                            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API');
                            setTournaments(parsedOldCache);
                            setError('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∑–∂–µ.');
                        }
                    }
                } catch (cacheError) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à:', cacheError);
                }
            }
        };
        fetchTournaments();
    }, []);

    useEffect(() => {
        const handleClickOutside = (event) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            if (activeFilter) {
                console.log('üîß Click outside check for filter:', activeFilter);
                const currentRef = filterRefs[activeFilter]?.current;
                if (currentRef && !currentRef.contains(event.target)) {
                    console.log('üîß Closing filter:', activeFilter);
                    setActiveFilter(null);
                } else {
                    console.log('üîß Click was inside filter area');
                }
            }
        };
        
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, [activeFilter, filterRefs]);

    const handleFilterChange = (e) => {
        const { name, value } = e.target;
        setFilters((prev) => ({ ...prev, [name]: value }));
    };

    // üÜï –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–†–¢–ò–†–û–í–ö–ò
    const handleSort = (field) => {
        setSort((prev) => ({
            field,
            direction: prev.field === field && prev.direction === 'asc' ? 'desc' : 'asc',
        }));
    };

    // üÜï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–´–• –§–ò–õ–¨–¢–†–û–í
    const handleApplyAdvancedFilters = (newFilters) => {
        setFilters(prev => ({
            ...prev,
            ...newFilters
        }));
        console.log('üîç –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:', newFilters);
    };

    const applyFilter = (field, value) => {
        setFilters((prev) => ({ ...prev, [field]: value }));
        setActiveFilter(null);
    };

    const clearFilter = (field) => {
        setFilters((prev) => ({ ...prev, [field]: field === 'start_date' ? null : '' }));
        setActiveFilter(null);
    };

    // üÜï –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –í–°–ï–• –§–ò–õ–¨–¢–†–û–í
    const clearAllFilters = () => {
        setFilters({
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            game: '',
            name: '',
            format: '',
            status: '',
            start_date: null,
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            games: [],
            formats: [],
            participantTypes: [],
            statuses: [],
            hasPrizePool: null,
            participantCount: { min: 0, max: 128 }
        });
        setActiveFilter(null);
        console.log('üóëÔ∏è –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã');
    };

    const toggleFilter = (filterName) => {
        console.log('üîß Toggle filter called:', filterName, 'Current active:', activeFilter);
        const newActiveFilter = activeFilter === filterName ? null : filterName;
        setActiveFilter(newActiveFilter);
    };

    const uniqueValues = (field) => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∞ –Ω–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        let values = [...new Set(tournaments.map((t) => t[field]).filter(Boolean))].sort();
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (values.length === 0) {
            switch(field) {
                case 'game':
                    values = ['CS:GO', 'Dota 2', 'Valorant'];
                    break;
                case 'format':
                    values = ['Single Elimination', 'Double Elimination', 'Round Robin'];
                    break;
                case 'status':
                    values = ['active', 'in_progress', 'completed'];
                    break;
                default:
                    values = [];
            }
        }
        
        console.log(`Unique values for ${field}:`, values);
        return values;
    };

    // üÜï –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –§–ò–õ–¨–¢–†–û–í
    const hasActiveFilters = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        const hasOldFilters = filters.game !== '' || filters.name !== '' || filters.format !== '' || 
                              filters.status !== '' || filters.start_date !== null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        const hasNewFilters = filters.games.length > 0 || filters.formats.length > 0 || 
                              filters.participantTypes.length > 0 || filters.statuses.length > 0 ||
                              filters.hasPrizePool !== null ||
                              filters.participantCount.min > 0 || filters.participantCount.max < 128;
        
        return hasOldFilters || hasNewFilters;
    };

    // üÜï –ü–û–î–°–ß–ï–¢ –ê–ö–¢–ò–í–ù–´–• –§–ò–õ–¨–¢–†–û–í
    const getActiveFiltersCount = () => {
        let count = 0;
        
        // –°—Ç–∞—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if (filters.game) count++;
        if (filters.name) count++;
        if (filters.format) count++;
        if (filters.status) count++;
        if (filters.start_date) count++;
        
        // –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        count += filters.games.length;
        count += filters.formats.length;
        count += filters.participantTypes.length;
        count += filters.statuses.length;
        if (filters.hasPrizePool !== null) count++;
        if (filters.participantCount.min > 0 || filters.participantCount.max < 128) count++;
        
        return count;
    };

    // üÜï –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ò –°–û–†–¢–ò–†–û–í–ö–ò
    const filteredAndSortedTournaments = tournaments
        .filter((tournament) => {
            // –°—Ç–∞—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            const oldFiltersMatch = (
                (filters.game === '' || tournament.game === filters.game) &&
                (filters.name === '' || tournament.name?.toLowerCase().includes(filters.name.toLowerCase())) &&
                (filters.format === '' || tournament.format === filters.format) &&
                (filters.status === '' || tournament.status === filters.status) &&
                (filters.start_date === null ||
                    new Date(tournament.start_date).toLocaleDateString('ru-RU') ===
                    filters.start_date.toLocaleDateString('ru-RU'))
            );

            // –ù–æ–≤—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            const gamesMatch = filters.games.length === 0 || filters.games.includes(tournament.game);
            const formatsMatch = filters.formats.length === 0 || filters.formats.includes(tournament.format);
            const participantTypesMatch = filters.participantTypes.length === 0 || filters.participantTypes.includes(tournament.participant_type);
            const statusesMatch = filters.statuses.length === 0 || filters.statuses.includes(tournament.status);
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–∑–æ–≤–æ–º—É —Ñ–æ–Ω–¥—É
            const prizepoolMatch = filters.hasPrizePool === null || 
                (filters.hasPrizePool === true && tournament.prize_pool && tournament.prize_pool > 0) ||
                (filters.hasPrizePool === false && (!tournament.prize_pool || tournament.prize_pool === 0));
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const participantCountMatch = tournament.participant_count >= filters.participantCount.min && 
                                        tournament.participant_count <= filters.participantCount.max;

            return oldFiltersMatch && gamesMatch && formatsMatch && participantTypesMatch && 
                   statusesMatch && prizepoolMatch && participantCountMatch;
        })
        .sort((a, b) => {
            if (!sort.field) return 0;
            
            let aValue, bValue;
            
            switch (sort.field) {
                case 'participant_count':
                    aValue = a.participant_count || 0;
                    bValue = b.participant_count || 0;
                    return sort.direction === 'asc' ? aValue - bValue : bValue - aValue;
                    
                case 'start_date':
                case 'created_at':
                    aValue = new Date(a[sort.field]);
                    bValue = new Date(b[sort.field]);
                    return sort.direction === 'asc' ? aValue - bValue : bValue - aValue;
                    
                case 'prize_pool':
                    aValue = a.prize_pool || 0;
                    bValue = b.prize_pool || 0;
                    return sort.direction === 'asc' ? aValue - bValue : bValue - aValue;
                    
                case 'name':
                    aValue = (a.name || '').toLowerCase();
                    bValue = (b.name || '').toLowerCase();
                    return sort.direction === 'asc' ? 
                        aValue.localeCompare(bValue) : 
                        bValue.localeCompare(aValue);
                    
                default:
                    return 0;
            }
        });

    // üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ö–û–ù–ö–ò –°–û–†–¢–ò–†–û–í–ö–ò
    const getSortIcon = (field) => {
        if (sort.field !== field) return '‚ÜïÔ∏è';
        return sort.direction === 'asc' ? '‚ñ≤' : '‚ñº';
    };

    const renderTableView = () => (
        <div>
            {hasActiveFilters() && (
                <div style={{ marginBottom: '16px', textAlign: 'right' }}>
                    <button 
                        onClick={clearAllFilters}
                        className="clear-all-filters-btn"
                    >
                        ‚úï –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã ({getActiveFiltersCount()})
                    </button>
                </div>
            )}
            <table>
                <thead>
                    <tr>
                        <th ref={filterRefs.game} className={filters.game ? 'filtered' : ''}>
                            {activeFilter === 'game' ? (
                                <div className="dropdown" style={{
                                    position: 'absolute',
                                    top: '100%',
                                    left: '0',
                                    right: '0',
                                    background: '#1a1a1a',
                                    color: '#ffffff',
                                    border: '1px solid #333333',
                                    borderRadius: '6px',
                                    zIndex: 9999,
                                    maxHeight: '200px',
                                    overflowY: 'auto',
                                    boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)',
                                    marginTop: '4px',
                                    minWidth: '150px',
                                    whiteSpace: 'nowrap',
                                    display: 'block',
                                    visibility: 'visible'
                                }}>
                                    {filters.game && (
                                        <div
                                            onClick={() => clearFilter('game')}
                                            className="dropdown-item clear-filter"
                                            style={{
                                                padding: '12px 16px',
                                                cursor: 'pointer',
                                                backgroundColor: '#333333',
                                                color: '#ffffff',
                                                borderBottom: '2px solid #444444'
                                            }}
                                        >
                                            ‚úï –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
                                        </div>
                                    )}
                                    {uniqueValues('game').map((value) => (
                                        <div
                                            key={value}
                                            onClick={() => applyFilter('game', value)}
                                            className="dropdown-item"
                                            style={{
                                                padding: '12px 16px',
                                                cursor: 'pointer',
                                                borderBottom: '1px solid #2a2a2a',
                                                backgroundColor: 'transparent',
                                                color: '#ffffff'
                                            }}
                                            onMouseEnter={(e) => e.target.style.backgroundColor = '#2a2a2a'}
                                            onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                                        >
                                            {value}
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <>
                                    –ò–≥—Ä–∞{filters.game && ` (${filters.game})`}{' '}
                                    <span className="dropdown-icon" onClick={() => toggleFilter('game')}>
                                        ‚ñº
                                    </span>
                                </>
                            )}
                        </th>
                        <th ref={filterRefs.name} className={filters.name ? 'filtered' : ''}>
                            {activeFilter === 'name' ? (
                                <div style={{ display: 'flex', gap: '5px' }}>
                                    <input
                                        name="name"
                                        value={filters.name}
                                        onChange={handleFilterChange}
                                        placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
                                        autoFocus
                                        style={{ flex: 1 }}
                                    />
                                    {filters.name && (
                                        <button
                                            onClick={() => clearFilter('name')}
                                            style={{
                                                padding: '4px 8px',
                                                backgroundColor: '#333333',
                                                color: '#ffffff',
                                                border: '1px solid #555555',
                                                borderRadius: '4px',
                                                cursor: 'pointer',
                                                fontSize: '11px'
                                            }}
                                        >
                                            ‚úï
                                        </button>
                                    )}
                                </div>
                            ) : (
                                <>
                                    –ù–∞–∑–≤–∞–Ω–∏–µ{filters.name && ` (${filters.name})`}{' '}
                                    <span className="filter-icon" onClick={() => toggleFilter('name')}>
                                        üîç
                                    </span>
                                </>
                            )}
                        </th>
                        <th>
                            –£—á–∞—Å—Ç–Ω–∏–∫–∏{' '}
                            <span className="sort-icon" onClick={() => handleSort('participant_count')}>
                                {sort.field === 'participant_count' && sort.direction === 'asc' ? '‚ñ≤' : '‚ñº'}
                            </span>
                        </th>
                        <th ref={filterRefs.format} className={filters.format ? 'filtered' : ''}>
                            {activeFilter === 'format' ? (
                                <div className="dropdown" style={{
                                    position: 'absolute',
                                    top: '100%',
                                    left: '0',
                                    right: '0',
                                    background: '#1a1a1a',
                                    color: '#ffffff',
                                    border: '1px solid #333333',
                                    borderRadius: '6px',
                                    zIndex: 9999,
                                    maxHeight: '200px',
                                    overflowY: 'auto',
                                    boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)',
                                    marginTop: '4px',
                                    minWidth: '150px',
                                    whiteSpace: 'nowrap',
                                    display: 'block',
                                    visibility: 'visible'
                                }}>
                                    {filters.format && (
                                        <div
                                            onClick={() => clearFilter('format')}
                                            className="dropdown-item clear-filter"
                                            style={{
                                                padding: '12px 16px',
                                                cursor: 'pointer',
                                                backgroundColor: '#333333',
                                                color: '#ffffff',
                                                borderBottom: '2px solid #444444'
                                            }}
                                        >
                                            ‚úï –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
                                        </div>
                                    )}
                                    {uniqueValues('format').map((value) => (
                                        <div
                                            key={value}
                                            onClick={() => applyFilter('format', value)}
                                            className="dropdown-item"
                                            style={{
                                                padding: '12px 16px',
                                                cursor: 'pointer',
                                                borderBottom: '1px solid #2a2a2a',
                                                backgroundColor: 'transparent',
                                                color: '#ffffff'
                                            }}
                                            onMouseEnter={(e) => e.target.style.backgroundColor = '#2a2a2a'}
                                            onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                                        >
                                            {value}
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <>
                                    –§–æ—Ä–º–∞—Ç{filters.format && ` (${filters.format})`}{' '}
                                    <span className="dropdown-icon" onClick={() => toggleFilter('format')}>
                                        ‚ñº
                                    </span>
                                </>
                            )}
                        </th>
                        <th ref={filterRefs.start_date} className={filters.start_date ? 'filtered' : ''}>
                            {activeFilter === 'start_date' ? (
                                <div style={{ display: 'flex', gap: '5px' }}>
                                    <DatePicker
                                        selected={filters.start_date}
                                        onChange={(date) =>
                                            setFilters((prev) => ({ ...prev, start_date: date }))
                                        }
                                        dateFormat="dd.MM.yyyy"
                                        placeholderText="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
                                        autoFocus
                                        style={{ flex: 1 }}
                                    />
                                    {filters.start_date && (
                                        <button
                                            onClick={() => clearFilter('start_date')}
                                            style={{
                                                padding: '4px 8px',
                                                backgroundColor: '#333333',
                                                color: '#ffffff',
                                                border: '1px solid #555555',
                                                borderRadius: '4px',
                                                cursor: 'pointer',
                                                fontSize: '11px'
                                            }}
                                        >
                                            ‚úï
                                        </button>
                                    )}
                                </div>
                            ) : (
                                <>
                                    –î–∞—Ç–∞{filters.start_date && ` (${filters.start_date.toLocaleDateString('ru-RU')})`}{' '}
                                    <span className="filter-icon" onClick={() => toggleFilter('start_date')}>
                                        üîç
                                    </span>
                                    <span className="sort-icon" onClick={() => handleSort('start_date')}>
                                        {sort.field === 'start_date' && sort.direction === 'asc' ? '‚ñ≤' : '‚ñº'}
                                    </span>
                                </>
                            )}
                        </th>
                        <th ref={filterRefs.status} className={filters.status ? 'filtered' : ''}>
                            {activeFilter === 'status' ? (
                                <div className="dropdown" style={{
                                    position: 'absolute',
                                    top: '100%',
                                    left: '0',
                                    right: '0',
                                    background: '#1a1a1a',
                                    color: '#ffffff',
                                    border: '1px solid #333333',
                                    borderRadius: '6px',
                                    zIndex: 9999,
                                    maxHeight: '200px',
                                    overflowY: 'auto',
                                    boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)',
                                    marginTop: '4px',
                                    minWidth: '150px',
                                    whiteSpace: 'nowrap',
                                    display: 'block',
                                    visibility: 'visible'
                                }}>
                                    {filters.status && (
                                        <div
                                            onClick={() => clearFilter('status')}
                                            className="dropdown-item clear-filter"
                                            style={{
                                                padding: '12px 16px',
                                                cursor: 'pointer',
                                                backgroundColor: '#333333',
                                                color: '#ffffff',
                                                borderBottom: '2px solid #444444'
                                            }}
                                        >
                                            ‚úï –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
                                        </div>
                                    )}
                                    {uniqueValues('status').map((value) => (
                                        <div
                                            key={value}
                                            onClick={() => applyFilter('status', value)}
                                            className="dropdown-item"
                                            style={{
                                                padding: '12px 16px',
                                                cursor: 'pointer',
                                                borderBottom: '1px solid #2a2a2a',
                                                backgroundColor: 'transparent',
                                                color: '#ffffff'
                                            }}
                                            onMouseEnter={(e) => e.target.style.backgroundColor = '#2a2a2a'}
                                            onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                                        >
                                            {value === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : 
                                             value === 'in_progress' ? '–ò–¥–µ—Ç' : 
                                             value === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                                             value}
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <>
                                    –°—Ç–∞—Ç—É—Å{filters.status && ` (${
                                        filters.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : 
                                        filters.status === 'in_progress' ? '–ò–¥–µ—Ç' : 
                                        filters.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                                        filters.status
                                    })`}{' '}
                                    <span className="dropdown-icon" onClick={() => toggleFilter('status')}>
                                        ‚ñº
                                    </span>
                                </>
                            )}
                        </th>
                    </tr>
                </thead>
                <tbody>
                    {filteredAndSortedTournaments.map((tournament) => (
                        <tr key={tournament.id}>
                            <td data-label="–ò–≥—Ä–∞" title={tournament.game}>{tournament.game}</td>
                            <td data-label="–ù–∞–∑–≤–∞–Ω–∏–µ" title={tournament.name}>
                                <Link to={`/tournaments/${tournament.id}`}>{tournament.name}</Link>
                            </td>
                            <td data-label="–£—á–∞—Å—Ç–Ω–∏–∫–∏">
                                {tournament.max_participants
                                    ? `${tournament.participant_count} –∏–∑ ${tournament.max_participants}`
                                    : tournament.participant_count}
                            </td>
                            <td data-label="–§–æ—Ä–º–∞—Ç" title={tournament.format}>{tournament.format}</td>
                            <td data-label="–î–∞—Ç–∞">{new Date(tournament.start_date).toLocaleDateString('ru-RU')}</td>
                            <td data-label="–°—Ç–∞—Ç—É—Å">
                                <span className={`tournament-status-badge ${
                                    tournament.status === 'active' ? 'tournament-status-active' : 
                                    tournament.status === 'in_progress' ? 'tournament-status-in-progress' : 
                                    tournament.status === 'completed' ? 'tournament-status-completed' : 
                                    'tournament-status-completed'
                                }`}>
                                    {tournament.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : 
                                     tournament.status === 'in_progress' ? '–ò–¥–µ—Ç' : 
                                     tournament.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                                     '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                                </span>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );

    const renderCardView = () => (
        <div className="tournaments-cards">
            {filteredAndSortedTournaments.map((tournament) => (
                <div key={tournament.id} className="tournament-card">
                    <h3 className="tournament-name">
                        <Link to={`/tournaments/${tournament.id}`}>{tournament.name}</Link>
                    </h3>
                    <div className="tournament-details">
                        <div className="tournament-info">
                            <span className="tournament-label">–ò–≥—Ä–∞:</span>
                            <span className="tournament-value">{tournament.game}</span>
                        </div>
                        <div className="tournament-info">
                            <span className="tournament-label">–£—á–∞—Å—Ç–Ω–∏–∫–∏:</span>
                            <span className="tournament-value">
                                {tournament.max_participants
                                    ? `${tournament.participant_count} –∏–∑ ${tournament.max_participants}`
                                    : tournament.participant_count}
                            </span>
                        </div>
                        <div className="tournament-info">
                            <span className="tournament-label">–§–æ—Ä–º–∞—Ç:</span>
                            <span className="tournament-value">{tournament.format}</span>
                        </div>
                        <div className="tournament-info">
                            <span className="tournament-label">–î–∞—Ç–∞:</span>
                            <span className="tournament-value">
                                {new Date(tournament.start_date).toLocaleDateString('ru-RU')}
                            </span>
                        </div>
                        <div className="tournament-info">
                            <span className="tournament-label">–°—Ç–∞—Ç—É—Å:</span>
                            <span className={`tournament-status ${
                                tournament.status === 'active' ? 'active' : 
                                tournament.status === 'in_progress' ? 'in-progress' : 
                                'completed'
                            }`}>
                                {tournament.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : 
                                 tournament.status === 'in_progress' ? '–ò–¥–µ—Ç' : 
                                 tournament.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                                 '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'}
                            </span>
                        </div>
                    </div>
                </div>
            ))}
        </div>
    );

    return (
        <section className="tournaments-list">
            <h2>–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤</h2>
            {error && <p className="error">{error}</p>}
            
            {/* === üÜï –£–õ–£–ß–®–ï–ù–ù–´–ï –ö–û–ù–¢–†–û–õ–´ === */}
            <div className="tournaments-view-controls">
                <div className="view-mode-buttons">
                    {!isMobile && (
                        <button className={`view-mode-btn ${effectiveViewMode === 'table' ? 'active' : ''}`} onClick={() => setViewMode('table')}>
                            –¢–∞–±–ª–∏—Ü–∞
                        </button>
                    )}
                    <button className={`view-mode-btn ${effectiveViewMode === 'card' ? 'active' : ''}`} onClick={() => setViewMode('card')}>
                        –ö–∞—Ä—Ç–æ—á–∫–∏
                    </button>
                </div>
                
                {/* === üÜï –§–ò–õ–¨–¢–† –ò –°–û–†–¢–ò–†–û–í–ö–ê === */}
                <div className="filters-and-sort">
                    {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ */}
                    <button 
                        className={`filter-btn-tournaments ${hasActiveFilters() ? 'filter-active' : ''}`}
                        onClick={() => setShowFilterModal(true)}
                        title="–§–∏–ª—å—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤"
                    >
                        {/* üîß –ë–µ–ª–∞—è SVG –∏–∫–æ–Ω–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –≤—ã—Å–æ—Ç–æ–π 37px */}
                        <svg 
                            width="32" 
                            height="37" 
                            viewBox="0 0 24 24" 
                            fill="none" 
                            xmlns="http://www.w3.org/2000/svg"
                            style={{ 
                                filter: hasActiveFilters() ? 'drop-shadow(0 0 6px #ff0000)' : 'none'
                            }}
                        >
                            <path 
                                d="M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z" 
                                fill="#ffffff"
                            />
                        </svg>
                        {getActiveFiltersCount() > 0 && (
                            <span className="filter-count">
                                {getActiveFiltersCount()}
                            </span>
                        )}
                    </button>
                    
                    {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ö–∞—Ä—Ç–æ—á–∫–∏ */}
                    {effectiveViewMode === 'card' && (
                        <div className="sort-controls">
                            <label className="sort-label">
                                –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:
                                <select 
                                    value={`${sort.field}-${sort.direction}`} 
                                    onChange={(e) => {
                                        const [field, direction] = e.target.value.split('-');
                                        setSort({ field, direction });
                                    }}
                                    className="sort-select"
                                >
                                    {sortOptions.map(option => [
                                        <option key={`${option.value}-desc`} value={`${option.value}-desc`}>
                                            {option.label} (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
                                        </option>,
                                        <option key={`${option.value}-asc`} value={`${option.value}-asc`}>
                                            {option.label} (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
                                        </option>
                                    ]).flat()}
                                </select>
                            </label>
                        </div>
                    )}
                    
                    {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
                    {hasActiveFilters() && (
                        <button 
                            onClick={clearAllFilters}
                            className="clear-filters-btn"
                        >
                            –û—á–∏—Å—Ç–∏—Ç—å ({getActiveFiltersCount()})
                        </button>
                    )}
                </div>
            </div>

            {/* –°—Ç–∞—Ä–∞—è –ø–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
            <div className="tournaments-filter-bar">
                <input
                    type="text"
                    placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
                    value={filters.name}
                    onChange={(e) => setFilters({...filters, name: e.target.value})}
                    className="mobile-filter-input"
                />
            </div>
            
            {/* === üÜï –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í === */}
            {filteredAndSortedTournaments.length !== tournaments.length && (
                <div className="results-summary">
                    <span className="results-count">
                        –ü–æ–∫–∞–∑–∞–Ω–æ {filteredAndSortedTournaments.length} –∏–∑ {tournaments.length} —Ç—É—Ä–Ω–∏—Ä–æ–≤
                    </span>
                    {hasActiveFilters() && (
                        <span className="active-filters-summary">
                            (–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {getActiveFiltersCount()})
                        </span>
                    )}
                </div>
            )}
            
            {effectiveViewMode === 'table' ? renderTableView() : renderCardView()}
            
            {filteredAndSortedTournaments.length === 0 && <p>–¢—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</p>}
            
            {/* === üÜï –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –§–ò–õ–¨–¢–†–ê === */}
            <TournamentFilterModal
                isOpen={showFilterModal}
                onClose={() => setShowFilterModal(false)}
                filters={filters}
                onApplyFilters={handleApplyAdvancedFilters}
                tournaments={tournaments}
            />
        </section>
    );
}
 
export default TournamentsList;