import React, { useState, useEffect } from 'react';
import './TournamentInfoSection.css';
import { ensureHttps } from '../utils/userHelpers';
import ParticipationConfirmModal from './tournament/modals/ParticipationConfirmModal';
import TeamSelectionModal from './modals/TeamSelectionModal';

const TournamentInfoSection = ({ 
    tournament, 
    user, 
    isCreator, 
    isAdminOrCreator,
    onParticipationUpdate, // –ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
    userTeams = [] // –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}) => {
    const [isEditingDescription, setIsEditingDescription] = useState(false);
    const [isEditingRegulations, setIsEditingRegulations] = useState(false);
    const [description, setDescription] = useState(tournament?.description || '');
    const [regulations, setRegulations] = useState(tournament?.rules || '');
    const [isLoading, setIsLoading] = useState(false);
    const [selectedParticipant, setSelectedParticipant] = useState(null);
    const [showActions, setShowActions] = useState(false);
    
    // üÜï –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
    const [showRegulationsTooltip, setShowRegulationsTooltip] = useState(false);

    // üÜï –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    const [showParticipationConfirm, setShowParticipationConfirm] = useState(false);
    const [showTeamSelection, setShowTeamSelection] = useState(false);
    const [selectedTeam, setSelectedTeam] = useState(null);
    const [participationLoading, setParticipationLoading] = useState(false);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞
    useEffect(() => {
        console.log('üèÅ –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞:', {
            tournamentDescription: tournament?.description,
            tournamentRules: tournament?.rules,
            tournamentId: tournament?.id,
            tournamentName: tournament?.name
        });
        setDescription(tournament?.description || '');
        setRegulations(tournament?.rules || '');
    }, [tournament?.description, tournament?.rules]);

    // üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞
    useEffect(() => {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (!isEditingDescription && tournament?.description !== description) {
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:', {
                tournamentDescription: tournament?.description,
                localDescription: description,
                isEditingDescription
            });
            setDescription(tournament?.description || '');
        }
    }, [tournament?.description, isEditingDescription, description]);

    useEffect(() => {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (!isEditingRegulations && tournament?.rules !== regulations) {
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞:', {
                tournamentRules: tournament?.rules,
                localRegulations: regulations,
                isEditingRegulations,
                areEqual: tournament?.rules === regulations
            });
            setRegulations(tournament?.rules || '');
        }
    }, [tournament?.rules, isEditingRegulations, regulations]);

    // üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    const isUserParticipant = () => {
        if (!user || !tournament?.participants) return false;
        return tournament.participants.some(participant => 
            participant.user_id === user.id || participant.id === user.id
        );
    };

    // üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è
    const canParticipate = () => {
        if (!user) return false;
        if (!tournament) return false;
        if (tournament.status !== 'active') return false;
        if (isUserParticipant()) return false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (tournament.max_participants && tournament.participants?.length >= tournament.max_participants) {
            return false;
        }
        
        return true;
    };

    // üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
    const getEligibleTeams = () => {
        if (!userTeams || !tournament?.game) return [];
        
        return userTeams.filter(team => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ
            return team.game === tournament.game || team.game === null; // null –æ–∑–Ω–∞—á–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        });
    };

    // üÜï –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç–∏—è
    const handleParticipateClick = () => {
        if (!canParticipate()) return;

        const participantType = tournament.participant_type;

        if (participantType === 'team') {
            const eligibleTeams = getEligibleTeams();
            
            if (eligibleTeams.length === 0) {
                // –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–∞–Ω–¥ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é
                setShowTeamSelection(true);
            } else {
                // –ï—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
                setShowTeamSelection(true);
            }
        } else {
            // Solo –∏–ª–∏ Mix - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            setShowParticipationConfirm(true);
        }
    };

    // üÜï –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –¥–ª—è Solo/Mix —Ç—É—Ä–Ω–∏—Ä–æ–≤
    const handleConfirmParticipation = async () => {
        setParticipationLoading(true);
        
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/tournaments/${tournament.id}/participate`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    participant_type: tournament.participant_type
                })
            });

            const data = await response.json();

            if (response.ok) {
                setShowParticipationConfirm(false);
                if (onParticipationUpdate) {
                    onParticipationUpdate();
                }
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ');
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ:', error);
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            setParticipationLoading(false);
        }
    };

    // üÜï –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è
    const handleTeamSelected = async (team) => {
        setSelectedTeam(team);
        setShowTeamSelection(false);
        setShowParticipationConfirm(true);
    };

    // üÜï –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π
    const handleConfirmTeamParticipation = async () => {
        if (!selectedTeam) return;

        setParticipationLoading(true);
        
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/tournaments/${tournament.id}/participate`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    participant_type: 'team',
                    team_id: selectedTeam.id,
                    team_data: selectedTeam
                })
            });

            const data = await response.json();

            if (response.ok) {
                setShowParticipationConfirm(false);
                setSelectedTeam(null);
                if (onParticipationUpdate) {
                    onParticipationUpdate();
                }
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ');
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ:', error);
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            setParticipationLoading(false);
        }
    };

    // üÜï –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const handleCloseModals = () => {
        setShowParticipationConfirm(false);
        setShowTeamSelection(false);
        setSelectedTeam(null);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    const getGameDisplayName = (game) => {
        const gameNames = {
            'Counter-Strike 2': 'Counter-Strike 2',
            'Counter Strike 2': 'Counter-Strike 2',
            'cs2': 'Counter-Strike 2',
            'dota2': 'Dota 2',
            'Dota 2': 'Dota 2',
            'valorant': 'Valorant',
            'lol': 'League of Legends',
            'overwatch': 'Overwatch 2'
        };
        return gameNames[game] || game || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    const getFormatDisplayName = (format) => {
        const formatNames = {
            'single_elimination': '–û–¥–∏–Ω–æ—á–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ',
            'double_elimination': '–î–≤–æ–π–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ',
            'round_robin': '–ö—Ä—É–≥–æ–≤–æ–π —Ç—É—Ä–Ω–∏—Ä',
            'swiss': '–®–≤–µ–π—Ü–∞—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞',
            'mix': '–ú–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä'
        };
        return formatNames[format] || format || '–ù–µ —É–∫–∞–∑–∞–Ω';
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const getParticipantTypeDisplayName = (type) => {
        const typeNames = {
            'solo': '–û–¥–∏–Ω–æ—á–Ω—ã–π',
            'team': '–ö–æ–º–∞–Ω–¥–Ω—ã–π',
            'mix': '–ú–∏–∫—Å'
        };
        return typeNames[type] || type || '–ù–µ —É–∫–∞–∑–∞–Ω';
    };

    // üÜï –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    const getStatusDisplayName = (status) => {
        const statusConfig = {
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –°–¢–ê–¢–£–°–´ - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç backend API
            'active': { label: 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π', class: 'status-active' },
            'in_progress': { label: 'üü¢ –ò–¥–µ—Ç', class: 'status-in-progress' },
            'in-progress': { label: 'üü¢ –ò–¥–µ—Ç', class: 'status-in-progress' }, // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
            'completed': { label: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω', class: 'status-completed' },
            
            // üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–¢–ê–¢–£–°–´ (–µ—Å–ª–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±—É–¥—É—â–µ–º)
            'upcoming': { label: 'üîú –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π', class: 'status-upcoming' },
            'ongoing': { label: 'üü¢ –ò–¥–µ—Ç', class: 'status-ongoing' },
            'cancelled': { label: '‚ùå –û—Ç–º–µ–Ω–µ–Ω', class: 'status-cancelled' },
            'paused': { label: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', class: 'status-paused' },
            'pending': { label: '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ', class: 'status-pending' }
        };
        
        const result = statusConfig[status] || { label: `‚ùì ${status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`, class: 'status-unknown' };
        
        // üîß –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
        console.log('üîç getStatusDisplayName:', {
            inputStatus: status,
            inputType: typeof status,
            foundConfig: !!statusConfig[status],
            result: result
        });
        
        return result;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
    const formatDate = (dateString) => {
        if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch (error) {
            return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
        }
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    const handleSaveDescription = async () => {
        setIsLoading(true);
        console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è:', {
            tournamentId: tournament.id,
            newDescription: description,
            currentTournamentDescription: tournament?.description
        });
        
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/tournaments/${tournament.id}/description`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    description: description
                })
            });

            const data = await response.json();

            if (response.ok) {
                console.log('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', description);
                
                // üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø
                // 1. –°–Ω–∞—á–∞–ª–∞ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                setIsEditingDescription(false);
                
                // 2. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–ª–±—ç–∫
                if (onParticipationUpdate) {
                    console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º onParticipationUpdate –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞');
                    await onParticipationUpdate();
                    console.log('‚úÖ onParticipationUpdate –∑–∞–≤–µ—Ä—à–µ–Ω');
                } else {
                    console.warn('‚ö†Ô∏è onParticipationUpdate –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
                }
                
                // 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è');
                setDescription(description); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                
                console.log('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:', error);
            alert(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: ${error.message}`);
        } finally {
            setIsLoading(false);
        }
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
    const handleSaveRegulations = async () => {
        setIsLoading(true);
        console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞:', {
            tournamentId: tournament.id,
            newRegulations: regulations,
            currentTournamentRules: tournament?.rules
        });
        
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/tournaments/${tournament.id}/rules`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    rules: regulations
                })
            });

            const data = await response.json();

            if (response.ok) {
                console.log('‚úÖ –†–µ–≥–ª–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', regulations);
                
                // üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø
                // 1. –°–Ω–∞—á–∞–ª–∞ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                setIsEditingRegulations(false);
                
                // 2. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–ª–±—ç–∫
                if (onParticipationUpdate) {
                    console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º onParticipationUpdate –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞');
                    await onParticipationUpdate();
                    console.log('‚úÖ onParticipationUpdate –∑–∞–≤–µ—Ä—à–µ–Ω');
                } else {
                    console.warn('‚ö†Ô∏è onParticipationUpdate –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
                }
                
                // 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ UI –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –µ—Å–ª–∏ props –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
                console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
                setRegulations(regulations); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                
                console.log('‚úÖ –†–µ–≥–ª–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞:', error);
            alert(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞: ${error.message}`);
        } finally {
            setIsLoading(false);
        }
    };

    // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    const handleCancelDescription = () => {
        setDescription(tournament?.description || '');
        setIsEditingDescription(false);
    };

    // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
    const handleCancelRegulations = () => {
        setRegulations(tournament?.rules || '');
        setIsEditingRegulations(false);
    };

    const handleParticipantClick = (participant) => {
        setSelectedParticipant(participant);
        setShowActions(true);
    };

    const handleOpenProfile = () => {
        if (selectedParticipant) {
            window.open(`/profile/${selectedParticipant.id}`, '_blank');
            setShowActions(false);
            setSelectedParticipant(null);
        }
    };

    // üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞
    const getCreatorInfo = () => {
        if (tournament?.creator_username) {
            return {
                id: tournament.created_by,
                username: tournament.creator_username,
                avatar_url: tournament.creator_avatar_url
            };
        }
        return null;
    };

    // üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const getAdmins = () => {
        if (Array.isArray(tournament?.admins)) {
            return tournament.admins;
        }
        return [];
    };
    
    // üÜï –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
    const truncateText = (text, maxLength = 400) => {
        if (!text || text.length <= maxLength) return text;
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        const truncated = text.substring(0, maxLength);
        const lastSpaceIndex = truncated.lastIndexOf(' ');
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—Ä–æ–±–µ–ª, –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω–µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
        return lastSpaceIndex > 0 ? 
            truncated.substring(0, lastSpaceIndex) + '...' : 
            truncated + '...';
    };

    // üÜï –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    const openFullRegulations = () => {
        if (!regulations) return;
        
        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ–µ–∫—Ç–∞
        const fullRegulationsHTML = `
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>–†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞ - ${tournament?.name || '–¢—É—Ä–Ω–∏—Ä'}</title>
                <style>
                    * {
                        margin: 0;
                        padding: 0;
                        box-sizing: border-box;
                    }
                    
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
                        background-color: #000000;
                        color: #ffffff;
                        line-height: 1.6;
                        min-height: 100vh;
                        padding: 40px 20px;
                    }
                    
                    .container {
                        max-width: 800px;
                        margin: 0 auto;
                    }
                    
                    .header {
                        text-align: center;
                        margin-bottom: 40px;
                        padding-bottom: 20px;
                        border-bottom: 1px solid #333333;
                    }
                    
                    .header h1 {
                        font-size: 2rem;
                        font-weight: 300;
                        letter-spacing: -0.025em;
                        margin-bottom: 8px;
                        color: #ffffff;
                    }
                    
                    .header .tournament-name {
                        font-size: 1.125rem;
                        color: #e0e0e0;
                        font-weight: 400;
                    }
                    
                    .header .logo {
                        display: inline-block;
                        margin-right: 12px;
                        font-size: 2rem;
                        color: #ef4444;
                    }
                    
                    .content {
                        background: #111111;
                        border: 1px solid #2a2a2a;
                        border-radius: 8px;
                        padding: 32px;
                        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
                    }
                    
                    .regulation-text {
                        white-space: pre-wrap;
                        font-size: 0.875rem;
                        line-height: 1.8;
                        color: #e0e0e0;
                    }
                    
                    .footer {
                        text-align: center;
                        margin-top: 40px;
                        padding-top: 20px;
                        border-top: 1px solid #333333;
                        color: #666666;
                        font-size: 0.75rem;
                    }
                    
                    .footer .accent {
                        color: #ef4444;
                        font-weight: 500;
                    }
                    
                    /* –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ–µ–∫—Ç–∞ */
                    ::-webkit-scrollbar {
                        width: 8px;
                    }
                    
                    ::-webkit-scrollbar-track {
                        background: #1a1a1a;
                    }
                    
                    ::-webkit-scrollbar-thumb {
                        background: #333333;
                        border-radius: 4px;
                    }
                    
                    ::-webkit-scrollbar-thumb:hover {
                        background: #555555;
                    }
                    
                    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
                    @media (max-width: 768px) {
                        body {
                            padding: 20px 16px;
                        }
                        
                        .header h1 {
                            font-size: 1.5rem;
                        }
                        
                        .content {
                            padding: 24px;
                        }
                        
                        .regulation-text {
                            font-size: 0.8rem;
                        }
                    }
                    
                    @media print {
                        body {
                            background-color: white;
                            color: black;
                        }
                        
                        .content {
                            background: white;
                            border: 1px solid #ddd;
                            box-shadow: none;
                        }
                        
                        .regulation-text {
                            color: black;
                        }
                        
                        .header .logo {
                            color: #333;
                        }
                        
                        .footer .accent {
                            color: #333;
                        }
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>
                            <span class="logo">üìã</span>
                            –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞
                        </h1>
                        <div class="tournament-name">${tournament?.name || '–¢—É—Ä–Ω–∏—Ä'}</div>
                    </div>
                    
                    <div class="content">
                        <div class="regulation-text">${regulations.replace(/\n/g, '<br>')}</div>
                    </div>
                    
                    <div class="footer">
                        –°–æ–∑–¥–∞–Ω–æ –≤ <span class="accent">1337 Community</span> Tournament System
                    </div>
                </div>
            </body>
            </html>
        `;
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Å –ø–æ–ª–Ω—ã–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º
        const newWindow = window.open('', '_blank');
        if (newWindow) {
            newWindow.document.write(fullRegulationsHTML);
            newWindow.document.close();
        }
    };

    // üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∫—Ä–∞—â–∞—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç
    const shouldTruncateRegulations = (text) => {
        return text && text.length > 400;
    };

    const creatorInfo = getCreatorInfo();
    const adminsList = getAdmins();
    const statusInfo = getStatusDisplayName(tournament?.status);

    return (
        <div className="tournament-info-section">
            <div className="section-header">
                <h2>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ</h2>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ */}
            <div className="tournament-meta-grid">
                <div className="meta-row">
                    <div className="meta-item">
                        <strong>üéÆ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</strong>
                        <span>{getGameDisplayName(tournament?.game)}</span>
                    </div>
                    
                    <div className="meta-item">
                        <strong>üèÜ –§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞:</strong>
                        <span>{getFormatDisplayName(tournament?.format)}</span>
                    </div>
                </div>

                <div className="meta-row">
                    <div className="meta-item">
                        <strong>üë• –¢–∏–ø —É—á–∞—Å—Ç–∏—è:</strong>
                        <span>{getParticipantTypeDisplayName(tournament?.participant_type)}</span>
                    </div>
                    
                    <div className="meta-item">
                        <strong>üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong>
                        <span>
                            {tournament?.participants?.length || 0}
                            {tournament?.max_participants && ` / ${tournament.max_participants}`}
                        </span>
                    </div>
                </div>

                <div className="meta-row">
                    <div className="meta-item">
                        <strong>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong>
                        <span>{formatDate(tournament?.created_at)}</span>
                    </div>
                    
                    <div className="meta-item">
                        <strong>üöÄ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞:</strong>
                        <span>{formatDate(tournament?.start_date) || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}</span>
                    </div>
                </div>

                <div className="meta-row">
                    <div className="meta-item">
                        <strong>‚ö° –°—Ç–∞—Ç—É—Å:</strong>
                        <span className={`status-badge ${statusInfo.class}`}>
                            {statusInfo.label}
                        </span>
                    </div>

                    {tournament?.prize_pool && (
                        <div className="meta-item">
                            <strong>üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:</strong>
                            <span>{tournament.prize_pool}</span>
                        </div>
                    )}
                </div>

                {/* üÜï –ö–Ω–æ–ø–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ */}
                {canParticipate() && (
                    <div className="meta-row">
                        <div className="meta-item participation-section">
                            <strong>üéØ –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ:</strong>
                            <div className="participation-controls">
                                <button 
                                    className="participate-btn"
                                    onClick={handleParticipateClick}
                                    disabled={participationLoading}
                                >
                                    {participationLoading ? (
                                        <>
                                            <span className="loading-spinner"></span>
                                            –£—á–∞—Å—Ç–≤—É—é...
                                        </>
                                    ) : (
                                        <>
                                            üöÄ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                                        </>
                                    )}
                                </button>
                                
                                {tournament.participant_type === 'team' && (
                                    <div className="participation-hint">
                                        <span className="hint-icon">üí°</span>
                                        <span>–î–ª—è —É—á–∞—Å—Ç–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É</span>
                                    </div>
                                )}
                                
                                {tournament.participant_type === 'mix' && (
                                    <div className="participation-hint">
                                        <span className="hint-icon">üé≤</span>
                                        <span>–ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</span>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                )}

                {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–∏—è –¥–ª—è —É–∂–µ —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö */}
                {isUserParticipant() && (
                    <div className="meta-row">
                        <div className="meta-item participation-status">
                            <strong>‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å:</strong>
                            <span className="participant-status-badge">
                                üéØ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                            </span>
                        </div>
                    </div>
                )}

                {/* üÜï –ë–ª–æ–∫ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ */}
                <div className="meta-row">
                    <div className="meta-item creator-meta">
                        <strong>üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞:</strong>
                        <div className="creator-display">
                            <div className="creator-avatar">
                                {creatorInfo?.avatar_url ? (
                                    <img 
                                        src={ensureHttps(creatorInfo.avatar_url)} 
                                        alt={creatorInfo.username}
                                        onError={(e) => { e.target.src = '/default-avatar.png'; }}
                                    />
                                ) : (
                                    <div className="avatar-placeholder">
                                        {(creatorInfo?.username || 'U')[0].toUpperCase()}
                                    </div>
                                )}
                            </div>
                            <div className="creator-info">
                                {creatorInfo ? (
                                    <a 
                                        href={`/profile/${creatorInfo.id}`} 
                                        target="_blank" 
                                        rel="noopener noreferrer"
                                        className="creator-link"
                                    >
                                        {creatorInfo.username}
                                    </a>
                                ) : (
                                    <span className="creator-name">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å</span>
                                )}
                            </div>
                        </div>
                    </div>

                    {/* üÜï –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞ */}
                    {adminsList.length > 0 && (
                        <div className="meta-item admins-meta">
                            <strong>üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ({adminsList.length}):</strong>
                            <div className="admins-list">
                                {adminsList.slice(0, 3).map((admin, index) => (
                                    <div key={admin.id || index} className="admin-item">
                                        <div className="admin-avatar">
                                            {admin.avatar_url ? (
                                                <img 
                                                    src={ensureHttps(admin.avatar_url)} 
                                                    alt={admin.username}
                                                    onError={(e) => { e.target.src = '/default-avatar.png'; }}
                                                />
                                            ) : (
                                                <div className="avatar-placeholder admin-placeholder">
                                                    {(admin.username || 'A')[0].toUpperCase()}
                                                </div>
                                            )}
                                        </div>
                                        <div className="admin-info">
                                            <a 
                                                href={`/profile/${admin.user_id || admin.id}`}
                                                target="_blank" 
                                                rel="noopener noreferrer"
                                                className="admin-link"
                                                title={`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ${formatDate(admin.assigned_at)}`}
                                            >
                                                {admin.username}
                                            </a>
                                        </div>
                                    </div>
                                ))}
                                {adminsList.length > 3 && (
                                    <div className="more-admins">
                                        +{adminsList.length - 3} –µ—â–µ
                                    </div>
                                )}
                            </div>
                        </div>
                    )}
                </div>
            </div>

            {/* –ë–ª–æ–∫ –æ–ø–∏—Å–∞–Ω–∏—è */}
            <div className="description-block">
                <div className="block-header">
                    <h3>üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                    {isAdminOrCreator && !isEditingDescription && (
                        <div className="edit-controls">
                            <button 
                                className="edit-btn"
                                onClick={() => setIsEditingDescription(true)}
                                disabled={isLoading}
                            >
                                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                        </div>
                    )}
                    {isEditingDescription && (
                        <div className="edit-actions">
                            <button 
                                className="save-btn"
                                onClick={handleSaveDescription}
                                disabled={isLoading}
                            >
                                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </button>
                            <button 
                                className="cancel-btn"
                                onClick={handleCancelDescription}
                                disabled={isLoading}
                            >
                                ‚ùå –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    )}
                </div>
                
                <div className="tournament-description-content">
                    {isEditingDescription ? (
                        <textarea
                            className="description-editor"
                            value={description}
                            onChange={(e) => setDescription(e.target.value)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞..."
                            disabled={isLoading}
                        />
                    ) : (
                        <>
                            {description ? (
                                <div className="tournament-description">
                                    {description.split('\n').map((line, index) => (
                                        <p key={index}>{line}</p>
                                    ))}
                                </div>
                            ) : (
                                <div className="no-description">
                                    {isAdminOrCreator ? (
                                        <p>–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>
                                    ) : (
                                        <p>–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.</p>
                                    )}
                                </div>
                            )}
                        </>
                    )}
                </div>
            </div>

            {/* –ë–ª–æ–∫ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ */}
            <div className="rules-block">
                <div className="block-header">
                    <h3>üìã –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                    {isAdminOrCreator && !isEditingRegulations && (
                        <div className="edit-controls">
                            <button 
                                className="edit-btn"
                                onClick={() => setIsEditingRegulations(true)}
                                disabled={isLoading}
                            >
                                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                        </div>
                    )}
                    {isEditingRegulations && (
                        <div className="edit-actions">
                            <button 
                                className="save-btn"
                                onClick={handleSaveRegulations}
                                disabled={isLoading}
                            >
                                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </button>
                            <button 
                                className="cancel-btn"
                                onClick={handleCancelRegulations}
                                disabled={isLoading}
                            >
                                ‚ùå –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    )}
                </div>
                
                <div className="tournament-rules-content">
                    {isEditingRegulations ? (
                        <textarea
                            className="rules-editor"
                            value={regulations}
                            onChange={(e) => setRegulations(e.target.value)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞..."
                            disabled={isLoading}
                        />
                    ) : (
                        <>
                            {regulations ? (
                                <div className="rules-text">
                                    {/* üÜï –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ —Å —Ç—É–ª—Ç–∏–ø–æ–º */}
                                    {shouldTruncateRegulations(regulations) ? (
                                        <div className="rules-container">
                                            {/* –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç */}
                                            <div 
                                                className="rules-truncated"
                                                onMouseEnter={() => setShowRegulationsTooltip(true)}
                                                onMouseLeave={() => setShowRegulationsTooltip(false)}
                                                style={{ position: 'relative' }}
                                            >
                                                {truncateText(regulations).split('\n').map((line, index) => (
                                                    <div key={index} className="rule-item">{line}</div>
                                                ))}
                                                
                                                {/* –¢—É–ª—Ç–∏–ø –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ */}
                                                {showRegulationsTooltip && (
                                                    <div className="regulations-tooltip">
                                                        <div className="tooltip-content">
                                                            <p>üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç</p>
                                                            <button 
                                                                className="tooltip-link"
                                                                onClick={openFullRegulations}
                                                                title="–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ"
                                                            >
                                                                üîó –û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                                                            </button>
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    ) : (
                                        // –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –∫–æ—Ä–æ—Ç–∫–∏–π
                                        <div>
                                            {regulations.split('\n').map((line, index) => (
                                                <div key={index} className="rule-item">{line}</div>
                                            ))}
                                        </div>
                                    )}
                                </div>
                            ) : (
                                <div className="default-rules">
                                    {isAdminOrCreator ? (
                                        <div 
                                            className="no-rules-admin"
                                            onClick={() => setIsEditingRegulations(true)}
                                        >
                                            <p>–†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>
                                        </div>
                                    ) : (
                                        <div className="rule-section">
                                            <h4>üéØ –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞</h4>
                                            <ul>
                                                <li>–°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª Fair Play</li>
                                                <li>–ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∏—Ç–æ–≤ –∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤</li>
                                                <li>–£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞–º</li>
                                            </ul>
                                        </div>
                                    )}
                                </div>
                            )}
                        </>
                    )}
                </div>
            </div>

            {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ - —Å–∫—Ä—ã–≤–∞–µ–º –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ */}
            {!(tournament?.format === 'mix' && tournament?.teams && tournament?.teams.length > 0) && (
                <div className="participants-section">
                    <h3>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                    <div className="participants-list">
                        {tournament?.participants?.map(participant => (
                            <div 
                                key={participant.id} 
                                className="participant-item"
                                onClick={() => handleParticipantClick(participant)}
                            >
                                <img 
                                    src={ensureHttps(participant.avatar_url) || '/default-avatar.png'} 
                                    alt={participant.username || participant.name || '–£—á–∞—Å—Ç–Ω–∏–∫'}
                                    className="participant-avatar"
                                    onError={(e) => { e.target.src = '/default-avatar.png'; }}
                                />
                                <span className="participant-name">
                                    {participant.username || participant.name || '–£—á–∞—Å—Ç–Ω–∏–∫'}
                                </span>
                            </div>
                        ))}
                    </div>

                    {showActions && selectedParticipant && (
                        <div className="participant-actions-modal" onClick={() => setShowActions(false)}>
                            <div className="actions-content" onClick={(e) => e.stopPropagation()}>
                                <h4>–î–µ–π—Å—Ç–≤–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º</h4>
                                <button 
                                    className="action-button profile-button"
                                    onClick={handleOpenProfile}
                                >
                                    üë§ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                                </button>
                                {isAdminOrCreator && (
                                    <button 
                                        className="action-button remove-button"
                                        onClick={() => {
                                            // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                                            console.log('–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', selectedParticipant);
                                            setShowActions(false);
                                        }}
                                    >
                                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
                                    </button>
                                )}
                                <button 
                                    className="action-button cancel-button"
                                    onClick={() => setShowActions(false)}
                                >
                                    ‚ùå –û—Ç–º–µ–Ω–∞
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            )}

            {/* üÜï –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è */}
            <ParticipationConfirmModal
                isOpen={showParticipationConfirm}
                onClose={handleCloseModals}
                onConfirm={selectedTeam ? handleConfirmTeamParticipation : handleConfirmParticipation}
                tournament={tournament}
                isLoading={participationLoading}
                participationType={tournament?.participant_type}
            />

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã */}
            {showTeamSelection && (
                <TeamSelectionModal
                    onClose={handleCloseModals}
                    onTeamSelected={handleTeamSelected}
                    tournamentId={tournament?.id}
                    user={user}
                />
            )}
        </div>
    );
};

export default TournamentInfoSection; 