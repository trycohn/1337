import React, { useState, useEffect } from 'react';
import './TournamentInfoSection.css';
import { ensureHttps } from '../utils/userHelpers';

const TournamentInfoSection = ({ tournament, user, isCreator, isAdminOrCreator }) => {
    const [isEditingDescription, setIsEditingDescription] = useState(false);
    const [isEditingRegulations, setIsEditingRegulations] = useState(false);
    const [description, setDescription] = useState(tournament?.description || '');
    const [regulations, setRegulations] = useState(tournament?.regulations || '');
    const [isLoading, setIsLoading] = useState(false);
    const [selectedParticipant, setSelectedParticipant] = useState(null);
    const [showActions, setShowActions] = useState(false);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞
    useEffect(() => {
        setDescription(tournament?.description || '');
        setRegulations(tournament?.regulations || '');
    }, [tournament]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    const getGameDisplayName = (game) => {
        const gameNames = {
            'Counter-Strike 2': 'Counter-Strike 2',
            'Counter Strike 2': 'Counter-Strike 2',
            'cs2': 'Counter-Strike 2',
            'dota2': 'Dota 2',
            'Dota 2': 'Dota 2',
            'valorant': 'Valorant',
            'lol': 'League of Legends',
            'overwatch': 'Overwatch 2'
        };
        return gameNames[game] || game || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    const getFormatDisplayName = (format) => {
        const formatNames = {
            'single_elimination': '–û–¥–∏–Ω–æ—á–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ',
            'double_elimination': '–î–≤–æ–π–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ',
            'round_robin': '–ö—Ä—É–≥–æ–≤–æ–π —Ç—É—Ä–Ω–∏—Ä',
            'swiss': '–®–≤–µ–π—Ü–∞—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞',
            'mix': '–ú–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä'
        };
        return formatNames[format] || format || '–ù–µ —É–∫–∞–∑–∞–Ω';
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const getParticipantTypeDisplayName = (type) => {
        const typeNames = {
            'solo': '–û–¥–∏–Ω–æ—á–Ω—ã–π',
            'team': '–ö–æ–º–∞–Ω–¥–Ω—ã–π',
            'mix': '–ú–∏–∫—Å'
        };
        return typeNames[type] || type || '–ù–µ —É–∫–∞–∑–∞–Ω';
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
    const formatDate = (dateString) => {
        if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch (error) {
            return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
        }
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    const handleSaveDescription = async () => {
        setIsLoading(true);
        try {
            // TODO: –î–æ–±–∞–≤–∏—Ç—å API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è:', description);
            setIsEditingDescription(false);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:', error);
        } finally {
            setIsLoading(false);
        }
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
    const handleSaveRegulations = async () => {
        setIsLoading(true);
        try {
            // TODO: –î–æ–±–∞–≤–∏—Ç—å API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞:', regulations);
            setIsEditingRegulations(false);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞:', error);
        } finally {
            setIsLoading(false);
        }
    };

    // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    const handleCancelDescription = () => {
        setDescription(tournament?.description || '');
        setIsEditingDescription(false);
    };

    // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
    const handleCancelRegulations = () => {
        setRegulations(tournament?.regulations || '');
        setIsEditingRegulations(false);
    };

    const handleParticipantClick = (participant) => {
        setSelectedParticipant(participant);
        setShowActions(true);
    };

    const handleOpenProfile = () => {
        if (selectedParticipant) {
            window.open(`/profile/${selectedParticipant.id}`, '_blank');
            setShowActions(false);
            setSelectedParticipant(null);
        }
    };

    return (
        <div className="tournament-info-section">
            <div className="section-header">
                <h2>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ</h2>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ */}
            <div className="tournament-meta-grid">
                <div className="meta-row">
                    <div className="meta-item">
                        <strong>üéÆ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</strong>
                        <span>{getGameDisplayName(tournament?.game)}</span>
                    </div>
                    
                    <div className="meta-item">
                        <strong>üèÜ –§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞:</strong>
                        <span>{getFormatDisplayName(tournament?.format)}</span>
                    </div>
                </div>

                <div className="meta-row">
                    <div className="meta-item">
                        <strong>üë• –¢–∏–ø —É—á–∞—Å—Ç–∏—è:</strong>
                        <span>{getParticipantTypeDisplayName(tournament?.participant_type)}</span>
                    </div>
                    
                    <div className="meta-item">
                        <strong>üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong>
                        <span>
                            {tournament?.participants?.length || 0}
                            {tournament?.max_participants && ` / ${tournament.max_participants}`}
                        </span>
                    </div>
                </div>

                <div className="meta-row">
                    <div className="meta-item">
                        <strong>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong>
                        <span>{formatDate(tournament?.created_at)}</span>
                    </div>
                    
                    <div className="meta-item">
                        <strong>üöÄ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞:</strong>
                        <span>{formatDate(tournament?.start_date) || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}</span>
                    </div>
                </div>

                <div className="meta-row">
                    <div className="meta-item">
                        <strong>‚ö° –°—Ç–∞—Ç—É—Å:</strong>
                        <span className={`status-badge status-${tournament?.status}`}>
                            {tournament?.status === 'upcoming' && 'üîú –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π'}
                            {tournament?.status === 'ongoing' && 'üü¢ –ò–¥–µ—Ç'}
                            {tournament?.status === 'in-progress' && 'üü¢ –ò–¥–µ—Ç'}
                            {tournament?.status === 'completed' && '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω'}
                            {tournament?.status === 'cancelled' && '‚ùå –û—Ç–º–µ–Ω–µ–Ω'}
                            {!tournament?.status && '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                        </span>
                    </div>

                    {tournament?.prize_pool && (
                        <div className="meta-item">
                            <strong>üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:</strong>
                            <span>{tournament.prize_pool}</span>
                        </div>
                    )}
                </div>

                <div className="meta-row">
                    <div className="meta-item creator-meta">
                        <strong>üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞:</strong>
                        <div className="creator-display">
                            <div className="creator-avatar">
                                {tournament?.creator?.avatar_url ? (
                                    <img 
                                        src={ensureHttps(tournament.creator.avatar_url)} 
                                        alt={tournament.creator.username || tournament.creator.name}
                                        onError={(e) => { e.target.src = '/default-avatar.png'; }}
                                    />
                                ) : (
                                    <div className="avatar-placeholder">
                                        {(tournament?.creator?.username || tournament?.creator?.name || 'U')[0].toUpperCase()}
                                    </div>
                                )}
                            </div>
                            <div className="creator-info">
                                {tournament?.creator ? (
                                    <a 
                                        href={`/profile/${tournament.creator.id}`} 
                                        target="_blank" 
                                        rel="noopener noreferrer"
                                        className="creator-link"
                                    >
                                        {tournament.creator.username || tournament.creator.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}
                                    </a>
                                ) : (
                                    <span className="creator-name">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å</span>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* –ë–ª–æ–∫ –æ–ø–∏—Å–∞–Ω–∏—è */}
            <div className="description-block">
                <div className="block-header">
                    <h3>üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                    {isAdminOrCreator && !isEditingDescription && (
                        <div className="edit-controls">
                            <button 
                                className="edit-btn"
                                onClick={() => setIsEditingDescription(true)}
                                disabled={isLoading}
                            >
                                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                        </div>
                    )}
                    {isEditingDescription && (
                        <div className="edit-actions">
                            <button 
                                className="save-btn"
                                onClick={handleSaveDescription}
                                disabled={isLoading}
                            >
                                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </button>
                            <button 
                                className="cancel-btn"
                                onClick={handleCancelDescription}
                                disabled={isLoading}
                            >
                                ‚ùå –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    )}
                </div>
                
                <div className="tournament-description-content">
                    {isEditingDescription ? (
                        <textarea
                            className="description-editor"
                            value={description}
                            onChange={(e) => setDescription(e.target.value)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞..."
                            disabled={isLoading}
                        />
                    ) : (
                        <>
                            {description ? (
                                <div className="tournament-description">
                                    {description.split('\n').map((line, index) => (
                                        <p key={index}>{line}</p>
                                    ))}
                                </div>
                            ) : (
                                <div className="no-description">
                                    {isAdminOrCreator ? (
                                        <p>–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>
                                    ) : (
                                        <p>–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.</p>
                                    )}
                                </div>
                            )}
                        </>
                    )}
                </div>
            </div>

            {/* –ë–ª–æ–∫ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ */}
            <div className="rules-block">
                <div className="block-header">
                    <h3>üìã –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                    {isAdminOrCreator && !isEditingRegulations && (
                        <div className="edit-controls">
                            <button 
                                className="edit-btn"
                                onClick={() => setIsEditingRegulations(true)}
                                disabled={isLoading}
                            >
                                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                        </div>
                    )}
                    {isEditingRegulations && (
                        <div className="edit-actions">
                            <button 
                                className="save-btn"
                                onClick={handleSaveRegulations}
                                disabled={isLoading}
                            >
                                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </button>
                            <button 
                                className="cancel-btn"
                                onClick={handleCancelRegulations}
                                disabled={isLoading}
                            >
                                ‚ùå –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    )}
                </div>
                
                <div className="tournament-rules-content">
                    {isEditingRegulations ? (
                        <textarea
                            className="rules-editor"
                            value={regulations}
                            onChange={(e) => setRegulations(e.target.value)}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞..."
                            disabled={isLoading}
                        />
                    ) : (
                        <>
                            {regulations ? (
                                <div className="rules-text">
                                    {regulations.split('\n').map((line, index) => (
                                        <div key={index} className="rule-item">{line}</div>
                                    ))}
                                </div>
                            ) : (
                                <div className="default-rules">
                                    {isAdminOrCreator ? (
                                        <div 
                                            className="no-rules-admin"
                                            onClick={() => setIsEditingRegulations(true)}
                                        >
                                            <p>–†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>
                                        </div>
                                    ) : (
                                        <div className="rule-section">
                                            <h4>üéØ –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞</h4>
                                            <ul>
                                                <li>–°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª Fair Play</li>
                                                <li>–ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∏—Ç–æ–≤ –∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤</li>
                                                <li>–£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞–º</li>
                                            </ul>
                                        </div>
                                    )}
                                </div>
                            )}
                        </>
                    )}
                </div>
            </div>

            {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ - —Å–∫—Ä—ã–≤–∞–µ–º –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ */}
            {!(tournament?.format === 'mix' && tournament?.teams && tournament?.teams.length > 0) && (
                <div className="participants-section">
                    <h3>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                    <div className="participants-list">
                        {tournament?.participants?.map(participant => (
                            <div 
                                key={participant.id} 
                                className="participant-item"
                                onClick={() => handleParticipantClick(participant)}
                            >
                                <img 
                                    src={ensureHttps(participant.avatar_url) || '/default-avatar.png'} 
                                    alt={participant.username || participant.name || '–£—á–∞—Å—Ç–Ω–∏–∫'}
                                    className="participant-avatar"
                                    onError={(e) => { e.target.src = '/default-avatar.png'; }}
                                />
                                <span className="participant-name">
                                    {participant.username || participant.name || '–£—á–∞—Å—Ç–Ω–∏–∫'}
                                </span>
                            </div>
                        ))}
                    </div>

                    {showActions && selectedParticipant && (
                        <div className="participant-actions-modal" onClick={() => setShowActions(false)}>
                            <div className="actions-content" onClick={(e) => e.stopPropagation()}>
                                <h4>–î–µ–π—Å—Ç–≤–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º</h4>
                                <button 
                                    className="action-button profile-button"
                                    onClick={handleOpenProfile}
                                >
                                    üë§ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                                </button>
                                {isAdminOrCreator && (
                                    <button 
                                        className="action-button remove-button"
                                        onClick={() => {
                                            // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                                            console.log('–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', selectedParticipant);
                                            setShowActions(false);
                                        }}
                                    >
                                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
                                    </button>
                                )}
                                <button 
                                    className="action-button cancel-button"
                                    onClick={() => setShowActions(false)}
                                >
                                    ‚ùå –û—Ç–º–µ–Ω–∞
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default TournamentInfoSection; 