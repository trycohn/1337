import React from 'react';
import './PasswordStrengthIndicator.css';

function PasswordStrengthIndicator({ password, confirmPassword }) {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
    const analyzePasswordStrength = (password) => {
        if (!password) {
            return { score: 0, level: 'none', feedback: [], checks: {} };
        }

        let score = 0;
        const feedback = [];
        const checks = {
            length: password.length >= 8,
            uppercase: /[A-Z]/.test(password),
            lowercase: /[a-z]/.test(password),
            numbers: /\d/.test(password),
            noSpaces: !/\s/.test(password)
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)
        if (checks.length) {
            score += 30;
            if (password.length >= 12) {
                score += 10; // –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            }
        } else {
            feedback.push('–£–≤–µ–ª–∏—á—å—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –¥–æ 8+ —Å–∏–º–≤–æ–ª–æ–≤');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
        if (checks.uppercase) {
            score += 20;
        } else {
            feedback.push('–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (A-Z)');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤
        if (checks.lowercase) {
            score += 20;
        } else {
            feedback.push('–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã (a-z)');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä
        if (checks.numbers) {
            score += 20;
        } else {
            feedback.push('–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã (0-9)');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
        if (checks.noSpaces) {
            score += 10;
        } else {
            feedback.push('–£–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –ø–∞—Ä–æ–ª—è');
        }

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ —Ü–≤–µ—Ç–∞
        let level, color, bgColor;
        if (score >= 80) {
            level = '–û—Ç–ª–∏—á–Ω—ã–π';
            color = '#4CAF50';
            bgColor = '#4CAF50';
        } else if (score >= 60) {
            level = '–•–æ—Ä–æ—à–∏–π';
            color = '#8BC34A';
            bgColor = '#8BC34A';
        } else if (score >= 40) {
            level = '–°—Ä–µ–¥–Ω–∏–π';
            color = '#FF9800';
            bgColor = '#FF9800';
        } else if (score >= 20) {
            level = '–°–ª–∞–±—ã–π';
            color = '#FF5722';
            bgColor = '#FF5722';
        } else {
            level = '–û—á–µ–Ω—å —Å–ª–∞–±—ã–π';
            color = '#F44336';
            bgColor = '#F44336';
        }

        return { 
            score: Math.min(score, 100), // –ú–∞–∫—Å–∏–º—É–º 100%
            level, 
            color,
            bgColor,
            feedback,
            checks
        };
    };

    const strength = analyzePasswordStrength(password);
    const passwordsMatch = password && confirmPassword && password === confirmPassword;

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª–æ—Å—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const getStrengthColor = () => {
        switch (strength.level) {
            case 'strong':
                return '#4CAF50'; // –ó–µ–ª–µ–Ω—ã–π
            case 'medium':
                return '#FF9800'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            case 'weak':
                return '#F44336'; // –ö—Ä–∞—Å–Ω—ã–π
            default:
                return '#E0E0E0'; // –°–µ—Ä—ã–π
        }
    };

    const getStrengthText = () => {
        switch (strength.level) {
            case 'strong':
                return '–ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å';
            case 'medium':
                return '–°—Ä–µ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å';
            case 'weak':
                return '–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å';
            default:
                return '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å';
        }
    };

    const getStrengthWidth = () => {
        const maxScore = 7;
        return Math.min((strength.score / maxScore) * 100, 100);
    };

    if (!password) {
        return null;
    }

    return (
        <div className="password-strength-indicator">
            {password && (
                <>
                    {/* –ü–æ–ª–æ—Å–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è */}
                    <div className="strength-bar-container">
                        <div 
                            className="strength-bar"
                            style={{
                                width: `${strength.score}%`,
                                backgroundColor: strength.bgColor || '#E0E0E0'
                            }}
                        />
                    </div>

                    {/* –¢–µ–∫—Å—Ç —É—Ä–æ–≤–Ω—è —Å–∏–ª—ã */}
                    <div 
                        className="strength-text"
                        style={{ color: strength.color || '#757575' }}
                    >
                        –°–∏–ª–∞ –ø–∞—Ä–æ–ª—è: {strength.level} ({strength.score}%)
                    </div>

                    {/* –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é */}
                    <div className="password-requirements">
                        <div className={`requirement ${strength.checks.length ? 'met' : 'unmet'}`}>
                            <span className="requirement-icon">
                                {strength.checks.length ? '‚úì' : '‚óã'}
                            </span>
                            <span>–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤</span>
                        </div>
                        <div className={`requirement ${strength.checks.uppercase ? 'met' : 'unmet'}`}>
                            <span className="requirement-icon">
                                {strength.checks.uppercase ? '‚úì' : '‚óã'}
                            </span>
                            <span>–ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (A-Z)</span>
                        </div>
                        <div className={`requirement ${strength.checks.lowercase ? 'met' : 'unmet'}`}>
                            <span className="requirement-icon">
                                {strength.checks.lowercase ? '‚úì' : '‚óã'}
                            </span>
                            <span>–°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã (a-z)</span>
                        </div>
                        <div className={`requirement ${strength.checks.numbers ? 'met' : 'unmet'}`}>
                            <span className="requirement-icon">
                                {strength.checks.numbers ? '‚úì' : '‚óã'}
                            </span>
                            <span>–¶–∏—Ñ—Ä—ã (0-9)</span>
                        </div>
                        <div className={`requirement ${strength.checks.noSpaces ? 'met' : 'unmet'}`}>
                            <span className="requirement-icon">
                                {strength.checks.noSpaces ? '‚úì' : '‚óã'}
                            </span>
                            <span>–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤</span>
                        </div>
                    </div>

                    {/* –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π */}
                    {confirmPassword && (
                        <div className={`password-match ${
                            password === confirmPassword ? 'match' : 'no-match'
                        }`}>
                            <span style={{ marginRight: '8px' }}>
                                {password === confirmPassword ? '‚úì' : '‚úó'}
                            </span>
                            {password === confirmPassword 
                                ? '–ü–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç' 
                                : '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
                            }
                        </div>
                    )}

                    {/* –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å */}
                    {strength.feedback.length > 0 && (
                        <div className="password-feedback">
                            <div className="feedback-title">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</div>
                            <ul className="feedback-list">
                                {strength.feedback.map((tip, index) => (
                                    <li key={index} className="feedback-item">{tip}</li>
                                ))}
                            </ul>
                        </div>
                    )}
                </>
            )}
        </div>
    );
}

export default PasswordStrengthIndicator; 