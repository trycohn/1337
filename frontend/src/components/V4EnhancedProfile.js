// Enhanced Profile Component –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 4
// Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, AI-–∞–Ω–∞–ª–∏–∑, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏

import React, { useState, useEffect, useRef, useCallback } from 'react';
import api from '../axios';
import './V4EnhancedProfile.css';
import { 
    Chart as ChartJS, 
    CategoryScale, 
    LinearScale, 
    PointElement, 
    LineElement, 
    Title, 
    Tooltip, 
    Legend,
    ArcElement,
    BarElement
} from 'chart.js';
import { Line, Doughnut, Bar } from 'react-chartjs-2';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Chart.js
ChartJS.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend,
    ArcElement,
    BarElement
);

function V4EnhancedProfile() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const [user, setUser] = useState(null);
    const [enhancedStats, setEnhancedStats] = useState(null);
    const [achievements, setAchievements] = useState([]);
    const [performanceAnalysis, setPerformanceAnalysis] = useState(null);
    const [gameAnalytics, setGameAnalytics] = useState(null);
    const [performanceHistory, setPerformanceHistory] = useState(null);
    const [leaderboard, setLeaderboard] = useState([]);

    // UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const [activeTab, setActiveTab] = useState('dashboard');
    const [isRealTimeConnected, setIsRealTimeConnected] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [notifications, setNotifications] = useState([]);
    const [chartPeriod, setChartPeriod] = useState('6m');

    // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const wsRef = useRef(null);
    const reconnectTimeoutRef = useRef(null);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        initializeComponent();
        return () => {
            // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            if (wsRef.current) {
                wsRef.current.close();
            }
            if (reconnectTimeoutRef.current) {
                clearTimeout(reconnectTimeoutRef.current);
            }
        };
    }, []);

    const initializeComponent = async () => {
        try {
            await loadUserData();
            await loadEnhancedStats();
            await loadAchievements();
            await loadPerformanceAnalysis();
            await loadGameAnalytics();
            await loadPerformanceHistory();
            await loadLeaderboard();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            initializeWebSocket();
            
            setIsLoading(false);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
            setIsLoading(false);
        }
    };

    const loadUserData = async () => {
        try {
            const response = await api.get('/api/users/me');
            setUser(response.data);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    };

    const loadEnhancedStats = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.get(`/api/v4/stats/enhanced/${localStorage.getItem('userId') || '1'}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setEnhancedStats(response.data);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    };

    const loadAchievements = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.get(`/api/v4/achievements/${localStorage.getItem('userId') || '1'}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setAchievements(response.data);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        }
    };

    const loadPerformanceAnalysis = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.get(`/api/v4/analysis/performance/${localStorage.getItem('userId') || '1'}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setPerformanceAnalysis(response.data);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        }
    };

    const loadGameAnalytics = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.get(`/api/v4/analytics/games/${localStorage.getItem('userId') || '1'}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setGameAnalytics(response.data);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        }
    };

    const loadPerformanceHistory = async (period = '6m') => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.get(`/api/v4/analytics/performance-history/${localStorage.getItem('userId') || '1'}?period=${period}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setPerformanceHistory(response.data);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        }
    };

    const loadLeaderboard = async () => {
        try {
            const response = await api.get('/api/v4/leaderboard/achievements?limit=10');
            setLeaderboard(response.data.leaderboard);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
        }
    };

    // WebSocket —Ñ—É–Ω–∫—Ü–∏–∏
    const initializeWebSocket = () => {
        try {
            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${wsProtocol}//${window.location.host}/ws/stats`;
            
            wsRef.current = new WebSocket(wsUrl);
            
            wsRef.current.onopen = () => {
                console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
                setIsRealTimeConnected(true);
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                wsRef.current.send(JSON.stringify({
                    type: 'subscribe_stats',
                    userId: localStorage.getItem('userId') || '1',
                    token: localStorage.getItem('token')
                }));
            };
            
            wsRef.current.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    handleWebSocketMessage(data);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            };
            
            wsRef.current.onclose = (event) => {
                console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
                setIsRealTimeConnected(false);
                
                // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                if (event.code !== 1000 && event.code !== 1006) {
                    reconnectTimeoutRef.current = setTimeout(() => {
                        console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket...');
                        initializeWebSocket();
                    }, 5000);
                }
            };
            
            wsRef.current.onerror = (error) => {
                console.warn('‚ö†Ô∏è WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
                setIsRealTimeConnected(false);
                // –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º warning
            };
        } catch (error) {
            console.warn('‚ö†Ô∏è WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error.message);
            setIsRealTimeConnected(false);
        }
    };

    const handleWebSocketMessage = (data) => {
        switch (data.type) {
            case 'stats_update':
                setEnhancedStats(data.data);
                addNotification('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!', 'success');
                break;
                
            case 'stats_recalculated':
                setEnhancedStats(data.data);
                addNotification('üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞!', 'info');
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                loadAchievements();
                loadPerformanceAnalysis();
                break;
                
            case 'tournament_analysis':
                setPerformanceAnalysis(data.data);
                break;
                
            case 'achievement_unlocked':
                addNotification(`üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${data.achievement.name}!`, 'achievement');
                loadAchievements(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                break;
                
            case 'pong':
                // Heartbeat –æ—Ç–≤–µ—Ç
                break;
                
            case 'error':
                addNotification(`‚ùå –û—à–∏–±–∫–∞: ${data.message}`, 'error');
                break;
                
            default:
                console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
        }
    };

    const addNotification = (message, type = 'info') => {
        const notification = {
            id: Date.now(),
            message,
            type,
            timestamp: new Date()
        };
        
        setNotifications(prev => [notification, ...prev.slice(0, 4)]); // –ú–∞–∫—Å–∏–º—É–º 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            setNotifications(prev => prev.filter(n => n.id !== notification.id));
        }, 5000);
    };

    // –§—É–Ω–∫—Ü–∏–∏ UI
    const switchTab = (tabName) => {
        setActiveTab(tabName);
    };

    const handleChartPeriodChange = async (period) => {
        setChartPeriod(period);
        await loadPerformanceHistory(period);
    };

    const requestAIAnalysis = () => {
        if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
            wsRef.current.send(JSON.stringify({
                type: 'request_tournament_analysis',
                userId: localStorage.getItem('userId') || '1',
                token: localStorage.getItem('token')
            }));
            addNotification('ü§ñ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—à–µ–Ω...', 'info');
        }
    };

    const checkAchievements = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.post(`/api/v4/achievements/check/${localStorage.getItem('userId') || '1'}`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            if (response.data.newAchievements.length > 0) {
                addNotification(response.data.message, 'achievement');
                loadAchievements(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            } else {
                addNotification(response.data.message, 'info');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
            addNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'error');
        }
    };

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    const renderNotifications = () => {
        return (
            <div className="v4-notifications">
                {notifications.map(notification => (
                    <div 
                        key={notification.id} 
                        className={`v4-notification v4-notification-${notification.type}`}
                    >
                        <span className="v4-notification-message">{notification.message}</span>
                        <span className="v4-notification-time">
                            {notification.timestamp.toLocaleTimeString()}
                        </span>
                    </div>
                ))}
            </div>
        );
    };

    const renderConnectionStatus = () => {
        return (
            <div className={`v4-connection-status ${isRealTimeConnected ? 'connected' : 'disconnected'}`}>
                <span className="v4-connection-indicator">
                    {isRealTimeConnected ? 'üü¢' : 'üî¥'}
                </span>
                <span className="v4-connection-text">
                    {isRealTimeConnected ? 'Real-time –ø–æ–¥–∫–ª—é—á–µ–Ω' : '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'}
                </span>
            </div>
        );
    };

    const renderPerformanceChart = () => {
        if (!performanceHistory || !performanceHistory.history) return null;

        const data = {
            labels: performanceHistory.history.map(h => 
                new Date(h.week).toLocaleDateString('ru-RU', { 
                    month: 'short', 
                    day: 'numeric' 
                })
            ),
            datasets: [
                {
                    label: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                    data: performanceHistory.history.map(h => h.performance),
                    borderColor: '#4CAF50',
                    backgroundColor: 'rgba(76, 175, 80, 0.1)',
                    fill: true,
                    tension: 0.4
                },
                {
                    label: '–í–∏–Ω—Ä–µ–π—Ç %',
                    data: performanceHistory.history.map(h => parseFloat(h.winRate) * 100),
                    borderColor: '#FF9800',
                    backgroundColor: 'rgba(255, 152, 0, 0.1)',
                    fill: false,
                    tension: 0.4
                }
            ]
        };

        const options = {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        color: '#ffffff'
                    }
                },
                title: {
                    display: true,
                    text: '–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                    color: '#ffffff'
                }
            },
            scales: {
                x: {
                    ticks: { color: '#ffffff' },
                    grid: { color: '#333333' }
                },
                y: {
                    ticks: { color: '#ffffff' },
                    grid: { color: '#333333' }
                }
            }
        };

        return <Line data={data} options={options} />;
    };

    const renderGameDistribution = () => {
        if (!gameAnalytics || !gameAnalytics.games) return null;

        const data = {
            labels: gameAnalytics.games.map(g => g.game),
            datasets: [{
                data: gameAnalytics.games.map(g => g.tournaments),
                backgroundColor: [
                    '#FF6384',
                    '#36A2EB',
                    '#FFCE56',
                    '#4BC0C0',
                    '#9966FF',
                    '#FF9F40'
                ],
                borderWidth: 2,
                borderColor: '#1a1a1a'
            }]
        };

        const options = {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        color: '#ffffff'
                    }
                },
                title: {
                    display: true,
                    text: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏–≥—Ä–∞–º',
                    color: '#ffffff'
                }
            }
        };

        return <Doughnut data={data} options={options} />;
    };

    const renderAchievementProgress = () => {
        if (!achievements || !achievements.achievements) return null;

        const categories = [...new Set(achievements.achievements.map(a => a.category))];
        
        return categories.map(category => {
            const categoryAchievements = achievements.achievements.filter(a => a.category === category);
            const unlockedCount = categoryAchievements.filter(a => a.isUnlocked).length;
            const totalCount = categoryAchievements.length;
            const progressPercentage = Math.round((unlockedCount / totalCount) * 100);

            return (
                <div key={category} className="v4-achievement-category">
                    <div className="v4-achievement-category-header">
                        <h4>{getCategoryName(category)}</h4>
                        <span className="v4-achievement-progress">
                            {unlockedCount}/{totalCount} ({progressPercentage}%)
                        </span>
                    </div>
                    <div className="v4-achievement-progress-bar">
                        <div 
                            className="v4-achievement-progress-fill"
                            style={{ width: `${progressPercentage}%` }}
                        ></div>
                    </div>
                    <div className="v4-achievement-grid">
                        {categoryAchievements.map(achievement => (
                            <div 
                                key={achievement.key}
                                className={`v4-achievement-card ${achievement.isUnlocked ? 'unlocked' : 'locked'} rarity-${achievement.rarity}`}
                            >
                                <div className="v4-achievement-icon">{achievement.icon}</div>
                                <div className="v4-achievement-info">
                                    <h5>{achievement.name}</h5>
                                    <p>{achievement.description}</p>
                                    {!achievement.isUnlocked && (
                                        <div className="v4-achievement-progress-text">
                                            {achievement.progress}/{achievement.maxProgress}
                                        </div>
                                    )}
                                </div>
                                <div className="v4-achievement-points">
                                    {achievement.points} –æ—á–∫–æ–≤
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            );
        });
    };

    const getCategoryName = (category) => {
        const categoryNames = {
            tournaments: 'üèÜ –¢—É—Ä–Ω–∏—Ä—ã',
            games: 'üéÆ –ò–≥—Ä—ã',
            social: 'üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
            streaks: 'üî• –°–µ—Ä–∏–∏',
            performance: 'üíé –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            special: '‚≠ê –û—Å–æ–±—ã–µ'
        };
        return categoryNames[category] || category;
    };

    const renderDashboard = () => {
        if (!enhancedStats) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

        return (
            <div className="v4-dashboard">
                {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
                <div className="v4-metrics-grid">
                    <div className="v4-metric-card v4-metric-primary">
                        <div className="v4-metric-value">
                            {enhancedStats.extended?.totalTournaments || 0}
                        </div>
                        <div className="v4-metric-label">–í—Å–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤</div>
                        <div className="v4-metric-trend">
                            {enhancedStats.extended?.trends?.direction === 'improving' ? 'üìà' : 
                             enhancedStats.extended?.trends?.direction === 'declining' ? 'üìâ' : '‚û°Ô∏è'}
                        </div>
                    </div>

                    <div className="v4-metric-card v4-metric-success">
                        <div className="v4-metric-value">
                            {enhancedStats.extended?.winningTournaments || 0}
                        </div>
                        <div className="v4-metric-label">–ü–æ–±–µ–¥</div>
                        <div className="v4-metric-icon">üèÜ</div>
                    </div>

                    <div className="v4-metric-card v4-metric-info">
                        <div className="v4-metric-value">
                            {enhancedStats.extended?.topThreeFinishes || 0}
                        </div>
                        <div className="v4-metric-label">–¢–æ–ø-3 —Ñ–∏–Ω–∏—à–∞</div>
                        <div className="v4-metric-icon">ü•â</div>
                    </div>

                    <div className="v4-metric-card v4-metric-warning">
                        <div className="v4-metric-value">
                            {enhancedStats.extended?.averageFinishPosition || 'N/A'}
                        </div>
                        <div className="v4-metric-label">–°—Ä–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ</div>
                        <div className="v4-metric-icon">üìä</div>
                    </div>
                </div>

                {/* –ì—Ä–∞—Ñ–∏–∫–∏ */}
                <div className="v4-charts-grid">
                    <div className="v4-chart-container">
                        <div className="v4-chart-header">
                            <h3>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
                            <div className="v4-chart-controls">
                                {['1m', '3m', '6m', '1y'].map(period => (
                                    <button
                                        key={period}
                                        className={`v4-period-btn ${chartPeriod === period ? 'active' : ''}`}
                                        onClick={() => handleChartPeriodChange(period)}
                                    >
                                        {period}
                                    </button>
                                ))}
                            </div>
                        </div>
                        {renderPerformanceChart()}
                    </div>

                    <div className="v4-chart-container">
                        <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏–≥—Ä–∞–º</h3>
                        {renderGameDistribution()}
                    </div>
                </div>

                {/* AI –ê–Ω–∞–ª–∏–∑ */}
                {performanceAnalysis && (
                    <div className="v4-ai-analysis">
                        <div className="v4-ai-header">
                            <h3>ü§ñ AI –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
                            <button 
                                className="v4-ai-refresh-btn"
                                onClick={requestAIAnalysis}
                            >
                                –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑
                            </button>
                        </div>
                        
                        <div className="v4-ai-content">
                            <div className="v4-ai-rating">
                                <div className="v4-rating-circle">
                                    <span className="v4-rating-value">
                                        {performanceAnalysis.performanceRating || 0}
                                    </span>
                                    <span className="v4-rating-label">–†–µ–π—Ç–∏–Ω–≥</span>
                                </div>
                            </div>

                            <div className="v4-ai-insights">
                                <div className="v4-ai-section">
                                    <h4>üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã</h4>
                                    <ul>
                                        {performanceAnalysis.strengths?.map((strength, index) => (
                                            <li key={index}>{strength}</li>
                                        ))}
                                    </ul>
                                </div>

                                <div className="v4-ai-section">
                                    <h4>üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
                                    <ul>
                                        {performanceAnalysis.improvements?.map((improvement, index) => (
                                            <li key={index}>{improvement}</li>
                                        ))}
                                    </ul>
                                </div>

                                <div className="v4-ai-section">
                                    <h4>üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</h4>
                                    <div className="v4-prediction">
                                        <span className="v4-prediction-text">
                                            {performanceAnalysis.prediction?.prediction}
                                        </span>
                                        <span className="v4-prediction-confidence">
                                            –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {performanceAnalysis.prediction?.confidence}%
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        );
    };

    if (isLoading) {
        return (
            <div className="v4-loading-container">
                <div className="v4-loading-spinner"></div>
                <div className="v4-loading-text">
                    –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥...
                </div>
            </div>
        );
    }

    return (
        <div className="v4-enhanced-profile">
            {/* Header —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
            <div className="v4-header">
                <div className="v4-header-left">
                    <h1>Profile 4.0</h1>
                    <span className="v4-version-badge">ULTIMATE</span>
                </div>
                <div className="v4-header-right">
                    {renderConnectionStatus()}
                    <button 
                        className="v4-achievements-check-btn"
                        onClick={checkAchievements}
                    >
                        üèÜ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    </button>
                </div>
            </div>

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
            {renderNotifications()}

            {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
            <div className="v4-navigation">
                <button 
                    className={`v4-nav-btn ${activeTab === 'dashboard' ? 'active' : ''}`}
                    onClick={() => switchTab('dashboard')}
                >
                    üìä –î–∞—à–±–æ—Ä–¥
                </button>
                <button 
                    className={`v4-nav-btn ${activeTab === 'achievements' ? 'active' : ''}`}
                    onClick={() => switchTab('achievements')}
                >
                    üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                </button>
                <button 
                    className={`v4-nav-btn ${activeTab === 'leaderboard' ? 'active' : ''}`}
                    onClick={() => switchTab('leaderboard')}
                >
                    üëë –õ–∏–¥–µ—Ä–±–æ—Ä–¥
                </button>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
            <div className="v4-content">
                {activeTab === 'dashboard' && renderDashboard()}
                
                {activeTab === 'achievements' && (
                    <div className="v4-achievements-section">
                        <div className="v4-achievements-header">
                            <h2>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
                            {achievements && (
                                <div className="v4-achievements-summary">
                                    <span>
                                        {achievements.unlockedCount}/{achievements.totalCount} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
                                    </span>
                                    <span className="v4-achievements-points">
                                        {achievements.totalPoints} –æ—á–∫–æ–≤
                                    </span>
                                </div>
                            )}
                        </div>
                        {renderAchievementProgress()}
                    </div>
                )}
                
                {activeTab === 'leaderboard' && (
                    <div className="v4-leaderboard-section">
                        <h2>üëë –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</h2>
                        <div className="v4-leaderboard-list">
                            {leaderboard.map((entry, index) => (
                                <div key={entry.userId} className="v4-leaderboard-entry">
                                    <div className="v4-leaderboard-rank">
                                        {index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `#${entry.rank}`}
                                    </div>
                                    <div className="v4-leaderboard-user">
                                        <img 
                                            src={entry.avatarUrl || '/default-avatar.png'} 
                                            alt={entry.username}
                                            className="v4-leaderboard-avatar"
                                        />
                                        <span className="v4-leaderboard-username">{entry.username}</span>
                                    </div>
                                    <div className="v4-leaderboard-stats">
                                        <span className="v4-leaderboard-points">{entry.points} –æ—á–∫–æ–≤</span>
                                        <span className="v4-leaderboard-achievements">
                                            {entry.unlockedCount} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                                        </span>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}

export default V4EnhancedProfile; 