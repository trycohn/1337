import { useState, useEffect, useCallback } from 'react';
import api from '../../utils/api';

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
export const useAchievements = (userId) => {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const [achievements, setAchievements] = useState([]);
    const [userAchievements, setUserAchievements] = useState([]);
    const [achievementProgress, setAchievementProgress] = useState({});
    const [playerLevel, setPlayerLevel] = useState(1);
    const [playerXP, setPlayerXP] = useState(0);
    const [dailyStreak, setDailyStreak] = useState({ current: 0, longest: 0 });
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    const [newAchievements, setNewAchievements] = useState([]);
    const [showNotification, setShowNotification] = useState(null);

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    const fetchAchievements = useCallback(async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.get('/api/achievements', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            if (response.data.success) {
                setAchievements(response.data.achievements || []);
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
                if (response.data.message && response.data.achievements?.length === 0) {
                    console.info('üéØ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', response.data.message);
                }
                
                return response.data.achievements;
            }
            
            setAchievements([]);
            return [];
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', err);
            
            // –ë–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if (err.response?.status === 500) {
                setError('–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            } else if (err.response?.status === 401) {
                setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
            } else {
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
            }
            
            setAchievements([]);
            return [];
        }
    }, []);

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    const fetchUserAchievements = useCallback(async () => {
        if (!userId) return [];
        
        try {
            const token = localStorage.getItem('token');
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const progressResponse = await api.get('/api/achievements/user/progress', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            const achievementsResponse = await api.get('/api/achievements', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            if (progressResponse.data.success && achievementsResponse.data.success) {
                const progress = progressResponse.data.progress;
                const allAchievements = achievementsResponse.data.achievements;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if (progressResponse.data.message) {
                    console.info('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', progressResponse.data.message);
                }
                if (achievementsResponse.data.message) {
                    console.info('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', achievementsResponse.data.message);
                }
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                const unlockedAchievements = allAchievements.filter(a => a.is_unlocked);
                
                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                const progressByAchievement = {};
                allAchievements.forEach(achievement => {
                    progressByAchievement[achievement.id] = achievement.user_progress || 0;
                });
                
                setUserAchievements(unlockedAchievements);
                setAchievementProgress(progressByAchievement);
                setPlayerLevel(progress.level || 1);
                setPlayerXP(progress.total_xp || 0);
                setDailyStreak({
                    current: progress.daily_streak_current || 0,
                    longest: progress.daily_streak_longest || 0
                });
                
                // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                setError(null);
                
                return {
                    achievements: unlockedAchievements,
                    progress: progressByAchievement,
                    level: progress.level,
                    xp: progress.total_xp,
                    streak: {
                        current: progress.daily_streak_current || 0,
                        longest: progress.daily_streak_longest || 0
                    }
                };
            }
            
            return {};
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            
            // –ë–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if (err.response?.status === 500) {
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å. –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
            } else if (err.response?.status === 401) {
                setError('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
            } else {
                setError('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            }
            
            return {};
        }
    }, [userId]);

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    const checkAchievementProgress = useCallback(async (actionType, actionData = {}) => {
        if (!userId) return;
        
        try {
            const token = localStorage.getItem('token');
            const response = await api.post('/api/achievements/user/action', {
                action_type: actionType,
                action_data: actionData
            }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            if (response.data.success) {
                const progress = response.data.progress;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ XP
                if (progress) {
                    setPlayerLevel(progress.level || 1);
                    setPlayerXP(progress.total_xp || 0);
                    setDailyStreak({
                        current: progress.daily_streak_current || 0,
                        longest: progress.daily_streak_longest || 0
                    });
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                if (response.data.new_achievements && response.data.new_achievements.length > 0) {
                    const newAchievements = response.data.new_achievements.map(achievement => ({
                        achievement_id: achievement.id,
                        ...achievement
                    }));
                    
                    setUserAchievements(prev => [...prev, ...newAchievements]);
                    setNewAchievements(prev => [...prev, ...newAchievements]);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
                    newAchievements.forEach(achievement => {
                        setTimeout(() => {
                            showAchievementNotification({
                                type: 'achievement_unlocked',
                                achievement: achievement,
                                message: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name}`,
                                icon: achievement.icon || 'üèÜ'
                            });
                        }, 500);
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
                if (response.data.level_up) {
                    showAchievementNotification({
                        type: 'level_up',
                        message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –î–æ—Å—Ç–∏–≥–Ω—É—Ç ${progress.level} —É—Ä–æ–≤–µ–Ω—å!`,
                        icon: 'üéâ'
                    });
                }
            }
            
            return response.data;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', err);
            return { success: false, error: err.message };
        }
    }, [userId]);

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
     */
    const showAchievementNotification = useCallback((notification) => {
        setShowNotification(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            setShowNotification(null);
        }, 5000);
    }, []);

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    const closeNotification = useCallback(() => {
        setShowNotification(null);
    }, []);

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    const getAchievementStats = useCallback(() => {
        const totalAchievements = achievements.length;
        const unlockedAchievements = userAchievements.length;
        const completionRate = totalAchievements > 0 ? (unlockedAchievements / totalAchievements) * 100 : 0;
        
        const rareAchievements = userAchievements.filter(ua => {
            const achievement = achievements.find(a => a.id === ua.achievement_id);
            return achievement && (achievement.rarity === 'epic' || achievement.rarity === 'legendary');
        }).length;
        
        const totalXPFromAchievements = userAchievements.reduce((total, ua) => {
            const achievement = achievements.find(a => a.id === ua.achievement_id);
            return total + (achievement?.xp_reward || 0);
        }, 0);
        
        return {
            total: totalAchievements,
            unlocked: unlockedAchievements,
            completionRate: Math.round(completionRate),
            rare: rareAchievements,
            totalXP: totalXPFromAchievements,
            level: playerLevel,
            currentXP: playerXP,
            dailyStreak: dailyStreak.current,
            longestStreak: dailyStreak.longest
        };
    }, [achievements, userAchievements, playerLevel, playerXP, dailyStreak]);

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    const getAchievementsByCategory = useCallback((categoryId) => {
        if (categoryId === 'all') return achievements;
        return achievements.filter(achievement => achievement.category_id === categoryId);
    }, [achievements]);

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
     */
    const isAchievementUnlocked = useCallback((achievementId) => {
        return userAchievements.some(ua => ua.achievement_id === achievementId);
    }, [userAchievements]);

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    const getAchievementProgress = useCallback((achievementId) => {
        return achievementProgress[achievementId] || 0;
    }, [achievementProgress]);

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    const initializeAchievements = useCallback(async () => {
        setIsLoading(true);
        setError(null);
        
        try {
            await Promise.all([
                fetchAchievements(),
                fetchUserAchievements()
            ]);
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
        } finally {
            setIsLoading(false);
        }
    }, [fetchAchievements, fetchUserAchievements]);

    /**
     * –û—Ç–º–µ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
     */
    const markNewAchievementsAsSeen = useCallback(async () => {
        if (newAchievements.length === 0) return;
        
        try {
            const token = localStorage.getItem('token');
            await api.post('/api/achievements/user/mark-seen', {
                achievement_ids: newAchievements.map(a => a.achievement_id || a.id)
            }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setNewAchievements([]);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö:', err);
        }
    }, [newAchievements]);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ userId
    useEffect(() => {
        if (userId) {
            initializeAchievements();
        }
    }, [userId, initializeAchievements]);

    return {
        // –î–∞–Ω–Ω—ã–µ
        achievements,
        userAchievements,
        achievementProgress,
        playerLevel,
        playerXP,
        dailyStreak,
        newAchievements,
        
        // –°–æ—Å—Ç–æ—è–Ω–∏—è
        isLoading,
        error,
        showNotification,
        
        // –ú–µ—Ç–æ–¥—ã
        fetchAchievements,
        fetchUserAchievements,
        checkAchievementProgress,
        initializeAchievements,
        closeNotification,
        markNewAchievementsAsSeen,
        
        // –£—Ç–∏–ª–∏—Ç—ã
        getAchievementStats,
        getAchievementsByCategory,
        isAchievementUnlocked,
        getAchievementProgress
    };
}; 