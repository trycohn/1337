/**
 * –£—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export const ACHIEVEMENT_CATEGORIES = [
    { id: 'all', name: '–í—Å–µ', icon: 'üéØ' },
    { id: 'tournaments', name: '–¢—É—Ä–Ω–∏—Ä—ã', icon: 'üèÜ' },
    { id: 'matches', name: '–ú–∞—Ç—á–∏', icon: '‚öîÔ∏è' },
    { id: 'social', name: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', icon: 'üë•' },
    { id: 'streaks', name: '–°–µ—Ä–∏–∏', icon: 'üî•' },
    { id: 'special', name: '–û—Å–æ–±—ã–µ', icon: 'üíé' }
];

// –†–µ–¥–∫–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export const ACHIEVEMENT_RARITY = {
    common: { name: '–û–±—ã—á–Ω–æ–µ', icon: 'ü•â', color: '#8D9194' },
    rare: { name: '–†–µ–¥–∫–æ–µ', icon: 'ü•à', color: '#4285F4' },
    epic: { name: '–≠–ø–∏—á–µ—Å–∫–æ–µ', icon: 'ü•á', color: '#9C27B0' },
    legendary: { name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ', icon: 'üíé', color: '#FF9800' }
};

// –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
export const ACHIEVEMENT_ACTIONS = {
    // –¢—É—Ä–Ω–∏—Ä—ã
    TOURNAMENT_CREATED: 'tournament_created',
    TOURNAMENT_WON: 'tournament_won',
    TOURNAMENT_PARTICIPATED: 'tournament_participated',
    TOURNAMENT_ORGANIZED: 'tournament_organized',
    
    // –ú–∞—Ç—á–∏
    MATCH_WON: 'match_won',
    MATCH_LOST: 'match_lost',
    MATCH_DRAW: 'match_draw',
    PERFECT_GAME: 'perfect_game',
    COMEBACK_WIN: 'comeback_win',
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
    FRIEND_ADDED: 'friend_added',
    MESSAGE_SENT: 'message_sent',
    PROFILE_UPDATED: 'profile_updated',
    
    // –°–µ—Ä–∏–∏
    WIN_STREAK: 'win_streak',
    DAILY_LOGIN: 'daily_login',
    WEEKLY_ACTIVE: 'weekly_active',
    
    // –û—Å–æ–±—ã–µ
    FIRST_LOGIN: 'first_login',
    PROFILE_COMPLETE: 'profile_complete',
    STEAM_LINKED: 'steam_linked',
    FACEIT_LINKED: 'faceit_linked'
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XP –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatXP = (xp) => {
    if (xp >= 1000000) {
        return `${(xp / 1000000).toFixed(1)}M`;
    }
    if (xp >= 1000) {
        return `${(xp / 1000).toFixed(1)}K`;
    }
    return xp.toString();
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 */
export const getAchievementIcon = (icon) => {
    if (!icon) return 'üèÜ';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∫–æ–Ω–∫–∞ —ç–º–æ–¥–∑–∏
    if (/\p{Emoji}/u.test(icon)) {
        return icon;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —ç–º–æ–¥–∑–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
    return 'üèÜ';
};

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ XP
 */
export const calculatePlayerLevel = (totalXP) => {
    if (totalXP < 1000) return 1;
    
    // –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ XP (–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
    let level = 1;
    let requiredXP = 1000;
    let currentXP = totalXP;
    
    while (currentXP >= requiredXP && level < 100) {
        currentXP -= requiredXP;
        level++;
        requiredXP = level * 1000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å –∫–∞–∂–¥—ã–º —É—Ä–æ–≤–Ω–µ–º
    }
    
    return level;
};

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ XP –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
 */
export const getXPToNextLevel = (totalXP, currentLevel) => {
    if (currentLevel >= 100) return 0;
    
    const nextLevelRequiredXP = (currentLevel + 1) * 1000;
    const currentLevelStartXP = currentLevel * 1000;
    const progressInCurrentLevel = totalXP - currentLevelStartXP;
    
    return nextLevelRequiredXP - progressInCurrentLevel;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 */
export const getRarityColor = (rarity) => {
    return ACHIEVEMENT_RARITY[rarity]?.color || ACHIEVEMENT_RARITY.common.color;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
 */
export const getRarityName = (rarity) => {
    return ACHIEVEMENT_RARITY[rarity]?.name || ACHIEVEMENT_RARITY.common.name;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏
 */
export const getRarityIcon = (rarity) => {
    return ACHIEVEMENT_RARITY[rarity]?.icon || ACHIEVEMENT_RARITY.common.icon;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º
 */
export const isRecentAchievement = (unlockedAt, hours = 24) => {
    if (!unlockedAt) return false;
    
    const unlockTime = new Date(unlockedAt);
    const now = new Date();
    const timeDiff = now - unlockTime;
    const hoursDiff = timeDiff / (1000 * 60 * 60);
    
    return hoursDiff <= hours;
};

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export const groupAchievementsByCategory = (achievements) => {
    return achievements.reduce((groups, achievement) => {
        const category = achievement.category_id || 'other';
        if (!groups[category]) {
            groups[category] = [];
        }
        groups[category].push(achievement);
        return groups;
    }, {});
};

/**
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
 */
export const sortAchievementsByPriority = (achievements, userAchievements = []) => {
    const unlockedIds = new Set(userAchievements.map(ua => ua.achievement_id));
    
    return achievements.sort((a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        const aUnlocked = unlockedIds.has(a.id);
        const bUnlocked = unlockedIds.has(b.id);
        
        if (aUnlocked && !bUnlocked) return -1;
        if (!aUnlocked && bUnlocked) return 1;
        
        // –ó–∞—Ç–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ (–±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        const rarityOrder = { legendary: 4, epic: 3, rare: 2, common: 1 };
        const aPriority = rarityOrder[a.rarity] || 0;
        const bPriority = rarityOrder[b.rarity] || 0;
        
        if (aPriority !== bPriority) return bPriority - aPriority;
        
        // –í –∫–æ–Ω—Ü–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        return a.name.localeCompare(b.name);
    });
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
 */
export const getAchievementStatistics = (achievements, userAchievements) => {
    const stats = {
        total: achievements.length,
        unlocked: userAchievements.length,
        byCategory: {},
        byRarity: {},
        totalXP: 0,
        averageProgress: 0
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    ACHIEVEMENT_CATEGORIES.forEach(category => {
        if (category.id === 'all') return;
        
        const categoryAchievements = achievements.filter(a => a.category_id === category.id);
        const unlockedInCategory = userAchievements.filter(ua => {
            const achievement = achievements.find(a => a.id === ua.achievement_id);
            return achievement && achievement.category_id === category.id;
        });
        
        stats.byCategory[category.id] = {
            total: categoryAchievements.length,
            unlocked: unlockedInCategory.length,
            percentage: categoryAchievements.length > 0 ? 
                Math.round((unlockedInCategory.length / categoryAchievements.length) * 100) : 0
        };
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    Object.keys(ACHIEVEMENT_RARITY).forEach(rarity => {
        const rarityAchievements = achievements.filter(a => a.rarity === rarity);
        const unlockedRarity = userAchievements.filter(ua => {
            const achievement = achievements.find(a => a.id === ua.achievement_id);
            return achievement && achievement.rarity === rarity;
        });
        
        stats.byRarity[rarity] = {
            total: rarityAchievements.length,
            unlocked: unlockedRarity.length,
            percentage: rarityAchievements.length > 0 ? 
                Math.round((unlockedRarity.length / rarityAchievements.length) * 100) : 0
        };
    });
    
    // –û–±—â–∏–π XP –æ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    stats.totalXP = userAchievements.reduce((total, ua) => {
        const achievement = achievements.find(a => a.id === ua.achievement_id);
        return total + (achievement?.xp_reward || 0);
    }, 0);
    
    // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    stats.completionRate = stats.total > 0 ? 
        Math.round((stats.unlocked / stats.total) * 100) : 0;
    
    return stats;
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
 */
export const createAchievementNotification = (achievement, type = 'unlocked') => {
    const notifications = {
        unlocked: {
            title: 'üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!',
            message: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.name}"`,
            description: achievement.description,
            xp: achievement.xp_reward,
            duration: 5000
        },
        progress: {
            title: 'üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
            message: `–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ "${achievement.name}" –æ–±–Ω–æ–≤–ª—ë–Ω`,
            description: achievement.description,
            duration: 3000
        },
        level_up: {
            title: 'üéä –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!',
            message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!`,
            duration: 4000
        }
    };
    
    return notifications[type] || notifications.unlocked;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 */
export const checkAchievementConditions = (achievement, userData, actionData) => {
    if (!achievement.conditions) return false;
    
    try {
        const conditions = typeof achievement.conditions === 'string' ? 
            JSON.parse(achievement.conditions) : achievement.conditions;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ
        for (const [key, value] of Object.entries(conditions)) {
            const userValue = userData[key] || actionData[key] || 0;
            
            if (typeof value === 'number') {
                if (userValue < value) return false;
            } else if (typeof value === 'object') {
                if (value.min !== undefined && userValue < value.min) return false;
                if (value.max !== undefined && userValue > value.max) return false;
                if (value.equals !== undefined && userValue !== value.equals) return false;
            }
        }
        
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
        return false;
    }
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatTimeAgo = (date) => {
    const now = new Date();
    const past = new Date(date);
    const diffInSeconds = Math.floor((now - past) / 1000);
    
    if (diffInSeconds < 60) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} —á –Ω–∞–∑–∞–¥`;
    if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} –¥–Ω –Ω–∞–∑–∞–¥`;
    
    return past.toLocaleDateString('ru-RU');
}; 