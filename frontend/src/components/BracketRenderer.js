// frontend/src/components/BracketRenderer.js
import React, { useState, useRef, useEffect, useCallback } from 'react';
import './BracketRenderer.css';
import { safeParseBracketId } from '../utils/safeParseInt';

const BracketRenderer = ({
    games,
    canEditMatches,
    selectedMatch,
    setSelectedMatch,
    handleTeamClick,
    format,
    onMatchClick
}) => {
    console.log('BracketRenderer: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏', { 
        gamesCount: games?.length, 
        canEditMatches, 
        selectedMatch, 
        format 
    });

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const [scale, setScale] = useState(1);
    const [position, setPosition] = useState({ x: 0, y: 0 });
    const [isDragging, setIsDragging] = useState(false);
    const [startDragPos, setStartDragPos] = useState({ x: 0, y: 0 });
    const [groupedMatches, setGroupedMatches] = useState({ winnerRounds: {}, loserRounds: {}, placementMatch: null, grandFinalMatch: null });
    const [dataError, setDataError] = useState(null);
    // üÜï –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç—É–ª—Ç–∏–ø–∞ –æ –Ω–µ–ø–æ–ª–Ω–æ–º –º–∞—Ç—á–µ
    const [incompleteMatchTooltip, setIncompleteMatchTooltip] = useState({ show: false, message: '', x: 0, y: 0 });

    // –°—Å—ã–ª–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOM
    const wrapperRef = useRef(null);
    const bracketContentRef = useRef(null);
    
    // Refs –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —Å–æ–±—ã—Ç–∏–π
    const isDraggingRef = useRef(false);
    const positionRef = useRef({ x: 0, y: 0 });
    const startDragPosRef = useRef({ x: 0, y: 0 });
    const scaleRef = useRef(1);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º refs –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    useEffect(() => {
        isDraggingRef.current = isDragging;
    }, [isDragging]);
    
    useEffect(() => {
        positionRef.current = position;
    }, [position]);
    
    useEffect(() => {
        startDragPosRef.current = startDragPos;
    }, [startDragPos]);
    
    useEffect(() => {
        scaleRef.current = scale;
    }, [scale]);
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Ç—á–µ–π –ø–æ —Ä–∞—É–Ω–¥–∞–º –∏ —Å–µ—Ç–∫–∞–º
    const groupMatchesByRoundAndBracket = useCallback(() => {
        let result = { winnerRounds: {}, loserRounds: {}, placementMatch: null, grandFinalMatch: null };
        
        if (!games || !Array.isArray(games) || games.length === 0) {
            console.log('BracketRenderer: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ games –∏–ª–∏ –æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', games);
            return result;
        }
        
        console.log('BracketRenderer: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Ç—á–µ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', games.length);
        console.log('BracketRenderer: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞:', games[0]);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–≥—Ä
            const validGames = games.filter(game => {
                const isValid = game && 
                game.id !== undefined && 
                Array.isArray(game.participants) && 
                    game.participants.length >= 2;
                
                if (!isValid) {
                    console.warn('BracketRenderer: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∏–≥—Ä–∞:', game);
                }
                return isValid;
            });
            
            if (validGames.length === 0) {
                console.error('BracketRenderer: –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏');
                setDataError('–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                return result;
            }
            
            if (validGames.length !== games.length) {
                console.warn(`BracketRenderer: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –º–∞—Ç—á–∏: ${games.length - validGames.length} –∏–∑ ${games.length}`);
            }
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏
            const winnerMatches = validGames.filter(
                (m) => (m.bracket_type === 'winner' || m.bracket_type === 'prelim' || !m.bracket_type) && !m.is_third_place_match
            ) || [];
            const loserMatches = validGames.filter((m) => m.bracket_type === 'loser' && !m.is_third_place_match) || [];
            const placementMatch = validGames.find((m) => m.bracket_type === 'placement' || m.is_third_place_match);
            const grandFinalMatch = validGames.find((m) => m.bracket_type === 'grand_final');

            // üîß –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ì–†–£–ü–ü–ò–†–û–í–ö–ò
            console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–∞—Ç—á–µ–π:', {
                totalValidGames: validGames.length,
                winnerMatchesCount: winnerMatches.length,
                loserMatchesCount: loserMatches.length,
                sampleWinnerMatch: winnerMatches[0] || null,
                allBracketTypes: validGames.map(m => m.bracket_type),
                allRounds: validGames.map(m => m.round),
                winnerRounds: winnerMatches.map(m => ({ id: m.id, round: m.round, bracket_type: m.bracket_type }))
            });

            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: —É—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—É–Ω–¥—ã
            const winnerRounds = {};
            
            // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞—É–Ω–¥—ã –≤ winner –º–∞—Ç—á–∞—Ö
            const allWinnerRounds = [...new Set(winnerMatches.map(m => Number(m.round)))];
            console.log('üîç –í—Å–µ —Ä–∞—É–Ω–¥—ã –≤ winner –º–∞—Ç—á–∞—Ö:', allWinnerRounds);
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ä–∞—É–Ω–¥–∞–º
            allWinnerRounds.forEach(round => {
                const roundMatches = winnerMatches.filter(m => Number(m.round) === round);
                if (roundMatches && roundMatches.length > 0) {
                    roundMatches.sort((a, b) => Number(a.match_number || 0) - Number(b.match_number || 0));
                    winnerRounds[round] = roundMatches;
                    console.log(`‚úÖ –†–∞—É–Ω–¥ ${round}: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${roundMatches.length} –º–∞—Ç—á–µ–π`);
                }
            });

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º loser rounds —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
            const loserRounds = {};
            const maxLoserRound = (loserMatches && loserMatches.length > 0) ? 
                Math.max(...loserMatches.map(m => Number(m.round))) : 0;
            
            for (let round = 1; round <= maxLoserRound; round++) {
                const roundMatches = loserMatches.filter(m => Number(m.round) === round);
                if (roundMatches && roundMatches.length > 0) {
                    roundMatches.sort((a, b) => Number(a.match_number || 0) - Number(b.match_number || 0));
                    loserRounds[round] = roundMatches;
                }
            }

            result = { winnerRounds, loserRounds, placementMatch, grandFinalMatch };
            console.log('BracketRenderer: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
                winnerRoundsCount: Object.keys(winnerRounds).length,
                loserRoundsCount: Object.keys(loserRounds).length,
                hasPlacement: !!placementMatch,
                hasGrandFinal: !!grandFinalMatch
            });

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            setDataError(null);

        } catch (error) {
            console.error('BracketRenderer: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ –º–∞—Ç—á–µ–π:', error);
            setDataError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π');
        }
        
        return result;
    }, [games]);
    
    // –°–±—Ä–æ—Å –≤–∏–¥–∞
    const resetView = useCallback(() => {
        console.log('BracketRenderer: resetView');
        setPosition({ x: 20, y: 20 });
        setScale(1);
    }, []);
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    const handleZoomIn = () => {
        console.log('handleZoomIn: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±');
        setScale(prevScale => Math.min(prevScale + 0.1, 3));
    };
    
    const handleZoomOut = () => {
        console.log('handleZoomOut: —É–º–µ–Ω—å—à–∞–µ–º –º–∞—Å—à—Ç–∞–±');
        setScale(prevScale => Math.max(prevScale - 0.1, 0.5));
    };
    
    const handleResetView = () => {
        console.log('handleResetView: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–¥');
        resetView();
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–µ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
    const handleOpenInNewTab = () => {
        const currentGroupedMatches = groupedMatches || { winnerRounds: {}, loserRounds: {}, placementMatch: null, grandFinalMatch: null };
        
        const bracketData = {
            games: games || [],
            format: format || 'single_elimination',
            groupedMatches: currentGroupedMatches
        };
        
        const html = `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞</title>
            <style>
                body, html { margin: 0; padding: 0; font-family: Arial, sans-serif; }
                .bracket-container { padding: 20px; }
                .bracket-grid { display: flex; gap: 20px; align-items: center; }
                .round-column { display: flex; flex-direction: column; gap: 10px; }
                .match-card { width: 200px; background: white; border: 1px solid #ddd; border-radius: 4px; padding: 10px; }
                .team { display: flex; justify-content: space-between; padding: 5px 0; }
                .winner { font-weight: bold; }
            </style>
        </head>
        <body>
            <div class="bracket-container">
                <h1>–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞</h1>
                <div id="bracket-content"></div>
            </div>
            <script>
                const data = ${JSON.stringify(bracketData)};
                function render() {
                    let html = '';
                    if (data.groupedMatches.winnerRounds) {
                        html += '<h2>–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞</h2><div class="bracket-grid">';
                        Object.keys(data.groupedMatches.winnerRounds).sort((a, b) => Number(a) - Number(b)).forEach(round => {
                            html += '<div class="round-column"><h3>' + (round === '-1' ? '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π' : '–†–∞—É–Ω–¥ ' + round) + '</h3>';
                            data.groupedMatches.winnerRounds[round].forEach(match => {
                                html += '<div class="match-card">';
                                if (match.participants) {
                                    match.participants.forEach(p => {
                                        html += '<div class="team' + (p.isWinner ? ' winner' : '') + '"><span>' + (p.name || 'TBD') + '</span><span>' + (p.score || 0) + '</span></div>';
                                    });
                                }
                                html += '</div>';
                            });
                            html += '</div>';
                        });
                        html += '</div>';
                    }
                    document.getElementById('bracket-content').innerHTML = html;
                }
                window.onload = render;
            </script>
        </body>
        </html>`;
        
        const blob = new Blob([html], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        window.open(url, '_blank');
    };

    // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø DRAG-AND-DROP –° –ü–†–û–í–ï–†–ö–ê–ú–ò
    useEffect(() => {
        console.log('BracketRenderer: üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag-and-drop');
        
        // –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        const initializeDragAndDrop = () => {
            const wrapper = wrapperRef.current;
            if (!wrapper) {
                console.warn('BracketRenderer: ‚ö†Ô∏è wrapperRef –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ 100ms');
                return false;
            }
                
            console.log('BracketRenderer: ‚úÖ DOM —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
            wrapper.style.cursor = 'grab';
            wrapper.style.userSelect = 'none';
            wrapper.style.touchAction = 'none';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –≤—ã—Å–æ—Ç—É
            const setResponsiveHeight = () => {
                const windowHeight = window.innerHeight;
                if (window.innerWidth < 768) {
                    wrapper.style.height = `${windowHeight - 100}px`;
                } else if (window.innerWidth >= 1028) {
                    wrapper.style.height = '800px';
                } else {
                    wrapper.style.height = '600px';
                }
            };
            setResponsiveHeight();
            
            console.log('BracketRenderer: üìè –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

            // –°–û–ó–î–ê–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–û–ô
            const mouseDownHandler = (e) => {
                console.log('BracketRenderer: üñ±Ô∏è mousedown —Å–æ–±—ã—Ç–∏–µ');
                
                // –¢–æ–ª—å–∫–æ –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
                if (e.button !== 0) return;
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô:
                const isControlButton = e.target.closest('.bracket-controls button');
                const isMatchViewBlock = e.target.closest('.match-view-block');
                
                if (isControlButton || isMatchViewBlock) {
                    console.log('BracketRenderer: ‚ö†Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ');
                    return;
                }
                
                console.log('BracketRenderer: ‚úÖ mousedown —Ä–∞–∑—Ä–µ—à–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
                isDraggingRef.current = true;
                setIsDragging(true);
                
                const newStartPos = {
                    x: e.clientX - positionRef.current.x,
                    y: e.clientY - positionRef.current.y,
                };
                startDragPosRef.current = newStartPos;
                setStartDragPos(newStartPos);
                
                wrapper.style.cursor = 'grabbing';
                
                console.log('BracketRenderer: üéØ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:', {
                    clientX: e.clientX,
                    clientY: e.clientY,
                    currentPosition: positionRef.current,
                    startPos: newStartPos
                });
                
                e.preventDefault();
                e.stopPropagation();
            };

            const mouseMoveHandler = (e) => {
                if (!isDraggingRef.current) return;
                
                const newPosition = {
                    x: e.clientX - startDragPosRef.current.x,
                    y: e.clientY - startDragPosRef.current.y,
                };
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏ ref –∏ state
                positionRef.current = newPosition;
                setPosition(newPosition);
                
                console.log('BracketRenderer: üîÑ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ:', newPosition);
                e.preventDefault();
            };

            const mouseUpHandler = (e) => {
                if (isDraggingRef.current) {
                    console.log('BracketRenderer: üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è');
                    isDraggingRef.current = false;
                    setIsDragging(false);
                    wrapper.style.cursor = 'grab';
                }
            };

            const wheelHandler = (e) => {
                console.log('BracketRenderer: üîÑ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–µ—Å–æ–º');
                e.preventDefault();
                const delta = e.deltaY > 0 ? -0.1 : 0.1;
                const newScale = Math.max(0.5, Math.min(3, scaleRef.current + delta));
                scaleRef.current = newScale;
                setScale(newScale);
                console.log('BracketRenderer: üìè –ù–æ–≤—ã–π –º–∞—Å—à—Ç–∞–±:', newScale);
            };

            // TOUCH –°–û–ë–´–¢–ò–Ø –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–• –£–°–¢–†–û–ô–°–¢–í
            const touchStartHandler = (e) => {
                if (e.touches.length === 1) {
                    const touch = e.touches[0];
                    console.log('BracketRenderer: üì± Touch start');
                    
                    isDraggingRef.current = true;
                    setIsDragging(true);
                    
                    const newStartPos = {
                        x: touch.clientX - positionRef.current.x,
                        y: touch.clientY - positionRef.current.y,
                    };
                    startDragPosRef.current = newStartPos;
                    setStartDragPos(newStartPos);
                    
                    console.log('BracketRenderer: üì± Touch –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
                }
                e.preventDefault();
            };

            const touchMoveHandler = (e) => {
                if (!isDraggingRef.current || e.touches.length !== 1) return;
                
                const touch = e.touches[0];
                const newPosition = {
                    x: touch.clientX - startDragPosRef.current.x,
                    y: touch.clientY - startDragPosRef.current.y,
                };
                
                positionRef.current = newPosition;
                setPosition(newPosition);
                
                console.log('BracketRenderer: üì± Touch move:', newPosition);
                e.preventDefault();
            };

            const touchEndHandler = () => {
                if (isDraggingRef.current) {
                    console.log('BracketRenderer: üì± Touch end');
                    isDraggingRef.current = false;
                    setIsDragging(false);
                }
            };

            // –ü–†–ò–í–Ø–ó–´–í–ê–ï–ú –í–°–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
            wrapper.addEventListener('mousedown', mouseDownHandler, { passive: false });
            document.addEventListener('mousemove', mouseMoveHandler, { passive: false });
            document.addEventListener('mouseup', mouseUpHandler, { passive: false });
            wrapper.addEventListener('wheel', wheelHandler, { passive: false });
            wrapper.addEventListener('touchstart', touchStartHandler, { passive: false });
            document.addEventListener('touchmove', touchMoveHandler, { passive: false });
            document.addEventListener('touchend', touchEndHandler, { passive: false });
            window.addEventListener('resize', setResponsiveHeight);
            
            console.log('BracketRenderer: ‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
            console.log('BracketRenderer: üéØ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
            return () => {
                console.log('BracketRenderer: üßπ –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
                if (wrapper) {
                    wrapper.removeEventListener('mousedown', mouseDownHandler);
                    wrapper.removeEventListener('wheel', wheelHandler);
                    wrapper.removeEventListener('touchstart', touchStartHandler);
                }
                document.removeEventListener('mousemove', mouseMoveHandler);
                document.removeEventListener('mouseup', mouseUpHandler);
                document.removeEventListener('touchmove', touchMoveHandler);
                document.removeEventListener('touchend', touchEndHandler);
                window.removeEventListener('resize', setResponsiveHeight);
            };
        };
        
        // –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É
        const cleanup = initializeDragAndDrop();
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ small delay
        if (!cleanup) {
            console.log('BracketRenderer: ‚è±Ô∏è –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 100ms');
            const timeoutId = setTimeout(() => {
                const delayedCleanup = initializeDragAndDrop();
                if (!delayedCleanup) {
                    console.error('BracketRenderer: ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å drag-and-drop –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏');
                }
            }, 100);
            
            return () => {
                clearTimeout(timeoutId);
            };
        }
        
        return cleanup;
    }, []); // –ë–ï–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ games
    useEffect(() => {
        console.log('BracketRenderer: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–∞—Ç—á–µ–π');
        
        try {
            const grouped = groupMatchesByRoundAndBracket();
            setGroupedMatches(grouped);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const hasAnyMatches = 
                Object.keys(grouped.winnerRounds).length > 0 || 
                Object.keys(grouped.loserRounds).length > 0 || 
                grouped.placementMatch || 
                grouped.grandFinalMatch;
                
            if (!hasAnyMatches) {
                console.log('BracketRenderer: –Ω–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏');
            }
        } catch (error) {
            console.error('BracketRenderer: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:', error);
            setDataError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π');
        }
    }, [groupMatchesByRoundAndBracket]); // –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

    // –ó–∞—â–∏—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        try {
            if (!games || !Array.isArray(games)) {
                console.error('BracketRenderer: games –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', games);
                setDataError('–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏.');
                return;
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å games, –Ω–æ –æ–Ω–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–µ, –¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if (games.length === 0) {
                console.log('BracketRenderer: –º–∞—Å—Å–∏–≤ games –ø—É—Å—Ç–æ–π');
                setDataError(null); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –Ω–µ –æ—à–∏–±–∫–∞
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            const firstGame = games[0];
            if (!firstGame || !firstGame.id || !Array.isArray(firstGame.participants)) {
                console.error('BracketRenderer: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã:', firstGame);
                setDataError('–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                return;
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            setDataError(null);
        } catch (error) {
            console.error('BracketRenderer: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', error);
            setDataError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏.');
        }
    }, [games]); // –¢–æ–ª—å–∫–æ games –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

    // üÜï –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—Ç—á–∞
    const isMatchIncomplete = useCallback((match) => {
        if (!match.participants || match.participants.length < 2) {
            return true;
        }
        return match.participants.some(participant => 
            !participant || !participant.name || participant.name === 'TBD'
        );
    }, []);

    // üÜï –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ç—É–ª—Ç–∏–ø–∞ –æ –Ω–µ–ø–æ–ª–Ω–æ–º –º–∞—Ç—á–µ
    const showIncompleteMatchTooltip = useCallback((event, message = '–ù–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–∞—Ç—á–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã') => {
        const rect = event.currentTarget.getBoundingClientRect();
        setIncompleteMatchTooltip({
            show: true,
            message,
            x: rect.left + rect.width / 2,
            y: rect.top - 10
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Ç—É–ª—Ç–∏–ø —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            setIncompleteMatchTooltip(prev => ({ ...prev, show: false }));
        }, 3000);
    }, []);

    // üÜï –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ç—á—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
    const handleMatchClick = useCallback((match, event) => {
        if (!onMatchClick || !match.id) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞
        if (isMatchIncomplete(match)) {
            showIncompleteMatchTooltip(event);
            return;
        }

        // –ï—Å–ª–∏ –º–∞—Ç—á –∑–∞–ø–æ–ª–Ω–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        onMatchClick(match);
    }, [onMatchClick, isMatchIncomplete, showIncompleteMatchTooltip]);

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—à–∏–±–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (dataError) {
        return (
            <div className="empty-bracket-message">
                <h3>‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏</h3>
                <p>{dataError}</p>
                <button onClick={() => window.location.reload()}>
                    üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </button>
            </div>
        );
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!games || !Array.isArray(games) || games.length === 0) {
        console.log('BracketRenderer: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ games –∏–ª–∏ –æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', games);
        return <div className="empty-bracket-message">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</div>;
    }

    const { winnerRounds, loserRounds, placementMatch, grandFinalMatch } = groupedMatches || {};
    console.log('BracketRenderer: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Ç—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞', { 
        winnerRoundsKeys: winnerRounds ? Object.keys(winnerRounds) : [], 
        loserRoundsKeys: loserRounds ? Object.keys(loserRounds) : [],  
        hasPlacementMatch: !!placementMatch, 
        hasGrandFinalMatch: !!grandFinalMatch 
    });
    
    const winnerRoundKeys = winnerRounds ? Object.keys(winnerRounds) : [];
    const hasWinnerMatches = winnerRoundKeys.length > 0 || 
                            (loserRounds && Object.keys(loserRounds).length > 0) || 
                            placementMatch || 
                            grandFinalMatch;

    if (!hasWinnerMatches) {
        console.log('BracketRenderer: –Ω–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏');
        return <div className="empty-bracket-message">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</div>;
    }

    return (
        // –í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ overflow
        <div
            ref={wrapperRef}
            className={`bracket-renderer-wrapper ${isDragging ? 'dragging' : ''}`}
        >
            {/* –ö–æ–Ω—Ç—Ä–æ–ª—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <div className="bracket-controls">
                <button onClick={handleZoomIn} title="–£–≤–µ–ª–∏—á–∏—Ç—å">+</button>
                <button onClick={handleZoomOut} title="–£–º–µ–Ω—å—à–∏—Ç—å">-</button>
                <button onClick={handleResetView} title="–°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥">‚Ü∫</button>
                <button onClick={handleOpenInNewTab} title="–û—Ç–∫—Ä—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ">
                    ‚Üó
                </button>
            </div>

            {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
            <div
                ref={bracketContentRef}
                className="bracket-renderer-content"
                style={{
                    transform: `translate(${position.x}px, ${position.y}px) scale(${scale})`,
                    transformOrigin: '0 0'
                }}
            >
                {/* –í–µ—Ä—Ö–Ω—è—è —Å–µ—Ç–∫–∞ (Winners Bracket) */}
                <div className="bracket winners-bracket">
                    <h2 className="bracket-title">–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞</h2>
                    <div className="bracket-grid">
                        {(winnerRoundKeys || []).sort((a, b) => Number(a) - Number(b)).map((round) => {
                            const roundMatches = winnerRounds && winnerRounds[round] ? winnerRounds[round] : [];
                            if (!roundMatches || roundMatches.length === 0) {
                                console.log(`BracketRenderer: üö´ –†–∞—É–Ω–¥ ${round} –ø—É—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥`);
                                return null;
                            }

                            console.log(`BracketRenderer: ‚úÖ –†–µ–Ω–¥–µ—Ä–∏–º —Ä–∞—É–Ω–¥ ${round} —Å ${roundMatches.length} –º–∞—Ç—á–∞–º–∏`);

                            return (
                                <div key={`w-${round}`} className="round-column">
                                    <h3>
                                        {round === '-1'
                                            ? '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π'
                                            : `–†–∞—É–Ω–¥ ${round}`}
                                    </h3>
                                    {(roundMatches || []).map((match) => {
                                        const isSelected = selectedMatch === safeParseBracketId(match.id);
                                        const isCompleted = match.state === 'DONE';
                                        
                                        // üèÜ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–æ–º–∞–Ω–¥-–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
                                        const team1Classes = ['custom-seed'];
                                        const team2Classes = ['custom-seed'];
                                        
                                        if (isSelected) {
                                            team1Classes.push('selected');
                                            team2Classes.push('selected');
                                        }
                                        
                                        if (isCompleted && match.participants) {
                                            const participant1 = match.participants[0];
                                            const participant2 = match.participants[1];
                                            
                                            if (participant1?.isWinner) {
                                                team1Classes.push('winner');
                                            } else if (participant1 && !participant1.isWinner) {
                                                team1Classes.push('loser');
                                            }
                                            
                                            if (participant2?.isWinner) {
                                                team2Classes.push('winner');
                                            } else if (participant2 && !participant2.isWinner) {
                                                team2Classes.push('loser');
                                            }
                                        }
                                        
                                        return (
                                            <div key={match.id} className={`match-container ${isCompleted ? 'completed' : ''}`}>
                                                <div className="match-content">
                                                    <div
                                                        className={team1Classes.join(' ')}
                                                        onClick={(e) => {
                                                            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–µ—Ç–∞–ª–µ–π
                                                            if (onMatchClick && match.id) {
                                                                handleMatchClick(match, e);
                                                            }
                                                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
                                                            else if (canEditMatches && match.state !== 'DONE') {
                                                                setSelectedMatch(isSelected ? null : safeParseBracketId(match.id));
                                                                // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ handleTeamClick, –ø–µ—Ä–µ–¥–∞–≤–∞—è ID –∫–æ–º–∞–Ω–¥—ã –∏ ID –º–∞—Ç—á–∞
                                                                if (handleTeamClick && !isSelected && match.participants[0]?.id) {
                                                                    handleTeamClick(match.participants[0].id, match.id);
                                                                }
                                                            }
                                                        }}
                                                    >
                                                        {match.participants[0]?.avatarUrl && (
                                                            <div className="team-avatar">
                                                                <img 
                                                                    src={match.participants[0].avatarUrl} 
                                                                    alt={`${match.participants[0]?.name || 'TBD'}`}
                                                                    onError={(e) => {e.target.src = '/default-avatar.png'}}
                                                                />
                                                            </div>
                                                        )}
                                                        <span className={`team-name${!match.participants[0]?.name ? ' placeholder' : ''}`}>{match.participants[0]?.name?.slice(0, 20) || 'TBD'}</span>
                                                        <span className="team-score">
                                                            {match.participants[0]?.score ?? '-'}
                                                        </span>
                                                    </div>
                                                    <div
                                                        className={team2Classes.join(' ')}
                                                        onClick={(e) => {
                                                            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–µ—Ç–∞–ª–µ–π
                                                            if (onMatchClick && match.id) {
                                                                handleMatchClick(match, e);
                                                            }
                                                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
                                                            else if (canEditMatches && match.state !== 'DONE') {
                                                                setSelectedMatch(isSelected ? null : safeParseBracketId(match.id));
                                                                // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ handleTeamClick, –ø–µ—Ä–µ–¥–∞–≤–∞—è ID –∫–æ–º–∞–Ω–¥—ã –∏ ID –º–∞—Ç—á–∞
                                                                if (handleTeamClick && !isSelected && match.participants[1]?.id) {
                                                                    handleTeamClick(match.participants[1].id, match.id);
                                                                }
                                                            }
                                                        }}
                                                    >
                                                        {match.participants[1]?.avatarUrl && (
                                                            <div className="team-avatar">
                                                                <img 
                                                                    src={match.participants[1].avatarUrl} 
                                                                    alt={`${match.participants[1]?.name || 'TBD'}`}
                                                                    onError={(e) => {e.target.src = '/default-avatar.png'}}
                                                                />
                                                            </div>
                                                        )}
                                                        <span className={`team-name${!match.participants[1]?.name ? ' placeholder' : ''}`}>{match.participants[1]?.name?.slice(0, 20) || 'TBD'}</span>
                                                        <span className="team-score">
                                                            {match.participants[1]?.score ?? '-'}
                                                        </span>
                                                    </div>
                                                </div>
                                                {/* üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π */}
                                                {onMatchClick && (
                                                    <div className="edit-match-btn-container">
                                                        <button 
                                                            className="edit-match-btn"
                                                            onClick={(e) => {
                                                                handleMatchClick(match, e);
                                                            }}
                                                            title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                                                        >
                                                            üîç
                                                        </button>
                                                    </div>
                                                )}
                                            </div>
                                        );
                                    })}
                                </div>
                            );
                        })}
                    </div>
                </div>

                {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∏ –Ω–∏–∂–Ω—è—è —Å–µ—Ç–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Double Elimination) */}
                {format === 'double_elimination' && loserRounds && Object.keys(loserRounds).length > 0 && (
                    <>
                        <hr className="bracket-divider" />
                        <div className="bracket losers-bracket">
                            <h2 className="bracket-title">–ù–∏–∂–Ω—è—è —Å–µ—Ç–∫–∞</h2>
                            <div className="bracket-grid">
                                {Object.keys(loserRounds).sort((a, b) => Number(a) - Number(b)).map((round) => {
                                    const roundMatches = loserRounds[round];
                                    return roundMatches && roundMatches.length > 0 ? (
                                        <div key={`l-${round}`} className="round-column">
                                            <h3>–†–∞—É–Ω–¥ {round}</h3>
                                            {roundMatches.map((match) => {
                                                const isSelected = selectedMatch === safeParseBracketId(match.id);
                                                const isCompleted = match.state === 'DONE';
                                                
                                                // üèÜ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–æ–º–∞–Ω–¥-–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
                                                const team1Classes = ['custom-seed'];
                                                const team2Classes = ['custom-seed'];
                                                
                                                if (isSelected) {
                                                    team1Classes.push('selected');
                                                    team2Classes.push('selected');
                                                }
                                                
                                                if (isCompleted && match.participants) {
                                                    const participant1 = match.participants[0];
                                                    const participant2 = match.participants[1];
                                                    
                                                    if (participant1?.isWinner) {
                                                        team1Classes.push('winner');
                                                    } else if (participant1 && !participant1.isWinner) {
                                                        team1Classes.push('loser');
                                                    }
                                                    
                                                    if (participant2?.isWinner) {
                                                        team2Classes.push('winner');
                                                    } else if (participant2 && !participant2.isWinner) {
                                                        team2Classes.push('loser');
                                                    }
                                                }
                                                
                                                return (
                                                    <div key={match.id} className={`match-container ${isCompleted ? 'completed' : ''}`}>
                                                        <div className="match-content">
                                                            <div
                                                                className={team1Classes.join(' ')}
                                                                onClick={(e) => {
                                                                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–µ—Ç–∞–ª–µ–π
                                                                    if (onMatchClick && match.id) {
                                                                        handleMatchClick(match, e);
                                                                    }
                                                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
                                                                    else if (canEditMatches && match.state !== 'DONE') {
                                                                        setSelectedMatch(isSelected ? null : safeParseBracketId(match.id));
                                                                        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ handleTeamClick, –ø–µ—Ä–µ–¥–∞–≤–∞—è ID –∫–æ–º–∞–Ω–¥—ã –∏ ID –º–∞—Ç—á–∞
                                                                        if (handleTeamClick && !isSelected && match.participants[0]?.id) {
                                                                            handleTeamClick(match.participants[0].id, match.id);
                                                                        }
                                                                    }
                                                                }}
                                                            >
                                                                {match.participants[0]?.avatarUrl && (
                                                                    <div className="team-avatar">
                                                                        <img 
                                                                            src={match.participants[0].avatarUrl} 
                                                                            alt={`${match.participants[0]?.name || 'TBD'}`}
                                                                            onError={(e) => {e.target.src = '/default-avatar.png'}}
                                                                        />
                                                                    </div>
                                                                )}
                                                                <span className={`team-name${!match.participants[0]?.name ? ' placeholder' : ''}`}>{match.participants[0]?.name?.slice(0, 20) || 'TBD'}</span>
                                                                <span className="team-score">
                                                                    {match.participants[0]?.score ?? '-'}
                                                                </span>
                                                            </div>
                                                            <div
                                                                className={team2Classes.join(' ')}
                                                                onClick={(e) => {
                                                                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–µ—Ç–∞–ª–µ–π
                                                                    if (onMatchClick && match.id) {
                                                                        handleMatchClick(match, e);
                                                                    }
                                                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
                                                                    else if (canEditMatches && match.state !== 'DONE') {
                                                                        setSelectedMatch(isSelected ? null : safeParseBracketId(match.id));
                                                                        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ handleTeamClick, –ø–µ—Ä–µ–¥–∞–≤–∞—è ID –∫–æ–º–∞–Ω–¥—ã –∏ ID –º–∞—Ç—á–∞
                                                                        if (handleTeamClick && !isSelected && match.participants[1]?.id) {
                                                                            handleTeamClick(match.participants[1].id, match.id);
                                                                        }
                                                                    }
                                                                }}
                                                            >
                                                                {match.participants[1]?.avatarUrl && (
                                                                    <div className="team-avatar">
                                                                        <img 
                                                                            src={match.participants[1].avatarUrl} 
                                                                            alt={`${match.participants[1]?.name || 'TBD'}`}
                                                                            onError={(e) => {e.target.src = '/default-avatar.png'}}
                                                                        />
                                                                    </div>
                                                                )}
                                                                <span className={`team-name${!match.participants[1]?.name ? ' placeholder' : ''}`}>{match.participants[1]?.name?.slice(0, 20) || 'TBD'}</span>
                                                                <span className="team-score">
                                                                    {match.participants[1]?.score ?? '-'}
                                                                </span>
                                                            </div>
                                                        </div>
                                                        {/* üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π */}
                                                        {onMatchClick && (
                                                            <div className="edit-match-btn-container">
                                                                <button 
                                                                    className="edit-match-btn"
                                                                    onClick={(e) => {
                                                                        handleMatchClick(match, e);
                                                                    }}
                                                                    title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                                                                >
                                                                    üîç
                                                                </button>
                                                            </div>
                                                        )}
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    ) : null;
                                })}
                            </div>
                        </div>
                    </>
                )}

                {/* –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –∏ –≥—Ä–∞–Ω–¥-—Ñ–∏–Ω–∞–ª */}
                {(placementMatch || grandFinalMatch) && 
                    <>
                        <hr className="bracket-divider" />
                        <div className="final-matches-container">
                            <h2 className="bracket-title">–§–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏</h2>
                            <div className="final-matches-grid">
                                {grandFinalMatch && (
                                    <div className="bracket grand-final">
                                        <h3 className="match-title">–ë–æ–ª—å—à–æ–π —Ñ–∏–Ω–∞–ª</h3>
                                        <div className={`match-container ${grandFinalMatch.state === 'DONE' ? 'completed' : ''}`}>
                                            <div className="match-content">
                                                {(() => {
                                                    // üèÜ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–æ–º–∞–Ω–¥-–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –≤ –≥—Ä–∞–Ω–¥-—Ñ–∏–Ω–∞–ª–µ
                                                    const isSelected = selectedMatch === safeParseBracketId(grandFinalMatch.id);
                                                    const isCompleted = grandFinalMatch.state === 'DONE';
                                                    
                                                    const team1Classes = ['custom-seed'];
                                                    const team2Classes = ['custom-seed'];
                                                    
                                                    if (isSelected) {
                                                        team1Classes.push('selected');
                                                        team2Classes.push('selected');
                                                    }
                                                    
                                                    if (isCompleted && grandFinalMatch.participants) {
                                                        const participant1 = grandFinalMatch.participants[0];
                                                        const participant2 = grandFinalMatch.participants[1];
                                                        
                                                        if (participant1?.isWinner) {
                                                            team1Classes.push('winner');
                                                        } else if (participant1 && !participant1.isWinner) {
                                                            team1Classes.push('loser');
                                                        }
                                                        
                                                        if (participant2?.isWinner) {
                                                            team2Classes.push('winner');
                                                        } else if (participant2 && !participant2.isWinner) {
                                                            team2Classes.push('loser');
                                                        }
                                                    }
                                                    
                                                    return (
                                                        <>
                                                            <div
                                                                className={team1Classes.join(' ')}
                                                                onClick={(e) => {
                                                                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–µ—Ç–∞–ª–µ–π
                                                                    if (onMatchClick && grandFinalMatch.id) {
                                                                        handleMatchClick(grandFinalMatch, e);
                                                                    }
                                                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
                                                                    else if (canEditMatches && grandFinalMatch.state !== 'DONE') {
                                                                        setSelectedMatch(selectedMatch === safeParseBracketId(grandFinalMatch.id) ? null : safeParseBracketId(grandFinalMatch.id));
                                                                        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ handleTeamClick
                                                                        if (handleTeamClick && selectedMatch !== safeParseBracketId(grandFinalMatch.id) && grandFinalMatch.participants[0]?.id) {
                                                                            handleTeamClick(grandFinalMatch.participants[0].id, grandFinalMatch.id);
                                                                        }
                                                                    }
                                                                }}
                                                            >
                                                                {grandFinalMatch.participants[0]?.avatarUrl && (
                                                                    <div className="team-avatar">
                                                                        <img 
                                                                            src={grandFinalMatch.participants[0].avatarUrl} 
                                                                            alt={`${grandFinalMatch.participants[0]?.name || 'TBD'}`}
                                                                            onError={(e) => {e.target.src = '/default-avatar.png'}}
                                                                        />
                                                                    </div>
                                                                )}
                                                                <span className={`team-name${!grandFinalMatch.participants[0]?.name ? ' placeholder' : ''}`}>{grandFinalMatch.participants[0]?.name?.slice(0, 20) || 'TBD'}</span>
                                                                <span className="team-score">
                                                                    {grandFinalMatch.participants[0]?.score ?? '-'}
                                                                </span>
                                                            </div>
                                                            <div
                                                                className={team2Classes.join(' ')}
                                                                onClick={(e) => {
                                                                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–µ—Ç–∞–ª–µ–π
                                                                    if (onMatchClick && grandFinalMatch.id) {
                                                                        handleMatchClick(grandFinalMatch, e);
                                                                    }
                                                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
                                                                    else if (canEditMatches && grandFinalMatch.state !== 'DONE') {
                                                                        setSelectedMatch(selectedMatch === safeParseBracketId(grandFinalMatch.id) ? null : safeParseBracketId(grandFinalMatch.id));
                                                                        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ handleTeamClick
                                                                        if (handleTeamClick && selectedMatch !== safeParseBracketId(grandFinalMatch.id) && grandFinalMatch.participants[1]?.id) {
                                                                            handleTeamClick(grandFinalMatch.participants[1].id, grandFinalMatch.id);
                                                                        }
                                                                    }
                                                                }}
                                                            >
                                                                {grandFinalMatch.participants[1]?.avatarUrl && (
                                                                    <div className="team-avatar">
                                                                        <img 
                                                                            src={grandFinalMatch.participants[1].avatarUrl} 
                                                                            alt={`${grandFinalMatch.participants[1]?.name || 'TBD'}`}
                                                                            onError={(e) => {e.target.src = '/default-avatar.png'}}
                                                                        />
                                                                    </div>
                                                                )}
                                                                <span className={`team-name${!grandFinalMatch.participants[1]?.name ? ' placeholder' : ''}`}>{grandFinalMatch.participants[1]?.name?.slice(0, 20) || 'TBD'}</span>
                                                                <span className="team-score">
                                                                    {grandFinalMatch.participants[1]?.score ?? '-'}
                                                                </span>
                                                            </div>
                                                        </>
                                                    );
                                                })()}
                                            </div>
                                            {/* üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π */}
                                            {onMatchClick && (
                                                <div className="edit-match-btn-container">
                                                    <button 
                                                        className="edit-match-btn"
                                                        onClick={(e) => {
                                                            handleMatchClick(grandFinalMatch, e);
                                                        }}
                                                        title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                                                    >
                                                        üîç
                                                    </button>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                )}
                                {placementMatch && (
                                    <div className="bracket placement-match">
                                        <h3 className="match-title">–ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ</h3>
                                        <div className={`match-container ${placementMatch.state === 'DONE' ? 'completed' : ''}`}>
                                            <div className="match-content">
                                                {(() => {
                                                    // üèÜ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–æ–º–∞–Ω–¥-–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –≤ –º–∞—Ç—á–µ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
                                                    const isSelected = selectedMatch === safeParseBracketId(placementMatch.id);
                                                    const isCompleted = placementMatch.state === 'DONE';
                                                    
                                                    const team1Classes = ['custom-seed'];
                                                    const team2Classes = ['custom-seed'];
                                                    
                                                    if (isSelected) {
                                                        team1Classes.push('selected');
                                                        team2Classes.push('selected');
                                                    }
                                                    
                                                    if (isCompleted && placementMatch.participants) {
                                                        const participant1 = placementMatch.participants[0];
                                                        const participant2 = placementMatch.participants[1];
                                                        
                                                        if (participant1?.isWinner) {
                                                            team1Classes.push('winner');
                                                        } else if (participant1 && !participant1.isWinner) {
                                                            team1Classes.push('loser');
                                                        }
                                                        
                                                        if (participant2?.isWinner) {
                                                            team2Classes.push('winner');
                                                        } else if (participant2 && !participant2.isWinner) {
                                                            team2Classes.push('loser');
                                                        }
                                                    }
                                                    
                                                    return (
                                                        <>
                                                            <div
                                                                className={team1Classes.join(' ')}
                                                                onClick={(e) => {
                                                                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–µ—Ç–∞–ª–µ–π
                                                                    if (onMatchClick && placementMatch.id) {
                                                                        handleMatchClick(placementMatch, e);
                                                                    }
                                                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
                                                                    else if (canEditMatches && placementMatch.state !== 'DONE') {
                                                                        setSelectedMatch(selectedMatch === safeParseBracketId(placementMatch.id) ? null : safeParseBracketId(placementMatch.id));
                                                                        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ handleTeamClick
                                                                        if (handleTeamClick && selectedMatch !== safeParseBracketId(placementMatch.id) && placementMatch.participants[0]?.id) {
                                                                            handleTeamClick(placementMatch.participants[0].id, placementMatch.id);
                                                                        }
                                                                    }
                                                                }}
                                                            >
                                                                {placementMatch.participants[0]?.avatarUrl && (
                                                                    <div className="team-avatar">
                                                                        <img 
                                                                            src={placementMatch.participants[0].avatarUrl} 
                                                                            alt={`${placementMatch.participants[0]?.name || 'TBD'}`}
                                                                            onError={(e) => {e.target.src = '/default-avatar.png'}}
                                                                        />
                                                                    </div>
                                                                )}
                                                                <span className={`team-name${!placementMatch.participants[0]?.name ? ' placeholder' : ''}`}>{placementMatch.participants[0]?.name?.slice(0, 20) || 'TBD'}</span>
                                                                <span className="team-score">
                                                                    {placementMatch.participants[0]?.score ?? '-'}
                                                                </span>
                                                            </div>
                                                            <div
                                                                className={team2Classes.join(' ')}
                                                                onClick={(e) => {
                                                                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–µ—Ç–∞–ª–µ–π
                                                                    if (onMatchClick && placementMatch.id) {
                                                                        handleMatchClick(placementMatch, e);
                                                                    }
                                                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
                                                                    else if (canEditMatches && placementMatch.state !== 'DONE') {
                                                                        setSelectedMatch(selectedMatch === safeParseBracketId(placementMatch.id) ? null : safeParseBracketId(placementMatch.id));
                                                                        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ handleTeamClick
                                                                        if (handleTeamClick && selectedMatch !== safeParseBracketId(placementMatch.id) && placementMatch.participants[1]?.id) {
                                                                            handleTeamClick(placementMatch.participants[1].id, placementMatch.id);
                                                                        }
                                                                    }
                                                                }}
                                                            >
                                                                {placementMatch.participants[1]?.avatarUrl && (
                                                                    <div className="team-avatar">
                                                                        <img 
                                                                            src={placementMatch.participants[1].avatarUrl} 
                                                                            alt={`${placementMatch.participants[1]?.name || 'TBD'}`}
                                                                            onError={(e) => {e.target.src = '/default-avatar.png'}}
                                                                        />
                                                                    </div>
                                                                )}
                                                                <span className={`team-name${!placementMatch.participants[1]?.name ? ' placeholder' : ''}`}>{placementMatch.participants[1]?.name?.slice(0, 20) || 'TBD'}</span>
                                                                <span className="team-score">
                                                                    {placementMatch.participants[1]?.score ?? '-'}
                                                                </span>
                                                            </div>
                                                        </>
                                                    );
                                                })()}
                                            </div>
                                            {/* üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π */}
                                            {onMatchClick && (
                                                <div className="edit-match-btn-container">
                                                    <button 
                                                        className="edit-match-btn"
                                                        onClick={(e) => {
                                                            handleMatchClick(placementMatch, e);
                                                        }}
                                                        title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                                                    >
                                                        üîç
                                                    </button>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>
                    </>
                }
            </div>
            
            {/* üÜï –¢—É–ª—Ç–∏–ø –¥–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö –º–∞—Ç—á–µ–π */}
            {incompleteMatchTooltip.show && (
                <div 
                    className="incomplete-match-tooltip"
                    style={{
                        position: 'fixed',
                        left: incompleteMatchTooltip.x,
                        top: incompleteMatchTooltip.y,
                        transform: 'translate(-50%, -100%)',
                        zIndex: 9999,
                        backgroundColor: '#333333',
                        color: '#ffffff',
                        padding: '8px 12px',
                        borderRadius: '4px',
                        fontSize: '14px',
                        fontWeight: '500',
                        border: '1px solid #ff6b6b',
                        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.3)',
                        whiteSpace: 'nowrap',
                        pointerEvents: 'none',
                        animation: 'tooltipFadeIn 0.3s ease-out'
                    }}
                >
                    {incompleteMatchTooltip.message}
                    <div 
                        style={{
                            position: 'absolute',
                            top: '100%',
                            left: '50%',
                            transform: 'translateX(-50%)',
                            width: 0,
                            height: 0,
                            borderLeft: '6px solid transparent',
                            borderRight: '6px solid transparent',
                            borderTop: '6px solid #333333'
                        }}
                    />
                </div>
            )}
        </div>
    );
};

export default BracketRenderer;