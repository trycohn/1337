// frontend/src/components/BracketRenderer.js
import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';
import './BracketRenderer.css';
import { safeParseBracketId } from '../utils/safeParseInt';
import { formatManager } from '../utils/tournament/bracketFormats';
import { SingleEliminationFormat } from '../utils/tournament/formats/SingleEliminationFormat';
import { DoubleEliminationFormat } from '../utils/tournament/formats/DoubleEliminationFormat';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
formatManager.register(new SingleEliminationFormat());
formatManager.register(new DoubleEliminationFormat());

const BracketRenderer = ({ games, tournament, onEditMatch, canEditMatches, selectedMatch, setSelectedMatch, format, onMatchClick }) => {
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º games –≤–º–µ—Å—Ç–æ matches
    const matches = games || [];
    const containerRef = useRef(null);
    const rendererRef = useRef(null);
    const isDraggingRef = useRef(false);
    const dragStartRef = useRef({ x: 0, y: 0 });
    const lastPosRef = useRef({ x: 0, y: 0 });
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –∏ –º–∞—Å—à—Ç–∞–±–∞ —Å–µ—Ç–∫–∏
    const [position, setPosition] = useState({ x: 0, y: 0 });
    const [zoom, setZoom] = useState(1);
    const [isDragging, setIsDragging] = useState(false);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
    const tournamentFormat = useMemo(() => {
        const formatType = tournament?.bracket_type || 'single_elimination';
        return formatManager.getFormat(formatType);
    }, [tournament?.bracket_type]);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–≥–∏–Ω–æ–≤
    const groupedMatches = useMemo(() => {
        if (!matches || matches.length === 0) return {};
        return tournamentFormat.groupMatches(matches);
    }, [matches, tournamentFormat]);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º –∏ –∑—É–º–æ–º
    const handleMouseDown = useCallback((e) => {
        if (e.button !== 0) return;
        
        const rect = containerRef.current.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        if (e.target.classList.contains('bracket-match-card') || 
            e.target.closest('.bracket-match-card') ||
            e.target.closest('.bracket-navigation-panel')) {
            return;
        }
        
        isDraggingRef.current = true;
        setIsDragging(true);
        dragStartRef.current = { x: e.clientX, y: e.clientY };
        lastPosRef.current = { ...position };
        
        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mouseup', handleMouseUp);
        e.preventDefault();
    }, [position]);
    
    const handleMouseMove = useCallback((e) => {
        if (!isDraggingRef.current) return;
        
        const deltaX = e.clientX - dragStartRef.current.x;
        const deltaY = e.clientY - dragStartRef.current.y;
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        const newPosition = {
            x: lastPosRef.current.x + deltaX,
            y: lastPosRef.current.y + deltaY
        };
        
        setPosition(newPosition);
    }, []);
    
    const handleMouseUp = useCallback(() => {
        isDraggingRef.current = false;
        setIsDragging(false);
        
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
    }, [handleMouseMove]);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –º—ã—à–∫–æ–π –¥–ª—è –∑—É–º–∞
    const handleWheel = useCallback((e) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ Ctrl –∏–ª–∏ Meta (Cmd –Ω–∞ Mac)
        if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            
            const delta = e.deltaY * -0.01;
            const newZoom = Math.min(Math.max(zoom + delta, 0.3), 3);
            
            if (newZoom !== zoom) {
                setZoom(newZoom);
            }
        }
    }, [zoom]);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const handleZoomIn = useCallback(() => {
        setZoom(prev => Math.min(prev + 0.1, 3));
    }, []);
    
    const handleZoomOut = useCallback(() => {
        setZoom(prev => Math.max(prev - 0.1, 0.3));
    }, []);
    
    const handleZoomReset = useCallback(() => {
        setZoom(1);
    }, []);
    
    const handleCenterView = useCallback(() => {
        setPosition({ x: 0, y: 0 });
    }, []);
    
    const handleFitToScreen = useCallback(() => {
        setZoom(0.6);
        setPosition({ x: 0, y: 0 });
    }, []);
    
    const handlePositionReset = useCallback(() => {
        setPosition({ x: 0, y: 0 });
        setZoom(1);
    }, []);
    
    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞–π—Ç–∏ —Å–µ—Ç–∫—É
    const handleFindBracket = useCallback(() => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–∏–¥–∏–º–æ–π —á–∞—Å—Ç–∏ —Å–µ—Ç–∫–∏
        const containerRect = containerRef.current?.getBoundingClientRect();
        if (!containerRect) return;
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –∑—É–º–∞
        const centerX = (containerRect.width / 2) - (800 * zoom / 2);
        const centerY = (containerRect.height / 2) - (600 * zoom / 2);
        
        setPosition({ x: centerX, y: centerY });
    }, [zoom]);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–∞–ª–µ–∫–æ –ª–∏ —Å–µ—Ç–∫–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    const isBracketFarFromCenter = useMemo(() => {
        const containerRect = containerRef.current?.getBoundingClientRect();
        if (!containerRect) return false;
        
        const centerX = containerRect.width / 2;
        const centerY = containerRect.height / 2;
        const distance = Math.sqrt(
            Math.pow(position.x - centerX, 2) + 
            Math.pow(position.y - centerY, 2)
        );
        
        return distance > 500; // –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±–æ–ª—å—à–µ 500px
    }, [position]);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Å–µ—Ç–∫–µ
    const getBracketDirection = useMemo(() => {
        const containerRect = containerRef.current?.getBoundingClientRect();
        if (!containerRect) return '';
        
        const centerX = containerRect.width / 2;
        const centerY = containerRect.height / 2;
        const deltaX = position.x - centerX;
        const deltaY = position.y - centerY;
        
        let direction = '';
        if (Math.abs(deltaY) > Math.abs(deltaX)) {
            direction = deltaY > 0 ? '‚Üì' : '‚Üë';
        } else {
            direction = deltaX > 0 ? '‚Üí' : '‚Üê';
        }
        
        return direction;
    }, [position]);
    
    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    useEffect(() => {
        const container = containerRef.current;
        if (container) {
            container.addEventListener('mousedown', handleMouseDown);
            container.addEventListener('wheel', handleWheel, { passive: false });
            
            return () => {
                container.removeEventListener('mousedown', handleMouseDown);
                container.removeEventListener('wheel', handleWheel);
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
            };
        }
    }, [handleMouseDown, handleWheel, handleMouseMove, handleMouseUp]);
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç—ã–µ –º–∞—Ç—á–∏
    if (!matches || matches.length === 0) {
        return (
            <div className="bracket-renderer-container" ref={containerRef}>
                <div className="bracket-empty-message">
                    üéØ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
                </div>
            </div>
        );
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞—É–Ω–¥–æ–≤
    const getRoundContext = (round, roundData, bracketType) => {
        if (tournament?.bracket_type === 'double_elimination') {
            // –î–ª—è Double Elimination –ø–µ—Ä–µ–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            const winnersRounds = Object.keys(groupedMatches.winners || {}).length;
            const losersRounds = Object.keys(groupedMatches.losers || {}).length;
            
            return {
                bracketType,
                totalRounds: bracketType === 'winner' ? winnersRounds : losersRounds,
                totalWinnersRounds: winnersRounds,
                totalLosersRounds: losersRounds,
                participantCount: tournament?.participants_count || 0
            };
        }
        
        // –î–ª—è Single Elimination –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        const regularRounds = Object.keys(groupedMatches)
            .map(Number)
            .filter(r => r >= 1);
        const totalRounds = regularRounds.length > 0 ? Math.max(...regularRounds) : 1;
        
        const hasThirdPlace = roundData.special && roundData.special.length > 0;
        const hasFinal = roundData.regular && roundData.regular.some(m => 
            m.match_number === 1 && !m.is_third_place_match
        );
        
        return {
            totalRounds,
            isFinalsRound: hasThirdPlace || (round === totalRounds && hasFinal),
            hasThirdPlace,
            participantCount: tournament?.participants_count || 0
        };
    };

    // –†–µ–Ω–¥–µ—Ä —Ä–∞—É–Ω–¥–∞ –¥–ª—è Single Elimination
    const renderSingleEliminationRound = (round, roundData, roundName) => {
        const allMatches = [...(roundData.regular || []), ...(roundData.special || [])];
        const matchesCount = allMatches.length;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        let matchesClass = 'few-matches';
        let columnClass = 'has-few-matches';
        
        if (matchesCount === 1) {
            matchesClass = 'single-match';
            columnClass = 'has-single-match';
        } else if (matchesCount >= 4) {
            matchesClass = 'many-matches';
            columnClass = 'has-many-matches';
        }
        
        return (
            <div key={round} className={`bracket-round-column ${columnClass}`}>
                <div className="bracket-round-header">
                    {roundName}
                </div>
                <div className={`bracket-matches-list ${matchesClass}`}>
                    {allMatches.map(match => (
                        <div
                            key={match.id}
                            className="bracket-match-container"
                            data-match-type={match.bracket_type === 'placement' ? 'third-place' : 'regular'}
                        >
                            <MatchCard
                                match={match}
                                tournament={tournament}
                                onEditMatch={onEditMatch}
                                canEditMatches={canEditMatches}
                                onMatchClick={onMatchClick}
                                matchType={match.bracket_type === 'placement' ? 'third-place' : 'regular'}
                            />
                        </div>
                    ))}
                </div>
            </div>
        );
    };

    // –†–µ–Ω–¥–µ—Ä —Ä–∞—É–Ω–¥–∞ –¥–ª—è Double Elimination
    const renderDoubleEliminationRound = (round, matches, bracketType, roundName) => {
        const matchesCount = matches.length;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        let matchesClass = 'few-matches';
        let columnClass = 'has-few-matches';
        
        if (matchesCount === 1) {
            matchesClass = 'single-match';
            columnClass = 'has-single-match';
        } else if (matchesCount >= 4) {
            matchesClass = 'many-matches';
            columnClass = 'has-many-matches';
        }
        
        return (
            <div key={`${bracketType}-${round}`} className={`bracket-round-column ${columnClass}`}>
                <div className={`bracket-round-header bracket-${bracketType}s-bracket-header`}>
                    {roundName}
                </div>
                <div className={`bracket-matches-list ${matchesClass}`}>
                    {matches.map(match => (
                        <div
                            key={match.id}
                            className="bracket-match-container"
                            data-match-type={match.bracket_type}
                        >
                            <MatchCard
                                match={match}
                                tournament={tournament}
                                onEditMatch={onEditMatch}
                                canEditMatches={canEditMatches}
                                onMatchClick={onMatchClick}
                                matchType={match.bracket_type}
                            />
                        </div>
                    ))}
                </div>
            </div>
        );
    };

    // –†–µ–Ω–¥–µ—Ä –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const renderNavigationPanel = () => (
        <div className="bracket-navigation-panel">
            <div className="bracket-navigation-title">–ù–∞–≤–∏–≥–∞—Ü–∏—è</div>
            
            <div className="bracket-nav-group">
                <div className="bracket-nav-row">
                    <button 
                        className="bracket-nav-icon-button"
                        onClick={handleZoomOut}
                        disabled={zoom <= 0.3}
                        title="–£–º–µ–Ω—å—à–∏—Ç—å –º–∞—Å—à—Ç–∞–±"
                    >
                        <span className="bracket-nav-icon">‚àí</span>
                    </button>
                    
                    <div className="bracket-zoom-display">
                        {Math.round(zoom * 100)}%
                    </div>
                    
                    <button 
                        className="bracket-nav-icon-button"
                        onClick={handleZoomIn}
                        disabled={zoom >= 3}
                        title="–£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Å—à—Ç–∞–±"
                    >
                        <span className="bracket-nav-icon">+</span>
                    </button>
                </div>
            </div>

            <div className="bracket-nav-group">
                <div className="bracket-nav-row">
                    <button 
                        className="bracket-nav-icon-button"
                        onClick={handlePositionReset}
                        title="–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏ –º–∞—Å—à—Ç–∞–±"
                    >
                        <span className="bracket-nav-icon">‚åÇ</span>
                    </button>
                    
                    <button 
                        className="bracket-nav-icon-button"
                        onClick={handleCenterView}
                        title="–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É"
                    >
                        <span className="bracket-nav-icon">‚äô</span>
                    </button>
                    
                    <button 
                        className="bracket-nav-icon-button"
                        onClick={handleFitToScreen}
                        title="–£–º–µ—Å—Ç–∏—Ç—å —Å–µ—Ç–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω"
                    >
                        <span className="bracket-nav-icon">‚åë</span>
                    </button>
                </div>
            </div>
            
            {isBracketFarFromCenter && (
                <div className="bracket-nav-group">
                    <div className="bracket-nav-row">
                        <button 
                            className="bracket-nav-icon-button bracket-find-button"
                            onClick={handleFindBracket}
                            title="–ù–∞–π—Ç–∏ —Å–µ—Ç–∫—É"
                        >
                            <span className="bracket-nav-icon">üîç</span>
                        </button>
                        
                        <div className="bracket-direction-indicator" title="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Å–µ—Ç–∫–µ">
                            {getBracketDirection}
                        </div>
                    </div>
                </div>
            )}

            <div className="bracket-nav-group">
                <div className="bracket-position-display">
                    <div className="bracket-coordinates">
                        X: {Math.round(position.x)} Y: {Math.round(position.y)}
                    </div>
                    {Math.abs(position.x) > 1000 || Math.abs(position.y) > 1000 ? (
                        <div className="bracket-distance-warning">
                            –°–µ—Ç–∫–∞ –¥–∞–ª–µ–∫–æ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
                        </div>
                    ) : null}
                </div>
                <div className="bracket-nav-hint">
                    Ctrl + –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –¥–ª—è –∑—É–º–∞
                    <br />
                    –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                </div>
            </div>
        </div>
    );

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    if (tournament?.bracket_type === 'double_elimination') {
        // –†–µ–Ω–¥–µ—Ä Double Elimination
        return (
            <div 
                className={`bracket-renderer-container bracket-double-elimination ${isDragging ? 'dragging' : ''}`} 
                ref={containerRef}
            >
                {renderNavigationPanel()}
                
                <div 
                    className="bracket-renderer"
                    ref={rendererRef}
                    style={{ 
                        transform: `translate(${position.x}px, ${position.y}px) scale(${zoom})`,
                        transformOrigin: 'top left'
                    }}
                >
                    {/* Winners Bracket */}
                    {groupedMatches.winners && Object.keys(groupedMatches.winners).length > 0 && (
                        <div className="bracket-winners-section">
                            <div className="bracket-section-title">üèÜ Winners Bracket</div>
                            <div className="bracket-rounds-container">
                                {Object.entries(groupedMatches.winners)
                                    .sort(([a], [b]) => parseInt(a) - parseInt(b))
                                    .map(([round, matches]) => {
                                        const context = getRoundContext(parseInt(round), matches, 'winner');
                                        const roundName = tournamentFormat.getRoundName(parseInt(round), context);
                                        return renderDoubleEliminationRound(round, matches, 'winner', roundName);
                                    })}
                            </div>
                        </div>
                    )}
                    
                    {/* Losers Bracket */}
                    {groupedMatches.losers && Object.keys(groupedMatches.losers).length > 0 && (
                        <div className="bracket-losers-section">
                            <div className="bracket-section-title">ü•à Losers Bracket</div>
                            <div className="bracket-rounds-container">
                                {Object.entries(groupedMatches.losers)
                                    .sort(([a], [b]) => parseInt(a) - parseInt(b))
                                    .map(([round, matches]) => {
                                        const context = getRoundContext(parseInt(round), matches, 'loser');
                                        const roundName = tournamentFormat.getRoundName(parseInt(round), context);
                                        return renderDoubleEliminationRound(round, matches, 'loser', roundName);
                                    })}
                            </div>
                        </div>
                    )}
                    
                    {/* Grand Final */}
                    {groupedMatches.grandFinal && groupedMatches.grandFinal.length > 0 && (
                        <div className="bracket-grand-final-section">
                            <div className="bracket-section-title">üèÅ Grand Final</div>
                            <div className="bracket-rounds-container">
                                <div className="bracket-round-column has-single-match">
                                    <div className="bracket-round-header bracket-grand-final-header">
                                        Grand Final
                                    </div>
                                    <div className="bracket-matches-list single-match">
                                        {groupedMatches.grandFinal.map(match => (
                                            <div
                                                key={match.id}
                                                className="bracket-match-container"
                                                data-match-type={match.bracket_type}
                                            >
                                                <MatchCard
                                                    match={match}
                                                    tournament={tournament}
                                                    onEditMatch={onEditMatch}
                                                    canEditMatches={canEditMatches}
                                                    onMatchClick={onMatchClick}
                                                    matchType={match.bracket_type}
                                                />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        );
    }
    
    // –†–µ–Ω–¥–µ—Ä Single Elimination
    return (
        <div 
            className={`bracket-renderer-container bracket-single-elimination ${isDragging ? 'dragging' : ''}`} 
            ref={containerRef}
        >
            {renderNavigationPanel()}
            
            <div 
                className="bracket-renderer"
                ref={rendererRef}
                style={{ 
                    transform: `translate(${position.x}px, ${position.y}px) scale(${zoom})`,
                    transformOrigin: 'top left'
                }}
            >
                <div className="bracket-rounds-container">
                    {Object.entries(groupedMatches)
                        .sort(([a], [b]) => parseInt(a) - parseInt(b))
                        .map(([round, roundData]) => {
                            const context = getRoundContext(parseInt(round), roundData);
                            const roundName = tournamentFormat.getRoundName(parseInt(round), context);
                            return renderSingleEliminationRound(round, roundData, roundName);
                        })}
                </div>
            </div>
        </div>
    );
};

// MatchCard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bracket_type –∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–µ—Ç–æ–∫
const MatchCard = ({ match, tournament, onEditMatch, canEditMatches, onMatchClick, customLabel, matchType = 'regular' }) => {
    const getBracketTypeStyle = () => {
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
        if (match.bracket_type === 'placement' || match.is_third_place_match || matchType === 'third-place') {
            return 'bracket-match-card-third-place';
        }
        
        if (matchType === 'final') {
            return 'bracket-match-card-final';
        }
        
        switch (match.bracket_type) {
            case 'winner':
                return 'bracket-match-card-winner';
            case 'loser':
                return 'bracket-match-card-loser';
            case 'grand_final':
            case 'grand_final_reset':
                return 'bracket-match-card-grand-final';
            default:
                return 'bracket-match-card-single';
        }
    };

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞
    const getMatchTitle = () => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –º–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (customLabel) {
            return customLabel;
        }
        
        // –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
        if (match.bracket_type === 'placement' || match.is_third_place_match) {
            return '–ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ';
        }
        
        // Grand Final
        if (match.bracket_type === 'grand_final') {
            return 'Grand Final';
        }
        
        if (match.bracket_type === 'grand_final_reset') {
            return 'Grand Final Reset';
        }
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á: match_number === 1 –∏ –ù–ï –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
        if (match.match_number === 1 && match.bracket_type !== 'placement' && !match.is_third_place_match) {
            return '–§–∏–Ω–∞–ª';
        }
        
        // –û–±—ã—á–Ω—ã–µ –º–∞—Ç—á–∏
        return `–ú–∞—Ç—á #${match.match_number || match.id}`;
    };

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const getParticipantData = (participantIndex) => {
        const participants = match.participants || [];
        const participant = participants[participantIndex];
        
        if (!participant) {
            return {
                name: 'TBD',
                score: null,
                isWinner: false,
                status: 'NO_SHOW'
            };
        }
        
        // üîß –£–õ–£–ß–®–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ TBD
        const isTBD = !participant.id || participant.id === 'tbd' || participant.name === 'TBD';
        
        return {
            name: participant.name || 'TBD',
            score: participant.score !== null && participant.score !== undefined ? participant.score : participant.resultText,
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: TBD –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
            isWinner: !isTBD && participant.isWinner,
            status: participant.status || 'PLAYED'
        };
    };

    const participant1 = getParticipantData(0);
    const participant2 = getParticipantData(1);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞
    const getMatchStatus = () => {
        if (match.state === 'DONE' || match.state === 'SCORE_DONE') {
            return 'completed';
        }
        if (participant1.name !== 'TBD' && participant2.name !== 'TBD') {
            return 'ready';
        }
        return 'pending';
    };

    const matchStatus = getMatchStatus();
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –º–∞—Ç—á
    const handleMatchClick = (e) => {
        e.stopPropagation();
        if (onMatchClick) {
            onMatchClick(match);
        }
    };

    return (
        <div 
            className={`bracket-match-card ${getBracketTypeStyle()}`}
            onClick={handleMatchClick}
            style={{ cursor: onMatchClick ? 'pointer' : 'default' }}
        >
            <div className="bracket-match-info">
                <span className="bracket-match-title">{getMatchTitle()}</span>
                <div className="bracket-match-indicators">
                    {(match.bracket_type === 'placement' || match.is_third_place_match) && (
                        <span className="bracket-type-indicator">ü•â</span>
                    )}
                    {(match.bracket_type === 'grand_final' || match.bracket_type === 'grand_final_reset') && (
                        <span className="bracket-type-indicator">üèÜ</span>
                    )}
                    {matchType === 'final' && (
                        <span className="bracket-type-indicator">üèÜ</span>
                    )}
                    <span className="bracket-match-number">#{match.match_number || match.id}</span>
                </div>
            </div>
            
            <div className="bracket-match-participants">
                <div className={`bracket-participant ${
                    participant1.isWinner ? 'winner' : 
                    (participant1.name === 'TBD' ? 'tbd' : '')
                }`}>
                    <span className="bracket-participant-name">
                        {participant1.name}
                    </span>
                    <span className="bracket-participant-score">{participant1.score}</span>
                </div>
                <div className="bracket-vs-separator">VS</div>
                <div className={`bracket-participant ${
                    participant2.isWinner ? 'winner' : 
                    (participant2.name === 'TBD' ? 'tbd' : '')
                }`}>
                    <span className="bracket-participant-name">
                        {participant2.name}
                    </span>
                    <span className="bracket-participant-score">{participant2.score}</span>
                </div>
            </div>
            
            <div className="bracket-match-status">
                <span className={`bracket-status-badge bracket-status-${matchStatus}`}>
                    {matchStatus === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                     matchStatus === 'ready' ? '–ì–æ—Ç–æ–≤' : '–û–∂–∏–¥–∞–Ω–∏–µ'}
                </span>
            </div>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é */}
            {canEditMatches && matchStatus === 'ready' && (
                <div className="bracket-edit-match-indicator">
                    <button 
                        className="bracket-edit-match-btn"
                        onClick={(e) => {
                            e.stopPropagation();
                            onEditMatch && onEditMatch(match);
                        }}
                    >
                        ‚úèÔ∏è
                    </button>
                </div>
            )}
        </div>
    );
};

export default BracketRenderer;