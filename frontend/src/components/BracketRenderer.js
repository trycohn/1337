// frontend/src/components/BracketRenderer.js
import React, { useRef, useMemo } from 'react';
import './BracketRenderer.css';
import { formatManager } from '../utils/tournament/bracketFormats';
import { SingleEliminationFormat } from '../utils/tournament/formats/SingleEliminationFormat';
import { DoubleEliminationFormat } from '../utils/tournament/formats/DoubleEliminationFormat';
import useDragAndZoom from '../hooks/useDragAndZoom';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
formatManager.register(new SingleEliminationFormat());
formatManager.register(new DoubleEliminationFormat());

const BracketRenderer = ({ 
    games, 
    tournament, 
    onEditMatch, 
    canEditMatches, 
    selectedMatch, 
    setSelectedMatch, 
    format, 
    onMatchClick,
    readOnly = false,
    focusMatchId = null
}) => {
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º games –≤–º–µ—Å—Ç–æ matches
    const matches = useMemo(() => games || [], [games]);
    const rendererRef = useRef(null);
    const winnersSectionRef = useRef(null);
    const losersSectionRef = useRef(null);
    const grandFinalSectionRef = useRef(null);
    
    // üÜï –°–û–í–†–ï–ú–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–Ø –ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø
    const {
        isDragging,
        zoomIn,
        zoomOut,
        resetAll,
        centerView,
        canZoomIn,
        canZoomOut,
        handlers
    } = useDragAndZoom({
        initialPosition: { x: 0, y: 0 },
        initialZoom: 1,
        minZoom: 0.3,
        maxZoom: 3,
        zoomStep: 0.05,
        requireCtrl: false,
        excludeSelectors: [
            '.bracket-navigation-panel',
            '.bracket-nav-icon-button',
            '.bracket-match-card',
            '.bracket-edit-match-btn'
        ],
        onDragStart: (data) => {
            // eslint-disable-next-line no-console
            console.log('üéØ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è:', data.position);
        },
        onDragMove: (data) => {
            if (data.event.timeStamp % 10 < 1) {
                // eslint-disable-next-line no-console
                console.log('üìç –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ:', data.position);
            }
        },
        onDragEnd: (data) => {
            // eslint-disable-next-line no-console
            console.log('üéØ –ö–æ–Ω–µ—Ü –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è:', data.position);
        },
        onZoomChange: (data) => {
            // eslint-disable-next-line no-console
            console.log('üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞:', data.zoom);
        }
    });

    const effectiveHandlers = readOnly ? {} : handlers;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
    const tournamentFormat = useMemo(() => {
        const formatType = tournament?.bracket_type || 'single_elimination';
        return formatManager.getFormat(formatType);
    }, [tournament?.bracket_type]);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–≥–∏–Ω–æ–≤
    const groupedMatches = useMemo(() => {
        if (!matches || matches.length === 0) return {};
        return tournamentFormat.groupMatches(matches);
    }, [matches, tournamentFormat]);

    // –£–±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —à–∏—Ä–∏–Ω —Å–µ–∫—Ü–∏–π
    
    // –ü—Ä–µ–¥—Ä–∞—Å—á–µ—Ç –º–∞—Ç—á–µ–π –∑–∞ 3-–µ –º–µ—Å—Ç–æ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ (—Ö—É–∫–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–æ —Ä–∞–Ω–Ω–∏—Ö return)
    const thirdPlaceMatches = useMemo(
        () => (matches || []).filter(m => m.bracket_type === 'placement' || m.is_third_place_match),
        [matches]
    );

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç—ã–µ –º–∞—Ç—á–∏
    if (!matches || matches.length === 0) {
        return (
            <div className="bracket-renderer-container">
                <div className="bracket-empty-message">
                    üéØ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
                </div>
            </div>
        );
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—É–Ω–¥–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const getRoundContext = (round, roundData, bracketType) => {
        const groupedRounds = Object.keys(groupedMatches[bracketType] || {}).map(Number);
        const totalRounds = Math.max(...groupedRounds);
        const matchesInRound = Array.isArray(roundData) ? roundData.length : Object.keys(roundData).length;
        const isLastRound = round === totalRounds;
        
        return {
            bracketType,
            totalRounds,
            matchesInRound,
            isLastRound,
            currentRound: round,
            allRounds: groupedRounds
        };
    };

    // –†–µ–Ω–¥–µ—Ä —Ä–∞—É–Ω–¥–∞ –¥–ª—è Single Elimination
    const renderSingleEliminationRound = (round, roundData, roundName) => {
        const matchesArray = Array.isArray(roundData) ? roundData : Object.values(roundData).flat();
        const matchesCount = matchesArray.length;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        let matchesClass = 'few-matches';
        let columnClass = 'has-few-matches';
        
        if (matchesCount === 1) {
            matchesClass = 'single-match';
            columnClass = 'has-single-match';
        } else if (matchesCount >= 4) {
            matchesClass = 'many-matches';
            columnClass = 'has-many-matches';
        }
        
        return (
            <div key={round} className={`bracket-round-column ${columnClass}`}>
                <div className="bracket-round-header">
                    {roundName}
                </div>
                <div className={`bracket-matches-list ${matchesClass}`}>
                    {matchesArray.map(match => (
                        <div
                            key={match.id}
                            className="bracket-match-container"
                            data-match-id={match.id}
                            data-focused={focusMatchId && String(focusMatchId) === String(match.id) ? 'true' : 'false'}
                        >
                            <MatchCard
                                match={match}
                                tournament={tournament}
                                onEditMatch={onEditMatch}
                                canEditMatches={canEditMatches}
                                onMatchClick={onMatchClick}
                                customLabel={match.bracket_type === 'placement' ? '3rd Place' : null}
                                matchType={match.bracket_type}
                            />
                        </div>
                    ))}
                </div>
            </div>
        );
    };

    // –†–µ–Ω–¥–µ—Ä —Ä–∞—É–Ω–¥–∞ –¥–ª—è Double Elimination —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç–∏–ª–µ–π
    const renderDoubleEliminationRound = (round, matches, bracketType, roundName, context) => {
        const matchesCount = matches.length;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        let matchesClass = 'few-matches';
        let columnClass = 'has-few-matches';
        
        if (matchesCount === 1) {
            matchesClass = 'single-match';
            columnClass = 'has-single-match';
        } else if (matchesCount >= 4) {
            matchesClass = 'many-matches';
            columnClass = 'has-many-matches';
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—É–Ω–¥–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        let roundType = 'regular';
        if (bracketType === 'loser' && context?.isLastRound) {
            roundType = 'losers-small-final';
        } else if (bracketType === 'grand_final') {
            roundType = 'grand-final';
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CSS –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞—É–Ω–¥–∞
        let headerClass = 'bracket-round-header';
        switch (bracketType) {
            case 'winner':
                headerClass += ' bracket-winners-bracket-header';
                break;
            case 'loser':
                headerClass += ' bracket-losers-bracket-header';
                break;
            case 'grand_final':
                headerClass += ' bracket-grand-final-bracket-header';
                break;
            default:
                headerClass += ' bracket-default-bracket-header';
        }
        
        return (
            <div key={`${bracketType}-${round}`} className={`bracket-round-column ${columnClass}`}>
                <div 
                    className={headerClass}
                    data-round-type={roundType}
                >
                    {roundName}
                </div>
                <div className={`bracket-matches-list ${matchesClass}`}>
                    {matches.map(match => (
                        <div
                            key={match.id}
                            className="bracket-match-container"
                            data-match-type={match.bracket_type}
                            data-match-id={match.id}
                            data-focused={focusMatchId && String(focusMatchId) === String(match.id) ? 'true' : 'false'}
                        >
                            <MatchCard
                                match={match}
                                tournament={tournament}
                                onEditMatch={onEditMatch}
                                canEditMatches={canEditMatches}
                                onMatchClick={onMatchClick}
                                matchType={match.bracket_type}
                                customLabel={roundType === 'losers-small-final' ? 'Small Final' : null}
                            />
                        </div>
                    ))}
                </div>
            </div>
        );
    };

    // –†–µ–Ω–¥–µ—Ä –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const renderNavigationPanel = () => (
        readOnly ? null : (
            <div className="bracket-navigation-panel">
                <button 
                    className="bracket-nav-icon-button"
                    onClick={zoomOut}
                    disabled={!canZoomOut}
                    title="–£–º–µ–Ω—å—à–∏—Ç—å –º–∞—Å—à—Ç–∞–±"
                >
                    <span className="bracket-nav-icon">‚àí</span>
                </button>

                <button 
                    className="bracket-nav-icon-button"
                    onClick={zoomIn}
                    disabled={!canZoomIn}
                    title="–£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Å—à—Ç–∞–±"
                >
                    <span className="bracket-nav-icon">+</span>
                </button>

                <button 
                    className="bracket-nav-icon-button"
                    onClick={resetAll}
                    title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
                >
                    <span className="bracket-nav-icon">‚åÇ</span>
                </button>

                <button 
                    className="bracket-nav-icon-button"
                    onClick={centerView}
                    title="–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å"
                >
                    <span className="bracket-nav-icon">‚äô</span>
                </button>

                <button 
                    className="bracket-nav-icon-button"
                    onClick={() => {
                        const matchParam = focusMatchId ? String(focusMatchId) : (selectedMatch ? (typeof selectedMatch === 'object' ? selectedMatch.id : selectedMatch) : null);
                        const url = `/tournaments/${tournament?.id}/bracket${matchParam ? `?match=${matchParam}` : ''}`;
                        window.open(url, '_blank', 'noopener');
                    }}
                    title="–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ"
                >
                    <span className="bracket-nav-icon">‚Üó</span>
                </button>
            </div>
        )
    );

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const isDoubleElimination = tournament?.bracket_type === 'double_elimination' || 
                               tournament?.bracket_type === 'doubleElimination' ||
                               tournament?.bracket_type === 'DOUBLE_ELIMINATION' ||
                               (groupedMatches.losers && Object.keys(groupedMatches.losers).length > 0) ||
                               (groupedMatches.grandFinal && groupedMatches.grandFinal.length > 0);
    
    if (isDoubleElimination) {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–∫–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ (Grand Final/Reset –∏ 3-–µ –º–µ—Å—Ç–æ)
        const grandFinalMatches = Array.isArray(groupedMatches.grandFinal) ? groupedMatches.grandFinal : [];

        // –†–µ–Ω–¥–µ—Ä Double Elimination —Å Winners + –±–æ–∫–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–ø—Ä–∞–≤–∞
        return (
            <div 
                className={`bracket-renderer-container bracket-double-elimination ${readOnly ? 'bracket-readonly' : ''} ${isDragging ? 'dragging' : ''}`}
            >
                {renderNavigationPanel()}
                
                <div 
                    className={`bracket-renderer ${readOnly ? 'bracket-renderer-static' : ''}`}
                    ref={rendererRef}
                    {...effectiveHandlers}
                >
                    <div className="bracket-upper-and-finals-row">
                        {/* ===== UPPER BRACKET (WINNERS) ===== */}
                        {groupedMatches.winners && Object.keys(groupedMatches.winners).length > 0 && (
                            <div 
                                className="bracket-render-upper-section"
                                ref={winnersSectionRef}
                            >
                                <div className="bracket-render-section-header">
                                    <div className="bracket-render-section-title bracket-render-winners-title">üèÜ Winners Bracket</div>
                                    <div className="bracket-render-section-subtitle bracket-render-winners-subtitle">–í–µ—Ä—Ö–Ω—è—è —Å–µ—Ç–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞</div>
                                </div>
                                <div className="bracket-rounds-container bracket-render-winners-container">
                                    {Object.entries(groupedMatches.winners)
                                        .sort(([a], [b]) => parseInt(a) - parseInt(b))
                                        .map(([round, matches]) => {
                                            const context = getRoundContext(parseInt(round), matches, 'winner');
                                            const roundName = tournamentFormat.getRoundName(parseInt(round), context);
                                            return renderDoubleEliminationRound(round, matches, 'winner', roundName, context);
                                        })}
                                </div>
                            </div>
                        )}

                        {(grandFinalMatches.length > 0 || (thirdPlaceMatches && thirdPlaceMatches.length > 0)) && (
                            <div className="bracket-side-finals-column">
                                {/* ===== GRAND FINAL(S) ===== */}
                                {grandFinalMatches.length > 0 && (
                                    <div className="bracket-grand-final-section" ref={grandFinalSectionRef}>
                                        <div className="bracket-render-section-header">
                                            <div className="bracket-render-section-title bracket-render-grand-final-title">üèÖ Grand Final</div>
                                            <div className="bracket-render-section-subtitle bracket-render-grand-final-subtitle">–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ</div>
                                        </div>
                                        <div className="bracket-rounds-container bracket-render-grand-final-container" style={{ justifyContent: 'center' }}>
                                            {grandFinalMatches.map((match) => {
                                                const context = getRoundContext(1, [match], 'grand_final');
                                                const roundName = match.bracket_type === 'grand_final_reset' ? 'Grand Final Triumph' : 'Grand Final';
                                                return renderDoubleEliminationRound(1, [match], 'grand_final', roundName, context);
                                            })}
                                        </div>
                                    </div>
                                )}

                                {/* ===== THIRD PLACE (if exists) ===== */}
                                {thirdPlaceMatches && thirdPlaceMatches.length > 0 && (
                                    <div className="bracket-third-place-section">
                                        <div className="bracket-render-section-header">
                                            <div className="bracket-render-section-title">ü•â 3rd Place</div>
                                            <div className="bracket-render-section-subtitle">–ú–∞—Ç—á –∑–∞ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ</div>
                                        </div>
                                        <div className="bracket-rounds-container" style={{ justifyContent: 'center' }}>
                                            {renderDoubleEliminationRound(1, thirdPlaceMatches, 'winner', '–ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ', { isLastRound: true })}
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>
                    
                    {/* ===== LOWER BRACKET (LOSERS) ===== */}
                    {groupedMatches.losers && Object.keys(groupedMatches.losers).length > 0 && (
                        <div 
                            className="bracket-render-lower-section"
                            ref={losersSectionRef}
                        >
                            <div className="bracket-render-section-header">
                                <div className="bracket-render-section-title bracket-render-losers-title">üíÄ Losers Bracket</div>
                                <div className="bracket-render-section-subtitle bracket-render-losers-subtitle">–ù–∏–∂–Ω—è—è —Å–µ—Ç–∫–∞ –Ω–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ</div>
                            </div>
                            <div className="bracket-rounds-container bracket-render-losers-container">
                                {Object.entries(groupedMatches.losers)
                                    .sort(([a], [b]) => parseInt(a) - parseInt(b))
                                    .map(([round, matches]) => {
                                        const context = getRoundContext(parseInt(round), matches, 'loser');
                                        const roundName = tournamentFormat.getRoundName(parseInt(round), context);
                                        return renderDoubleEliminationRound(round, matches, 'loser', roundName, context);
                                    })}
                            </div>
                        </div>
                    )}
                    
                    {/* Grand Final –∏ 3-–µ –º–µ—Å—Ç–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –±–æ–∫–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É —Å–ø—Ä–∞–≤–∞ –æ—Ç Winners */}
                </div>
            </div>
        );
    }
    
    // –†–µ–Ω–¥–µ—Ä Single Elimination
    return (
        <div 
            className={`bracket-renderer-container bracket-single-elimination ${readOnly ? 'bracket-readonly' : ''} ${isDragging ? 'dragging' : ''}`}
        >
            {renderNavigationPanel()}
            
            <div 
                className={`bracket-renderer ${readOnly ? 'bracket-renderer-static' : ''}`}
                ref={rendererRef}
                {...effectiveHandlers}
            >
                <div className="bracket-rounds-container">
                    {Object.entries(groupedMatches)
                        .sort(([a], [b]) => parseInt(a) - parseInt(b))
                        .map(([round, roundData]) => {
                            const context = getRoundContext(parseInt(round), roundData, 'regular');
                            const roundName = tournamentFormat.getRoundName(parseInt(round), context);
                            return renderSingleEliminationRound(round, roundData, roundName);
                        })}
                </div>
            </div>
        </div>
    );
};

// MatchCard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bracket_type –∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–µ—Ç–æ–∫
const MatchCard = ({ match, tournament, onEditMatch, canEditMatches, onMatchClick, customLabel, matchType = 'regular' }) => {
    const getBracketTypeStyle = () => {
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
        if (match.bracket_type === 'placement' || match.is_third_place_match || matchType === 'third-place') {
            return 'bracket-match-card-third-place';
        }
        
        // üÜï –§–ò–ù–ê–õ–¨–ù–´–ô –ú–ê–¢–ß (–º–∞—Ç—á –∑–∞ 1-–µ –º–µ—Å—Ç–æ)
        if (match.bracket_type === 'final' || matchType === 'final') {
            return 'bracket-match-card-final';
        }
        
        switch (match.bracket_type) {
            case 'winner':
                return 'bracket-match-card-winner';
            case 'loser':
                return 'bracket-match-card-loser';
            case 'grand_final':
            case 'grand_final_reset':
                return 'bracket-match-card-grand-final';
            default:
                return 'bracket-match-card-single';
        }
    };

    const getMatchTitle = () => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –º–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (customLabel) {
            return customLabel;
        }
        
        // üÜï –§–ò–ù–ê–õ–¨–ù–´–ô –ú–ê–¢–ß (–º–∞—Ç—á –∑–∞ 1-–µ –º–µ—Å—Ç–æ)
        if (match.bracket_type === 'final' || matchType === 'final') {
            return '–ú–∞—Ç—á –∑–∞ 1-–µ –º–µ—Å—Ç–æ';
        }
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
        if (match.bracket_type === 'placement' || match.is_third_place_match) {
            return '–ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ';
        }
        
        // –î–ª—è grand final –º–∞—Ç—á–µ–π (Double Elimination)
        if (match.bracket_type === 'grand_final') {
            return '–ú–∞—Ç—á –∑–∞ 1-–µ –º–µ—Å—Ç–æ'; // üÜï –ò–∑–º–µ–Ω–µ–Ω–æ —Å "Grand Final"
        }
        
        if (match.bracket_type === 'grand_final_reset') {
            return 'Grand Final Triumph'; // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: –±–æ–ª–µ–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è reset –º–∞—Ç—á–∞
        }
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ç—á–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
        const displayNumber = match.tournament_match_number || match.match_number || match.id;
        return `–ú–∞—Ç—á ${displayNumber}`;
    };

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const getParticipantData = (participantIndex) => {
        const participants = match.participants || [];
        const participant = participants[participantIndex];
        
        if (!participant) {
            return {
                name: 'TBD',
                score: null,
                isWinner: false,
                status: 'NO_SHOW'
            };
        }
        
        // üîß –£–õ–£–ß–®–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ TBD
        const isTBD = !participant.id || participant.id === 'tbd' || participant.name === 'TBD';
        
        // üÜï –ù–û–í–û–ï: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
        let displayScore = participant.score !== null && participant.score !== undefined ? participant.score : participant.resultText;
        
        // –ï—Å–ª–∏ –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –∏–≥—Ä–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç—ã
        if (match.maps_data && Array.isArray(match.maps_data) && match.maps_data.length === 1) {
            const mapData = match.maps_data[0];
            if (mapData && (mapData.score1 !== null || mapData.score2 !== null)) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–∞—Ä—Ç—ã
                displayScore = participantIndex === 0 ? 
                    (mapData.score1 !== null ? mapData.score1 : displayScore) : 
                    (mapData.score2 !== null ? mapData.score2 : displayScore);
            }
        }
        
        return {
            name: participant.name || 'TBD',
            score: displayScore,
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: TBD –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
            isWinner: !isTBD && participant.isWinner,
            status: participant.status || 'PLAYED'
        };
    };

    const participant1 = getParticipantData(0);
    const participant2 = getParticipantData(1);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞
    const getMatchStatus = () => {
        // üÜï –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –ë–î –¥–ª—è –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        if (match.status === 'completed' || match.state === 'DONE' || match.state === 'SCORE_DONE') {
            return 'completed';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞ (–æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ BYE vs BYE)
        if (participant1.name !== 'TBD' && participant2.name !== 'TBD' && 
            !(participant1.name === 'BYE' && participant2.name === 'BYE')) {
            return 'ready';
        }
        
        return 'pending';
    };

    const matchStatus = getMatchStatus();
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –º–∞—Ç—á
    const handleMatchClick = (e) => {
        e.stopPropagation();
        if (onMatchClick) {
            onMatchClick(match);
        }
    };

    return (
        <div 
            className={`bracket-match-card ${getBracketTypeStyle()}`}
            onClick={handleMatchClick}
            style={{ cursor: onMatchClick ? 'pointer' : 'default' }}
        >
            <div className="bracket-match-info">
                <span className="bracket-match-title">{getMatchTitle()}</span>
                <div className="bracket-match-indicators">
                    {(match.bracket_type === 'placement' || match.is_third_place_match) && (
                        <span className="bracket-type-indicator">ü•â</span>
                    )}
                    {(match.bracket_type === 'final' || matchType === 'final') && (
                        <span className="bracket-type-indicator">üèÜ</span>
                    )}
                    {(match.bracket_type === 'grand_final' || match.bracket_type === 'grand_final_reset') && (
                        <span className="bracket-type-indicator">üèÜ</span>
                    )}
                    <span className="bracket-match-number">#{match.tournament_match_number || match.match_number || match.id}</span>
                </div>
            </div>
            
                <div className="bracket-match-participants">
                <div className={`bracket-participant ${participant1.name === 'TBD' ? 'tbd' : ''} ${participant1.isWinner ? 'winner' : ''} ${participant1.name && participant1.name.length > 18 ? 'score-tight' : ''}`}>
                    <span className="bracket-participant-name">{participant1.name}</span>
                    <span className="bracket-participant-score">{participant1.score || '-'}</span>
                </div>
                
                <div className={`bracket-participant ${participant2.name === 'TBD' ? 'tbd' : ''} ${participant2.isWinner ? 'winner' : ''} ${participant2.name && participant2.name.length > 18 ? 'score-tight' : ''}`}>
                    <span className="bracket-participant-name">{participant2.name}</span>
                    <span className="bracket-participant-score">{participant2.score || '-'}</span>
                </div>
            </div>
            
            <div className="bracket-match-status">
                <span className={`bracket-status-badge bracket-status-${matchStatus}`}>
                    {matchStatus === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : 
                     matchStatus === 'ready' ? '–ì–æ—Ç–æ–≤' : '–û–∂–∏–¥–∞–Ω–∏–µ'}
                </span>
            </div>
            
            {canEditMatches && matchStatus === 'ready' && (
                <div className="bracket-edit-match-indicator">
                    <button 
                        className="bracket-edit-match-btn"
                        onClick={(e) => {
                            e.stopPropagation();
                            onEditMatch && onEditMatch(match);
                        }}
                    >
                        ‚úèÔ∏è
                    </button>
                </div>
            )}
        </div>
    );
};

export default BracketRenderer;