// frontend/src/components/BracketRenderer.js
import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';
import './BracketRenderer.css';
import { safeParseBracketId } from '../utils/safeParseInt';

const BracketRenderer = ({ games, tournament, onEditMatch, canEditMatches, selectedMatch, setSelectedMatch, format, onMatchClick }) => {
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º games –≤–º–µ—Å—Ç–æ matches
    const matches = games || [];
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Ç—á–µ–π –ø–æ —Ç–∏–ø–∞–º bracket –¥–ª—è double elimination
    const groupedMatches = useMemo(() => {
        if (!matches || matches.length === 0) return { single: [], winners: [], losers: [], grandFinal: [] };
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ undefined –∏ bracket_type
        const safeTournament = tournament || {};
        const safeMatches = matches.filter(m => m && typeof m === 'object' && m.id);
        
        if (safeTournament.bracket_type === 'double_elimination') {
            return {
                winners: safeMatches.filter(m => (m.bracket_type || 'winner') === 'winner').sort((a, b) => a.round - b.round || a.match_number - b.match_number),
                losers: safeMatches.filter(m => (m.bracket_type || 'winner') === 'loser').sort((a, b) => a.round - b.round || a.match_number - b.match_number),
                grandFinal: safeMatches.filter(m => {
                    const bracketType = m.bracket_type || 'winner';
                    return bracketType === 'grand_final' || bracketType === 'grand_final_reset';
                }).sort((a, b) => a.match_number - b.match_number)
            };
        } else {
            return {
                single: safeMatches.sort((a, b) => a.round - b.round || a.match_number - b.match_number)
            };
        }
    }, [matches, tournament?.bracket_type]);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç—ã–µ –º–∞—Ç—á–∏
    if (!matches || matches.length === 0) {
        return (
            <div className="bracket-renderer">
                <div className="empty-bracket-message">
                    üéØ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
                </div>
            </div>
        );
    }

    // üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ù–ê–ó–í–ê–ù–ò–Ø –†–ê–£–ù–î–ê
    const getRoundName = (round, totalRounds, participantCount) => {
        if (round === -1) return '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥';
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤ (–æ–±—ã—á–Ω–æ 4-8 –∫–æ–º–∞–Ω–¥)
        if (participantCount <= 8) {
            if (totalRounds === 1) return '–§–∏–Ω–∞–ª';
            if (totalRounds === 2) {
                return round === 1 ? '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª' : '–§–∏–Ω–∞–ª';
            }
            if (totalRounds === 3) {
                switch (round) {
                    case 1: return '–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª';
                    case 2: return '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª';
                    case 3: return '–§–∏–Ω–∞–ª';
                }
            }
        }
        
        // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–Ω–∞–ª–∞
        const roundsFromEnd = totalRounds - round;
        
        switch (roundsFromEnd) {
            case 0:
                return '–§–∏–Ω–∞–ª';
            case 1:
                return '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª';
            case 2:
                return '–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª';
            case 3:
                return '1/8 —Ñ–∏–Ω–∞–ª–∞';
            case 4:
                return '1/16 —Ñ–∏–Ω–∞–ª–∞';
            case 5:
                return '1/32 —Ñ–∏–Ω–∞–ª–∞';
            case 6:
                return '1/64 —Ñ–∏–Ω–∞–ª–∞';
            default:
                // –î–ª—è –æ—á–µ–Ω—å —Ä–∞–Ω–Ω–∏—Ö —Ä–∞—É–Ω–¥–æ–≤ –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
                return round === 1 ? '–ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥' : `–†–∞—É–Ω–¥ ${round}`;
        }
    };

    // –†–µ–Ω–¥–µ—Ä single elimination
    const renderSingleElimination = () => {
        if (groupedMatches.single.length === 0) {
            return (
                <div className="empty-bracket-message">
                    üéØ –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                </div>
            );
        }

        const rounds = groupedMatches.single.reduce((acc, match) => {
            if (!acc[match.round]) acc[match.round] = [];
            acc[match.round].push(match);
            return acc;
        }, {});

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const totalRounds = Math.max(...Object.keys(rounds).map(Number));
        const participantCount = tournament?.participants_count || 0;

        return (
            <div className="bracket-single-elimination">
                {Object.entries(rounds).map(([round, roundMatches]) => (
                    <div key={round} className="bracket-round">
                        <h3 className="round-header">
                            {getRoundName(parseInt(round), totalRounds, participantCount)}
                        </h3>
                        <div className="round-matches">
                            {roundMatches.map(match => (
                                <MatchCard
                                    key={match.id}
                                    match={match}
                                    tournament={tournament}
                                    onEditMatch={onEditMatch}
                                    canEditMatches={canEditMatches}
                                    onMatchClick={onMatchClick}
                                />
                            ))}
                        </div>
                    </div>
                ))}
            </div>
        );
    };

    // –†–µ–Ω–¥–µ—Ä double elimination
    const renderDoubleElimination = () => {
        const winnersRounds = groupedMatches.winners.reduce((acc, match) => {
            if (!acc[match.round]) acc[match.round] = [];
            acc[match.round].push(match);
            return acc;
        }, {});

        const losersRounds = groupedMatches.losers.reduce((acc, match) => {
            if (!acc[match.round]) acc[match.round] = [];
            acc[match.round].push(match);
            return acc;
        }, {});

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        const winnersTotalRounds = Object.keys(winnersRounds).length;
        const losersTotalRounds = Object.keys(losersRounds).length;
        const participantCount = tournament?.participants_count || 0;
                                        
        return (
            <div className="bracket-double-elimination">
                {/* Winners Bracket */}
                <div className="winners-bracket">
                    <h2 className="bracket-title">üèÜ Winners Bracket</h2>
                    <div className="bracket-rounds">
                        {Object.entries(winnersRounds).map(([round, roundMatches]) => (
                            <div key={`winner-${round}`} className="bracket-round">
                                <h3 className="round-header">
                                    WR {round}: {getRoundName(parseInt(round), winnersTotalRounds, participantCount)}
                                </h3>
                                <div className="round-matches">
                                    {roundMatches.map(match => (
                                        <MatchCard
                                            key={match.id}
                                            match={match}
                                            tournament={tournament}
                                            onEditMatch={onEditMatch}
                                            canEditMatches={canEditMatches}
                                            onMatchClick={onMatchClick}
                                            bracketType="winner"
                                        />
                                    ))}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>

                {/* Losers Bracket */}
                <div className="losers-bracket">
                    <h2 className="bracket-title">üíî Losers Bracket</h2>
                    <div className="bracket-rounds">
                        {Object.entries(losersRounds).map(([round, roundMatches]) => (
                            <div key={`loser-${round}`} className="bracket-round">
                                <h3 className="round-header">
                                    LR {round}: {getRoundName(parseInt(round), losersTotalRounds, participantCount)}
                                </h3>
                                <div className="round-matches">
                                    {roundMatches.map(match => (
                                        <MatchCard
                                            key={match.id}
                                            match={match}
                                            tournament={tournament}
                                            onEditMatch={onEditMatch}
                                            canEditMatches={canEditMatches}
                                            onMatchClick={onMatchClick}
                                            bracketType="loser"
                                        />
                                    ))}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>

                {/* Grand Final */}
                {groupedMatches.grandFinal.length > 0 && (
                    <div className="grand-final-bracket">
                        <h2 className="bracket-title">üèÅ Grand Final</h2>
                        <div className="grand-final-matches">
                            {groupedMatches.grandFinal.map(match => (
                                <MatchCard
                                    key={match.id}
                                    match={match}
                                    tournament={tournament}
                                    onEditMatch={onEditMatch}
                                    canEditMatches={canEditMatches}
                                    onMatchClick={onMatchClick}
                                    bracketType="grand_final"
                                />
                            ))}
                        </div>
                    </div>
                )}
            </div>
        );
    };

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä
    return (
        <div className="bracket-renderer">
            {/* üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ tournament.bracket_type */}
            {(tournament?.bracket_type || 'single_elimination') === 'double_elimination' ? renderDoubleElimination() : renderSingleElimination()}
        </div>
    );
};

// MatchCard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bracket_type
const MatchCard = ({ match, tournament, onEditMatch, canEditMatches, onMatchClick, bracketType = 'single' }) => {
    const getBracketTypeStyle = () => {
        switch (bracketType) {
            case 'winner':
                return 'match-card-winner';
            case 'loser':
                return 'match-card-loser';
            case 'grand_final':
                return 'match-card-grand-final';
            default:
                return 'match-card-single';
        }
    };

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const getParticipantData = (participantIndex) => {
        if (match.participants && match.participants[participantIndex]) {
            const participant = match.participants[participantIndex];
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: TBD –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
            const isTBD = !participant.name || participant.name === 'TBD';
            return {
                name: participant.name || 'TBD',
                score: participant.resultText || participant.score || 0,
                isWinner: !isTBD && (participant.isWinner || false)
            };
        }
        
        // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if (participantIndex === 0) {
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω
            const teamName = match.team1_name || match.team1_id;
            const isTBD = !teamName || teamName === 'TBD';
            const isWinner = !isTBD && 
                            match.winner_team_id && 
                            match.team1_id && 
                            match.winner_team_id === match.team1_id;
            
            return {
                name: teamName || 'TBD',
                score: match.score1 || 0,
                isWinner: isWinner || false
            };
        } else {
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω
            const teamName = match.team2_name || match.team2_id;
            const isTBD = !teamName || teamName === 'TBD';
            const isWinner = !isTBD && 
                            match.winner_team_id && 
                            match.team2_id && 
                            match.winner_team_id === match.team2_id;
            
            return {
                name: teamName || 'TBD',
                score: match.score2 || 0,
                isWinner: isWinner || false
            };
        }
    };

    const participant1 = getParticipantData(0);
    const participant2 = getParticipantData(1);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞
    const getMatchStatus = () => {
        if (match.state === 'DONE') return 'completed';
        if (match.state === 'READY') return 'ready';
        if (match.state === 'SCHEDULED') return 'pending';
        
        // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if (match.status) return match.status;
        if (match.winner_team_id) return 'completed';
        if (match.team1_id && match.team2_id) return 'ready';
        return 'pending';
    };

    const matchStatus = getMatchStatus();

    return (
        <div 
            className={`match-card ${getBracketTypeStyle()}`}
            onClick={() => onMatchClick && onMatchClick(match)}
            style={{ cursor: onMatchClick ? 'pointer' : 'default' }}
        >
            <div className="match-info">
                <span className="match-number">#{match.match_number || match.id}</span>
                {bracketType !== 'single' && (
                    <span className="bracket-type-indicator">
                        {bracketType === 'winner' && 'üèÜ'}
                        {bracketType === 'loser' && 'üíî'}
                        {bracketType === 'grand_final' && 'üèÅ'}
                    </span>
                )}
            </div>
            
            <div className="match-participants">
                <div className={`participant ${
                    participant1.isWinner ? 'winner' : 
                    (participant1.name === 'TBD' ? 'tbd' : '')
                }`}>
                    <span className="participant-name">
                        {participant1.name}
                    </span>
                    <span className="participant-score">{participant1.score}</span>
                </div>
                <div className="vs-separator">VS</div>
                <div className={`participant ${
                    participant2.isWinner ? 'winner' : 
                    (participant2.name === 'TBD' ? 'tbd' : '')
                }`}>
                    <span className="participant-name">
                        {participant2.name}
                    </span>
                    <span className="participant-score">{participant2.score}</span>
                </div>
            </div>
            
            <div className="match-status">
                <span className={`status-badge status-${matchStatus}`}>
                    {matchStatus === 'pending' && '–û–∂–∏–¥–∞–Ω–∏–µ'}
                    {matchStatus === 'ready' && '–ì–æ—Ç–æ–≤'}
                    {matchStatus === 'in_progress' && '–ò–¥–µ—Ç'}
                    {matchStatus === 'completed' && '–ó–∞–≤–µ—Ä—à–µ–Ω'}
                </span>
            </div>
            
            {onEditMatch && canEditMatches && (
                <button 
                    className="edit-match-btn"
                    onClick={(e) => {
                        e.stopPropagation();
                        onEditMatch(match);
                    }}
                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á"
                >
                    ‚úèÔ∏è
                </button>
            )}
        </div>
    );
};

export default BracketRenderer;