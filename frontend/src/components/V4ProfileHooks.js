// ‚ú® V4 ULTIMATE: –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
import { useState, useEffect } from 'react';
import api from '../axios';

export const useV4ProfileHooks = (user, activeTab) => {
    // V4 —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const [v4EnhancedStats, setV4EnhancedStats] = useState(null);
    const [achievements, setAchievements] = useState([]);
    const [userAchievements, setUserAchievements] = useState([]);
    const [aiAnalysis, setAiAnalysis] = useState(null);
    const [performanceData, setPerformanceData] = useState([]);
    const [leaderboards, setLeaderboards] = useState([]);
    const [currentStreak, setCurrentStreak] = useState(null);
    const [isLoadingV4Stats, setIsLoadingV4Stats] = useState(false);
    const [isLoadingAchievements, setIsLoadingAchievements] = useState(false);
    const [isLoadingAI, setIsLoadingAI] = useState(false);
    const [websocket, setWebsocket] = useState(null);
    const [realTimeUpdates, setRealTimeUpdates] = useState([]);
    const [showAchievementNotification, setShowAchievementNotification] = useState(null);
    const [globalRank, setGlobalRank] = useState(null);
    const [weeklyProgress, setWeeklyProgress] = useState(null);
    const [personalBests, setPersonalBests] = useState({});
    const [v4ActiveView, setV4ActiveView] = useState('overview');

    // üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const initializeWebSocket = () => {
        if (!user?.id) return;
        
        const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';
        const wsUrl = baseUrl.replace('http', 'ws') + '/ws/stats';
        const ws = new WebSocket(wsUrl);
        
        ws.onopen = () => {
            console.log('üöÄ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            ws.send(JSON.stringify({
                type: 'authenticate',
                userId: user.id,
                token: localStorage.getItem('token')
            }));
        };
        
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            handleRealTimeUpdate(data);
        };
        
        ws.onclose = () => {
            console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(initializeWebSocket, 5000);
        };
        
        setWebsocket(ws);
        
        return () => ws.close();
    };
    
    // üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const handleRealTimeUpdate = (data) => {
        switch (data.type) {
            case 'stats_updated':
                setRealTimeUpdates(prev => [data, ...prev.slice(0, 4)]);
                fetchV4EnhancedStats();
                break;
            case 'achievement_unlocked':
                setShowAchievementNotification(data.achievement);
                setTimeout(() => setShowAchievementNotification(null), 5000);
                fetchAchievements();
                break;
            case 'ranking_updated':
                setGlobalRank(data.rank);
                break;
            case 'performance_milestone':
                setRealTimeUpdates(prev => [data, ...prev.slice(0, 4)]);
                break;
            default:
                console.log('Unknown real-time update type:', data.type);
                break;
        }
    };
    
    // üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ V4
    const fetchV4EnhancedStats = async () => {
        if (!user?.id) return;
        
        setIsLoadingV4Stats(true);
        try {
            const token = localStorage.getItem('token');
            const response = await api.get(`/api/v4/enhanced-stats/${user.id}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setV4EnhancedStats(response.data.stats);
            setPerformanceData(response.data.performanceHistory || []);
            setCurrentStreak(response.data.currentStreak);
            setPersonalBests(response.data.personalBests || {});
            setWeeklyProgress(response.data.weeklyProgress);
            
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ V4 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
        } finally {
            setIsLoadingV4Stats(false);
        }
    };
    
    // üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const fetchAchievements = async () => {
        if (!user?.id) return;
        
        setIsLoadingAchievements(true);
        try {
            const token = localStorage.getItem('token');
            const [achievementsRes, userAchievementsRes] = await Promise.all([
                api.get('/api/v4/achievements', {
                    headers: { Authorization: `Bearer ${token}` }
                }),
                api.get(`/api/v4/user-achievements/${user.id}`, {
                    headers: { Authorization: `Bearer ${token}` }
                })
            ]);
            
            setAchievements(achievementsRes.data);
            setUserAchievements(userAchievementsRes.data);
            
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', err);
        } finally {
            setIsLoadingAchievements(false);
        }
    };
    
    // ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const fetchAIAnalysis = async () => {
        if (!user?.id) return;
        
        setIsLoadingAI(true);
        try {
            const token = localStorage.getItem('token');
            const response = await api.post(`/api/v4/ai-analysis/${user.id}`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setAiAnalysis(response.data);
            
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –∞–Ω–∞–ª–∏–∑–∞:', err);
        } finally {
            setIsLoadingAI(false);
        }
    };
    
    // üìà –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤
    const fetchLeaderboards = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.get('/api/v4/leaderboards', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setLeaderboards(response.data);
            
            // –ù–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userRank = response.data.find(item => item.user_id === user.id);
            if (userRank) {
                setGlobalRank(userRank.rank);
            }
            
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤:', err);
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è V4 –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        if (user?.id && activeTab === 'stats') {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket
            const cleanup = initializeWebSocket();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ V4
            fetchV4EnhancedStats();
            fetchAchievements();
            fetchLeaderboards();
            
            return cleanup;
        }
    }, [user?.id, activeTab, initializeWebSocket, fetchV4EnhancedStats, fetchAchievements, fetchLeaderboards]);

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏—è
        v4EnhancedStats,
        achievements,
        userAchievements,
        aiAnalysis,
        performanceData,
        leaderboards,
        currentStreak,
        isLoadingV4Stats,
        isLoadingAchievements,
        isLoadingAI,
        websocket,
        realTimeUpdates,
        showAchievementNotification,
        globalRank,
        weeklyProgress,
        personalBests,
        v4ActiveView,
        setV4ActiveView,
        
        // –§—É–Ω–∫—Ü–∏–∏
        fetchV4EnhancedStats,
        fetchAchievements,
        fetchAIAnalysis,
        fetchLeaderboards,
        handleRealTimeUpdate
    };
}; 