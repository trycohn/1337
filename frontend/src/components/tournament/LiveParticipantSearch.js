import React, { useState, useEffect, useCallback, useRef } from 'react';
import api from '../../utils/api';
import './LiveParticipantSearch.css';

const MIN_QUERY = 2;

function LiveParticipantSearch({ tournamentId, onAdded }) {
    const [query, setQuery] = useState('');
    const [loading, setLoading] = useState(false);
    const [results, setResults] = useState([]);
    const [error, setError] = useState('');
    const [addingId, setAddingId] = useState(null);
    const debounceRef = useRef(null);
    const lastRequestIdRef = useRef(0);

    const search = useCallback(async (q) => {
        if (!q || q.length < MIN_QUERY) { setResults([]); return; }
        setLoading(true);
        setError('');
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ–∏—Å–∫ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è /api/users/search?q=...)
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—à —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–∏—Å–∫–∞ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –∑–¥–µ—Å—å
            const { data } = await api.get(`/api/users/search?query=${encodeURIComponent(q)}&limit=20`);
            setResults(Array.isArray(data) ? data : (data?.users || []));
        } catch (e) {
            setError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        if (debounceRef.current) clearTimeout(debounceRef.current);
        const requestId = ++lastRequestIdRef.current;
        debounceRef.current = setTimeout(async () => {
            // –∑–∞—â–∏—Ç–∞ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            const q = query;
            await search(q);
            // –µ—Å–ª–∏ –∫ —ç—Ç–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (search —É–∂–µ –±–µ–∑ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤)
        }, 400);
        return () => debounceRef.current && clearTimeout(debounceRef.current);
    }, [query, search]);

    const handleAdd = async (user) => {
        if (!user?.id) return;
        setAddingId(user.id);
        try {
            // üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é!)
            await api.post(`/api/tournaments/${tournamentId}/invite`, {
                username: user.username || `User${user.id}` // Backend –æ–∂–∏–¥–∞–µ—Ç username –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            setError(''); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
            setQuery(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            setResults([]); // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            onAdded?.();
            
            console.log(`‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`);
        } catch (e) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const errorMessage = e.response?.data?.error || e.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è';
            setError(Array.isArray(errorMessage) ? errorMessage.join(', ') : errorMessage);
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', e);
        } finally {
            setAddingId(null);
        }
    };

    return (
        <div className="live-search-container">
            <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)"
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                className="live-search-input"
            />
            {loading && <div className="live-search-loading">–ü–æ–∏—Å–∫...</div>}
            {error && <div className="live-search-error">{error}</div>}
            {!loading && results && results.length > 0 && (
                <div className="live-search-results">
                    {results.map((u) => (
                        <div key={u.id} className="live-search-row">
                            <div className="live-search-user">
                                <div className="live-search-avatar">
                                    {(u.username || 'U').charAt(0).toUpperCase()}
                                </div>
                                <div>
                                    <div className="live-search-username">{u.username || `User #${u.id}`}</div>
                                    {(u.faceit_elo || u.cs2_premier_rank) && (
                                        <div className="live-search-meta">
                                            {u.faceit_elo && `${u.faceit_elo} ELO`}
                                            {u.faceit_elo && u.cs2_premier_rank ? ' ‚Ä¢ ' : ''}
                                            {u.cs2_premier_rank && `Premier ${u.cs2_premier_rank}`}
                                        </div>
                                    )}
                                </div>
                            </div>
                            <button className="btn btn-primary" disabled={addingId===u.id} onClick={() => handleAdd(u)}>
                                {addingId===u.id ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å'}
                            </button>
                        </div>
                    ))}
                </div>
            )}
            {!loading && query.length >= MIN_QUERY && results.length === 0 && !error && (
                <div className="live-search-empty">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
            )}
        </div>
    );
}

export default LiveParticipantSearch;

