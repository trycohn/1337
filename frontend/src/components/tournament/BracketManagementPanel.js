/**
 * üèóÔ∏è –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–£–†–ù–ò–†–ù–û–ô –°–ï–¢–ö–û–ô v2.0
 * 
 * –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 * –≤ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É BracketController
 * 
 * ‚úÖ –ü–û–õ–ù–ê–Ø –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
 * ‚úÖ –ü–û–õ–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í
 */

import React, { useState, useCallback, useMemo, useEffect } from 'react';
import api from '../../utils/api';

/**
 * üéØ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π
 */
const BracketManagementPanel = ({ 
    tournament, 
    user, 
    matches = [], 
    isAdminOrCreator = false,
    onBracketUpdate 
}) => {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const [loading, setLoading] = useState(false);
    const [showSeedingOptions, setShowSeedingOptions] = useState(false);
    const [selectedSeedingType, setSelectedSeedingType] = useState('random');
    const [seedingConfig, setSeedingConfig] = useState({});
    const [availableSeedingTypes, setAvailableSeedingTypes] = useState([]);
    const [showThirdPlaceOption, setShowThirdPlaceOption] = useState(false);
    const [thirdPlaceMatch, setThirdPlaceMatch] = useState(false);
    
    // üÜï –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤
    const [mixTeams, setMixTeams] = useState([]);
    const [mixTeamsLoading, setMixTeamsLoading] = useState(false);
    const [showTeamFormation, setShowTeamFormation] = useState(false);

    // üÜï –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏
    const [selectedBracketType, setSelectedBracketType] = useState(tournament?.bracket_type || 'single_elimination');

    // üÜï –û–±–Ω–æ–≤–ª—è–µ–º selectedBracketType –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ tournament
    useEffect(() => {
        if (tournament?.bracket_type) {
            setSelectedBracketType(tournament.bracket_type);
        }
    }, [tournament?.bracket_type]);

    // üîß –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    const getCurrentSeedingType = useCallback(() => {
        // –ï—Å–ª–∏ —É —Ç—É—Ä–Ω–∏—Ä–∞ –µ—Å—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ seeding_type, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (tournament?.seeding_type) {
            return tournament.seeding_type;
        }
        
        // –ò–Ω–∞—á–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'random' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 'random';
    }, [tournament]);

    // üîß –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const getCurrentSeedingConfig = useCallback(() => {
        // –ï—Å–ª–∏ —É —Ç—É—Ä–Ω–∏—Ä–∞ –µ—Å—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ seeding_config, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (tournament?.seeding_config && typeof tournament.seeding_config === 'object') {
            return tournament.seeding_config;
        }
        
        // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        return {};
    }, [tournament]);

    // üÜï –ü–†–û–í–ï–†–ö–ê –ú–ò–ö–° –¢–£–†–ù–ò–†–ê
    const isMixTournament = useMemo(() => {
        return tournament?.format === 'mix';
    }, [tournament]);

    // üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ú–ê–ù–î –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–ê
    const loadMixTeams = useCallback(async () => {
        if (!isMixTournament || !tournament?.id) return;

        try {
            setMixTeamsLoading(true);
            const token = localStorage.getItem('token');
            
            const response = await api.get(`/api/tournaments/${tournament.id}/teams`, {
                headers: { Authorization: `Bearer ${token}` }
            });

            if (response.data && Array.isArray(response.data)) {
                setMixTeams(response.data);
                console.log(`üéÆ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.length} –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞`);
            } else {
                setMixTeams([]);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            setMixTeams([]);
        } finally {
            setMixTeamsLoading(false);
        }
    }, [isMixTournament, tournament?.id]);

    // ÔøΩÔøΩ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ú–ò–ö–° –¢–£–†–ù–ò–†–ê –ö –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ï–¢–ö–ò
    const mixTournamentStatus = useMemo(() => {
        if (!isMixTournament) {
            return { ready: true, reason: null };
        }

        const participantsCount = tournament?.participants?.length || 0;
        const teamsCount = mixTeams.length;
        const teamSize = tournament?.team_size || 5;
        const expectedTeams = Math.floor(participantsCount / teamSize);

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã (teamSize —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
        if (participantsCount < teamSize) {
            return { 
                ready: false, 
                reason: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ${teamSize} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 1 –∫–æ–º–∞–Ω–¥—ã, –∞ –µ—Å—Ç—å ${participantsCount}` 
            };
        }

        if (teamsCount === 0) {
            return { 
                ready: false, 
                reason: '–ö–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ —Å–æ–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' 
            };
        }

        if (teamsCount < 2) {
            return { 
                ready: false, 
                reason: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–∞–Ω–¥. –ï—Å—Ç—å ${teamsCount}, –∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2` 
            };
        }

        return { 
            ready: true, 
            reason: null,
            info: `–ì–æ—Ç–æ–≤–æ ${teamsCount} –∫–æ–º–∞–Ω–¥ –∏–∑ ${participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`
        };
    }, [isMixTournament, tournament, mixTeams]);

    // üÜï –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–ê
    const handleFormMixTeams = useCallback(async () => {
        if (!tournament?.id || loading) return;

        try {
            setLoading(true);
            const token = localStorage.getItem('token');

            console.log('üéØ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞:', tournament.id);

            const response = await api.post(`/api/tournaments/${tournament.id}/mix-generate-teams`, {
                ratingType: tournament.mix_rating_type || 'faceit',
                shuffle: false
            }, {
                headers: { Authorization: `Bearer ${token}` }
            });

            if (response.data.success) {
                console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã:', response.data);
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                await loadMixTeams();
                
                if (onBracketUpdate) {
                    onBracketUpdate({
                        type: 'teams_formed',
                        data: response.data,
                        message: response.data.message
                    });
                }
                
                setShowTeamFormation(false);
            } else {
                throw new Error(response.data.error || '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥:', error);
            alert(`‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: ${error.response?.data?.error || error.message}`);
        } finally {
            setLoading(false);
        }
    }, [tournament?.id, tournament?.mix_rating_type, onBracketUpdate, loading, loadMixTeams]);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    const bracketStatistics = useMemo(() => {
        if (!matches || matches.length === 0) {
            return null;
        }

        const totalMatches = matches.length;
        const completedMatches = matches.filter(m => m.winner_team_id).length;
        
        // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å—á–∏—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –¥–ª—è –æ–±—ã—á–Ω—ã—Ö - —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const participantsCount = isMixTournament ? mixTeams.length : (tournament?.participants?.length || 0);
        const excludedCount = tournament?.excluded_participants_count || 0;
        const participantsInBracket = participantsCount - excludedCount;

        return {
            totalMatches,
            completedMatches,
            participantsCount,
            excludedCount,
            participantsInBracket,
            completionPercentage: totalMatches > 0 ? Math.round((completedMatches / totalMatches) * 100) : 0
        };
    }, [matches, tournament, isMixTournament, mixTeams]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞
    const hasBracket = matches && matches.length > 0;

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    useEffect(() => {
        const loadSeedingTypes = async () => {
            try {
                const response = await api.get('/api/tournaments/seeding-types');
                if (response.data.success) {
                    setAvailableSeedingTypes(response.data.data.seedingTypes || []);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', error);
                // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                setAvailableSeedingTypes([
                    { value: 'random', displayName: '–°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', description: '–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ' },
                    { value: 'ranking', displayName: '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É', description: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' },
                    { value: 'balanced', displayName: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏' },
                    { value: 'manual', displayName: '–†—É—á–Ω–æ–µ', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' }
                ]);
            }
        };

        loadSeedingTypes();
    }, []);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞
    useEffect(() => {
        if (tournament) {
            const currentType = getCurrentSeedingType();
            const currentConfig = getCurrentSeedingConfig();
            
            setSelectedSeedingType(currentType);
            setSeedingConfig(currentConfig);
            
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞:', {
                tournamentId: tournament.id,
                seedingType: currentType,
                seedingConfig: currentConfig,
                hasNewFields: !!tournament.seeding_type,
                isMixTournament
            });
        }
    }, [tournament, getCurrentSeedingType, getCurrentSeedingConfig, isMixTournament]);

    // üÜï –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤
    useEffect(() => {
        if (isMixTournament) {
            loadMixTeams();
        }
    }, [isMixTournament, loadMixTeams]);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    const handleGenerateBracket = useCallback(async () => {
        if (!tournament?.id || loading) return;

        // üÜï –ü–†–û–í–ï–†–ö–ê –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í
        if (isMixTournament && !mixTournamentStatus.ready) {
            alert(`‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É: ${mixTournamentStatus.reason}`);
            return;
        }

        try {
            setLoading(true);
            const token = localStorage.getItem('token');

            console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É:', {
                tournamentId: tournament.id,
                seedingType: selectedSeedingType,
                thirdPlaceMatch,
                seedingConfig,
                isMixTournament,
                teamsCount: mixTeams.length,
                bracketType: selectedBracketType
            });

            const response = await api.post(`/api/tournaments/${tournament.id}/generate-bracket`, {
                seedingType: selectedSeedingType,
                thirdPlaceMatch,
                seedingOptions: seedingConfig,
                bracketType: selectedBracketType
            }, {
                headers: { Authorization: `Bearer ${token}` }
            });

            if (response.data.success) {
                console.log('‚úÖ –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:', response.data);
                
                if (onBracketUpdate) {
                    onBracketUpdate({
                        type: 'generated',
                        data: response.data.data,
                        message: response.data.message
                    });
                }
                
                setShowSeedingOptions(false);
            } else {
                throw new Error(response.data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
            alert(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏: ${error.response?.data?.error || error.message}`);
        } finally {
            setLoading(false);
        }
    }, [tournament?.id, selectedSeedingType, thirdPlaceMatch, seedingConfig, onBracketUpdate, loading, isMixTournament, mixTournamentStatus, mixTeams, selectedBracketType]);

    // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    const handleRegenerateBracket = useCallback(async () => {
        if (!tournament?.id || loading) return;

        // üÜï –ü–†–û–í–ï–†–ö–ê –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í
        if (isMixTournament && !mixTournamentStatus.ready) {
            alert(`‚ùå –ù–µ–ª—å–∑—è —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É: ${mixTournamentStatus.reason}`);
            return;
        }

        const confirmMessage = `üîÑ –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É.\n\n` +
            `–í–ù–ò–ú–ê–ù–ò–ï:\n` +
            `‚Ä¢ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n` +
            `‚Ä¢ –°–µ—Ç–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ\n` +
            `‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã\n` +
            (isMixTournament ? `‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Ç–µ–º–∏ –∂–µ (${mixTeams.length} –∫–æ–º–∞–Ω–¥)\n` : '') +
            `‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\n\n` +
            `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`;

        if (!window.confirm(confirmMessage)) return;

        try {
            setLoading(true);
            const token = localStorage.getItem('token');

            console.log('üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É:', {
                tournamentId: tournament.id,
                seedingType: selectedSeedingType,
                thirdPlaceMatch,
                seedingConfig,
                isMixTournament,
                teamsCount: mixTeams.length,
                bracketType: selectedBracketType
            });

            const response = await api.post(`/api/tournaments/${tournament.id}/regenerate-bracket`, {
                seedingType: selectedSeedingType,
                thirdPlaceMatch,
                seedingOptions: seedingConfig,
                bracketType: selectedBracketType
            }, {
                headers: { Authorization: `Bearer ${token}` }
            });

            if (response.data.success) {
                console.log('‚úÖ –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:', response.data);
                
                if (onBracketUpdate) {
                    onBracketUpdate({
                        type: 'regenerated',
                        data: response.data.data,
                        message: response.data.message
                    });
                }
                
                setShowSeedingOptions(false);
            } else {
                throw new Error(response.data.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
            alert(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏: ${error.response?.data?.error || error.message}`);
        } finally {
            setLoading(false);
        }
    }, [tournament?.id, selectedSeedingType, thirdPlaceMatch, seedingConfig, onBracketUpdate, loading, isMixTournament, mixTournamentStatus, mixTeams, selectedBracketType]);

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const handlePreviewSeeding = useCallback(async () => {
        if (!tournament?.id || loading) return;

        // üÜï –ü–†–û–í–ï–†–ö–ê –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í
        if (isMixTournament && !mixTournamentStatus.ready) {
            alert(`‚ùå –ù–µ–ª—å–∑—è –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä: ${mixTournamentStatus.reason}`);
            return;
        }

        try {
            setLoading(true);
            const token = localStorage.getItem('token');

            const response = await api.get(`/api/tournaments/${tournament.id}/seeding-preview`, {
                headers: { Authorization: `Bearer ${token}` },
                params: {
                    seedingType: selectedSeedingType,
                    thirdPlaceMatch,
                    seedingOptions: JSON.stringify(seedingConfig)
                }
            });

            if (response.data.success) {
                const preview = response.data.data;
                
                let message = `üé≤ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n\n`;
                
                if (isMixTournament) {
                    message += `–ö–æ–º–∞–Ω–¥ –≤ —Å–µ—Ç–∫–µ: ${preview.participants.length}\n`;
                    message += `–ö–æ–º–∞–Ω–¥ –≤—Å–µ–≥–æ: ${mixTeams.length}\n`;
                } else {
                    message += `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–µ—Ç–∫–µ: ${preview.participants.length}\n`;
                }
                
                if (preview.excludedParticipants.length > 0) {
                    message += `–ò—Å–∫–ª—é—á–µ–Ω–æ: ${preview.excludedParticipants.length}\n`;
                }
                
                message += `–ú–∞—Ç—á–µ–π: ${preview.bracketMath.totalMatches}\n`;
                message += `–†–∞—É–Ω–¥–æ–≤: ${preview.bracketMath.totalRounds}`;
                
                alert(message);
            } else {
                throw new Error(response.data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.error || error.message}`);
        } finally {
            setLoading(false);
        }
    }, [tournament?.id, selectedSeedingType, thirdPlaceMatch, seedingConfig, loading, isMixTournament, mixTournamentStatus, mixTeams]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    const handleGetStatistics = useCallback(async () => {
        if (!tournament?.id || loading) return;

        try {
            setLoading(true);
            const token = localStorage.getItem('token');

            const response = await api.get(`/api/tournaments/${tournament.id}/bracket-statistics`, {
                headers: { Authorization: `Bearer ${token}` }
            });

            if (response.data.success) {
                const stats = response.data.data;
                
                let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏:\n\n`;
                message += `–í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: ${stats.totalMatches}\n`;
                message += `–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completedMatches}\n`;
                message += `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${stats.completionPercentage}%\n`;
                
                if (isMixTournament) {
                    message += `–ö–æ–º–∞–Ω–¥: ${mixTeams.length}\n`;
                } else {
                    message += `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${stats.participantsCount}\n`;
                }
                
                if (stats.excludedCount > 0) {
                    message += `–ò—Å–∫–ª—é—á–µ–Ω–æ: ${stats.excludedCount}\n`;
                }
                
                alert(message);
            } else {
                throw new Error(response.data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.error || error.message}`);
        } finally {
            setLoading(false);
        }
    }, [tournament?.id, loading, isMixTournament, mixTeams]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!isAdminOrCreator) {
        return (
            <div className="bracket-management-panel">
                <div className="access-denied">
                    <p>üîí –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π</p>
                    <small>–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ç–∫–æ–π</small>
                </div>
            </div>
        );
    }

    // üÜï –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í
    if (isMixTournament) {
        const participantsCount = tournament?.participants?.length || 0;
        const teamSize = tournament?.team_size || 5;
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º teamSize —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 1 –∫–æ–º–∞–Ω–¥—ã
        const minParticipants = teamSize;

        if (participantsCount < minParticipants) {
            return (
                <div className="bracket-management-panel">
                    <div className="panel-header">
                        <h3>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π (–ú–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä)</h3>
                        <div className="bracket-status">
                            <span className="status-none">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                        </div>
                    </div>
                    <div className="panel-content">
                        <div className="warning">
                            ‚ö†Ô∏è –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –ø–æ {teamSize} –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º {minParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. 
                            –°–µ–π—á–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {participantsCount}
                            {participantsCount >= teamSize && participantsCount < teamSize * 2 && (
                                <div style={{ marginTop: '10px', color: '#ffa500' }}>
                                    üí° –ü—Ä–∏ {participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ 1 –∫–æ–º–∞–Ω–¥–∞ –∏–∑ {teamSize} –∏–≥—Ä–æ–∫–æ–≤. 
                                    {participantsCount % teamSize > 0 && ` ${participantsCount % teamSize} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤–Ω–µ –∫–æ–º–∞–Ω–¥—ã.`}
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            );
        }
    } else {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        const participantsCount = tournament?.participants?.length || 0;
        if (participantsCount < 2) {
            return (
                <div className="bracket-management-panel">
                    <div className="panel-header">
                        <h3>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π</h3>
                        <div className="bracket-status">
                            <span className="status-none">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                        </div>
                    </div>
                    <div className="panel-content">
                        <div className="warning">
                            ‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞. 
                            –°–µ–π—á–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {participantsCount}
                        </div>
                    </div>
                </div>
            );
        }
    }

    return (
        <div className="bracket-management-panel">
            <div className="panel-header">
                <h3>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π {isMixTournament && '(–ú–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä)'}</h3>
                <div className="bracket-status">
                    {hasBracket ? (
                        <span className="status-exists">
                            ‚úÖ –°–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ({bracketStatistics?.totalMatches} –º–∞—Ç—á–µ–π)
                        </span>
                    ) : (
                        <span className="status-none">
                            üìã –°–µ—Ç–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
                        </span>
                    )}
                </div>
            </div>

            <div className="panel-content">
                {/* üÜï –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –°–ï–ö–¶–ò–Ø –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í */}
                {isMixTournament && (
                    <div className="mix-tournament-section">
                        <div className="bracket-info">
                            <p>üéÆ –ú–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä: –∫–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∏–∑ —Å–æ–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
                            <ul>
                                <li>–°–æ–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tournament?.participants?.length || 0}</li>
                                <li>–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {tournament?.team_size || 5}</li>
                                <li>–ö–æ–º–∞–Ω–¥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {mixTeamsLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : mixTeams.length}</li>
                                <li>–°—Ç–∞—Ç—É—Å: {mixTournamentStatus.ready ? '‚úÖ –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–µ—Ç–∫–∏' : `‚ùå ${mixTournamentStatus.reason}`}</li>
                                {mixTournamentStatus.info && <li>–ò–Ω—Ñ–æ: {mixTournamentStatus.info}</li>}
                            </ul>
                        </div>

                        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ */}
                        {!mixTournamentStatus.ready && (
                            <div className="action-buttons">
                                <button 
                                    className="btn-primary"
                                    onClick={handleFormMixTeams}
                                    disabled={loading || mixTeamsLoading}
                                >
                                    {loading ? '‚è≥ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 'üéØ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã'}
                                </button>
                                
                                <button 
                                    className="btn-secondary"
                                    onClick={() => setShowTeamFormation(!showTeamFormation)}
                                    disabled={loading}
                                >
                                    {showTeamFormation ? 'üîΩ –°–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' : '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è'}
                                </button>
                            </div>
                        )}

                        {showTeamFormation && (
                            <div className="seeding-options">
                                <h4>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥</h4>
                                <div className="option-group">
                                    <label>–¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:</label>
                                    <select 
                                        value={tournament?.mix_rating_type || 'faceit'}
                                        disabled={true}
                                    >
                                        <option value="faceit">FACEIT ELO</option>
                                        <option value="premier">CS2 Premier Rank</option>
                                        <option value="mixed">–ü–æ–ª–Ω—ã–π –º–∏–∫—Å (–±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞)</option>
                                    </select>
                                    <small>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞</small>
                                </div>
                            </div>
                        )}

                        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ */}
                        {mixTeams.length > 0 && (
                            <div className="teams-preview">
                                <h4>üë• –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ({mixTeams.length})</h4>
                                <div className="teams-list">
                                    {mixTeams.slice(0, 3).map((team, index) => (
                                        <div key={team.id} className="team-item">
                                            <strong>{team.name}</strong>
                                            {team.members && (
                                                <span> ({team.members.length} –∏–≥—Ä–æ–∫–æ–≤)</span>
                                            )}
                                        </div>
                                    ))}
                                    {mixTeams.length > 3 && (
                                        <div className="team-item">
                                            <span>... –∏ –µ—â–µ {mixTeams.length - 3} –∫–æ–º–∞–Ω–¥</span>
                                        </div>
                                    )}
                                </div>
                            </div>
                        )}
                    </div>
                )}

                {/* –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ */}
                {(!isMixTournament || mixTournamentStatus.ready) && (
                    <>
                        {!hasBracket ? (
                            // –†–∞–∑–¥–µ–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å–µ—Ç–∫–∏
                            <div className="generation-section">
                                <div className="bracket-info">
                                    <p>üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏</p>
                                    <ul>
                                        {isMixTournament ? (
                                            <>
                                                <li>–ö–æ–º–∞–Ω–¥ –≥–æ—Ç–æ–≤–æ: {mixTeams.length}</li>
                                                <li>–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞: {tournament?.format || 'mix'}</li>
                                            </>
                                        ) : (
                                            <>
                                                <li>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ—Ç–æ–≤–æ: {tournament?.participants?.length || 0}</li>
                                                <li>–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞: {tournament?.format || 'single_elimination'}</li>
                                            </>
                                        )}
                                        <li>–¢–µ–∫—É—â–∏–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {getCurrentSeedingType()}</li>
                                    </ul>
                                </div>

                                <div className="action-buttons">
                                    <button 
                                        className="btn-generate"
                                        onClick={() => setShowSeedingOptions(!showSeedingOptions)}
                                        disabled={loading}
                                    >
                                        {showSeedingOptions ? 'üîΩ –°–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' : 'üéØ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É'}
                                    </button>
                                    
                                    <button 
                                        className="btn-secondary"
                                        onClick={handlePreviewSeeding}
                                        disabled={loading}
                                    >
                                        üé≤ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                                    </button>
                                </div>

                                {showSeedingOptions && (
                                    <div className="seeding-options">
                                        <h4>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è {isMixTournament ? '–∫–æ–º–∞–Ω–¥' : '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}</h4>
                                        
                                        <div className="option-group">
                                            <label>–¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</label>
                                            <select 
                                                value={selectedSeedingType}
                                                onChange={(e) => setSelectedSeedingType(e.target.value)}
                                                disabled={loading}
                                            >
                                                {availableSeedingTypes.map(type => (
                                                    <option key={type.value} value={type.value}>
                                                        {type.displayName}
                                                    </option>
                                                ))}
                                            </select>
                                        </div>

                                        {selectedSeedingType === 'ranking' && !isMixTournament && (
                                            <>
                                                <div className="option-group">
                                                    <label>–¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:</label>
                                                    <select 
                                                        value={seedingConfig.ratingType || 'faceit_elo'}
                                                        onChange={(e) => setSeedingConfig(prev => ({
                                                            ...prev,
                                                            ratingType: e.target.value
                                                        }))}
                                                        disabled={loading}
                                                    >
                                                        <option value="faceit_elo">FACEIT ELO</option>
                                                        <option value="cs2_premier_rank">CS2 Premier Rank</option>
                                                    </select>
                                                </div>
                                                
                                                <div className="option-group">
                                                    <label>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:</label>
                                                    <select 
                                                        value={seedingConfig.direction || 'desc'}
                                                        onChange={(e) => setSeedingConfig(prev => ({
                                                            ...prev,
                                                            direction: e.target.value
                                                        }))}
                                                        disabled={loading}
                                                    >
                                                        <option value="desc">–û—Ç —Å–∏–ª—å–Ω—ã—Ö –∫ —Å–ª–∞–±—ã–º</option>
                                                        <option value="asc">–û—Ç —Å–ª–∞–±—ã—Ö –∫ —Å–∏–ª—å–Ω—ã–º</option>
                                                    </select>
                                                </div>
                                            </>
                                        )}

                                        {isMixTournament && selectedSeedingType === 'ranking' && (
                                            <div className="option-group">
                                                <small>‚ÑπÔ∏è –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã</small>
                                            </div>
                                        )}

                                        <div className="option-group">
                                            <label>
                                                <input 
                                                    type="checkbox"
                                                    checked={thirdPlaceMatch}
                                                    onChange={(e) => setThirdPlaceMatch(e.target.checked)}
                                                    disabled={loading}
                                                />
                                                –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
                                            </label>
                                        </div>

                                        <div className="action-buttons">
                                            <button 
                                                className="btn-primary"
                                                onClick={handleGenerateBracket}
                                                disabled={loading}
                                            >
                                                {loading ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : 'üöÄ –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É'}
                                            </button>
                                        </div>
                                    </div>
                                )}
                            </div>
                        ) : (
                            // –†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Ç–∫–æ–π
                            <div className="management-section">
                                <div className="bracket-info">
                                    <p>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏</p>
                                    <ul>
                                        <li>–í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {bracketStatistics?.totalMatches}</li>
                                        <li>–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {bracketStatistics?.completedMatches}</li>
                                        <li>–ü—Ä–æ–≥—Ä–µ—Å—Å: {bracketStatistics?.completionPercentage}%</li>
                                        {isMixTournament ? (
                                            <li>–ö–æ–º–∞–Ω–¥ –≤ —Å–µ—Ç–∫–µ: {bracketStatistics?.participantsInBracket}</li>
                                        ) : (
                                            <li>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–µ—Ç–∫–µ: {bracketStatistics?.participantsInBracket}</li>
                                        )}
                                        {bracketStatistics?.excludedCount > 0 && (
                                            <li>–ò—Å–∫–ª—é—á–µ–Ω–æ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è: {bracketStatistics.excludedCount}</li>
                                        )}
                                    </ul>
                                </div>

                                <div className="action-buttons">
                                    <button 
                                        className="btn-preview"
                                        onClick={handleGetStatistics}
                                        disabled={loading}
                                    >
                                        üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                                    </button>
                                    
                                    <button 
                                        className="btn-secondary"
                                        onClick={() => setShowSeedingOptions(!showSeedingOptions)}
                                        disabled={loading}
                                    >
                                        {showSeedingOptions ? 'üîΩ –°–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' : 'üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é'}
                                    </button>
                                </div>

                                {showSeedingOptions && (
                                    <div className="seeding-options">
                                        <h4>üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏</h4>
                                        
                                        <div className="warning">
                                            ‚ö†Ô∏è –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –∏ —Å–æ–∑–¥–∞—Å—Ç —Å–µ—Ç–∫—É –∑–∞–Ω–æ–≤–æ —Å –Ω–æ–≤—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º {isMixTournament ? '–∫–æ–º–∞–Ω–¥' : '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}.
                                            {isMixTournament && ' –ö–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏.'}
                                        </div>
                                        
                                        <div className="option-group">
                                            <label>–ù–æ–≤—ã–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</label>
                                            <select 
                                                value={selectedSeedingType}
                                                onChange={(e) => setSelectedSeedingType(e.target.value)}
                                                disabled={loading}
                                            >
                                                {availableSeedingTypes.map(type => (
                                                    <option key={type.value} value={type.value}>
                                                        {type.displayName}
                                                    </option>
                                                ))}
                                            </select>
                                        </div>

                                        {/* üÜï –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ */}
                                        <div className="option-group">
                                            <label>–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏:</label>
                                            <select 
                                                value={selectedBracketType}
                                                onChange={(e) => setSelectedBracketType(e.target.value)}
                                                disabled={loading}
                                            >
                                                <option value="single_elimination">
                                                    Single Elimination
                                                </option>
                                                <option value="double_elimination">
                                                    Double Elimination
                                                </option>
                                            </select>
                                            <small className="option-description">
                                                {selectedBracketType === 'single_elimination' 
                                                    ? 'Participants are eliminated after their first loss' 
                                                    : 'Participants are eliminated after two losses (Winners + Losers Bracket)'}
                                            </small>
                                        </div>

                                        {selectedSeedingType === 'ranking' && !isMixTournament && (
                                            <>
                                                <div className="option-group">
                                                    <label>–¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:</label>
                                                    <select 
                                                        value={seedingConfig.ratingType || 'faceit_elo'}
                                                        onChange={(e) => setSeedingConfig(prev => ({
                                                            ...prev,
                                                            ratingType: e.target.value
                                                        }))}
                                                        disabled={loading}
                                                    >
                                                        <option value="faceit_elo">FACEIT ELO</option>
                                                        <option value="cs2_premier_rank">CS2 Premier Rank</option>
                                                    </select>
                                                </div>
                                                
                                                <div className="option-group">
                                                    <label>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:</label>
                                                    <select 
                                                        value={seedingConfig.direction || 'desc'}
                                                        onChange={(e) => setSeedingConfig(prev => ({
                                                            ...prev,
                                                            direction: e.target.value
                                                        }))}
                                                        disabled={loading}
                                                    >
                                                        <option value="desc">–û—Ç —Å–∏–ª—å–Ω—ã—Ö –∫ —Å–ª–∞–±—ã–º</option>
                                                        <option value="asc">–û—Ç —Å–ª–∞–±—ã—Ö –∫ —Å–∏–ª—å–Ω—ã–º</option>
                                                    </select>
                                                </div>
                                            </>
                                        )}

                                        <div className="option-group">
                                            <label>
                                                <input 
                                                    type="checkbox"
                                                    checked={thirdPlaceMatch}
                                                    onChange={(e) => setThirdPlaceMatch(e.target.checked)}
                                                    disabled={loading}
                                                />
                                                –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
                                            </label>
                                        </div>

                                        <div className="action-buttons-extended">
                                            <button 
                                                className="btn-danger"
                                                onClick={handleRegenerateBracket}
                                                disabled={loading}
                                            >
                                                {loading ? '‚è≥ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üîÑ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É'}
                                            </button>
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}
                    </>
                )}
            </div>
        </div>
    );
};

export default BracketManagementPanel; 