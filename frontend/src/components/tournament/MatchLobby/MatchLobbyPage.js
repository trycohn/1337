// üéÆ MatchLobbyPage - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–±–±–∏ –º–∞—Ç—á–∞ –¥–ª—è CS2
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useUser } from '../../../context/UserContext';
import io from 'socket.io-client';
import MapSelectionBoard from './MapSelectionBoard';
import ParticipantStatus from './ParticipantStatus';
import './MatchLobby.css';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';

// üîç –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï - –î–û –†–ï–ù–î–ï–†–ê
console.log('üö® [MatchLobbyPage] –ú–û–î–£–õ–¨ –ó–ê–ì–†–£–ñ–ï–ù');

function MatchLobbyPage() {
    console.log('üö® [MatchLobbyPage] –§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê - –ù–ê–ß–ê–õ–û –†–ï–ù–î–ï–†–ê');
    
    const { lobbyId } = useParams();
    console.log('üö® [MatchLobbyPage] lobbyId –∏–∑ useParams:', lobbyId);
    
    const navigate = useNavigate();
    console.log('üö® [MatchLobbyPage] navigate –ø–æ–ª—É—á–µ–Ω');
    
    const { user } = useUser();
    console.log('üö® [MatchLobbyPage] user –∏–∑ context:', user);
    
    // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    console.log('üéÆ [MatchLobbyPage] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
        lobbyId,
        userId: user?.id,
        hasSteamId: !!(user?.steam_id || user?.steamId)
    });
    
    const [lobby, setLobby] = useState(null);
    const socketRef = useRef(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [ready, setReady] = useState(false);
    const [selectedFormat, setSelectedFormat] = useState(null);
    const redirectedRef = useRef(false);
    const [steamModalOpen, setSteamModalOpen] = useState(false);

    // Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    useEffect(() => {
        console.log('üîå [MatchLobbyPage] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket:', { 
            hasUser: !!user, 
            lobbyId,
            hasSteamId: !!(user?.steam_id || user?.steamId)
        });
        
        if (!user || !lobbyId) {
            console.warn('‚ö†Ô∏è [MatchLobbyPage] –ù–µ—Ç user –∏–ª–∏ lobbyId, WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è');
            return;
        }
        
        if (!user.steam_id && !user.steamId) {
            console.warn('‚ö†Ô∏è [MatchLobbyPage] –ù–µ—Ç Steam ID');
            setSteamModalOpen(true);
            setLoading(false);
            return;
        }
        
        const token = localStorage.getItem('token');
        console.log('üîå [MatchLobbyPage] –°–æ–∑–¥–∞–µ–º Socket.IO –∫–ª–∏–µ–Ω—Ç –∫:', API_URL);
        const socket = io(API_URL, { auth: { token }, transports: ['websocket', 'polling'] });
        socketRef.current = socket;
        
        socket.on('connect', () => {
            console.log('‚úÖ [TOURNAMENT_LOBBY] Socket connected', { 
                socketId: socket.id,
                lobbyId, 
                userId: user?.id 
            });
            socket.emit('join_lobby', { 
                lobbyId: Number(lobbyId),
                userId: user?.id 
            });
            console.log('üì° [TOURNAMENT_LOBBY] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω join_lobby');
        });
        
        socket.on('lobby_state', (data) => {
            console.log('[TOURNAMENT_LOBBY] lobby_state received', data);
            if (data) {
                console.log('üìä [WebSocket] –°—Ç–∞—Ç—É—Å –ª–æ–±–±–∏ –∏–∑ lobby_state:', data.status);
                if (data.status === 'picking') {
                    console.log('üéÆ [WebSocket] PICKING —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ lobby_state!');
                }
                setLobby(data);
                if (data.match_format) setSelectedFormat(data.match_format);
                setLoading(false);
            }
        });
        
        socket.on('lobby_update', (data) => {
            console.log('[TOURNAMENT_LOBBY] lobby_update', data);
            if (data) {
                console.log('üìä [WebSocket] –°—Ç–∞—Ç—É—Å –ª–æ–±–±–∏ –∏–∑ lobby_update:', data.status);
                if (data.status === 'picking') {
                    console.log('üéÆ [WebSocket] PICKING —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ lobby_update!');
                }
                setLobby(data);
                if (data.match_format) setSelectedFormat(data.match_format);
            }
        });
        
        socket.on('lobby_completed', (data) => {
            console.log('[TOURNAMENT_LOBBY] lobby_completed', data);
            if (data?.matchId && !redirectedRef.current) {
                redirectedRef.current = true;
                const tId = data.tournamentId;
                const target = tId ? `/tournaments/${tId}/match/${data.matchId}` : `/matches/custom/${data.matchId}`;
                try { navigate(target); } catch(_) {}
            }
        });
        
        return () => { socket.disconnect(); socketRef.current = null; };
    }, [user, lobbyId]);

    // –§–æ–ª–±–µ–∫ polling (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ Socket.IO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    useEffect(() => {
        if (!user || !lobbyId) return;
        if (!user.steam_id && !user.steamId) return;
        const token = localStorage.getItem('token');
        let timer = null;
        const pull = async () => {
            try {
                const response = await fetch(`${API_URL}/api/tournaments/lobby/${lobbyId}`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        setLobby(data.lobby);
                        if (data.lobby.match_format) setSelectedFormat(data.lobby.match_format);
                        // üß≠ –ê–≤—Ç–æ-—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ç—á–∞ –ü–û–°–õ–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                        if (!redirectedRef.current && data.lobby.status === 'completed' && data.lobby.match_id) {
                            redirectedRef.current = true;
                            const tId = data.lobby.tournament_id;
                            const target = tId ? `/tournaments/${tId}/match/${data.lobby.match_id}` : `/matches/custom/${data.lobby.match_id}`;
                            try { navigate(target); } catch(_) {}
                            return;
                        }
                        setError(null);
                    }
                }
            } catch (e) {}
            timer = setTimeout(pull, 5000);
        };
        timer = setTimeout(pull, 5000);
        return () => { if (timer) clearTimeout(timer); };
    }, [user, lobbyId, navigate]);

    // üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏
    const fetchLobbyInfo = useCallback(async () => {
        console.log('üîç [fetchLobbyInfo] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏:', { user: !!user, lobbyId });
        
        if (!user || !lobbyId) {
            console.warn('‚ö†Ô∏è [fetchLobbyInfo] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ lobbyId');
            return;
        }
        
        if (!user.steam_id && !user.steamId) { 
            console.warn('‚ö†Ô∏è [fetchLobbyInfo] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç Steam ID');
            setSteamModalOpen(true); 
            setLoading(false); 
            return; 
        }
        
        try {
            const token = localStorage.getItem('token');
            const url = `${API_URL}/api/tournaments/lobby/${lobbyId}`;
            console.log('üì° [fetchLobbyInfo] –ó–∞–ø—Ä–æ—Å –∫:', url);
            
            const response = await fetch(url, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            console.log('üì° [fetchLobbyInfo] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', { 
                ok: response.ok, 
                status: response.status,
                statusText: response.statusText
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå [fetchLobbyInfo] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', errorText);
                
                // üîß –ï–°–õ–ò –õ–û–ë–ë–ò –ù–ï –ù–ê–ô–î–ï–ù–û (404/500) - –ü–†–û–ë–£–ï–ú –ù–ê–ô–¢–ò –ê–ö–¢–£–ê–õ–¨–ù–û–ï –õ–û–ë–ë–ò –î–õ–Ø –ú–ê–¢–ß–ê
                if (response.status === 404 || response.status === 500) {
                    console.log('üîç [fetchLobbyInfo] –õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞...');
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ API –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏
                        const activeLobbiesResponse = await fetch(`${API_URL}/api/tournaments/lobbies/active`, {
                            headers: { 'Authorization': `Bearer ${token}` }
                        });
                        
                        if (activeLobbiesResponse.ok) {
                            const activeData = await activeLobbiesResponse.json();
                            console.log('üìä [fetchLobbyInfo] –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–±–±–∏:', activeData);
                            
                            // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–±–±–∏, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –ø–µ—Ä–≤–æ–µ
                            if (activeData.success && activeData.lobbies && activeData.lobbies.length > 0) {
                                const activeLobby = activeData.lobbies[0];
                                console.log('üîÑ [fetchLobbyInfo] –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –ª–æ–±–±–∏:', activeLobby.id);
                                navigate(`/match-lobby/${activeLobby.id}`, { replace: true });
                                return;
                            }
                        }
                    } catch (redirectError) {
                        console.error('‚ùå [fetchLobbyInfo] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏:', redirectError);
                    }
                }
                
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–±–±–∏ (${response.status}): ${errorText}`);
            }

            const data = await response.json();
            console.log('üìä [fetchLobbyInfo] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
            
            if (data.success) {
                console.log('üìä [fetchLobbyInfo] –î–µ—Ç–∞–ª–∏ –ª–æ–±–±–∏:', {
                    id: data.lobby.id,
                    status: data.lobby.status,
                    team1_ready: data.lobby.team1_ready,
                    team2_ready: data.lobby.team2_ready,
                    first_picker_team_id: data.lobby.first_picker_team_id,
                    current_turn_team_id: data.lobby.current_turn_team_id,
                    match_format: data.lobby.match_format
                });
                
                if (data.lobby.status === 'picking') {
                    console.log('üéÆ [fetchLobbyInfo] –°–¢–ê–¢–£–° = PICKING! –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –±–∞–Ω/–ø–∏–∫ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∞—Ç—å—Å—è');
                    console.log('üéØ [fetchLobbyInfo] –ü–µ—Ä–≤—ã–º –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞:', data.lobby.first_picker_team_id);
                    console.log('üéØ [fetchLobbyInfo] –¢–µ–∫—É—â–∏–π —Ö–æ–¥ –∫–æ–º–∞–Ω–¥—ã:', data.lobby.current_turn_team_id);
                }
                
                setLobby(data.lobby);
                if (data.lobby.match_format) setSelectedFormat(data.lobby.match_format);
                console.log('‚úÖ [fetchLobbyInfo] –õ–æ–±–±–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
            }
        } catch (error) {
            console.error('‚ùå [fetchLobbyInfo] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–±–±–∏:', error);
            setError(error.message);
        } finally {
            setLoading(false);
        }
    }, [user, lobbyId]);

    useEffect(() => { fetchLobbyInfo(); }, [fetchLobbyInfo]);

    // ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    const handleReadyToggle = useCallback(async () => {
        console.log('üîò [handleReadyToggle] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', { 
            currentReady: ready, 
            willBe: !ready,
            lobbyId,
            userId: user?.id
        });
        
        try {
            if (!user?.steam_id && !user?.steamId) { 
                console.warn('‚ö†Ô∏è [handleReadyToggle] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç Steam ID');
                setSteamModalOpen(true); 
                return; 
            }
            
            const token = localStorage.getItem('token');
            const url = `${API_URL}/api/tournaments/lobby/${lobbyId}/ready`;
            console.log('üì° [handleReadyToggle] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫:', url);
            
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ ready: !ready })
            });

            console.log('üì° [handleReadyToggle] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', { 
                ok: response.ok, 
                status: response.status 
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå [handleReadyToggle] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', errorText);
                throw new Error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏');
            }

            const data = await response.json();
            console.log('üìä [handleReadyToggle] –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
            
            if (data.success) {
                setReady(!ready);
                console.log('‚úÖ [handleReadyToggle] –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏');
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–±–±–∏, —Ç.–∫. WS –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                await fetchLobbyInfo();
            }
        } catch (error) {
            console.error('‚ùå [handleReadyToggle] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
        }
    }, [lobbyId, ready, fetchLobbyInfo, user]);

    // üé≤ –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –º–∞—Ç—á–∞
    const handleFormatSelect = useCallback((format) => {
        if (lobby?.match_format) {
            // –§–æ—Ä–º–∞—Ç —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
            return;
        }
        if (!user?.steam_id && !user?.steamId) { setSteamModalOpen(true); return; }
        setSelectedFormat(format);
    }, [lobby, user]);

    // üó∫Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
    const handleMapAction = useCallback(async (mapName, action) => {
        try {
            if (!user?.steam_id && !user?.steamId) { setSteamModalOpen(true); return; }
            const token = localStorage.getItem('token');
            const response = await fetch(`${API_URL}/api/tournaments/lobby/${lobbyId}/select-map`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ mapName, action })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã');
            }

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.error || '–û—à–∏–±–∫–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã:', error);
            alert(error.message);
        }
    }, [lobbyId, user]);

    // üîÑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–µ–π –∫–æ–º–∞–Ω–¥—ã
    const getMyTeamId = useCallback(() => {
        if (lobby && lobby.user_team_id) return lobby.user_team_id;
        return null;
    }, [lobby]);

    const onSteamModalClose = useCallback(() => {
        setSteamModalOpen(false);
        // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å –≤ –ª–æ–±–±–∏
        try { navigate(-1); } catch (_) {}
    }, [navigate]);

    const onSteamLink = useCallback(() => {
        // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ backend steam login (OpenID) –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–≤—è–∑–∫–∏
        const base = process.env.REACT_APP_API_URL || '';
        window.location.href = `${base}/api/users/steam-login`;
    }, []);

    if (loading) {
        return (
            <div className="lobby-match-lobby-page">
                <div className="lobby-loading">
                    <h2>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–±–±–∏...</h2>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="lobby-match-lobby-page">
                <div className="lobby-error">
                    <h2>‚ùå –û—à–∏–±–∫–∞</h2>
                    <p>{error}</p>
                    <button onClick={() => navigate(-1)}>–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        );
    }

    if (steamModalOpen) {
        return (
            <div className="lobby-match-lobby-page">
                <div className="steam-modal-backdrop" onClick={onSteamModalClose} />
                <div className="steam-modal" role="dialog" aria-modal="true">
                    <h3>–ü—Ä–∏–≤—è–∂–∏—Ç–µ Steam</h3>
                    <p>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ª–æ–±–±–∏ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ Steam –∞–∫–∫–∞—É–Ω—Ç–∞.</p>
                    <div className="steam-modal-actions">
                        <button className="btn btn-primary" onClick={onSteamLink}>–ü—Ä–∏–≤—è–∑–∞—Ç—å Steam</button>
                        <button className="btn btn-secondary" onClick={onSteamModalClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
        );
    }

    if (!lobby) {
        return (
            <div className="lobby-match-lobby-page">
                <div className="lobby-error">
                    <h2>‚ùå –õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h2>
                    <button onClick={() => navigate(-1)}>–ù–∞–∑–∞–¥</button>
                </div>
            </div>
        );
    }

    return (
        <div className="lobby-match-lobby-page">
            {/* –•–µ–¥–µ—Ä */}
            <div className="lobby-header">
                <div className="lobby-tournament-info">
                    <h1>{lobby.tournament_name}</h1>
                </div>
                <div className="lobby-match-info">
                    <h2>{lobby.team1_name} vs {lobby.team2_name}</h2>
                    <p>–†–∞—É–Ω–¥ {lobby.round || '?'}</p>
                </div>
            </div>

            {/* –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –º–∞—Ç—á–∞ */}
            {!selectedFormat && lobby.status === 'waiting' && (
                <div className="lobby-format-selection">
                    <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–∞—Ç—á–∞:</h3>
                    <div className="lobby-format-buttons">
                        <button 
                            className="lobby-format-button"
                            onClick={() => handleFormatSelect('bo1')}
                        >
                            Best of 1
                        </button>
                        <button 
                            className="lobby-format-button"
                            onClick={() => handleFormatSelect('bo3')}
                        >
                            Best of 3
                        </button>
                        <button 
                            className="lobby-format-button"
                            onClick={() => handleFormatSelect('bo5')}
                        >
                            Best of 5
                        </button>
                    </div>
                </div>
            )}

            {/* –°—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
            <ParticipantStatus
                team1={{
                    id: lobby.team1_id,
                    name: lobby.team1_name,
                    ready: lobby.team1_ready
                }}
                team2={{
                    id: lobby.team2_id,
                    name: lobby.team2_name,
                    ready: lobby.team2_ready
                }}
                myTeamId={getMyTeamId()}
                onReadyToggle={handleReadyToggle}
                ready={ready}
                canToggle={lobby.status === 'waiting' && !!getMyTeamId()}
            />

            {/* –î–æ—Å–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç */}
            {selectedFormat && lobby.available_maps && (
                <MapSelectionBoard
                    maps={lobby.available_maps}
                    selections={lobby.selections || []}
                    currentTurn={lobby.current_turn_team_id}
                    myTeamId={getMyTeamId()}
                    format={selectedFormat}
                    status={lobby.status}
                    onMapAction={handleMapAction}
                    teamNames={{
                        [lobby.team1_id]: lobby.team1_name,
                        [lobby.team2_id]: lobby.team2_name
                    }}
                />
            )}

            {/* –°—Ç–∞—Ç—É—Å –ª–æ–±–±–∏ */}
            <div className="lobby-status">
                {lobby.status === 'waiting' && (
                    <p>‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</p>
                )}
                {lobby.status === 'ready' && (
                    <p>‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º...</p>
                )}
                {lobby.status === 'picking' && (
                    <p>üéØ –ò–¥–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç...</p>
                )}
                {lobby.status === 'completed' && (
                    <p>‚úÖ –í—ã–±–æ—Ä –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</p>
                )}
            </div>
        </div>
    );
}

export default MatchLobbyPage; 