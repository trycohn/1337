import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useAuth } from '../../context/AuthContext';
import './JoinTournamentModal.css';

/**
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã:
 * - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
 * - –í—ã–±–æ—Ä —Å–≤–æ–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
 * - –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É, —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –≤ —Ç—É—Ä–Ω–∏—Ä
 */
function JoinTournamentModal({ tournament, onClose, onSuccess }) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ localStorage
    const token = localStorage.getItem('token');
    
    const [mode, setMode] = useState('select'); // select, create_team, join_team, solo
    const [teamName, setTeamName] = useState('');
    const [myTeams, setMyTeams] = useState([]);
    const [tournamentTeams, setTournamentTeams] = useState([]);
    const [selectedTeam, setSelectedTeam] = useState(null);
    const [joinMessage, setJoinMessage] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const isSolo = tournament.participant_type === 'solo';
    const isTeamTournament = ['2x2', '3x3', '5x5', 'team'].includes(tournament.participant_type);

    useEffect(() => {
        console.log('üéØ [JoinTournamentModal] –¢—É—Ä–Ω–∏—Ä:', {
            participant_type: tournament.participant_type,
            isSolo,
            isTeamTournament
        });
        
        if (isTeamTournament) {
            loadMyTeams();
            loadTournamentTeams();
        }
    }, []);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const loadMyTeams = async () => {
        try {
            const response = await axios.get(
                `${process.env.REACT_APP_API_URL}/api/teams/for-tournament/${tournament.id}`,
                { headers: { Authorization: `Bearer ${token}` } }
            );
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            const allTeams = [
                ...(response.data.permanent || []),
                ...(response.data.temporary || [])
            ];
            
            setMyTeams(allTeams);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥:', err);
            setMyTeams([]);
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
    const loadTournamentTeams = async () => {
        try {
            const response = await axios.get(
                `${process.env.REACT_APP_API_URL}/api/tournaments/${tournament.id}/teams`
            );
            setTournamentTeams(response.data || []);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä
    const handleJoin = async () => {
        try {
            setLoading(true);
            setError(null);

            if (isSolo) {
                // –î–ª—è —Å–æ–ª–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤ - –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç—É–ø–∞–µ–º
                await axios.post(
                    `${process.env.REACT_APP_API_URL}/api/tournaments/${tournament.id}/participate`,
                    {},
                    { headers: { Authorization: `Bearer ${token}` } }
                );
                onSuccess();
            } else if (mode === 'my_team') {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É
                if (!selectedTeam) {
                    setError('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É');
                    return;
                }

                await axios.post(
                    `${process.env.REACT_APP_API_URL}/api/tournaments/${tournament.id}/participate`,
                    { teamId: selectedTeam.id },
                    { headers: { Authorization: `Bearer ${token}` } }
                );
                onSuccess();
            } else if (mode === 'create_team') {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
                if (!teamName.trim()) {
                    setError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
                    return;
                }

                await axios.post(
                    `${process.env.REACT_APP_API_URL}/api/tournaments/${tournament.id}/participate`,
                    { newTeamName: teamName },
                    { headers: { Authorization: `Bearer ${token}` } }
                );
                onSuccess();
            } else if (mode === 'join_team') {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
                if (!selectedTeam) {
                    setError('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É');
                    return;
                }

                await axios.post(
                    `${process.env.REACT_APP_API_URL}/api/tournaments/${tournament.id}/teams/${selectedTeam.id}/join-requests`,
                    { message: joinMessage },
                    { headers: { Authorization: `Bearer ${token}` } }
                );

                alert('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã!');
                onClose();
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä:', err);
            setError(err.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="modal-overlay" onClick={onClose}>
            <div className="join-tournament-modal" onClick={e => e.stopPropagation()}>
                <div className="modal-header">
                    <h2>–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä</h2>
                    <button className="close-btn" onClick={onClose}>‚úï</button>
                </div>

                <div className="modal-content">
                    {/* –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ */}
                    {isTeamTournament && mode === 'select' && (
                        <div className="mode-selection">
                            <p className="hint">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É—á–∞—Å—Ç–∏—è:</p>
                            
                            <div className="mode-options">
                                {myTeams.length > 0 && (
                                    <button 
                                        className="mode-option"
                                        onClick={() => setMode('my_team')}
                                    >
                                        <span className="icon">‚≠ê</span>
                                        <span className="label">–ú–æ—è –∫–æ–º–∞–Ω–¥–∞</span>
                                        <span className="description">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∏–ª–∏ —Ä–∞–∑–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É</span>
                                    </button>
                                )}

                                <button 
                                    className="mode-option"
                                    onClick={() => setMode('create_team')}
                                >
                                    <span className="icon">‚ûï</span>
                                    <span className="label">–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É</span>
                                    <span className="description">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–∑–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞</span>
                                </button>

                                {tournamentTeams.length > 0 && (
                                    <button 
                                        className="mode-option"
                                        onClick={() => setMode('join_team')}
                                    >
                                        <span className="icon">üë•</span>
                                        <span className="label">–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É</span>
                                        <span className="description">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É</span>
                                    </button>
                                )}
                            </div>
                        </div>
                    )}

                    {/* –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã */}
                    {mode === 'create_team' && (
                        <div className="create-team-form">
                            <button 
                                className="back-btn"
                                onClick={() => setMode('select')}
                            >
                                ‚Üê –ù–∞–∑–∞–¥
                            </button>

                            <h3>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</h3>
                            <p className="hint">–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã</p>

                            <input
                                type="text"
                                className="team-name-input"
                                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
                                value={teamName}
                                onChange={(e) => setTeamName(e.target.value)}
                                maxLength={50}
                                autoFocus
                            />

                            {error && <div className="error-message">{error}</div>}

                            <button 
                                className="btn-primary"
                                onClick={handleJoin}
                                disabled={loading || !teamName.trim()}
                            >
                                {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∏ –≤—Å—Ç—É–ø–∏—Ç—å'}
                            </button>
                        </div>
                    )}

                    {/* –í—ã–±–æ—Ä —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã */}
                    {mode === 'my_team' && (
                        <div className="my-team-form">
                            <button 
                                className="back-btn"
                                onClick={() => setMode('select')}
                            >
                                ‚Üê –ù–∞–∑–∞–¥
                            </button>

                            <h3>–í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã</h3>
                            <p className="hint">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ</p>

                            <div className="teams-list">
                                {myTeams.length === 0 ? (
                                    <div className="empty-state">
                                        <p>–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥</p>
                                    </div>
                                ) : (
                                    myTeams.map(team => (
                                        <div 
                                            key={team.id}
                                            className={`team-item ${selectedTeam?.id === team.id ? 'selected' : ''}`}
                                            onClick={() => setSelectedTeam(team)}
                                        >
                                            <div className="team-info">
                                                <div className="team-header">
                                                    <span className="team-name">{team.name}</span>
                                                    {team.is_permanent && (
                                                        <span className="team-badge permanent">–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è</span>
                                                    )}
                                                </div>
                                                <span className="team-members">
                                                    {team.member_count || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                                </span>
                                            </div>
                                            {selectedTeam?.id === team.id && (
                                                <span className="checkmark">‚úì</span>
                                            )}
                                        </div>
                                    ))
                                )}
                            </div>

                            {selectedTeam && (
                                <>
                                    {error && <div className="error-message">{error}</div>}

                                    <button 
                                        className="btn-primary"
                                        onClick={handleJoin}
                                        disabled={loading}
                                    >
                                        {loading ? '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ...' : '–í—Å—Ç—É–ø–∏—Ç—å —Å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π'}
                                    </button>
                                </>
                            )}
                        </div>
                    )}

                    {/* –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É */}
                    {mode === 'join_team' && (
                        <div className="join-team-form">
                            <button 
                                className="back-btn"
                                onClick={() => setMode('select')}
                            >
                                ‚Üê –ù–∞–∑–∞–¥
                            </button>

                            <h3>–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É</h3>
                            <p className="hint">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞</p>

                            <div className="teams-list">
                                {tournamentTeams.length === 0 ? (
                                    <div className="empty-state">
                                        <p>–í —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥</p>
                                    </div>
                                ) : (
                                    tournamentTeams.map(team => (
                                        <div 
                                            key={team.id}
                                            className={`team-item ${selectedTeam?.id === team.id ? 'selected' : ''}`}
                                            onClick={() => setSelectedTeam(team)}
                                        >
                                            <div className="team-info">
                                                <span className="team-name">{team.name}</span>
                                                <span className="team-members">
                                                    {team.member_count || 0} / {getMaxTeamSize(tournament.participant_type)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                                </span>
                                            </div>
                                            {selectedTeam?.id === team.id && (
                                                <span className="checkmark">‚úì</span>
                                            )}
                                        </div>
                                    ))
                                )}
                            </div>

                            {selectedTeam && (
                                <>
                                    <div className="message-field">
                                        <label>–°–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</label>
                                        <textarea
                                            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                                            value={joinMessage}
                                            onChange={(e) => setJoinMessage(e.target.value)}
                                            maxLength={200}
                                        />
                                    </div>

                                    {error && <div className="error-message">{error}</div>}

                                    <button 
                                        className="btn-primary"
                                        onClick={handleJoin}
                                        disabled={loading}
                                    >
                                        {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å'}
                                    </button>
                                </>
                            )}
                        </div>
                    )}

                    {/* –°–æ–ª–æ —Ç—É—Ä–Ω–∏—Ä—ã */}
                    {isSolo && (
                        <div className="solo-join">
                            <p className="hint">–í—ã –≥–æ—Ç–æ–≤—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ?</p>

                            {error && <div className="error-message">{error}</div>}

                            <button 
                                className="btn-primary"
                                onClick={handleJoin}
                                disabled={loading}
                            >
                                {loading ? '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ...' : '–í—Å—Ç—É–ø–∏—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä'}
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
function getMaxTeamSize(participantType) {
    const sizes = {
        'solo': 1,
        '2x2': 2,
        '3x3': 3,
        '5x5': 5
    };
    return sizes[participantType] || 5;
}

export default JoinTournamentModal;

