import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './TournamentInvites.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
 * –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
 */
function TournamentInvites({ tournament, token }) {
    const [invites, setInvites] = useState([]);
    const [loading, setLoading] = useState(true);
    const [creating, setCreating] = useState(false);
    const [showCreateForm, setShowCreateForm] = useState(false);
    const [newInvite, setNewInvite] = useState({
        max_uses: '',
        expires_in_days: ''
    });
    const [copiedId, setCopiedId] = useState(null);

    useEffect(() => {
        loadInvites();
    }, [tournament.id]);

    const loadInvites = async () => {
        try {
            setLoading(true);
            const response = await axios.get(
                `${process.env.REACT_APP_API_URL}/api/tournaments/${tournament.id}/invites`,
                { headers: { Authorization: `Bearer ${token}` } }
            );
            setInvites(response.data.invites || []);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–∞–π—Ç–æ–≤:', err);
        } finally {
            setLoading(false);
        }
    };

    const handleCreateInvite = async () => {
        try {
            setCreating(true);
            const payload = {};
            
            if (newInvite.max_uses) {
                payload.max_uses = parseInt(newInvite.max_uses);
            }
            if (newInvite.expires_in_days) {
                payload.expires_in_days = parseInt(newInvite.expires_in_days);
            }

            const response = await axios.post(
                `${process.env.REACT_APP_API_URL}/api/tournaments/${tournament.id}/invites`,
                payload,
                { headers: { Authorization: `Bearer ${token}` } }
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç –≤ —Å–ø–∏—Å–æ–∫
            setInvites([response.data.invite, ...invites]);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            setNewInvite({ max_uses: '', expires_in_days: '' });
            setShowCreateForm(false);
            
            alert('‚úÖ –ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞:', err);
            alert(err.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É');
        } finally {
            setCreating(false);
        }
    };

    const copyInviteLink = (inviteCode, inviteId) => {
        const baseUrl = process.env.REACT_APP_PUBLIC_URL || window.location.origin;
        const inviteUrl = `${baseUrl}/tournaments/invite/${inviteCode}`;
        
        navigator.clipboard.writeText(inviteUrl).then(() => {
            setCopiedId(inviteId);
            setTimeout(() => setCopiedId(null), 2000);
        });
    };

    const handleDeactivate = async (inviteId) => {
        if (!window.confirm('–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É?')) return;

        try {
            await axios.put(
                `${process.env.REACT_APP_API_URL}/api/tournaments/${tournament.id}/invites/${inviteId}/deactivate`,
                {},
                { headers: { Authorization: `Bearer ${token}` } }
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            setInvites(invites.map(inv => 
                inv.id === inviteId ? { ...inv, is_active: false } : inv
            ));
            
            alert('‚úÖ –°—Å—ã–ª–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', err);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É');
        }
    };

    const handleDelete = async (inviteId) => {
        if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É?')) return;

        try {
            await axios.delete(
                `${process.env.REACT_APP_API_URL}/api/tournaments/${tournament.id}/invites/${inviteId}`,
                { headers: { Authorization: `Bearer ${token}` } }
            );

            // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            setInvites(invites.filter(inv => inv.id !== inviteId));
            
            alert('‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É');
        }
    };

    if (loading) {
        return (
            <div className="tournament-invites">
                <h3>üîó –ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏</h3>
                <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
        );
    }

    return (
        <div className="tournament-invites">
            <div className="invites-header">
                <h3>üîó –ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏</h3>
                <button 
                    className="btn-create-invite"
                    onClick={() => setShowCreateForm(!showCreateForm)}
                >
                    {showCreateForm ? '‚úï –û—Ç–º–µ–Ω–∞' : '‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É'}
                </button>
            </div>

            {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
            {showCreateForm && (
                <div className="create-invite-form">
                    <div className="form-row">
                        <div className="form-field">
                            <label>–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                            <input
                                type="number"
                                placeholder="–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
                                value={newInvite.max_uses}
                                onChange={(e) => setNewInvite({ ...newInvite, max_uses: e.target.value })}
                                min="1"
                            />
                        </div>
                        <div className="form-field">
                            <label>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–¥–Ω–µ–π)</label>
                            <input
                                type="number"
                                placeholder="–ë–µ—Å—Å—Ä–æ—á–Ω–æ"
                                value={newInvite.expires_in_days}
                                onChange={(e) => setNewInvite({ ...newInvite, expires_in_days: e.target.value })}
                                min="1"
                            />
                        </div>
                    </div>
                    <button 
                        className="btn-create"
                        onClick={handleCreateInvite}
                        disabled={creating}
                    >
                        {creating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å'}
                    </button>
                </div>
            )}

            {/* –°–ø–∏—Å–æ–∫ –∏–Ω–≤–∞–π—Ç–æ–≤ */}
            {invites.length === 0 ? (
                <div className="empty-state">
                    <p>–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫</p>
                    <p className="hint">–°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
                </div>
            ) : (
                <div className="invites-list">
                    {invites.map(invite => (
                        <div 
                            key={invite.id} 
                            className={`invite-item ${!invite.is_active ? 'inactive' : ''}`}
                        >
                            <div className="invite-info">
                                <div className="invite-code">
                                    <span className="code-label">–ö–æ–¥:</span>
                                    <code>{invite.invite_code}</code>
                                    {!invite.is_active && (
                                        <span className="inactive-badge">–ù–µ–∞–∫—Ç–∏–≤–Ω–∞</span>
                                    )}
                                </div>
                                
                                <div className="invite-stats">
                                    <span className="stat">
                                        üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {invite.current_uses}
                                        {invite.max_uses ? ` / ${invite.max_uses}` : ' / ‚àû'}
                                    </span>
                                    {invite.expires_at && (
                                        <span className="stat">
                                            ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {new Date(invite.expires_at).toLocaleDateString('ru-RU')}
                                        </span>
                                    )}
                                    <span className="stat">
                                        üë§ –°–æ–∑–¥–∞–ª: {invite.creator_username}
                                    </span>
                                </div>
                            </div>

                            <div className="invite-actions">
                                <button
                                    className={`btn-copy ${copiedId === invite.id ? 'copied' : ''}`}
                                    onClick={() => copyInviteLink(invite.invite_code, invite.id)}
                                    disabled={!invite.is_active}
                                >
                                    {copiedId === invite.id ? '‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ' : 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
                                </button>
                                
                                {invite.is_active && (
                                    <button
                                        className="btn-deactivate"
                                        onClick={() => handleDeactivate(invite.id)}
                                    >
                                        üîí –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                )}
                                
                                <button
                                    className="btn-delete"
                                    onClick={() => handleDelete(invite.id)}
                                >
                                    üóëÔ∏è
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
}

export default TournamentInvites;

