import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { PickBanTimeline } from './match-stats/PickBanTimeline';
import { LeadersPanel } from './match-stats/LeadersPanel';
import { ScoreTable } from './match-stats/ScoreTable';
import './match-stats/match-stats.css';
import { MapsAccordion } from './match-stats/MapsAccordion';
import { SkeletonCards, SkeletonTable, SkeletonMapTiles } from './match-stats/Skeletons';
import { StatusPanel } from './match-stats/StatusPanel';
import { useUser } from '../../context/UserContext';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { ensureHttps } from '../../utils/userHelpers';
import { getParticipantInfo } from '../../utils/participantHelpers';
import MatchMetaTags from '../SEO/MatchMetaTags';
import MatchShareModal from './modals/MatchShareModal';
import EditMatchResultModal from './modals/EditMatchResultModal'; // ‚úèÔ∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import { MatchFeedbackManager } from '../feedback'; // üéÆ Match Feedback —Å–∏—Å—Ç–µ–º–∞
import api from '../../axios'; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–º–ø–æ—Ä—Ç axios
import useTournamentSocket from '../../hooks/tournament/useTournamentSocket'; // üî¥ WebSocket –¥–ª—è live –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
import './MatchDetailsPage.css';

/**
 * üìã –°–¢–†–ê–ù–ò–¶–ê –î–ï–¢–ê–õ–ï–ô –ú–ê–¢–ß–ê (HLTV Style)
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–µ
 * @version 2.0
 */
const MatchDetailsPage = () => {
    const { tournamentId, matchId } = useParams();
    const navigate = useNavigate();
    const [match, setMatch] = useState(null);
    const [tournament, setTournament] = useState(null);
    const [teamHistory, setTeamHistory] = useState({ team1: [], team2: [] });
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isShareModalOpen, setIsShareModalOpen] = useState(false);
    const { user } = useUser();
    const [editingMapIndex, setEditingMapIndex] = useState(null);
    const [isScoreModalOpen, setIsScoreModalOpen] = useState(false);
    const [score1Input, setScore1Input] = useState('');
    const [score2Input, setScore2Input] = useState('');
    const [isSavingMap, setIsSavingMap] = useState(false);
    const [editingMapKey, setEditingMapKey] = useState(null);
    const [userIsAdmin, setUserIsAdmin] = useState(false);
    const [currentUserId, setCurrentUserId] = useState(null);
    // üÜï –õ–æ–±–±–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –º–∞—Ç—á–∞
    const [lobbyStats, setLobbyStats] = useState(null);
    const [expandedMap, setExpandedMap] = useState(null);
    const [pollVersion, setPollVersion] = useState(0);
    const [compact, setCompact] = useState(true);
    useEffect(() => { try { localStorage.setItem('match_compact_mode','true'); } catch(_) {} }, []);
    // üé¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–º–æ-—Ñ–∞–π–ª—ã
    const [demosAvailable, setDemosAvailable] = useState({});
    
    // ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
    const [isEditMatchModalOpen, setIsEditMatchModalOpen] = useState(false);
    const [editMatchData, setEditMatchData] = useState(null);
    
    // üéÆ FEEDBACK: State –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const [showFeedbackPrompt, setShowFeedbackPrompt] = useState(false);
    const [feedbackChecked, setFeedbackChecked] = useState(false);

    // üîç fetchMatchDetails –ë–ï–ó useCallback –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    const fetchMatchDetails = async () => {
        try {
            setLoading(true);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –∏ —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—É–±–ª–∏—á–Ω—ã–µ —Ä–æ—É—Ç—ã)
            let matchResponse, tournamentResponse;
            try {
                [matchResponse, tournamentResponse] = await Promise.all([
                    fetch(`/api/tournaments/${tournamentId}/match/${matchId}`),
                    fetch(`/api/tournaments/${tournamentId}`)
                ]);
            } catch (fetchError) {
                console.error('‚ùå [MatchDetailsPage] –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', fetchError);
                throw new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
            }

            if (!matchResponse.ok) {
                const errorText = await matchResponse.text();
                console.error('‚ùå [MatchDetailsPage] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–∞:', matchResponse.status, errorText);
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–∞ (${matchResponse.status})`);
            }
            
            if (!tournamentResponse.ok) {
                const errorText = await tournamentResponse.text();
                console.error('‚ùå [MatchDetailsPage] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', tournamentResponse.status, errorText);
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ (${tournamentResponse.status})`);
            }

            const matchData = await matchResponse.json();
            const tournamentData = await tournamentResponse.json();
            
            // –ù–æ–≤—ã–π –ø—É–±–ª–∏—á–Ω—ã–π —Ä–æ—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–µ data
            const matchInfo = matchData.data || matchData;
            const tournamentInfo = tournamentData.data || tournamentData;
            
            setMatch(matchInfo);
            // üÜï –õ–æ–±–±–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–µ—Å–ª–∏ –º–∞—Ç—á —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –ª–æ–±–±–∏)
            // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑
            let matchzyMatchId = null;
            
                try {
                    const ls = await api.get(`/api/matches/tournament/${matchId}/stats?v=${pollVersion}`);
                    if (ls?.data?.success) {
                        const s = ls.data;
                        console.log('‚úÖ [MatchDetailsPage] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', {
                            maps: s.maps?.length,
                            pickban: s.pickban?.length,
                            playersByTeam: s.playersByTeam ? '–¥–∞' : '–Ω–µ—Ç',
                            playersByMap: s.playersByMap ? Object.keys(s.playersByMap).length : 0,
                            playersByMapKeys: Object.keys(s.playersByMap || {})
                        });
                        
                        // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ä—Ç –∏ selections –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∞–∫–∫–æ—Ä–¥–µ–æ–Ω—ã –±—É–¥—É—Ç –ø–æ–∑–∂–µ)
                        matchInfo.maps_data = s.maps?.map(m => ({
                            map_name: m.mapname,
                            team1_score: m.team1_score,
                            team2_score: m.team2_score
                        })) || matchInfo.maps_data;
                        matchInfo.selections = (Array.isArray(s.pickban) ? s.pickban.map(x => ({
                            action_type: x.action,
                            team_id: x.team_id,
                            map_name: x.mapname
                        })) : matchInfo.selections) || [];
                        // –ü—Ä–∏—Å–≤–æ–∏–º, —á—Ç–æ–±—ã –æ—Ç—Ä–∏—Å–æ–≤–∞–ª–∏ –±–ª–æ–∫–∏ –∫–∞—Ä—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é
                        setMatch({ ...matchInfo });
                        setLobbyStats(s);
                        matchzyMatchId = s.matchid;
                    }
                } catch (err) { 
                console.log('üìä [MatchDetailsPage] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ä—É—á–Ω—ã—Ö –º–∞—Ç—á–µ–π):', err.response?.status);
                // –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –ë–ï–ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞
                if (matchInfo.status === 'completed') {
                    console.log('‚è∏Ô∏è [MatchDetailsPage] –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
                }
            }
            setTournament(tournamentInfo);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥
            if (matchInfo.team1_id && matchInfo.team2_id) {
                await fetchTeamHistory(matchInfo.team1_id, matchInfo.team2_id);
            }
            
            // üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–º–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å matchzy matchid)
            if (matchzyMatchId) {
                await fetchAvailableDemos(matchzyMatchId);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞:', err);
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };

    // üîÑ –í–´–ó–´–í–ê–ï–ú fetchMatchDetails –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    useEffect(() => {
        fetchMatchDetails();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [tournamentId, matchId, pollVersion]);

    useEffect(() => {
        // –§–æ–ª–±–µ–∫: –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        try {
            if (user?.id) { setCurrentUserId(user.id); return; }
            const token = localStorage.getItem('token');
            if (!token) return;
            const payload = JSON.parse(atob(token.split('.')[1]));
            if (payload?.id) setCurrentUserId(payload.id);
        } catch (e) {
            // ignore
        }
    }, [user]);
    
    // üî¥ LIVE –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ú–ê–¢–ß–ê –ß–ï–†–ï–ó WEBSOCKET
    const handleTournamentUpdate = useCallback((data) => {
        console.log('üîÑ [MatchDetailsPage] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:', data);
        
        // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –≤—Ä—É—á–Ω—É—é
        if (match?.status === 'completed' && !lobbyStats) {
            console.log('‚è∏Ô∏è [MatchDetailsPage] –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –≤—Ä—É—á–Ω—É—é, –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
            return;
        }
        
        // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Å–∞–µ—Ç—Å—è –Ω–∞—à–µ–≥–æ –º–∞—Ç—á–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º pollVersion –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        if (data && typeof data === 'object') {
            const updateType = data._metadata?.updateType;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞
            if (updateType === 'match_updated' && data.matchId === parseInt(matchId)) {
                console.log('üéØ [MatchDetailsPage] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –º–∞—Ç—á–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...');
                setPollVersion(v => v + 1);
            }
            // –û–±—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π
            else if (data.matches || updateType === 'matches_update') {
                console.log('üîÑ [MatchDetailsPage] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...');
                setPollVersion(v => v + 1);
            }
        }
    }, [matchId, match, lobbyStats]);

    const handleMatchUpdate = useCallback((data) => {
        console.log('üéØ [MatchDetailsPage] –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞:', data);
        
        // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –≤—Ä—É—á–Ω—É—é
        if (match?.status === 'completed' && !lobbyStats) {
            console.log('‚è∏Ô∏è [MatchDetailsPage] –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –≤—Ä—É—á–Ω—É—é, –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
            return;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –º–∞—Ç—á–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if (data && data.matchId === parseInt(matchId)) {
            console.log('‚úÖ [MatchDetailsPage] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–∞—à–µ–º—É –º–∞—Ç—á—É, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...');
            setPollVersion(v => v + 1);
        }
    }, [matchId, match, lobbyStats]);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –¥–ª—è live –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    useTournamentSocket({
        tournamentId,
        user,
        onTournamentUpdate: handleTournamentUpdate,
        onParticipantUpdate: () => {}, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞—Ç—á–∞
        onError: (error) => console.error('‚ùå [MatchDetailsPage] WebSocket error:', error)
    });
    
    // üéÆ FEEDBACK: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å feedback
    useEffect(() => {
        const checkFeedbackNeeded = async () => {
            if (!match || !user || feedbackChecked) return;
            
            // –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
            if (match.state !== 'DONE' && match.state !== 'SCORE_DONE') return;
            
            try {
                const response = await api.get(`/api/matches/${match.id}/feedback/check`);
                
                if (!response.data.feedback_given) {
                    // –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
                    setTimeout(() => {
                        setShowFeedbackPrompt(true);
                    }, 1500);
                }
                
                setFeedbackChecked(true);
            } catch (error) {
                console.log('Feedback check failed, skipping');
                setFeedbackChecked(true);
            }
        };
        
        checkFeedbackNeeded();
    }, [match, user, feedbackChecked]);

    const fetchTeamHistory = async (team1Id, team2Id) => {
        try {
            const [team1History, team2History] = await Promise.all([
                fetch(`/api/teams/${team1Id}/matches?limit=5`).then(r => r.ok ? r.json() : { data: [] }),
                fetch(`/api/teams/${team2Id}/matches?limit=5`).then(r => r.ok ? r.json() : { data: [] })
            ]);
            
            setTeamHistory({
                team1: team1History.data || [],
                team2: team2History.data || []
            });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥:', err);
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
        }
    };

    // üé¨ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–º–æ-—Ñ–∞–π–ª–æ–≤
    const fetchAvailableDemos = async (matchzyMatchId) => {
        try {
            const response = await fetch(`/api/demos/available/${matchzyMatchId}`);
            if (response.ok) {
                const demos = await response.json();
                setDemosAvailable(demos);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–µ–º–æ–∫:', err);
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥–µ—Ç –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        }
    };

    const handleCompleteMatch = async () => {
        if (!isAdminOrCreator) return;
        if (!window.confirm('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ç—á–∞? –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.')) return;
        try {
            const token = localStorage.getItem('token');
            if (!token) { alert('–ù—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'); return; }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            let winnerTeamId = match.winner_team_id;
            let s1 = Number.isFinite(match.score1) ? match.score1 : 0;
            let s2 = Number.isFinite(match.score2) ? match.score2 : 0;

            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ä—Ç–∞–º
            if (Array.isArray(match.maps_data) && match.maps_data.length > 0) {
                // 1) –†–æ–≤–Ω–æ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç = —Å—á—ë—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç—ã
                if (match.maps_data.length === 1) {
                    const only = match.maps_data[0];
                    const m1 = (only.score1 ?? only.team1_score);
                    const m2 = (only.score2 ?? only.team2_score);
                    if (typeof m1 === 'number' && typeof m2 === 'number') {
                        s1 = m1;
                        s2 = m2;
                    }
                } else {
                    // 2) –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç ‚Äî –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
                    let wins1 = 0;
                    let wins2 = 0;
                    for (const m of match.maps_data) {
                        const m1 = (m.score1 ?? m.team1_score);
                        const m2 = (m.score2 ?? m.team2_score);
                        if (typeof m1 === 'number' && typeof m2 === 'number') {
                            if (m1 > m2) wins1++; else if (m2 > m1) wins2++;
                        }
                    }
                    if (wins1 + wins2 > 0) {
                        s1 = wins1;
                        s2 = wins2;
                    }
                }
            }

            if (!winnerTeamId) {
                if (s1 !== s2) {
                    winnerTeamId = s1 > s2 ? match.team1_id : match.team2_id;
                } else if (Array.isArray(match.maps_data) && match.maps_data.length > 0) {
                    let wins1 = 0, wins2 = 0;
                    for (const m of match.maps_data) {
                        const m1 = (m.score1 ?? m.team1_score) ?? 0;
                        const m2 = (m.score2 ?? m.team2_score) ?? 0;
                        if (m1 > m2) wins1++; else if (m2 > m1) wins2++;
                    }
                    if (wins1 !== wins2) winnerTeamId = wins1 > wins2 ? match.team1_id : match.team2_id;
                }
            }

            if (!winnerTeamId) { alert('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ —Å—á—ë—Ç –∏–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.'); return; }

            const body = {
                winner_team_id: winnerTeamId,
                score1: s1,
                score2: s2,
                maps_data: match.maps_data || []
            };

            const resp = await fetch(`/api/tournaments/${tournamentId}/matches/${matchId}/result`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },
                body: JSON.stringify(body)
            });
            if (!resp.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á');
            await fetchMatchDetails();
            alert('–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à—ë–Ω');
        } catch (e) {
            alert(e.message || '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞');
        }
    };

    // ‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
    const handleEditMatch = () => {
        if (!isAdminOrCreator) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (!match.team1_id || !match.team2_id) {
            alert('–ù–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–∞—Ç—á–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.');
            return;
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        setEditMatchData({
            maps_data: match.maps_data || [],
            score1: match.score1,
            score2: match.score2,
            winner_team_id: match.winner_team_id
        });
        setIsEditMatchModalOpen(true);
    };

    // üì• –†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const [isImporting, setIsImporting] = useState(false);
    const handleImportStats = async () => {
        if (!matchId) return;
        
        const confirmImport = window.confirm(
            '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞?\n\n' +
            '–≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç —Å—á–µ—Ç –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.'
        );
        
        if (!confirmImport) return;
        
        try {
            setIsImporting(true);
            const token = localStorage.getItem('token');
            
            const response = await api.post(
                `/api/matchzy/import-match-stats/${matchId}`,
                {},
                { headers: { Authorization: `Bearer ${token}` } }
            );
            
            if (response.data.success) {
                alert('–ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {
                    fetchMatchDetails();
                    setPollVersion(v => v + 1);
                }, 5000);
            } else {
                throw new Error(response.data.error || '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            alert(error.response?.data?.error || error.message || '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        } finally {
            setIsImporting(false);
        }
    };

    // ‚úèÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
    const handleSaveEditedMatch = async (updatedData) => {
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                alert('–ù—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                return;
            }

            const resp = await fetch(`/api/tournaments/${tournamentId}/matches/${matchId}/result`, {
                method: 'PUT',
                headers: { 
                    'Content-Type': 'application/json', 
                    Authorization: `Bearer ${token}` 
                },
                body: JSON.stringify(updatedData)
            });

            const result = await resp.json();

            if (!resp.ok) {
                throw new Error(result.message || result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            if (result.limitedEdit) {
                alert(result.message || '–ò–∑–º–µ–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ —Å—ã–≥—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏');
            } else {
                alert('–ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω');
            }

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            setIsEditMatchModalOpen(false);
            await fetchMatchDetails();

        } catch (e) {
            alert(e.message || '–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞');
        }
    };

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω–æ ‚Äî —Å—á—ë—Ç –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–∫–æ–º –ø–æ –∫–∞—Ä—Ç–µ

    const getTeamLogo = (team) => {
        if (!team) return '/default-avatar.png';
        return team.avatar_url || team.logo_url || '/default-avatar.png';
    };

    const getMapImage = (mapName) => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É
        const mapImages = {
            'dust2': '/images/maps/dust2.jpg',
            'mirage': '/images/maps/mirage.jpg',
            'inferno': '/images/maps/inferno.jpg',
            'nuke': '/images/maps/nuke.jpg',
            'overpass': '/images/maps/overpass.jpg',
            'vertigo': '/images/maps/vertigo.jpg',
            'ancient': '/images/maps/ancient.jpg',
            'anubis': '/images/maps/anubis.jpg',
            'train': '/images/maps/train.jpg',
            'de_train': '/images/maps/train.jpg'
        };
        return mapImages[mapName?.toLowerCase()] || '/images/maps/mirage.jpg';
    };
    const isAdminOrCreator = !!(tournament && (
        (currentUserId && tournament.created_by === currentUserId) ||
        userIsAdmin ||
        (Array.isArray(tournament.admins) && currentUserId && tournament.admins.some(a => a.user_id === currentUserId))
    ));

    useEffect(() => {
        // –§–æ–ª–±–µ–∫-–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ —Å–ø–∏—Å–æ–∫ admins –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        const checkAdmin = async () => {
            try {
                if (!tournamentId) return;
                if (tournament && currentUserId && tournament.created_by === currentUserId) { setUserIsAdmin(true); return; }
                const token = localStorage.getItem('token');
                if (!token) return;
                const resp = await fetch(`/api/tournaments/${tournamentId}/admin-request-status`, {
                    headers: { Authorization: `Bearer ${token}` }
                });
                if (!resp.ok) return;
                const data = await resp.json();
                if (data?.status === 'accepted') setUserIsAdmin(true);
            } catch (_) {}
        };
        checkAdmin();
    }, [currentUserId, tournament, tournamentId]);

    const renderPickedMapsWithSides = () => {
        const rawMapsData = match?.maps_data;
        const selections = match?.selections || [];
        const mapsData = (Array.isArray(rawMapsData) && rawMapsData.length > 0)
            ? rawMapsData
            : getPickedMapsFromSelections().map(n => ({ map_name: n, score1: null, score2: null }));
        if (!Array.isArray(mapsData) || mapsData.length === 0) return null;
        const teamNameById = {
            [match.team1_id]: match.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1',
            [match.team2_id]: match.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'
        };
        // –î–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –∏—â–µ–º, –∫—Ç–æ –¥–µ–ª–∞–ª pick
        const items = mapsData.map((m, idx) => {
            const pick = selections.find(s => (s.action_type || s.type) === 'pick' && normalizeMapName(s.map_name || s.map || s.name) === normalizeMapName(m.map_name));
            const pickerTeamId = pick?.team_id;
            const sideChooserTeamId = pickerTeamId ? (pickerTeamId === match.team1_id ? match.team2_id : match.team1_id) : null;
            const sideChooserName = sideChooserTeamId ? teamNameById[sideChooserTeamId] : '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è';
            return (
                <div
                    key={`${m.map_name}-${idx}`}
                    className="match-map-card"
                    onClick={() => {
                        if (!isAdminOrCreator) return;
                        if (editingMapIndex === idx) return;
                        setEditingMapIndex(idx);
                        setScore1Input(m.score1 ?? '');
                        setScore2Input(m.score2 ?? '');
                    }}
                    style={{ cursor: isAdminOrCreator ? 'pointer' : 'default' }}
                >
                    <img src={getMapImage(m.map_name)} alt={m.map_name} />
                    
                    {/* üé¨ –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–µ–º–∫–∏ */}
                    {demosAvailable[idx + 1]?.available && lobbyStats?.matchid && (
                        <button
                            className="demo-download-btn"
                            onClick={(e) => {
                                e.stopPropagation();
                                window.location.href = `/api/demos/download/${lobbyStats.matchid}/${idx + 1}`;
                            }}
                            title="–°–∫–∞—á–∞—Ç—å –¥–µ–º–∫—É"
                        >
                            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 15.575q-.2 0-.375-.062T11.3 15.3l-3.6-3.6q-.275-.275-.275-.7t.275-.7q.275-.275.7-.275t.7.275l2.2 2.2V5q0-.425.288-.712T12 4q.425 0 .713.288T13 5v7.5l2.2-2.2q.275-.275.7-.275t.7.275q.275.275.275.7t-.275.7l-3.6 3.6q-.15.15-.325.213t-.375.062M6 20q-.825 0-1.412-.587T4 18v-2q0-.425.288-.712T5 15q.425 0 .713.288T6 16v2h12v-2q0-.425.288-.712T19 15q.425 0 .713.288T20 16v2q0 .825-.587 1.413T18 20z"/>
                            </svg>
                        </button>
                    )}
                    
                    <div className="map-title">–ö–∞—Ä—Ç–∞ {idx + 1}: {m.map_name}</div>
                    <div className="map-meta">–°—Ç–æ—Ä–æ–Ω—É –≤—ã–±–∏—Ä–∞–µ—Ç: {sideChooserName}</div>
                    {isAdminOrCreator && (
                        editingMapIndex === idx ? (
                            <div className="map-inline-editor" style={{ display: 'flex', gap: 8, alignItems: 'center', marginTop: 8 }}>
                                <input
                                    type="number"
                                    min="0"
                                    className="score-input"
                                    style={{ width: 64 }}
                                    value={score1Input}
                                    onChange={(e) => setScore1Input(e.target.value)}
                                    placeholder={teamNameById[match.team1_id]}
                                />
                                <span>:</span>
                                <input
                                    type="number"
                                    min="0"
                                    className="score-input"
                                    style={{ width: 64 }}
                                    value={score2Input}
                                    onChange={(e) => setScore2Input(e.target.value)}
                                    placeholder={teamNameById[match.team2_id]}
                                />
                                <button
                                    className="btn btn-primary"
                                    disabled={isSavingMap}
                                    onClick={async () => {
                                        try {
                                            setIsSavingMap(true);
                                            const token = localStorage.getItem('token');
                                            const s1 = score1Input === '' ? null : parseInt(score1Input, 10);
                                            const s2 = score2Input === '' ? null : parseInt(score2Input, 10);
                                            const body = {
                                                maps_data: mapsData.map((mm, i) => i === idx ? { ...mm, score1: s1, score2: s2 } : mm)
                                            };
                                            const resp = await fetch(`/api/tournaments/${tournamentId}/matches/${matchId}/result`, {
                                                method: 'POST',
                                                headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },
                                                body: JSON.stringify(body)
                                            });
                                            if (!resp.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—á—ë—Ç –∫–∞—Ä—Ç—ã');
                                            await fetchMatchDetails();
                                            setEditingMapIndex(null);
                                        } catch (e) {
                                            alert(e.message);
                                        } finally {
                                            setIsSavingMap(false);
                                        }
                                    }}
                                >
                                    {isSavingMap ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ‚Ä¶' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                                </button>
                                <button
                                    className="btn btn-secondary"
                                    disabled={isSavingMap}
                                    onClick={() => setEditingMapIndex(null)}
                                >
                                    –û—Ç–º–µ–Ω–∏—Ç—å
                                </button>
                            </div>
                        ) : (
                            <div className="map-edit-hint" style={{ marginTop: 8, position: 'relative' }}>
                                <button
                                    className="btn btn-secondary"
                                    style={{ position: 'relative', zIndex: 2, pointerEvents: 'auto' }}
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        setEditingMapIndex(idx);
                                        setScore1Input(m.score1 ?? '');
                                        setScore2Input(m.score2 ?? '');
                                    }}
                                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç –∫–∞—Ä—Ç—ã"
                                >
                                    –í–≤–µ—Å—Ç–∏ —Å—á—ë—Ç
                                </button>
                            </div>
                        )
                    )}
                </div>
            );
        });
        return (
            <section className="match-picked-maps">
                <h3>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã</h3>
                <div className="match-maps-grid">{items}</div>
            </section>
        );
    };

    const renderSelectionsHistory = () => {
        const selections = match?.selections || [];
        if (!Array.isArray(selections) || selections.length === 0) return null;
        const teamNameById = {
            [match.team1_id]: match.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1',
            [match.team2_id]: match.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'
        };
        return (
            <section className="match-veto-history">
                <h3>–ò—Å—Ç–æ—Ä–∏—è –ø–∏–∫–æ–≤/–±–∞–Ω–æ–≤</h3>
                <ol>
                    {selections.map((s, i) => (
                        <li key={i} className={`veto-item ${s.action_type}`}>
                            {teamNameById[s.team_id] || '–ö–æ–º–∞–Ω–¥–∞'} {s.action_type} {s.map_name}
                        </li>
                    ))}
                </ol>
            </section>
        );
    };

    const getMatchStatusClass = (status) => {
        const statusClasses = {
            'scheduled': 'status-scheduled',
            'live': 'status-live',
            'completed': 'status-completed',
            'cancelled': 'status-cancelled'
        };
        return statusClasses[status] || 'status-default';
    };

    const getMatchStatusText = (status) => {
        const statusTexts = {
            'scheduled': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
            'live': 'LIVE',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
        };
        return statusTexts[status] || status;
    };

    // üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º useMemo –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    const displayedScores = useMemo(() => {
        if (!match) return [0, 0];
        
        const maps = match?.maps_data;
        
        console.log('üéØ [useMemo displayedScores] –†–∞—Å—á–µ—Ç —Å—á–µ—Ç–∞:', {
            hasMaps: Array.isArray(maps),
            mapsCount: maps?.length,
            maps: maps,
            matchScore1: match?.score1,
            matchScore2: match?.score2
        });
        
        if (Array.isArray(maps) && maps.length > 0) {
            // –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—á—ë—Ç –∫–∞—Ä—Ç—ã
            if (maps.length === 1) {
                const only = maps[0];
                const m1 = parseInt(only.score1 ?? only.team1_score) || 0;
                const m2 = parseInt(only.score2 ?? only.team2_score) || 0;
                console.log('üìä –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—á–µ—Ç:', [m1, m2]);
                return [m1, m2];
            }
            // –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
            let wins1 = 0, wins2 = 0;
            for (const m of maps) {
                const m1 = parseInt(m.score1 ?? m.team1_score) || 0;
                const m2 = parseInt(m.score2 ?? m.team2_score) || 0;
                console.log(`  –ö–∞—Ä—Ç–∞: ${m.map_name || m.mapName || 'unknown'} - ${m1}:${m2}`);
                if (m1 > m2) wins1++;
                else if (m2 > m1) wins2++;
            }
            console.log(`üìä –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç, wins: ${wins1}:${wins2}`);
            if (wins1 + wins2 > 0) return [wins1, wins2];
        }
        const s1 = parseInt(match?.score1) || 0;
        const s2 = parseInt(match?.score2) || 0;
        console.log(`üìä Fallback –∫ score1:score2 =`, [s1, s2]);
        return [s1, s2];
    }, [match, match?.maps_data, match?.score1, match?.score2]);

    const formatDate = (date) => {
        if (!date) return '';
        return new Date(date).toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    function normalizeMapName(raw) {
        if (!raw) return '';
        let name = String(raw).toLowerCase().trim();
        name = name.replace(/^de[_\-\s]?/, ''); // —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å de_
        name = name.replace(/\s+/g, ' ').trim();
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        if (name.includes('dust')) return 'dust2';
        if (name.includes('mirage')) return 'mirage';
        if (name.includes('inferno')) return 'inferno';
        if (name.includes('nuke')) return 'nuke';
        if (name.includes('overpass')) return 'overpass';
        if (name.includes('vertigo')) return 'vertigo';
        if (name.includes('ancient')) return 'ancient';
        if (name.includes('anubis')) return 'anubis';
        return name.replace(/\s|\-/g, '');
    }

    function getPickedMapsFromSelections() {
        const selections = match?.selections || [];
        return selections
            .filter(s => (s.action_type || s.type) === 'pick')
            .map(s => normalizeMapName(s.map_name || s.map || s.name));
    }

    function getPickedMapsFromSelections() {
        const selections = match?.selections || [];
        return selections
            .filter(s => (s.action_type || s.type) === 'pick')
            .map(s => normalizeMapName(s.map_name || s.map || s.name));
    }

    function getEditableMapsData() {
        const rawMapsData = match?.maps_data;
        if (Array.isArray(rawMapsData) && rawMapsData.length > 0) return rawMapsData;
        return getPickedMapsFromSelections().map(n => ({ map_name: n, score1: null, score2: null }));
    }

    const renderMapPool = () => {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–±–±–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–≥–æ UI –∫–∞—Å—Ç–æ–º–Ω–æ–º—É –º–∞—Ç—á—É
        if (lobbyStats && lobbyStats.success) {
            const { match: m, maps, playersByTeam, playersByMap, pickban } = lobbyStats;
            const titleLeft = m.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1';
            const titleRight = m.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2';

            const pickbanView = <PickBanTimeline steps={pickban} />;

            return (
                <>
                    {pickbanView}
                    <LeadersPanel leaders={lobbyStats.leaders} />
                    <div className="match-compact-toggle compact-toggle">
                        <label><input type="checkbox" checked={!!compact} onChange={(e)=>{ setCompact(e.target.checked); try { localStorage.setItem('match_compact_mode', String(e.target.checked)); } catch(_) {} }} /> –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ç–∞–±–ª–∏—Ü</label>
                    </div>
                    <ScoreTable title={`${titleLeft}`} rows={playersByTeam?.team1 || []} compact={compact} />
                    <ScoreTable title={`${titleRight}`} rows={playersByTeam?.team2 || []} compact={compact} />
                    <MapsAccordion titleLeft={titleLeft} titleRight={titleRight} maps={maps} playersByMap={playersByMap} compact={compact} />
                </>
            );
        }

        // 1) –°—ã–≥—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á—ë—Ç–æ–≤) ‚Äî —Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º
        const mapsDataRaw = match.maps_data;
        const hasMapsDataRaw = Array.isArray(mapsDataRaw) && mapsDataRaw.length > 0;

        const playedMapsData = new Map();
        if (hasMapsDataRaw) {
            mapsDataRaw.forEach(mapInfo => {
                const mapName = normalizeMapName(mapInfo.map_name || mapInfo.mapName || mapInfo.name || mapInfo.map || '');
                const team1Score = mapInfo.team1_score !== undefined ? mapInfo.team1_score : (mapInfo.score1 || 0);
                const team2Score = mapInfo.team2_score !== undefined ? mapInfo.team2_score : (mapInfo.score2 || 0);
                if (mapName) {
                    playedMapsData.set(mapName, { team1_score: team1Score, team2_score: team2Score });
                }
            });
        }

        // 2) –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –ª–æ–±–±–∏ (selections) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ BAN/PICK
        const selections = Array.isArray(match?.selections) ? match.selections : [];
        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∫–∞—Ä—Ç, –Ω–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ª–æ–±–±–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É–ª (–Ω–∏–∂–µ)
        const teamNameById = {
            [match.team1_id]: match.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1',
            [match.team2_id]: match.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'
        };

        if (selections.length > 0) {
            return (
                <div className="match-map-pool">
                    <h3 className="section-title">–ö–∞—Ä—Ç—ã</h3>
                    <div className="map-pool-grid">
                        {selections.map((s, idx) => {
                            const mapKey = normalizeMapName(s.map_name || s.map || s.name);
                            const isBan = (s.action_type || s.type) === 'ban';
                            const isPick = (s.action_type || s.type) === 'pick';
                            const mapData = playedMapsData.get(mapKey);
                            const teamName = teamNameById[s.team_id] || '–ö–æ–º–∞–Ω–¥–∞';
                            const canEdit = isAdminOrCreator && isPick;
                            return (
                                <div
                                    key={`${mapKey}-${idx}`}
                                    className={`map-card ${isPick ? 'map-played' : ''} ${isBan ? 'map-banned' : ''}`}
                                    onClick={() => {
                                        if (!canEdit) return;
                                        const mapsDataArr = getEditableMapsData();
                                        const editIdx = mapsDataArr.findIndex(m => normalizeMapName(m.map_name || m.map || m.name) === mapKey);
                                        if (editIdx >= 0) {
                                            setEditingMapIndex(editIdx);
                                            const m = mapsDataArr[editIdx];
                                            setScore1Input(m.score1 ?? m.team1_score ?? '');
                                            setScore2Input(m.score2 ?? m.team2_score ?? '');
                                        } else {
                                            setEditingMapIndex(null);
                                            setScore1Input('');
                                            setScore2Input('');
                                        }
                                        setEditingMapKey(mapKey);
                                        setIsScoreModalOpen(true);
                                    }}
                                    style={{ cursor: canEdit ? 'pointer' : 'default' }}
                                >
                                    <div className="map-image-wrapper">
                                        <img src={getMapImage(mapKey)} alt={mapKey} className="map-image" />
                                        {isPick && <div className="map-played-overlay">‚úì</div>}
                                        {isBan && <div className="map-banned-overlay">‚úñ</div>}
                                    </div>
                                    <div className="map-name">{mapKey.toUpperCase()}</div>
                                    <div className={`map-action-label ${isBan ? 'ban' : 'pick'}`}>
                                        {teamName} {isBan ? 'BAN' : 'PICK'}
                                    </div>
                                    {isPick && mapData && (
                                        <div className="map-score">
                                            <span className={match.winner_team_id === match.team1_id && mapData.team1_score > mapData.team2_score ? 'winner-score' : ''}>
                                                {mapData.team1_score}
                                            </span>
                                            <span className="score-divider">:</span>
                                            <span className={match.winner_team_id === match.team2_id && mapData.team2_score > mapData.team1_score ? 'winner-score' : ''}>
                                                {mapData.team2_score}
                                            </span>
                                        </div>
                                    )}
                                </div>
                            );
                        })}
                    </div>
                </div>
            );
        }

        // 3) –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É–ª (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        const agreedPool = Array.isArray(match.available_maps)
            ? match.available_maps.map(m => normalizeMapName(m)).filter(Boolean)
            : [];
        const fallbackPool = ['dust2', 'mirage', 'inferno', 'nuke', 'overpass', 'vertigo', 'ancient'];
        const displayPool = (agreedPool.length > 0 ? agreedPool : fallbackPool);
        const pickedBySelections = new Set(getPickedMapsFromSelections());

        return (
            <div className="match-map-pool">
                <h3 className="section-title">–ö–∞—Ä—Ç—ã</h3>
                <div className="map-pool-grid">
                    {displayPool.map(rawName => {
                        const mapKey = normalizeMapName(rawName);
                        const mapData = playedMapsData.get(mapKey);
                        const isPlayed = playedMapsData.has(mapKey);
                        const isSelected = isPlayed || pickedBySelections.has(mapKey);
                        return (
                            <div
                                key={mapKey}
                                className={`map-card ${isSelected ? 'map-played' : 'map-not-played'}`}
                                onClick={() => {
                                    if (!isAdminOrCreator) return;
                                    const mapsDataArr = getEditableMapsData();
                                    const idx = mapsDataArr.findIndex(m => normalizeMapName(m.map_name || m.map || m.name) === mapKey);
                                    if (idx >= 0) {
                                        setEditingMapIndex(idx);
                                        const m = mapsDataArr[idx];
                                        setScore1Input(m.score1 ?? m.team1_score ?? '');
                                        setScore2Input(m.score2 ?? m.team2_score ?? '');
                                    } else {
                                        setEditingMapIndex(null);
                                        setScore1Input('');
                                        setScore2Input('');
                                    }
                                    setEditingMapKey(mapKey);
                                    setIsScoreModalOpen(true);
                                }}
                                style={{ cursor: isAdminOrCreator ? 'pointer' : 'default' }}
                            >
                                <div className="map-image-wrapper">
                                    <img src={getMapImage(mapKey)} alt={mapKey} className="map-image" />
                                    {isSelected && <div className="map-played-overlay">‚úì</div>}
                                </div>
                                <div className="map-name">{mapKey.toUpperCase()}</div>
                                {isPlayed && mapData && (
                                    <div className="map-score">
                                        <span className={match.winner_team_id === match.team1_id && mapData.team1_score > mapData.team2_score ? 'winner-score' : ''}>
                                            {mapData.team1_score}
                                        </span>
                                        <span className="score-divider">:</span>
                                        <span className={match.winner_team_id === match.team2_id && mapData.team2_score > mapData.team1_score ? 'winner-score' : ''}>
                                            {mapData.team2_score}
                                        </span>
                                    </div>
                                )}
                            </div>
                        );
                    })}
                </div>
            </div>
        );
    };

    

    const openUserProfile = (userId, isAuthorizedUser) => {
        if (userId) window.open(`/user/${userId}`, '_blank');
        else if (!isAuthorizedUser) alert('–ò–≥—Ä–æ–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    };

    const openTeamPage = (teamId) => {
        if (teamId) window.open(`/teams/${teamId}`, '_blank');
    };

    const renderTeamLineups = () => {
        if (!tournament?.teams && !tournament?.participants) return null;
        
        const team1Info = getParticipantInfo(match.team1_id, tournament);
        const team2Info = getParticipantInfo(match.team2_id, tournament);
        
        return (
            <div className="match-lineups">
                <h3 className="section-title">–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥</h3>
                <div className="lineups-grid">
                    {/* –ö–æ–º–∞–Ω–¥–∞ 1 */}
                    <div className="lineup-team">
                        <div className="lineup-header" onClick={() => openTeamPage(match.team1_id)} style={{cursor:'pointer'}}>
                            <img src={getTeamLogo(team1Info)} alt={team1Info?.name} className="lineup-logo" />
                            <h4 className="lineup-team-name">{team1Info?.name || 'TBD'}</h4>
                        </div>
                        <div className="lineup-players">
                            {team1Info?.members ? (
                                team1Info.members.map((player, idx) => (
                                    <div key={idx} className="lineup-player">
                                        <img 
                                            src={ensureHttps(player.avatar_url || '/default-avatar.png')} 
                                            alt={player.name}
                                            className="player-avatar"
                                        />
                                        <span
                                            className="player-name linklike"
                                            onClick={() => openUserProfile(player.user_id || player.id, Boolean(player.user_id || player.id))}
                                            title={player.id ? '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' : '–ò–≥—Ä–æ–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'}
                                        >
                                            {player.name}
                                        </span>
                                        {player.is_captain && <span className="captain-badge">C</span>}
                                    </div>
                                ))
                            ) : (
                                <div className="lineup-player">
                                    <img 
                                        src={ensureHttps(team1Info?.avatar_url || '/default-avatar.png')} 
                                        alt={team1Info?.name}
                                        className="player-avatar"
                                    />
                                    <span className="player-name">{team1Info?.name}</span>
                                </div>
                            )}
                        </div>
                    </div>

                    {/* –ö–æ–º–∞–Ω–¥–∞ 2 */}
                    <div className="lineup-team">
                        <div className="lineup-header" onClick={() => openTeamPage(match.team2_id)} style={{cursor:'pointer'}}>
                            <img src={getTeamLogo(team2Info)} alt={team2Info?.name} className="lineup-logo" />
                            <h4 className="lineup-team-name">{team2Info?.name || 'TBD'}</h4>
                        </div>
                        <div className="lineup-players">
                            {team2Info?.members ? (
                                team2Info.members.map((player, idx) => (
                                    <div key={idx} className="lineup-player">
                                        <img 
                                            src={ensureHttps(player.avatar_url || '/default-avatar.png')} 
                                            alt={player.name}
                                            className="player-avatar"
                                        />
                                        <span
                                            className="player-name linklike"
                                            onClick={() => openUserProfile(player.user_id || player.id, Boolean(player.user_id || player.id))}
                                            title={player.id ? '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' : '–ò–≥—Ä–æ–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'}
                                        >
                                            {player.name}
                                        </span>
                                        {player.is_captain && <span className="captain-badge">C</span>}
                                    </div>
                                ))
                            ) : (
                                <div className="lineup-player">
                                    <img 
                                        src={ensureHttps(team2Info?.avatar_url || '/default-avatar.png')} 
                                        alt={team2Info?.name}
                                        className="player-avatar"
                                    />
                                    <span className="player-name">{team2Info?.name}</span>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        );
    };

    const renderTeamHistory = () => {
        if (!teamHistory.team1.length && !teamHistory.team2.length) return null;
        
        return (
            <div className="match-team-history">
                <h3 className="section-title">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏</h3>
                <div className="history-grid">
                    {/* –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥—ã 1 */}
                    <div className="history-team">
                        <h4 className="history-team-name">{match.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1'}</h4>
                        <div className="history-matches">
                            {teamHistory.team1.length > 0 ? (
                                teamHistory.team1.map((histMatch, idx) => (
                                    <div key={idx} className={`history-match ${histMatch.result}`}>
                                        <div className="history-opponent">
                                            vs {histMatch.opponent_name}
                                        </div>
                                        <div className="history-score">
                                            {histMatch.score}
                                        </div>
                                        <div className={`history-result ${histMatch.result}`}>
                                            {histMatch.result === 'win' ? 'W' : 'L'}
                                        </div>
                                    </div>
                                ))
                            ) : (
                                <div className="no-history">–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π</div>
                            )}
                        </div>
                    </div>

                    {/* –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥—ã 2 */}
                    <div className="history-team">
                        <h4 className="history-team-name">{match.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'}</h4>
                        <div className="history-matches">
                            {teamHistory.team2.length > 0 ? (
                                teamHistory.team2.map((histMatch, idx) => (
                                    <div key={idx} className={`history-match ${histMatch.result}`}>
                                        <div className="history-opponent">
                                            vs {histMatch.opponent_name}
                                        </div>
                                        <div className="history-score">
                                            {histMatch.score}
                                        </div>
                                        <div className={`history-result ${histMatch.result}`}>
                                            {histMatch.result === 'win' ? 'W' : 'L'}
                                        </div>
                                    </div>
                                ))
                            ) : (
                                <div className="no-history">–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π</div>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        );
    };

    if (loading) {
        return (
            <div className="match-details-loading">
                <div className="loading-spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞...</p>
            </div>
        );
    }

    if (error) {
        return (
            <div className="match-details-error">
                <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
                <p>{error}</p>
                <button onClick={() => navigate(-1)} className="btn-back">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
            </div>
        );
    }

    if (!match || !tournament) {
        return (
            <div className="match-details-error">
                <h2>–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
                <button onClick={() => navigate(-1)} className="btn-back">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
            </div>
        );
    }

  // üß© –ò–¥–µ–Ω—Ç–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –º–∞—Ç—á–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ –ª–æ–±–±–∏ (–∫–∞–∫ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
  if (lobbyStats && lobbyStats.success) {
    const { match: m, maps, playersByTeam, playersByMap, pickban } = lobbyStats;
    const titleLeft = m.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1';
    const titleRight = m.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2';
    const score1 = Number.isFinite(m.team1_score) ? m.team1_score : '-';
    const score2 = Number.isFinite(m.team2_score) ? m.team2_score : '-';
    const isCompleted = Number.isFinite(m.team1_score) && Number.isFinite(m.team2_score);

    const isCS2 = tournament?.game && /counter\s*strike\s*2|cs2/i.test(tournament.game);

    return (
      <>
        {/* –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ö–µ–¥–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ */}
        <div className={`tournament-header ${isCS2 ? 'with-cs2-hero' : ''}`}>
          <div className={`tournament-header-tournamentdetails ${isCS2 ? 'with-cs2-hero' : ''}`}>
            <h2>{tournament.name}</h2>
            <div className="header-meta">
              <div className="header-meta-row">
                <span className="meta-label">–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</span>
                <span className="meta-value">
                  {tournament?.organizer_name || tournament?.organizer?.name || '‚Äî'}
                </span>
              </div>
              <div className="header-meta-row">
                <span className="meta-label">–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</span>
                <span className="meta-value">{tournament?.game || '‚Äî'}</span>
              </div>
            </div>
            <div className="header-actions">
              <button 
                className="btn btn-secondary"
                onClick={() => navigate(`/tournaments/${tournamentId}`)}
              >
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É
              </button>
            </div>
          </div>
          
          <div className={`tournament-header-infoblock ${isCS2 ? 'with-cs2-hero' : ''}`}>
            <div className="infoblock-stats">
              <div className="infoblock-grid infoblock-top">
                <div className="infoblock-item infoblock-prize">
                  <div className="infoblock-label">–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥</div>
                  <div className="infoblock-value">{tournament?.prize_pool || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                </div>
                <div className="infoblock-item infoblock-start">
                  <div className="infoblock-label">–°—Ç–∞—Ä—Ç</div>
                  <div className="infoblock-value">
                    {tournament?.start_date ? new Date(tournament.start_date).toLocaleString('ru-RU', { 
                      day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' 
                    }) : '‚Äî'}
                  </div>
                </div>
                <div className="infoblock-item infoblock-status">
                  <div className="infoblock-label">–°—Ç–∞—Ç—É—Å</div>
                  <div className="infoblock-value">
                    {(() => {
                      const map = { registration: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', active: '–ê–∫—Ç–∏–≤–Ω—ã–π', in_progress: '–ò–¥–µ—Ç', completed: '–ó–∞–≤–µ—Ä—à–µ–Ω', upcoming: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π' };
                      return map[tournament?.status] || tournament?.status || '‚Äî';
                    })()}
                  </div>
                </div>
              </div>
              <div className="infoblock-grid infoblock-bottom">
                <div className="infoblock-item infoblock-format">
                  <div className="infoblock-label">–§–æ—Ä–º–∞—Ç</div>
                  <div className="infoblock-value">
                    {tournament?.participant_type === 'team' ? '–ö–æ–º–∞–Ω–¥–Ω—ã–π' : '–°–æ–ª–æ'}
                  </div>
                </div>
                <div className="infoblock-item infoblock-participants">
                  <div className="infoblock-label">–£—á–∞—Å—Ç–Ω–∏–∫–∏</div>
                  <div className="infoblock-value">
                    {tournament?.participant_count || 0}
                    {tournament?.max_participants ? ` –∏–∑ ${tournament.max_participants}` : ''}
                  </div>
                </div>
                <div className="infoblock-item infoblock-team-size">
                  <div className="infoblock-label">–í –∫–æ–º–∞–Ω–¥–µ</div>
                  <div className="infoblock-value">{tournament?.team_size || 5}</div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —Å—á–µ—Ç–æ–º */}
        <div className="match-header-section">
          <div className="match-status-bar">
            <span className="match-status">{isCompleted ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}</span>
          </div>

          <div className="match-main-header">
            {/* –ö–æ–º–∞–Ω–¥–∞ 1 */}
            <div className={`team-block team-left ${isCompleted && Number(score1) > Number(score2) ? 'winner' : ''}`}>
              <img 
                src={playersByTeam?.team1?.[0]?.avatar_url || '/default-avatar.png'} 
                alt={titleLeft}
                className="team-logo"
                onError={(e) => { e.target.src = '/default-avatar.png'; }}
              />
              <h2 className="team-name">{titleLeft}</h2>
            </div>

            {/* –°—á–µ—Ç */}
            <div className="match-score-block">
              <div className="match-score">
                <span className={`score ${isCompleted && Number(score1) > Number(score2) ? 'winner' : ''}`}>{score1}</span>
                <span className="score-separator">:</span>
                <span className={`score ${isCompleted && Number(score2) > Number(score1) ? 'winner' : ''}`}>{score2}</span>
              </div>
              <div className="match-format">
                {m.match_format?.toUpperCase() || 'BO1'}
              </div>
            </div>

            {/* –ö–æ–º–∞–Ω–¥–∞ 2 */}
            <div className={`team-block team-right ${isCompleted && Number(score2) > Number(score1) ? 'winner' : ''}`}>
              <img 
                src={playersByTeam?.team2?.[0]?.avatar_url || '/default-avatar.png'} 
                alt={titleRight}
                className="team-logo"
                onError={(e) => { e.target.src = '/default-avatar.png'; }}
              />
              <h2 className="team-name">{titleRight}</h2>
            </div>
          </div>
        </div>

        {/* –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–º */}
        <div className="match-status-bar">
          <span className={`match-status ${isCompleted ? 'completed' : 'in-progress'}`}>
            {isCompleted ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
          </span>
          <div className="match-status-bar-buttons">
            {userIsAdmin && (
              <>
                {isCompleted ? (
                  <button 
                    className="btn btn-primary" 
                    onClick={handleEditMatch} 
                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞"
                  >
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á
                  </button>
                ) : (
                  <button 
                    className="btn btn-primary" 
                    onClick={handleCompleteMatch} 
                    title="–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                    disabled={tournament?.status === 'completed'}
                  >
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á
                  </button>
                )}
                <button 
                  className="btn btn-secondary" 
                  onClick={handleImportStats} 
                  disabled={isImporting}
                  title="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"
                  style={{ marginLeft: '8px' }}
                >
                  {isImporting ? '–ò–º–ø–æ—Ä—Ç...' : 'üì• –ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}
                </button>
              </>
            )}
          </div>
        </div>

        <div className="match-stats-container">

        {/* –ë–ª–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞ */}
        {!isCompleted && (m.connect || m.gotv) && (
          <div className="match-connect-container">
            <h3>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</h3>
            {m.connect && (
              <div className="list-row">
                <div className="list-row-left">
                  <span>–ò–≥—Ä–æ–∫–∏:</span>
                  <code className="code-inline">{m.connect}</code>
                </div>
                <div className="list-row-right">
                  <button className="btn btn-secondary" onClick={() => navigator.clipboard.writeText(m.connect)}>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                </div>
              </div>
            )}
            {m.gotv && (
              <div className="list-row match-connect-row">
                <div className="list-row-left">
                  <span>GOTV:</span>
                  <code className="code-inline">{m.gotv}</code>
                </div>
                <div className="list-row-right">
                  <button className="btn btn-secondary" onClick={() => navigator.clipboard.writeText(m.gotv)}>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                </div>
              </div>
            )}
          </div>
        )}

        <LeadersPanel leaders={lobbyStats.leaders} />

        <div className="match-compact-toggle compact-toggle">
          <button
            type="button"
            className={`toggle-switch ${compact ? 'on' : ''}`}
            aria-pressed={!!compact}
            onClick={() => { const next = !compact; setCompact(next); try { localStorage.setItem('match_compact_mode', String(next)); } catch(_) {} }}
            title={compact ? '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤–∏–¥' : '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥'}
          >
            <span className="toggle-track"><span className="toggle-thumb"></span></span>
            <span className="toggle-text">{compact ? '–ö–æ–º–ø–∞–∫—Ç–Ω–æ' : '–ü–æ–¥—Ä–æ–±–Ω–æ'}</span>
          </button>
        </div>

        <ScoreTable title={`${titleLeft}`} rows={playersByTeam?.team1 || []} compact={compact} />
        <ScoreTable title={`${titleRight}`} rows={playersByTeam?.team2 || []} compact={compact} />

        {/* –ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω/–ø–∏–∫ –Ω–∞–¥ –∫–∞—Ä—Ç–∞–º–∏ */}
        {Array.isArray(pickban) && pickban.length > 0 && (
          <PickBanTimeline steps={pickban} />
        )}

        <MapsAccordion
          titleLeft={titleLeft}
          titleRight={titleRight}
          maps={maps}
          playersByMap={playersByMap}
          compact={compact}
        />
      </div>
      </>
    );
  }

    const team1Info = getParticipantInfo(match.team1_id, tournament);
    const team2Info = getParticipantInfo(match.team2_id, tournament);

    return (
        <div className="match-details-page">
            <MatchMetaTags match={match} tournament={tournament} />
            
            {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
            <div className="match-breadcrumb">
                <Link to="/">–ì–ª–∞–≤–Ω–∞—è</Link>
                <span className="breadcrumb-separator">/</span>
                <Link to={`/tournaments/${tournament.id}`}>{tournament.name}</Link>
                <span className="breadcrumb-separator">/</span>
                <span>–ú–∞—Ç—á #{match.match_number || match.id}</span>
            </div>

            {/* –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —Å—á–µ—Ç–æ–º */}
            <div className="match-header-section">
                <div className="match-status-bar">
                    <span className={`match-status ${getMatchStatusClass(match.status)}`}>
                        {getMatchStatusText(match.status)}
                    </span>
                    <span className="match-date">{formatDate(match.match_date || match.created_at)}</span>
                    <div className="match-status-bar-buttons">
                        {isAdminOrCreator && (
                            <>
                                {match.status === 'completed' ? (
                                    <button 
                                        className="btn btn-primary" 
                                        onClick={handleEditMatch} 
                                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞"
                                    >
                                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á
                                    </button>
                                ) : (
                                    <button 
                                        className="btn btn-primary" 
                                        onClick={handleCompleteMatch} 
                                        title="–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                                        disabled={tournament?.status === 'completed'}
                                    >
                                        –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á
                                    </button>
                                )}
                                <button 
                                    className="btn btn-secondary" 
                                    onClick={handleImportStats} 
                                    disabled={isImporting}
                                    title="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"
                                    style={{ marginLeft: '8px' }}
                                >
                                    {isImporting ? '–ò–º–ø–æ—Ä—Ç...' : 'üì• –ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}
                                </button>
                            </>
                        )}
                        <button className="btn btn-secondary" onClick={() => setIsShareModalOpen(true)}>
                            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                        </button>
                    </div>
                </div>

                <div className="match-main-header">
                    {/* –ö–æ–º–∞–Ω–¥–∞ 1 */}
                    <div className={`team-block team-left ${match.winner_team_id === match.team1_id ? 'winner' : ''}`}
                         onClick={() => window.open(`/teams/${match.team1_id}`, '_blank')}
                         style={{cursor:'pointer'}}>
                        <img 
                            src={getTeamLogo(team1Info)} 
                            alt={team1Info?.name}
                            className="team-logo"
                        />
                        <h2 className="team-name">{team1Info?.name || 'TBD'}</h2>
                    </div>

                    {/* –°—á–µ—Ç */}
                    <div className="match-score-block">
                        <div className="match-score">
                            <span className={`score ${match.winner_team_id === match.team1_id ? 'winner' : ''}`}>{displayedScores[0]}</span>
                            <span className="score-separator">:</span>
                            <span className={`score ${match.winner_team_id === match.team2_id ? 'winner' : ''}`}>{displayedScores[1]}</span>
                        </div>
                        <div className="match-format">
                            {match.round_name || `–†–∞—É–Ω–¥ ${match.round}`}
                        </div>
                    </div>

                    {/* –ö–æ–º–∞–Ω–¥–∞ 2 */}
                    <div className={`team-block team-right ${match.winner_team_id === match.team2_id ? 'winner' : ''}`}
                         onClick={() => window.open(`/teams/${match.team2_id}`, '_blank')}
                         style={{cursor:'pointer'}}>
                        <img 
                            src={getTeamLogo(team2Info)} 
                            alt={team2Info?.name}
                            className="team-logo"
                        />
                        <h2 className="team-name">{team2Info?.name || 'TBD'}</h2>
                    </div>
                </div>
            </div>

            {/* –°–∫–µ–ª–µ—Ç–æ–Ω—ã –∏ –ø–∞–Ω–µ–ª—å –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ –ø—Ä–∏—Ö–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
            {!lobbyStats && (
                <>
                    <SkeletonCards count={6} />
                    <div className="match-compact-toggle compact-toggle">
                        <label><input type="checkbox" checked={!!compact} onChange={(e)=>{ setCompact(e.target.checked); try { localStorage.setItem('match_compact_mode', String(e.target.checked)); } catch(_) {} }} /> –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ç–∞–±–ª–∏—Ü</label>
                    </div>
                    <SkeletonTable rows={8} />
                    <div className="match-status-container">
                        <StatusPanel completedAt={null} onRefresh={() => setPollVersion(v => v + 1)} />
                    </div>
                </>
            )}

            {/* –ö–∞—Ä—Ç—ã */}
            {renderMapPool()}

            {/* –ú–æ–¥–∞–ª–∫–∞ –≤–≤–æ–¥–∞ —Å—á—ë—Ç–∞ */}
            {isScoreModalOpen && isAdminOrCreator && (
                <div className="score-modal-overlay" onClick={() => setIsScoreModalOpen(false)}>
                    <div className="score-modal" onClick={(e) => e.stopPropagation()}>
                        {(() => {
                            const mapsData = getEditableMapsData();
                            const idx = editingMapIndex ?? 0;
                            const current = mapsData[idx];
                            const mapTitle = current?.map_name || '–ö–∞—Ä—Ç–∞';
                            const team1 = match.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1';
                            const team2 = match.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2';
                            return (
                                <>
                                    <div className="score-modal-header">
                                        <span className="score-modal-title">{mapTitle.toUpperCase()}</span>
                                        <button className="score-modal-close" onClick={() => setIsScoreModalOpen(false)}>‚úï</button>
                                    </div>
                                    <div className="score-modal-body">
                                        <div className="score-field">
                                            <label>{team1}</label>
                                            <input
                                                type="number"
                                                min="0"
                                                className="score-input"
                                                value={score1Input}
                                                onChange={(e) => setScore1Input(e.target.value)}
                                            />
                                        </div>
                                        <div className="score-sep">:</div>
                                        <div className="score-field">
                                            <label>{team2}</label>
                                            <input
                                                type="number"
                                                min="0"
                                                className="score-input"
                                                value={score2Input}
                                                onChange={(e) => setScore2Input(e.target.value)}
                                            />
                                        </div>
                                    </div>
                                    <div className="score-modal-actions">
                                        <button
                                            className="btn btn-primary"
                                            onClick={async () => {
                                                try {
                                                    setIsSavingMap(true);
                                                    const token = localStorage.getItem('token');
                                                    const s1 = score1Input === '' ? null : parseInt(score1Input, 10);
                                                    const s2 = score2Input === '' ? null : parseInt(score2Input, 10);
                                                    const base = getEditableMapsData();
                                                    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ
                                                    let mapsList = Array.isArray(base) ? [...base] : [];
                                                    const key = normalizeMapName(editingMapKey || current?.map_name || current?.map || current?.name);
                                                    let idx = (editingMapIndex != null) ? editingMapIndex : mapsList.findIndex(mm => normalizeMapName(mm.map_name || mm.map || mm.name) === key);
                                                    if (idx < 0) {
                                                        mapsList.push({ map_name: key, score1: null, score2: null });
                                                        idx = mapsList.length - 1;
                                                    }
                                                    mapsList = mapsList.map((mm, i) => i === idx ? { ...mm, score1: s1, score2: s2 } : mm);
                                                    const body = { maps_data: mapsList };
                                                    const resp = await fetch(`/api/tournaments/${tournamentId}/matches/${matchId}/result`, {
                                                        method: 'POST',
                                                        headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },
                                                        body: JSON.stringify(body)
                                                    });
                                                    if (!resp.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—á—ë—Ç –∫–∞—Ä—Ç—ã');
                                                    await fetchMatchDetails();
                                                    setIsScoreModalOpen(false);
                                                    setEditingMapIndex(null);
                                                } catch (e) {
                                                    alert(e.message);
                                                } finally {
                                                    setIsSavingMap(false);
                                                }
                                            }}
                                            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
                                        >
                                            ‚úì
                                        </button>
                                        <button
                                            className="btn btn-secondary"
                                            onClick={() => { setIsScoreModalOpen(false); setEditingMapIndex(null); }}
                                            title="–û—Ç–º–µ–Ω–∏—Ç—å"
                                        >
                                            ‚úï
                                        </button>
                                    </div>
                                </>
                            );
                        })()}
                    </div>
                </div>
            )}

            {/* –ò—Ç–æ–≥ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∫–∞—Ä—Ç–∞–º; –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è-–º–æ–¥–∞–ª–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è */}
            
            {/* Pick & Ban ‚Äî —É–¥–∞–ª–µ–Ω–æ, –∏—Å—Ç–æ—Ä–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –º–∞–ø–ø—É–ª */}
            
            {/* –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ */}
            {renderTeamLineups()}
            
            {/* –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π */}
            {renderTeamHistory()}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —à–µ–π—Ä–∏–Ω–≥–∞ */}
            <MatchShareModal 
                isOpen={isShareModalOpen}
                onClose={() => setIsShareModalOpen(false)}
                selectedMatch={match}
                tournament={tournament}
            />
            
            {/* ‚úèÔ∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
            <EditMatchResultModal
                isOpen={isEditMatchModalOpen}
                onClose={() => setIsEditMatchModalOpen(false)}
                matchData={editMatchData}
                match={match}
                onSave={handleSaveEditedMatch}
                onDataChange={(updatedData) => {
                    // üî¥ LIVE –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                    console.log('üîÑ [MatchDetailsPage] Live –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞:', updatedData);
                    setMatch(prev => ({
                        ...prev,
                        score1: updatedData.score1,
                        score2: updatedData.score2,
                        winner_team_id: updatedData.winner_team_id,
                        maps_data: updatedData.maps_data
                    }));
                }}
            />
            
            {/* üéÆ FEEDBACK: –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ—Å–ª–µ –º–∞—Ç—á–∞ */}
            {user && match && (
                <MatchFeedbackManager
                    matchId={match.id}
                    matchInfo={{
                        team1_name: match.team1_name,
                        team2_name: match.team2_name
                    }}
                    triggerShow={showFeedbackPrompt}
                    onComplete={() => setShowFeedbackPrompt(false)}
                />
            )}
        </div>
    );
};

export default MatchDetailsPage;