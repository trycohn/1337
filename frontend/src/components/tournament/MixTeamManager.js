import React, { useState, useCallback, useEffect } from 'react';
import TeamCard from '../TeamCard';
import './MixTeamManager.css';

/**
 * MixTeamManager v1.0.0 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Å –∫–æ–º–∞–Ω–¥–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤—ã–º–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏:
 * - POST /api/tournaments/:id/mix-generate-teams
 * - POST /api/tournaments/:id/mix-regenerate-teams
 * - GET /api/tournaments/:id/mix-original-participants
 * - PATCH /api/tournaments/:id/mix-team-size
 */
const MixTeamManager = ({
    tournament,
    isCreatorOrAdmin = false,
    ratingType = 'faceit',
    user,
    setMessage,
    onTeamsUpdated,
    onTournamentUpdated
}) => {
    const [teams, setTeams] = useState([]);
    const [originalParticipants, setOriginalParticipants] = useState([]);
    const [isGenerating, setIsGenerating] = useState(false);
    const [isRegenerating, setIsRegenerating] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [generationSummary, setGenerationSummary] = useState(null);
    const [teamSize, setTeamSize] = useState(tournament?.team_size || 5);

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞
     */
    const loadTeams = useCallback(async () => {
        if (!tournament?.id) return;

        try {
            setIsLoading(true);
            const response = await fetch(`/api/tournaments/${tournament.id}/teams`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            if (response.ok) {
                const teamsData = await response.json();
                setTeams(teamsData);
                if (onTeamsUpdated) {
                    onTeamsUpdated(teamsData);
                }
            } else {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥:', response.status);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥:', error);
        } finally {
            setIsLoading(false);
        }
    }, [tournament?.id, onTeamsUpdated]);

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç—É—Å—É –≤ –∫–æ–º–∞–Ω–¥–∞—Ö)
     */
    const loadOriginalParticipants = useCallback(async () => {
        if (!tournament?.id) return;

        try {
            const response = await fetch(`/api/tournaments/${tournament.id}/mix-original-participants`);

            if (response.ok) {
                const participantsData = await response.json();
                setOriginalParticipants(participantsData);
            } else {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', response.status);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
        }
    }, [tournament?.id]);

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–∫—Å –∫–æ–º–∞–Ω–¥
     */
    const generateMixTeams = useCallback(async (shuffle = false) => {
        if (!tournament?.id || !isCreatorOrAdmin) return;

        try {
            setIsGenerating(true);
            const response = await fetch(`/api/tournaments/${tournament.id}/mix-generate-teams`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({
                    ratingType,
                    shuffle
                })
            });

            const result = await response.json();

            if (response.ok) {
                setTeams(result.teams);
                setGenerationSummary(result.summary);
                setMessage({
                    type: 'success',
                    text: `‚úÖ ${result.message}`
                });

                if (onTeamsUpdated) {
                    onTeamsUpdated(result.teams);
                }
                if (onTournamentUpdated && result.tournament) {
                    onTournamentUpdated(result.tournament);
                }
            } else {
                setMessage({
                    type: 'error',
                    text: `‚ùå ${result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥'}`
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
            setMessage({
                type: 'error',
                text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥'
            });
        } finally {
            setIsGenerating(false);
        }
    }, [tournament?.id, isCreatorOrAdmin, ratingType, setMessage, onTeamsUpdated, onTournamentUpdated]);

    /**
     * –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Å –∫–æ–º–∞–Ω–¥
     */
    const regenerateMixTeams = useCallback(async () => {
        if (!tournament?.id || !isCreatorOrAdmin) return;

        try {
            setIsRegenerating(true);
            const response = await fetch(`/api/tournaments/${tournament.id}/mix-regenerate-teams`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({
                    ratingType,
                    shuffle: true
                })
            });

            const result = await response.json();

            if (response.ok) {
                setTeams(result.teams);
                setGenerationSummary(result.summary);
                setMessage({
                    type: 'success',
                    text: `üîÑ ${result.message}`
                });

                if (onTeamsUpdated) {
                    onTeamsUpdated(result.teams);
                }
                if (onTournamentUpdated && result.tournament) {
                    onTournamentUpdated(result.tournament);
                }
            } else {
                setMessage({
                    type: 'error',
                    text: `‚ùå ${result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥'}`
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥:', error);
            setMessage({
                type: 'error',
                text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥'
            });
        } finally {
            setIsRegenerating(false);
        }
    }, [tournament?.id, isCreatorOrAdmin, ratingType, setMessage, onTeamsUpdated, onTournamentUpdated]);

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
     */
    const updateTeamSize = useCallback(async (newSize) => {
        if (!tournament?.id || !isCreatorOrAdmin) return;

        try {
            const response = await fetch(`/api/tournaments/${tournament.id}/mix-team-size`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({
                    teamSize: newSize
                })
            });

            const result = await response.json();

            if (response.ok) {
                setTeamSize(newSize);
                setMessage({
                    type: 'success',
                    text: `‚öôÔ∏è ${result.message}`
                });

                if (onTournamentUpdated && result.tournament) {
                    onTournamentUpdated(result.tournament);
                }

                // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è
                setTeams([]);
                setGenerationSummary(null);
            } else {
                setMessage({
                    type: 'error',
                    text: `‚ùå ${result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã'}`
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã:', error);
            setMessage({
                type: 'error',
                text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã'
            });
        }
    }, [tournament?.id, isCreatorOrAdmin, setMessage, onTournamentUpdated]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        loadTeams();
        loadOriginalParticipants();
    }, [loadTeams, loadOriginalParticipants]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—É—Ä–Ω–∏—Ä –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–º
    if (tournament?.format !== 'mix') {
        return null;
    }

    return (
        <div className="mix-team-manager">
            <div className="mix-team-manager-header">
                <h3>üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Å –∫–æ–º–∞–Ω–¥–∞–º–∏</h3>
                
                {isCreatorOrAdmin && (
                    <div className="mix-team-controls">
                        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã */}
                        <div className="team-size-control">
                            <label>–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:</label>
                            <select 
                                value={teamSize} 
                                onChange={(e) => updateTeamSize(parseInt(e.target.value))}
                                disabled={teams.length > 0}
                            >
                                <option value={2}>2 –∏–≥—Ä–æ–∫–∞</option>
                                <option value={3}>3 –∏–≥—Ä–æ–∫–∞</option>
                                <option value={4}>4 –∏–≥—Ä–æ–∫–∞</option>
                                <option value={5}>5 –∏–≥—Ä–æ–∫–æ–≤</option>
                            </select>
                        </div>

                        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                        <div className="team-action-buttons">
                            <button 
                                className="generate-teams-btn"
                                onClick={() => generateMixTeams(false)}
                                disabled={isGenerating || isRegenerating || originalParticipants.notInTeam?.length < teamSize * 2}
                            >
                                {isGenerating ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üéØ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã'}
                            </button>

                            {teams.length > 0 && (
                                <button 
                                    className="regenerate-teams-btn"
                                    onClick={regenerateMixTeams}
                                    disabled={isGenerating || isRegenerating}
                                >
                                    {isRegenerating ? '‚è≥ –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 'üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å'}
                                </button>
                            )}
                        </div>
                    </div>
                )}
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
            {originalParticipants.total > 0 && (
                <div className="participants-stats">
                    <div className="stat-item">
                        <span className="stat-label">–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</span>
                        <span className="stat-value">{originalParticipants.total}</span>
                    </div>
                    <div className="stat-item">
                        <span className="stat-label">–í –∫–æ–º–∞–Ω–¥–∞—Ö:</span>
                        <span className="stat-value">{originalParticipants.inTeamCount}</span>
                    </div>
                    <div className="stat-item">
                        <span className="stat-label">–ë–µ–∑ –∫–æ–º–∞–Ω–¥—ã:</span>
                        <span className="stat-value">{originalParticipants.notInTeamCount}</span>
                    </div>
                </div>
            )}

            {/* –°–≤–æ–¥–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
            {generationSummary && (
                <div className="generation-summary">
                    <h4>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h4>
                    <div className="summary-stats">
                        <div className="summary-item">
                            <span>–°–æ–∑–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥:</span>
                            <strong>{generationSummary.teamsCount}</strong>
                        </div>
                        <div className="summary-item">
                            <span>–†–∞–∑–º–µ—â–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤:</span>
                            <strong>{generationSummary.playersPlaced}</strong>
                        </div>
                        <div className="summary-item">
                            <span>–¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:</span>
                            <strong>{generationSummary.ratingType === 'faceit' ? 'FACEIT ELO' : 'CS2 Premier'}</strong>
                        </div>
                        {generationSummary.balanceAchieved && (
                            <div className="summary-item success">
                                <span>‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</span>
                            </div>
                        )}
                    </div>
                </div>
            )}

            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ */}
            {isLoading ? (
                <div className="loading-teams">
                    <div className="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥...</p>
                </div>
            ) : teams.length > 0 ? (
                <div className="teams-display">
                    <h4>üèÜ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ({teams.length})</h4>
                    <div className="teams-grid">
                        {teams.map((team, index) => (
                            <TeamCard 
                                key={team.id} 
                                team={team} 
                                index={index}
                                ratingType={ratingType}
                            />
                        ))}
                    </div>
                </div>
            ) : originalParticipants.total > 0 ? (
                <div className="no-teams-message">
                    <div className="no-teams-icon">‚ö°</div>
                    <h4>–ö–æ–º–∞–Ω–¥—ã –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã</h4>
                    <p>
                        {isCreatorOrAdmin 
                            ? '–ù–∞–∂–º–∏—Ç–µ "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥'
                            : '–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞'
                        }
                    </p>
                    {originalParticipants.notInTeamCount < teamSize * 2 && (
                        <div className="insufficient-players-warning">
                            ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {teamSize * 2})
                        </div>
                    )}
                </div>
            ) : (
                <div className="no-participants-message">
                    <div className="no-participants-icon">üë•</div>
                    <h4>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h4>
                    <p>–î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥</p>
                </div>
            )}
        </div>
    );
};

export default MixTeamManager; 