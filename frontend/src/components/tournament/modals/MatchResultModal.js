import React, { useState, useEffect, useCallback } from 'react';
import { isCounterStrike2, getGameMaps } from '../../../utils/mapHelpers';
import './MatchResultModal.css';

/**
 * MatchResultModal v3.0 - –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * 
 * @version 3.0 (–í–∞—Ä–∏–∞–Ω—Ç 3 —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ UX)
 * @features –í–∞–ª–∏–¥–∞—Ü–∏—è, –∞–Ω–∏–º–∞—Ü–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Ä—Ç CS2
 */
const MatchResultModal = ({
    isOpen,
    onClose,
    selectedMatch,        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ match, —Ç–µ–ø–µ—Ä—å selectedMatch
    matchResultData,      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ modals hook
    setMatchResultData,   // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ modals hook
    onSave,
    isLoading = false,
    tournament = null     // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
}) => {
    const [availableMaps, setAvailableMaps] = useState([]);
    const [validationErrors, setValidationErrors] = useState({});
    const [hasChanges, setHasChanges] = useState(false);

    // üéØ –£–õ–£–ß–®–ï–ù–ò–ï –í–ê–†–ò–ê–ù–¢–ê 3: –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ localStorage –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const getTournamentGame = useCallback(() => {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—Ä–æ–ø—Å–∞ tournament
        if (tournament?.game) {
            return tournament.game;
        }
        
        // –ó–∞—Ç–µ–º –∏–∑ localStorage (–∫—ç—à —Ç—É—Ä–Ω–∏—Ä–∞)
        try {
            const tournamentData = localStorage.getItem('currentTournament');
            if (tournamentData) {
                const parsedTournament = JSON.parse(tournamentData);
                return parsedTournament.game;
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ localStorage:', error);
        }
        
        // Fallback: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º CS2 –µ—Å–ª–∏ selectedMatch —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—ã
        if (selectedMatch?.maps_data || selectedMatch?.game === 'Counter-Strike 2') {
            return 'Counter-Strike 2';
        }
        
        return null;
    }, [tournament, selectedMatch]);

    // üéØ –ó–ê–ì–†–£–ó–ö–ê –î–û–°–¢–£–ü–ù–´–• –ö–ê–†–¢
    useEffect(() => {
        const gameType = getTournamentGame();
        if (gameType) {
            const maps = getGameMaps(gameType);
            setAvailableMaps(maps);
            console.log('üó∫Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã:', gameType, '- –∫–∞—Ä—Ç:', maps.length);
        }
    }, [getTournamentGame]);

    // üéØ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô
    useEffect(() => {
        if (matchResultData && selectedMatch) {
            const hasScoreChanges = 
                matchResultData.score1 !== (selectedMatch.score1 || 0) ||
                matchResultData.score2 !== (selectedMatch.score2 || 0);
            
            const hasMapsChanges = 
                JSON.stringify(matchResultData.maps_data || []) !== 
                JSON.stringify(selectedMatch.maps_data || []);
            
            setHasChanges(hasScoreChanges || hasMapsChanges);
        }
    }, [matchResultData, selectedMatch]);

    // üéØ –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (–í–ê–†–ò–ê–ù–¢ 3)
    const validateResults = useCallback(() => {
        const errors = {};
        
        if (!matchResultData) {
            errors.general = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞';
            return errors;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞
        const score1 = parseInt(matchResultData.score1) || 0;
        const score2 = parseInt(matchResultData.score2) || 0;
        
        if (score1 < 0 || score2 < 0) {
            errors.scores = '–°—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º';
        }
        
        if (score1 === 0 && score2 === 0) {
            errors.scores = '–°—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0:0';
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç –¥–ª—è CS2
        const isCS2 = isCounterStrike2(getTournamentGame());
        if (isCS2 && matchResultData.maps_data && matchResultData.maps_data.length > 0) {
            matchResultData.maps_data.forEach((mapData, index) => {
                if (!mapData.map || mapData.map.trim() === '') {
                    errors[`map_${index}_name`] = `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã ${index + 1}`;
                }
                
                const mapScore1 = parseInt(mapData.score1) || 0;
                const mapScore2 = parseInt(mapData.score2) || 0;
                
                if (mapScore1 < 0 || mapScore2 < 0) {
                    errors[`map_${index}_scores`] = `–°—á–µ—Ç –∫–∞—Ä—Ç—ã ${index + 1} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º`;
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ —Å—á–µ—Ç–∞ –¥–ª—è CS2 (–æ–±—ã—á–Ω–æ –¥–æ 16 —Ä–∞—É–Ω–¥–æ–≤)
                if (mapScore1 > 50 || mapScore2 > 50) {
                    errors[`map_${index}_scores`] = `–°—á–µ—Ç –∫–∞—Ä—Ç—ã ${index + 1} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 50)`;
                }
            });
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞ –∫–∞—Ä—Ç–∞–º
            const mapsWonByTeam1 = matchResultData.maps_data.filter(map => 
                (parseInt(map.score1) || 0) > (parseInt(map.score2) || 0)
            ).length;
            
            const mapsWonByTeam2 = matchResultData.maps_data.filter(map => 
                (parseInt(map.score2) || 0) > (parseInt(map.score1) || 0)
            ).length;
            
            if (mapsWonByTeam1 !== score1 || mapsWonByTeam2 !== score2) {
                errors.consistency = `–û–±—â–∏–π —Å—á–µ—Ç (${score1}:${score2}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ –∫–∞—Ä—Ç–∞–º (${mapsWonByTeam1}:${mapsWonByTeam2})`;
            }
        }

        return errors;
    }, [matchResultData, getTournamentGame]);

    // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò
    useEffect(() => {
        if (matchResultData) {
            const errors = validateResults();
            setValidationErrors(errors);
        }
    }, [matchResultData, validateResults]);

    if (!isOpen || !selectedMatch) return null;

    // üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    const handleScoreChange = (team, value) => {
        const score = Math.max(0, parseInt(value) || 0);
        setMatchResultData(prev => ({
            ...prev,
            [team === 1 ? 'score1' : 'score2']: score
        }));
    };

    const handleMapScoreChange = (mapIndex, team, value) => {
        const score = Math.max(0, Math.min(50, parseInt(value) || 0)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-50
        setMatchResultData(prev => {
            const newMapsData = [...(prev.maps_data || [])];
            if (!newMapsData[mapIndex]) {
                newMapsData[mapIndex] = { map: '', score1: 0, score2: 0 };
            }
            newMapsData[mapIndex] = {
                ...newMapsData[mapIndex],
                [team === 1 ? 'score1' : 'score2']: score
            };
            return { ...prev, maps_data: newMapsData };
        });
    };

    const handleMapNameChange = (mapIndex, mapName) => {
        setMatchResultData(prev => {
            const newMapsData = [...(prev.maps_data || [])];
            if (!newMapsData[mapIndex]) {
                newMapsData[mapIndex] = { map: '', score1: 0, score2: 0 };
            }
            newMapsData[mapIndex] = {
                ...newMapsData[mapIndex],
                map: mapName
            };
            return { ...prev, maps_data: newMapsData };
        });
    };

    const addMap = () => {
        const mapsCount = (matchResultData.maps_data || []).length;
        if (mapsCount >= 7) { // –ú–∞–∫—Å–∏–º—É–º 7 –∫–∞—Ä—Ç (BO7)
            return;
        }
        
        setMatchResultData(prev => ({
            ...prev,
            maps_data: [
                ...(prev.maps_data || []),
                { map: '', score1: 0, score2: 0 }
            ]
        }));
    };

    const removeMap = (mapIndex) => {
        setMatchResultData(prev => {
            const newMapsData = prev.maps_data?.filter((_, index) => index !== mapIndex) || [];
            return { ...prev, maps_data: newMapsData };
        });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        
        const errors = validateResults();
        if (Object.keys(errors).length > 0) {
            console.warn('üö´ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞:', errors);
            return;
        }
        
        onSave();
    };

    // üéØ –ó–ê–ö–†–´–¢–ò–ï –° –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï–ú –ü–†–ò –ù–ê–õ–ò–ß–ò–ò –ò–ó–ú–ï–ù–ï–ù–ò–ô
    const handleClose = () => {
        if (hasChanges && !isLoading) {
            const confirmed = window.confirm(
                '‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?'
            );
            if (!confirmed) return;
        }
        onClose();
    };

    const isCS2 = isCounterStrike2(getTournamentGame());
    const mapsData = matchResultData.maps_data || [];
    const hasValidationErrors = Object.keys(validationErrors).length > 0;

    return (
        <div className="modal-overlay enhanced-match-result-overlay" onClick={handleClose}>
            <div className="modal-content match-result-modal enhanced-match-result-modal" onClick={(e) => e.stopPropagation()}>
                <div className="modal-header">
                    <h3>
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
                        {hasChanges && <span className="changes-indicator">*</span>}
                    </h3>
                    <button className="close-btn" onClick={handleClose} title="–ó–∞–∫—Ä—ã—Ç—å">‚úï</button>
                </div>

                <form onSubmit={handleSubmit} className="match-result-form">
                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ */}
                    <div className="match-info">
                        <div className="teams-display">
                            <div className="team-display">
                                <span className="team-name">{selectedMatch.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1'}</span>
                            </div>
                            <div className="vs-separator">VS</div>
                            <div className="team-display">
                                <span className="team-name">{selectedMatch.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'}</span>
                            </div>
                        </div>
                        
                        {/* –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ */}
                        <div className="match-meta">
                            {selectedMatch.round && (
                                <span className="match-round">–†–∞—É–Ω–¥ {selectedMatch.round}</span>
                            )}
                            {selectedMatch.is_third_place_match && (
                                <span className="match-type-badge">ü•â –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ</span>
                            )}
                            {isCS2 && (
                                <span className="game-badge">üó∫Ô∏è Counter-Strike 2</span>
                            )}
                        </div>
                    </div>

                    {/* –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
                    {hasValidationErrors && (
                        <div className="validation-errors">
                            {Object.entries(validationErrors).map(([key, error]) => (
                                <div key={key} className="validation-error">
                                    ‚ö†Ô∏è {error}
                                </div>
                            ))}
                        </div>
                    )}

                    {/* –û–±—â–∏–π —Å—á–µ—Ç */}
                    <div className="total-score-section">
                        <h4>–û–±—â–∏–π —Å—á–µ—Ç –º–∞—Ç—á–∞</h4>
                        <div className="score-inputs">
                            <div className="score-input-group">
                                <label>{selectedMatch.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1'}</label>
                                <input
                                    type="number"
                                    value={matchResultData.score1 || 0}
                                    onChange={(e) => handleScoreChange(1, e.target.value)}
                                    min="0"
                                    max="999"
                                    disabled={isLoading}
                                    className={validationErrors.scores ? 'error' : ''}
                                />
                            </div>
                            <div className="score-separator">:</div>
                            <div className="score-input-group">
                                <label>{selectedMatch.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'}</label>
                                <input
                                    type="number"
                                    value={matchResultData.score2 || 0}
                                    onChange={(e) => handleScoreChange(2, e.target.value)}
                                    min="0"
                                    max="999"
                                    disabled={isLoading}
                                    className={validationErrors.scores ? 'error' : ''}
                                />
                            </div>
                        </div>
                    </div>

                    {/* –ö–∞—Ä—Ç—ã (–¥–ª—è CS2 –∏ –ø–æ–¥–æ–±–Ω—ã—Ö –∏–≥—Ä) */}
                    {isCS2 && (
                        <div className="maps-section">
                            <div className="maps-header">
                                <h4>
                                    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ä—Ç–∞–º
                                    {mapsData.length > 0 && (
                                        <span className="maps-count">({mapsData.length})</span>
                                    )}
                                </h4>
                                <button
                                    type="button"
                                    className="add-map-btn"
                                    onClick={addMap}
                                    disabled={isLoading || mapsData.length >= 7}
                                    title={mapsData.length >= 7 ? '–ú–∞–∫—Å–∏–º—É–º 7 –∫–∞—Ä—Ç' : '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É'}
                                >
                                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É
                                </button>
                            </div>

                            {mapsData.length === 0 && (
                                <div className="no-maps-message">
                                    <p>–ö–∞—Ä—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
                                    <span>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É" –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</span>
                                </div>
                            )}

                            <div className="maps-list">
                                {mapsData.map((mapData, index) => (
                                    <div key={index} className="map-entry">
                                        <div className="map-header">
                                            <div className="map-select-container">
                                                <label>–ö–∞—Ä—Ç–∞ {index + 1}:</label>
                                                <select
                                                    value={mapData.map || ''}
                                                    onChange={(e) => handleMapNameChange(index, e.target.value)}
                                                    disabled={isLoading}
                                                    className={`map-select ${validationErrors[`map_${index}_name`] ? 'error' : ''}`}
                                                    required={mapsData.length > 0}
                                                >
                                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É</option>
                                                    {availableMaps.map(map => (
                                                        <option key={map} value={map}>{map}</option>
                                                    ))}
                                                </select>
                                            </div>
                                            <button
                                                type="button"
                                                className="remove-map-btn"
                                                onClick={() => removeMap(index)}
                                                disabled={isLoading}
                                                title="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É"
                                            >
                                                üóëÔ∏è
                                            </button>
                                        </div>
                                        
                                        <div className="map-scores">
                                            <div className="map-score-input">
                                                <label>{selectedMatch.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1'}</label>
                                                <input
                                                    type="number"
                                                    value={mapData.score1 || 0}
                                                    onChange={(e) => handleMapScoreChange(index, 1, e.target.value)}
                                                    min="0"
                                                    max="50"
                                                    disabled={isLoading}
                                                    className={validationErrors[`map_${index}_scores`] ? 'error' : ''}
                                                />
                                            </div>
                                            <div className="map-score-separator">:</div>
                                            <div className="map-score-input">
                                                <label>{selectedMatch.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'}</label>
                                                <input
                                                    type="number"
                                                    value={mapData.score2 || 0}
                                                    onChange={(e) => handleMapScoreChange(index, 2, e.target.value)}
                                                    min="0"
                                                    max="50"
                                                    disabled={isLoading}
                                                    className={validationErrors[`map_${index}_scores`] ? 'error' : ''}
                                                />
                                            </div>
                                        </div>
                                        
                                        {/* –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∫–∞—Ä—Ç—ã */}
                                        {mapData.score1 !== mapData.score2 && (mapData.score1 > 0 || mapData.score2 > 0) && (
                                            <div className="map-winner">
                                                üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {
                                                    (parseInt(mapData.score1) || 0) > (parseInt(mapData.score2) || 0) 
                                                        ? (selectedMatch.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1')
                                                        : (selectedMatch.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2')
                                                }
                                            </div>
                                        )}
                                    </div>
                                ))}
                            </div>

                            {/* –ê–≤—Ç–æ—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–∞–º */}
                            {mapsData.length > 0 && (
                                <div className="maps-summary">
                                    <h5>üìä –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º</h5>
                                    <div className="maps-summary-content">
                                        <div className="maps-won">
                                            <span className="team-maps-won">
                                                {selectedMatch.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1'}: {
                                                    mapsData.filter(map => 
                                                        (parseInt(map.score1) || 0) > (parseInt(map.score2) || 0)
                                                    ).length
                                                } –∫–∞—Ä—Ç
                                            </span>
                                            <span className="team-maps-won">
                                                {selectedMatch.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'}: {
                                                    mapsData.filter(map => 
                                                        (parseInt(map.score2) || 0) > (parseInt(map.score1) || 0)
                                                    ).length
                                                } –∫–∞—Ä—Ç
                                            </span>
                                        </div>
                                        
                                        {validationErrors.consistency && (
                                            <div className="consistency-warning">
                                                ‚ö†Ô∏è {validationErrors.consistency}
                                            </div>
                                        )}
                                    </div>
                                </div>
                            )}
                        </div>
                    )}

                    {/* –î–µ–π—Å—Ç–≤–∏—è */}
                    <div className="modal-actions">
                        <button 
                            type="button" 
                            className="cancel-btn" 
                            onClick={handleClose}
                            disabled={isLoading}
                        >
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button 
                            type="submit" 
                            className="save-btn"
                            disabled={isLoading || hasValidationErrors}
                            title={hasValidationErrors ? '–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}
                        >
                            {isLoading ? (
                                <>
                                    <span className="loading-spinner">‚è≥</span>
                                    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                                </>
                            ) : (
                                'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'
                            )}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default MatchResultModal; 