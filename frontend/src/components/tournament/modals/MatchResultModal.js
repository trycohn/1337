import React, { useState, useEffect, useCallback } from 'react';
import { isCounterStrike2, getDefaultCS2Maps } from '../../../utils/mapHelpers';
import { useMatchResultModal } from '../../../hooks/useModalSystem';
import '../../../styles/modal-system.css';
import './MatchResultModal.css';

/**
 * MatchResultModal v5.0 - –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
 * –°–æ–∑–¥–∞–Ω–æ –æ–ø—ã—Ç–Ω—ã–º UI/UX —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—É—é –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
 * 
 * @version 5.0 (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç modal-system + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
 * @features –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, —Ç—É–ª—Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –≤–∞–ª–∏–¥–∞—Ü–∏—è, –∫–∞—Ä—Ç—ã CS2
 */
const MatchResultModal = ({
    isOpen,
    onClose,
    selectedMatch,        
    matchResultData,      
    setMatchResultData,   
    onSave,
    isLoading = false,
    tournament = null     
}) => {
    const [availableMaps, setAvailableMaps] = useState([]);
    const [validationErrors, setValidationErrors] = useState({});
    const [hasChanges, setHasChanges] = useState(false);
    const [selectedWinner, setSelectedWinner] = useState(null); // null, 'team1', 'team2'
    const [autoCalculateScore, setAutoCalculateScore] = useState(true); // üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
    
    // –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –¢–£–õ–¢–ò–ü–û–í
    const [showTeam1Tooltip, setShowTeam1Tooltip] = useState(false);
    const [showTeam2Tooltip, setShowTeam2Tooltip] = useState(false);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫ –º–æ–¥–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    const modalSystem = useMatchResultModal({
        onClose: () => {
            if (hasChanges && !isLoading) {
                const confirmed = window.confirm(
                    '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?'
                );
                if (!confirmed) return;
            }
            setShowTeam1Tooltip(false);
            setShowTeam2Tooltip(false);
            setSelectedWinner(null);
            setHasChanges(false);
            onClose();
        }
    });

    // –£–õ–£–ß–®–ï–ù–ù–û–ï: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
    const getTournamentGame = useCallback(() => {
        console.log('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç...');
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü—Ä—è–º–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
        if (tournament?.game) {
            console.log('‚úÖ –ò–≥—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑ –ø—Ä–æ–ø—Å–∞ tournament:', tournament.game);
            return tournament.game;
        }
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –¢—É—Ä–Ω–∏—Ä –∏–∑ localStorage
        try {
            const tournamentData = localStorage.getItem('currentTournament');
            if (tournamentData) {
                const parsedTournament = JSON.parse(tournamentData);
                if (parsedTournament.game) {
                    console.log('‚úÖ –ò–≥—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑ localStorage:', parsedTournament.game);
                    return parsedTournament.game;
                }
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ localStorage:', error);
        }
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞
        if (selectedMatch?.maps_data || selectedMatch?.game === 'Counter-Strike 2') {
            console.log('‚úÖ –ò–≥—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞: Counter-Strike 2');
            return 'Counter-Strike 2';
        }
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        try {
            const pathMatch = window.location.pathname.match(/\/tournaments\/(\d+)/);
            if (pathMatch) {
                console.log('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä—É –ø–æ URL –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞:', pathMatch[1]);
                // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º CS2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                console.log('–ü—Ä–∏–Ω–∏–º–∞–µ–º Counter-Strike 2 –∫–∞–∫ –∏–≥—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                return 'Counter-Strike 2';
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø–æ URL:', error);
        }
        
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞');
        return null;
    }, [tournament, selectedMatch]);

    // üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø WINNER –ò–ó –î–ê–ù–ù–´–• –ú–ê–¢–ß–ê
    useEffect(() => {
        if (selectedMatch && matchResultData) {
            const winnerId = selectedMatch.winner_team_id || selectedMatch.winner_id;
            if (winnerId) {
                if (winnerId === selectedMatch.team1_id) {
                    setSelectedWinner('team1');
                } else if (winnerId === selectedMatch.team2_id) {
                    setSelectedWinner('team2');
                } else {
                    setSelectedWinner(null);
                }
            } else {
                // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ —Å—á–µ—Ç—É
                const score1 = parseInt(matchResultData.score1) || 0;
                const score2 = parseInt(matchResultData.score2) || 0;
                if (score1 > score2) {
                    setSelectedWinner('team1');
                } else if (score2 > score1) {
                    setSelectedWinner('team2');
                } else {
                    setSelectedWinner(null);
                }
            }
        }
    }, [selectedMatch, matchResultData]);

    // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–û–°–¢–£–ü–ù–´–• –ö–ê–†–¢
    useEffect(() => {
        const gameType = getTournamentGame();
        console.log('üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã:', gameType);
        
        if (gameType && isCounterStrike2(gameType)) {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ —Ö–µ–ª–ø–µ—Ä –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã
            const maps = getDefaultCS2Maps();
            setAvailableMaps(maps);
            console.log('üó∫Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã:', gameType, '- –∫–∞—Ä—Ç:', maps.length, '—Å–ø–∏—Å–æ–∫:', maps);
        } else if (gameType) {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            console.log('üó∫Ô∏è –ò–≥—Ä–∞', gameType, '–ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç');
            setAvailableMaps([]);
        } else {
            console.log('üó∫Ô∏è –ò–≥—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            setAvailableMaps([]);
        }
    }, [getTournamentGame]);

    // üéØ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô
    useEffect(() => {
        if (matchResultData && selectedMatch) {
            const hasScoreChanges = 
                matchResultData.score1 !== (selectedMatch.score1 || 0) ||
                matchResultData.score2 !== (selectedMatch.score2 || 0);
            
            const hasMapsChanges = 
                JSON.stringify(matchResultData.maps_data || []) !== 
                JSON.stringify(selectedMatch.maps_data || []);
            
            const hasWinnerChanges = selectedWinner !== null;
            
            setHasChanges(hasScoreChanges || hasMapsChanges || hasWinnerChanges);
        }
    }, [matchResultData, selectedMatch, selectedWinner]);

    // üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞)
    const validateResults = useCallback(() => {
        const errors = {};
        
        if (!matchResultData) {
            errors.general = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞';
            return errors;
        }

        const score1 = parseInt(matchResultData.score1) || 0;
        const score2 = parseInt(matchResultData.score2) || 0;
        
        // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞
        if (score1 === 0 && score2 === 0 && !selectedWinner) {
            errors.scores = '–£–∫–∞–∂–∏—Ç–µ —Å—á–µ—Ç –º–∞—Ç—á–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è';
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç –¥–ª—è CS2
        const isCS2 = isCounterStrike2(getTournamentGame());
        if (isCS2 && matchResultData.maps_data && matchResultData.maps_data.length > 0) {
            matchResultData.maps_data.forEach((mapData, index) => {
                if (!mapData.map || mapData.map.trim() === '') {
                    errors[`map_${index}_name`] = `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã ${index + 1}`;
                }
            });
        }

        return errors;
    }, [matchResultData, selectedWinner, getTournamentGame]);

    // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò
    useEffect(() => {
        if (matchResultData) {
            const errors = validateResults();
            setValidationErrors(errors);
        }
    }, [matchResultData, validateResults]);

    // üéØ –§–£–ù–ö–¶–ò–Ø –í–´–ë–û–†–ê –ü–û–ë–ï–î–ò–¢–ï–õ–Ø
    const selectWinner = useCallback((team) => {
        console.log('üèÜ –í—ã–±—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é:', {
            selectedTeam: team,
            previousWinner: selectedWinner,
            team1Name: selectedMatch?.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1',
            team2Name: selectedMatch?.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2',
            currentScore: `${matchResultData.score1}:${matchResultData.score2}`
        });
        
        setSelectedWinner(team);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (team === 'team1' && parseInt(matchResultData.score1 || 0) <= parseInt(matchResultData.score2 || 0)) {
            const newScore = Math.max(1, parseInt(matchResultData.score2 || 0) + 1);
            console.log(`üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥—ã 1 –¥–æ ${newScore}`);
            setMatchResultData(prev => ({
                ...prev,
                score1: newScore
            }));
        } else if (team === 'team2' && parseInt(matchResultData.score2 || 0) <= parseInt(matchResultData.score1 || 0)) {
            const newScore = Math.max(1, parseInt(matchResultData.score1 || 0) + 1);
            console.log(`üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥—ã 2 –¥–æ ${newScore}`);
            setMatchResultData(prev => ({
                ...prev,
                score2: newScore
            }));
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤—ã–±–æ—Ä–µ
        if (autoCalculateScore) {
            console.log('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–∏ —Ä—É—á–Ω–æ–º –≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å');
        }
    }, [matchResultData, setMatchResultData, selectedWinner, selectedMatch, autoCalculateScore]);

    // üéØ –†–ê–°–ß–ï–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –ö–ê–†–¢–ê–ú
    const getMapStatistics = useCallback(() => {
        const mapsData = matchResultData.maps_data || [];
        if (mapsData.length === 0) return null;
        
        let team1Wins = 0;
        let team2Wins = 0;
        let team1TotalScore = 0;
        let team2TotalScore = 0;
        let draws = 0;
        
        mapsData.forEach(map => {
            const score1 = parseInt(map.score1) || 0;
            const score2 = parseInt(map.score2) || 0;
            
            team1TotalScore += score1;
            team2TotalScore += score2;
            
            if (score1 > score2) {
                team1Wins++;
            } else if (score2 > score1) {
                team2Wins++;
            } else {
                draws++;
            }
        });
        
        return {
            mapsCount: mapsData.length,
            team1Wins,
            team2Wins,
            draws,
            team1TotalScore,
            team2TotalScore,
            scoreDifference: Math.abs(team1TotalScore - team2TotalScore)
        };
    }, [matchResultData.maps_data]);

    // üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–ï–¢ –û–ë–©–ï–ì–û –°–ß–ï–¢–ê –ü–û –ö–ê–†–¢–ê–ú
    const calculateOverallScoreFromMaps = useCallback(() => {
        const mapsData = matchResultData.maps_data || [];
        if (mapsData.length === 0) return;
        
        let team1Wins = 0;
        let team2Wins = 0;
        
        mapsData.forEach(map => {
            const score1 = parseInt(map.score1) || 0;
            const score2 = parseInt(map.score2) || 0;
            
            if (score1 > score2) {
                team1Wins++;
            } else if (score2 > score1) {
                team2Wins++;
            }
            // –ù–∏—á—å–∏ –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –æ–±—â–∏–π —Å—á–µ—Ç
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –º–∞—Ç—á–∞
        setMatchResultData(prev => ({
            ...prev,
            score1: team1Wins,
            score2: team2Wins
        }));
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        // üèÜ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –ö–†–ò–¢–ï–†–ò–ô: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –≤–∞–∂–Ω–µ–µ –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞
        let newWinner = null;
        if (team1Wins > team2Wins) {
            newWinner = 'team1';
        } else if (team2Wins > team1Wins) {
            newWinner = 'team2';
        }
        // –ï—Å–ª–∏ —Ä–∞–≤–Ω—ã–π —Å—á–µ—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º null (–Ω–∏—á—å—è)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (newWinner !== selectedWinner) {
            console.log('üèÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–ü–†–ò–û–†–ò–¢–ï–¢: –∫–∞—Ä—Ç—ã):', {
                previousWinner: selectedWinner,
                newWinner: newWinner,
                reason: 'calculateOverallScoreFromMaps - –∫–∞—Ä—Ç—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'
            });
            setSelectedWinner(newWinner);
        }
        
        console.log('üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—á–µ—Ç–∞:', {
            mapsPlayed: mapsData.length,
            team1Wins,
            team2Wins,
            previousWinner: selectedWinner,
            newWinner: newWinner,
            team1Name: selectedMatch?.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1',
            team2Name: selectedMatch?.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'
        });
    }, [matchResultData.maps_data, setMatchResultData, selectedWinner, selectedMatch]);

    // üéØ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–û –ö–ê–†–¢–ê–ú
    useEffect(() => {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω—è—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ä—Ç–∞–º
        if (!autoCalculateScore) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω
        
        const mapsData = matchResultData.maps_data || [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const hasMapResults = mapsData.some(map => 
            (parseInt(map.score1) || 0) !== 0 || (parseInt(map.score2) || 0) !== 0
        );
        
        if (hasMapResults && mapsData.length > 0) {
            calculateOverallScoreFromMaps();
        }
    }, [matchResultData.maps_data, calculateOverallScoreFromMaps, autoCalculateScore]);

    // üéØ –¢–£–õ–¢–ò–ü –° –°–û–°–¢–ê–í–û–ú –ö–û–ú–ê–ù–î–´ (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´)
    const TeamTooltip = ({ team, composition, show }) => {
        if (!show || !composition) return null;

        return (
            <div className="modal-system-tooltip modal-system-tooltip-bottom">
                <div className="modal-system-section">
                    <h5 className="modal-system-bold modal-system-text-center modal-system-mb-10">
                        {composition.name}
                    </h5>
                    <div className="modal-system-list">
                        {composition.members.map((member, index) => (
                            <div key={index} className="modal-system-list-item">
                                <span className="modal-system-bold">{member.name}</span>
                                {member.rating && (
                                    <span className="modal-system-badge modal-system-badge-success">
                                        ({member.rating})
                                    </span>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        );
    };

    if (!isOpen || !selectedMatch) return null;

    // üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    const handleScoreChange = (team, value) => {
        const score = parseInt(value) || 0; // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Math.max(0, ...)
        const scoreField = team === 1 ? 'score1' : 'score2';
        const otherScoreField = team === 1 ? 'score2' : 'score1';
        const otherScore = parseInt(matchResultData[otherScoreField]) || 0;
        
        console.log('üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞:', {
            team: team,
            newScore: score,
            otherTeamScore: otherScore,
            field: scoreField
        });
        
        setMatchResultData(prev => ({
            ...prev,
            [scoreField]: score
        }));
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞
        let newWinner = selectedWinner;
        
        // üèÜ –£–ß–ò–¢–´–í–ê–ï–ú –ü–†–ò–û–†–ò–¢–ï–¢ –ö–ê–†–¢: –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã, –æ–Ω–∏ –≤–∞–∂–Ω–µ–µ –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞
        const mapsData = matchResultData.maps_data || [];
        let shouldUpdateWinnerByScore = true;
        
        if (mapsData.length > 0) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            let team1MapWins = 0;
            let team2MapWins = 0;
            
            mapsData.forEach(map => {
                const mapScore1 = parseInt(map.score1) || 0;
                const mapScore2 = parseInt(map.score2) || 0;
                
                if (mapScore1 > mapScore2) {
                    team1MapWins++;
                } else if (mapScore2 > mapScore1) {
                    team2MapWins++;
                }
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ –∫–∞—Ä—Ç–∞–º, –Ω–µ –º–µ–Ω—è–µ–º –µ–≥–æ
            if (team1MapWins !== team2MapWins) {
                console.log('–ö–∞—Ä—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞');
                shouldUpdateWinnerByScore = false;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ —Å—á–µ—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—Ä—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (shouldUpdateWinnerByScore) {
            if (score > otherScore) {
                newWinner = team === 1 ? 'team1' : 'team2';
            } else if (score < otherScore) {
                newWinner = team === 1 ? 'team2' : 'team1';
            } else if (score === otherScore) {
                // –ü—Ä–∏ —Ä–∞–≤–Ω–æ–º —Å—á–µ—Ç–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
                if (autoCalculateScore) {
                    newWinner = null;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (newWinner !== selectedWinner) {
                console.log('üèÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞:', {
                    previousWinner: selectedWinner,
                    newWinner: newWinner,
                    reason: 'handleScoreChange - –æ–±—â–∏–π —Å—á–µ—Ç (–Ω–µ—Ç –∫–∞—Ä—Ç –∏–ª–∏ —Ä–∞–≤–Ω—ã–µ –ø–æ–±–µ–¥—ã –Ω–∞ –∫–∞—Ä—Ç–∞—Ö)',
                    scores: `${team === 1 ? score : otherScore}:${team === 2 ? score : otherScore}`
                });
                setSelectedWinner(newWinner);
            }
        }
    };

    // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–ß–ï–¢–ê –ö–ê–†–¢–´
    const handleMapScoreChange = (mapIndex, team, value) => {
        const score = parseInt(value) || 0;
        setMatchResultData(prev => {
            const newMapsData = [...(prev.maps_data || [])];
            if (!newMapsData[mapIndex]) {
                newMapsData[mapIndex] = { map: '', score1: 0, score2: 0 };
            }
            newMapsData[mapIndex] = {
                ...newMapsData[mapIndex],
                [team === 1 ? 'score1' : 'score2']: score
            };
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return { ...prev, maps_data: newMapsData };
        });
        
        console.log(`üó∫Ô∏è –ò–∑–º–µ–Ω–µ–Ω —Å—á–µ—Ç –∫–∞—Ä—Ç—ã ${mapIndex + 1}, –∫–æ–º–∞–Ω–¥–∞ ${team}: ${score}`);
    };

    const handleMapNameChange = (mapIndex, mapName) => {
        setMatchResultData(prev => {
            const newMapsData = [...(prev.maps_data || [])];
            if (!newMapsData[mapIndex]) {
                newMapsData[mapIndex] = { map: '', score1: 0, score2: 0 };
            }
            newMapsData[mapIndex] = {
                ...newMapsData[mapIndex],
                map: mapName
            };
            return { ...prev, maps_data: newMapsData };
        });
    };

    const addMap = () => {
        const mapsCount = (matchResultData.maps_data || []).length;
        if (mapsCount >= 7) return;
        
        setMatchResultData(prev => ({
            ...prev,
            maps_data: [
                ...(prev.maps_data || []),
                { map: '', score1: 0, score2: 0 }
            ]
        }));
    };

    const removeMap = (mapIndex) => {
        setMatchResultData(prev => {
            const newMapsData = prev.maps_data?.filter((_, index) => index !== mapIndex) || [];
            return { ...prev, maps_data: newMapsData };
        });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        
        // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –î–ê–ù–ù–´–ï –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô
        console.log('üéØ handleSubmit: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', {
            selectedMatch: selectedMatch,
            selectedMatchType: typeof selectedMatch,
            selectedMatchId: selectedMatch?.id,
            isNumber: typeof selectedMatch === 'number',
            matchResultData: matchResultData,
            selectedWinner: selectedWinner
        });

        // üîß –û–ë–†–ê–ë–û–¢–ö–ê ID –ú–ê–¢–ß–ê (–ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç)
        let matchId = null;
        
        if (typeof selectedMatch === 'number') {
            // –ï—Å–ª–∏ selectedMatch —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, —Ç–æ —ç—Ç–æ –∏ –µ—Å—Ç—å ID –º–∞—Ç—á–∞
            matchId = selectedMatch;
            console.log('‚úÖ selectedMatch —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (ID –º–∞—Ç—á–∞):', matchId);
        } else if (selectedMatch && typeof selectedMatch === 'object') {
            // –ï—Å–ª–∏ selectedMatch —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –∏–∑–≤–ª–µ–∫–∞–µ–º ID
            matchId = selectedMatch.id;
            console.log('‚úÖ selectedMatch —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –∏–∑–≤–ª–µ–∫–∞–µ–º ID:', matchId);
        } else {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: selectedMatch –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø!', {
                selectedMatch,
                type: typeof selectedMatch
            });
        }

        // üîß –ü–†–û–í–ï–†–Ø–ï–ú –í–ê–õ–ò–î–ù–û–°–¢–¨ ID –ú–ê–¢–ß–ê
        if (!matchId && matchId !== 0) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞!', {
                selectedMatch,
                matchId,
                selectedMatchType: typeof selectedMatch
            });
            alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–Ω–æ–≤–∞.');
            return;
        }
        
        console.log('‚úÖ ID –º–∞—Ç—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:', matchId);
        
        const errors = validateResults();
        if (Object.keys(errors).length > 0) {
            console.warn('üö´ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞:', errors);
            return;
        }
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û–ë–ï–î–ò–¢–ï–õ–Ø
        let finalWinner = selectedWinner;
        
        console.log('üèÜ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –¥–ª—è —Å–æ–ª–æ/–∫–æ–º–∞–Ω–¥):', {
            currentSelectedWinner: selectedWinner,
            score1: matchResultData.score1,
            score2: matchResultData.score2,
            autoCalculateScore: autoCalculateScore,
            mapsCount: (matchResultData.maps_data || []).length,
            participant_type: tournament?.participant_type,
            team1_id: selectedMatch?.team1_id,
            team2_id: selectedMatch?.team2_id
        });
        
        // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω –≤—Ä—É—á–Ω—É—é, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if (!finalWinner) {
            const mapsData = matchResultData.maps_data || [];
            
            // üîß –ü–†–ò–û–†–ò–¢–ï–¢ 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞—Ä—Ç–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (mapsData.length > 0) {
                let team1MapWins = 0;
                let team2MapWins = 0;
                
                mapsData.forEach(map => {
                    const mapScore1 = parseInt(map.score1) || 0;
                    const mapScore2 = parseInt(map.score2) || 0;
                    
                    if (mapScore1 > mapScore2) {
                        team1MapWins++;
                    } else if (mapScore2 > mapScore1) {
                        team2MapWins++;
                    }
                });
                
                console.log('üó∫Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –∫–∞—Ä—Ç–∞–º:', {
                    team1MapWins,
                    team2MapWins,
                    mapsPlayed: mapsData.length
                });
                
                if (team1MapWins > team2MapWins) {
                    finalWinner = 'team1';
                    console.log('üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –∫–∞—Ä—Ç–∞–º: team1');
                } else if (team2MapWins > team1MapWins) {
                    finalWinner = 'team2';
                    console.log('üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –∫–∞—Ä—Ç–∞–º: team2');
                }
                // –ï—Å–ª–∏ —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—É
            }
            
            // üîß –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ï—Å–ª–∏ –∫–∞—Ä—Ç –Ω–µ—Ç –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É
            if (!finalWinner) {
                const score1 = parseInt(matchResultData.score1) || 0;
                const score2 = parseInt(matchResultData.score2) || 0;
                
                console.log('ü§ñ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É:', { score1, score2 });
                
                if (score1 > score2) {
                    finalWinner = 'team1';
                    console.log('üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É: team1');
                } else if (score2 > score1) {
                    finalWinner = 'team2';
                    console.log('üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É: team2');
                } else {
                    console.log('ü§ù –ù–∏—á—å—è - —Ä–∞–≤–Ω—ã–π —Å—á–µ—Ç –∏ —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö');
                    finalWinner = null;
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (finalWinner !== selectedWinner) {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º selectedWinner:', finalWinner);
            setSelectedWinner(finalWinner);
        }
        
        // üîß –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ winner_team_id –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
        let winner_team_id = null;
        if (finalWinner && selectedMatch) {
            if (finalWinner === 'team1') {
                winner_team_id = selectedMatch.team1_id;
            } else if (finalWinner === 'team2') {
                winner_team_id = selectedMatch.team2_id;
            }
        }
        
        // üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        const participantType = tournament?.participant_type || 'unknown';
        const entityType = participantType === 'solo' ? '—É—á–∞—Å—Ç–Ω–∏–∫–∞' : '–∫–æ–º–∞–Ω–¥—ã';
        
        const submitData = {
            ...matchResultData,
            winner: finalWinner,
            winner_team_id: winner_team_id  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–ª–æ
        };
        
        console.log('üíæ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ):', {
            matchId: matchId,
            finalWinner: finalWinner,
            winner_team_id: winner_team_id,
            participant_type: participantType,
            entity_type: entityType,
            score: `${submitData.score1}:${submitData.score2}`,
            mapsCount: (submitData.maps_data || []).length,
            submitData: submitData
        });
        
        if (typeof onSave === 'function') {
            onSave(submitData);
        } else {
            console.error('‚ùå onSave –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π:', onSave);
        }
    };

    const handleClose = () => {
        modalSystem.closeModal();
        onClose();
    };

    const isCS2 = isCounterStrike2(getTournamentGame());
    const mapsData = matchResultData.maps_data || [];
    const hasValidationErrors = Object.keys(validationErrors).length > 0;
    const mapStats = getMapStatistics();
    const isInProgressWithMaps = tournament?.status === 'in_progress' && Array.isArray(selectedMatch?.maps_data) && selectedMatch.maps_data.length > 0;

    // üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–†–û–ë–õ–ï–ú –° –ö–ê–†–¢–ê–ú–ò
    console.log('üó∫Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç –≤ MatchResultModal v5.0:', {
        tournamentGame: getTournamentGame(),
        isCS2,
        availableMapsCount: availableMaps.length,
        availableMaps: availableMaps.slice(0, 3), // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–∞—Ä—Ç—ã
        currentMapsDataCount: mapsData.length,
        selectedMatchId: selectedMatch?.id,
        showModal: isOpen,
        shouldShowMapsSection: isCS2 && availableMaps.length > 0
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
    const getMapDisplayName = (m) => (m?.map_name || m?.map || m?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');

    // –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ –∫–∞—Ä—Ç
    const renderMapsSection = () => {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ —Å—á—ë—Ç–∞ –ø–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ä—Ç–∞–º
        if (isInProgressWithMaps) {
            const mapsData = matchResultData.maps_data || selectedMatch.maps_data || [];
            return (
                <section className="modal-section maps-section">
                    <h3>–ö–∞—Ä—Ç—ã –∏ —Å—á—ë—Ç</h3>
                    <div className="maps-score-grid">
                        {mapsData.map((m, idx) => (
                            <div key={idx} className="map-score-row">
                                <div className="map-name">{getMapDisplayName(m)}</div>
                                <input
                                    type="number"
                                    min="0"
                                    className="score-input"
                                    value={m.score1 ?? ''}
                                    onChange={(e) => {
                                        const v = e.target.value === '' ? null : parseInt(e.target.value, 10);
                                        setMatchResultData(prev => {
                                            const next = { ...(prev || {}), maps_data: [...(prev?.maps_data || mapsData)] };
                                            next.maps_data[idx] = { ...(next.maps_data[idx] || m), score1: v };
                                            return next;
                                        });
                                    }}
                                    placeholder={selectedMatch.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1'}
                                />
                                <span className="score-sep">:</span>
                                <input
                                    type="number"
                                    min="0"
                                    className="score-input"
                                    value={m.score2 ?? ''}
                                    onChange={(e) => {
                                        const v = e.target.value === '' ? null : parseInt(e.target.value, 10);
                                        setMatchResultData(prev => {
                                            const next = { ...(prev || {}), maps_data: [...(prev?.maps_data || mapsData)] };
                                            next.maps_data[idx] = { ...(next.maps_data[idx] || m), score2: v };
                                            return next;
                                        });
                                    }}
                                    placeholder={selectedMatch.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'}
                                />
                            </div>
                        ))}
                    </div>
                </section>
            );
        }

        // –û–±—ã—á–Ω—ã–π –ø–æ–ª–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∏–∂–µ)
        return (
            <div className="modal-system-section">
                <h3 className="modal-system-section-title">
                    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ä—Ç–∞–º ({mapsData.length}/7)
                </h3>
                <p className="modal-system-section-content modal-system-mb-20">
                    –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                </p>
                
                <div className="modal-system-flex-column">
                    {mapsData.map((mapData, index) => (
                        <div key={index} className="modal-system-info">
                            <div className="modal-system-flex-between modal-system-mb-10">
                                <select
                                    className="modal-system-select"
                                    value={mapData.map || ''}
                                    onChange={(e) => handleMapNameChange(index, e.target.value)}
                                    disabled={isLoading}
                                    style={{ flex: 1, marginRight: '10px' }}
                                >
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É</option>
                                    {availableMaps.map((mapName) => (
                                        <option key={mapName} value={mapName}>{mapName}</option>
                                    ))}
                                </select>
                                <button
                                    type="button"
                                    className="modal-system-btn modal-system-btn-danger modal-system-btn-small"
                                    onClick={() => removeMap(index)}
                                    disabled={isLoading}
                                    title="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É"
                                >
                                    üóëÔ∏è
                                </button>
                            </div>
                            
                            <div className="modal-system-grid-3">
                                <div className="modal-system-form-group">
                                    <label className="modal-system-label">
                                        {/* üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –≤ —Å–µ–∫—Ü–∏–∏ –∫–∞—Ä—Ç */}
                                        {selectedMatch.team1_name || 
                                         (tournament?.participant_type === 'solo' ? '–£—á–∞—Å—Ç–Ω–∏–∫ 1' : '–ö–æ–º–∞–Ω–¥–∞ 1')}
                                    </label>
                                    <input
                                        type="number"
                                        className={`modal-system-input ${validationErrors[`map_${index}_scores`] ? 'modal-system-input-error' : ''}`}
                                        value={mapData.score1 || 0}
                                        onChange={(e) => handleMapScoreChange(index, 1, e.target.value)}
                                        disabled={isLoading}
                                    />
                                </div>
                                <div className="modal-system-text-center modal-system-flex-center">
                                    <div style={{ fontSize: '20px', fontWeight: 'bold' }}>:</div>
                                </div>
                                <div className="modal-system-form-group">
                                    <label className="modal-system-label">
                                        {/* üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –≤ —Å–µ–∫—Ü–∏–∏ –∫–∞—Ä—Ç */}
                                        {selectedMatch.team2_name || 
                                         (tournament?.participant_type === 'solo' ? '–£—á–∞—Å—Ç–Ω–∏–∫ 2' : '–ö–æ–º–∞–Ω–¥–∞ 2')}
                                    </label>
                                    <input
                                        type="number"
                                        className={`modal-system-input ${validationErrors[`map_${index}_scores`] ? 'modal-system-input-error' : ''}`}
                                        value={mapData.score2 || 0}
                                        onChange={(e) => handleMapScoreChange(index, 2, e.target.value)}
                                        disabled={isLoading}
                                    />
                                </div>
                            </div>
                            {validationErrors[`map_${index}_scores`] && (
                                <div className="modal-system-info modal-system-info-error modal-system-mt-10">
                                    {validationErrors[`map_${index}_scores`]}
                                </div>
                            )}
                        </div>
                    ))}
                    
                    <button 
                        type="button"
                        className="modal-system-btn"
                        onClick={addMap}
                        disabled={isLoading || mapsData.length >= 7}
                    >
                        –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É ({mapsData.length}/7)
                    </button>
                </div>

                {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º */}
                {mapStats && (
                    <div className="modal-system-section modal-system-mt-20">
                        <h4 className="modal-system-bold modal-system-mb-10">–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                        <div className="modal-system-grid-3">
                            <div className="modal-system-info">
                                <h5 className="modal-system-bold modal-system-mb-10">–ü–æ–±–µ–¥—ã –ø–æ –∫–∞—Ä—Ç–∞–º</h5>
                                <div className="modal-system-flex-column">
                                    <span>
                                        {/* üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ */}
                                        {selectedMatch.team1_name || 
                                         (tournament?.participant_type === 'solo' ? '–£—á–∞—Å—Ç–Ω–∏–∫ 1' : '–ö–æ–º–∞–Ω–¥–∞ 1')}: {mapStats.team1Wins}
                                    </span>
                                    <span>
                                        {/* üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ */}
                                        {selectedMatch.team2_name || 
                                         (tournament?.participant_type === 'solo' ? '–£—á–∞—Å—Ç–Ω–∏–∫ 2' : '–ö–æ–º–∞–Ω–¥–∞ 2')}: {mapStats.team2Wins}
                                    </span>
                                    {mapStats.draws > 0 && <span>–ù–∏—á—å–∏: {mapStats.draws}</span>}
                                </div>
                            </div>
                            
                            <div className="modal-system-info">
                                <h5 className="modal-system-bold modal-system-mb-10">üéØ –û–±—â–∏–π —Å—á–µ—Ç –ø–æ –æ—á–∫–∞–º</h5>
                                <div className="modal-system-flex-column">
                                    <span>
                                        {/* üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ */}
                                        {selectedMatch.team1_name || 
                                         (tournament?.participant_type === 'solo' ? '–£—á–∞—Å—Ç–Ω–∏–∫ 1' : '–ö–æ–º–∞–Ω–¥–∞ 1')}: {mapStats.team1TotalScore}
                                    </span>
                                    <span>
                                        {/* üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ */}
                                        {selectedMatch.team2_name || 
                                         (tournament?.participant_type === 'solo' ? '–£—á–∞—Å—Ç–Ω–∏–∫ 2' : '–ö–æ–º–∞–Ω–¥–∞ 2')}: {mapStats.team2TotalScore}
                                    </span>
                                    <span>–†–∞–∑–Ω–æ—Å—Ç—å: ¬±{mapStats.scoreDifference}</span>
                                </div>
                            </div>
                            
                            <div className="modal-system-info">
                                <h5 className="modal-system-bold modal-system-mb-10">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h5>
                                <div className="modal-system-flex-column">
                                    <span>–ö–∞—Ä—Ç —Å—ã–≥—Ä–∞–Ω–æ: {mapStats.mapsCount}</span>
                                    <span>–§–æ—Ä–º–∞—Ç: {mapStats.mapsCount === 1 ? 'BO1' : 
                                                                     mapStats.mapsCount <= 3 ? 'BO3' : 
                                                                     mapStats.mapsCount <= 5 ? 'BO5' : 'BO7'}</span>
                                    <span>–°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç: {Math.round((mapStats.team1TotalScore + mapStats.team2TotalScore) / mapStats.mapsCount / 2)}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        );
    };

    return (
        <div className="modal-system-overlay" onClick={handleClose}>
            <div className={modalSystem.getModalClasses('large')} onClick={(e) => e.stopPropagation()}>
                
                {/* === –ó–ê–ì–û–õ–û–í–û–ö –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê === */}
                <div className="modal-system-header">
                    <div>
                        <h2 className="modal-system-title">
                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
                            {hasChanges && (
                                <span className="modal-system-badge modal-system-badge-warning modal-system-ml-10">
                                    *
                                </span>
                            )}
                        </h2>
                    </div>
                    <button 
                        className="modal-system-close" 
                        onClick={handleClose} 
                        aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
                    >
                        ‚úï
                    </button>
                </div>

                {/* === –¢–ï–õ–û –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê === */}
                <div className="modal-system-body">
                    <form onSubmit={handleSubmit} className="modal-system-flex-column">
                        
                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
                        <div className="modal-system-section">
                            <h3 className="modal-system-section-title">üèÜ –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è</h3>
                            
                            <div className="modal-system-grid-3">
                                <div 
                                    className={`modal-system-info ${selectedWinner === 'team1' ? 'modal-system-info-success' : ''}`}
                                    onClick={() => selectWinner('team1')}
                                    onMouseEnter={() => selectedMatch.team1_composition && setShowTeam1Tooltip(true)}
                                    onMouseLeave={() => setShowTeam1Tooltip(false)}
                                    style={{ cursor: 'pointer', position: 'relative' }}
                                    title="–í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º"
                                >
                                    <div className="modal-system-text-center">
                                        <div className="modal-system-bold modal-system-mb-10">
                                            {/* üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï: –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã */}
                                            {selectedMatch.team1_name || 
                                             (tournament?.participant_type === 'solo' ? '–£—á–∞—Å—Ç–Ω–∏–∫ 1' : '–ö–æ–º–∞–Ω–¥–∞ 1')}
                                        </div>
                                        {selectedWinner === 'team1' && (
                                            <div className="modal-system-badge modal-system-badge-success">
                                                üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
                                            </div>
                                        )}
                                    </div>
                                    
                                    <TeamTooltip 
                                        team="team1"
                                        composition={selectedMatch.team1_composition}
                                        show={showTeam1Tooltip}
                                    />
                                </div>

                                <div className="modal-system-text-center">
                                    <div style={{ fontSize: '24px', fontWeight: 'bold', margin: '20px 0' }}>VS</div>
                                </div>

                                <div 
                                    className={`modal-system-info ${selectedWinner === 'team2' ? 'modal-system-info-success' : ''}`}
                                    onClick={() => selectWinner('team2')}
                                    onMouseEnter={() => selectedMatch.team2_composition && setShowTeam2Tooltip(true)}
                                    onMouseLeave={() => setShowTeam2Tooltip(false)}
                                    style={{ cursor: 'pointer', position: 'relative' }}
                                    title="–í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º"
                                >
                                    <div className="modal-system-text-center">
                                        <div className="modal-system-bold modal-system-mb-10">
                                            {/* üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï: –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã */}
                                            {selectedMatch.team2_name || 
                                             (tournament?.participant_type === 'solo' ? '–£—á–∞—Å—Ç–Ω–∏–∫ 2' : '–ö–æ–º–∞–Ω–¥–∞ 2')}
                                        </div>
                                        {selectedWinner === 'team2' && (
                                            <div className="modal-system-badge modal-system-badge-success">
                                                üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
                                            </div>
                                        )}
                                    </div>
                                    
                                    <TeamTooltip 
                                        team="team2"
                                        composition={selectedMatch.team2_composition}
                                        show={showTeam2Tooltip}
                                    />
                                </div>
                            </div>
                            
                            {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
                            {selectedWinner && (
                                <div className="modal-system-text-center modal-system-mt-20">
                                    <button 
                                        type="button"
                                        className="modal-system-btn"
                                        onClick={() => setSelectedWinner(null)}
                                        title="–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"
                                    >
                                        üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                                    </button>
                                </div>
                            )}
                            
                            {/* üÜï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
                            {!selectedWinner && (
                                <div className="modal-system-info modal-system-mt-20">
                                    <p className="modal-system-bold">ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è</p>
                                    <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –≤—ã–±–µ—Ä–µ—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é, –æ–Ω –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:</p>
                                    <ul style={{ margin: '10px 0', paddingLeft: '20px' }}>
                                        <li><strong>1Ô∏è‚É£ –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç</strong> (–≥–ª–∞–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π)</li>
                                        <li><strong>2Ô∏è‚É£ –ü–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É –º–∞—Ç—á–∞</strong> (–µ—Å–ª–∏ –∫–∞—Ä—Ç –Ω–µ—Ç –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥)</li>
                                        <li><strong>3Ô∏è‚É£ –ù–∏—á—å—è</strong> - –µ—Å–ª–∏ –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–∞–≤–Ω—ã</li>
                                    </ul>
                                    <p className="modal-system-text-sm">üí° –í —Ç—É—Ä–Ω–∏—Ä–∞—Ö CS2 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –≤–∞–∂–Ω–µ–µ –æ–±—â–µ–≥–æ —Ñ—Ä–∞–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞</p>
                                </div>
                            )}
                        </div>

                        {/* –û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç –º–∞—Ç—á–∞ */}
                        <div className="modal-system-section">
                            <h3 className="modal-system-section-title">üìä –°—á–µ—Ç –º–∞—Ç—á–∞</h3>
                            
                            {/* üÜï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ */}
                            {isCS2 && availableMaps.length > 0 && (
                                <div className="modal-system-info modal-system-mb-20">
                                    <div className="modal-system-checkbox-group">
                                        <input
                                            type="checkbox"
                                            className="modal-system-checkbox"
                                            checked={autoCalculateScore}
                                            onChange={(e) => setAutoCalculateScore(e.target.checked)}
                                            disabled={isLoading}
                                        />
                                        <span className="modal-system-bold">
                                            üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –æ–±—â–∏–π —Å—á–µ—Ç –ø–æ –∫–∞—Ä—Ç–∞–º
                                        </span>
                                    </div>
                                    
                                    {autoCalculateScore && mapsData.length > 0 && (
                                        <div className="modal-system-flex-between modal-system-mt-10">
                                            <span>‚ö° –°—á–µ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–±–µ–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö</span>
                                            <button
                                                type="button"
                                                className="modal-system-btn modal-system-btn-small"
                                                onClick={calculateOverallScoreFromMaps}
                                                title="–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—á–µ—Ç —Å–µ–π—á–∞—Å"
                                                disabled={isLoading}
                                            >
                                                üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
                                            </button>
                                        </div>
                                    )}
                                    
                                    {!autoCalculateScore && mapsData.length > 0 && (
                                        <div className="modal-system-mt-10">
                                            <p>üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–π —Å—á–µ—Ç –≤—Ä—É—á–Ω—É—é:</p>
                                            <button
                                                type="button"
                                                className="modal-system-btn"
                                                onClick={calculateOverallScoreFromMaps}
                                                disabled={isLoading}
                                            >
                                                üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—á–µ—Ç –ø–æ –∫–∞—Ä—Ç–∞–º
                                            </button>
                                        </div>
                                    )}
                                </div>
                            )}
                            
                            <div className="form-grid-3">
                                <div className="modal-system-form-group">
                                    <label className="modal-system-label">
                                        {/* üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –≤ —Å–µ–∫—Ü–∏–∏ —Å—á–µ—Ç–∞ */}
                                        {selectedMatch.team1_name || 
                                         (tournament?.participant_type === 'solo' ? '–£—á–∞—Å—Ç–Ω–∏–∫ 1' : '–ö–æ–º–∞–Ω–¥–∞ 1')}
                                    </label>
                                    <input
                                        type="number"
                                        className={`modal-system-input ${validationErrors.scores ? 'modal-system-input-error' : ''} ${autoCalculateScore && mapsData.length > 0 ? 'modal-system-input-disabled' : ''}`}
                                        value={matchResultData.score1}
                                        onChange={(e) => handleScoreChange(1, e.target.value)}
                                        disabled={isLoading || (autoCalculateScore && mapsData.length > 0)}
                                        title={autoCalculateScore && mapsData.length > 0 ? '–°—á–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–±–µ–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö' : ''}
                                    />
                                    {autoCalculateScore && mapsData.length > 0 && (
                                        <div className="modal-system-badge modal-system-mt-10">ü§ñ –ê–≤—Ç–æ</div>
                                    )}
                                </div>

                                <div className="modal-system-text-center modal-system-flex-center">
                                    <div style={{ fontSize: '32px', fontWeight: 'bold' }}>:</div>
                                </div>

                                <div className="modal-system-form-group">
                                    <label className="modal-system-label">
                                        {/* üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –≤ —Å–µ–∫—Ü–∏–∏ —Å—á–µ—Ç–∞ */}
                                        {selectedMatch.team2_name || 
                                         (tournament?.participant_type === 'solo' ? '–£—á–∞—Å—Ç–Ω–∏–∫ 2' : '–ö–æ–º–∞–Ω–¥–∞ 2')}
                                    </label>
                                    <input
                                        type="number"
                                        className={`modal-system-input ${validationErrors.scores ? 'modal-system-input-error' : ''} ${autoCalculateScore && mapsData.length > 0 ? 'modal-system-input-disabled' : ''}`}
                                        value={matchResultData.score2}
                                        onChange={(e) => handleScoreChange(2, e.target.value)}
                                        disabled={isLoading || (autoCalculateScore && mapsData.length > 0)}
                                        title={autoCalculateScore && mapsData.length > 0 ? '–°—á–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–±–µ–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö' : ''}
                                    />
                                    {autoCalculateScore && mapsData.length > 0 && (
                                        <div className="modal-system-badge modal-system-mt-10">ü§ñ –ê–≤—Ç–æ</div>
                                    )}
                                </div>
                            </div>
                            
                            {validationErrors.scores && (
                                <div className="modal-system-info modal-system-info-error modal-system-mt-10">
                                    {validationErrors.scores}
                                </div>
                            )}
                            
                            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ */}
                            {autoCalculateScore && mapsData.length > 0 && (
                                <div className="modal-system-info modal-system-mt-20">
                                    <p className="modal-system-bold">üí° –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç:</p>
                                    <ul style={{ margin: '10px 0', paddingLeft: '20px' }}>
                                        <li>–ö–∞–∂–¥–∞—è –≤—ã–∏–≥—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ = +1 –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—É –∫–æ–º–∞–Ω–¥—ã</li>
                                        <li>–ù–∏—á—å–∏ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –æ–±—â–∏–π —Å—á–µ—Ç</li>
                                        <li>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –±–æ–ª—å—à–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç</li>
                                    </ul>
                                </div>
                            )}
                        </div>

                        {/* üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ï–ö–¶–ò–Ø –ö–ê–†–¢ */}
                        {isCS2 && availableMaps.length > 0 && (
                            renderMapsSection()
                        )}

                        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –∫–∞—Ä—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è */}
                        {!isCS2 && (
                            <div className="modal-system-info modal-system-info-warning">
                                <p>‚ÑπÔ∏è –ò–≥—Ä–∞ "{getTournamentGame() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç</p>
                            </div>
                        )}

                        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ CS2 –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç */}
                        {isCS2 && availableMaps.length === 0 && (
                            <div className="modal-system-info modal-system-info-error">
                                <p>‚ö†Ô∏è –ö–∞—Ä—Ç—ã –¥–ª—è Counter-Strike 2 –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>
                            </div>
                        )}

                        {/* –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ */}
                        {hasValidationErrors && (
                            <div className="modal-system-info modal-system-info-error">
                                <h5 className="modal-system-bold">‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</h5>
                                <ul style={{ margin: '10px 0', paddingLeft: '20px' }}>
                                    {Object.entries(validationErrors).map(([field, error]) => (
                                        <li key={field}>{error}</li>
                                    ))}
                                </ul>
                            </div>
                        )}
                    </form>
                </div>

                {/* === –ü–û–î–í–ê–õ –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê === */}
                <div className="modal-system-footer modal-system-space-between">
                    <button 
                        type="button"
                        className="modal-system-btn"
                        onClick={handleClose}
                        disabled={isLoading}
                    >
                        ‚ùå –û—Ç–º–µ–Ω–∞
                    </button>
                    <button 
                        type="submit"
                        className="modal-system-btn modal-system-btn-primary"
                        onClick={handleSubmit}
                        disabled={isLoading || hasValidationErrors}
                    >
                        {isLoading ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default MatchResultModal; 
