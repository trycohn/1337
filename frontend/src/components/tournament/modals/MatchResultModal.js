import React, { useState, useEffect, useCallback } from 'react';
import { isCounterStrike2, getDefaultCS2Maps } from '../../../utils/mapHelpers';
import './MatchResultModal.css';

/**
 * MatchResultModal v4.0 - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞—Ç—á–µ–π
 * 
 * @version 4.0 (–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ —Ç—É–ª—Ç–∏–ø–∞–º–∏)
 * @features –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, —Ç—É–ª—Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –≤–∞–ª–∏–¥–∞—Ü–∏—è
 */
const MatchResultModal = ({
    isOpen,
    onClose,
    selectedMatch,        
    matchResultData,      
    setMatchResultData,   
    onSave,
    isLoading = false,
    tournament = null     
}) => {
    const [availableMaps, setAvailableMaps] = useState([]);
    const [validationErrors, setValidationErrors] = useState({});
    const [hasChanges, setHasChanges] = useState(false);
    const [selectedWinner, setSelectedWinner] = useState(null); // null, 'team1', 'team2'
    const [autoCalculateScore, setAutoCalculateScore] = useState(true); // üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç

    // üéØ –£–õ–£–ß–®–ï–ù–ù–û–ï: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
    const getTournamentGame = useCallback(() => {
        console.log('üéÆ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç...');
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü—Ä—è–º–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
        if (tournament?.game) {
            console.log('‚úÖ –ò–≥—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑ –ø—Ä–æ–ø—Å–∞ tournament:', tournament.game);
            return tournament.game;
        }
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –¢—É—Ä–Ω–∏—Ä –∏–∑ localStorage
        try {
            const tournamentData = localStorage.getItem('currentTournament');
            if (tournamentData) {
                const parsedTournament = JSON.parse(tournamentData);
                if (parsedTournament.game) {
                    console.log('‚úÖ –ò–≥—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑ localStorage:', parsedTournament.game);
                    return parsedTournament.game;
                }
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ localStorage:', error);
        }
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞
        if (selectedMatch?.maps_data || selectedMatch?.game === 'Counter-Strike 2') {
            console.log('‚úÖ –ò–≥—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞: Counter-Strike 2');
            return 'Counter-Strike 2';
        }
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        try {
            const pathMatch = window.location.pathname.match(/\/tournaments\/(\d+)/);
            if (pathMatch) {
                console.log('üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä—É –ø–æ URL –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞:', pathMatch[1]);
                // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º CS2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                console.log('‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º Counter-Strike 2 –∫–∞–∫ –∏–≥—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                return 'Counter-Strike 2';
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä—ã –ø–æ URL:', error);
        }
        
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞');
        return null;
    }, [tournament, selectedMatch]);

    // üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø WINNER –ò–ó –î–ê–ù–ù–´–• –ú–ê–¢–ß–ê
    useEffect(() => {
        if (selectedMatch && matchResultData) {
            const winnerId = selectedMatch.winner_team_id || selectedMatch.winner_id;
            if (winnerId) {
                if (winnerId === selectedMatch.team1_id) {
                    setSelectedWinner('team1');
                } else if (winnerId === selectedMatch.team2_id) {
                    setSelectedWinner('team2');
                } else {
                    setSelectedWinner(null);
                }
            } else {
                // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ —Å—á–µ—Ç—É
                const score1 = parseInt(matchResultData.score1) || 0;
                const score2 = parseInt(matchResultData.score2) || 0;
                if (score1 > score2) {
                    setSelectedWinner('team1');
                } else if (score2 > score1) {
                    setSelectedWinner('team2');
                } else {
                    setSelectedWinner(null);
                }
            }
        }
    }, [selectedMatch, matchResultData]);

    // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–û–°–¢–£–ü–ù–´–• –ö–ê–†–¢
    useEffect(() => {
        const gameType = getTournamentGame();
        console.log('üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã:', gameType);
        
        if (gameType && isCounterStrike2(gameType)) {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ —Ö–µ–ª–ø–µ—Ä –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã
            const maps = getDefaultCS2Maps();
            setAvailableMaps(maps);
            console.log('üó∫Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã:', gameType, '- –∫–∞—Ä—Ç:', maps.length, '—Å–ø–∏—Å–æ–∫:', maps);
        } else if (gameType) {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            console.log('üó∫Ô∏è –ò–≥—Ä–∞', gameType, '–ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç');
            setAvailableMaps([]);
        } else {
            console.log('üó∫Ô∏è –ò–≥—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            setAvailableMaps([]);
        }
    }, [getTournamentGame]);

    // üéØ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô
    useEffect(() => {
        if (matchResultData && selectedMatch) {
            const hasScoreChanges = 
                matchResultData.score1 !== (selectedMatch.score1 || 0) ||
                matchResultData.score2 !== (selectedMatch.score2 || 0);
            
            const hasMapsChanges = 
                JSON.stringify(matchResultData.maps_data || []) !== 
                JSON.stringify(selectedMatch.maps_data || []);
            
            const hasWinnerChanges = selectedWinner !== null;
            
            setHasChanges(hasScoreChanges || hasMapsChanges || hasWinnerChanges);
        }
    }, [matchResultData, selectedMatch, selectedWinner]);

    // üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞)
    const validateResults = useCallback(() => {
        const errors = {};
        
        if (!matchResultData) {
            errors.general = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞';
            return errors;
        }

        const score1 = parseInt(matchResultData.score1) || 0;
        const score2 = parseInt(matchResultData.score2) || 0;
        
        // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞
        if (score1 === 0 && score2 === 0 && !selectedWinner) {
            errors.scores = '–£–∫–∞–∂–∏—Ç–µ —Å—á–µ—Ç –º–∞—Ç—á–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è';
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç –¥–ª—è CS2
        const isCS2 = isCounterStrike2(getTournamentGame());
        if (isCS2 && matchResultData.maps_data && matchResultData.maps_data.length > 0) {
            matchResultData.maps_data.forEach((mapData, index) => {
                if (!mapData.map || mapData.map.trim() === '') {
                    errors[`map_${index}_name`] = `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã ${index + 1}`;
                }
            });
        }

        return errors;
    }, [matchResultData, selectedWinner, getTournamentGame]);

    // üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò
    useEffect(() => {
        if (matchResultData) {
            const errors = validateResults();
            setValidationErrors(errors);
        }
    }, [matchResultData, validateResults]);

    // üéØ –§–£–ù–ö–¶–ò–Ø –í–´–ë–û–†–ê –ü–û–ë–ï–î–ò–¢–ï–õ–Ø
    const selectWinner = useCallback((team) => {
        console.log('üèÜ –í—ã–±—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å:', team);
        setSelectedWinner(team);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (team === 'team1' && parseInt(matchResultData.score1 || 0) <= parseInt(matchResultData.score2 || 0)) {
            setMatchResultData(prev => ({
                ...prev,
                score1: Math.max(1, parseInt(prev.score2 || 0) + 1)
            }));
        } else if (team === 'team2' && parseInt(matchResultData.score2 || 0) <= parseInt(matchResultData.score1 || 0)) {
            setMatchResultData(prev => ({
                ...prev,
                score2: Math.max(1, parseInt(prev.score1 || 0) + 1)
            }));
        }
    }, [matchResultData, setMatchResultData]);

    // üéØ –†–ê–°–ß–ï–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –ö–ê–†–¢–ê–ú
    const getMapStatistics = useCallback(() => {
        const mapsData = matchResultData.maps_data || [];
        if (mapsData.length === 0) return null;
        
        let team1Wins = 0;
        let team2Wins = 0;
        let team1TotalScore = 0;
        let team2TotalScore = 0;
        let draws = 0;
        
        mapsData.forEach(map => {
            const score1 = parseInt(map.score1) || 0;
            const score2 = parseInt(map.score2) || 0;
            
            team1TotalScore += score1;
            team2TotalScore += score2;
            
            if (score1 > score2) {
                team1Wins++;
            } else if (score2 > score1) {
                team2Wins++;
            } else {
                draws++;
            }
        });
        
        return {
            mapsCount: mapsData.length,
            team1Wins,
            team2Wins,
            draws,
            team1TotalScore,
            team2TotalScore,
            scoreDifference: Math.abs(team1TotalScore - team2TotalScore)
        };
    }, [matchResultData.maps_data]);

    // üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–ï–¢ –û–ë–©–ï–ì–û –°–ß–ï–¢–ê –ü–û –ö–ê–†–¢–ê–ú
    const calculateOverallScoreFromMaps = useCallback(() => {
        const mapsData = matchResultData.maps_data || [];
        if (mapsData.length === 0) return;
        
        let team1Wins = 0;
        let team2Wins = 0;
        
        mapsData.forEach(map => {
            const score1 = parseInt(map.score1) || 0;
            const score2 = parseInt(map.score2) || 0;
            
            if (score1 > score2) {
                team1Wins++;
            } else if (score2 > score1) {
                team2Wins++;
            }
            // –ù–∏—á—å–∏ –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –æ–±—â–∏–π —Å—á–µ—Ç
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –º–∞—Ç—á–∞
        setMatchResultData(prev => ({
            ...prev,
            score1: team1Wins,
            score2: team2Wins
        }));
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if (team1Wins > team2Wins) {
            setSelectedWinner('team1');
        } else if (team2Wins > team1Wins) {
            setSelectedWinner('team2');
        } else {
            setSelectedWinner(null);
        }
        
        console.log('üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—á–µ—Ç–∞:', {
            mapsPlayed: mapsData.length,
            team1Wins,
            team2Wins,
            winner: team1Wins > team2Wins ? 'team1' : team2Wins > team1Wins ? 'team2' : 'draw'
        });
    }, [matchResultData.maps_data, setMatchResultData]);

    // üéØ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–û –ö–ê–†–¢–ê–ú
    useEffect(() => {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω—è—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ä—Ç–∞–º
        if (!autoCalculateScore) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω
        
        const mapsData = matchResultData.maps_data || [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const hasMapResults = mapsData.some(map => 
            (parseInt(map.score1) || 0) !== 0 || (parseInt(map.score2) || 0) !== 0
        );
        
        if (hasMapResults && mapsData.length > 0) {
            calculateOverallScoreFromMaps();
        }
    }, [matchResultData.maps_data, calculateOverallScoreFromMaps, autoCalculateScore]);

    // üéØ –¢–£–õ–¢–ò–ü –° –°–û–°–¢–ê–í–û–ú –ö–û–ú–ê–ù–î–´ (–ú–ò–ù–ò–ú–ê–õ–ò–°–¢–ò–ß–ù–´–ô)
    const TeamTooltip = ({ team, composition, show }) => {
        if (!show || !composition) return null;

        return (
            <div className="team-tooltip">
                <div className="tooltip-header">
                    <h5>{composition.name}</h5>
                </div>
                <div className="tooltip-content">
                    <ul className="team-members-tooltip">
                        {composition.members.map((member, index) => (
                            <li key={index} className="tooltip-member">
                                <span className="member-name">{member.name}</span>
                                {member.rating && (
                                    <span className="member-rating">({member.rating})</span>
                                )}
                            </li>
                        ))}
                    </ul>
                </div>
            </div>
        );
    };

    if (!isOpen || !selectedMatch) return null;

    // üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    const handleScoreChange = (team, value) => {
        const score = parseInt(value) || 0; // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Math.max(0, ...)
        setMatchResultData(prev => ({
            ...prev,
            [team === 1 ? 'score1' : 'score2']: score
        }));
        
        // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        const otherScore = team === 1 ? parseInt(matchResultData.score2) || 0 : parseInt(matchResultData.score1) || 0;
        if (score > otherScore) {
            setSelectedWinner(team === 1 ? 'team1' : 'team2');
        } else if (score < otherScore) {
            setSelectedWinner(team === 1 ? 'team2' : 'team1');
        } else {
            setSelectedWinner(null);
        }
    };

    // üéØ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–ß–ï–¢–ê –ö–ê–†–¢–´
    const handleMapScoreChange = (mapIndex, team, value) => {
        const score = parseInt(value) || 0;
        setMatchResultData(prev => {
            const newMapsData = [...(prev.maps_data || [])];
            if (!newMapsData[mapIndex]) {
                newMapsData[mapIndex] = { map: '', score1: 0, score2: 0 };
            }
            newMapsData[mapIndex] = {
                ...newMapsData[mapIndex],
                [team === 1 ? 'score1' : 'score2']: score
            };
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return { ...prev, maps_data: newMapsData };
        });
        
        console.log(`üó∫Ô∏è –ò–∑–º–µ–Ω–µ–Ω —Å—á–µ—Ç –∫–∞—Ä—Ç—ã ${mapIndex + 1}, –∫–æ–º–∞–Ω–¥–∞ ${team}: ${score}`);
    };

    const handleMapNameChange = (mapIndex, mapName) => {
        setMatchResultData(prev => {
            const newMapsData = [...(prev.maps_data || [])];
            if (!newMapsData[mapIndex]) {
                newMapsData[mapIndex] = { map: '', score1: 0, score2: 0 };
            }
            newMapsData[mapIndex] = {
                ...newMapsData[mapIndex],
                map: mapName
            };
            return { ...prev, maps_data: newMapsData };
        });
    };

    const addMap = () => {
        const mapsCount = (matchResultData.maps_data || []).length;
        if (mapsCount >= 7) return;
        
        setMatchResultData(prev => ({
            ...prev,
            maps_data: [
                ...(prev.maps_data || []),
                { map: '', score1: 0, score2: 0 }
            ]
        }));
    };

    const removeMap = (mapIndex) => {
        setMatchResultData(prev => {
            const newMapsData = prev.maps_data?.filter((_, index) => index !== mapIndex) || [];
            return { ...prev, maps_data: newMapsData };
        });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        
        // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –î–ê–ù–ù–´–ï –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô
        console.log('üéØ handleSubmit: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', {
            selectedMatch: selectedMatch,
            selectedMatchType: typeof selectedMatch,
            selectedMatchId: selectedMatch?.id,
            isNumber: typeof selectedMatch === 'number',
            matchResultData: matchResultData,
            selectedWinner: selectedWinner
        });

        // üîß –û–ë–†–ê–ë–û–¢–ö–ê ID –ú–ê–¢–ß–ê (–ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç)
        let matchId = null;
        
        if (typeof selectedMatch === 'number') {
            // –ï—Å–ª–∏ selectedMatch —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, —Ç–æ —ç—Ç–æ –∏ –µ—Å—Ç—å ID –º–∞—Ç—á–∞
            matchId = selectedMatch;
            console.log('‚úÖ selectedMatch —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (ID –º–∞—Ç—á–∞):', matchId);
        } else if (selectedMatch && typeof selectedMatch === 'object') {
            // –ï—Å–ª–∏ selectedMatch —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –∏–∑–≤–ª–µ–∫–∞–µ–º ID
            matchId = selectedMatch.id;
            console.log('‚úÖ selectedMatch —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –∏–∑–≤–ª–µ–∫–∞–µ–º ID:', matchId);
        } else {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: selectedMatch –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø!', {
                selectedMatch,
                type: typeof selectedMatch
            });
        }

        // üîß –ü–†–û–í–ï–†–Ø–ï–ú –í–ê–õ–ò–î–ù–û–°–¢–¨ ID –ú–ê–¢–ß–ê
        if (!matchId && matchId !== 0) {
            console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞!', {
                selectedMatch,
                matchId,
                selectedMatchType: typeof selectedMatch
            });
            alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–Ω–æ–≤–∞.');
            return;
        }
        
        console.log('‚úÖ ID –º–∞—Ç—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:', matchId);
        
        const errors = validateResults();
        if (Object.keys(errors).length > 0) {
            console.warn('üö´ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞:', errors);
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
        const submitData = {
            ...matchResultData,
            winner: selectedWinner
        };
        
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞:', {
            matchId: matchId,
            submitData: submitData,
            hasOnSave: typeof onSave === 'function'
        });
        
        if (typeof onSave === 'function') {
            onSave(submitData);
        } else {
            console.error('‚ùå onSave –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π:', onSave);
        }
    };

    const handleClose = () => {
        if (hasChanges && !isLoading) {
            const confirmed = window.confirm(
                '‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ó–∞–∫—Ä—ã—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?'
            );
            if (!confirmed) return;
        }
        onClose();
    };

    const isCS2 = isCounterStrike2(getTournamentGame());
    const mapsData = matchResultData.maps_data || [];
    const hasValidationErrors = Object.keys(validationErrors).length > 0;
    const mapStats = getMapStatistics();

    // üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–†–û–ë–õ–ï–ú –° –ö–ê–†–¢–ê–ú–ò
    console.log('üó∫Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç –≤ MatchResultModal:', {
        tournamentGame: getTournamentGame(),
        isCS2,
        availableMapsCount: availableMaps.length,
        availableMaps: availableMaps.slice(0, 3), // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–∞—Ä—Ç—ã
        currentMapsDataCount: mapsData.length,
        selectedMatchId: selectedMatch?.id,
        showModal: isOpen,
        shouldShowMapsSection: isCS2 && availableMaps.length > 0
    });

    return (
        <div className="modal-overlay enhanced-match-result-overlay" onClick={handleClose}>
            <div className="modal-content match-result-modal enhanced-match-result-modal" onClick={(e) => e.stopPropagation()}>
                <div className="modal-header">
                    <h3>
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
                        {hasChanges && <span className="changes-indicator">*</span>}
                    </h3>
                    <button className="close-btn" onClick={handleClose} title="–ó–∞–∫—Ä—ã—Ç—å">‚úï</button>
                </div>

                <form onSubmit={handleSubmit} className="match-result-form">
                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
                    <div className="match-info">
                        <div className="teams-display">
                            <div 
                                className={`team-display ${selectedWinner === 'team1' ? 'winner-selected' : ''} ${selectedMatch.team1_composition ? 'has-tooltip' : ''}`}
                                onClick={() => selectWinner('team1')}
                                title="–í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º"
                            >
                                <span className="team-name">{selectedMatch.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1'}</span>
                                {selectedWinner === 'team1' && <span className="winner-crown">üëë</span>}
                                
                                <TeamTooltip 
                                    team="team1"
                                    composition={selectedMatch.team1_composition}
                                    show={true}
                                />
                            </div>
                            <div className="vs-separator">VS</div>
                            <div 
                                className={`team-display ${selectedWinner === 'team2' ? 'winner-selected' : ''} ${selectedMatch.team2_composition ? 'has-tooltip' : ''}`}
                                onClick={() => selectWinner('team2')}
                                title="–í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º"
                            >
                                <span className="team-name">{selectedMatch.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'}</span>
                                {selectedWinner === 'team2' && <span className="winner-crown">üëë</span>}
                                
                                <TeamTooltip 
                                    team="team2"
                                    composition={selectedMatch.team2_composition}
                                    show={true}
                                />
                            </div>
                        </div>
                        
                        {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
                        {selectedWinner && (
                            <div className="winner-reset">
                                <button 
                                    type="button"
                                    className="reset-winner-btn"
                                    onClick={() => setSelectedWinner(null)}
                                    title="–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"
                                >
                                    üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                                </button>
                            </div>
                        )}
                    </div>

                    {/* –û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç –º–∞—Ç—á–∞ */}
                    <div className="match-scores">
                        <h4>üìä –°—á–µ—Ç –º–∞—Ç—á–∞</h4>
                        
                        {/* üÜï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ */}
                        {isCS2 && availableMaps.length > 0 && (
                            <div className="auto-calculate-section">
                                <label className="auto-calculate-checkbox">
                                    <input
                                        type="checkbox"
                                        checked={autoCalculateScore}
                                        onChange={(e) => setAutoCalculateScore(e.target.checked)}
                                        disabled={isLoading}
                                    />
                                    <span className="checkmark"></span>
                                    üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –æ–±—â–∏–π —Å—á–µ—Ç –ø–æ –∫–∞—Ä—Ç–∞–º
                                </label>
                                {autoCalculateScore && mapsData.length > 0 && (
                                    <div className="auto-calculate-indicator">
                                        <span className="indicator-icon">‚ö°</span>
                                        <span className="indicator-text">–°—á–µ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–±–µ–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö</span>
                                        <button
                                            type="button"
                                            className="recalculate-btn"
                                            onClick={calculateOverallScoreFromMaps}
                                            title="–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—á–µ—Ç —Å–µ–π—á–∞—Å"
                                            disabled={isLoading}
                                        >
                                            üîÑ
                                        </button>
                                    </div>
                                )}
                                {!autoCalculateScore && mapsData.length > 0 && (
                                    <div className="manual-calculate-section">
                                        <p className="manual-hint">
                                            üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–π —Å—á–µ—Ç –≤—Ä—É—á–Ω—É—é:
                                        </p>
                                        <button
                                            type="button"
                                            className="manual-recalculate-btn"
                                            onClick={calculateOverallScoreFromMaps}
                                            disabled={isLoading}
                                        >
                                            üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—á–µ—Ç –ø–æ –∫–∞—Ä—Ç–∞–º
                                        </button>
                                    </div>
                                )}
                            </div>
                        )}
                        
                        <div className="score-inputs">
                            <div className="score-container">
                                <label htmlFor="score1">{selectedMatch.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1'}</label>
                                <div className="score-input-wrapper">
                                    <input
                                        id="score1"
                                        type="number"
                                        value={matchResultData.score1}
                                        onChange={(e) => handleScoreChange(1, e.target.value)}
                                        disabled={isLoading || (autoCalculateScore && mapsData.length > 0)}
                                        className={`${validationErrors.scores ? 'error' : ''} ${autoCalculateScore && mapsData.length > 0 ? 'auto-calculated' : ''}`}
                                        title={autoCalculateScore && mapsData.length > 0 ? '–°—á–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–±–µ–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö' : ''}
                                    />
                                    {autoCalculateScore && mapsData.length > 0 && (
                                        <div className="auto-calculated-badge">ü§ñ</div>
                                    )}
                                </div>
                            </div>
                            <div className="score-separator">:</div>
                            <div className="score-container">
                                <label htmlFor="score2">{selectedMatch.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'}</label>
                                <div className="score-input-wrapper">
                                    <input
                                        id="score2"
                                        type="number"
                                        value={matchResultData.score2}
                                        onChange={(e) => handleScoreChange(2, e.target.value)}
                                        disabled={isLoading || (autoCalculateScore && mapsData.length > 0)}
                                        className={`${validationErrors.scores ? 'error' : ''} ${autoCalculateScore && mapsData.length > 0 ? 'auto-calculated' : ''}`}
                                        title={autoCalculateScore && mapsData.length > 0 ? '–°—á–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–±–µ–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö' : ''}
                                    />
                                    {autoCalculateScore && mapsData.length > 0 && (
                                        <div className="auto-calculated-badge">ü§ñ</div>
                                    )}
                                </div>
                            </div>
                        </div>
                        {validationErrors.scores && (
                            <div className="validation-error">{validationErrors.scores}</div>
                        )}
                        
                        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ */}
                        {autoCalculateScore && mapsData.length > 0 && (
                            <div className="auto-calculate-help">
                                <p>üí° <strong>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç:</strong></p>
                                <ul>
                                    <li>–ö–∞–∂–¥–∞—è –≤—ã–∏–≥—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ = +1 –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—É –∫–æ–º–∞–Ω–¥—ã</li>
                                    <li>–ù–∏—á—å–∏ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –æ–±—â–∏–π —Å—á–µ—Ç</li>
                                    <li>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –±–æ–ª—å—à–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç</li>
                                </ul>
                            </div>
                        )}
                    </div>

                    {/* üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ï–ö–¶–ò–Ø –ö–ê–†–¢ */}
                    {isCS2 && availableMaps.length > 0 && (
                        <div className="maps-section">
                            <div className="maps-header">
                                <h4>üó∫Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ä—Ç–∞–º ({mapsData.length}/7)</h4>
                                <p className="maps-hint">
                                    üéØ –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                                </p>
                            </div>
                            
                            {/* üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø */}
                            <div className="debug-maps-info" style={{padding: '10px', background: '#f0f0f0', margin: '10px 0', fontSize: '12px'}}>
                                <details>
                                    <summary>üîç –û—Ç–ª–∞–¥–∫–∞ –∫–∞—Ä—Ç (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)</summary>
                                    <ul>
                                        <li>–ò–≥—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞: {getTournamentGame() || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}</li>
                                        <li>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ CS2: {isCS2 ? '–î–∞' : '–ù–µ—Ç'}</li>
                                        <li>–î–æ—Å—Ç—É–ø–Ω–æ –∫–∞—Ä—Ç: {availableMaps.length}</li>
                                        <li>–ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç: {availableMaps.join(', ')}</li>
                                        <li>–¢–µ–∫—É—â–∏—Ö –∫–∞—Ä—Ç –≤ –º–∞—Ç—á–µ: {mapsData.length}</li>
                                        <li>ID –º–∞—Ç—á–∞: {selectedMatch?.id}</li>
                                        <li>–°–µ–∫—Ü–∏—è –∫–∞—Ä—Ç –ø–æ–∫–∞–∑–∞–Ω–∞: {isCS2 && availableMaps.length > 0 ? '–î–∞' : '–ù–µ—Ç'}</li>
                                    </ul>
                                </details>
                            </div>

                            <div className="maps-container">
                                {mapsData.map((mapData, index) => (
                                    <div key={index} className="map-entry">
                                        <div className="map-select-container">
                                            <select
                                                className="map-select"
                                                value={mapData.map || ''}
                                                onChange={(e) => handleMapNameChange(index, e.target.value)}
                                                disabled={isLoading}
                                            >
                                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É</option>
                                                {availableMaps.map((mapName) => (
                                                    <option key={mapName} value={mapName}>{mapName}</option>
                                                ))}
                                            </select>
                                            <button
                                                type="button"
                                                className="remove-map-btn"
                                                onClick={() => removeMap(index)}
                                                disabled={isLoading}
                                                title="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É"
                                            >
                                                üóëÔ∏è
                                            </button>
                                        </div>
                                        
                                        <div className="map-scores">
                                            <div className="map-score-input">
                                                <label>{selectedMatch.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1'}</label>
                                                <input
                                                    type="number"
                                                    value={mapData.score1 || 0}
                                                    onChange={(e) => handleMapScoreChange(index, 1, e.target.value)}
                                                    disabled={isLoading}
                                                    className={validationErrors[`map_${index}_scores`] ? 'error' : ''}
                                                />
                                            </div>
                                            <div className="map-score-separator">:</div>
                                            <div className="map-score-input">
                                                <label>{selectedMatch.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2'}</label>
                                                <input
                                                    type="number"
                                                    value={mapData.score2 || 0}
                                                    onChange={(e) => handleMapScoreChange(index, 2, e.target.value)}
                                                    disabled={isLoading}
                                                    className={validationErrors[`map_${index}_scores`] ? 'error' : ''}
                                                />
                                            </div>
                                        </div>
                                        {validationErrors[`map_${index}_scores`] && (
                                            <div className="validation-error">{validationErrors[`map_${index}_scores`]}</div>
                                        )}
                                    </div>
                                ))}
                                
                                <button 
                                    type="button"
                                    className="add-map-btn"
                                    onClick={addMap}
                                    disabled={isLoading || mapsData.length >= 7}
                                >
                                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É ({mapsData.length}/7)
                                </button>
                            </div>

                            {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º */}
                            {mapStats && (
                                <div className="maps-summary enhanced-stats">
                                    <h5>üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h5>
                                    <div className="maps-summary-content">
                                        <div className="stats-grid">
                                            <div className="stat-group">
                                                <h6>üèÜ –ü–æ–±–µ–¥—ã –ø–æ –∫–∞—Ä—Ç–∞–º</h6>
                                                <div className="maps-won">
                                                    <span className="team-maps-won">
                                                        {selectedMatch.team1_name}: {mapStats.team1Wins}
                                                    </span>
                                                    <span className="team-maps-won">
                                                        {selectedMatch.team2_name}: {mapStats.team2Wins}
                                                    </span>
                                                    {mapStats.draws > 0 && (
                                                        <span className="team-maps-won draws">
                                                            –ù–∏—á—å–∏: {mapStats.draws}
                                                        </span>
                                                    )}
                                                </div>
                                            </div>
                                            
                                            <div className="stat-group">
                                                <h6>üéØ –û–±—â–∏–π —Å—á–µ—Ç –ø–æ –æ—á–∫–∞–º</h6>
                                                <div className="total-scores">
                                                    <span className="total-score">
                                                        {selectedMatch.team1_name}: {mapStats.team1TotalScore}
                                                    </span>
                                                    <span className="total-score">
                                                        {selectedMatch.team2_name}: {mapStats.team2TotalScore}
                                                    </span>
                                                    <span className="score-difference">
                                                        –†–∞–∑–Ω–æ—Å—Ç—å: ¬±{mapStats.scoreDifference}
                                                    </span>
                                                </div>
                                            </div>
                                            
                                            <div className="stat-group">
                                                <h6>üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h6>
                                                <div className="performance-stats">
                                                    <span className="performance-stat">
                                                        –ö–∞—Ä—Ç —Å—ã–≥—Ä–∞–Ω–æ: {mapStats.mapsCount}
                                                    </span>
                                                    <span className="performance-stat">
                                                        –§–æ—Ä–º–∞—Ç: {mapStats.mapsCount === 1 ? 'BO1' : 
                                                                 mapStats.mapsCount <= 3 ? 'BO3' : 
                                                                 mapStats.mapsCount <= 5 ? 'BO5' : 'BO7'}
                                                    </span>
                                                    <span className="performance-stat">
                                                        –°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç: {Math.round((mapStats.team1TotalScore + mapStats.team2TotalScore) / mapStats.mapsCount / 2)}
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>
                    )}

                    {/* –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –∫–∞—Ä—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è */}
                    {!isCS2 && (
                        <div className="no-maps-section">
                            <p>‚ÑπÔ∏è –ò–≥—Ä–∞ "{getTournamentGame() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ä—Ç</p>
                        </div>
                    )}

                    {/* –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ CS2 –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç */}
                    {isCS2 && availableMaps.length === 0 && (
                        <div className="no-maps-section">
                            <p>‚ö†Ô∏è –ö–∞—Ä—Ç—ã –¥–ª—è Counter-Strike 2 –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>
                        </div>
                    )}

                    {/* –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ */}
                    {hasValidationErrors && (
                        <div className="validation-summary">
                            <h5>‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</h5>
                            <ul>
                                {Object.entries(validationErrors).map(([field, error]) => (
                                    <li key={field} className="validation-error">
                                        {error}
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}

                    {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                    <div className="modal-actions">
                        <button 
                            type="button"
                            className="cancel-btn"
                            onClick={handleClose}
                            disabled={isLoading}
                        >
                            ‚ùå –û—Ç–º–µ–Ω–∞
                        </button>
                        <button 
                            type="submit"
                            className="confirm-btn"
                            disabled={isLoading || hasValidationErrors}
                        >
                            {isLoading ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default MatchResultModal; 
