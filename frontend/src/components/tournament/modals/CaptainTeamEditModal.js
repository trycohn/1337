import React, { useState, useEffect, useCallback } from 'react';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { TouchBackend } from 'react-dnd-touch-backend';
import { isMobile } from 'react-device-detect';
import api from '../../../utils/api';
import { ensureHttps } from '../../../utils/userHelpers';
import './CaptainTeamEditModal.css';

const ItemTypes = {
    PLAYER: 'player'
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞
const DraggablePlayer = ({ player, index, onMove, isRosterSlot, slotIndex, canDrag }) => {
    const [{ isDragging }, drag] = useDrag({
        type: ItemTypes.PLAYER,
        item: { player, sourceIndex: index, isFromRoster: isRosterSlot },
        canDrag: () => canDrag,
        collect: (monitor) => ({
            isDragging: monitor.isDragging()
        })
    });

    const [{ isOver }, drop] = useDrop({
        accept: ItemTypes.PLAYER,
        drop: (item) => {
            if (onMove) {
                onMove(item, { player, targetIndex: slotIndex, isRosterSlot });
            }
        },
        collect: (monitor) => ({
            isOver: monitor.isOver()
        })
    });

    const faceitElo = player?.faceit_elo || player?.user_faceit_elo || 1200;

    return (
        <div
            ref={(node) => drag(drop(node))}
            className={`ctem-draggable-player ${isDragging ? 'ctem-dragging' : ''} ${isOver ? 'ctem-drop-target' : ''}`}
            style={{ 
                opacity: isDragging ? 0.5 : 1,
                cursor: canDrag ? 'grab' : 'not-allowed'
            }}
        >
            <div className="ctem-player-info">
                <img 
                    src={ensureHttps(player?.avatar_url) || '/uploads/avatars/preloaded/circle-user.svg'}
                    alt={player?.username || player?.name}
                    className="ctem-player-avatar"
                    onError={(e) => { e.currentTarget.src = '/uploads/avatars/preloaded/circle-user.svg'; }}
                />
                <div className="ctem-player-details">
                    <span className="ctem-player-name">
                        {player?.username || player?.name}
                        {player?.is_captain && <span className="ctem-captain-badge"> üëë</span>}
                    </span>
                    <span className="ctem-player-elo">FACEIT: {faceitElo}</span>
                </div>
            </div>
        </div>
    );
};

// –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç –¥–ª—è —Ä–æ—Å—Ç–µ—Ä–∞
const EmptySlot = ({ slotIndex, onMove }) => {
    const [{ isOver }, drop] = useDrop({
        accept: ItemTypes.PLAYER,
        drop: (item) => {
            if (onMove) {
                onMove(item, { player: null, targetIndex: slotIndex, isRosterSlot: true });
            }
        },
        collect: (monitor) => ({
            isOver: monitor.isOver()
        })
    });

    return (
        <div
            ref={drop}
            className={`ctem-empty-slot ${isOver ? 'ctem-drop-target' : ''}`}
        >
            <span>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ —Å—é–¥–∞</span>
        </div>
    );
};

// –ó–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
const RemoveZone = ({ onMove }) => {
    const [{ isOver, canDrop }, drop] = useDrop({
        accept: ItemTypes.PLAYER,
        drop: (item) => {
            if (onMove && item.isFromRoster) {
                onMove(item, { isRemoveSlot: true });
            }
        },
        canDrop: (item) => item.isFromRoster, // –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–æ—Å—Ç–µ—Ä–∞
        collect: (monitor) => ({
            isOver: monitor.isOver(),
            canDrop: monitor.canDrop()
        })
    });

    return (
        <div
            ref={drop}
            className={`ctem-remove-zone ${isOver && canDrop ? 'ctem-remove-active' : ''}`}
        >
            <div className="ctem-remove-icon">üóëÔ∏è</div>
            <span className="ctem-remove-text">
                {isOver && canDrop ? '–û—Ç–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' : '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–∞–≤–∞'}
            </span>
        </div>
    );
};

/**
 * –ú–æ–¥–∞–ª–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞
 */
const CaptainTeamEditModal = ({ 
    isOpen, 
    onClose, 
    team, 
    tournament,
    user,
    onSuccess 
}) => {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    
    // –î–∞–Ω–Ω—ã–µ
    const [tournamentRoster, setTournamentRoster] = useState([]);
    const [availablePlayers, setAvailablePlayers] = useState([]);
    const [globalTeam, setGlobalTeam] = useState(null);
    const [maxTeamSize, setMaxTeamSize] = useState(5);
    
    // –ü–æ–∏—Å–∫ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
    const [searchQuery, setSearchQuery] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [isSearching, setIsSearching] = useState(false);
    const [sentInvitations, setSentInvitations] = useState([]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    useEffect(() => {
        if (isOpen && team?.id && tournament?.id) {
            loadData();
        }
    }, [isOpen, team?.id, tournament?.id]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const loadData = async () => {
        try {
            setLoading(true);
            setError('');
            
            const token = localStorage.getItem('token');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤
            const rosterResponse = await api.get(
                `/api/tournaments/${tournament.id}/teams/${team.id}/members`,
                { headers: { Authorization: `Bearer ${token}` } }
            );

            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            const globalResponse = await api.get(
                `/api/tournaments/${tournament.id}/teams/${team.id}/global-roster`,
                { headers: { Authorization: `Bearer ${token}` } }
            );

            if (rosterResponse.data.success) {
                // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤–∫–ª—é—á–∞—è –∫–∞–ø–∏—Ç–∞–Ω–∞
                setTournamentRoster(rosterResponse.data.members || []);
            }

            if (globalResponse.data.success) {
                setAvailablePlayers(globalResponse.data.availablePlayers || []);
                setGlobalTeam(globalResponse.data.globalTeam);
                setMaxTeamSize(globalResponse.data.maxTeamSize || 5);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            const invitationsResponse = await api.get(
                `/api/tournaments/${tournament.id}/teams/${team.id}/invitations`,
                { headers: { Authorization: `Bearer ${token}` } }
            );

            if (invitationsResponse.data.success) {
                setSentInvitations(invitationsResponse.data.invitations || []);
            }

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        } finally {
            setLoading(false);
        }
    };

    // –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤
    const searchUsers = async (query) => {
        if (!query || query.length < 2) {
            setSearchResults([]);
            return;
        }

        try {
            setIsSearching(true);
            const token = localStorage.getItem('token');
            const response = await api.get(
                `/api/users/search?query=${encodeURIComponent(query)}`,
                { headers: { Authorization: `Bearer ${token}` } }
            );
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
            const rosterUserIds = new Set(tournamentRoster.map(p => p.user_id));
            const invitedUserIds = new Set(sentInvitations.filter(inv => inv.status === 'pending').map(inv => inv.invited_user_id));
            
            console.log('üîç [CaptainTeamEdit] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', {
                total: response.data.length,
                rosterUserIds: Array.from(rosterUserIds),
                invitedUserIds: Array.from(invitedUserIds),
                currentUser: user?.id
            });
            
            const filtered = response.data.filter(searchUser => 
                !rosterUserIds.has(searchUser.id) && 
                !invitedUserIds.has(searchUser.id) &&
                searchUser.id !== user?.id
            );
            
            console.log('‚úÖ [CaptainTeamEdit] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filtered.length, filtered.map(u => u.username));
            
            setSearchResults(filtered);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', err);
            setSearchResults([]);
        } finally {
            setIsSearching(false);
        }
    };

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const handleSendInvitation = async (userId, username) => {
        try {
            setError('');
            const token = localStorage.getItem('token');
            
            const response = await api.post(
                `/api/tournaments/${tournament.id}/teams/${team.id}/invite`,
                { userId, message: `–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É ${team.name}` },
                { headers: { Authorization: `Bearer ${token}` } }
            );

            if (response.data.success) {
                setSuccess(`‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${username}`);
                setTimeout(() => setSuccess(''), 3000);
                setSearchQuery('');
                setSearchResults([]);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
                const invitationsResponse = await api.get(
                    `/api/tournaments/${tournament.id}/teams/${team.id}/invitations`,
                    { headers: { Authorization: `Bearer ${token}` } }
                );
                
                if (invitationsResponse.data.success) {
                    setSentInvitations(invitationsResponse.data.invitations || []);
                }
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
        }
    };

    // –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const handleCancelInvitation = async (invitationId) => {
        try {
            const token = localStorage.getItem('token');
            
            await api.delete(
                `/api/tournaments/team-invitations/${invitationId}`,
                { headers: { Authorization: `Bearer ${token}` } }
            );

            setSuccess('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
            setTimeout(() => setSuccess(''), 3000);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            setSentInvitations(prev => prev.filter(inv => inv.id !== invitationId));
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
        }
    };

    // –ü–æ–∏—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    useEffect(() => {
        const timer = setTimeout(() => {
            if (searchQuery.length >= 2) {
                searchUsers(searchQuery);
            } else {
                setSearchResults([]);
            }
        }, 300);

        return () => clearTimeout(timer);
    }, [searchQuery, tournamentRoster, sentInvitations]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    const handleMove = useCallback((draggedItem, dropTarget) => {
        const { player: draggedPlayer, isFromRoster: dragFromRoster } = draggedItem;
        const { player: targetPlayer, isRosterSlot: dropToRoster, isRemoveSlot } = dropTarget;

        console.log('üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞:', {
            from: dragFromRoster ? 'roster' : 'available',
            to: isRemoveSlot ? 'remove' : dropToRoster ? 'roster' : 'available',
            draggedPlayer: draggedPlayer?.username,
            targetPlayer: targetPlayer?.username
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–∞–≤–∞
        if (isRemoveSlot && dragFromRoster) {
            setTournamentRoster(prev => prev.filter(p => p.user_id !== draggedPlayer.user_id));
            return;
        }

        // –ò–∑ —Ä–æ—Å—Ç–µ—Ä–∞ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        if (dragFromRoster && !dropToRoster) {
            setTournamentRoster(prev => prev.filter(p => p.user_id !== draggedPlayer.user_id));
            setAvailablePlayers(prev => [...prev, draggedPlayer]);
        }
        // –ò–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ä–æ—Å—Ç–µ—Ä
        else if (!dragFromRoster && dropToRoster) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
            if (tournamentRoster.length >= maxTeamSize) {
                setError(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥—ã (${maxTeamSize} –∏–≥—Ä–æ–∫–æ–≤)`);
                setTimeout(() => setError(''), 3000);
                return;
            }

            // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–º–µ–Ω–∞ (–µ—Å—Ç—å target –∏–≥—Ä–æ–∫)
            if (targetPlayer) {
                // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
                setTournamentRoster(prev => 
                    prev.map(p => p.user_id === targetPlayer.user_id ? draggedPlayer : p)
                );
                setAvailablePlayers(prev => [
                    ...prev.filter(p => p.user_id !== draggedPlayer.user_id),
                    targetPlayer
                ]);
            } else {
                // –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
                setTournamentRoster(prev => [...prev, draggedPlayer]);
                setAvailablePlayers(prev => prev.filter(p => p.user_id !== draggedPlayer.user_id));
            }
        }
        // Swap –≤–Ω—É—Ç—Ä–∏ —Ä–æ—Å—Ç–µ—Ä–∞
        else if (dragFromRoster && dropToRoster && targetPlayer) {
            const dragIndex = tournamentRoster.findIndex(p => p.user_id === draggedPlayer.user_id);
            const dropIndex = tournamentRoster.findIndex(p => p.user_id === targetPlayer.user_id);
            
            const newRoster = [...tournamentRoster];
            [newRoster[dragIndex], newRoster[dropIndex]] = [newRoster[dropIndex], newRoster[dragIndex]];
            setTournamentRoster(newRoster);
        }
    }, [tournamentRoster, maxTeamSize]);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const handleSave = async () => {
        try {
            setLoading(true);
            setError('');
            
            const token = localStorage.getItem('token');
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞ - –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ backend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            const memberUserIds = tournamentRoster
                .filter(p => !p.is_captain)
                .map(p => p.user_id);

            console.log('üíæ [CaptainTeamEdit] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞:', {
                total: tournamentRoster.length,
                withoutCaptain: memberUserIds.length,
                userIds: memberUserIds
            });

            const response = await api.put(
                `/api/tournaments/${tournament.id}/teams/${team.id}/roster`,
                { memberUserIds },
                { headers: { Authorization: `Bearer ${token}` } }
            );

            if (response.data.success) {
                setSuccess('‚úÖ –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω!');
                setTimeout(() => {
                    if (onSuccess) onSuccess();
                    onClose();
                }, 1500);
            }

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        } finally {
            setLoading(false);
        }
    };

    if (!isOpen) return null;

    const backend = isMobile ? TouchBackend : HTML5Backend;

    return (
        <DndProvider backend={backend}>
            <div className="modal-overlay" onClick={onClose}>
                <div 
                    className="ctem-modal"
                    onClick={(e) => e.stopPropagation()}
                >
                    <div className="ctem-modal-header">
                        <h3>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ "{team?.name}"</h3>
                        <button className="ctem-close-btn" onClick={onClose}>‚úï</button>
                    </div>

                    {error && <div className="ctem-error-message">{error}</div>}
                    {success && <div className="ctem-success-message">{success}</div>}

                    {!globalTeam && !loading && (
                        <div className="ctem-info-message">
                            –£ –≤–∞—Å –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã" —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º.
                        </div>
                    )}

                    <div className="ctem-modal-body">
                        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –¢—É—Ä–Ω–∏—Ä–Ω—ã–π —Ä–æ—Å—Ç–µ—Ä */}
                        <div className="ctem-roster-column">
                            <h4>üë• –¢—É—Ä–Ω–∏—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤ ({tournamentRoster.length}/{maxTeamSize})</h4>
                            <p className="ctem-column-hint">–ò–≥—Ä–æ–∫–∏, –∑–∞—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä</p>
                            
                            <div className="ctem-roster-slots">
                                {Array.from({ length: maxTeamSize }).map((_, index) => {
                                    const player = tournamentRoster[index];
                                    
                                    return player ? (
                                        <DraggablePlayer
                                            key={player.user_id}
                                            player={player}
                                            index={index}
                                            slotIndex={index}
                                            onMove={handleMove}
                                            isRosterSlot={true}
                                            canDrag={!loading && !player.is_captain}
                                        />
                                    ) : (
                                        <EmptySlot 
                                            key={`empty-${index}`}
                                            slotIndex={index}
                                            onMove={handleMove}
                                        />
                                    );
                                })}
                            </div>

                            <div className="ctem-roster-stats">
                                <div className="ctem-stat-item">
                                    <span className="ctem-stat-label">Œ£ FACEIT ELO:</span>
                                    <span className="ctem-stat-value">
                                        {tournamentRoster.reduce((sum, p) => sum + (p.faceit_elo || p.user_faceit_elo || 1200), 0).toLocaleString('ru-RU')}
                                    </span>
                                </div>
                                <div className="ctem-stat-item">
                                    <span className="ctem-stat-label">‚åÄ FACEIT ELO:</span>
                                    <span className="ctem-stat-value">
                                        {tournamentRoster.length > 0 
                                            ? Math.round(tournamentRoster.reduce((sum, p) => sum + (p.faceit_elo || p.user_faceit_elo || 1200), 0) / tournamentRoster.length)
                                            : 0
                                        }
                                    </span>
                                </div>
                            </div>

                            {/* üóëÔ∏è –ó–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ */}
                            <RemoveZone onMove={handleMove} />
                        </div>

                        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
                        <div className="ctem-available-column">
                            {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã */}
                            {globalTeam && (
                                <>
                                    <h4>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ ({availablePlayers.length})</h4>
                                    <p className="ctem-column-hint">–ò–∑ –≤–∞—à–µ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã "{globalTeam?.name}"</p>
                                    
                                    {availablePlayers.length === 0 ? (
                                        <div className="ctem-empty-message-small">
                                            –í—Å–µ –∏–≥—Ä–æ–∫–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –≤ —Å–æ—Å—Ç–∞–≤–µ
                                        </div>
                                    ) : (
                                        <div className="ctem-available-players-list">
                                            {availablePlayers.map((player, index) => (
                                                <DraggablePlayer
                                                    key={player.user_id}
                                                    player={player}
                                                    index={index}
                                                    onMove={handleMove}
                                                    isRosterSlot={false}
                                                    canDrag={!loading}
                                                />
                                            ))}
                                        </div>
                                    )}
                                    
                                    <div className="ctem-divider"></div>
                                </>
                            )}
                            
                            {/* –ü–æ–∏—Å–∫ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ */}
                            <h4>‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞</h4>
                            <p className="ctem-column-hint">–ü–æ–∏—Å–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤</p>
                            
                            <div className="ctem-search-section">
                                <input
                                    type="text"
                                    className="ctem-search-input"
                                    value={searchQuery}
                                    onChange={(e) => setSearchQuery(e.target.value)}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞..."
                                    disabled={loading}
                                />
                                
                                {isSearching && <div className="ctem-searching">–ü–æ–∏—Å–∫...</div>}
                                
                                {searchResults.length > 0 && (
                                    <div className="ctem-search-results">
                                        {searchResults.map(user => (
                                            <div key={user.id} className="ctem-search-result-item">
                                                <div className="ctem-user-info">
                                                    <img 
                                                        src={ensureHttps(user.avatar_url) || '/uploads/avatars/preloaded/circle-user.svg'}
                                                        alt={user.username}
                                                        className="ctem-search-avatar"
                                                        onError={(e) => { e.currentTarget.src = '/uploads/avatars/preloaded/circle-user.svg'; }}
                                                    />
                                                    <div className="ctem-search-details">
                                                        <span className="ctem-search-name">{user.username}</span>
                                                        <span className="ctem-search-elo">FACEIT: {user.faceit_elo || 1200}</span>
                                                    </div>
                                                </div>
                                                <button 
                                                    className="ctem-invite-btn"
                                                    onClick={() => handleSendInvitation(user.id, user.username)}
                                                    disabled={loading}
                                                >
                                                    üìß
                                                </button>
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </div>
                            
                            {/* –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
                            {sentInvitations.filter(inv => inv.status === 'pending').length > 0 && (
                                <div className="ctem-invitations-list">
                                    <h5 className="ctem-invitations-title">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</h5>
                                    {sentInvitations.filter(inv => inv.status === 'pending').map(inv => (
                                        <div key={inv.id} className="ctem-invitation-item">
                                            <div className="ctem-invitation-info">
                                                <img 
                                                    src={ensureHttps(inv.invited_avatar) || '/uploads/avatars/preloaded/circle-user.svg'}
                                                    alt={inv.invited_username}
                                                    className="ctem-invitation-avatar"
                                                    onError={(e) => { e.currentTarget.src = '/uploads/avatars/preloaded/circle-user.svg'; }}
                                                />
                                                <span className="ctem-invitation-name">{inv.invited_username}</span>
                                            </div>
                                            <button 
                                                className="ctem-cancel-btn"
                                                onClick={() => handleCancelInvitation(inv.id)}
                                                disabled={loading}
                                                title="–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
                                            >
                                                ‚ùå
                                            </button>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>

                    <div className="ctem-modal-footer">
                        <div className="ctem-footer-info">
                            <span>üí° –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞</span>
                        </div>
                        <div className="ctem-footer-actions">
                            <button 
                                className="btn btn-secondary"
                                onClick={onClose}
                                disabled={loading}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button 
                                className="btn btn-primary"
                                onClick={handleSave}
                                disabled={loading || tournamentRoster.length === 0}
                            >
                                {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤'}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </DndProvider>
    );
};

export default CaptainTeamEditModal;

