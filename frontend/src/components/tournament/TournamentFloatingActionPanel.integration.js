/**
 * TournamentFloatingActionPanel.integration.js
 * –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞–≤–∞—é—â–µ–π –ø–∞–Ω–µ–ª–∏ –≤ TournamentDetails.js
 * 
 * @purpose –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TournamentFloatingActionPanel
 * @author 1337 Community Development Team
 * @created 2025-01-22
 */

// ===== –ò–ú–ü–û–†–¢ –í –ù–ê–ß–ê–õ–ï –§–ê–ô–õ–ê TOURNAMENTDETAILS.JS =====
import TournamentFloatingActionPanel from './tournament/TournamentFloatingActionPanel';

// ===== –î–û–ë–ê–í–ò–¢–¨ –í –ö–û–ú–ü–û–ù–ï–ù–¢ TOURNAMENTDETAILS =====

function TournamentDetails() {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

    // üéØ –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –°–ï–¢–ö–ò –ò –ú–ê–¢–ß–ï–ô
    const hasBracket = useMemo(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç—á–µ–π –∏–ª–∏ –∫–æ–º–∞–Ω–¥ —Å —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π
        return matches && matches.length > 0;
    }, [matches]);

    const hasMatches = useMemo(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç—á–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        return matches && matches.some(match => 
            match.winner_id || match.winner_team_id || 
            match.status === 'completed' || match.status === 'DONE'
        );
    }, [matches]);

    // üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô –ü–õ–ê–í–ê–Æ–©–ï–ô –ü–ê–ù–ï–õ–ò
    
    // –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
    const handleStartTournament = useCallback(async () => {
        if (!tournament || tournament.status !== 'active') {
            setMessage('‚ùå –¢—É—Ä–Ω–∏—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ "–ê–∫—Ç–∏–≤–Ω—ã–π"');
            return;
        }

        if (!hasBracket) {
            setMessage('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        setConfirmAction({
            type: 'start-tournament',
            title: '–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä',
            message: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä "${tournament.name}"? –ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–µ—Ç–∫–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–π.`,
            onConfirm: async () => {
                try {
                    const response = await api.post(`/api/tournaments/${id}/start`);
                    if (response.data.success) {
                        setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç!');
                        reloadTournamentData();
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞: ${error.response?.data?.message || error.message}`);
                }
                setShowConfirmModal(false);
            },
            onCancel: () => setShowConfirmModal(false)
        });
        setShowConfirmModal(true);
    }, [tournament, hasBracket, id, reloadTournamentData]);

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
    const handleEndTournament = useCallback(async () => {
        if (!tournament || tournament.status !== 'ongoing') {
            setMessage('‚ùå –¢—É—Ä–Ω–∏—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ "–ò–¥–µ—Ç"');
            return;
        }

        setConfirmAction({
            type: 'end-tournament',
            title: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä',
            message: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä "${tournament.name}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.`,
            onConfirm: async () => {
                try {
                    const response = await api.post(`/api/tournaments/${id}/end`);
                    if (response.data.success) {
                        setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
                        reloadTournamentData();
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: ${error.response?.data?.message || error.message}`);
                }
                setShowConfirmModal(false);
            },
            onCancel: () => setShowConfirmModal(false)
        });
        setShowConfirmModal(true);
    }, [tournament, id, reloadTournamentData]);

    // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É
    const handleGenerateBracket = useCallback(async () => {
        if (!tournament || tournament.status !== 'active') {
            setMessage('‚ùå –°–µ—Ç–∫—É –º–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
            return;
        }

        if (hasBracket) {
            setMessage('‚ùå –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é.');
            return;
        }

        setConfirmAction({
            type: 'generate-bracket',
            title: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É',
            message: `–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"? –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ —Å–µ—Ç–∫–µ.`,
            onConfirm: async () => {
                try {
                    const response = await api.post(`/api/tournaments/${id}/generate-bracket`);
                    if (response.data.success) {
                        setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
                        reloadTournamentData();
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏: ${error.response?.data?.message || error.message}`);
                }
                setShowConfirmModal(false);
            },
            onCancel: () => setShowConfirmModal(false)
        });
        setShowConfirmModal(true);
    }, [tournament, hasBracket, id, reloadTournamentData]);

    // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É
    const handleRegenerateBracket = useCallback(async () => {
        if (!tournament || tournament.status !== 'active') {
            setMessage('‚ùå –°–µ—Ç–∫—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
            return;
        }

        if (!hasBracket) {
            setMessage('‚ùå –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.');
            return;
        }

        setConfirmAction({
            type: 'regenerate-bracket',
            title: '–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É',
            message: `–ó–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"? –¢–µ–∫—É—â–∞—è —Å–µ—Ç–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ.`,
            onConfirm: async () => {
                try {
                    const response = await api.post(`/api/tournaments/${id}/regenerate-bracket`);
                    if (response.data.success) {
                        setMessage('‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
                        reloadTournamentData();
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏: ${error.response?.data?.message || error.message}`);
                }
                setShowConfirmModal(false);
            },
            onCancel: () => setShowConfirmModal(false)
        });
        setShowConfirmModal(true);
    }, [tournament, hasBracket, id, reloadTournamentData]);

    // –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π
    const handleClearResults = useCallback(async () => {
        if (!tournament || tournament.status !== 'ongoing') {
            setMessage('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –æ—á–∏—â–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–¥—É—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
            return;
        }

        if (!hasMatches) {
            setMessage('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
            return;
        }

        setConfirmAction({
            type: 'clear-results',
            title: '–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π',
            message: `–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"? –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.`,
            onConfirm: async () => {
                try {
                    const response = await api.post(`/api/tournaments/${id}/clear-results`);
                    if (response.data.success) {
                        setMessage('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!');
                        reloadTournamentData();
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
                    setMessage(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error.response?.data?.message || error.message}`);
                }
                setShowConfirmModal(false);
            },
            onCancel: () => setShowConfirmModal(false)
        });
        setShowConfirmModal(true);
    }, [tournament, hasMatches, id, reloadTournamentData]);

    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ...

    return (
        <TournamentErrorBoundary>
            <div className="tournament-details">
                {/* ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç ... */}
                
                {/* ===== –ü–õ–ê–í–ê–Æ–©–ê–Ø –ü–ê–ù–ï–õ–¨ –î–ï–ô–°–¢–í–ò–ô (–í–ê–†–ò–ê–ù–¢ 3) ===== */}
                <TournamentFloatingActionPanel
                    tournament={tournament}
                    user={user}
                    hasAccess={userPermissions.isAdminOrCreator}
                    onStartTournament={handleStartTournament}
                    onEndTournament={handleEndTournament}
                    onGenerateBracket={handleGenerateBracket}
                    onRegenerateBracket={handleRegenerateBracket}
                    onClearResults={handleClearResults}
                    hasMatches={hasMatches}
                    hasBracket={hasBracket}
                />

                {/* ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç ... */}
            </div>
        </TournamentErrorBoundary>
    );
}

// ===== –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –£–°–õ–û–í–ù–´–ú –†–ï–ù–î–ï–†–ò–ù–ì–û–ú =====

// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö:
const shouldShowFloatingPanel = useMemo(() => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–∞—Ö, –≥–¥–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª
    const allowedTabs = ['info', 'bracket', 'participants', 'results'];
    return allowedTabs.includes(activeTab) && userPermissions.isAdminOrCreator;
}, [activeTab, userPermissions.isAdminOrCreator]);

// –í JSX:
{shouldShowFloatingPanel && (
    <TournamentFloatingActionPanel
        tournament={tournament}
        user={user}
        hasAccess={userPermissions.isAdminOrCreator}
        onStartTournament={handleStartTournament}
        onEndTournament={handleEndTournament}
        onGenerateBracket={handleGenerateBracket}
        onRegenerateBracket={handleRegenerateBracket}
        onClearResults={handleClearResults}
        hasMatches={hasMatches}
        hasBracket={hasBracket}
    />
)}

// ===== –ü–†–ò–ú–ï–† –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–ò –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø =====

// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–∞–Ω–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
const panelPosition = useMemo(() => {
    switch (activeTab) {
        case 'bracket':
            return { right: '20px', bottom: '80px' }; // –í—ã—à–µ –æ—Ç —Å–µ—Ç–∫–∏
        case 'results':
            return { right: '20px', bottom: '20px' }; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        default:
            return { right: '20px', bottom: '20px' };
    }
}, [activeTab]);

// –í CSS –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
// .tournament-floating-panel.custom-position {
//     right: var(--panel-right, 20px);
//     bottom: var(--panel-bottom, 20px);
// }

export default TournamentDetails; 