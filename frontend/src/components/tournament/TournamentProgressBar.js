/**
 * TournamentProgressBar - –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ç—É—Ä–Ω–∏—Ä–∞
 * @version 2.0.0
 * @created 2025-01-21
 * @author 1337 Community Development Team
 */

import React, { useMemo } from 'react';
import './TournamentProgressBar.css';

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
 * @param {Array} matches - –ú–∞—Å—Å–∏–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {String} tournamentStatus - –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
const calculateTournamentProgress = (matches = [], tournamentStatus) => {
    // –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞—á–∞–ª—Å—è
    if (tournamentStatus === 'registration') {
        return {
            percentage: 0,
            completedMatches: 0,
            totalMatches: matches.length,
            statusText: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
        };
    }

    // –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
    if (tournamentStatus === 'completed') {
        return {
            percentage: 100,
            completedMatches: matches.length,
            totalMatches: matches.length,
            statusText: '–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω'
        };
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ)
    const realMatches = matches.filter(match => 
        match.team1_id && match.team2_id
    );

    const completedMatches = realMatches.filter(match => 
        match.status === 'completed' && match.winner_team_id
    );

    const totalMatches = realMatches.length;
    const completed = completedMatches.length;
    
    // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    const percentage = totalMatches > 0 ? Math.round((completed / totalMatches) * 100) : 0;

    let statusText = `${completed} –∏–∑ ${totalMatches} –º–∞—Ç—á–µ–π`;
    if (totalMatches === 0) {
        statusText = '–ú–∞—Ç—á–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã';
    }

    return {
        percentage,
        completedMatches: completed,
        totalMatches,
        statusText
    };
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç TournamentProgressBar
 * @param {Object} props
 * @param {Array} props.matches - –ú–∞—Å—Å–∏–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {String} props.tournamentStatus - –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Boolean} props.compact - –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * @returns {JSX.Element}
 */
const TournamentProgressBar = ({ 
    matches = [], 
    tournamentStatus = 'registration',
    compact = false 
}) => {
    const progressData = useMemo(() => 
        calculateTournamentProgress(matches, tournamentStatus),
        [matches, tournamentStatus]
    );

    const { percentage, statusText } = progressData;

    return (
        <div className={`tournament-progress-bar ${compact ? 'compact' : ''}`}>
            <div className="progress-header">
                <span className="progress-title">üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—É—Ä–Ω–∏—Ä–∞</span>
                <span className="progress-percentage">{percentage}%</span>
            </div>

            <div className="progress-bar-container">
                <div className="progress-bar-background">
                    <div 
                        className="progress-bar-fill"
                        style={{ width: `${percentage}%` }}
                    />
                </div>
            </div>

            <div className="progress-status">{statusText}</div>
        </div>
    );
};

export default TournamentProgressBar; 