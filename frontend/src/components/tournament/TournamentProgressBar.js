/**
 * TournamentProgressBar - –ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ç—É—Ä–Ω–∏—Ä–∞
 * @version 1.0.0
 * @created 2025-01-21
 * @author 1337 Community Development Team
 */

import React, { useMemo } from 'react';
import './TournamentProgressBar.css';

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
 * @param {Array} matches - –ú–∞—Å—Å–∏–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {String} tournamentStatus - –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
const calculateTournamentProgress = (matches = [], tournamentStatus) => {
    // –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞—á–∞–ª—Å—è
    if (tournamentStatus === 'registration') {
        return {
            percentage: 0,
            completedMatches: 0,
            totalMatches: matches.length,
            statusText: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
            phase: 'registration'
        };
    }

    // –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
    if (tournamentStatus === 'completed') {
        return {
            percentage: 100,
            completedMatches: matches.length,
            totalMatches: matches.length,
            statusText: '–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω',
            phase: 'completed'
        };
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ)
    const realMatches = matches.filter(match => 
        match.team1_id && match.team2_id
    );

    const completedMatches = realMatches.filter(match => 
        match.status === 'completed' && match.winner_team_id
    );

    const totalMatches = realMatches.length;
    const completed = completedMatches.length;
    
    // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    const percentage = totalMatches > 0 ? Math.round((completed / totalMatches) * 100) : 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É —Ç—É—Ä–Ω–∏—Ä–∞
    let phase = 'active';
    let statusText = `${completed} –∏–∑ ${totalMatches} –º–∞—Ç—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;

    if (percentage === 0) {
        phase = 'starting';
        statusText = '–¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è';
    } else if (percentage >= 90) {
        phase = 'final';
        statusText = '–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è';
    } else if (percentage >= 60) {
        phase = 'semifinals';
        statusText = '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è';
    }

    return {
        percentage,
        completedMatches: completed,
        totalMatches,
        statusText,
        phase
    };
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç TournamentProgressBar
 * @param {Object} props
 * @param {Array} props.matches - –ú–∞—Å—Å–∏–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {String} props.tournamentStatus - –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {String} props.tournamentName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Boolean} props.showDetails - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
 * @param {Boolean} props.compact - –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * @returns {JSX.Element}
 */
const TournamentProgressBar = ({ 
    matches = [], 
    tournamentStatus = 'registration',
    tournamentName = '',
    showDetails = true,
    compact = false 
}) => {
    const progressData = useMemo(() => 
        calculateTournamentProgress(matches, tournamentStatus),
        [matches, tournamentStatus]
    );

    const { percentage, completedMatches, totalMatches, statusText, phase } = progressData;

    if (compact) {
        return (
            <div className={`tournament-progress-bar compact ${phase}`}>
                <div className="progress-header">
                    <div className="progress-title">
                        <h4>üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—É—Ä–Ω–∏—Ä–∞</h4>
                        <span className="progress-percentage">{percentage}%</span>
                    </div>
                </div>

                <div className="progress-bar-container">
                    <div className="progress-bar-background">
                        <div 
                            className="progress-bar-fill"
                            style={{ width: `${percentage}%` }}
                        >
                            <div className="progress-bar-glow"></div>
                        </div>
                    </div>
                </div>

                <div className="progress-stats compact">
                    <span className="stat-text">{statusText}</span>
                    <span className="stat-numbers">
                        {completedMatches} / {totalMatches} –º–∞—Ç—á–µ–π
                    </span>
                </div>
            </div>
        );
    }

    return (
        <div className={`tournament-progress-bar ${phase}`}>
            <div className="progress-header">
                <div className="progress-title">
                    <h3>üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                    <span className="progress-percentage">{percentage}%</span>
                </div>
                <div className="progress-status">{statusText}</div>
            </div>

            <div className="progress-bar-container">
                <div className="progress-bar-background">
                    <div 
                        className="progress-bar-fill"
                        style={{ width: `${percentage}%` }}
                    >
                        <div className="progress-bar-glow"></div>
                    </div>
                </div>
                
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —ç—Ç–∞–ø–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ */}
                <div className="progress-milestones">
                    <div className={`milestone ${percentage >= 25 ? 'completed' : ''}`} style={{ left: '25%' }}>
                        <div className="milestone-dot"></div>
                        <div className="milestone-label">1/4</div>
                    </div>
                    <div className={`milestone ${percentage >= 50 ? 'completed' : ''}`} style={{ left: '50%' }}>
                        <div className="milestone-dot"></div>
                        <div className="milestone-label">1/2</div>
                    </div>
                    <div className={`milestone ${percentage >= 75 ? 'completed' : ''}`} style={{ left: '75%' }}>
                        <div className="milestone-dot"></div>
                        <div className="milestone-label">3/4</div>
                    </div>
                    <div className={`milestone ${percentage >= 100 ? 'completed' : ''}`} style={{ left: '100%' }}>
                        <div className="milestone-dot"></div>
                        <div className="milestone-label">üèÜ</div>
                    </div>
                </div>
            </div>

            {showDetails && (
                <div className="progress-details">
                    <div className="progress-stats">
                        <div className="stat-item">
                            <span className="stat-value">{completedMatches}</span>
                            <span className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                        </div>
                        <div className="stat-divider">‚Ä¢</div>
                        <div className="stat-item">
                            <span className="stat-value">{totalMatches - completedMatches}</span>
                            <span className="stat-label">–û—Å—Ç–∞–ª–æ—Å—å</span>
                        </div>
                        <div className="stat-divider">‚Ä¢</div>
                        <div className="stat-item">
                            <span className="stat-value">{totalMatches}</span>
                            <span className="stat-label">–í—Å–µ–≥–æ –º–∞—Ç—á–µ–π</span>
                        </div>
                    </div>

                    {/* –§–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */}
                    <div className="phase-indicators">
                        <div className={`phase-indicator ${phase === 'registration' ? 'active' : phase === 'starting' || phase === 'active' || phase === 'semifinals' || phase === 'final' || phase === 'completed' ? 'completed' : ''}`}>
                            üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                        </div>
                        <div className={`phase-indicator ${phase === 'starting' ? 'active' : phase === 'active' || phase === 'semifinals' || phase === 'final' || phase === 'completed' ? 'completed' : ''}`}>
                            ‚ö° –°—Ç–∞—Ä—Ç
                        </div>
                        <div className={`phase-indicator ${phase === 'active' ? 'active' : phase === 'semifinals' || phase === 'final' || phase === 'completed' ? 'completed' : ''}`}>
                            üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Ñ–∞–∑–∞
                        </div>
                        <div className={`phase-indicator ${phase === 'semifinals' ? 'active' : phase === 'final' || phase === 'completed' ? 'completed' : ''}`}>
                            ü•á –ü–æ–ª—É—Ñ–∏–Ω–∞–ª
                        </div>
                        <div className={`phase-indicator ${phase === 'final' ? 'active' : phase === 'completed' ? 'completed' : ''}`}>
                            üèÜ –§–∏–Ω–∞–ª
                        </div>
                        <div className={`phase-indicator ${phase === 'completed' ? 'active completed' : ''}`}>
                            ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default TournamentProgressBar; 