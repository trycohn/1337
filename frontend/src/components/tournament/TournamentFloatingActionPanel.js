/**
 * TournamentFloatingActionPanel v1.1.0 - –ü–ª–∞–≤–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π + –°–µ–ª–µ–∫—Ç–æ—Ä –≤–∏–¥–∞
 * 
 * @version 1.1.0 (–î–æ–±–∞–≤–ª–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –≤–∏–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
 * @created 2025-01-22
 * @updated 2025-01-22
 * @author 1337 Community Development Team
 * @purpose –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–ª–∞–≤–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–º + –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * @features –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ, —É–º–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫, –∞–Ω–∏–º–∞—Ü–∏–∏, —Å–µ–ª–µ–∫—Ç–æ—Ä –≤–∏–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */

import React, { useState, useMemo } from 'react';
import './TournamentFloatingActionPanel.css';

const TournamentFloatingActionPanel = ({
    tournament,
    user,
    hasAccess,
    onStartTournament,
    onEndTournament,
    onGenerateBracket,
    onRegenerateBracket,
    onClearResults,
    hasMatches = false,
    hasBracket = false,
    // üÜï –ù–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    displayMode = 'smart-cards',
    onDisplayModeChange,
    showDisplayModeSelector = true, // –§–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    // üÜï –ù–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
    mixedTeams = [],
    onReformTeams
}) => {
    const [isExpanded, setIsExpanded] = useState(false);
    const [isAnimating, setIsAnimating] = useState(false);

    // üé® –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const displayModes = [
        {
            id: 'smart-cards',
            label: 'Smart Cards',
            description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –±–æ–≥–∞—Ç—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º',
            icon: 'üÉè'
        },
        {
            id: 'data-table', 
            label: 'Data Table',
            description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö',
            icon: 'üìã'
        },
        {
            id: 'gaming-roster',
            label: 'Gaming Roster', 
            description: '–ì–µ–π–º–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
            icon: '‚ö°'
        }
    ];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    const isAdminOrCreator = hasAccess || (user && tournament && 
        (tournament.creator_id === user.id || tournament.created_by === user.id || user.role === 'admin'));

    // üÜï –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ê–ù–î
    const canReformTeams = useMemo(() => {
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (!tournament || !isAdminOrCreator) return false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'active', –Ω–æ –ù–ï 'in_progress'
        if (tournament.status !== 'active') return false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –º–∏–∫—Å-—Ñ–æ—Ä–º–∞—Ç–∞
        if (tournament.format !== 'mix') return false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        const hasTeams = (mixedTeams && mixedTeams.length > 0) || 
                         (tournament.teams && tournament.teams.length > 0);
        if (!hasTeams) return false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π (—Ç—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è)
        if (tournament.matches && tournament.matches.length > 0) return false;
        if (hasMatches) return false;
        
        return true;
    }, [tournament, isAdminOrCreator, mixedTeams, hasMatches]);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    const availableActions = useMemo(() => {
        if (!tournament) return [];
        
        const actions = [];
        const status = tournament.status;

        // "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É" - –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–ê–∫—Ç–∏–≤–Ω—ã–π", –µ—Å–ª–∏ —Å–µ—Ç–∫–∏ –Ω–µ—Ç
        if (status === 'active' && !hasBracket) {
            actions.push({
                id: 'generate-bracket',
                icon: '‚ö°',
                title: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É',
                description: '–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞',
                onClick: onGenerateBracket,
                color: 'primary',
                priority: 1
            });
        }

        // "–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏" - –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–ê–∫—Ç–∏–≤–Ω—ã–π", –µ—Å–ª–∏ —Å–µ—Ç–∫–∞ –µ—Å—Ç—å
        if (status === 'active' && hasBracket) {
            actions.push({
                id: 'regenerate-bracket',
                icon: 'üîÑ',
                title: '–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É',
                description: '–ó–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É',
                onClick: onRegenerateBracket,
                color: 'warning',
                priority: 2
            });
        }

        // üÜï "–ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã" - –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        if (canReformTeams && onReformTeams) {
            actions.push({
                id: 'reform-teams',
                icon: 'üîÑ',
                title: '–ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã',
                description: '–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                onClick: onReformTeams,
                color: 'warning',
                priority: 2
            });
        }

        // "–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä" - –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–ê–∫—Ç–∏–≤–Ω—ã–π", –µ—Å–ª–∏ —Å–µ—Ç–∫–∞ –µ—Å—Ç—å
        if (status === 'active' && hasBracket) {
            actions.push({
                id: 'start-tournament',
                icon: 'üöÄ',
                title: '–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä',
                description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞',
                onClick: onStartTournament,
                color: 'success',
                priority: 1
            });
        }

        // "–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π" - –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–ò–¥–µ—Ç", –µ—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ç—á–∏
        if (status === 'in_progress' && hasMatches) {
            actions.push({
                id: 'clear-results',
                icon: 'üóëÔ∏è',
                title: '–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
                description: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π',
                onClick: onClearResults,
                color: 'danger',
                priority: 3
            });
        }

        // "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä" - –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "–ò–¥–µ—Ç"
        if (status === 'in_progress') {
            actions.push({
                id: 'end-tournament',
                icon: 'üèÅ',
                title: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä',
                description: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞',
                onClick: onEndTournament,
                color: 'primary',
                priority: 1
            });
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        return actions.sort((a, b) => a.priority - b.priority);
    }, [tournament, hasBracket, hasMatches, canReformTeams, 
        onStartTournament, onEndTournament, onGenerateBracket, 
        onRegenerateBracket, onClearResults, onReformTeams]);

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–æ–æ–±—â–µ
    if (!isAdminOrCreator || !tournament) {
        return null;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
    if (availableActions.length === 0) {
        return null;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏
    const handleToggle = () => {
        if (isAnimating) return;
        
        setIsAnimating(true);
        setIsExpanded(!isExpanded);
        
        // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setTimeout(() => setIsAnimating(false), 300);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é
    const handleActionClick = (action) => {
        if (action.onClick && typeof action.onClick === 'function') {
            action.onClick();
        }
    };

    // üé® –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const handleDisplayModeChange = (newMode) => {
        if (onDisplayModeChange && typeof onDisplayModeChange === 'function') {
            onDisplayModeChange(newMode);
        }
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    const getStatusIndicatorColor = () => {
        switch (tournament.status) {
            case 'active': return '#4CAF50';
            case 'in_progress': return '#FF9800';
            case 'completed': return '#9E9E9E';
            default: return '#2196F3';
        }
    };

    // –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    const getStatusText = () => {
        switch (tournament.status) {
            case 'active': return '–ê–∫—Ç–∏–≤–Ω—ã–π';
            case 'in_progress': return '–ò–¥–µ—Ç';
            case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω';
            default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    };

    return (
        <div className={`tournament-floating-panel ${isExpanded ? 'expanded' : 'collapsed'} ${isAnimating ? 'animating' : ''}`}>
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å */}
            <div className="floating-panel-toggle" onClick={handleToggle}>
                <div className="toggle-icon">
                    {isExpanded ? '‚úï' : '‚öôÔ∏è'}
                </div>
                <div className="status-indicator" style={{ backgroundColor: getStatusIndicatorColor() }}>
                    <div className="status-text">{getStatusText()}</div>
                </div>
                <div className="actions-count">
                    {availableActions.length}
                </div>
            </div>

            {/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ */}
            {isExpanded && (
                <div className="floating-panel-content">
                    <div className="panel-header">
                        <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º</h4>
                        <span className="tournament-name">{tournament.name}</span>
                    </div>

                    {/* üÜï –°–ï–ö–¶–ò–Ø –°–ï–õ–ï–ö–¢–û–†–ê –í–ò–î–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø */}
                    {showDisplayModeSelector && onDisplayModeChange && (
                        <div className="display-mode-section-participants-list">
                            <div className="section-header-participants-list">
                                <span className="section-icon-participants-list">üé®</span>
                                <span className="section-title-participants-list">–í–∏–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                            </div>
                            <div className="display-mode-selector-participants-list">
                                <select
                                    className="floating-display-mode-select-participants-list"
                                    value={displayMode}
                                    onChange={(e) => handleDisplayModeChange(e.target.value)}
                                    title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                                >
                                    {displayModes.map(mode => (
                                        <option key={mode.id} value={mode.id}>
                                            {mode.icon} {mode.label}
                                        </option>
                                    ))}
                                </select>
                                <div className="mode-description-participants-list">
                                    {displayModes.find(mode => mode.id === displayMode)?.description}
                                </div>
                            </div>
                        </div>
                    )}
                    
                    <div className="panel-actions">
                        {availableActions.map((action) => (
                            <div 
                                key={action.id}
                                className={`floating-action-item ${action.color}`}
                                onClick={() => handleActionClick(action)}
                                title={action.description}
                            >
                                <div className="action-icon">
                                    {action.icon}
                                </div>
                                <div className="action-content">
                                    <div className="action-title">
                                        {action.title}
                                    </div>
                                    <div className="action-description">
                                        {action.description}
                                    </div>
                                </div>
                                <div className="action-arrow">
                                    ‚Üí
                                </div>
                            </div>
                        ))}
                    </div>

                    <div className="panel-footer">
                        <div className="panel-info">
                            üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞: <strong>{getStatusText()}</strong>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default TournamentFloatingActionPanel; 