import React, { useMemo, useState } from 'react';
import { getParticipantInfo, enrichMatchWithParticipantNames } from '../../utils/participantHelpers';
import { ensureHttps } from '../../utils/userHelpers';
import MatchDetailsModal from './modals/MatchDetailsModal';
import './TournamentResults.css';
import PodiumSection from './PodiumSection';
import TournamentStatsPanel from './TournamentStatsPanel';

const TournamentResults = ({ tournament }) => {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞
    const [selectedMatchForDetails, setSelectedMatchForDetails] = useState(null);
    const [isMatchDetailsOpen, setIsMatchDetailsOpen] = useState(false);

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
    const openMatchDetails = (match) => {
        const enrichedMatch = enrichMatchWithParticipantNames(match, tournament);
        setSelectedMatchForDetails(enrichedMatch);
        setIsMatchDetailsOpen(true);
    };

    const closeMatchDetails = () => {
        setIsMatchDetailsOpen(false);
        setSelectedMatchForDetails(null);
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –ø–æ–¥–∏—É–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç
    const tournamentResults = useMemo(() => {
        if (!tournament?.matches || tournament.matches.length === 0) {
            return { completedMatches: [], hasResults: false };
        }

        const matches = tournament.matches;
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±–∫—É—é –ª–æ–≥–∏–∫—É –∫–∞–∫ –≤ TournamentProgressBar)
        const completedMatches = matches.filter(match => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
            const hasValidState = match.state === 'DONE' || match.state === 'SCORE_DONE' || match.status === 'completed';
            const hasScore = (match.score1 !== null && match.score1 !== undefined) || 
                            (match.score2 !== null && match.score2 !== undefined);
            const hasWinner = match.winner_team_id !== null && match.winner_team_id !== undefined;
            
            return hasValidState || hasScore || hasWinner;
        });

        console.log('üèÜ TournamentResults: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—á–∏', {
            totalMatches: matches.length,
            completedMatches: completedMatches.length,
            format: tournament.format || tournament.bracket_type
        });

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (process.env.NODE_ENV === 'development') {
            console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π:');
            matches.slice(0, 5).forEach((match, index) => {
                console.log(`  –ú–∞—Ç—á ${index + 1}:`, {
                    id: match.id,
                    status: match.status,
                    state: match.state,
                    winner_team_id: match.winner_team_id,
                    team1_id: match.team1_id,
                    team2_id: match.team2_id,
                    score1: match.score1,
                    score2: match.score2,
                    bracket_type: match.bracket_type,
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
                    hasValidState: match.state === 'DONE' || match.state === 'SCORE_DONE' || match.status === 'completed',
                    hasScore: (match.score1 !== null && match.score1 !== undefined) || (match.score2 !== null && match.score2 !== undefined),
                    hasWinner: match.winner_team_id !== null && match.winner_team_id !== undefined,
                    isCompleted: (match.state === 'DONE' || match.state === 'SCORE_DONE' || match.status === 'completed') || 
                                ((match.score1 !== null && match.score1 !== undefined) || (match.score2 !== null && match.score2 !== undefined)) || 
                                (match.winner_team_id !== null && match.winner_team_id !== undefined)
                });
            });
            
            const statusCounts = matches.reduce((acc, m) => {
                acc[m.status] = (acc[m.status] || 0) + 1;
                return acc;
            }, {});
            console.log('üìä –°—Ç–∞—Ç—É—Å—ã –º–∞—Ç—á–µ–π:', statusCounts);
            
            const stateCounts = matches.reduce((acc, m) => {
                acc[m.state || 'undefined'] = (acc[m.state || 'undefined'] || 0) + 1;
                return acc;
            }, {});
            console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Ç—á–µ–π (state):', stateCounts);
            
            const withWinners = matches.filter(m => m.winner_team_id).length;
            const withScores = matches.filter(m => (m.score1 !== null && m.score1 !== undefined) || (m.score2 !== null && m.score2 !== undefined)).length;
            console.log(`üèÜ –ú–∞—Ç—á–µ–π —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏: ${withWinners}`);
            console.log(`üìä –ú–∞—Ç—á–µ–π —Å–æ —Å—á–µ—Ç–æ–º: ${withScores}`);
        }

        if (completedMatches.length === 0) {
            return { completedMatches: [], hasResults: false };
        }

        return {
            completedMatches: completedMatches.reverse(),
            hasResults: true
        };
    }, [tournament]);

    if (!tournament) {
        return (
            <div className="results-error">
                <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—É—Ä–Ω–∏—Ä–µ</div>
            </div>
        );
    }

    if (!tournamentResults.hasResults) {
        return (
            <div className="results-empty-state">
                <div className="results-empty-content">
                    <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h3>
                    <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –º–∞—Ç—á–µ–π</p>
                    <div className="results-debug-info">
                        <p>–¢—É—Ä–Ω–∏—Ä: {tournament.name}</p>
                        <p>–§–æ—Ä–º–∞—Ç: {tournament.format || tournament.bracket_type}</p>
                        <p>–°—Ç–∞—Ç—É—Å: {tournament.status}</p>
                        <p>–í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {tournament.matches?.length || 0}</p>
                        <p>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π: {tournament.matches?.filter(m => m.status === 'completed').length || 0}</p>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="results-tournament-results">
            {/* –ë–ª–æ–∫ 1: –ü—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞ (–µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –µ—Å—Ç—å –ø—Ä–∏–∑–µ—Ä—ã) */}
            {tournament.status === 'completed' && (
                <div className="results-winners-section">
                    <div className="results-section-header">
                        <h3>–ü—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞</h3>
                        <div className="results-tournament-info">
                            <span className="results-format">{getFormatDisplayName(tournament.format || tournament.bracket_type)}</span>
                        </div>
                    </div>
                    <div className="results-podium">
                        <PodiumSection tournament={tournament} matches={tournament.matches} />
                    </div>
                </div>
            )}

            {/* –ë–ª–æ–∫ 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –ª–æ–±–±–∏) */}
            {tournament.status === 'completed' && tournament.lobby_enabled && tournament.game === 'Counter-Strike 2' && (
                <TournamentStatsPanel tournamentId={tournament.id} />
            )}

            {/* –ë–ª–æ–∫ 3: –ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π */}
            {tournamentResults.completedMatches.length > 0 && (
                <div className="results-match-history-section">
                    <div className="results-section-header">
                        <h3>–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç—á–µ–π</h3>
                        <div className="results-history-stats">
                            <span className="results-matches-count">{tournamentResults.completedMatches.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π</span>
                        </div>
                    </div>
                    
                    <div className="results-match-history-list">
                        {tournamentResults.completedMatches.map((match, idx) => renderMatchHistoryItem(match, tournament, openMatchDetails))}
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞ */}
            {isMatchDetailsOpen && selectedMatchForDetails && (
                <MatchDetailsModal
                    isOpen={isMatchDetailsOpen}
                    onClose={closeMatchDetails}
                    selectedMatch={selectedMatchForDetails}
                    canEdit={false}
                    tournament={tournament}
                />
            )}
        </div>
    );
};

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–µ—Ä–æ–≤ (–∏–¥–µ–Ω—Ç–∏—á–Ω–∞ –ø–æ–¥–∏—É–º—É)
function calculateWinners(matches, tournament) {
    console.log('üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–µ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞...');
    
    // –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á
    const finalMatch = matches.find(match => 
        match.bracket_type === 'grand_final' || 
        match.is_final === true ||
        (match.round && parseInt(match.round) === Math.max(...matches.map(m => parseInt(m.round) || 0)))
    );

    // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ (SE) –∏–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º 3-–µ –º–µ—Å—Ç–æ –¥–ª—è DE
    const thirdPlaceMatch = matches.find(match => 
        match.is_third_place_match === true ||
        match.bracket_type === 'placement'
    );

    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –º–∞—Ç—á–∏:', {
        finalMatch: finalMatch ? `ID ${finalMatch.id}, —Ä–∞—É–Ω–¥ ${finalMatch.round}` : '–Ω–µ –Ω–∞–π–¥–µ–Ω',
        thirdPlaceMatch: thirdPlaceMatch ? `ID ${thirdPlaceMatch.id}` : '–Ω–µ –Ω–∞–π–¥–µ–Ω'
    });

    if (!finalMatch || !finalMatch.winner_team_id) {
        console.log('‚ùå –§–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω', {
            finalMatch: !!finalMatch,
            winner_team_id: finalMatch?.winner_team_id
        });
        return null;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º 1-–µ –∏ 2-–µ –º–µ—Å—Ç–∞ –∏–∑ —Ñ–∏–Ω–∞–ª–∞
    const firstPlace = getParticipantInfo(finalMatch.winner_team_id, tournament);
    const secondPlaceId = finalMatch.winner_team_id === finalMatch.team1_id 
        ? finalMatch.team2_id 
        : finalMatch.team1_id;
    const secondPlace = getParticipantInfo(secondPlaceId, tournament);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º 3-–µ –º–µ—Å—Ç–æ
    let thirdPlace = null;
    if (thirdPlaceMatch && thirdPlaceMatch.winner_team_id) {
        // SE: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
        thirdPlace = getParticipantInfo(thirdPlaceMatch.winner_team_id, tournament);
    } else {
        // DE: –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π —Ñ–∏–Ω–∞–ª–∞ –ª—É–∑–µ—Ä–æ–≤
        const losersFinal = matches.find(m => m.bracket_type === 'loser_final');
        if (losersFinal && losersFinal.winner_team_id && (losersFinal.team1_id || losersFinal.team2_id)) {
            const loserId = losersFinal.winner_team_id === losersFinal.team1_id ? losersFinal.team2_id : losersFinal.team1_id;
            thirdPlace = getParticipantInfo(loserId, tournament);
        } else {
            // Fallback: –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥ –Ω–∏–∂–Ω–µ–π —Å–µ—Ç–∫–∏
            const losersMatches = matches.filter(m => m.bracket_type === 'loser');
            if (losersMatches.length > 0) {
                const maxLosersRound = Math.max(...losersMatches.map(m => parseInt(m.round) || 0));
                const lastLosersRoundMatch = losersMatches.find(m => (parseInt(m.round) || 0) === maxLosersRound && m.winner_team_id);
                if (lastLosersRoundMatch) {
                    const loserId = lastLosersRoundMatch.winner_team_id === lastLosersRoundMatch.team1_id 
                        ? lastLosersRoundMatch.team2_id 
                        : lastLosersRoundMatch.team1_id;
                    thirdPlace = getParticipantInfo(loserId, tournament);
                }
            }
        }
    }

    console.log('üèÜ –ü—Ä–∏–∑–µ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã:', {
        first: firstPlace?.name,
        second: secondPlace?.name,
        third: thirdPlace?.name
    });

    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–∑–µ—Ä–∞—Ö:', {
        firstPlace,
        secondPlace,
        thirdPlace,
        firstPlaceExists: !!firstPlace,
        secondPlaceExists: !!secondPlace
    });

    if (!firstPlace) {
        console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: firstPlace –Ω–µ –Ω–∞–π–¥–µ–Ω!', {
            winner_team_id: finalMatch.winner_team_id,
            tournament_teams_count: tournament.teams?.length,
            tournament_participants_count: tournament.participants?.length
        });
        return null;
    }

    return {
        first: firstPlace,
        second: secondPlace,
        third: thirdPlace
    };
}

// –†–µ–Ω–¥–µ—Ä –ø—Ä–∏–∑–µ—Ä–æ–≤
function renderWinners(winners) {
    return (
        <div className="results-winners-list">
            {/* 1-–µ –º–µ—Å—Ç–æ */}
            <div className="results-winner-card results-place-1">
                    {/* –Ω–æ–º–µ—Ä —É–±—Ä–∞–Ω, –µ—Å—Ç—å –º–µ–¥–∞–ª—å */}
                <div className="results-winner-info">
                    <div className="results-winner-avatar">
                        <img 
                            src={ensureHttps(winners.first.avatar_url) || '/default-avatar.png'}
                            alt={winners.first.name}
                            onError={(e) => { e.target.src = '/default-avatar.png'; }}
                        />
                    </div>
                    <div className="results-winner-name">{winners.first.name}</div>
                    {winners.first.members && winners.first.members.length > 0 && (
                        <div className="results-team-members">
                            {winners.first.members.map((member, index) => (
                                <span key={index} className="results-member">
                                    {member.name}
                                </span>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {/* 2-–µ –º–µ—Å—Ç–æ */}
            <div className="results-winner-card results-place-2">
                    {/* –Ω–æ–º–µ—Ä —É–±—Ä–∞–Ω, –µ—Å—Ç—å –º–µ–¥–∞–ª—å */}
                <div className="results-winner-info">
                    <div className="results-winner-avatar">
                        <img 
                            src={ensureHttps(winners.second.avatar_url) || '/default-avatar.png'}
                            alt={winners.second.name}
                            onError={(e) => { e.target.src = '/default-avatar.png'; }}
                        />
                    </div>
                    <div className="results-winner-name">{winners.second.name}</div>
                    {winners.second.members && winners.second.members.length > 0 && (
                        <div className="results-team-members">
                            {winners.second.members.map((member, index) => (
                                <span key={index} className="results-member">
                                    {member.name}
                                </span>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {/* 3-–µ –º–µ—Å—Ç–æ */}
            {winners.third && (
                <div className="results-winner-card results-place-3">
                    {/* –Ω–æ–º–µ—Ä —É–±—Ä–∞–Ω, –µ—Å—Ç—å –º–µ–¥–∞–ª—å */}
                    <div className="results-winner-info">
                        <div className="results-winner-avatar">
                            <img 
                                src={ensureHttps(winners.third.avatar_url) || '/default-avatar.png'}
                                alt={winners.third.name}
                                onError={(e) => { e.target.src = '/default-avatar.png'; }}
                            />
                        </div>
                        <div className="results-winner-name">{winners.third.name}</div>
                    {winners.third.members && winners.third.members.length > 0 && (
                        <div className="results-team-members">
                            {winners.third.members.map((member, index) => (
                                <span key={index} className="results-member">
                                    {member.name}
                                </span>
                            ))}
                        </div>
                    )}
                    </div>
                </div>
            )}
        </div>
    );
}

// –†–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
function renderMatchHistoryItem(match, tournament, openMatchDetails) {
    const winner = getParticipantInfo(match.winner_team_id, tournament);
    const loserId = match.winner_team_id === match.team1_id ? match.team2_id : match.team1_id;
    const loser = getParticipantInfo(loserId, tournament);

    // –û—Å–æ–±—ã–µ –º–∞—Ç—á–∏
    const special = getBracketTypeDisplayName(match.bracket_type);

    return (
        <div key={match.id} className="results-match-history-item">
            <div className="results-match-info">
                <div className="results-match-header">
                    <span className="results-match-number">#{match.tournament_match_number || match.match_number || match.id}</span>
                    {special && <span className="results-bracket-type">{special}</span>}
                </div>
                
                <div className="results-match-result">
                    <div className="results-participants">
                        <div className="results-participant results-winner" style={{fontWeight: 700, color: '#ff0000'}}>
                            <div className="results-participant-avatar">
                                <img 
                                    src={ensureHttps(winner?.avatar_url) || '/default-avatar.png'}
                                    alt={winner?.name || 'Winner'}
                                    onError={(e) => { e.target.src = '/default-avatar.png'; }}
                                />
                            </div>
                            <span className="results-participant-name">{winner?.name || 'Winner'}</span>
                        </div>
                        
                        <div className="results-score">
                            {getFormattedScore(match)}
                        </div>
                        
                        <div className="results-participant results-loser">
                            <div className="results-participant-avatar">
                                <img 
                                    src={ensureHttps(loser?.avatar_url) || '/default-avatar.png'}
                                    alt={loser?.name || 'Loser'}
                                    onError={(e) => { e.target.src = '/default-avatar.png'; }}
                                />
                            </div>
                            <span className="results-participant-name">{loser?.name || 'Loser'}</span>
                        </div>
                    </div>
                    
                    <button 
                        onClick={() => window.open(`/tournaments/${tournament.id}/match/${match.id}`, '_blank')}
                        className="results-match-details-link"
                        title="–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ç—á–∞"
                    >
                        –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á
                    </button>
                </div>
            </div>
        </div>
    );
}

export default TournamentResults;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getComputedScoresForMatch(m) {
    const maps = m?.maps_data;
    if (Array.isArray(maps) && maps.length > 0) {
        if (maps.length === 1) {
            const only = maps[0];
            const s1 = (only.score1 ?? only.team1_score);
            const s2 = (only.score2 ?? only.team2_score);
            if (typeof s1 === 'number' && typeof s2 === 'number') return [s1, s2];
        } else {
            let wins1 = 0, wins2 = 0;
            for (const mm of maps) {
                const s1 = (mm.score1 ?? mm.team1_score);
                const s2 = (mm.score2 ?? mm.team2_score);
                if (typeof s1 === 'number' && typeof s2 === 'number') {
                    if (s1 > s2) wins1++; else if (s2 > s1) wins2++;
                }
            }
            if (wins1 + wins2 > 0) return [wins1, wins2];
        }
    }
    const s1 = (typeof m?.score1 === 'number') ? m.score1 : 0;
    const s2 = (typeof m?.score2 === 'number') ? m.score2 : 0;
    return [s1, s2];
}
function getFormatDisplayName(format) {
    const formats = {
        'single_elimination': 'Single Elimination',
        'double_elimination': 'Double Elimination',
        'mix': 'Mix'
    };
    return formats[format] || format;
}

function getBracketTypeDisplayName(bracketType) {
    const types = {
        'winner': '–í–∏–Ω–µ—Ä—ã',
        'loser': '–õ—É–∑–µ—Ä—ã',
        'loser_semifinal': '–ú–∞–ª—ã–π —Ñ–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤',
        'loser_final': '–§–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤',
        'grand_final': '–ì—Ä–∞–Ω–¥ —Ñ–∏–Ω–∞–ª',
        'grand_final_reset': '–ì—Ä–∞–Ω–¥ —Ñ–∏–Ω–∞–ª (—Ä–µ–≤–∞–Ω—à)',
        'placement': '–ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ',
        'final': '–§–∏–Ω–∞–ª',
        'semifinal': '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª'
    };
    return types[bracketType] || bracketType;
}

function getFormattedScore(match) {
    const [team1Display, team2Display] = getComputedScoresForMatch(match);
    if (!match.winner_team_id) return `${team1Display}:${team2Display}`;
    return match.winner_team_id === match.team1_id
        ? `${team1Display}:${team2Display}`
        : `${team2Display}:${team1Display}`;
}