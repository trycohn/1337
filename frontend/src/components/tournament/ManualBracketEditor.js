import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { TouchBackend } from 'react-dnd-touch-backend';
import { isMobile } from 'react-device-detect';
import axios from 'axios';
import './ManualBracketEditor.css';

const DRAG_TYPE = 'PARTICIPANT';

// üéØ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
const DraggableParticipant = ({ participant, position, onSwap, isPreview = false }) => {
  const [{ isDragging }, drag] = useDrag({
    type: DRAG_TYPE,
    item: { participant, position },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  const [{ isOver, canDrop }, drop] = useDrop({
    accept: DRAG_TYPE,
    drop: (draggedItem) => {
      if (draggedItem.position !== position) {
        onSwap(draggedItem.position, position);
      }
    },
    collect: (monitor) => ({
      isOver: monitor.isOver(),
      canDrop: monitor.canDrop(),
    }),
  });

  const attachRef = (element) => {
    drag(element);
    drop(element);
  };

  if (!participant) {
    return (
      <div 
        ref={drop}
        className={`participant-slot empty ${isOver && canDrop ? 'drop-target' : ''}`}
      >
        <span className="empty-text">–°–≤–æ–±–æ–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è</span>
      </div>
    );
  }

  return (
    <div
      ref={attachRef}
      className={`participant-slot filled ${isDragging ? 'dragging' : ''} ${isOver && canDrop ? 'drop-target' : ''} ${isPreview ? 'preview' : ''}`}
      style={{ opacity: isDragging ? 0.5 : 1 }}
    >
      <div className="participant-info">
        <div className="participant-name">{participant.name || participant.username}</div>
        <div className="participant-details">
          {participant.faceit_elo && <span className="elo">ELO: {participant.faceit_elo}</span>}
          {participant.cs2_premier_rank && <span className="rank">Rank: {participant.cs2_premier_rank}</span>}
        </div>
      </div>
      <div className="drag-handle">‚ãÆ‚ãÆ</div>
    </div>
  );
};

// üìä –¢–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
const TableBracketEditor = ({ participants, bracketPositions, onPositionChange, onPreview }) => {
  const [searchTerm, setSearchTerm] = useState('');
  
  const filteredParticipants = useMemo(() => {
    if (!searchTerm) return participants;
    return participants.filter(p => 
      (p.name || p.username || '').toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [participants, searchTerm]);

  const availableParticipants = useMemo(() => {
    const usedParticipants = new Set(
      bracketPositions.map(pos => pos.participant?.id).filter(Boolean)
    );
    return participants.filter(p => !usedParticipants.has(p.id));
  }, [participants, bracketPositions]);

  return (
    <div className="table-bracket-editor">
      <div className="editor-controls">
        <div className="search-box">
          <input
            type="text"
            placeholder="üîç –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>
        <div className="available-count">
          –°–≤–æ–±–æ–¥–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {availableParticipants.length}
        </div>
      </div>

      <div className="positions-table">
        <div className="table-header">
          <div className="col-position">–ü–æ–∑–∏—Ü–∏—è</div>
          <div className="col-match">–ú–∞—Ç—á</div>
          <div className="col-participant">–£—á–∞—Å—Ç–Ω–∏–∫</div>
          <div className="col-actions">–î–µ–π—Å—Ç–≤–∏—è</div>
        </div>
        
        <div className="table-body">
          {bracketPositions.map((position, index) => (
            <div key={`${position.matchId}-${position.slot}`} className="table-row">
              <div className="col-position">
                #{index + 1}
              </div>
              <div className="col-match">
                <div className="match-info">
                  <span className="match-title">{position.matchTitle}</span>
                  <span className="match-slot">–°–ª–æ—Ç {position.slot}</span>
                </div>
              </div>
              <div className="col-participant">
                <select
                  value={position.participant?.id || ''}
                  onChange={(e) => {
                    const participantId = e.target.value;
                    const participant = participantId ? 
                      participants.find(p => p.id.toString() === participantId) : null;
                    onPositionChange(index, participant);
                  }}
                  className="participant-select"
                >
                  <option value="">-- –ù–µ –≤—ã–±—Ä–∞–Ω --</option>
                  {filteredParticipants.map(participant => (
                    <option 
                      key={participant.id} 
                      value={participant.id}
                      disabled={
                        position.participant?.id !== participant.id &&
                        bracketPositions.some(pos => pos.participant?.id === participant.id)
                      }
                    >
                      {participant.name || participant.username}
                      {participant.faceit_elo && ` (ELO: ${participant.faceit_elo})`}
                    </option>
                  ))}
                </select>
              </div>
              <div className="col-actions">
                {position.participant && (
                  <button
                    onClick={() => onPositionChange(index, null)}
                    className="btn-clear"
                    title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"
                  >
                    ‚úï
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// üé® –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
const ManualBracketEditor = ({ 
  tournament, 
  matches, 
  participants, 
  onClose, 
  onSave 
}) => {
  const [editorMode, setEditorMode] = useState('drag'); // 'drag' –∏–ª–∏ 'table'
  const [bracketPositions, setBracketPositions] = useState([]);
  const [hasChanges, setHasChanges] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [previewMode, setPreviewMode] = useState(false);

  // üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–∑ –º–∞—Ç—á–µ–π
  useEffect(() => {
    const positions = [];
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º –∏ –ø–æ–∑–∏—Ü–∏—è–º
    const sortedMatches = [...matches]
      .filter(match => match.round === 1) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      .sort((a, b) => a.match_number - b.match_number);

    sortedMatches.forEach(match => {
      const matchTitle = `–ú–∞—Ç—á ${match.match_number} (–†–∞—É–Ω–¥ ${match.round})`;
      
      // –ü–æ–∑–∏—Ü–∏—è 1
      positions.push({
        matchId: match.id,
        slot: 1,
        matchTitle,
        participant: match.team1_id ? participants.find(p => p.id === match.team1_id) : null,
      });

      // –ü–æ–∑–∏—Ü–∏—è 2  
      positions.push({
        matchId: match.id,
        slot: 2,
        matchTitle,
        participant: match.team2_id ? participants.find(p => p.id === match.team2_id) : null,
      });
    });

    setBracketPositions(positions);
  }, [matches, participants]);

  // üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (Drag & Drop)
  const handleSwap = useCallback((fromIndex, toIndex) => {
    setBracketPositions(prev => {
      const newPositions = [...prev];
      const temp = newPositions[fromIndex].participant;
      newPositions[fromIndex].participant = newPositions[toIndex].participant;
      newPositions[toIndex].participant = temp;
      return newPositions;
    });
    setHasChanges(true);
  }, []);

  // üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ (Table)
  const handlePositionChange = useCallback((index, participant) => {
    setBracketPositions(prev => {
      const newPositions = [...prev];
      newPositions[index].participant = participant;
      return newPositions;
    });
    setHasChanges(true);
  }, []);

  // üëÅÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const handlePreviewToggle = () => {
    setPreviewMode(!previewMode);
  };

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSave = async () => {
    if (!hasChanges) return;

    setIsLoading(true);
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const bracketData = [];
      
      for (let i = 0; i < bracketPositions.length; i += 2) {
        const pos1 = bracketPositions[i];
        const pos2 = bracketPositions[i + 1];
        
        if (pos1 && pos2 && pos1.matchId === pos2.matchId) {
          bracketData.push({
            matchId: pos1.matchId,
            team1_id: pos1.participant?.id || null,
            team2_id: pos2.participant?.id || null,
          });
        }
      }

      const response = await axios.post(
        `/api/tournaments/${tournament.id}/manual-bracket-edit`,
        { bracketData },
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );

      if (response.data.success) {
        onSave(response.data);
        onClose();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏: ' + (error.response?.data?.message || error.message));
    } finally {
      setIsLoading(false);
    }
  };

  // üîÑ –°–±—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleReset = () => {
    window.location.reload(); // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  };

  const dndBackend = isMobile ? TouchBackend : HTML5Backend;

  return (
    <div className="manual-bracket-editor-overlay">
      <div className="manual-bracket-editor">
        <div className="editor-header">
          <h2>‚úèÔ∏è –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∫–∏</h2>
          <p className="warning-text">
            ‚ö†Ô∏è –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã
          </p>
          
          {/* üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
          <div className="mode-toggle">
            <button
              className={`mode-btn ${editorMode === 'drag' ? 'active' : ''}`}
              onClick={() => setEditorMode('drag')}
            >
              üéØ Drag & Drop
            </button>
            <button
              className={`mode-btn ${editorMode === 'table' ? 'active' : ''}`}
              onClick={() => setEditorMode('table')}
            >
              üìä –¢–∞–±–ª–∏—Ü–∞
            </button>
          </div>
        </div>

        <div className="editor-body">
          {editorMode === 'drag' ? (
            <DndProvider backend={dndBackend}>
              <div className="drag-editor">
                <div className="editor-controls">
                  <button
                    onClick={handlePreviewToggle}
                    className={`preview-btn ${previewMode ? 'active' : ''}`}
                  >
                    üëÅÔ∏è {previewMode ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –ø—Ä–µ–≤—å—é
                  </button>
                </div>

                <div className="bracket-positions">
                  {bracketPositions.map((position, index) => (
                    <div key={`${position.matchId}-${position.slot}`} className="position-wrapper">
                      <div className="position-label">
                        {position.matchTitle} - –°–ª–æ—Ç {position.slot}
                      </div>
                      <DraggableParticipant
                        participant={position.participant}
                        position={index}
                        onSwap={handleSwap}
                        isPreview={previewMode}
                      />
                    </div>
                  ))}
                </div>
              </div>
            </DndProvider>
          ) : (
            <TableBracketEditor
              participants={participants}
              bracketPositions={bracketPositions}
              onPositionChange={handlePositionChange}
              onPreview={handlePreviewToggle}
            />
          )}
        </div>

        <div className="editor-footer">
          <div className="changes-indicator">
            {hasChanges && <span className="changes-badge">‚óè –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</span>}
          </div>
          
          <div className="editor-actions">
            <button
              onClick={handleReset}
              className="btn-secondary"
              disabled={isLoading}
            >
              üîÑ –°–±—Ä–æ—Å–∏—Ç—å
            </button>
            <button
              onClick={onClose}
              className="btn-secondary"
              disabled={isLoading}
            >
              ‚ùå –û—Ç–º–µ–Ω–∞
            </button>
            <button
              onClick={handleSave}
              className="btn-primary"
              disabled={!hasChanges || isLoading}
            >
              {isLoading ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ManualBracketEditor; 