import React, { useState, useCallback, useEffect } from 'react';
import Skeleton, { SkeletonTheme } from 'react-loading-skeleton';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCrown } from '@fortawesome/free-solid-svg-icons';
// TeamGenerator —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –≤ TournamentDetails (–ø–µ—Ä–≤—ã–º –±–ª–æ–∫–æ–º)
import ParticipantSearchModal from './modals/ParticipantSearchModal';
import ReferralInviteModal from './modals/ReferralInviteModal';
import TeamEditModal from './modals/TeamEditModal';
import WaitingListPanel from './WaitingListPanel';
import useTournamentManagement from '../../hooks/tournament/useTournamentManagement';
import './TournamentParticipants.css';
import { getAvatarCategoryClass } from '../../utils/avatarCategory';
const byPrefixAndName = { fas: { crown: faCrown } };

const TournamentParticipants = ({ 
    tournament, 
    user, 
    isAdminOrCreator, 
    originalParticipants, 
    onTeamsGenerated,
    onTournamentUpdate
}) => {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    const [participantSearchModal, setParticipantSearchModal] = useState(false);
    const [participantSearchQuery, setParticipantSearchQuery] = useState('');
    const [participantSearchResults, setParticipantSearchResults] = useState([]);
    const [isSearchingParticipants, setIsSearchingParticipants] = useState(false);
    const [newParticipantModal, setNewParticipantModal] = useState(false);
    const [newParticipantData, setNewParticipantData] = useState({
        display_name: '',
        email: '',
        faceit_elo: '',
        cs2_premier_rank: ''
    });
    const [message, setMessage] = useState('');
    const [showPlayersList, setShowPlayersList] = useState(false);
    const [teamPlayers, setTeamPlayers] = useState([{ nickname: '' }]);
    
    // üîó –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ì–û –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê
    const [referralModal, setReferralModal] = useState(false);
    
    // üîß –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ú–û–î–ê–õ–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ê–ù–î–´
    const [teamEditModal, setTeamEditModal] = useState(false);
    const [selectedTeam, setSelectedTeam] = useState(null);

    // –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–º
    const tournamentManagement = useTournamentManagement(tournament?.id);

    // üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç: –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        const token = localStorage.getItem('token');
        const intent = localStorage.getItem('referralIntent');
        const intentTournamentId = localStorage.getItem('referralIntentTournamentId');

        if (token && intent === '1' && intentTournamentId && String(intentTournamentId) === String(tournament?.id)) {
            setReferralModal(true);
            localStorage.removeItem('referralIntent');
            localStorage.removeItem('referralIntentTournamentId');
        }
    }, [tournament?.id, user?.id]);

    // üîó –ö–ª–∏–∫ –ø–æ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π¬ª: –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Ö–æ–¥ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
    const handleReferralInviteClick = useCallback(() => {
        if (!tournament?.id) return;

        if (!user) {
            const agreed = window.confirm('–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –û—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ?');
            if (!agreed) return;

            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–Ω—Ç –∏ —Ç—É—Ä–Ω–∏—Ä, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
            localStorage.setItem('referralIntent', '1');
            localStorage.setItem('referralIntentTournamentId', String(tournament.id));
            localStorage.setItem('returnToTournament', String(tournament.id));
            localStorage.setItem('tournamentAction', 'referral');

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ –∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
            const loginUrl = `/login?action=referral&tournamentId=${encodeURIComponent(tournament.id)}&redirect=${encodeURIComponent(`/tournaments/${tournament.id}?referral_intent=1`)}`;
            window.open(loginUrl, '_blank', 'noopener,noreferrer');
            return;
        }

        setReferralModal(true);
    }, [user, tournament?.id]);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    const getParticipantsList = useCallback(() => {
        // –î–ª—è MIX —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–ª–æ‚Äë—Å–ø–∏—Å–æ–∫ –∏–∑ originalParticipants, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω; –∏–Ω–∞—á–µ ‚Äî –∏–∑ tournament.participants
        if (tournament?.format === 'mix') {
            const base = Array.isArray(originalParticipants) && originalParticipants.length > 0
                ? originalParticipants
                : (tournament?.participants || []);
            console.log('üìã [TournamentParticipants] MIX ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–ª–æ —Å–ø–∏—Å–æ–∫:', base.length);
            return base;
        }

        console.log('üìã [TournamentParticipants] –ù–ï-MIX ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º tournament.participants:', tournament?.participants?.length || 0);
        return tournament?.participants || [];
    }, [tournament, originalParticipants]);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const participantsList = getParticipantsList();
    const isMixFormat = (tournament?.format === 'mix');
    const isLoadingInitial = !tournament || (
        isMixFormat
            ? !Array.isArray(participantsList)
            : (tournament?.participant_type === 'team')
                ? !Array.isArray(tournament?.teams)
                : !Array.isArray(participantsList)
    );
    const skeletonRows = 3;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    useEffect(() => {
        console.log('üîÑ [TournamentParticipants] –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è:', {
            count: participantsList.length,
            participants: participantsList.map(p => ({ id: p.id, name: p.name }))
        });
    }, [participantsList]);

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const searchParticipants = useCallback(async (query) => {
        console.log('üîç [TournamentParticipants] –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∑–∞–ø—Ä–æ—Å:', query);
        
        if (!query || query.trim().length < 3) {
            console.log('üîç [TournamentParticipants] –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
            setParticipantSearchResults([]);
            return;
        }

        setIsSearchingParticipants(true);
        
        try {
            const result = await tournamentManagement.searchUsers(query.trim());
            
            if (result.success) {
                console.log('üîç [TournamentParticipants] –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω—ã–π, –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', result.data?.length || 0);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                const participantUserIds = new Set(
                    (getParticipantsList() || [])
                        .map(p => Number(p.user_id))
                        .filter(Boolean)
                );
                const teamMemberUserIds = new Set(
                    (tournament?.teams || [])
                        .flatMap(team => (team.members || []))
                        .map(m => Number(m.user_id))
                        .filter(Boolean)
                );
                const existingUserIds = new Set([...participantUserIds, ...teamMemberUserIds]);
                const filteredResults = (result.data || []).filter(u => !existingUserIds.has(Number(u.id)));
                
                console.log('üîç [TournamentParticipants] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filteredResults.length);
                setParticipantSearchResults(filteredResults);
            } else {
                console.error('üîç [TournamentParticipants] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', result.error);
                setParticipantSearchResults([]);
                setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('‚ùå [TournamentParticipants] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
            setParticipantSearchResults([]);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            setTimeout(() => setMessage(''), 3000);
        } finally {
            setIsSearchingParticipants(false);
        }
    }, [tournamentManagement, getParticipantsList, tournament]);

    // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const inviteParticipant = useCallback(async (userId, userName) => {
        try {
            setIsSearchingParticipants(true);
            console.log('üìß [TournamentParticipants] –ü—Ä–∏–≥–ª–∞—à–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞:', { userId, userName });
            const result = await tournamentManagement.inviteParticipant(userId, userName);
            
            if (result.success) {
                setMessage(`‚úÖ ${userName} –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä`);
                setParticipantSearchModal(false);
                setParticipantSearchQuery('');
                setParticipantSearchResults([]);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                if (onTournamentUpdate) {
                    await onTournamentUpdate();
                }
            } else {
                setMessage(`‚ùå ${result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞'}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        } finally {
            setIsSearchingParticipants(false);
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, onTournamentUpdate]);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∫–æ–º–∞–Ω–¥—ã
    const addUnregisteredParticipant = useCallback(async () => {
        const isTeamTournament = tournament?.participant_type === 'team';
        const entityName = isTeamTournament ? '–∫–æ–º–∞–Ω–¥—É' : '—É—á–∞—Å—Ç–Ω–∏–∫–∞';
        
        if (!newParticipantData.display_name.trim()) {
            setMessage(`‚ùå –£–∫–∞–∂–∏—Ç–µ ${isTeamTournament ? '–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã' : '–∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞'}`);
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        console.log('üîç [TournamentParticipants] addUnregisteredParticipant –≤—ã–∑–≤–∞–Ω:', {
            tournament: tournament?.participant_type,
            isTeamTournament,
            data: newParticipantData
        });

        try {
            if (isTeamTournament) {
                // –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API
                console.log('üéØ [TournamentParticipants] –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ /add-team');
                
                const token = localStorage.getItem('token');
                
                // –°–æ–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
                const players = showPlayersList 
                    ? teamPlayers.map(p => p.nickname.trim()).filter(n => n.length > 0)
                    : [];
                
                const payload = {
                    teamName: newParticipantData.display_name.trim(),
                    players
                };
                
                console.log('üì° [TournamentParticipants] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É:', payload);
                
                const response = await fetch(`/api/tournaments/${tournament.id}/add-team`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(payload)
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    setMessage(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ "${newParticipantData.display_name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç—É—Ä–Ω–∏—Ä`);
                    setNewParticipantModal(false);
                    setNewParticipantData({
                        display_name: '',
                        email: '',
                        faceit_elo: '',
                        cs2_premier_rank: ''
                    });
                    setShowPlayersList(false);
                    setTeamPlayers([{ nickname: '' }]);
                    
                    if (onTournamentUpdate) {
                        await onTournamentUpdate();
                    }
                } else {
                    setMessage(`‚ùå ${data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã'}`);
                }
            } else {
                // –î–ª—è solo —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
                console.log('üéØ [TournamentParticipants] –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ /add-participant');
                
                const result = await tournamentManagement.addUnregisteredParticipant(newParticipantData);
                
                if (result.success) {
                    setMessage(`‚úÖ ${newParticipantData.display_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä`);
                    setNewParticipantModal(false);
                    setNewParticipantData({
                        display_name: '',
                        email: '',
                        faceit_elo: '',
                        cs2_premier_rank: ''
                    });
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                    if (onTournamentUpdate) {
                        await onTournamentUpdate();
                    }
                } else {
                    setMessage(`‚ùå ${result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞'}`);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
            setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ${entityName}`);
        } finally {
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, newParticipantData, onTournamentUpdate, tournament]);

    // –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const removeParticipant = useCallback(async (participantId, participantName) => {
        const confirmed = window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${participantName} –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞?`);
        if (!confirmed) return;

        try {
            console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞:', participantId, participantName);
            const result = await tournamentManagement.removeParticipant(participantId);
            
            if (result.success) {
                setMessage(`‚úÖ ${participantName} —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞`);
                
                // üöÄ –ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø - —É–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                // –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å parent –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
                if (onTournamentUpdate) {
                    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–¥–∞–ª–µ–Ω–Ω–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
                    const updateInfo = {
                        action: 'remove_participant',
                        participantId: participantId,
                        participantName: participantName
                    };
                    
                    console.log('üöÄ –£–≤–µ–¥–æ–º–ª—è–µ–º parent –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                    await onTournamentUpdate(updateInfo);
                }
            } else {
                setMessage(`‚ùå ${result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞'}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        } finally {
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, onTournamentUpdate]);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—á–∞—Å—Ç–∏—è
    const getUserParticipationStatus = useCallback((searchUser) => {
        const participants = getParticipantsList();
        const isParticipant = participants.some(p => 
            (p.user_id && p.user_id === searchUser.id) || 
            (p.id && p.id === searchUser.id)
        );
        
        return isParticipant ? 'participant' : 'available';
    }, [getParticipantsList]);

    // üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const shouldShowParticipantsList = useCallback(() => {
        if (!tournament) return false;
        // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ª—é–±—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, –≥–¥–µ –æ–Ω –ø—Ä–∏–º–µ–Ω–∏–º
        return true;
    }, [tournament]);

    const statusNormalized = (tournament?.status || '').toString().trim().toLowerCase();
    const isActive = statusNormalized === 'active';
    const isFullMix = tournament?.format === 'mix' && (tournament?.mix_type || '').toLowerCase() === 'full';

    return (
        <div className="tournament-participants">
            {message && (
                <div className={`message ${message.includes('‚ùå') ? 'error' : 'success'}`}>
                    {message}
                </div>
            )}

            {/* –î–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è MIX (classic –∏ full): —Å–ª–µ–≤–∞ ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫–∏, —Å–ø—Ä–∞–≤–∞ ‚Äî TeamGenerator */}
            {tournament?.format === 'mix' && (
                <div style={{ display: 'grid', gridTemplateColumns: '1fr 420px', gap: 16 }}>
                    <div>
                        <SkeletonTheme baseColor="#2a2a2a" highlightColor="#3a3a3a">
                        <>
                            {/* –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–ª–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤ */}
                            {tournament?.participant_type === 'solo' && (
                                <div className="participants-list-participants">
                                    {(isLoadingInitial ? [...Array(skeletonRows)] : participantsList).map((participant, index) => (
                                        <div key={participant?.id || index} className="participant-card-participants">
                                            <div className="participant-info-participants">
                                                {isLoadingInitial ? (
                                                    <>
                                                        <div className="skeleton-avatar" style={{ width: 32, height: 32, borderRadius: '50%', background: '#1a1a1a' }} />
                                                        <div className="participant-details-participants" style={{ marginLeft: 10 }}>
                                                            <span className="participant-name-participants"><Skeleton width={160} height={16} /></span>
                                                            <div className="participant-stats-participants"><Skeleton width={120} height={12} /></div>
                                                        </div>
                                                    </>
                                                ) : (
                                                    <>
                                                        {participant.avatar_url && (
                                                            <img 
                                                                src={participant.avatar_url}
                                                                alt={participant.username || participant.name}
                                                                className={`participant-avatar-participants ${getAvatarCategoryClass(participant.avatar_url)}`}
                                                            />
                                                        )}
                                                        <div className="participant-details-participants">
                                                            <span className="participant-name-participants">
                                                                {participant.user_id ? (
                                                                    <a href={`/user/${participant.user_id}`} className="member-link-participants">
                                                                        {participant.username || participant.name || participant.display_name}
                                                                    </a>
                                                                ) : (
                                                                    participant.username || participant.name || participant.display_name
                                                                )}
                                                            </span>
                                                            <div className="participant-stats-participants">
                                                                {participant.faceit_elo && (
                                                                    <span className="stat">FACEIT: {participant.faceit_elo}</span>
                                                                )}
                                                                {participant.cs2_premier_rank && (
                                                                    <span className="stat">CS2: {participant.cs2_premier_rank}</span>
                                                                )}
                                                            </div>
                                                        </div>
                                                    </>
                                                )}
                                            </div>
                                            {isActive && isAdminOrCreator && (
                                                <button 
                                                    className="remove-participant-btn-participants"
                                                    onClick={() => !isLoadingInitial && removeParticipant(
                                                        participant.id, 
                                                        participant.username || participant.name || participant.display_name
                                                    )}
                                                    title="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                                                >
                                                    üóëÔ∏è
                                                </button>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            )}
                        </>
                        </SkeletonTheme>
                    </div>
                    {/* TeamGenerator —É–¥–∞–ª–µ–Ω –∏–∑ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞, —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –≤—ã—à–µ –≤ TournamentDetails */}
                </div>
            )}

            {/* –ü—Ä–µ–∂–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –ù–ï-MIX */}
            {tournament?.format !== 'mix' && shouldShowParticipantsList() && (
                <SkeletonTheme baseColor="#2a2a2a" highlightColor="#3a3a3a">
                <>
                    {/* MIX (classic): —Ç–æ–ª—å–∫–æ —Å–æ–ª–æ‚Äë—Å–ø–∏—Å–æ–∫ */}
                    {tournament?.format === 'mix' && (
                        <div className="participants-list-participants">
                            {(isLoadingInitial ? [...Array(skeletonRows)] : participantsList).map((participant, index) => (
                                <div key={participant?.id || index} className="participant-card-participants">
                                    <div className="participant-info-participants">
                                        {isLoadingInitial ? (
                                            <>
                                                <div className="skeleton-avatar" style={{ width: 32, height: 32, borderRadius: '50%', background: '#1a1a1a' }} />
                                                <div className="participant-details-participants" style={{ marginLeft: 10 }}>
                                                    <span className="participant-name-participants"><Skeleton width={160} height={16} /></span>
                                                    <div className="participant-stats-participants"><Skeleton width={120} height={12} /></div>
                                                </div>
                                            </>
                                        ) : (
                                            <>
                                                {participant.avatar_url && (
                                                    <img 
                                                        src={participant.avatar_url}
                                                        alt={participant.username || participant.name}
                                                        className={`participant-avatar-participants ${getAvatarCategoryClass(participant.avatar_url)}`}
                                                    />
                                                )}
                                                <div className="participant-details-participants">
                                                    <span className="participant-name-participants">
                                                        {participant.user_id ? (
                                                            <a href={`/user/${participant.user_id}`} className="member-link-participants">
                                                                {participant.username || participant.name || participant.display_name}
                                                            </a>
                                                        ) : (
                                                            participant.username || participant.name || participant.display_name
                                                        )}
                                                    </span>
                                                    <div className="participant-stats-participants">
                                                        {participant.faceit_elo && (
                                                            <span className="stat">FACEIT: {participant.faceit_elo}</span>
                                                        )}
                                                        {participant.cs2_premier_rank && (
                                                            <span className="stat">CS2: {participant.cs2_premier_rank}</span>
                                                        )}
                                                    </div>
                                                </div>
                                            </>
                                        )}
                                    </div>
                                    {isActive && isAdminOrCreator && (
                                        <button 
                                            className="remove-participant-btn-participants"
                                            onClick={() => !isLoadingInitial && removeParticipant(
                                                participant.id, 
                                                participant.username || participant.name || participant.display_name
                                            )}
                                            title="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                                        >
                                            üóëÔ∏è
                                        </button>
                                    )}
                                </div>
                            ))}
                        </div>
                    )}

                    {/* –ù–ï-MIX: –ø—Ä–µ–∂–Ω—è—è –ª–æ–≥–∏–∫–∞ */}
                    {tournament?.format !== 'mix' && tournament?.participant_type === 'team' && (
                        <div className="teams-list-participants">
                            {(isLoadingInitial ? [...Array(skeletonRows)] : tournament.teams)?.map((team, index) => (
                                <div key={team?.id || index} className="team-card-participants">
                                    <div className="team-header-participants">
                                        <div className="team-info-participants">
                                            <h4 className="team-name-participants">
                                                {isLoadingInitial ? (
                                                    <Skeleton width={160} height={18} />
                                                ) : team.id ? (
                                                    <a href={`/teams/${team.id}`} className="team-name-link-participants">{team.name}</a>
                                                ) : (
                                                    team.name
                                                )}
                                            </h4>
                                            <span className="team-members-count-participants">
                                                {isLoadingInitial ? <Skeleton width={100} height={14} /> : `${team.members?.length || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`}
                                            </span>
                                        </div>
                                        {isAdminOrCreator && (
                                            <div className="team-actions-participants">
                                                <button 
                                                    className="btn btn-secondary"
                                                    onClick={() => {
                                                        if (!isLoadingInitial) {
                                                            setSelectedTeam(team);
                                                            setTeamEditModal(true);
                                                        }
                                                    }}
                                                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã"
                                                >
                                                    ‚úèÔ∏è
                                                </button>
                                                <button 
                                                    className="btn btn-secondary"
                                                    onClick={() => !isLoadingInitial && removeParticipant(team.id, team.name)}
                                                    title="–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
                                                >
                                                    üóëÔ∏è
                                                </button>
                                            </div>
                                        )}
                                    </div>
                                    <div className="team-members-participants">
                                        {(isLoadingInitial ? [...Array(3)] : team.members)?.map((member, memberIndex) => (
                                            <div key={member?.id || memberIndex} className="team-member-participants">
                                                <div className="member-info-participants">
                                                    {isLoadingInitial ? (
                                                        <>
                                                            <div className="skeleton-avatar" style={{ width: 24, height: 24, borderRadius: '50%', background: '#1a1a1a' }} />
                                                            <span className="member-name-participants" style={{ marginLeft: 10 }}>
                                                                <Skeleton width={140} height={14} />
                                                            </span>
                                                        </>
                                                    ) : (
                                                        <>
                                                            <img 
                                                                src={member.avatar_url || '/uploads/avatars/preloaded/circle-user.svg'} 
                                                                alt={member.display_name || member.name || member.username}
                                                                className={`member-avatar-participants ${getAvatarCategoryClass(member.avatar_url)}`}
                                                                onError={(e) => { e.currentTarget.onerror = null; e.currentTarget.src = '/uploads/avatars/preloaded/circle-user.svg'; }}
                                                            />
                                                            <span className="member-name-participants">
                                                                {member.user_id ? (
                                                                    <a href={`/user/${member.user_id}`} className="member-link-participants">
                                                                        {member.display_name || member.name || member.username}
                                                                    </a>
                                                                ) : (
                                                                    member.display_name || member.name || member.username
                                                                )}
                                                                {member.is_captain && (
                                                                    <span className="captain-icon-participants" title="–ö–∞–ø–∏—Ç–∞–Ω">
                                                                        <FontAwesomeIcon icon={byPrefixAndName.fas['crown']} />
                                                                    </span>
                                                                )}
                                                            </span>
                                                        </>
                                                    )}
                                                </div>
                                                <div className="member-stats-participants">
                                                    {isLoadingInitial ? (
                                                        <Skeleton width={120} height={12} />
                                                    ) : (
                                                        <>
                                                            {member.faceit_elo && (
                                                                <span className="stat">FACEIT: {member.faceit_elo}</span>
                                                            )}
                                                            {member.cs2_premier_rank && (
                                                                <span className="stat">CS2: {member.cs2_premier_rank}</span>
                                                            )}
                                                        </>
                                                    )}
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}

                    {tournament?.format !== 'mix' && tournament?.participant_type === 'solo' && (
                        <div className="participants-list-participants">
                            {(isLoadingInitial ? [...Array(skeletonRows)] : participantsList).map((participant, index) => (
                                <div key={participant?.id || index} className="participant-card-participants">
                                    <div className="participant-info-participants">
                                        {isLoadingInitial ? (
                                            <>
                                                <div className="skeleton-avatar" style={{ width: 32, height: 32, borderRadius: '50%', background: '#1a1a1a' }} />
                                                <div className="participant-details-participants" style={{ marginLeft: 10 }}>
                                                    <span className="participant-name-participants"><Skeleton width={160} height={16} /></span>
                                                    <div className="participant-stats-participants"><Skeleton width={120} height={12} /></div>
                                                </div>
                                            </>
                                        ) : (
                                            <>
                                                {participant.avatar_url && (
                                                    <img 
                                                        src={participant.avatar_url}
                                                        alt={participant.username || participant.name}
                                                        className={`participant-avatar-participants ${getAvatarCategoryClass(participant.avatar_url)}`}
                                                    />
                                                )}
                                                <div className="participant-details-participants">
                                                    <span className="participant-name-participants">
                                                        {participant.user_id ? (
                                                            <a href={`/user/${participant.user_id}`} className="member-link-participants">
                                                                {participant.username || participant.name || participant.display_name}
                                                            </a>
                                                        ) : (
                                                            participant.username || participant.name || participant.display_name
                                                        )}
                                                    </span>
                                                    <div className="participant-stats-participants">
                                                        {participant.faceit_elo && (
                                                            <span className="stat">FACEIT: {participant.faceit_elo}</span>
                                                        )}
                                                        {participant.cs2_premier_rank && (
                                                            <span className="stat">CS2: {participant.cs2_premier_rank}</span>
                                                        )}
                                                    </div>
                                                </div>
                                            </>
                                        )}
                                    </div>
                                    {isActive && isAdminOrCreator && (
                                        <button 
                                            className="remove-participant-btn-participants"
                                            onClick={() => !isLoadingInitial && removeParticipant(
                                                participant.id, 
                                                participant.username || participant.name || participant.display_name
                                            )}
                                            title="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                                        >
                                            üóëÔ∏è
                                        </button>
                                    )}
                                </div>
                            ))}
                        </div>
                    )}
                </>
                </SkeletonTheme>
            )}

            {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ‚Äî —Å–∫—Ä—ã—Ç–∞ –µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –∏–¥—ë—Ç –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω */}
            {isActive && isAdminOrCreator && (
                <div className="participants-admin-panel">
                    <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏</h4>
                    <div className="admin-actions">
                        <button 
                            className="btn btn-secondary"
                            onClick={() => setParticipantSearchModal(true)}
                        >
                            –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        </button>
                        <button 
                            className="btn btn-secondary"
                            onClick={() => setNewParticipantModal(true)}
                        >
                            –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
                        </button>
                    </div>
                </div>
            )}

            {/* üîó –ö–ù–û–ü–ö–ê –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø –î–†–£–ó–ï–ô - —Å–∫—Ä—ã—Ç–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ */}
            {tournament?.status === 'active' && tournament?.access_type !== 'closed' && !tournament?.is_series_final && (
                <div className="referral-invite-panel">
                    <h4>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π</h4>
                    <div className="referral-actions">
                        <button 
                            className="btn btn-secondary"
                            onClick={handleReferralInviteClick}
                            title="–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π"
                        >
                            –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π ‚Äî –¥–µ–ª–∏—Ç–µ –±–æ–Ω—É—Å—ã
                        </button>
                        <p className="referral-description">
                            {user 
                                ? '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞!'
                                : '–í–æ–π–¥–∏—Ç–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π!'}
                        </p>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
            {participantSearchModal && (
                <ParticipantSearchModal
                    isOpen={participantSearchModal}
                    onClose={() => {
                        setParticipantSearchModal(false);
                        setParticipantSearchQuery('');
                        setParticipantSearchResults([]);
                    }}
                    searchQuery={participantSearchQuery}
                    setSearchQuery={setParticipantSearchQuery}
                    onSearch={searchParticipants}
                    searchResults={participantSearchResults}
                    isSearching={isSearchingParticipants}
                    onInvite={inviteParticipant}
                    existingParticipants={getParticipantsList()}
                    getUserStatus={getUserParticipationStatus}
                    mode="participants"
                />
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ */}
            {newParticipantModal && (
                <div className="modal-overlay" onClick={() => setNewParticipantModal(false)}>
                    <div className="modal-content" onClick={e => e.stopPropagation()}>
                        <div className="modal-header">
                            <h3>‚ûï –î–æ–±–∞–≤–∏—Ç—å {tournament?.participant_type === 'team' ? '–Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É' : '–Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞'}</h3>
                            <button 
                                className="modal-close"
                                onClick={() => {
                                    setNewParticipantModal(false);
                                    setShowPlayersList(false);
                                    setTeamPlayers([{ nickname: '' }]);
                                }}
                            >
                                ‚úï
                            </button>
                        </div>
                        <div className="modal-body">
                            <div className="form-group">
                                <label htmlFor="display_name">{tournament?.participant_type === 'team' ? '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã' : '–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞'} *</label>
                                <input
                                    type="text"
                                    id="display_name"
                                    value={newParticipantData.display_name}
                                    onChange={(e) => setNewParticipantData(prev => ({
                                        ...prev,
                                        display_name: e.target.value
                                    }))}
                                    placeholder={tournament?.participant_type === 'team' ? '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã' : '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞'}
                                    required
                                />
                            </div>
                            
                            {/* –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ */}
                            {tournament?.participant_type === 'team' && (
                                <div className="form-group">
                                    <label>
                                        <input
                                            type="checkbox"
                                            checked={showPlayersList}
                                            onChange={(e) => {
                                                setShowPlayersList(e.target.checked);
                                                if (!e.target.checked) {
                                                    setTeamPlayers([{ nickname: '' }]);
                                                }
                                            }}
                                        />
                                        <span style={{ marginLeft: '8px' }}>–£–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã?</span>
                                    </label>

                                    {showPlayersList && (
                                        <div style={{ marginTop: '12px' }}>
                                            {teamPlayers.map((player, index) => (
                                                <div key={index} style={{ display: 'flex', gap: '8px', marginBottom: '8px' }}>
                                                    <input
                                                        type="text"
                                                        value={player.nickname}
                                                        onChange={(e) => {
                                                            const updated = [...teamPlayers];
                                                            updated[index] = { nickname: e.target.value };
                                                            setTeamPlayers(updated);
                                                        }}
                                                        placeholder={`–ù–∏–∫ –∏–≥—Ä–æ–∫–∞ ${index + 1}`}
                                                        style={{ flex: 1 }}
                                                    />
                                                    {teamPlayers.length > 1 && (
                                                        <button
                                                            type="button"
                                                            onClick={() => setTeamPlayers(teamPlayers.filter((_, i) => i !== index))}
                                                            style={{
                                                                padding: '8px 12px',
                                                                background: '#ff0000',
                                                                color: '#fff',
                                                                border: 'none',
                                                                borderRadius: '4px',
                                                                cursor: 'pointer'
                                                            }}
                                                        >
                                                            ‚úï
                                                        </button>
                                                    )}
                                                </div>
                                            ))}
                                            <button
                                                type="button"
                                                onClick={() => setTeamPlayers([...teamPlayers, { nickname: '' }])}
                                                style={{
                                                    padding: '8px 12px',
                                                    background: '#111',
                                                    color: '#fff',
                                                    border: '1px solid #ff0000',
                                                    borderRadius: '4px',
                                                    cursor: 'pointer',
                                                    marginTop: '4px'
                                                }}
                                            >
                                                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞
                                            </button>
                                        </div>
                                    )}
                                </div>
                            )}
                            <div className="form-group">
                                <label htmlFor="email">Email</label>
                                <input
                                    type="email"
                                    id="email"
                                    value={newParticipantData.email}
                                    onChange={(e) => setNewParticipantData(prev => ({
                                        ...prev,
                                        email: e.target.value
                                    }))}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                                />
                            </div>
                            <div className="form-group">
                                <label htmlFor="faceit_elo">FACEIT ELO</label>
                                <input
                                    type="number"
                                    id="faceit_elo"
                                    value={newParticipantData.faceit_elo}
                                    onChange={(e) => setNewParticipantData(prev => ({
                                        ...prev,
                                        faceit_elo: e.target.value
                                    }))}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ FACEIT ELO"
                                />
                            </div>
                            <div className="form-group">
                                <label htmlFor="cs2_premier_rank">CS2 Premier Rank</label>
                                <input
                                    type="text"
                                    id="cs2_premier_rank"
                                    value={newParticipantData.cs2_premier_rank}
                                    onChange={(e) => setNewParticipantData(prev => ({
                                        ...prev,
                                        cs2_premier_rank: e.target.value
                                    }))}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ CS2 Premier Rank"
                                />
                            </div>
                        </div>
                        <div className="modal-footer">
                            <button 
                                className="btn-secondary"
                                onClick={() => setNewParticipantModal(false)}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button 
                                className="btn-primary"
                                onClick={addUnregisteredParticipant}
                                disabled={!newParticipantData.display_name.trim()}
                            >
                                –î–æ–±–∞–≤–∏—Ç—å {tournament?.participant_type === 'team' ? '–∫–æ–º–∞–Ω–¥—É' : '—É—á–∞—Å—Ç–Ω–∏–∫–∞'}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π */}
            {referralModal && (
                <ReferralInviteModal
                    isOpen={referralModal}
                    onClose={() => setReferralModal(false)}
                    tournament={tournament}
                    user={user}
                />
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã */}
            {teamEditModal && selectedTeam && (
                <TeamEditModal
                    isOpen={teamEditModal}
                    onClose={() => {
                        setTeamEditModal(false);
                        setSelectedTeam(null);
                    }}
                    team={selectedTeam}
                    tournament={tournament}
                    onTeamUpdated={onTournamentUpdate}
                />
            )}

            {/* –ü–∞–Ω–µ–ª—å –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è */}
            {tournament?.waiting_list_enabled && (
                <WaitingListPanel
                    tournament={tournament}
                    user={user}
                    isAdminOrCreator={isAdminOrCreator}
                    onUpdate={onTournamentUpdate}
                />
            )}
        </div>
    );
};

export default TournamentParticipants; 