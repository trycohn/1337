import React, { useState, useCallback, useEffect } from 'react';
import TeamGenerator from '../TeamGenerator';
import ParticipantSearchModal from './modals/ParticipantSearchModal';
import useTournamentManagement from '../../hooks/tournament/useTournamentManagement';
import './TournamentParticipants.css';

const TournamentParticipants = ({ 
    tournament, 
    user, 
    isAdminOrCreator, 
    originalParticipants, 
    onTeamsGenerated,
    onTournamentUpdate
}) => {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    const [participantSearchModal, setParticipantSearchModal] = useState(false);
    const [participantSearchQuery, setParticipantSearchQuery] = useState('');
    const [participantSearchResults, setParticipantSearchResults] = useState([]);
    const [isSearchingParticipants, setIsSearchingParticipants] = useState(false);
    const [newParticipantModal, setNewParticipantModal] = useState(false);
    const [newParticipantData, setNewParticipantData] = useState({
        display_name: '',
        email: '',
        faceit_elo: '',
        cs2_premier_rank: ''
    });
    const [message, setMessage] = useState('');

    // –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–º
    const tournamentManagement = useTournamentManagement(tournament?.id);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    const getParticipantsList = useCallback(() => {
        if (tournament?.format === 'mix' && tournament?.status === 'in_progress') {
            // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            return originalParticipants || [];
        }
        return tournament?.participants || [];
    }, [tournament, originalParticipants]);

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const searchParticipants = useCallback(async (query) => {
        if (!query || query.trim().length < 3) {
            setParticipantSearchResults([]);
            return;
        }

        setIsSearchingParticipants(true);
        try {
            const result = await tournamentManagement.searchUsers(query.trim());
            if (result.success) {
                // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                const existingParticipantIds = getParticipantsList().map(p => p.user_id || p.id);
                const filteredResults = (result.data || []).filter(user => 
                    !existingParticipantIds.includes(user.id)
                );
                setParticipantSearchResults(filteredResults);
            } else {
                setParticipantSearchResults([]);
                setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${result.error}`);
                setTimeout(() => setMessage(''), 3000);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
            setParticipantSearchResults([]);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            setTimeout(() => setMessage(''), 3000);
        } finally {
            setIsSearchingParticipants(false);
        }
    }, [tournamentManagement, getParticipantsList]);

    // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const inviteParticipant = useCallback(async (userId, userName) => {
        try {
            setIsSearchingParticipants(true);
            const result = await tournamentManagement.inviteParticipant(userId);
            
            if (result.success) {
                setMessage(`‚úÖ ${userName} –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä`);
                setParticipantSearchModal(false);
                setParticipantSearchQuery('');
                setParticipantSearchResults([]);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                if (onTournamentUpdate) {
                    await onTournamentUpdate();
                }
            } else {
                setMessage(`‚ùå ${result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞'}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        } finally {
            setIsSearchingParticipants(false);
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, onTournamentUpdate]);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const addUnregisteredParticipant = useCallback(async () => {
        if (!newParticipantData.display_name.trim()) {
            setMessage('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            setTimeout(() => setMessage(''), 3000);
            return;
        }

        try {
            const result = await tournamentManagement.addUnregisteredParticipant(newParticipantData);
            
            if (result.success) {
                setMessage(`‚úÖ ${newParticipantData.display_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä`);
                setNewParticipantModal(false);
                setNewParticipantData({
                    display_name: '',
                    email: '',
                    faceit_elo: '',
                    cs2_premier_rank: ''
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                if (onTournamentUpdate) {
                    await onTournamentUpdate();
                }
            } else {
                setMessage(`‚ùå ${result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞'}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        } finally {
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, newParticipantData, onTournamentUpdate]);

    // –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const removeParticipant = useCallback(async (participantId, participantName) => {
        const confirmed = window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${participantName} –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞?`);
        if (!confirmed) return;

        try {
            const result = await tournamentManagement.removeParticipant(participantId);
            
            if (result.success) {
                setMessage(`‚úÖ ${participantName} —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
                if (onTournamentUpdate) {
                    await onTournamentUpdate();
                }
            } else {
                setMessage(`‚ùå ${result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞'}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
            setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        } finally {
            setTimeout(() => setMessage(''), 5000);
        }
    }, [tournamentManagement, onTournamentUpdate]);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—á–∞—Å—Ç–∏—è
    const getUserParticipationStatus = useCallback((searchUser) => {
        const participants = getParticipantsList();
        const isParticipant = participants.some(p => 
            (p.user_id && p.user_id === searchUser.id) || 
            (p.id && p.id === searchUser.id)
        );
        
        return isParticipant ? 'participant' : 'available';
    }, [getParticipantsList]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å –¥–µ–±–∞—É–Ω—Å–æ–º
    useEffect(() => {
        const delayedSearch = setTimeout(() => {
            if (participantSearchQuery.trim().length >= 3) {
                searchParticipants(participantSearchQuery);
            } else {
                setParticipantSearchResults([]);
            }
        }, 300);

        return () => clearTimeout(delayedSearch);
    }, [participantSearchQuery, searchParticipants]);

    // üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const shouldShowParticipantsList = useCallback(() => {
        if (!tournament) return false;
        
        // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö "–∏–¥–µ—Ç" –∏ "–∑–∞–≤–µ—Ä—à–µ–Ω"
        if (tournament.format === 'mix' && 
            (tournament.status === 'in_progress' || tournament.status === 'completed')) {
            return false;
        }
        
        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        return true;
    }, [tournament]);

    const participantsList = getParticipantsList();

    return (
        <div className="tournament-participants">
            {message && (
                <div className={`message ${message.includes('‚ùå') ? 'error' : 'success'}`}>
                    {message}
                </div>
            )}

            <div className="participants-header">
                <h3>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞</h3>
                <div className="participants-count">
                    –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participantsList.length}
                    {tournament?.max_participants && ` / ${tournament.max_participants}`}
                </div>
            </div>

            {/* üÜï –£—Å–ª–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
            {shouldShowParticipantsList() && (
                <>
                    {/* –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥ */}
                    {tournament?.participant_type === 'team' && (
                        <div className="teams-list">
                            {tournament.teams?.map((team, index) => (
                                <div key={team.id || index} className="team-card">
                                    <div className="team-header">
                                        <div className="team-info">
                                            <h4 className="team-name">{team.name}</h4>
                                            <span className="team-members-count">
                                                {team.members?.length || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                            </span>
                                        </div>
                                        {isAdminOrCreator && (
                                            <button 
                                                className="remove-team-btn"
                                                onClick={() => removeParticipant(team.id, team.name)}
                                                title="–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
                                            >
                                                üóëÔ∏è
                                            </button>
                                        )}
                                    </div>
                                    <div className="team-members">
                                        {team.members?.map((member, memberIndex) => (
                                            <div key={member.id || memberIndex} className="team-member">
                                                <div className="member-info">
                                                    {member.avatar_url && (
                                                        <img 
                                                            src={member.avatar_url} 
                                                            alt={member.username}
                                                            className="member-avatar"
                                                        />
                                                    )}
                                                    <span className="member-name">{member.username}</span>
                                                </div>
                                                <div className="member-stats">
                                                    {member.faceit_elo && (
                                                        <span className="stat">FACEIT: {member.faceit_elo}</span>
                                                    )}
                                                    {member.cs2_premier_rank && (
                                                        <span className="stat">CS2: {member.cs2_premier_rank}</span>
                                                    )}
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}

                    {/* –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–ª–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤ */}
                    {tournament?.participant_type === 'solo' && (
                        <div className="participants-list">
                            {participantsList.map((participant, index) => (
                                <div key={participant.id || index} className="participant-card">
                                    <div className="participant-info">
                                        {participant.avatar_url && (
                                            <img 
                                                src={participant.avatar_url} 
                                                alt={participant.username || participant.name}
                                                className="participant-avatar"
                                            />
                                        )}
                                        <div className="participant-details">
                                            <span className="participant-name">
                                                {participant.username || participant.name || participant.display_name}
                                            </span>
                                            <div className="participant-stats">
                                                {participant.faceit_elo && (
                                                    <span className="stat">FACEIT: {participant.faceit_elo}</span>
                                                )}
                                                {participant.cs2_premier_rank && (
                                                    <span className="stat">CS2: {participant.cs2_premier_rank}</span>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                    {isAdminOrCreator && (
                                        <button 
                                            className="remove-participant-btn"
                                            onClick={() => removeParticipant(
                                                participant.id, 
                                                participant.username || participant.name || participant.display_name
                                            )}
                                            title="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                                        >
                                            üóëÔ∏è
                                        </button>
                                    )}
                                </div>
                            ))}
                        </div>
                    )}
                </>
            )}

            {/* üÜï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞—Ö */}
            {!shouldShowParticipantsList() && tournament?.format === 'mix' && (
                <div className="participants-hidden-notice">
                    <div className="notice-content">
                        <h4>‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–∫—Ä—ã—Ç</h4>
                        <p>
                            {tournament.status === 'in_progress' && 
                                '–¢—É—Ä–Ω–∏—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ö–æ–º–∞–Ω–¥—ã —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°–µ—Ç–∫–∞".'}
                            {tournament.status === 'completed' && 
                                '–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö "–°–µ—Ç–∫–∞" –∏ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã".'}
                        </p>
                    </div>
                </div>
            )}

            {/* –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ */}
            {tournament?.format === 'mix' && tournament?.status !== 'in_progress' && (
                <div className="team-generator-section">
                    <h4>‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥</h4>
                    <TeamGenerator
                        tournament={tournament}
                        participants={participantsList}
                        onTeamsGenerated={onTeamsGenerated}
                        onTeamsUpdated={onTournamentUpdate}
                        onRemoveParticipant={removeParticipant}
                        isAdminOrCreator={isAdminOrCreator}
                    />
                </div>
            )}

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ */}
            {tournament?.format === 'mix' && tournament?.status === 'in_progress' && (
                <div className="teams-formed-notice">
                    <div className="notice-content">
                        <h4>‚úÖ –ö–æ–º–∞–Ω–¥—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã</h4>
                        <p>–¢—É—Ä–Ω–∏—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–∫–∞–∑–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.</p>
                    </div>
                </div>
            )}

            {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ */}
            {isAdminOrCreator && (
                <div className="participants-admin-panel">
                    <h4>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏</h4>
                    <div className="admin-actions">
                        <button 
                            className="invite-participant-btn"
                            onClick={() => setParticipantSearchModal(true)}
                        >
                            üë§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        </button>
                        <button 
                            className="add-unregistered-btn"
                            onClick={() => setNewParticipantModal(true)}
                        >
                            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
                        </button>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
            {participantSearchModal && (
                <ParticipantSearchModal
                    isOpen={participantSearchModal}
                    onClose={() => {
                        setParticipantSearchModal(false);
                        setParticipantSearchQuery('');
                        setParticipantSearchResults([]);
                    }}
                    searchQuery={participantSearchQuery}
                    onSearchQueryChange={setParticipantSearchQuery}
                    searchResults={participantSearchResults}
                    isSearching={isSearchingParticipants}
                    onInviteUser={inviteParticipant}
                    getUserStatus={getUserParticipationStatus}
                    mode="participants"
                />
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ */}
            {newParticipantModal && (
                <div className="modal-overlay" onClick={() => setNewParticipantModal(false)}>
                    <div className="modal-content" onClick={e => e.stopPropagation()}>
                        <div className="modal-header">
                            <h3>‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞</h3>
                            <button 
                                className="modal-close"
                                onClick={() => setNewParticipantModal(false)}
                            >
                                ‚úï
                            </button>
                        </div>
                        <div className="modal-body">
                            <div className="form-group">
                                <label htmlFor="display_name">–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ *</label>
                                <input
                                    type="text"
                                    id="display_name"
                                    value={newParticipantData.display_name}
                                    onChange={(e) => setNewParticipantData(prev => ({
                                        ...prev,
                                        display_name: e.target.value
                                    }))}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                                    required
                                />
                            </div>
                            <div className="form-group">
                                <label htmlFor="email">Email</label>
                                <input
                                    type="email"
                                    id="email"
                                    value={newParticipantData.email}
                                    onChange={(e) => setNewParticipantData(prev => ({
                                        ...prev,
                                        email: e.target.value
                                    }))}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                                />
                            </div>
                            <div className="form-group">
                                <label htmlFor="faceit_elo">FACEIT ELO</label>
                                <input
                                    type="number"
                                    id="faceit_elo"
                                    value={newParticipantData.faceit_elo}
                                    onChange={(e) => setNewParticipantData(prev => ({
                                        ...prev,
                                        faceit_elo: e.target.value
                                    }))}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ FACEIT ELO"
                                />
                            </div>
                            <div className="form-group">
                                <label htmlFor="cs2_premier_rank">CS2 Premier Rank</label>
                                <input
                                    type="text"
                                    id="cs2_premier_rank"
                                    value={newParticipantData.cs2_premier_rank}
                                    onChange={(e) => setNewParticipantData(prev => ({
                                        ...prev,
                                        cs2_premier_rank: e.target.value
                                    }))}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ CS2 Premier Rank"
                                />
                            </div>
                        </div>
                        <div className="modal-footer">
                            <button 
                                className="btn-secondary"
                                onClick={() => setNewParticipantModal(false)}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button 
                                className="btn-primary"
                                onClick={addUnregisteredParticipant}
                                disabled={!newParticipantData.display_name.trim()}
                            >
                                –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default TournamentParticipants; 