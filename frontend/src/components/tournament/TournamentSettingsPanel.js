/**
 * TournamentSettingsPanel v1.0.0 - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞
 * 
 * @version 1.0.0
 * @updated 2025-01-25
 * @author 1337 Community Development Team
 * @purpose –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π
 * @features –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, —Ñ–æ—Ä–º–∞—Ç–∞, —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞, –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞
 */

import React, { useState } from 'react';
import './TournamentSettingsPanel.css';

const TournamentSettingsPanel = ({
    tournament,
    isLoading,
    isCreator,
    onUpdateSetting
}) => {
    const [editingField, setEditingField] = useState(null);
    const [newValues, setNewValues] = useState({});
    const [fieldLoading, setFieldLoading] = useState({});

    // üéÆ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    const availableGames = [
        'Counter-Strike 2',
        'CS2',
        'Dota 2',
        'Valorant',
        'League of Legends',
        'Apex Legends',
        'Rocket League',
        'Overwatch 2'
    ];

    // üèÜ –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    const tournamentFormats = [
        { value: 'single_elimination', label: 'Single Elimination' },
        { value: 'double_elimination', label: 'Double Elimination' },
        { value: 'mix', label: '–ú–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä' }
    ];

    // üéØ –¢–∏–ø—ã —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    const bracketTypes = [
        { value: 'single_elimination', label: 'Single Elimination' },
        { value: 'double_elimination', label: 'Double Elimination' }
    ];

    // üéØ –¢–∏–ø—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
    const ratingTypes = [
        { value: 'faceit', label: 'FACEIT ELO' },
        { value: 'premier', label: 'CS2 Premier' },
        { value: 'mixed', label: '–°–ª—É—á–∞–π–Ω—ã–π –º–∏–∫—Å' }
    ];

    // üÜï –†–∞–∑–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
    const teamSizes = [
        { value: 2, label: '2 –∏–≥—Ä–æ–∫–∞' },
        { value: 5, label: '5 –∏–≥—Ä–æ–∫–æ–≤' }
    ];

    const handleEdit = (field) => {
        setEditingField(field);
        setNewValues({
            ...newValues,
            [field]: tournament[field] || ''
        });
    };

    const handleCancel = () => {
        setEditingField(null);
        setNewValues({});
    };

    const handleSave = async (field) => {
        const value = newValues[field];
        
        if (!value || value.trim() === '') {
            alert('–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
            return;
        }

        setFieldLoading({ ...fieldLoading, [field]: true });

        try {
            await onUpdateSetting(field, value);
            setEditingField(null);
            setNewValues({});
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
            alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        } finally {
            setFieldLoading({ ...fieldLoading, [field]: false });
        }
    };

    const handleDateChange = (value) => {
        setNewValues({
            ...newValues,
            start_date: value
        });
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è input type="datetime-local"
    const formatDateForInput = (dateString) => {
        if (!dateString) return '';
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${year}-${month}-${day}T${hours}:${minutes}`;
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const canEdit = tournament?.status === 'active' && !isLoading;
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)
    const canEditBracketType = canEdit && isCreator;

    // üéÆ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä—ã CS2
    const isCS2Game = (gameName) => {
        if (!gameName) return false;
        const normalizedGame = gameName.toLowerCase().replace(/[^a-z0-9]/g, '');
        return normalizedGame === 'counterstrike2' || 
               normalizedGame === 'cs2' || 
               (gameName.toLowerCase().includes('counter') && gameName.toLowerCase().includes('strike') && gameName.includes('2'));
    };

    return (
        <div className="tournament-settings-panel">
            <div className="section-header">
                <h4>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞</h4>
                <div className="settings-info">
                    <span className="info-text">–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤</span>
                </div>
            </div>

            <div className="settings-grid">
                {/* üéÆ –î–ò–°–¶–ò–ü–õ–ò–ù–ê –¢–£–†–ù–ò–†–ê */}
                <div className="setting-item">
                    <div className="setting-label">
                        <span className="label-icon">üéÆ</span>
                        <span>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</span>
                    </div>
                    <div className="setting-content">
                        {editingField === 'game' ? (
                            <div className="edit-field">
                                <select
                                    value={newValues.game || tournament.game}
                                    onChange={(e) => setNewValues({ ...newValues, game: e.target.value })}
                                    className="setting-select"
                                    disabled={fieldLoading.game}
                                >
                                    {availableGames.map(game => (
                                        <option key={game} value={game}>{game}</option>
                                    ))}
                                </select>
                                <div className="edit-actions">
                                    <button 
                                        className="save-btn"
                                        onClick={() => handleSave('game')}
                                        disabled={fieldLoading.game}
                                    >
                                        {fieldLoading.game ? '‚è≥' : '‚úÖ'}
                                    </button>
                                    <button 
                                        className="cancel-btn"
                                        onClick={handleCancel}
                                        disabled={fieldLoading.game}
                                    >
                                        ‚ùå
                                    </button>
                                </div>
                            </div>
                        ) : (
                            <div className="display-field">
                                <span className="setting-value">{tournament.game}</span>
                                {canEdit && (
                                    <button 
                                        className="edit-btn"
                                        onClick={() => handleEdit('game')}
                                        title="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É"
                                    >
                                        ‚úèÔ∏è
                                    </button>
                                )}
                            </div>
                        )}
                    </div>
                </div>

                {/* üèÜ –§–û–†–ú–ê–¢ –¢–£–†–ù–ò–†–ê */}
                <div className="setting-item">
                    <div className="setting-label">
                        <span className="label-icon">üèÜ</span>
                        <span>–§–æ—Ä–º–∞—Ç</span>
                    </div>
                    <div className="setting-content">
                        {editingField === 'format' ? (
                            <div className="edit-field">
                                <select
                                    value={newValues.format || tournament.format}
                                    onChange={(e) => setNewValues({ ...newValues, format: e.target.value })}
                                    className="setting-select"
                                    disabled={fieldLoading.format}
                                >
                                    {tournamentFormats.map(format => (
                                        <option key={format.value} value={format.value}>
                                            {format.label}
                                        </option>
                                    ))}
                                </select>
                                <div className="edit-actions">
                                    <button 
                                        className="save-btn"
                                        onClick={() => handleSave('format')}
                                        disabled={fieldLoading.format}
                                    >
                                        {fieldLoading.format ? '‚è≥' : '‚úÖ'}
                                    </button>
                                    <button 
                                        className="cancel-btn"
                                        onClick={handleCancel}
                                        disabled={fieldLoading.format}
                                    >
                                        ‚ùå
                                    </button>
                                </div>
                            </div>
                        ) : (
                            <div className="display-field">
                                <span className="setting-value">
                                    {tournamentFormats.find(f => f.value === tournament.format)?.label || tournament.format}
                                </span>
                                {canEdit && (
                                    <button 
                                        className="edit-btn"
                                        onClick={() => handleEdit('format')}
                                        title="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç"
                                    >
                                        ‚úèÔ∏è
                                    </button>
                                )}
                            </div>
                        )}
                    </div>
                </div>

                {/* üéØ –¢–ò–ü –¢–£–†–ù–ò–†–ù–û–ô –°–ï–¢–ö–ò */}
                <div className="setting-item">
                    <div className="setting-label">
                        <span className="label-icon">üéØ</span>
                        <span>–¢–∏–ø —Å–µ—Ç–∫–∏</span>
                    </div>
                    <div className="setting-content">
                        {editingField === 'bracket_type' ? (
                            <div className="edit-field">
                                <select
                                    value={newValues.bracket_type || tournament.bracket_type || 'single_elimination'}
                                    onChange={(e) => setNewValues({ ...newValues, bracket_type: e.target.value })}
                                    className="setting-select"
                                    disabled={fieldLoading.bracket_type}
                                >
                                    {bracketTypes.map(type => (
                                        <option key={type.value} value={type.value}>
                                            {type.label}
                                        </option>
                                    ))}
                                </select>
                                <div className="edit-actions">
                                    <button 
                                        className="save-btn"
                                        onClick={() => handleSave('bracket_type')}
                                        disabled={fieldLoading.bracket_type}
                                    >
                                        {fieldLoading.bracket_type ? '‚è≥' : '‚úÖ'}
                                    </button>
                                    <button 
                                        className="cancel-btn"
                                        onClick={handleCancel}
                                        disabled={fieldLoading.bracket_type}
                                    >
                                        ‚ùå
                                    </button>
                                </div>
                            </div>
                        ) : (
                            <div className="display-field">
                                <span className="setting-value">
                                    {bracketTypes.find(t => t.value === tournament.bracket_type)?.label || 'Single Elimination'}
                                </span>
                                {canEditBracketType && (
                                    <button 
                                        className="edit-btn"
                                        onClick={() => handleEdit('bracket_type')}
                                        title="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Å–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"
                                    >
                                        ‚úèÔ∏è
                                    </button>
                                )}
                            </div>
                        )}
                    </div>
                </div>

                {/* üéØ –¢–ò–ü –†–ï–ô–¢–ò–ù–ì–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤) */}
                {tournament.format === 'mix' && (
                    <div className="setting-item">
                        <div className="setting-label">
                            <span className="label-icon">üéØ</span>
                            <span>–¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞</span>
                        </div>
                        <div className="setting-content">
                            {editingField === 'mix_rating_type' ? (
                                <div className="edit-field">
                                    <select
                                        value={newValues.mix_rating_type || tournament.mix_rating_type || 'faceit'}
                                        onChange={(e) => setNewValues({ ...newValues, mix_rating_type: e.target.value })}
                                        className="setting-select"
                                        disabled={fieldLoading.mix_rating_type}
                                    >
                                        {ratingTypes.map(type => (
                                            <option key={type.value} value={type.value}>
                                                {type.label}
                                            </option>
                                        ))}
                                    </select>
                                    <div className="edit-actions">
                                        <button 
                                            className="save-btn"
                                            onClick={() => handleSave('mix_rating_type')}
                                            disabled={fieldLoading.mix_rating_type}
                                        >
                                            {fieldLoading.mix_rating_type ? '‚è≥' : '‚úÖ'}
                                        </button>
                                        <button 
                                            className="cancel-btn"
                                            onClick={handleCancel}
                                            disabled={fieldLoading.mix_rating_type}
                                        >
                                            ‚ùå
                                        </button>
                                    </div>
                                </div>
                            ) : (
                                <div className="display-field">
                                    <span className="setting-value">
                                        {ratingTypes.find(t => t.value === tournament.mix_rating_type)?.label || 'FACEIT ELO'}
                                    </span>
                                    {canEdit && (
                                        <button 
                                            className="edit-btn"
                                            onClick={() => handleEdit('mix_rating_type')}
                                            title="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞"
                                        >
                                            ‚úèÔ∏è
                                        </button>
                                    )}
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* üÜï –†–ê–ó–ú–ï–† –ö–û–ú–ê–ù–î–´ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è) */}
                {tournament.format === 'mix' && isCreator && (
                    <div className="setting-item">
                        <div className="setting-label">
                            <span className="label-icon">üë•</span>
                            <span>–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã</span>
                        </div>
                        <div className="setting-content">
                            {editingField === 'team_size' ? (
                                <div className="edit-field">
                                    <select
                                        value={newValues.team_size || tournament.team_size || 5}
                                        onChange={(e) => setNewValues({ ...newValues, team_size: parseInt(e.target.value) })}
                                        className="setting-select"
                                        disabled={fieldLoading.team_size}
                                    >
                                        {teamSizes.map(size => (
                                            <option key={size.value} value={size.value}>
                                                {size.label}
                                            </option>
                                        ))}
                                    </select>
                                    <div className="edit-actions">
                                        <button 
                                            className="save-btn"
                                            onClick={() => handleSave('team_size')}
                                            disabled={fieldLoading.team_size}
                                        >
                                            {fieldLoading.team_size ? '‚è≥' : '‚úÖ'}
                                        </button>
                                        <button 
                                            className="cancel-btn"
                                            onClick={handleCancel}
                                            disabled={fieldLoading.team_size}
                                        >
                                            ‚ùå
                                        </button>
                                    </div>
                                </div>
                            ) : (
                                <div className="display-field">
                                    <span className="setting-value">
                                        {teamSizes.find(s => s.value === tournament.team_size)?.label || '5 –∏–≥—Ä–æ–∫–æ–≤'}
                                    </span>
                                    {canEdit && (
                                        <button 
                                            className="edit-btn"
                                            onClick={() => handleEdit('team_size')}
                                            title="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"
                                        >
                                            ‚úèÔ∏è
                                        </button>
                                    )}
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* üìÖ –î–ê–¢–ê –°–¢–ê–†–¢–ê */}
                <div className="setting-item">
                    <div className="setting-label">
                        <span className="label-icon">üìÖ</span>
                        <span>–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞</span>
                    </div>
                    <div className="setting-content">
                        {editingField === 'start_date' ? (
                            <div className="edit-field">
                                <input
                                    type="datetime-local"
                                    value={formatDateForInput(newValues.start_date || tournament.start_date)}
                                    onChange={(e) => handleDateChange(e.target.value)}
                                    className="setting-input"
                                    disabled={fieldLoading.start_date}
                                />
                                <div className="edit-actions">
                                    <button 
                                        className="save-btn"
                                        onClick={() => handleSave('start_date')}
                                        disabled={fieldLoading.start_date}
                                    >
                                        {fieldLoading.start_date ? '‚è≥' : '‚úÖ'}
                                    </button>
                                    <button 
                                        className="cancel-btn"
                                        onClick={handleCancel}
                                        disabled={fieldLoading.start_date}
                                    >
                                        ‚ùå
                                    </button>
                                </div>
                            </div>
                        ) : (
                            <div className="display-field">
                                <span className="setting-value">
                                    {tournament.start_date 
                                        ? new Date(tournament.start_date).toLocaleString('ru-RU')
                                        : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
                                    }
                                </span>
                                {canEdit && (
                                    <button 
                                        className="edit-btn"
                                        onClick={() => handleEdit('start_date')}
                                        title="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞"
                                    >
                                        ‚úèÔ∏è
                                    </button>
                                )}
                            </div>
                        )}
                    </div>
                </div>

                {/* üéÆ –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ë–ë–ò (—Ç–æ–ª—å–∫–æ –¥–ª—è CS2) */}
                {isCS2Game(tournament.game) && (
                    <div className="setting-item">
                        <div className="setting-label">
                            <span className="label-icon">üéÆ</span>
                            <span>–õ–æ–±–±–∏ –º–∞—Ç—á–∞</span>
                        </div>
                        <div className="setting-content">
                            {editingField === 'lobby_enabled' ? (
                                <div className="edit-field">
                                    <select
                                        value={newValues.lobby_enabled || tournament.lobby_enabled || false}
                                        onChange={(e) => setNewValues({ ...newValues, lobby_enabled: e.target.value === 'true' })}
                                        className="setting-select"
                                        disabled={fieldLoading.lobby_enabled}
                                    >
                                        <option value="false">–í—ã–∫–ª—é—á–µ–Ω–æ</option>
                                        <option value="true">–í–∫–ª—é—á–µ–Ω–æ</option>
                                    </select>
                                    <div className="edit-actions">
                                        <button 
                                            className="save-btn"
                                            onClick={() => handleSave('lobby_enabled')}
                                            disabled={fieldLoading.lobby_enabled}
                                        >
                                            {fieldLoading.lobby_enabled ? '‚è≥' : '‚úÖ'}
                                        </button>
                                        <button 
                                            className="cancel-btn"
                                            onClick={handleCancel}
                                            disabled={fieldLoading.lobby_enabled}
                                        >
                                            ‚ùå
                                        </button>
                                    </div>
                                </div>
                            ) : (
                                <div className="display-field">
                                    <span className="setting-value">
                                        {tournament.lobby_enabled ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
                                    </span>
                                    {canEdit && (
                                        <button 
                                            className="edit-btn"
                                            onClick={() => handleEdit('lobby_enabled')}
                                            title="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏"
                                        >
                                            ‚úèÔ∏è
                                        </button>
                                    )}
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </div>

            {/* –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø */}
            <div className="settings-warnings">
                <div className="warning-message">
                    ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
                </div>
            </div>
        </div>
    );
};

export default TournamentSettingsPanel; 