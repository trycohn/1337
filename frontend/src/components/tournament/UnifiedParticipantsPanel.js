/**
 * UnifiedParticipantsPanel v1.1.0 - –ú—É–ª—å—Ç–∏–≤–∏–¥–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
 * 
 * @version 1.1.0 (Multi-View Display + Smart Features + Gaming Interfaces)
 * @created 2025-01-22
 * @updated 2025-01-27 (CSS Isolation)
 * @author 1337 Community Development Team
 * @purpose –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å —Ç—Ä–µ–º—è –≤–∏–¥–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @features Smart Cards + Data Table + Gaming Roster + –¢–∞–±—ã + –§–∏–ª—å—Ç—Ä—ã + –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */

import React, { useState, useCallback, useMemo } from 'react';
import { Link } from 'react-router-dom';
import TeamGenerator from '../TeamGenerator';
import './UnifiedParticipantsPanel.css';

/**
 * üéØ –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢: UnifiedParticipantsPanel v1.1.0
 * 
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —Ç–∞–±–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ 3 –≤–∏–¥–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –í–∞—Ä–∏–∞–Ω—Ç–∞ 1 (—Ç–∞–±—ã) —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –í–∞—Ä–∏–∞–Ω—Ç–∞ 2 (—Ñ–∏–ª—å—Ç—Ä—ã/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) + Multi-View Display.
 * 
 * @param {Object} props - –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Object} props.tournament - –û–±—ä–µ–∫—Ç —Ç—É—Ä–Ω–∏—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—É—Ä–Ω–∏—Ä–µ
 * @param {Array} props.participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Array} props.matches - –ú–∞—Å—Å–∏–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Array} props.mixedTeams - –ú–∞—Å—Å–∏–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
 * @param {boolean} props.isCreatorOrAdmin - –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/—Å–æ–∑–¥–∞—Ç–µ–ª—è
 * @param {string} props.ratingType - –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ ('faceit' | 'cs2')
 * @param {Function} props.onRemoveParticipant - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
 * @param {Function} props.onShowAddParticipantModal - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
 * @param {Function} props.onShowParticipantSearchModal - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ –ø–æ–∏—Å–∫–∞
 * @param {Function} props.onTeamsGenerated - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
 * @param {Function} props.onTeamsUpdated - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
 * @param {Function} props.calculateTeamAverageRating - –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã
 * @param {Function} props.setRatingType - –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
 * @param {Object} props.user - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * @param {Object} props.userPermissions - –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Function} props.handleParticipate - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
 * @param {Function} props.setMessage - –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {Function} props.onViewChange - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–æ–≤—ã–π)
 * @returns {JSX.Element} –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
 */
const UnifiedParticipantsPanel = ({
    tournament,
    participants = [],
    matches = [],
    mixedTeams = [],
    isCreatorOrAdmin = false,
    ratingType = 'faceit',
    onRemoveParticipant,
    onShowAddParticipantModal,
    onShowParticipantSearchModal,
    onTeamsGenerated,
    onTeamsUpdated,
    calculateTeamAverageRating,
    setRatingType,
    user,
    userPermissions,
    handleParticipate,
    setMessage,
    displayMode = 'smart-cards',
    onViewChange
}) => {
    // üîß –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –†–ê–°–ß–ï–¢–ê –†–ï–ô–¢–ò–ù–ì–ê –£–ß–ê–°–¢–ù–ò–ö–ê –ö–û–ú–ê–ù–î–´
    const getCorrectMemberRating = useCallback((member, ratingType) => {
        if (ratingType === 'faceit') {
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∫–∞—Å—Ç–æ–º–Ω—ã–π ELO ‚Üí –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ELO ‚Üí faceit_rating ‚Üí user_faceit_rating ‚Üí –¥–µ—Ñ–æ–ª—Ç
            if (member.faceit_elo && !isNaN(parseInt(member.faceit_elo)) && parseInt(member.faceit_elo) > 0) {
                return parseInt(member.faceit_elo);
            } else if (member.user_faceit_elo && !isNaN(parseInt(member.user_faceit_elo)) && parseInt(member.user_faceit_elo) > 0) {
                return parseInt(member.user_faceit_elo);
            } else if (member.faceit_rating && !isNaN(parseInt(member.faceit_rating)) && parseInt(member.faceit_rating) > 0) {
                return parseInt(member.faceit_rating);
            } else if (member.user_faceit_rating && !isNaN(parseInt(member.user_faceit_rating)) && parseInt(member.user_faceit_rating) > 0) {
                return parseInt(member.user_faceit_rating);
            }
            return 1000; // –¥–µ—Ñ–æ–ª—Ç –¥–ª—è FACEIT
        } else {
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ä–∞–Ω–≥ ‚Üí –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–Ω–≥ ‚Üí premier_rank ‚Üí user_premier_rank ‚Üí –¥–µ—Ñ–æ–ª—Ç
            if (member.cs2_premier_rank && !isNaN(parseInt(member.cs2_premier_rank)) && parseInt(member.cs2_premier_rank) > 0) {
                return parseInt(member.cs2_premier_rank);
            } else if (member.premier_rank && !isNaN(parseInt(member.premier_rank)) && parseInt(member.premier_rank) > 0) {
                return parseInt(member.premier_rank);
            } else if (member.user_premier_rank && !isNaN(parseInt(member.user_premier_rank)) && parseInt(member.user_premier_rank) > 0) {
                return parseInt(member.user_premier_rank);
            } else if (member.premier_rating && !isNaN(parseInt(member.premier_rating)) && parseInt(member.premier_rating) > 0) {
                return parseInt(member.premier_rating);
            } else if (member.user_premier_rating && !isNaN(parseInt(member.user_premier_rating)) && parseInt(member.user_premier_rating) > 0) {
                return parseInt(member.user_premier_rating);
            }
            return 5; // –¥–µ—Ñ–æ–ª—Ç –¥–ª—è Premier
        }
    }, []);

    // üéØ –û–°–ù–û–í–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø
    const [activeTab, setActiveTab] = useState('current');
    const [searchQuery, setSearchQuery] = useState('');
    const [sortBy, setSortBy] = useState('name');
    const [filterStatus, setFilterStatus] = useState('all');
    const [filterRating, setFilterRating] = useState('all');

    // üéØ –î–û–°–¢–£–ü–ù–´–ï –í–ò–î–´ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
    const displayModes = [
        {
            id: 'smart-cards',
            label: 'üì± Smart Cards',
            description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –±–æ–≥–∞—Ç—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏',
            icon: 'üÉè'
        },
        {
            id: 'data-table', 
            label: 'üìä Data Table',
            description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π',
            icon: 'üìã'
        },
        {
            id: 'gaming-roster',
            label: 'üéÆ Gaming Roster', 
            description: '–ì–µ–π–º–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å—Ç–∏–ª–µ TCG/RPG –∏–≥—Ä',
            icon: '‚ö°'
        }
    ];

    // üéØ –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò (–ü–ï–†–ï–ú–ï–©–ï–ù–´ –í–´–®–ï –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø use-before-define)
    const getRating = useCallback((participant) => {
        if (ratingType === 'faceit') {
            return parseInt(participant.faceit_elo) || 0;
        } else {
            return parseInt(participant.cs2_premier_rank) || 0;
        }
    }, [ratingType]);

    const getStatusFromRating = useCallback((rating) => {
        if (rating > 2000) return 'high';
        if (rating > 1200) return 'medium';
        return 'low';
    }, []);

    const getOnlineStatus = useCallback((participant) => {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
        return Math.random() > 0.5 ? 'online' : 'offline';
    }, []);

    const getAchievements = useCallback((participant) => {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        return Math.floor(Math.random() * 20);
    }, []);

    const getWins = useCallback((participant) => {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥
        return Math.floor(Math.random() * 50);
    }, []);

    const getTournaments = useCallback((participant) => {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        return Math.floor(Math.random() * 10);
    }, []);

    // üÜï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–ò–õ–¨–¢–†–û–í
    const handleFilterChange = useCallback((filterType, value) => {
        switch (filterType) {
            case 'search':
                setSearchQuery(value);
                break;
            case 'sortBy':
                setSortBy(value);
                break;
            case 'status':
                setFilterStatus(value);
                break;
            case 'rating':
                setFilterRating(value);
                break;
            default:
                break;
        }
    }, []);

    const handleResetFilters = useCallback(() => {
        setSearchQuery('');
        setSortBy('name');
        setFilterStatus('all');
        setFilterRating('all');
    }, []);

    const handleTabChange = useCallback((tabId) => {
        setActiveTab(tabId);
    }, []);

    // üéØ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í
    const processedParticipants = useMemo(() => {
        let result = [...participants];

        // –ü–æ–∏—Å–∫
        if (searchQuery.trim()) {
            result = result.filter(p => 
                p.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                p.username?.toLowerCase().includes(searchQuery.toLowerCase())
            );
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (filterStatus !== 'all') {
            result = result.filter(p => {
                const rating = getRating(p);
                const status = getStatusFromRating(rating);
                return status === filterStatus;
            });
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        if (filterRating !== 'all') {
            result = result.filter(p => {
                const rating = getRating(p);
                switch (filterRating) {
                    case 'high': return rating > 2000;
                    case 'medium': return rating >= 1200 && rating <= 2000;
                    case 'low': return rating < 1200;
                    default: return true;
                }
            });
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        result.sort((a, b) => {
            switch (sortBy) {
                case 'name':
                    const nameA = a.name || a.username || '';
                    const nameB = b.name || b.username || '';
                    return nameA.localeCompare(nameB);
                case 'rating':
                    return getRating(b) - getRating(a);
                default:
                    return 0;
            }
        });

        return result;
    }, [participants, searchQuery, sortBy, filterStatus, filterRating, getRating, getStatusFromRating]);

    // üéØ –í–´–ß–ò–°–õ–ï–ù–ò–Ø –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    const statistics = useMemo(() => {
        const total = participants.length;
        const registered = participants.filter(p => p.user_id).length;
        const unregistered = total - registered;
        
        const ratings = participants.map(p => getRating(p)).filter(r => r > 0);
        const averageRating = ratings.length > 0 
            ? Math.round(ratings.reduce((sum, r) => sum + r, 0) / ratings.length)
            : 0;

        const highRated = participants.filter(p => getRating(p) > 2000).length;
        const mediumRated = participants.filter(p => {
            const rating = getRating(p);
            return rating >= 1200 && rating <= 2000;
        }).length;
        const lowRated = participants.filter(p => getRating(p) < 1200).length;

        return {
            total,
            registered,
            unregistered,
            averageRating,
            highRated,
            mediumRated,
            lowRated
        };
    }, [participants, getRating]);

    const capacityInfo = useMemo(() => {
        const current = participants.length;
        const max = tournament?.max_participants || null;
        const percentage = max ? Math.round((current / max) * 100) : 0;
        
        return {
            current,
            max,
            percentage,
            isFull: max ? current >= max : false,
            remaining: max ? Math.max(0, max - current) : null
        };
    }, [participants.length, tournament?.max_participants]);

    // üéØ –§–£–ù–ö–¶–ò–ò –†–ï–ù–î–ï–†–ò–ù–ì–ê –í–ò–î–û–í –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
    const renderSmartCards = useCallback((participantsToRender) => {
        if (participantsToRender.length === 0) {
            return (
                <div className="empty-participants-state-participants-list">
                    <div className="no-participants-participants-list">
                        <div className="no-participants-icon-participants-list">üë•</div>
                        <h4>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h4>
                        <p>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ</p>
                    </div>
                </div>
            );
        }

        return (
            <div className="smart-cards-grid-participants-list">
                {participantsToRender.map((participant) => {
                    const rating = getRating(participant);
                    const isOnline = getOnlineStatus(participant) === 'online';
                    const achievements = getAchievements(participant);
                    
                    return (
                        <div key={participant.id} className="smart-participant-card-participants-list">
                            {/* –ê–≤–∞—Ç–∞—Ä —Å–µ–∫—Ü–∏—è */}
                            <div className="smart-avatar-section-participants-list">
                                <div className="smart-avatar-container-participants-list">
                                    <img 
                                        src={participant.avatar_url || '/default-avatar.png'} 
                                        alt={participant.name}
                                        className="smart-avatar-participants-list"
                                    />
                                    <div className={`online-indicator-participants-list ${isOnline ? 'online' : 'offline'}`}></div>
                                    {achievements > 10 && <div className="achievement-crown-participants-list">üëë</div>}
                                </div>
                            </div>

                            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ */}
                            <div className="smart-participant-info-participants-list">
                                <div className="smart-name-section-participants-list">
                                    {participant.user_id ? (
                                        <Link to={`/profile/${participant.user_id}`} className="smart-participant-name-participants-list">
                                            {participant.name}
                                        </Link>
                                    ) : (
                                        <span className="smart-participant-name-participants-list">{participant.name}</span>
                                    )}
                                    <div className="smart-rating-display-participants-list">
                                        <div className={`rating-badge-participants-list ${getStatusFromRating(rating)}`}>
                                            ‚≠ê {rating}
                                        </div>
                                    </div>
                                </div>

                                {/* –ú–∏–Ω–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                                <div className="smart-mini-stats-participants-list">
                                    <div className="stat-chip-participants-list">
                                        <span className="stat-icon-participants-list">üèÜ</span>
                                        <span className="stat-value-participants-list">{achievements}</span>
                                    </div>
                                    <div className="stat-chip-participants-list">
                                        <span className="stat-icon-participants-list">‚ö°</span>
                                        <span className="stat-value-participants-list">{isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}</span>
                                    </div>
                                </div>

                                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ */}
                                {rating > 0 && (
                                    <div className="rating-progress-participants-list">
                                        <div className="progress-bar-participants-list">
                                            <div 
                                                className="progress-fill-participants-list"
                                                style={{ width: `${Math.min((rating / 3000) * 100, 100)}%` }}
                                            ></div>
                                        </div>
                                        <span className="progress-text-participants-list">{rating}/3000</span>
                                    </div>
                                )}
                            </div>

                            {/* –î–µ–π—Å—Ç–≤–∏—è */}
                            {isCreatorOrAdmin && (
                                <div className="smart-actions-participants-list">
                                    <button 
                                        className="smart-remove-btn-participants-list"
                                        onClick={() => onRemoveParticipant(participant.id)}
                                        title="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                                    >
                                        ‚úï
                                    </button>
                                </div>
                            )}
                        </div>
                    );
                })}
            </div>
        );
    }, [getRating, getStatusFromRating, getOnlineStatus, getAchievements, isCreatorOrAdmin, onRemoveParticipant]);

    const renderDataTable = useCallback((participantsToRender) => {
        if (participantsToRender.length === 0) {
            return (
                <div className="empty-participants-state-participants-list">
                    <div className="no-participants-participants-list">
                        <div className="no-participants-icon-participants-list">üìä</div>
                        <h4>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</h4>
                        <p>–¢–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
                    </div>
                </div>
            );
        }

        return (
            <div className="data-table-container-participants-list">
                <div className="table-responsive-participants-list">
                    <table className="participants-data-table-participants-list">
                        <thead>
                            <tr>
                                <th className="avatar-col">
                                    –§–æ—Ç–æ
                                </th>
                                <th className="name-col sortable" onClick={() => handleFilterChange('sortBy', 'name')}>
                                    –ò–º—è {sortBy === 'name' && '‚ÜïÔ∏è'}
                                </th>
                                <th className="status-col">–°—Ç–∞—Ç—É—Å</th>
                                <th className="rating-col sortable" onClick={() => handleFilterChange('sortBy', 'rating')}>
                                    –†–µ–π—Ç–∏–Ω–≥ {sortBy === 'rating' && '‚ÜïÔ∏è'}
                                </th>
                                <th className="stats-col">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</th>
                                {isCreatorOrAdmin && <th className="actions-col">–î–µ–π—Å—Ç–≤–∏—è</th>}
                            </tr>
                        </thead>
                        <tbody>
                            {participantsToRender.map((participant) => {
                                const rating = getRating(participant);
                                const status = getStatusFromRating(rating);
                                const wins = getWins(participant);
                                const tournaments = getTournaments(participant);

                                return (
                                    <tr key={participant.id} className="table-row">
                                        <td className="avatar-cell">
                                            <img 
                                                src={participant.avatar_url || '/default-avatar.png'} 
                                                alt={participant.name}
                                                className="table-avatar-participants-list"
                                            />
                                        </td>
                                        <td className="name-cell">
                                            {participant.user_id ? (
                                                <Link to={`/profile/${participant.user_id}`} className="table-participant-name-participants-list">
                                                    {participant.name}
                                                </Link>
                                            ) : (
                                                <span className="table-participant-name-participants-list guest">{participant.name}</span>
                                            )}
                                        </td>
                                        <td className="status-cell">
                                            {participant.user_id ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' : '–ì–æ—Å—Ç—å'}
                                        </td>
                                        <td className="rating-cell">
                                            <span className={`table-rating-participants-list ${status}`}>
                                                {rating || '–ù/–î'}
                                            </span>
                                        </td>
                                        <td className="stats-cell">
                                            <div className="table-stats-participants-list">
                                                <span className="wins-stat-participants-list">üèÜ {wins}</span>
                                                <span className="tournaments-stat-participants-list">üéÆ {tournaments}</span>
                                            </div>
                                        </td>
                                        {isCreatorOrAdmin && (
                                            <td className="actions-cell">
                                                <button 
                                                    className="table-remove-btn-participants-list"
                                                    onClick={() => onRemoveParticipant(participant.id)}
                                                    title="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                                                >
                                                    –£–¥–∞–ª–∏—Ç—å
                                                </button>
                                            </td>
                                        )}
                                    </tr>
                                );
                            })}
                        </tbody>
                    </table>
                </div>
            </div>
        );
    }, [handleFilterChange, sortBy, getRating, getStatusFromRating, getWins, getTournaments, isCreatorOrAdmin, onRemoveParticipant]);

    const renderGamingRoster = useCallback((participantsToRender) => {
        if (participantsToRender.length === 0) {
            return (
                <div className="empty-participants-state-participants-list">
                    <div className="no-participants-participants-list">
                        <div className="no-participants-icon-participants-list">‚ö°</div>
                        <h4>–ü—É—Å—Ç–∞—è –≥–∏–ª—å–¥–∏—è</h4>
                        <p>–í–∞—à–∞ –≥–∏–ª—å–¥–∏—è —Å—Ç–∞–Ω–µ—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ –ø—Ä–∏–∑—ã–≤–∞ –≤–æ–∏–Ω–æ–≤</p>
                    </div>
                </div>
            );
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const participantsWithGameData = participantsToRender.map((participant, index) => {
            const rating = getRating(participant);
            const powerLevel = rating || 1000;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
            let rarity = 'common';
            if (powerLevel > 2500) rarity = 'legendary';
            else if (powerLevel > 2000) rarity = 'epic';
            else if (powerLevel > 1500) rarity = 'rare';

            // –¢–æ–ø-3 –∏–≥—Ä–æ–∫–∞ –ø–æ–ª—É—á–∞—é—Ç –æ—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å
            const isTopPlayer = index < 3;

            return {
                ...participant,
                powerLevel,
                rarity,
                isTopPlayer
            };
        });

        const totalPower = participantsWithGameData.reduce((sum, p) => sum + p.powerLevel, 0);

        return (
            <div className="gaming-roster-container-participants-list">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–æ—Å—Ç–µ—Ä–∞ */}
                <div className="roster-header-participants-list">
                    <h3 className="roster-title-participants-list">‚öîÔ∏è Tournament Champions ‚öîÔ∏è</h3>
                    <div className="power-level-indicator-participants-list">
                        –°—É–º–º–∞—Ä–Ω–∞—è –º–æ—â—å: <span className="total-power-participants-list">{totalPower.toLocaleString()}</span>
                    </div>
                </div>

                {/* –°–µ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –∫–∞—Ä—Ç */}
                <div className="gaming-cards-grid-participants-list">
                    {participantsWithGameData.map((participant, index) => {
                        const { powerLevel, rarity, isTopPlayer } = participant;

                        return (
                            <div 
                                key={participant.id} 
                                className={`gaming-card-participants-list ${rarity} ${isTopPlayer ? 'top-player' : ''}`}
                            >
                                {/* –†–∞–º–∫–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ */}
                                <div className="rarity-frame-participants-list">
                                    <div className="rarity-corners-participants-list">
                                        <div className="corner-participants-list top-left"></div>
                                        <div className="corner-participants-list top-right"></div>
                                        <div className="corner-participants-list bottom-left"></div>
                                        <div className="corner-participants-list bottom-right"></div>
                                    </div>
                                </div>

                                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–Ω–≥–∞ */}
                                <div className="rank-indicator-participants-list">
                                    <span className="rank-number-participants-list">#{index + 1}</span>
                                    <span className="rarity-label-participants-list">{rarity.toUpperCase()}</span>
                                </div>

                                {/* –ê–≤–∞—Ç–∞—Ä —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ */}
                                <div className="gaming-avatar-container-participants-list">
                                    <div className={`avatar-glow-participants-list ${rarity}`}></div>
                                    <img 
                                        src={participant.avatar_url || '/default-avatar.png'} 
                                        alt={participant.name}
                                        className="gaming-avatar-participants-list"
                                    />
                                    {isTopPlayer && <div className="crown-effect-participants-list">üëë</div>}
                                </div>

                                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ */}
                                <div className="gaming-player-info-participants-list">
                                    <div className="player-name-section-participants-list">
                                        {participant.user_id ? (
                                            <Link to={`/profile/${participant.user_id}`} className="gaming-player-name-participants-list">
                                                {participant.name}
                                            </Link>
                                        ) : (
                                            <span className="gaming-player-name-participants-list guest">{participant.name}</span>
                                        )}
                                    </div>

                                    {/* Power Level */}
                                    <div className="power-level-section-participants-list">
                                        <div className="power-label-participants-list">POWER LEVEL</div>
                                        <div className="power-value-participants-list">{powerLevel.toLocaleString()}</div>
                                        <div className="power-bar-participants-list">
                                            <div 
                                                className="power-fill-participants-list"
                                                style={{ width: `${Math.min((powerLevel / 3000) * 100, 100)}%` }}
                                            ></div>
                                        </div>
                                    </div>

                                    {/* RPG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                                    <div className="gaming-stats-participants-list">
                                        <div className="stat-row-participants-list">
                                            <span className="stat-name-participants-list">ATK</span>
                                            <span className="stat-value-participants-list">{Math.floor(powerLevel / 50)}</span>
                                        </div>
                                        <div className="stat-row-participants-list">
                                            <span className="stat-name-participants-list">DEF</span>
                                            <span className="stat-value-participants-list">{Math.floor(powerLevel / 60)}</span>
                                        </div>
                                        <div className="stat-row-participants-list">
                                            <span className="stat-name-participants-list">SPD</span>
                                            <span className="stat-value-participants-list">{Math.floor(powerLevel / 40)}</span>
                                        </div>
                                    </div>
                                </div>

                                {/* –î–µ–π—Å—Ç–≤–∏—è */}
                                {isCreatorOrAdmin && (
                                    <div className="gaming-actions-participants-list">
                                        <button 
                                            className="gaming-remove-btn-participants-list"
                                            onClick={() => onRemoveParticipant(participant.id)}
                                            title="–ò–∑–≥–Ω–∞—Ç—å –∏–∑ –≥–∏–ª—å–¥–∏–∏"
                                        >
                                            –ò–ó–ì–ù–ê–¢–¨
                                        </button>
                                    </div>
                                )}
                            </div>
                        );
                    })}
                </div>
            </div>
        );
    }, [getRating, isCreatorOrAdmin, onRemoveParticipant]);

    // üéØ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ï–ù–î–ï–†–ò–ù–ì–ê
    const renderCurrentParticipants = useCallback(() => {
        return (
            <div className="current-participants-tab-participants-list">
                {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                <div className="participants-controls-participants-list">
                    <div className="search-and-filters-participants-list">
                        <div className="search-section-participants-list">
                            <input
                                type="text"
                                className="participants-search-input-participants-list"
                                placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞..."
                                value={searchQuery}
                                onChange={(e) => handleFilterChange('search', e.target.value)}
                            />
                        </div>
                        
                        <div className="filters-section-participants-list">
                            <select 
                                className="filter-select-participants-list"
                                value={filterStatus}
                                onChange={(e) => handleFilterChange('status', e.target.value)}
                            >
                                <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                                <option value="high">–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥</option>
                                <option value="medium">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</option>
                                <option value="low">–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥</option>
                            </select>

                            <select 
                                className="filter-select-participants-list"
                                value={filterRating}
                                onChange={(e) => handleFilterChange('rating', e.target.value)}
                            >
                                <option value="all">–í—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏</option>
                                <option value="high">2000+ ELO</option>
                                <option value="medium">1200-2000 ELO</option>
                                <option value="low">–ú–µ–Ω—å—à–µ 1200 ELO</option>
                            </select>

                            {/* üÜï –°–µ–ª–µ–∫—Ç–æ—Ä –≤–∏–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                            <select 
                                className="display-mode-select-participants-list"
                                value={displayMode}
                                onChange={(e) => onViewChange && onViewChange(e.target.value)}
                            >
                                {displayModes.map(mode => (
                                    <option key={mode.id} value={mode.id}>
                                        {mode.icon} {mode.label}
                                    </option>
                                ))}
                            </select>

                            {(searchQuery || filterStatus !== 'all' || filterRating !== 'all') && (
                                <button 
                                    className="clear-filters-btn-participants-list"
                                    onClick={handleResetFilters}
                                    title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"
                                >
                                    –°–±—Ä–æ—Å–∏—Ç—å
                                </button>
                            )}
                        </div>
                    </div>

                    {/* –ò—Ç–æ–≥–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
                    <div className="results-summary-participants-list">
                        <span className="filtered-indicator-participants-list">
                            üìä –ü–æ–∫–∞–∑–∞–Ω–æ: {processedParticipants.length} –∏–∑ {participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        </span>
                        {(searchQuery || filterStatus !== 'all' || filterRating !== 'all') && (
                            <span> ‚Ä¢ –§–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã</span>
                        )}
                    </div>
                </div>

                {/* üÜï –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –≤–∏–¥–æ–≤ */}
                {!(tournament?.format === 'mix' && mixedTeams?.length > 0) && (
                    <div className={`participants-display-area-participants-list display-mode-${displayMode}`}>
                        {displayMode === 'smart-cards' && renderSmartCards(processedParticipants)}
                        {displayMode === 'data-table' && renderDataTable(processedParticipants)}
                        {displayMode === 'gaming-roster' && renderGamingRoster(processedParticipants)}
                    </div>
                )}

                {/* üéØ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í –° –ö–û–ú–ê–ù–î–ê–ú–ò */}
                {(tournament?.format === 'mix' && mixedTeams?.length > 0) && (
                    <div className="mix-teams-info-participants-list">
                        <div className="info-card-participants-list">
                            
                            <div className="info-content-participants-list">
                                <h4>–ö–æ–º–∞–Ω–¥—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!</h4>
                                <p>–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö –∏ —Å–æ—Å—Ç–∞–≤–∞—Ö —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –±–ª–æ–∫–µ –Ω–∏–∂–µ.</p>
                            </div>
                        </div>
                    </div>
                )}

                {/* üéØ –ú–ò–ö–° –¢–£–†–ù–ò–†–´: TeamGenerator –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ */}
                {tournament?.format === 'mix' && (
                    <div className="mix-tournament-section-participants-list">
                        <TeamGenerator
                            tournament={tournament}
                            participants={participants}
                            onTeamsGenerated={onTeamsGenerated}
                            onTeamsUpdated={onTeamsUpdated}
                            onRemoveParticipant={onRemoveParticipant}
                            isAdminOrCreator={isCreatorOrAdmin}
                        />
                    </div>
                )}

                {/* –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
                {participants.length === 0 && (
                    <div className="empty-participants-state-participants-list">
                        <div className="no-participants-participants-list">
                            <div className="no-participants-icon-participants-list">üë•</div>
                            <h4>–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h4>
                            <p>–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π!</p>
                            {!userPermissions?.isParticipating && user && (
                                <button 
                                    className="btn btn-primary"
                                    onClick={handleParticipate}
                                >
                                    üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
                                </button>
                            )}
                        </div>
                    </div>
                )}
            </div>
        );
    }, [
        searchQuery,
        filterStatus, 
        filterRating,
        displayMode,
        processedParticipants,
        participants.length,
        userPermissions?.isParticipating,
        user,
        handleFilterChange,
        handleResetFilters,
        onViewChange,
        renderSmartCards,
        renderDataTable,
        renderGamingRoster,
        handleParticipate,
        // üéØ –ù–û–í–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í
        tournament?.format,
        mixedTeams?.length,
        onTeamsGenerated,
        onTeamsUpdated,
        onRemoveParticipant,
        isCreatorOrAdmin
    ]);

    const renderAddParticipants = useCallback(() => {
        const canManageParticipants = isCreatorOrAdmin && 
            tournament?.status === 'active' && 
            (!matches || matches.length === 0);

        if (!canManageParticipants) {
            return (
                <div className="add-participants-tab-participants-list">
                    <div className="management-blocked-notice-participants-list">
                        <div className="blocked-icon-participants-list">üö´</div>
                        <div className="blocked-content-participants-list">
                            <h5>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</h5>
                            <p>
                                {!isCreatorOrAdmin && "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞."}
                                {isCreatorOrAdmin && tournament?.status !== 'active' && "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤."}
                                {isCreatorOrAdmin && tournament?.status === 'active' && matches?.length > 0 && "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏."}
                            </p>
                        </div>
                    </div>
                </div>
            );
        }

        return (
            <div className="add-participants-tab-participants-list">
                <div className="add-participants-header-participants-list">
                    <h4>–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h4>
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä</p>
                </div>

                <div className="add-participants-options-participants-list">
                    {/* –ü–æ–∏—Å–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
                    <div className="add-option-card-participants-list">
                        <div className="option-icon-participants-list">üë§</div>
                        <div className="option-content-participants-list">
                            <h5>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h5>
                            <p>–ù–∞–π–¥–∏—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</p>
                            <button 
                                className="add-option-btn-participants-list primary"
                                onClick={onShowParticipantSearchModal}
                            >
                                üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            </button>
                        </div>
                    </div>

                    {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
                    <div className="add-option-card-participants-list">
                        <div className="option-icon-participants-list">‚úèÔ∏è</div>
                        <div className="option-content-participants-list">
                            <h5>–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏</h5>
                            <p>–î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Ä—É—á–Ω—É—é, —É–∫–∞–∑–∞–≤ –∏—Ö –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
                            <button 
                                className="add-option-btn-participants-list secondary"
                                onClick={onShowAddParticipantModal}
                            >
                                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        );
    }, [isCreatorOrAdmin, tournament?.status, matches, onShowParticipantSearchModal, onShowAddParticipantModal]);

    const renderTeams = useCallback(() => {
        if (!mixedTeams || mixedTeams.length === 0) {
            return (
                <div className="teams-tab-participants-list">
                    <div className="teams-header-participants-list">
                        <h4>–ö–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞</h4>
                        <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</p>
                    </div>
                    
                    <div className="no-teams-state-participants-list">
                        <div className="no-teams-icon-participants-list">‚öΩ</div>
                        <h4>–ö–æ–º–∞–Ω–¥—ã –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã</h4>
                        <p>
                            {tournament?.format === 'mix' 
                                ? "–ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–£—á–∞—Å—Ç–Ω–∏–∫–∏'"
                                : "–ö–æ–º–∞–Ω–¥—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞"
                            }
                        </p>
                        {tournament?.format === 'mix' && (
                            <p className="mix-teams-hint">
                                üí° –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "–£—á–∞—Å—Ç–Ω–∏–∫–∏"
                            </p>
                        )}
                    </div>
                </div>
            );
        }

        return (
            <div className="teams-tab-participants-list">
                <div className="teams-header-participants-list">
                    <h4>–ö–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ ({mixedTeams.length})</h4>
                    <p>
                        {tournament?.format === 'mix' 
                            ? "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                            : "–ö–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞"
                        }
                    </p>
                </div>

                {/* üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ê–ù–î */}
                <div className="teams-stats-participants-list">
                    <div className="team-stat-participants-list">
                        <span className="stat-label-participants-list">–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥:</span>
                        <span className="stat-value-participants-list">{mixedTeams.length}</span>
                    </div>
                    <div className="team-stat-participants-list">
                        <span className="stat-label-participants-list">–ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö:</span>
                        <span className="stat-value-participants-list">
                            {mixedTeams.reduce((total, team) => total + (team.members?.length || 0), 0)}
                        </span>
                    </div>
                    <div className="team-stat-participants-list">
                        <span className="stat-label-participants-list">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</span>
                        <span className="stat-value-participants-list">
                            {mixedTeams.length > 0 ? Math.round(
                                mixedTeams.reduce((sum, team) => {
                                    const teamRating = calculateTeamAverageRating ? calculateTeamAverageRating(team) : 0;
                                    return sum + teamRating;
                                }, 0) / mixedTeams.length
                            ) : 0}
                        </span>
                    </div>
                </div>

                <div className="teams-grid-participants-list">
                    {mixedTeams.map((team, index) => (
                        <div key={team.id || index} className="team-card-unified-participants-list enhanced">
                            <div className="team-header-participants-list">
                                <div className="team-title-section-participants-list">
                                    <h5>{team.name || `–ö–æ–º–∞–Ω–¥–∞ ${index + 1}`}</h5>
                                    <span className="team-members-count-participants-list">
                                        üë• {team.members?.length || 0} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                    </span>
                                </div>
                                <div className="team-rating-participants-list enhanced">
                                    <span className="rating-label-participants-list">
                                        {ratingType === 'faceit' ? 'FACEIT' : 'Premier'}:
                                    </span>
                                    <span className="rating-value-participants-list">
                                        {calculateTeamAverageRating ? calculateTeamAverageRating(team) : '‚Äî'}
                                    </span><br></br>
                                    <span className="rating-suffix-participants-list">ELO</span>
                                </div>
                            </div>
                            
                            {/* üéØ –°–û–°–¢–ê–í –ö–û–ú–ê–ù–î–´ */}
                            <div className="team-composition-participants-list">
                                <h6>üë• –°–æ—Å—Ç–∞–≤:</h6>
                                {team.members && team.members.length > 0 ? (
                                    <div className="team-members-participants-list">
                                        {team.members.map((member, memberIndex) => (
                                            <div key={memberIndex} className="team-member-participants-list enhanced">
                                                <div className="member-avatar-participants-list">
                                                    <img 
                                                        src={member.avatar_url || '/default-avatar.png'} 
                                                        alt={member.name}
                                                        onError={(e) => {
                                                            e.target.onerror = null;
                                                            e.target.src = '/default-avatar.png';
                                                        }}
                                                    />
                                                </div>
                                                <div className="member-info-participants-list">
                                                    <div className="member-name-participants-list">
                                                        {member.user_id ? (
                                                            <a href={`/profile/${member.user_id}`}>
                                                                {member.name || member.username}
                                                            </a>
                                                        ) : (
                                                            <span>{member.name}</span>
                                                        )}
                                                    </div>
                                                    <div className="member-rating-participants-list">
                                                        {ratingType === 'faceit' 
                                                            ? `${getCorrectMemberRating(member, 'faceit')} ELO`
                                                            : `–†–∞–Ω–≥ ${getCorrectMemberRating(member, 'premier')}`
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <p className="no-members-participants-list">–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</p>
                                )}
                            </div>
                        </div>
                    ))}
                </div>

                {/* üéØ –ü–†–ò–ú–ï–ß–ê–ù–ò–ï –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í */}
                {tournament?.format === 'mix' && (
                    <div className="mix-teams-management-note">
                        <div className="note-icon">üí°</div>
                        <div className="note-content">
                            <h6>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</h6>
                            <p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "–£—á–∞—Å—Ç–Ω–∏–∫–∏"</p>
                        </div>
                    </div>
                )}
            </div>
        );
    }, [
        mixedTeams, 
        tournament?.format, 
        isCreatorOrAdmin, 
        participants, 
        onTeamsGenerated, 
        onTeamsUpdated, 
        onRemoveParticipant, 
        calculateTeamAverageRating,
        getRating,
        ratingType
    ]);

    const renderStatistics = useCallback(() => {
        return (
            <div className="statistics-tab-participants-list">
                <div className="statistics-header-participants-list">
                    <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h4>
                    <p>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç—É—Ä–Ω–∏—Ä–∞</p>
                </div>

                <div className="statistics-grid-participants-list">
                    <div className="stat-card-participants-list">
                        <div className="stat-icon-participants-list">üë•</div>
                        <div className="stat-content-participants-list">
                            <div className="stat-value-participants-list">{statistics.total}</div>
                            <div className="stat-label-participants-list">–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
                        </div>
                    </div>

                    <div className="stat-card-participants-list">
                        <div className="stat-icon-participants-list">‚úÖ</div>
                        <div className="stat-content-participants-list">
                            <div className="stat-value-participants-list">{statistics.registered}</div>
                            <div className="stat-label-participants-list">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</div>
                        </div>
                    </div>

                    <div className="stat-card-participants-list">
                        <div className="stat-icon-participants-list">üë§</div>
                        <div className="stat-content-participants-list">
                            <div className="stat-value-participants-list">{statistics.unregistered}</div>
                            <div className="stat-label-participants-list">–ì–æ—Å—Ç–∏</div>
                        </div>
                    </div>

                    <div className="stat-card-participants-list">
                        <div className="stat-icon-participants-list">üìä</div>
                        <div className="stat-content-participants-list">
                            <div className="stat-value-participants-list">{statistics.averageRating}</div>
                            <div className="stat-label-participants-list">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</div>
                        </div>
                    </div>

                    <div className="stat-card-participants-list">
                        <div className="stat-icon-participants-list">üî•</div>
                        <div className="stat-content-participants-list">
                            <div className="stat-value-participants-list">{statistics.highRated}</div>
                            <div className="stat-label-participants-list">–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥</div>
                        </div>
                    </div>

                    <div className="stat-card-participants-list">
                        <div className="stat-icon-participants-list">‚öñÔ∏è</div>
                        <div className="stat-content-participants-list">
                            <div className="stat-value-participants-list">{statistics.mediumRated}</div>
                            <div className="stat-label-participants-list">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</div>
                        </div>
                    </div>

                    <div className="stat-card-participants-list">
                        <div className="stat-icon-participants-list">üå±</div>
                        <div className="stat-content-participants-list">
                            <div className="stat-value-participants-list">{statistics.lowRated}</div>
                            <div className="stat-label-participants-list">–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥</div>
                        </div>
                    </div>
                </div>

                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ */}
                {capacityInfo.max && (
                    <div className="capacity-indicator-participants-list">
                        <div className="capacity-header-participants-list">
                            <span>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ç—É—Ä–Ω–∏—Ä–∞</span>
                            <span>{capacityInfo.current} / {capacityInfo.max}</span>
                        </div>
                        <div className="capacity-bar-participants-list">
                            <div 
                                className="capacity-fill-participants-list"
                                style={{ width: `${capacityInfo.percentage}%` }}
                            ></div>
                        </div>
                        <div className="capacity-status-participants-list">
                            {capacityInfo.isFull ? (
                                <div className="status-full-participants-list">
                                    üö´ –¢—É—Ä–Ω–∏—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω
                                </div>
                            ) : (
                                <div className="status-available-participants-list">
                                    ‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {capacityInfo.remaining}
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </div>
        );
    }, [statistics, capacityInfo]);

    // üéØ –û–°–ù–û–í–ù–û–ô –†–ï–ù–î–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–ê
    const tabs = useMemo(() => [
        {
            id: 'current',
            label: '–£—á–∞—Å—Ç–Ω–∏–∫–∏',
            icon: 'üë•',
            count: participants.length,
            render: renderCurrentParticipants
        },
        {
            id: 'add',
            label: '–î–æ–±–∞–≤–∏—Ç—å',
            icon: '‚ûï',
            render: renderAddParticipants,
            disabled: !isCreatorOrAdmin
        },
        {
            id: 'teams',
            label: '–ö–æ–º–∞–Ω–¥—ã',
            icon: '‚öΩ',
            count: mixedTeams?.length || 0,
            render: renderTeams,
            hidden: tournament?.format === 'mix' || (!mixedTeams || mixedTeams.length === 0)
        },
        {
            id: 'statistics',
            label: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            icon: 'üìä',
            render: renderStatistics
        }
    ], [
        participants.length,
        mixedTeams?.length,
        tournament?.format,
        isCreatorOrAdmin,
        renderCurrentParticipants,
        renderAddParticipants,
        renderTeams,
        renderStatistics
    ]);

    const visibleTabs = useMemo(() => 
        tabs.filter(tab => !tab.hidden),
        [tabs]
    );

    return (
        <div className="unified-participants-panel-participants-list">
            {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∞–±–∞–º */}
            <nav className="unified-tabs-navigation-participants-list">
                {visibleTabs.map(tab => (
                    <button
                        key={tab.id}
                        className={`unified-tab-btn-participants-list ${activeTab === tab.id ? 'active' : ''} ${tab.disabled ? 'disabled' : ''}`}
                        onClick={() => !tab.disabled && handleTabChange(tab.id)}
                        disabled={tab.disabled}
                    >
                        <span className="tab-icon-participants-list">{tab.icon}</span>
                        <span className="tab-label-participants-list">{tab.label}</span>
                        {typeof tab.count === 'number' && (
                            <span className="tab-count-participants-list">{tab.count}</span>
                        )}
                    </button>
                ))}
            </nav>

            {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞ */}
            <div className="unified-tab-content-participants-list">
                {visibleTabs.find(tab => tab.id === activeTab)?.render()}
            </div>
        </div>
    );
};

export default UnifiedParticipantsPanel; 