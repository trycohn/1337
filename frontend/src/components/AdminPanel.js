import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../axios';
import './AdminPanel.css';
import './AdminPanel.css';
import { ensureHttps } from '../utils/userHelpers';
import { useAuth } from '../context/AuthContext'; // –î–æ–±–∞–≤–ª—è–µ–º AuthContext

function UploadMapImage() {
    const [mapKey, setMapKey] = useState('mirage');
    const [file, setFile] = useState(null);
    const [loading, setLoading] = useState(false);
    const [msg, setMsg] = useState('');
    const onSubmit = async (e) => {
        e.preventDefault();
        if (!file) return;
        try {
            setLoading(true);
            setMsg('');
            const form = new FormData();
            form.append('mapKey', mapKey);
            form.append('image', file);
            const res = await fetch('/api/admin/upload/map-image', {
                method: 'POST',
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
                body: form
            });
            const data = await res.json();
            if (!res.ok || !data.success) throw new Error(data.error || '–û—à–∏–±–∫–∞');
            setMsg(`–ì–æ—Ç–æ–≤–æ: ${data.file}`);
        } catch (err) {
            setMsg(`–û—à–∏–±–∫–∞: ${err.message}`);
        } finally {
            setLoading(false);
        }
    };
    return (
        <form onSubmit={onSubmit} className="map-upload-form" style={{display:'flex', gap:8, alignItems:'center', flexWrap:'wrap'}}>
            <label>–ö–∞—Ä—Ç–∞:</label>
            <input value={mapKey} onChange={(e)=>setMapKey(e.target.value)} className="map-input" placeholder="mirage" />
            <input type="file" accept="image/*" onChange={(e)=>setFile(e.target.files[0]||null)} />
            <button className="btn" disabled={loading || !file}>–ó–∞–≥—Ä—É–∑–∏—Ç—å (320x180)</button>
            {msg && <span style={{color:'#aaa'}}>{msg}</span>}
        </form>
    );
}

function UploadLogo() {
    const [type, setType] = useState('org');
    const [name, setName] = useState('logo');
    const [file, setFile] = useState(null);
    const [loading, setLoading] = useState(false);
    const [msg, setMsg] = useState('');
    const onSubmit = async (e) => {
        e.preventDefault();
        if (!file) return;
        try {
            setLoading(true);
            setMsg('');
            const form = new FormData();
            form.append('type', type);
            form.append('name', name);
            form.append('logo', file);
            const res = await fetch('/api/admin/upload/logo', {
                method: 'POST',
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
                body: form
            });
            const data = await res.json();
            if (!res.ok || !data.success) throw new Error(data.error || '–û—à–∏–±–∫–∞');
            setMsg(`–ì–æ—Ç–æ–≤–æ: ${data.url}`);
        } catch (err) {
            setMsg(`–û—à–∏–±–∫–∞: ${err.message}`);
        } finally {
            setLoading(false);
        }
    };
    return (
        <form onSubmit={onSubmit} className="logo-upload-form" style={{display:'flex', gap:8, alignItems:'center', flexWrap:'wrap', marginTop:8}}>
            <label>–¢–∏–ø:</label>
            <select value={type} onChange={(e)=>setType(e.target.value)} className="status-filter">
                <option value="org">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</option>
                <option value="team">–ö–æ–º–∞–Ω–¥–∞</option>
                <option value="tournament">–¢—É—Ä–Ω–∏—Ä</option>
            </select>
            <input value={name} onChange={(e)=>setName(e.target.value)} className="map-input" placeholder="–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞" />
            <input type="file" accept="image/*" onChange={(e)=>setFile(e.target.files[0]||null)} />
            <button className="btn" disabled={loading || !file}>–ó–∞–≥—Ä—É–∑–∏—Ç—å (1000x1000)</button>
            {msg && <span style={{color:'#aaa'}}>{msg}</span>}
        </form>
    );
}

function AdminPanel() {
    const navigate = useNavigate();
    const { user: authUser, loading: authLoading } = useAuth(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ AuthContext
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [requests, setRequests] = useState([]);
    const [stats, setStats] = useState({});
    const [activeTab, setActiveTab] = useState('requests');
    
    // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: Trust Scores state
    const [trustScores, setTrustScores] = useState([]);
    const [trustStats, setTrustStats] = useState(null);
    const [trustLoading, setTrustLoading] = useState(false);
    const [trustFilter, setTrustFilter] = useState('all');
    const [trustSort, setTrustSort] = useState('score_asc');
    const [trustPagination, setTrustPagination] = useState({ total: 0, limit: 50, offset: 0 });
    const [recheckingUserId, setRecheckingUserId] = useState(null);
    
    // üéÆ FEEDBACKS: State –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const [suspiciousPlayers, setSuspiciousPlayers] = useState([]);
    const [feedbackStats, setFeedbackStats] = useState(null);
    const [feedbacksLoading, setFeedbacksLoading] = useState(false);
    const [feedbackFilter, setFeedbackFilter] = useState({ min_cheating: 3, max_reputation: 50 });
    const [feedbackSort, setFeedbackSort] = useState('cheating_desc');
    const [feedbackPagination, setFeedbackPagination] = useState({ total: 0, limit: 50, offset: 0 });
    
    // üìä MATCHZY STATS: State –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const [matchzyAnomalies, setMatchzyAnomalies] = useState([]);
    const [leaderboard, setLeaderboard] = useState([]);
    const [leaderboardMetric, setLeaderboardMetric] = useState('rating');
    const [statsLoading, setStatsLoading] = useState(false);
    // Preloaded avatars state
    const [preAvatars, setPreAvatars] = useState([]);
    const [preAvatarsLoading, setPreAvatarsLoading] = useState(false);
    const [preAvatarsMsg, setPreAvatarsMsg] = useState('');
    const [uploadCategory, setUploadCategory] = useState('standard');
    const [defaultAvatarUrl, setDefaultAvatarUrl] = useState(null);
    const [showDefaultConfirm, setShowDefaultConfirm] = useState(false);
    const [candidateDefault, setCandidateDefault] = useState(null);
    // Default Map Pool state
    const [defaultMapPool, setDefaultMapPool] = useState([]);
    const [mapPoolLoading, setMapPoolLoading] = useState(false);
    const [mapPoolError, setMapPoolError] = useState(null);
    const [statusFilter, setStatusFilter] = useState('pending');
    const [pagination, setPagination] = useState({ page: 1, pages: 1, total: 0 });
    const [selectedRequest, setSelectedRequest] = useState(null);
    const [showRequestModal, setShowRequestModal] = useState(false);
    const [actionLoading, setActionLoading] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    const [showApproveModal, setShowApproveModal] = useState(false);
    const [showRejectModal, setShowRejectModal] = useState(false);
    const [actionData, setActionData] = useState({
        contact_email: '',
        contact_phone: '',
        admin_comment: ''
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    const [accountSearchId, setAccountSearchId] = useState('');
    const [accountUser, setAccountUser] = useState(null);
    const [accountLoading, setAccountLoading] = useState(false);
    const [accountError, setAccountError] = useState('');
    const [newUsername, setNewUsername] = useState('');
    const [passwordResetValue, setPasswordResetValue] = useState('');
    const [deleteConfirm, setDeleteConfirm] = useState('');

    async function adminFetchUserById() {
        if (!accountSearchId) return;
        try {
            setAccountLoading(true);
            setAccountError('');
            setPasswordResetValue('');
            const response = await api.get(`/api/admin/users/${accountSearchId}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            setAccountUser(response.data);
            setNewUsername(response.data.username || '');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            setAccountUser(null);
            setAccountError(err?.response?.data?.error || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        } finally {
            setAccountLoading(false);
        }
    }

    async function adminUpdateUsername() {
        if (!accountUser || !newUsername || newUsername === accountUser.username) return;
        try {
            setAccountLoading(true);
            setAccountError('');
            await api.post(`/api/admin/users/${accountUser.id}/username`, { username: newUsername }, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            await adminFetchUserById();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –Ω–∏–∫–∞:', err);
            setAccountError(err?.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫');
        } finally {
            setAccountLoading(false);
        }
    }

    async function adminResetEmail() {
        if (!accountUser) return;
        try {
            setAccountLoading(true);
            setAccountError('');
            await api.post(`/api/admin/users/${accountUser.id}/reset-email`, {}, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            await adminFetchUserById();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ email:', err);
            setAccountError(err?.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å email');
        } finally {
            setAccountLoading(false);
        }
    }

    async function adminResetPassword() {
        if (!accountUser) return;
        try {
            setAccountLoading(true);
            setAccountError('');
            const res = await api.post(`/api/admin/users/${accountUser.id}/reset-password`, {}, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            setPasswordResetValue(res.data?.newPassword || '');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', err);
            setAccountError(err?.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å');
        } finally {
            setAccountLoading(false);
        }
    }

    async function adminDeleteAccount() {
        if (!accountUser) return;
        if (deleteConfirm !== `${accountUser.id}`) {
            setAccountError('–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
            return;
        }
        try {
            setAccountLoading(true);
            setAccountError('');
            await api.delete(`/api/admin/users/${accountUser.id}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            setAccountUser(null);
            setAccountSearchId('');
            setNewUsername('');
            setDeleteConfirm('');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', err);
            setAccountError(err?.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç');
        } finally {
            setAccountLoading(false);
        }
    }

    const checkAdminAccess = useCallback(async () => {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ AuthContext –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            if (authLoading) {
                return;
            }
            if (!authUser) {
                console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ AuthContext, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
                navigate('/login');
                return;
            }

            if (authUser.role !== 'admin') {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é');
                navigate('/');
                return;
            }

            console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è:', authUser.username);
            setUser(authUser);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞:', err);
            navigate('/login');
        } finally {
            setLoading(false);
        }
    }, [navigate, authUser, authLoading]); // –î–æ–±–∞–≤–ª—è–µ–º authUser –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    const fetchRequests = useCallback(async () => {
        try {
            const response = await api.get(`/api/admin/organization-requests?status=${statusFilter}&page=${pagination.page}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            setRequests(response.data.requests);
            setPagination(response.data.pagination);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', err);
        }
    }, [statusFilter, pagination.page]);

    const fetchStats = useCallback(async () => {
        try {
            const response = await api.get('/api/admin/stats', {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            setStats(response.data);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
        }
    }, []);
    
    // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –ó–∞–≥—Ä—É–∑–∫–∞ Trust Scores
    const fetchTrustScores = useCallback(async () => {
        setTrustLoading(true);
        try {
            const action = trustFilter === 'all' ? '' : trustFilter;
            const response = await api.get('/api/admin/trust-scores', {
                params: {
                    limit: trustPagination.limit,
                    offset: trustPagination.offset,
                    sort: trustSort,
                    action: action || undefined
                },
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
            if (response.data.success) {
                setTrustScores(response.data.data);
                setTrustPagination(prev => ({
                    ...prev,
                    total: response.data.pagination.total
                }));
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Trust Scores:', err);
        } finally {
            setTrustLoading(false);
        }
    }, [trustFilter, trustSort, trustPagination.limit, trustPagination.offset]);
    
    // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Trust Scores
    const fetchTrustStats = useCallback(async () => {
        try {
            const response = await api.get('/api/admin/trust-scores/stats', {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
            if (response.data.success) {
                setTrustStats(response.data.stats);
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Trust Scores:', err);
        }
    }, []);
    
    // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ Trust Score –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const recheckTrustScore = async (userId) => {
        setRecheckingUserId(userId);
        try {
            const response = await api.post(`/api/admin/trust-scores/${userId}/recheck`, {}, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
            if (response.data.success) {
                alert(`‚úÖ Trust Score –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${response.data.user.username}\n–ù–æ–≤—ã–π —Å—á–µ—Ç: ${response.data.trust_result.score}/100\n–î–µ–π—Å—Ç–≤–∏–µ: ${response.data.trust_result.action}`);
                fetchTrustScores();
                fetchTrustStats();
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ Trust Score:', err);
            alert('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ Trust Score');
        } finally {
            setRecheckingUserId(null);
        }
    };
    
    // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const banUser = async (userId, username) => {
        const reason = prompt(`–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`);
        if (!reason) return;
        
        try {
            const response = await api.post(`/api/admin/users/${userId}/ban`, 
                { reason },
                { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }}
            );
            
            if (response.data.success) {
                alert(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω`);
                fetchTrustScores();
                fetchTrustStats();
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            alert('‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    };
    
    // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const unbanUser = async (userId, username) => {
        if (!window.confirm(`–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}?`)) return;
        
        try {
            const response = await api.post(`/api/admin/users/${userId}/unban`, {}, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
            if (response.data.success) {
                alert(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —Ä–∞–∑–±–∞–Ω–µ–Ω`);
                fetchTrustScores();
                fetchTrustStats();
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            alert('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    };
    
    // üéÆ FEEDBACKS: –ó–∞–≥—Ä—É–∑–∫–∞ suspicious players
    const fetchSuspiciousPlayers = useCallback(async () => {
        setFeedbacksLoading(true);
        try {
            const response = await api.get('/api/admin/suspicious-players', {
                params: {
                    min_cheating_reports: feedbackFilter.min_cheating,
                    max_reputation: feedbackFilter.max_reputation,
                    limit: feedbackPagination.limit,
                    offset: feedbackPagination.offset,
                    sort: feedbackSort
                },
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
            if (response.data.success) {
                setSuspiciousPlayers(response.data.players);
                setFeedbackPagination(prev => ({
                    ...prev,
                    total: response.data.total
                }));
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ suspicious players:', err);
        } finally {
            setFeedbacksLoading(false);
        }
    }, [feedbackFilter, feedbackSort, feedbackPagination.limit, feedbackPagination.offset]);
    
    // üéÆ FEEDBACKS: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const fetchFeedbackStats = useCallback(async () => {
        try {
            const response = await api.get('/api/admin/feedback-stats', {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
            if (response.data.success) {
                setFeedbackStats(response.data);
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ feedbacks:', err);
        }
    }, []);
    
    // üìä MATCHZY: –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
    const fetchMatchzyAnomalies = useCallback(async () => {
        setStatsLoading(true);
        try {
            const response = await api.get('/api/player-stats/admin/stats-anomalies', {
                params: { reviewed: 'false', severity: null, limit: 50 },
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
            if (response.data.success) {
                setMatchzyAnomalies(response.data.anomalies);
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π:', err);
        } finally {
            setStatsLoading(false);
        }
    }, []);
    
    // üìä MATCHZY: –ó–∞–≥—Ä—É–∑–∫–∞ leaderboard
    const fetchLeaderboard = useCallback(async () => {
        try {
            const response = await api.get('/api/player-stats/leaderboard', {
                params: { metric: leaderboardMetric, limit: 20 }
            });
            
            if (response.data.success) {
                setLeaderboard(response.data.leaderboard);
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ leaderboard:', err);
        }
    }, [leaderboardMetric]);

    useEffect(() => {
        checkAdminAccess();
    }, [checkAdminAccess]);

    useEffect(() => {
        if (user && user.role === 'admin') {
            fetchRequests();
            fetchStats();
            fetchDefaultMapPool();
            fetchPreloadedAvatars();
            // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –ó–∞–≥—Ä—É–∂–∞–µ–º Trust Scores –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            if (activeTab === 'trustScores') {
                fetchTrustScores();
                fetchTrustStats();
            }
            // üéÆ FEEDBACKS: –ó–∞–≥—Ä—É–∂–∞–µ–º Feedbacks –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            if (activeTab === 'feedbacks') {
                fetchSuspiciousPlayers();
                fetchFeedbackStats();
            }
            // üìä MATCHZY: –ó–∞–≥—Ä—É–∂–∞–µ–º Stats –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            if (activeTab === 'matchzyStats') {
                fetchMatchzyAnomalies();
                fetchLeaderboard();
            }
        }
    }, [user, fetchRequests, fetchStats, activeTab, fetchTrustScores, fetchTrustStats, fetchSuspiciousPlayers, fetchFeedbackStats, fetchMatchzyAnomalies, fetchLeaderboard]);

    const fetchDefaultMapPool = useCallback(async () => {
        try {
            setMapPoolLoading(true);
            setMapPoolError(null);
            const res = await api.get('/api/admin/default-map-pool', {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            const maps = (res.data && res.data.maps) || [];
            setDefaultMapPool(maps);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –º–∞–ø–ø—É–ª–∞:', e);
            setMapPoolError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –º–∞–ø–ø—É–ª');
        } finally {
            setMapPoolLoading(false);
        }
    }, []);

    const moveMap = (index, dir) => {
        setDefaultMapPool(prev => {
            const arr = [...prev];
            const ni = index + dir;
            if (ni < 0 || ni >= arr.length) return arr;
            const tmp = arr[index];
            arr[index] = arr[ni];
            arr[ni] = tmp;
            return arr;
        });
    };

    const removeMap = (index) => {
        setDefaultMapPool(prev => prev.filter((_, i) => i !== index));
    };

    const addMap = () => {
        setDefaultMapPool(prev => [...prev, { map_name: '', display_order: prev.length + 1 }]);
    };

    const updateMapName = (index, value) => {
        setDefaultMapPool(prev => prev.map((m, i) => i === index ? { ...m, map_name: value } : m));
    };

    const saveDefaultMapPool = async () => {
        try {
            setMapPoolLoading(true);
            setMapPoolError(null);
            const maps = defaultMapPool
                .map(m => (m.map_name || '').trim().toLowerCase())
                .filter(Boolean)
                .map(n => n.replace(/^de[_-]?/, ''));
            if (maps.length === 0) {
                setMapPoolError('–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç');
                setMapPoolLoading(false);
                return;
            }
            await api.put('/api/admin/default-map-pool', { maps }, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            await fetchDefaultMapPool();
            alert('–î–µ—Ñ–æ–ª—Ç–Ω—ã–π –º–∞–ø–ø—É–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø—É–ª–∞:', e);
            setMapPoolError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞–ø–ø—É–ª');
        } finally {
            setMapPoolLoading(false);
        }
    };

    const fetchPreloadedAvatars = async () => {
        try {
            setPreAvatarsLoading(true);
            const res = await api.get('/api/admin/preloaded-avatars', {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            setPreAvatars((res.data && res.data.avatars) || []);
            // –∑–∞–≥—Ä—É–∑–∏–º —Ç–µ–∫—É—â–∏–π –¥–µ—Ñ–æ–ª—Ç
            try {
                const d = await api.get('/api/admin/preloaded-avatars/default', {
                    headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
                });
                setDefaultAvatarUrl(d.data?.default_url || null);
            } catch (e) {
                // ignore
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫:', e);
        } finally {
            setPreAvatarsLoading(false);
        }
    };

    const uploadPreloadedAvatar = async (file, name, category) => {
        if (!file) return;
        try {
            setPreAvatarsMsg('');
            setPreAvatarsLoading(true);
            const form = new FormData();
            if (name) form.append('name', name);
            form.append('image', file);
            const res = await api.post('/api/admin/preloaded-avatars', form, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            if (!res.data?.success) throw new Error(res.data?.error || '–û—à–∏–±–∫–∞');
            // –£—Å—Ç–∞–Ω–æ–≤–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è
            const createdFilename = res.data?.filename;
            if (createdFilename && category && category !== 'standard') {
                await api.patch(`/api/admin/preloaded-avatars/${encodeURIComponent(createdFilename)}/category`, { category }, {
                    headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
                });
            }
            setPreAvatarsMsg('–ó–∞–≥—Ä—É–∂–µ–Ω–æ');
            await fetchPreloadedAvatars();
        } catch (e) {
            const msg = e?.response?.data?.error || e?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
            setPreAvatarsMsg(`–û—à–∏–±–∫–∞: ${msg}`);
        } finally {
            setPreAvatarsLoading(false);
        }
    };

    const updateAvatarCategory = async (filename, category) => {
        if (!filename) return;
        try {
            await api.patch(`/api/admin/preloaded-avatars/${encodeURIComponent(filename)}/category`, { category }, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            // –û–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ç—á–∞
            setPreAvatars(prev => prev.map(a => a.filename === filename ? { ...a, category } : a));
        } catch (e) {
            alert(e?.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
        }
    };

    const deletePreloadedAvatar = async (filename) => {
        if (!filename) return;
        try {
            setPreAvatarsLoading(true);
            await api.delete(`/api/admin/preloaded-avatars/${encodeURIComponent(filename)}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            await fetchPreloadedAvatars();
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏:', e);
        } finally {
            setPreAvatarsLoading(false);
        }
    };

    const confirmSetDefault = (avatar) => {
        setCandidateDefault(avatar);
        setShowDefaultConfirm(true);
    };

    const applySetDefault = async () => {
        if (!candidateDefault) return;
        try {
            setPreAvatarsLoading(true);
            await api.put('/api/admin/preloaded-avatars/default', { filename: candidateDefault.filename }, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            setShowDefaultConfirm(false);
            setCandidateDefault(null);
            await fetchPreloadedAvatars();
        } catch (e) {
            alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä: ${e?.response?.data?.error || e.message}`);
        } finally {
            setPreAvatarsLoading(false);
        }
    };

    const fetchRequestDetails = async (requestId) => {
        try {
            const response = await api.get(`/api/admin/organization-requests/${requestId}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            setSelectedRequest(response.data);
            setShowRequestModal(true);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏:', err);
        }
    };

    const handleApprove = async () => {
        if (!selectedRequest) return;

        setActionLoading(true);
        try {
            await api.post(`/api/admin/organization-requests/${selectedRequest.id}/approve`, actionData, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
            setShowApproveModal(false);
            setShowRequestModal(false);
            setActionData({ contact_email: '', contact_phone: '', admin_comment: '' });
            fetchRequests();
            fetchStats();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', err);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
        } finally {
            setActionLoading(false);
        }
    };

    const handleReject = async () => {
        if (!selectedRequest || !actionData.admin_comment.trim()) {
            alert('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
            return;
        }

        setActionLoading(true);
        try {
            await api.post(`/api/admin/organization-requests/${selectedRequest.id}/reject`, {
                admin_comment: actionData.admin_comment
            }, {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            
            setShowRejectModal(false);
            setShowRequestModal(false);
            setActionData({ contact_email: '', contact_phone: '', admin_comment: '' });
            fetchRequests();
            fetchStats();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', err);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
        } finally {
            setActionLoading(false);
        }
    };

    const formatDate = (date) => {
        return new Date(date).toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    const getStatusClass = (status) => {
        switch (status) {
            case 'pending': return 'status-pending';
            case 'approved': return 'status-approved';
            case 'rejected': return 'status-rejected';
            default: return '';
        }
    };

    const getStatusText = (status) => {
        switch (status) {
            case 'pending': return '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏';
            case 'approved': return '–û–¥–æ–±—Ä–µ–Ω–∞';
            case 'rejected': return '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞';
            default: return status;
        }
    };

    if (loading) {
        return <div className="admin-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    }

    if (!user || user.role !== 'admin') {
        return <div className="admin-error">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</div>;
    }

    return (
        <div className="admin-panel">
            <div className="admin-header">
                <h1>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</h1>
                <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}!</p>
            </div>

            {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
            <div className="admin-navigation">
                <button 
                    className={`nav-tab ${activeTab === 'stats' ? 'active' : ''}`}
                    onClick={() => setActiveTab('stats')}
                >
                    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </button>
                <button 
                    className={`nav-tab ${activeTab === 'requests' ? 'active' : ''}`}
                    onClick={() => setActiveTab('requests')}
                >
                    –ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                </button>
                <button 
                    className={`nav-tab ${activeTab === 'accounts' ? 'active' : ''}`}
                    onClick={() => setActiveTab('accounts')}
                >
                    –£–ø—Ä. –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                </button>
                <button 
                    className={`nav-tab ${activeTab === 'mapPool' ? 'active' : ''}`}
                    onClick={() => setActiveTab('mapPool')}
                >
                    –ö–∞—Ä—Ç-–ø—É–ª (–¥–µ—Ñ–æ–ª—Ç)
                </button>
                <button 
                    className={`nav-tab ${activeTab === 'avatars' ? 'active' : ''}`}
                    onClick={() => setActiveTab('avatars')}
                >
                    –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
                </button>
                <button 
                    className={`nav-tab ${activeTab === 'trustScores' ? 'active' : ''}`}
                    onClick={() => setActiveTab('trustScores')}
                >
                    üõ°Ô∏è Trust Scores
                </button>
                <button 
                    className={`nav-tab ${activeTab === 'feedbacks' ? 'active' : ''}`}
                    onClick={() => setActiveTab('feedbacks')}
                >
                    üéÆ Feedbacks
                </button>
                <button 
                    className={`nav-tab ${activeTab === 'matchzyStats' ? 'active' : ''}`}
                    onClick={() => setActiveTab('matchzyStats')}
                >
                    üìä Stats
                </button>
            </div>

            {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
            {activeTab === 'accounts' && (
                <div className="accounts-tab">
                    <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏</h2>
                    <div className="account-search" style={{display:'flex', gap:8, alignItems:'center', margin:'12px 0'}}>
                        <input 
                            type="number" 
                            min="1"
                            value={accountSearchId}
                            onChange={(e)=>setAccountSearchId(e.target.value)}
                            className="map-input"
                            placeholder="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        />
                        <button className="btn" onClick={adminFetchUserById} disabled={accountLoading || !accountSearchId}>–ù–∞–π—Ç–∏</button>
                    </div>
                    {accountError && <div className="admin-error" style={{textAlign:'left'}}>{accountError}</div>}
                    {accountLoading && <div className="admin-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>}

                    {accountUser && (
                        <div className="account-card" style={{background:'#111', border:'1px solid #333', padding:16, marginTop:12}}>
                            <div style={{display:'grid', gridTemplateColumns:'repeat(auto-fit, minmax(220px, 1fr))', gap:12}}>
                                <div><div style={{color:'#aaa'}}>ID</div><div>{accountUser.id}</div></div>
                                <div><div style={{color:'#aaa'}}>–ù–∏–∫–Ω–µ–π–º</div><div>{accountUser.username || '-'}</div></div>
                                <div><div style={{color:'#aaa'}}>Email</div><div>{accountUser.email || '-'}</div></div>
                                <div><div style={{color:'#aaa'}}>–†–æ–ª—å</div><div>{accountUser.role}</div></div>
                                <div><div style={{color:'#aaa'}}>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</div><div>{accountUser.is_verified ? '–¥–∞' : '–Ω–µ—Ç'}</div></div>
                                <div><div style={{color:'#aaa'}}>Steam ID</div><div>{accountUser.steam_id || '-'}</div></div>
                                <div><div style={{color:'#aaa'}}>FACEIT ID</div><div>{accountUser.faceit_id || '-'}</div></div>
                                <div><div style={{color:'#aaa'}}>–°–æ–∑–¥–∞–Ω</div><div>{accountUser.created_at ? new Date(accountUser.created_at).toLocaleString() : '-'}</div></div>
                            </div>

                            <hr style={{borderColor:'#333', margin:'12px 0'}} />

                            <div style={{display:'flex', flexDirection:'column', gap:12}}>
                                <div style={{display:'flex', gap:8, alignItems:'center', flexWrap:'wrap'}}>
                                    <input 
                                        className="map-input"
                                        placeholder="–ù–æ–≤—ã–π –Ω–∏–∫"
                                        value={newUsername}
                                        onChange={(e)=>setNewUsername(e.target.value)}
                                    />
                                    <button className="btn" onClick={adminUpdateUsername} disabled={accountLoading || !newUsername || newUsername === accountUser.username}>–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫</button>
                                </div>

                                <div style={{display:'flex', gap:8, alignItems:'center', flexWrap:'wrap'}}>
                                    <button className="btn" onClick={adminResetEmail} disabled={accountLoading}>–°–±—Ä–æ—Å–∏—Ç—å email</button>
                                </div>

                                <div style={{display:'flex', gap:8, alignItems:'center', flexWrap:'wrap'}}>
                                    <button className="btn" onClick={adminResetPassword} disabled={accountLoading}>–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</button>
                                    {passwordResetValue && (
                                        <input className="map-input" value={passwordResetValue} readOnly onFocus={(e)=>e.target.select()} />
                                    )}
                                </div>

                                <div style={{display:'flex', gap:8, alignItems:'center', flexWrap:'wrap'}}>
                                    <input 
                                        className="map-input"
                                        placeholder={`–í–≤–µ–¥–∏—Ç–µ ${accountUser.id} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`}
                                        value={deleteConfirm}
                                        onChange={(e)=>setDeleteConfirm(e.target.value)}
                                    />
                                    <button className="btn-small danger" onClick={adminDeleteAccount} disabled={accountLoading}>–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</button>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            )}
            {activeTab === 'stats' && (
                <div className="stats-tab">
                    <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</h2>
                    <div className="stats-grid">
                        <div className="stat-card">
                            <div className="stat-value">{stats.users?.total_users || 0}</div>
                            <div className="stat-label">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                        </div>
                        <div className="stat-card">
                            <div className="stat-value">{stats.users?.admin_users || 0}</div>
                            <div className="stat-label">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</div>
                        </div>
                        <div className="stat-card">
                            <div className="stat-value">{stats.organizers?.total_organizers || 0}</div>
                            <div className="stat-label">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π</div>
                        </div>
                        <div className="stat-card">
                            <div className="stat-value">{stats.tournaments?.total_tournaments || 0}</div>
                            <div className="stat-label">–¢—É—Ä–Ω–∏—Ä–æ–≤</div>
                        </div>
                        <div className="stat-card">
                            <div className="stat-value">{stats.requests?.pending || 0}</div>
                            <div className="stat-label">–ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</div>
                        </div>
                        <div className="stat-card">
                            <div className="stat-value">{stats.requests?.approved || 0}</div>
                            <div className="stat-label">–û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫</div>
                        </div>
                    </div>
                </div>
            )}

            {activeTab === 'requests' && (
                <div className="requests-tab">
                    <div className="requests-header">
                        <h2>–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π</h2>
                        <div className="requests-filters">
                            <select 
                                value={statusFilter} 
                                onChange={(e) => setStatusFilter(e.target.value)}
                                className="status-filter"
                            >
                                <option value="all">–í—Å–µ –∑–∞—è–≤–∫–∏</option>
                                <option value="pending">–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</option>
                                <option value="approved">–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ</option>
                                <option value="rejected">–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ</option>
                            </select>
                        </div>
                    </div>

                    <div className="requests-list">
                        {requests.length > 0 ? (
                            requests.map(request => (
                                <div key={request.id} className="request-card">
                                    <div className="request-header">
                                        <div className="request-info">
                                            <h3>{request.organization_name}</h3>
                                            <p className="request-user">
                                                –û—Ç: <span>{request.username}</span> ({request.email})
                                            </p>
                                            <p className="request-date">
                                                {formatDate(request.created_at)}
                                            </p>
                                        </div>
                                        <div className="request-status">
                                            <span className={`status-badge ${getStatusClass(request.status)}`}>
                                                {getStatusText(request.status)}
                                            </span>
                                        </div>
                                    </div>
                                    
                                    <div className="request-description">
                                        <p>{request.description.length > 150 
                                            ? request.description.substring(0, 150) + '...' 
                                            : request.description}
                                        </p>
                                    </div>

                                    <div className="request-actions">
                                        <button 
                                            className="view-details-btn"
                                            onClick={() => fetchRequestDetails(request.id)}
                                        >
                                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                        </button>
                                    </div>
                                </div>
                            ))
                        ) : (
                            <div className="no-requests">–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                        )}
                    </div>

                    {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
                    {pagination.pages > 1 && (
                        <div className="pagination">
                            <button 
                                disabled={pagination.page === 1}
                                onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1 }))}
                            >
                                –ù–∞–∑–∞–¥
                            </button>
                            <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination.page} –∏–∑ {pagination.pages}</span>
                            <button 
                                disabled={pagination.page === pagination.pages}
                                onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1 }))}
                            >
                                –î–∞–ª–µ–µ
                            </button>
                        </div>
                    )}
                </div>
            )}

            {activeTab === 'mapPool' && (
                <div className="admin-map-pool">
                    <h2>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–∞—Ä—Ç-–ø—É–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</h2>
                    {mapPoolError && <div className="admin-error">{mapPoolError}</div>}
                    {mapPoolLoading && <div className="admin-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
                    <div className="map-pool-editor">
                        <div className="map-pool-list">
                            {defaultMapPool.map((m, idx) => (
                                <div key={idx} className="map-pool-item">
                                    <span className="order">{idx + 1}.</span>
                                    <input
                                        type="text"
                                        placeholder="ancient / dust2 / inferno ..."
                                        value={m.map_name}
                                        onChange={(e) => updateMapName(idx, e.target.value)}
                                        className="map-input"
                                    />
                                    <button onClick={() => moveMap(idx, -1)} className="btn-small">‚Üë</button>
                                    <button onClick={() => moveMap(idx, 1)} className="btn-small">‚Üì</button>
                                    <button onClick={() => removeMap(idx)} className="btn-small danger">‚úï</button>
                                </div>
                            ))}
                        </div>
                        <div className="map-pool-actions">
                            <button onClick={addMap} className="btn">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É</button>
                            <button onClick={saveDefaultMapPool} className="btn primary" disabled={mapPoolLoading}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </div>
                        <div className="map-pool-hint">
                            –†–∞–∑—Ä–µ—à–µ–Ω—ã –∫–ª—é—á–∏: ancient, dust2, inferno, mirage, nuke, overpass, vertigo, anubis, train
                        </div>
                        <hr style={{borderColor:'#333', margin:'16px 0'}} />
                        <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h3>
                        <UploadMapImage />
                        <UploadLogo />
                    </div>
                </div>
            )}

            {activeTab === 'avatars' && (
                <div className="admin-avatars">
                    <h2>–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏</h2>
                    <div className="avatar-upload-row" style={{display:'flex', gap:8, alignItems:'center', flexWrap:'wrap'}}>
                        <input type="text" placeholder="–∏–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" className="map-input" id="pre-avatar-name" />
                        <select className="status-filter" value={uploadCategory} onChange={(e)=>setUploadCategory(e.target.value)}>
                            <option value="standard">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ</option>
                            <option value="rare">–†–µ–¥–∫–∏–µ</option>
                            <option value="special">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ</option>
                            <option value="epic">–≠–ø–∏—á–µ—Å–∫–∏–µ</option>
                            <option value="legendary">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ</option>
                        </select>
                        <input type="file" accept="image/*" onChange={(e)=>{
                            const file = e.target.files && e.target.files[0];
                            const nameInput = document.getElementById('pre-avatar-name');
                            const name = nameInput ? nameInput.value : '';
                            uploadPreloadedAvatar(file, name, uploadCategory);
                            e.target.value='';
                        }} />
                        <button className="btn" disabled={preAvatarsLoading}>–ó–∞–≥—Ä—É–∑–∏—Ç—å 512x512</button>
                        {preAvatarsMsg && <span style={{color:'#aaa'}}>{preAvatarsMsg}</span>}
                    </div>

                    <div className="preloaded-grid" style={{display:'grid', gridTemplateColumns:'repeat(auto-fill, minmax(120px, 1fr))', gap:12, marginTop:16}}>
                        {preAvatarsLoading && <div className="admin-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
                        {!preAvatarsLoading && preAvatars.map((a) => (
                            <div key={a.filename} className="pre-avatar-card" style={{background:'#111', border:'1px solid #333', padding:8, display:'flex', flexDirection:'column', gap:6}}>
                                <div style={{position:'relative'}}>
                                    <img src={a.url} alt={a.filename} style={{width:'100%', aspectRatio:'1/1', objectFit:'cover', border:'1px solid #222'}} />
                                    <span style={{position:'absolute', top:6, right:6, background:'#000', border:'1px solid #333', padding:'2px 6px', fontSize:12}}>
                                        {a.category === 'legendary' ? '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ' : a.category === 'epic' ? '–≠–ø–∏—á–µ—Å–∫–∏–µ' : a.category === 'special' ? '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ' : a.category === 'rare' ? '–†–µ–¥–∫–∏–µ' : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ'}
                                    </span>
                                    {defaultAvatarUrl === a.url && (
                                        <span style={{position:'absolute', top:6, left:6, background:'#222', border:'1px solid #444', padding:'2px 6px', fontSize:12}}>–î–µ—Ñ–æ–ª—Ç</span>
                                    )}
                                </div>
                                <div style={{display:'flex', flexDirection:'column', gap:6}}>
                                    <select className="status-filter" value={a.category || 'standard'} onChange={(e)=>updateAvatarCategory(a.filename, e.target.value)}>
                                        <option value="standard">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ</option>
                                        <option value="rare">–†–µ–¥–∫–∏–µ</option>
                                        <option value="special">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ</option>
                                        <option value="epic">–≠–ø–∏—á–µ—Å–∫–∏–µ</option>
                                        <option value="legendary">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ</option>
                                    </select>
                                    <button className="btn-small danger" onClick={()=>deletePreloadedAvatar(a.filename)}>–£–¥–∞–ª–∏—Ç—å</button>
                                    {defaultAvatarUrl !== a.url && (
                                        <button className="btn-small" onClick={()=>confirmSetDefault(a)}>–°–¥–µ–ª–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–æ–º</button>
                                    )}
                                </div>
                            </div>
                        ))}
                        {!preAvatarsLoading && preAvatars.length === 0 && (
                            <div className="admin-loading" style={{gridColumn:'1/-1'}}>–ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–∫</div>
                        )}
                    </div>
                </div>
            )}

            {showDefaultConfirm && candidateDefault && (
                <div className="modal-overlay" onClick={()=>setShowDefaultConfirm(false)}>
                    <div className="modal-content action-modal" onClick={(e)=>e.stopPropagation()}>
                        <h3>–°–¥–µ–ª–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º</h3>
                        <p>–≠—Ç–æ—Ç –∞–≤–∞—Ç–∞—Ä –±—É–¥–µ—Ç —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</p>
                        <div style={{display:'flex', gap:12, alignItems:'center', margin:'8px 0'}}>
                            <img src={candidateDefault.url} alt={candidateDefault.filename} style={{width:80, height:80, objectFit:'cover', border:'1px solid #333'}} />
                            <span style={{color:'#aaa'}}>{candidateDefault.filename}</span>
                        </div>
                        <div className="modal-actions">
                            <button className="btn btn-secondary" onClick={applySetDefault} disabled={preAvatarsLoading}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                            <button className="btn btn-secondary" onClick={()=>setShowDefaultConfirm(false)}>–û—Ç–º–µ–Ω–∞</button>
                        </div>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ */}
            {showRequestModal && selectedRequest && (
                <div className="modal-overlay" onClick={() => setShowRequestModal(false)}>
                    <div className="modal-content request-modal" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <h3>–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</h3>
                            <button 
                                className="close-btn"
                                onClick={() => setShowRequestModal(false)}
                            >
                                ‚úï
                            </button>
                        </div>

                        <div className="request-details">
                            <div className="detail-section">
                                <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∏—Ç–µ–ª–µ</h4>
                                <div className="user-info">
                                    <img 
                                        src={ensureHttps(selectedRequest.avatar_url) || '/default-avatar.png'}
                                        alt={selectedRequest.username}
                                        className="user-avatar"
                                    />
                                    <div>
                                        <p><strong>–ù–∏–∫–Ω–µ–π–º:</strong> {selectedRequest.username}</p>
                                        <p><strong>Email:</strong> {selectedRequest.email}</p>
                                        <p><strong>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> {selectedRequest.user_id}</p>
                                    </div>
                                </div>
                            </div>

                            <div className="detail-section">
                                <h4>–î–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</h4>
                                <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {selectedRequest.organization_name}</p>
                                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong></p>
                                <div className="description-box">{selectedRequest.description}</div>
                                
                                {selectedRequest.website_url && (
                                    <p><strong>–°–∞–π—Ç:</strong> <a href={ensureHttps(selectedRequest.website_url)} target="_blank" rel="noopener noreferrer">{selectedRequest.website_url}</a></p>
                                )}
                                {selectedRequest.vk_url && (
                                    <p><strong>VK:</strong> <a href={ensureHttps(selectedRequest.vk_url)} target="_blank" rel="noopener noreferrer">{selectedRequest.vk_url}</a></p>
                                )}
                                {selectedRequest.telegram_url && (
                                    <p><strong>Telegram:</strong> <a href={ensureHttps(selectedRequest.telegram_url)} target="_blank" rel="noopener noreferrer">{selectedRequest.telegram_url}</a></p>
                                )}
                                
                                {selectedRequest.logo_url && (
                                    <div className="logo-section">
                                        <p><strong>–õ–æ–≥–æ—Ç–∏–ø:</strong></p>
                                        <img 
                                            src={ensureHttps(selectedRequest.logo_url)}
                                            alt="–õ–æ–≥–æ—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
                                            className="organization-logo"
                                        />
                                    </div>
                                )}
                            </div>

                            <div className="detail-section">
                                <p><strong>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</strong> {formatDate(selectedRequest.created_at)}</p>
                                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span className={`status-badge ${getStatusClass(selectedRequest.status)}`}>{getStatusText(selectedRequest.status)}</span></p>
                                
                                {selectedRequest.reviewed_by_username && (
                                    <>
                                        <p><strong>–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞:</strong> {selectedRequest.reviewed_by_username}</p>
                                        <p><strong>–î–∞—Ç–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:</strong> {formatDate(selectedRequest.reviewed_at)}</p>
                                    </>
                                )}
                                
                                {selectedRequest.admin_comment && (
                                    <div className="admin-comment">
                                        <p><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</strong></p>
                                        <div className="comment-box">{selectedRequest.admin_comment}</div>
                                    </div>
                                )}
                            </div>
                        </div>

                        {selectedRequest.status === 'pending' && (
                            <div className="modal-actions">
                                <button 
                                    className="approve-btn"
                                    onClick={() => setShowApproveModal(true)}
                                >
                                    –û–¥–æ–±—Ä–∏—Ç—å
                                </button>
                                <button 
                                    className="reject-btn"
                                    onClick={() => setShowRejectModal(true)}
                                >
                                    –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è */}
            {showApproveModal && (
                <div className="modal-overlay">
                    <div className="modal-content action-modal">
                        <h3>–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏</h3>
                        <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "{selectedRequest?.organization_name}"?</p>
                        
                        <div className="form-group">
                            <label>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                            <input 
                                type="email"
                                value={actionData.contact_email}
                                onChange={(e) => setActionData(prev => ({ ...prev, contact_email: e.target.value }))}
                                placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è email –∑–∞—è–≤–∏—Ç–µ–ª—è"
                            />
                        </div>
                        
                        <div className="form-group">
                            <label>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                            <input 
                                type="tel"
                                value={actionData.contact_phone}
                                onChange={(e) => setActionData(prev => ({ ...prev, contact_phone: e.target.value }))}
                                placeholder="+7 (900) 123-45-67"
                            />
                        </div>
                        
                        <div className="form-group">
                            <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                            <textarea 
                                value={actionData.admin_comment}
                                onChange={(e) => setActionData(prev => ({ ...prev, admin_comment: e.target.value }))}
                                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏..."
                                rows="3"
                            />
                        </div>
                        
                        <div className="modal-actions">
                            <button 
                                className="btn btn-secondary"
                                onClick={handleApprove}
                                disabled={actionLoading}
                            >
                                {actionLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–û–¥–æ–±—Ä–∏—Ç—å'}
                            </button>
                            <button 
                                className="btn btn-secondary"
                                onClick={() => setShowApproveModal(false)}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è */}
            {showRejectModal && (
                <div className="modal-overlay">
                    <div className="modal-content action-modal">
                        <h3>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏</h3>
                        <p>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "{selectedRequest?.organization_name}":</p>
                        
                        <div className="form-group">
                            <label>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è <span className="required">*</span>:</label>
                            <textarea 
                                value={actionData.admin_comment}
                                onChange={(e) => setActionData(prev => ({ ...prev, admin_comment: e.target.value }))}
                                placeholder="–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏..."
                                rows="4"
                                required
                            />
                        </div>
                        
                        <div className="modal-actions">
                            <button 
                                className="btn btn-secondary"
                                onClick={handleReject}
                                disabled={actionLoading || !actionData.admin_comment.trim()}
                            >
                                {actionLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'}
                            </button>
                            <button 
                                className="btn btn-secondary"
                                onClick={() => setShowRejectModal(false)}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    </div>
                </div>
            )}
            
            {/* üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –í–∫–ª–∞–¥–∫–∞ Trust Scores */}
            {activeTab === 'trustScores' && (
                <div className="trust-scores-tab">
                    <h2>üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ Trust Scores (–ê–Ω—Ç–∏—á–∏—Ç)</h2>
                    
                    {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                    {trustStats && (
                        <div className="trust-stats-grid">
                            <div className="stat-card">
                                <div className="stat-value">{trustStats.total_users || 0}</div>
                                <div className="stat-label">–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ</div>
                            </div>
                            <div className="stat-card stat-trusted">
                                <div className="stat-value">{trustStats.trusted || 0}</div>
                                <div className="stat-label">‚úÖ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ</div>
                            </div>
                            <div className="stat-card stat-normal">
                                <div className="stat-value">{trustStats.normal || 0}</div>
                                <div className="stat-label">–û–±—ã—á–Ω—ã–µ</div>
                            </div>
                            <div className="stat-card stat-watch">
                                <div className="stat-value">{trustStats.watch_list || 0}</div>
                                <div className="stat-label">‚ö†Ô∏è –ù–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ</div>
                            </div>
                            <div className="stat-card stat-soft-ban">
                                <div className="stat-value">{trustStats.soft_bans || 0}</div>
                                <div className="stat-label">–¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</div>
                            </div>
                            <div className="stat-card stat-banned">
                                <div className="stat-value">{trustStats.banned_users || 0}</div>
                                <div className="stat-label">‚ùå –í –±–∞–Ω–µ</div>
                            </div>
                            <div className="stat-card">
                                <div className="stat-value">{trustStats.avg_score || 0}</div>
                                <div className="stat-label">–°—Ä–µ–¥–Ω–∏–π Trust Score</div>
                            </div>
                            <div className="stat-card stat-vac">
                                <div className="stat-value">{trustStats.users_with_vac || 0}</div>
                                <div className="stat-label">–° VAC –±–∞–Ω–∞–º–∏</div>
                            </div>
                        </div>
                    )}
                    
                    {/* –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
                    <div className="trust-filters">
                        <div className="filter-group">
                            <label>–§–∏–ª—å—Ç—Ä –ø–æ –¥–µ–π—Å—Ç–≤–∏—é:</label>
                            <select 
                                className="status-filter"
                                value={trustFilter}
                                onChange={(e) => {
                                    setTrustFilter(e.target.value);
                                    setTrustPagination(prev => ({ ...prev, offset: 0 }));
                                }}
                            >
                                <option value="all">–í—Å–µ</option>
                                <option value="TRUSTED">‚úÖ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ</option>
                                <option value="NORMAL">–û–±—ã—á–Ω—ã–µ</option>
                                <option value="WATCH_LIST">‚ö†Ô∏è –ù–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ</option>
                                <option value="SOFT_BAN">–¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</option>
                                <option value="HARD_BAN">‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
                            </select>
                        </div>
                        
                        <div className="filter-group">
                            <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
                            <select 
                                className="status-filter"
                                value={trustSort}
                                onChange={(e) => setTrustSort(e.target.value)}
                            >
                                <option value="score_asc">–ü–æ —Å—á–µ—Ç—É (–≤–æ–∑—Ä.)</option>
                                <option value="score_desc">–ü–æ —Å—á–µ—Ç—É (—É–±—ã–≤.)</option>
                                <option value="recent">–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ)</option>
                                <option value="oldest">–ü–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ)</option>
                            </select>
                        </div>
                    </div>
                    
                    {/* –¢–∞–±–ª–∏—Ü–∞ Trust Scores */}
                    {trustLoading ? (
                        <div className="admin-loading">–ó–∞–≥—Ä—É–∑–∫–∞ Trust Scores...</div>
                    ) : (
                        <>
                            <div className="trust-scores-table">
                                <table className="admin-table">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                                            <th>Trust Score</th>
                                            <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                                            <th>–ê–∫–∫–∞—É–Ω—Ç</th>
                                            <th>CS2</th>
                                            <th>Steam</th>
                                            <th>–ë–∞–Ω—ã</th>
                                            <th>–°—Ç–∞—Ç—É—Å</th>
                                            <th>–ü—Ä–æ–≤–µ—Ä–µ–Ω</th>
                                            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {trustScores.length === 0 ? (
                                            <tr>
                                                <td colSpan="11" style={{ textAlign: 'center', padding: '32px', color: '#999' }}>
                                                    –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                                                </td>
                                            </tr>
                                        ) : (
                                            trustScores.map((ts) => (
                                                <tr key={ts.id} className={`trust-row trust-action-${ts.trust_action.toLowerCase()}`}>
                                                    <td>{ts.user_id}</td>
                                                    <td>
                                                        <div className="user-cell">
                                                            <strong>{ts.username}</strong>
                                                            <span className="user-email">{ts.email}</span>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div className={`trust-score-badge score-${Math.floor(ts.trust_score / 20)}`}>
                                                            {ts.trust_score}/100
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span className={`trust-action-badge action-${ts.trust_action.toLowerCase()}`}>
                                                            {ts.trust_action === 'TRUSTED' && '‚úÖ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π'}
                                                            {ts.trust_action === 'NORMAL' && '–û–±—ã—á–Ω—ã–π'}
                                                            {ts.trust_action === 'WATCH_LIST' && '‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å'}
                                                            {ts.trust_action === 'SOFT_BAN' && 'üî∏ –ü—Ä–æ–≤–µ—Ä–∫–∞'}
                                                            {ts.trust_action === 'HARD_BAN' && '‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <div className="account-info">
                                                            <span>{ts.account_age_days || 0} –¥–Ω.</span>
                                                            <span className="info-secondary">Lvl {ts.steam_level || 0}</span>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span className="cs2-hours">{ts.cs2_hours || 0}—á</span>
                                                    </td>
                                                    <td>
                                                        <a 
                                                            href={ts.steam_url} 
                                                            target="_blank" 
                                                            rel="noopener noreferrer"
                                                            className="steam-link"
                                                        >
                                                            {ts.profile_public ? 'üîì' : 'üîí'} –ü—Ä–æ—Ñ–∏–ª—å
                                                        </a>
                                                    </td>
                                                    <td>
                                                        <div className="bans-info">
                                                            {ts.vac_bans > 0 && <span className="ban-badge vac">VAC: {ts.vac_bans}</span>}
                                                            {ts.game_bans > 0 && <span className="ban-badge game">Game: {ts.game_bans}</span>}
                                                            {ts.vac_bans === 0 && ts.game_bans === 0 && <span className="ban-badge clean">–ß–∏—Å—Ç–æ</span>}
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span className={`user-status ${ts.is_banned ? 'banned' : 'active'}`}>
                                                            {ts.is_banned ? '‚ùå –ó–∞–±–∞–Ω–µ–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <span className="checked-date">
                                                            {new Date(ts.checked_at).toLocaleDateString('ru-RU')}
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <div className="trust-actions">
                                                            <button
                                                                className="btn-small"
                                                                onClick={() => recheckTrustScore(ts.user_id)}
                                                                disabled={recheckingUserId === ts.user_id}
                                                                title="–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å Trust Score"
                                                            >
                                                                {recheckingUserId === ts.user_id ? '‚è≥' : 'üîÑ'}
                                                            </button>
                                                            {!ts.is_banned ? (
                                                                <button
                                                                    className="btn-small danger"
                                                                    onClick={() => banUser(ts.user_id, ts.username)}
                                                                    title="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                                                                >
                                                                    üö´
                                                                </button>
                                                            ) : (
                                                                <button
                                                                    className="btn-small"
                                                                    onClick={() => unbanUser(ts.user_id, ts.username)}
                                                                    title="–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                                                                >
                                                                    ‚úÖ
                                                                </button>
                                                            )}
                                                        </div>
                                                    </td>
                                                </tr>
                                            ))
                                        )}
                                    </tbody>
                                </table>
                            </div>
                            
                            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
                            {trustPagination.total > trustPagination.limit && (
                                <div className="trust-pagination">
                                    <button
                                        className="btn"
                                        onClick={() => setTrustPagination(prev => ({
                                            ...prev,
                                            offset: Math.max(0, prev.offset - prev.limit)
                                        }))}
                                        disabled={trustPagination.offset === 0}
                                    >
                                        ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                                    </button>
                                    <span className="pagination-info">
                                        –ü–æ–∫–∞–∑–∞–Ω–æ {trustPagination.offset + 1}‚Äî{Math.min(trustPagination.offset + trustPagination.limit, trustPagination.total)} –∏–∑ {trustPagination.total}
                                    </span>
                                    <button
                                        className="btn"
                                        onClick={() => setTrustPagination(prev => ({
                                            ...prev,
                                            offset: prev.offset + prev.limit
                                        }))}
                                        disabled={trustPagination.offset + trustPagination.limit >= trustPagination.total}
                                    >
                                        –°–ª–µ–¥—É—é—â–∞—è ‚Üí
                                    </button>
                                </div>
                            )}
                            
                            {/* –õ–µ–≥–µ–Ω–¥–∞ */}
                            <div className="trust-legend">
                                <h3>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ Trust Score:</h3>
                                <div className="legend-grid">
                                    <div className="legend-item">
                                        <span className="trust-score-badge score-4">80-100</span>
                                        <span>‚úÖ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π - –æ–ø—ã—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, —á–∏—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è</span>
                                    </div>
                                    <div className="legend-item">
                                        <span className="trust-score-badge score-3">60-79</span>
                                        <span>–û–±—ã—á–Ω—ã–π - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>
                                    </div>
                                    <div className="legend-item">
                                        <span className="trust-score-badge score-2">40-59</span>
                                        <span>‚ö†Ô∏è –ù–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ - –ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ</span>
                                    </div>
                                    <div className="legend-item">
                                        <span className="trust-score-badge score-1">20-39</span>
                                        <span>üî∏ –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç</span>
                                    </div>
                                    <div className="legend-item">
                                        <span className="trust-score-badge score-0">0-19</span>
                                        <span>‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π —Å—á–µ—Ç</span>
                                    </div>
                                </div>
                                <p className="legend-note">
                                    <strong>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞:</strong> VAC –±–∞–Ω &lt;1 –≥–æ–¥–∞, Game –±–∞–Ω &lt;6 –º–µ—Å—è—Ü–µ–≤<br />
                                    <strong>–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞:</strong> –†–∞–∑ –≤ 7 –¥–Ω–µ–π –ø—Ä–∏ –≤—Ö–æ–¥–µ
                                </p>
                            </div>
                        </>
                    )}
                </div>
            )}
            
            {/* üéÆ FEEDBACKS: –í–∫–ª–∞–¥–∫–∞ Match Feedbacks */}
            {activeTab === 'feedbacks' && (
                <div className="feedbacks-tab">
                    <h2>üéÆ Match Feedbacks & Reputation</h2>
                    
                    {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                    {feedbackStats && (
                        <div className="feedback-stats-section">
                            <h3>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                            <div className="feedback-stats-grid">
                                <div className="stat-card">
                                    <div className="stat-value">{feedbackStats.feedback?.total_feedbacks || 0}</div>
                                    <div className="stat-label">–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫</div>
                                </div>
                                <div className="stat-card">
                                    <div className="stat-value">{feedbackStats.completion?.completion_rate || 0}%</div>
                                    <div className="stat-label">Completion Rate</div>
                                </div>
                                <div className="stat-card stat-danger">
                                    <div className="stat-value">{feedbackStats.feedback?.cheating_reports || 0}</div>
                                    <div className="stat-label">–ñ–∞–ª–æ–± –Ω–∞ —á–∏—Ç–∏–Ω–≥</div>
                                </div>
                                <div className="stat-card stat-warning">
                                    <div className="stat-value">{feedbackStats.feedback?.toxic_reports || 0}</div>
                                    <div className="stat-label">–ñ–∞–ª–æ–± –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å</div>
                                </div>
                                <div className="stat-card">
                                    <div className="stat-value">{feedbackStats.reputation?.avg_reputation || 50}</div>
                                    <div className="stat-label">–°—Ä–µ–¥–Ω—è—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è</div>
                                </div>
                                <div className="stat-card stat-info">
                                    <div className="stat-value">{feedbackStats.reputation?.flagged_for_cheating || 0}</div>
                                    <div className="stat-label">–ó–∞—Ñ–ª–∞–≥–∞–Ω–æ (3+ –∂–∞–ª–æ–±)</div>
                                </div>
                                <div className="stat-card stat-success">
                                    <div className="stat-value">{feedbackStats.coins?.total_coins_earned || 0}</div>
                                    <div className="stat-label">Coins —Ä–æ–∑–¥–∞–Ω–æ</div>
                                </div>
                                <div className="stat-card">
                                    <div className="stat-value">{feedbackStats.reputation?.players_with_reputation || 0}</div>
                                    <div className="stat-label">–ò–≥—Ä–æ–∫–æ–≤ —Å —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π</div>
                                </div>
                            </div>
                        </div>
                    )}
                    
                    {/* –§–∏–ª—å—Ç—Ä—ã */}
                    <div className="feedback-filters">
                        <div className="filter-group">
                            <label>–ú–∏–Ω. –∂–∞–ª–æ–± –Ω–∞ —á–∏—Ç:</label>
                            <input 
                                type="number"
                                min="1"
                                value={feedbackFilter.min_cheating}
                                onChange={(e) => setFeedbackFilter(prev => ({ 
                                    ...prev, 
                                    min_cheating: parseInt(e.target.value) || 1 
                                }))}
                                className="map-input"
                                style={{width: '80px'}}
                            />
                        </div>
                        
                        <div className="filter-group">
                            <label>–ú–∞–∫—Å. —Ä–µ–ø—É—Ç–∞—Ü–∏—è:</label>
                            <input 
                                type="number"
                                min="0"
                                max="100"
                                value={feedbackFilter.max_reputation}
                                onChange={(e) => setFeedbackFilter(prev => ({ 
                                    ...prev, 
                                    max_reputation: parseInt(e.target.value) || 50 
                                }))}
                                className="map-input"
                                style={{width: '80px'}}
                            />
                        </div>
                        
                        <div className="filter-group">
                            <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
                            <select 
                                className="status-filter"
                                value={feedbackSort}
                                onChange={(e) => setFeedbackSort(e.target.value)}
                            >
                                <option value="cheating_desc">–ü–æ –∂–∞–ª–æ–±–∞–º (—É–±—ã–≤.)</option>
                                <option value="reputation_asc">–ü–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (–≤–æ–∑—Ä.)</option>
                                <option value="reputation_desc">–ü–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (—É–±—ã–≤.)</option>
                                <option value="recent">–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ)</option>
                            </select>
                        </div>
                        
                        <button 
                            className="btn"
                            onClick={() => {
                                setFeedbackPagination(prev => ({ ...prev, offset: 0 }));
                                fetchSuspiciousPlayers();
                            }}
                        >
                            üîç –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                        </button>
                    </div>
                    
                    {/* –¢–∞–±–ª–∏—Ü–∞ suspicious players */}
                    {feedbacksLoading ? (
                        <div className="admin-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...</div>
                    ) : (
                        <>
                            <h3>üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ ({feedbackPagination.total})</h3>
                            
                            <div className="suspicious-players-table">
                                <table className="admin-table">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>–ò–≥—Ä–æ–∫</th>
                                            <th>–†–µ–ø—É—Ç–∞—Ü–∏—è</th>
                                            <th>Trust Score</th>
                                            <th>–ñ–∞–ª–æ–± –Ω–∞ —á–∏—Ç</th>
                                            <th>–ü–æ–¥–æ–∑—Ä./–í—Å–µ–≥–æ</th>
                                            <th>–¢–æ–∫—Å–∏—á.</th>
                                            <th>–°—Ç–∞—Ç—É—Å</th>
                                            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {suspiciousPlayers.length === 0 ? (
                                            <tr>
                                                <td colSpan="9" style={{ textAlign: 'center', padding: '32px', color: '#999' }}>
                                                    {feedbackStats?.reputation?.flagged_for_cheating > 0 ? 
                                                        '–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º' :
                                                        '–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ üéâ'
                                                    }
                                                </td>
                                            </tr>
                                        ) : (
                                            suspiciousPlayers.map((player) => (
                                                <tr 
                                                    key={player.user_id}
                                                    className={`suspicious-row ${player.cheating_reports >= 5 ? 'critical' : ''}`}
                                                >
                                                    <td>{player.user_id}</td>
                                                    <td>
                                                        <div className="user-cell">
                                                            <strong>{player.username}</strong>
                                                            <span className="user-email">{player.email}</span>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div className={`reputation-badge rep-${Math.floor(player.reputation_index / 20)}`}>
                                                            {player.reputation_index}/100
                                                        </div>
                                                    </td>
                                                    <td>
                                                        {player.trust_score ? (
                                                            <span className="trust-badge-small">{player.trust_score}/100</span>
                                                        ) : (
                                                            <span style={{color: '#666'}}>-</span>
                                                        )}
                                                    </td>
                                                    <td>
                                                        <span className={`danger-badge ${player.cheating_reports >= 5 ? 'critical' : ''}`}>
                                                            {player.cheating_reports}
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <span style={{color: player.suspicious_reports > 0 ? '#ffaa00' : '#999'}}>
                                                            {player.suspicious_reports} / {player.total_feedbacks}
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <span className={player.toxic_behavior > 0 ? 'toxic-badge' : ''}>
                                                            {player.toxic_behavior || 0}
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <span className={`user-status ${player.is_banned ? 'banned' : 'active'}`}>
                                                            {player.is_banned ? '‚ùå Banned' : '‚úÖ Active'}
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <div className="feedback-actions">
                                                            <button
                                                                className="btn-small"
                                                                onClick={() => {
                                                                    const reports = player.recent_negative_reports || [];
                                                                    const details = `
–ò–≥—Ä–æ–∫: ${player.username}
–†–µ–ø—É—Ç–∞—Ü–∏—è: ${player.reputation_index}/100
–ñ–∞–ª–æ–± –Ω–∞ —á–∏—Ç: ${player.cheating_reports}
–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: ${player.suspicious_reports}
–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: ${player.total_feedbacks}

–ù–µ–¥–∞–≤–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:
${reports.map((r, i) => `${i+1}. ${r.reviewer_name}: ${r.fairness_rating || r.behavior_rating} (${r.tournament_name})`).join('\n')}
                                                                    `.trim();
                                                                    alert(details);
                                                                }}
                                                                title="–î–µ—Ç–∞–ª–∏"
                                                            >
                                                                üîç
                                                            </button>
                                                            {!player.is_banned ? (
                                                                <button
                                                                    className="btn-small danger"
                                                                    onClick={() => banUser(player.user_id, player.username)}
                                                                    title="–ó–∞–±–∞–Ω–∏—Ç—å"
                                                                >
                                                                    üö´
                                                                </button>
                                                            ) : (
                                                                <button
                                                                    className="btn-small"
                                                                    onClick={() => unbanUser(player.user_id, player.username)}
                                                                    title="–†–∞–∑–±–∞–Ω–∏—Ç—å"
                                                                >
                                                                    ‚úÖ
                                                                </button>
                                                            )}
                                                        </div>
                                                    </td>
                                                </tr>
                                            ))
                                        )}
                                    </tbody>
                                </table>
                            </div>
                            
                            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
                            {feedbackPagination.total > feedbackPagination.limit && (
                                <div className="feedback-pagination">
                                    <button
                                        className="btn"
                                        onClick={() => setFeedbackPagination(prev => ({
                                            ...prev,
                                            offset: Math.max(0, prev.offset - prev.limit)
                                        }))}
                                        disabled={feedbackPagination.offset === 0}
                                    >
                                        ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                                    </button>
                                    <span className="pagination-info">
                                        –ü–æ–∫–∞–∑–∞–Ω–æ {feedbackPagination.offset + 1}‚Äî{Math.min(feedbackPagination.offset + feedbackPagination.limit, feedbackPagination.total)} –∏–∑ {feedbackPagination.total}
                                    </span>
                                    <button
                                        className="btn"
                                        onClick={() => setFeedbackPagination(prev => ({
                                            ...prev,
                                            offset: prev.offset + prev.limit
                                        }))}
                                        disabled={feedbackPagination.offset + feedbackPagination.limit >= feedbackPagination.total}
                                    >
                                        –°–ª–µ–¥—É—é—â–∞—è ‚Üí
                                    </button>
                                </div>
                            )}
                            
                            {/* –ü–æ—è—Å–Ω–µ–Ω–∏–µ */}
                            <div className="feedback-legend">
                                <h4>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫:</h4>
                                <ul>
                                    <li>3+ –∂–∞–ª–æ–±—ã –Ω–∞ —á–∏—Ç–∏–Ω–≥ –ò–õ–ò</li>
                                    <li>–†–µ–ø—É—Ç–∞—Ü–∏—è ‚â§50/100</li>
                                </ul>
                                <p className="legend-note">
                                    <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ —Å 5+ –∂–∞–ª–æ–±–∞–º–∏ –Ω–∞ —á–∏—Ç–∏–Ω–≥ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
                                    –ò–≥—Ä–æ–∫–∏ —Å –Ω–∏–∑–∫–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–æ–∫—Å–∏—á–Ω—ã–º–∏, –∞ –Ω–µ —á–∏—Ç–µ—Ä–∞–º–∏.
                                </p>
                            </div>
                        </>
                    )}
                </div>
            )}
            
            {/* üìä MATCHZY STATS: –í–∫–ª–∞–¥–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
            {activeTab === 'matchzyStats' && (
                <div className="matchzy-stats-tab">
                    <h2>üìä MatchZy Detailed Statistics</h2>
                    
                    {/* –ê–Ω–æ–º–∞–ª–∏–∏ */}
                    <div className="anomalies-section">
                        <h3>üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ ({matchzyAnomalies.length})</h3>
                        
                        {statsLoading ? (
                            <div className="admin-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π...</div>
                        ) : matchzyAnomalies.length === 0 ? (
                            <div className="stats-empty">
                                üéâ –ù–µ—Ç –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π! –í—Å–µ —á–∏—Å—Ç–æ.
                            </div>
                        ) : (
                            <div className="anomalies-table">
                                <table className="admin-table">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>–ò–≥—Ä–æ–∫</th>
                                            <th>–ê–Ω–æ–º–∞–ª–∏—è</th>
                                            <th>Severity</th>
                                            <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                                            <th>–¢—É—Ä–Ω–∏—Ä/–ú–∞—Ç—á</th>
                                            <th>–î–∞—Ç–∞</th>
                                            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {matchzyAnomalies.map(anomaly => (
                                            <tr key={anomaly.id} className={`anomaly-row severity-${anomaly.severity.toLowerCase()}`}>
                                                <td>{anomaly.user_id}</td>
                                                <td>
                                                    <div className="user-cell">
                                                        <strong>{anomaly.username}</strong>
                                                        <span className="user-email">{anomaly.email}</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span className="anomaly-type">
                                                        {anomaly.anomaly_type === 'high_hs_percentage' && 'HS% Too High'}
                                                        {anomaly.anomaly_type === 'sudden_improvement' && 'Sudden Improvement'}
                                                        {anomaly.anomaly_type === 'low_utility_high_kills' && 'Low Utility / High K/D'}
                                                        {anomaly.anomaly_type === 'perfect_clutches' && 'Perfect Clutches'}
                                                        {anomaly.anomaly_type === 'prefiring_pattern' && 'Prefiring Pattern'}
                                                    </span>
                                                </td>
                                                <td>
                                                    <span className={`severity-badge severity-${anomaly.severity.toLowerCase()}`}>
                                                        {anomaly.severity === 'CRITICAL' && 'üî¥ CRITICAL'}
                                                        {anomaly.severity === 'HIGH' && '‚ö†Ô∏è HIGH'}
                                                        {anomaly.severity === 'MEDIUM' && 'üü° MEDIUM'}
                                                        {anomaly.severity === 'LOW' && 'üü¢ LOW'}
                                                    </span>
                                                </td>
                                                <td>
                                                    <span className="anomaly-value">
                                                        {anomaly.value?.toFixed(1) || '-'}
                                                        {anomaly.expected_value && (
                                                            <span className="anomaly-expected"> (exp: {anomaly.expected_value.toFixed(0)})</span>
                                                        )}
                                                    </span>
                                                </td>
                                                <td>
                                                    <span className="anomaly-context">
                                                        {anomaly.tournament_name || 'Unknown'}<br/>
                                                        <span style={{color: '#666', fontSize: '11px'}}>Match #{anomaly.match_id}</span>
                                                    </span>
                                                </td>
                                                <td>
                                                    <span className="anomaly-date">
                                                        {new Date(anomaly.detected_at).toLocaleDateString('ru-RU')}
                                                    </span>
                                                </td>
                                                <td>
                                                    <div className="anomaly-actions">
                                                        <button
                                                            className="btn-small"
                                                            onClick={() => {
                                                                alert(`–ê–Ω–æ–º–∞–ª–∏—è: ${anomaly.description}\n\nEvidence: ${JSON.stringify(anomaly.evidence, null, 2)}`);
                                                            }}
                                                            title="–î–µ—Ç–∞–ª–∏"
                                                        >
                                                            üîç
                                                        </button>
                                                        <button
                                                            className="btn-small danger"
                                                            onClick={() => banUser(anomaly.user_id, anomaly.username)}
                                                            title="–ó–∞–±–∞–Ω–∏—Ç—å"
                                                        >
                                                            üö´
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        )}
                    </div>
                    
                    {/* Leaderboards */}
                    <div className="leaderboards-section">
                        <div className="leaderboard-header">
                            <h3>üèÜ Leaderboards</h3>
                            <select 
                                className="status-filter"
                                value={leaderboardMetric}
                                onChange={(e) => {
                                    setLeaderboardMetric(e.target.value);
                                    setTimeout(fetchLeaderboard, 100);
                                }}
                            >
                                <option value="rating">Rating</option>
                                <option value="kd">K/D Ratio</option>
                                <option value="hs">Headshot %</option>
                                <option value="adr">ADR</option>
                                <option value="clutch">Clutch Success</option>
                            </select>
                        </div>
                        
                        {leaderboard.length === 0 ? (
                            <div className="stats-empty">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è leaderboard</div>
                        ) : (
                            <div className="leaderboard-table">
                                <table className="admin-table">
                                    <thead>
                                        <tr>
                                            <th>#</th>
                                            <th>–ò–≥—Ä–æ–∫</th>
                                            <th>–ú–∞—Ç—á–∏</th>
                                            <th>W/L</th>
                                            <th>K/D</th>
                                            <th>ADR</th>
                                            <th>HS%</th>
                                            <th>Rating</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {leaderboard.map((player, index) => (
                                            <tr key={player.user_id} className={index < 3 ? 'top-player' : ''}>
                                                <td>
                                                    <span className="rank-number">
                                                        {index + 1}
                                                        {index === 0 && ' ü•á'}
                                                        {index === 1 && ' ü•à'}
                                                        {index === 2 && ' ü•â'}
                                                    </span>
                                                </td>
                                                <td>
                                                    <div className="leaderboard-player">
                                                        <img 
                                                            src={player.avatar_url || '/default-avatar.png'}
                                                            alt={player.username}
                                                            className="player-avatar-small"
                                                            onError={(e) => { e.target.src = '/default-avatar.png'; }}
                                                        />
                                                        <strong>{player.username}</strong>
                                                    </div>
                                                </td>
                                                <td>{player.total_matches}</td>
                                                <td>
                                                    <span className="wl-stat">
                                                        {player.total_wins}W-{player.total_losses}L
                                                    </span>
                                                </td>
                                                <td className={player.kd_ratio > 1 ? 'good' : 'bad'}>
                                                    {player.kd_ratio?.toFixed(2)}
                                                </td>
                                                <td>{player.avg_adr?.toFixed(0)}</td>
                                                <td>{player.avg_hs_percentage?.toFixed(0)}%</td>
                                                <td className="rating-highlight">
                                                    {player.avg_rating?.toFixed(2)}
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        )}
                    </div>
                    
                    {/* –ò–Ω—Ñ–æ */}
                    <div className="matchzy-info">
                        <h4>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                        <p>
                            –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç MatchZy plugin –Ω–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö.
                            –ê–Ω–æ–º–∞–ª–∏–∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å Trust Score —Å–∏—Å—Ç–µ–º–æ–π.
                        </p>
                        <p className="info-note">
                            <strong>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MatchZy:</strong> –î–æ–±–∞–≤—å—Ç–µ webhook URL –≤ –∫–æ–Ω—Ñ–∏–≥ —Å–µ—Ä–≤–µ—Ä–∞.
                            –î–µ—Ç–∞–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: –ì–û–¢–û–í–û_–î–ï–¢–ê–õ–¨–ù–ê–Ø_–°–¢–ê–¢–ò–°–¢–ò–ö–ê_MATCHZY.md
                        </p>
                    </div>
                </div>
            )}
        </div>
    );
}

export default AdminPanel; 