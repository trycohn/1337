import React, { useState, useEffect, useRef } from 'react';
import api from '../axios';
import './Messenger.css';
import ChatList from './ChatList';
import ChatWindow from './ChatWindow';
import './AttachmentModal.css';
import { getSocketInstance, authenticateSocket } from '../services/socketClient_final';

function Messenger() {
    const [chats, setChats] = useState([]);
    const [activeChat, setActiveChat] = useState(null);
    const [messages, setMessages] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [socket, setSocket] = useState(null);
    const [newMessage, setNewMessage] = useState('');
    const [unreadCounts, setUnreadCounts] = useState({});
    const messagesEndRef = useRef(null);
    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–ª–æ–∂–µ–Ω–∏—è
    const [showAttachmentModal, setShowAttachmentModal] = useState(false);
    const [attachmentFile, setAttachmentFile] = useState(null);
    const [attachmentType, setAttachmentType] = useState(null);
    const [attachmentPreviewUrl, setAttachmentPreviewUrl] = useState('');
    const [attachmentCaption, setAttachmentCaption] = useState('');
    const [isClosing, setIsClosing] = useState(false);

    const activeChatRef = useRef(null);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    useEffect(() => {
        const handleResize = () => {
            setIsMobile(window.innerWidth <= 768);
        };
        
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∫ main —ç–ª–µ–º–µ–Ω—Ç—É –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
    useEffect(() => {
        const mainElement = document.querySelector('main');
        if (mainElement) {
            mainElement.classList.add('messenger-page');
        }
        
        return () => {
            if (mainElement) {
                mainElement.classList.remove('messenger-page');
            }
        };
    }, []);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
    useEffect(() => {
        const token = localStorage.getItem('token');
        if (!token) return;

        console.log('üîß [Messenger] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º...');

        // –ü–æ–ª—É—á–∞–µ–º singleton instance –Ω–∞—à–µ–≥–æ Socket.IO –∫–ª–∏–µ–Ω—Ç–∞
        const socketClient = getSocketInstance();
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º —Å–æ–∫–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
        authenticateSocket(token);

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è Messenger
        const handleConnect = () => {
            console.log('‚úÖ [Messenger] Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', socketClient.id);
            console.log('üéâ [Messenger] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π socketClient_final!');
        };

        const handleError = (error) => {
            console.error('üî• [Messenger] Socket.IO –æ—à–∏–±–∫–∞:', error);
            setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —á–∞—Ç–∞');
        };

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        socketClient.on('connect', handleConnect);
        socketClient.on('message', handleNewMessage);
        socketClient.on('read_status', updateMessageReadStatus);
        socketClient.on('notification_update', handleNotificationUpdate);
        socketClient.on('error', handleError);

        setSocket(socketClient);
        fetchChats();

        // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å—Ä–∞–∑—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if (socketClient.connected) {
            handleConnect();
        }

        // Cleanup - –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        return () => {
            console.log('üßπ [Messenger] –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç Socket.IO —Å–æ–±—ã—Ç–∏–π');
            socketClient.off('connect', handleConnect);
            socketClient.off('message', handleNewMessage);
            socketClient.off('read_status', updateMessageReadStatus);
            socketClient.off('notification_update', handleNotificationUpdate);
            socketClient.off('error', handleError);
        };
    }, []);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    useEffect(() => {
        if (!activeChat) return;
        
        // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        const lastFetchedChatId = activeChatRef.current;
        if (lastFetchedChatId !== activeChat.id) {
            fetchChatUserInfo(activeChat.id);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑ –≤ 3 –º–∏–Ω—É—Ç—ã
        const intervalId = setInterval(() => {
            if (activeChat) {
                fetchChatUserInfo(activeChat.id);
            }
        }, 180000); // –ö–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
        
        return () => clearInterval(intervalId);
    }, [activeChat?.id]);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö
    useEffect(() => {
        if (messagesEndRef.current) {
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
        }
    }, [messages]);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    useEffect(() => {
        activeChatRef.current = activeChat ? activeChat.id : null;

        if (activeChat) {
            fetchMessages(activeChat.id);
            markChatAsRead(activeChat.id);
        }
    }, [activeChat]);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º, —Å–æ—Ä—Ç–∏—Ä—É—è —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    const handleNewMessage = (message) => {
        const chatId = Number(message.chat_id);
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        setMessages(prevMessages => {
            if (prevMessages.some(m => m.id === message.id)) return prevMessages;
            return [...prevMessages, message];
        });
        // –û–±–Ω–æ–≤–ª—è–µ–º last_message –∏ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ–º —á–∞—Ç—ã –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        setChats(prevChats => {
            const updatedChats = prevChats.map(chat =>
                chat.id === chatId ? { ...chat, last_message: message } : chat
            );
            return updatedChats
                .slice()
                .sort((a, b) => {
                    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
                    if (a.is_pinned !== b.is_pinned) return b.is_pinned ? 1 : -1;
                    // –ó–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    return new Date(b.last_message?.created_at || b.updated_at) - new Date(a.last_message?.created_at || a.updated_at);
                });
        });
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –∏–Ω–∞—á–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        if (Number(activeChatRef.current) === chatId) {
            markMessageAsRead(message.id);
        } else {
            setUnreadCounts(prev => ({
                ...prev,
                [chatId]: (prev[chatId] || 0) + 1
            }));
        }
    };
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const updateMessageReadStatus = (data) => {
        if (activeChatRef.current && Number(activeChatRef.current) === Number(data.chat_id)) {
            setMessages(prevMessages => 
                prevMessages.map(msg => 
                    msg.id === data.message_id 
                        ? { ...msg, is_read: true, read_at: data.read_at } 
                        : msg
                )
            );
        }
    };
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    const fetchChats = async () => {
        setLoading(true);
        try {
            const token = localStorage.getItem('token');
            const response = await api.get('/api/chats', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setChats(response.data);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const counts = {};
            response.data.forEach(chat => {
                counts[chat.id] = chat.unread_count || 0;
            });
            setUnreadCounts(counts);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —á–∞—Ç—ã, –Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π
            if (response.data.length > 0 && !activeChat) {
                setActiveChat(response.data[0]);
            }
            
            setError('');
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤');
        } finally {
            setLoading(false);
        }
    };
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    const fetchMessages = async (chatId) => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.get(`/api/chats/${chatId}/messages`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            setMessages(response.data);
            setError('');
            
            // –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ useEffect
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
    };
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    const fetchChatUserInfo = async (chatId) => {
        try {
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            const chat = chats.find(c => c.id === chatId);
            if (!chat || !chat.user_id) return;
            
            const token = localStorage.getItem('token');
            const response = await api.get(`/api/users/profile/${chat.user_id}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
            if (response.data && response.data.online_status) {
                setActiveChat(prev => ({
                    ...prev,
                    online_status: response.data.online_status
                }));
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω:', err);
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }
    };
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessage = () => {
        if (!socket || !activeChat || !newMessage.trim()) return;
        socket.emit('message', {
            chat_id: activeChat.id,
            content: newMessage,
            message_type: 'text'
        });
        setNewMessage('');
    };
    
    // –ü–æ–º–µ—Ç–∫–∞ —á–∞—Ç–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
    const markChatAsRead = async (chatId) => {
        try {
            const token = localStorage.getItem('token');
            await api.post(`/api/chats/${chatId}/read`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            setUnreadCounts(prevCounts => ({
                ...prevCounts,
                [chatId]: 0
            }));
            
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —á–∞—Ç–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', err);
        }
    };
    
    // –ü–æ–º–µ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
    const markMessageAsRead = async (messageId) => {
        if (!socket) return;
        socket.emit('read_status', { message_id: messageId });
    };
    
    // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ–∫–∞–∑ –º–æ–¥–∞–ª–∫–∏
    const handleFileSelect = (file, type) => {
        // –°–æ–∑–¥–∞—ë–º preview
        const url = URL.createObjectURL(file);
        setAttachmentFile(file);
        setAttachmentType(type);
        setAttachmentPreviewUrl(url);
        setAttachmentCaption('');
        setShowAttachmentModal(true);
        setIsClosing(false);
    };

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è
    const confirmSendAttachment = async () => {
        if (!attachmentFile) {
            closeModal();
            return;
        }
        const formData = new FormData();
        formData.append('file', attachmentFile);
        formData.append('chat_id', activeChat.id);
        formData.append('type', attachmentType);
        formData.append('caption', attachmentCaption);
        try {
            const token = localStorage.getItem('token');
            const response = await api.post('/api/chats/attachment', formData, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'multipart/form-data'
                }
            });
            // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (response.data?.message) {
                handleNewMessage(response.data.message);
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
            if (activeChat) {
                await fetchMessages(activeChat.id);
            }
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è');
        }
        // –û—á–∏—Å—Ç–∫–∞
        closeModal();
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeModal = () => {
        setIsClosing(true);
        setTimeout(() => {
            URL.revokeObjectURL(attachmentPreviewUrl);
            setShowAttachmentModal(false);
            setAttachmentFile(null);
            setAttachmentType(null);
            setAttachmentPreviewUrl('');
            setAttachmentCaption('');
            setIsClosing(false);
        }, 300);
    };

    // –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è
    const cancelSendAttachment = () => {
        closeModal();
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    const handleChatSelect = (chat) => {
        setActiveChat(chat);
        setNewMessage('');
        fetchMessages(chat.id);
        markChatAsRead(chat.id);
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const handleBackToChats = () => {
        setActiveChat(null);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const handleInputChange = (e) => {
        setNewMessage(e.target.value);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const handleSubmit = (e) => {
        e.preventDefault();
        sendMessage();
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    const createChat = async (userId) => {
        try {
            const token = localStorage.getItem('token');
            const response = await api.post('/api/chats', { userId }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π —á–∞—Ç
            await fetchChats();
            setActiveChat(response.data);
            
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const deleteMessage = async (messageId) => {
        try {
            const token = localStorage.getItem('token');
            await api.delete(`/api/chats/messages/${messageId}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ UI
            setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –æ–Ω–æ
            if (activeChat) {
                const chatId = activeChat.id;
                setChats(prevChats => {
                    return prevChats.map(chat => {
                        if (chat.id === chatId && chat.last_message?.id === messageId) {
                            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            const newLastMessage = messages
                                .filter(msg => msg.id !== messageId)
                                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0] || null;
                            
                            return { ...chat, last_message: newLastMessage };
                        }
                        return chat;
                    });
                });
            }
            
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —á–∞—Ç–µ
    const handleNotificationUpdate = (data) => {
        if (!data || !data.id) return;
        
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', data);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setMessages(prevMessages => 
            prevMessages.map(msg => {
                if (msg.content_meta?.notification_id === data.id) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º meta –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–æ–±–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    return {
                        ...msg,
                        content_meta: {
                            ...msg.content_meta,
                            processed: true,
                            action: data.action
                        }
                    };
                }
                return msg;
            })
        );
    };

    return (
        <div className="messenger">
            <div className={`messenger-container ${activeChat && isMobile ? 'chat-active' : ''}`}>
                <ChatList 
                    chats={chats} 
                    activeChat={activeChat} 
                    onChatSelect={handleChatSelect} 
                    unreadCounts={unreadCounts}
                    onCreateChat={createChat}
                />
                
                <ChatWindow 
                    activeChat={activeChat}
                    messages={messages}
                    newMessage={newMessage}
                    onInputChange={handleInputChange}
                    onSubmit={handleSubmit}
                    onKeyPress={handleKeyPress}
                    onSendAttachment={handleFileSelect}
                    messagesEndRef={messagesEndRef}
                    onDeleteMessage={deleteMessage}
                    onBackToChats={handleBackToChats}
                    isMobile={isMobile}
                />
            </div>
            
            {error && <div className="messenger-error">{error}</div>}

            {showAttachmentModal && (
                <div className={`attachment-modal ${isClosing ? 'closing' : ''}`}>
                    <div className="attachment-modal-content">
                        <h2>Send {attachmentType}</h2>
                        {attachmentType === 'image' && (
                            <img src={attachmentPreviewUrl} alt="preview" className="attachment-preview" />
                        )}
                        <textarea
                            placeholder="Add a caption..."
                            value={attachmentCaption}
                            onChange={e => setAttachmentCaption(e.target.value)}
                            className="attachment-caption"
                        />
                        <button className="attachment-send-btn" onClick={confirmSendAttachment}>Send</button>
                        <button className="attachment-cancel-btn" onClick={cancelSendAttachment}>Cancel</button>
                    </div>
                </div>
            )}
        </div>
    );
}

export default Messenger; 