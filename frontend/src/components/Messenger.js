import React, { useState, useEffect, useRef, useCallback } from 'react';
import api from '../axios';
import './Messenger.css';
import ChatList from './ChatList';
import MobileChatSheet from './MobileChatSheet';
import './MobileChatSheet.css';
import ChatWindow from './ChatWindow';
import './AttachmentModal.css';
import { useSocket } from '../hooks/useSocket';

function Messenger() {
    const [chats, setChats] = useState([]);
    const [activeChat, setActiveChat] = useState(null);
    const [messages, setMessages] = useState([]);
    const [error, setError] = useState('');
    const [newMessage, setNewMessage] = useState('');
    const [unreadCounts, setUnreadCounts] = useState({});
    const messagesEndRef = useRef(null);
    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
    const [sheetOpen, setSheetOpen] = useState(false);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–ª–æ–∂–µ–Ω–∏—è
    const [showAttachmentModal, setShowAttachmentModal] = useState(false);
    const [attachmentFile, setAttachmentFile] = useState(null);
    const [attachmentType, setAttachmentType] = useState(null);
    const [attachmentPreviewUrl, setAttachmentPreviewUrl] = useState('');
    const [attachmentCaption, setAttachmentCaption] = useState('');
    const [isClosing, setIsClosing] = useState(false);

    const activeChatRef = useRef(null);

    // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –ß–ê–°–¢–´–• –ó–ê–ü–†–û–°–û–í
    const lastRequestTimes = useRef({
        fetchMessages: 0,
        markChatAsRead: 0,
        fetchChatUserInfo: 0,
        fetchChats: 0,
        createChat: 0  // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
    });

    // üÜï –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    const lastActiveChatId = useRef(null);
    
    const REQUEST_COOLDOWNS = {
        fetchMessages: 300,       // 0.3 —Å–µ–∫—É–Ω–¥—ã (–±—ã–ª–æ 1000)
        markChatAsRead: 200,      // 0.2 —Å–µ–∫—É–Ω–¥—ã (–±—ã–ª–æ 500)
        fetchChatUserInfo: 10000, // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        fetchChats: 1000,         // 1 —Å–µ–∫—É–Ω–¥–∞ (–±—ã–ª–æ 2000)
        createChat: 10000         // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏—è–º–∏ —á–∞—Ç–æ–≤
    };

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    const canMakeRequest = useCallback((requestType, chatId = null) => {
        const now = Date.now();
        const lastTime = lastRequestTimes.current[requestType] || 0;
        const cooldown = REQUEST_COOLDOWNS[requestType] || 1000;
        
        // üÜï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ cooldown
        if (chatId && chatId !== lastActiveChatId.current) {
            console.log(`‚úÖ [Messenger] ${requestType} —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞: ${chatId}`);
            lastRequestTimes.current[requestType] = now;
            return true;
        }
        
        if (now - lastTime < cooldown) {
            console.log(`üõ°Ô∏è [Messenger] –ó–∞–ø—Ä–æ—Å ${requestType} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (cooldown ${cooldown}ms)`);
            return false;
        }
        
        lastRequestTimes.current[requestType] = now;
        return true;
    }, []);

    // üöÄ Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º hook
    const socketHook = useSocket();

    // –ü–æ–º–µ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
    const markMessageAsRead = useCallback(async (messageId) => {
        if (!socketHook.connected) return;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∫–µ—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ API
        const socket = socketHook.getSocket();
        if (socket) {
            socket.emit('read_status', { message_id: messageId });
        }
    }, [socketHook]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –° –ó–ê–©–ò–¢–û–ô –û–¢ –ß–ê–°–¢–´–• –ó–ê–ü–†–û–°–û–í
    const fetchChats = useCallback(async () => {
        if (!canMakeRequest('fetchChats')) {
            console.log('üõ°Ô∏è [Messenger] fetchChats –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω cooldown-–æ–º');
            return;
        }
        
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                console.log('No token available');
                return;
            }
            
            console.log('üîÑ [Messenger] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...');
            const response = await api.get('/api/chats', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            console.log('‚úÖ [Messenger] –ß–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data);
            setChats(response.data);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            const initialUnreadCounts = {};
            response.data.forEach(chat => {
                if (chat.unread_count !== undefined) {
                    initialUnreadCounts[chat.id] = chat.unread_count;
                }
            });
            
            setUnreadCounts(initialUnreadCounts);
            setError('');
            
        } catch (err) {
            console.error('‚ùå [Messenger] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', err);
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
        }
    }, [canMakeRequest]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const handleNewMessage = useCallback((message) => {
        console.log('üì® [Messenger] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        const chatId = Number(message.chat_id);
        console.log('üì® [Messenger] Chat ID:', chatId, 'Active chat:', activeChatRef.current);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        if (Number(activeChatRef.current) === chatId) {
            setMessages(prevMessages => {
                if (prevMessages.some(m => m.id === message.id)) {
                    console.log('üì® [Messenger] –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                    return prevMessages;
                }
                console.log('üì® [Messenger] –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç');
                return [...prevMessages, message];
            });
        } else {
            console.log('üì® [Messenger] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º last_message –∏ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ–º —á–∞—Ç—ã –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        setChats(prevChats => {
            const updatedChats = prevChats.map(chat =>
                chat.id === chatId ? { ...chat, last_message: message } : chat
            );
            return updatedChats
                .slice()
                .sort((a, b) => {
                    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
                    if (a.is_pinned !== b.is_pinned) return b.is_pinned ? 1 : -1;
                    // –ó–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    return new Date(b.last_message?.created_at || b.updated_at) - new Date(a.last_message?.created_at || a.updated_at);
                });
        });
        
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –∏–Ω–∞—á–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        if (Number(activeChatRef.current) === chatId) {
            console.log('üì® [Messenger] –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ');
            markMessageAsRead(message.id);
        } else {
            console.log('üì® [Messenger] –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫');
            setUnreadCounts(prev => ({
                ...prev,
                [chatId]: (prev[chatId] || 0) + 1
            }));
        }
    }, [markMessageAsRead]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–∞—Ç–∞ –° –ó–ê–©–ò–¢–û–ô –û–¢ –ß–ê–°–¢–´–• –ó–ê–ü–†–û–°–û–í
    const fetchChatUserInfo = useCallback(async (chatId) => {
        if (!canMakeRequest('fetchChatUserInfo', chatId)) {
            console.log('üõ°Ô∏è [Messenger] fetchChatUserInfo –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω cooldown-–æ–º');
            return;
        }
        
        try {
            const token = localStorage.getItem('token');
            console.log('üë§ [Messenger] –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–∞—Ç–∞:', chatId);
            const response = await api.get(`/api/chats/${chatId}/info`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            console.log('‚úÖ [Messenger] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', response.data);
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            setChats(prevChats => 
                prevChats.map(chat => 
                    chat.id === chatId 
                        ? { ...chat, ...response.data }
                        : chat
                )
            );
        } catch (error) {
            console.error('‚ùå [Messenger] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ:', error);
        }
    }, [canMakeRequest]);

    // –ü–æ–º–µ—Ç–∫–∞ —á–∞—Ç–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –° –ó–ê–©–ò–¢–û–ô –û–¢ –ß–ê–°–¢–´–• –ó–ê–ü–†–û–°–û–í
    const markChatAsRead = useCallback(async (chatId) => {
        if (!canMakeRequest('markChatAsRead', chatId)) {
            console.log('üõ°Ô∏è [Messenger] markChatAsRead –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω cooldown-–æ–º');
            return;
        }
        
        try {
            const token = localStorage.getItem('token');
            console.log('üëÅÔ∏è [Messenger] –ü–æ–º–µ—á–∞–µ–º —á–∞—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π:', chatId);
            await api.post(`/api/chats/${chatId}/read`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            setUnreadCounts(prev => ({
                ...prev,
                [chatId]: 0
            }));
        } catch (error) {
            console.error('‚ùå [Messenger] –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —á–∞—Ç–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
        }
    }, [canMakeRequest]);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    useEffect(() => {
        const handleResize = () => {
            setIsMobile(window.innerWidth <= 768);
        };
        
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    // –°–≤–∞–π–ø-–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞ –Ω–∞ –º–æ–±–∞–π–ª–µ
    const [dragDx, setDragDx] = useState(0);
    const [isDraggingOpen, setIsDraggingOpen] = useState(false);
    useEffect(() => {
        if (!isMobile) return;
        let startX = null;
        let startY = null;
        const threshold = 45; // px
        function onTouchStart(e) {
            if (e.touches[0].clientX < 20) {
                startX = e.touches[0].clientX;
                startY = e.touches[0].clientY;
                setIsDraggingOpen(true);
            } else {
                startX = null; startY = null;
                setIsDraggingOpen(false);
            }
        }
        function onTouchMove(e) {
            if (startX == null) return;
            const dx = e.touches[0].clientX - startX;
            if (dx > 0) setDragDx(dx); else setDragDx(0);
        }
        function onTouchEnd(e) {
            if (startX == null) return;
            const dx = e.changedTouches[0].clientX - startX;
            const dy = Math.abs(e.changedTouches[0].clientY - startY);
            if (dx > threshold && dy < 60) setSheetOpen(true);
            setDragDx(0);
            setIsDraggingOpen(false);
            startX = null; startY = null;
        }
        document.addEventListener('touchstart', onTouchStart, { passive: true });
        document.addEventListener('touchmove', onTouchMove, { passive: true });
        document.addEventListener('touchend', onTouchEnd, { passive: true });
        return () => {
            document.removeEventListener('touchstart', onTouchStart);
            document.removeEventListener('touchmove', onTouchMove);
            document.removeEventListener('touchend', onTouchEnd);
        };
    }, [isMobile]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∫ main —ç–ª–µ–º–µ–Ω—Ç—É –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
    useEffect(() => {
        const mainElement = document.querySelector('main');
        if (mainElement) {
            mainElement.classList.add('messenger-page');
        }
        
        return () => {
            if (mainElement) {
                mainElement.classList.remove('messenger-page');
            }
        };
    }, []);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    useEffect(() => {
        const token = localStorage.getItem('token');
        if (!token) return;

        console.log('üöÄ [Messenger] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO...');
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Socket.IO
        const connected = socketHook.connect(token);
        
        if (connected) {
            console.log('‚úÖ [Messenger] Socket.IO –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            const handleError = (error) => {
                console.error('‚ùå [Messenger] Socket.IO –æ—à–∏–±–∫–∞:', error);
                setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —á–∞—Ç–∞');
            };
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            socketHook.on('new_message', handleNewMessage);
            socketHook.on('read_status', updateMessageReadStatus);
            socketHook.on('notification_update', handleNotificationUpdate);
            socketHook.on('error', handleError);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã
            fetchChats();

            // Cleanup - –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
            return () => {
                console.log('üßπ [Messenger] –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç Socket.IO —Å–æ–±—ã—Ç–∏–π');
                socketHook.off('new_message', handleNewMessage);
                socketHook.off('read_status', updateMessageReadStatus);
                socketHook.off('notification_update', handleNotificationUpdate);
                socketHook.off('error', handleError);
            };
        }
    }, [fetchChats, handleNewMessage, socketHook]);
    
    // ‚úÖ –í–ö–õ–Æ–ß–ê–ï–ú –û–ë–†–ê–¢–ù–û –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –° –ó–ê–©–ò–¢–û–ô
    useEffect(() => {
        if (!activeChat) return;
        
        // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å (–µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª cooldown)
        const lastFetchedChatId = activeChatRef.current;
        if (lastFetchedChatId !== activeChat.id) {
            console.log('üîÑ [Messenger] –ù–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
            fetchChatUserInfo(activeChat.id);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 3 –º–∏–Ω—É—Ç)
        const intervalId = setInterval(() => {
            if (activeChat) {
                console.log('‚è∞ [Messenger] –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                fetchChatUserInfo(activeChat.id);
            }
        }, 300000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (300000ms) –≤–º–µ—Å—Ç–æ 3 –º–∏–Ω—É—Ç –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        
        return () => {
            console.log('üßπ [Messenger] –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
            clearInterval(intervalId);
        };
    }, [activeChat, fetchChatUserInfo]);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö
    useEffect(() => {
        if (messagesEndRef.current) {
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
        }
    }, [messages]);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    useEffect(() => {
        activeChatRef.current = activeChat ? activeChat.id : null;
        lastActiveChatId.current = activeChat ? activeChat.id : null; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç

        if (activeChat) {
            console.log('üîÑ [Messenger] –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', activeChat.id);
            
            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Socket.IO
            console.log('üîó [Messenger] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞:', activeChat.id);
            socketHook.chat.join(activeChat.id);
            
            fetchMessages(activeChat.id);
            markChatAsRead(activeChat.id);
        }
    }, [activeChat, markChatAsRead, socketHook.chat]);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const updateMessageReadStatus = (data) => {
        if (activeChatRef.current && Number(activeChatRef.current) === Number(data.chat_id)) {
            setMessages(prevMessages => 
                prevMessages.map(msg => 
                    msg.id === data.message_id 
                        ? { ...msg, is_read: true, read_at: data.read_at } 
                        : msg
                )
            );
        }
    };
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –° –ó–ê–©–ò–¢–û–ô –û–¢ –ß–ê–°–¢–´–• –ó–ê–ü–†–û–°–û–í
    const fetchMessages = async (chatId) => {
        if (!canMakeRequest('fetchMessages', chatId)) {
            console.log('ÔøΩÔøΩÔ∏è [Messenger] fetchMessages –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω cooldown-–æ–º');
            return;
        }
        
        try {
            const token = localStorage.getItem('token');
            console.log('üì• [Messenger] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞:', chatId);
            const response = await api.get(`/api/chats/${chatId}/messages`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            console.log('‚úÖ [Messenger] –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
            setMessages(response.data);
            setError('');
            
        } catch (err) {
            console.error('‚ùå [Messenger] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
    };
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessage = () => {
        if (!activeChat || !newMessage.trim()) {
            console.log('üì§ [Messenger] –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ');
            return;
        }
        
        console.log('üì§ [Messenger] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Socket.IO:', {
            chatId: activeChat.id,
            message: newMessage.trim()
        });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API Socket.IO
        socketHook.chat.sendMessage(activeChat.id, newMessage.trim());
        setNewMessage('');
    };
    
    // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ–∫–∞–∑ –º–æ–¥–∞–ª–∫–∏
    const handleFileSelect = (file, type) => {
        // –°–æ–∑–¥–∞—ë–º preview
        const url = URL.createObjectURL(file);
        setAttachmentFile(file);
        setAttachmentType(type);
        setAttachmentPreviewUrl(url);
        setAttachmentCaption('');
        setShowAttachmentModal(true);
        setIsClosing(false);
    };

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è
    const confirmSendAttachment = async () => {
        if (!attachmentFile) {
            closeModal();
            return;
        }
        const formData = new FormData();
        formData.append('file', attachmentFile);
        formData.append('chat_id', activeChat.id);
        formData.append('type', attachmentType);
        formData.append('caption', attachmentCaption);
        try {
            const token = localStorage.getItem('token');
            const response = await api.post('/api/chats/attachment', formData, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'multipart/form-data'
                }
            });
            // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (response.data?.message) {
                handleNewMessage(response.data.message);
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
            if (activeChat) {
                await fetchMessages(activeChat.id);
            }
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è');
        }
        // –û—á–∏—Å—Ç–∫–∞
        closeModal();
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeModal = () => {
        setIsClosing(true);
        setTimeout(() => {
            URL.revokeObjectURL(attachmentPreviewUrl);
            setShowAttachmentModal(false);
            setAttachmentFile(null);
            setAttachmentType(null);
            setAttachmentPreviewUrl('');
            setAttachmentCaption('');
            setIsClosing(false);
        }, 300);
    };

    // –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è
    const cancelSendAttachment = () => {
        closeModal();
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –° –ó–ê–©–ò–¢–û–ô –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
    const handleChatSelect = (chat) => {
        // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ —Ç–æ—Ç –∂–µ —á–∞—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω
        if (activeChat && activeChat.id === chat.id) {
            console.log('üí¨ [Messenger] –ß–∞—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É');
            return;
        }
        
        console.log('üí¨ [Messenger] –í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç:', chat.id);
        setActiveChat(chat);
        setNewMessage('');
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Socket.IO
        console.log('üîó [Messenger] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Socket.IO');
        socketHook.chat.join(chat.id);
        
        // fetchMessages –∏ markChatAsRead –±—É–¥—É—Ç –≤—ã–∑–≤–∞–Ω—ã –∏–∑ useEffect –ø—Ä–∏ —Å–º–µ–Ω–µ activeChat
        // –Ω–æ –º—ã –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        setTimeout(() => {
            fetchMessages(chat.id);
            markChatAsRead(chat.id);
        }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã useEffect —Å—Ä–∞–±–æ—Ç–∞–ª
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const handleBackToChats = () => {
        console.log('üì± [Messenger] –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤');
        setActiveChat(null);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const handleInputChange = (e) => {
        setNewMessage(e.target.value);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const handleSubmit = (e) => {
        e.preventDefault();
        sendMessage();
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –° –ó–ê–©–ò–¢–û–ô –û–¢ –ß–ê–°–¢–´–• –í–´–ó–û–í–û–í
    const createChat = async (userId) => {
        if (!canMakeRequest('createChat', userId)) {
            console.log('üõ°Ô∏è [Messenger] createChat –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω cooldown-–æ–º');
            return;
        }
        
        try {
            const token = localStorage.getItem('token');
            console.log('‚ûï [Messenger] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', userId);
            const response = await api.post('/api/chats', { userId }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            console.log('‚úÖ [Messenger] –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω:', response.data);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            await fetchChats();
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
            setActiveChat(response.data);
            setError('');
            
        } catch (err) {
            console.error('‚ùå [Messenger] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', err);
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const deleteMessage = async (messageId) => {
        try {
            const token = localStorage.getItem('token');
            await api.delete(`/api/chats/messages/${messageId}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ UI
            setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –æ–Ω–æ
            if (activeChat) {
                const chatId = activeChat.id;
                setChats(prevChats => {
                    return prevChats.map(chat => {
                        if (chat.id === chatId && chat.last_message?.id === messageId) {
                            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            const newLastMessage = messages
                                .filter(msg => msg.id !== messageId)
                                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0] || null;
                            
                            return { ...chat, last_message: newLastMessage };
                        }
                        return chat;
                    });
                });
            }
            
        } catch (err) {
            setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
    const hideChat = async (chatId) => {
        try {
            // –£–±–∏—Ä–∞–µ–º —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ
            setChats(prevChats => prevChats.filter(chat => chat.id !== chatId));
            
            // –ï—Å–ª–∏ —Å–∫—Ä—ã—Ç—ã–π —á–∞—Ç –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
            if (activeChat?.id === chatId) {
                setActiveChat(null);
            }
            
            // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            console.log('–ß–∞—Ç —Å–∫—Ä—ã—Ç:', chatId);
            
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞');
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —á–∞—Ç–µ
    const handleNotificationUpdate = (data) => {
        if (!data || !data.id) return;
        
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', data);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setMessages(prevMessages => 
            prevMessages.map(msg => {
                if (msg.content_meta?.notification_id === data.id) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º meta –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–æ–±–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    return {
                        ...msg,
                        content_meta: {
                            ...msg.content_meta,
                            action: data.action,
                            processed: true
                        }
                    };
                }
                return msg;
            })
        );
    };

    return (
        <div className="messenger">
            <div className={`messenger-container ${activeChat && isMobile ? 'chat-active' : ''} ${sheetOpen && isMobile ? 'sheet-open' : ''}`}>
                {/* –î–µ—Å–∫—Ç–æ–ø: —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å–ª–µ–≤–∞; –ú–æ–±–∞–π–ª: –ø—Ä—è—á–µ–º, –∑–∞–º–µ–Ω—è–µ–º –≤—ã–µ–∑–∂–∞—é—â–µ–π –ø–∞–Ω–µ–ª—å—é */}
                {!isMobile && (
                    <ChatList 
                        chats={chats} 
                        activeChat={activeChat} 
                        onChatSelect={handleChatSelect} 
                        unreadCounts={unreadCounts}
                        onCreateChat={createChat}
                    />
                )}
                
                <ChatWindow 
                    activeChat={activeChat}
                    messages={messages}
                    newMessage={newMessage}
                    onInputChange={handleInputChange}
                    onSubmit={handleSubmit}
                    onKeyPress={handleKeyPress}
                    onSendAttachment={handleFileSelect}
                    messagesEndRef={messagesEndRef}
                    onDeleteMessage={deleteMessage}
                    onBackToChats={handleBackToChats}
                    isMobile={isMobile}
                    onHideChat={hideChat}
                />
            </div>

            {/* –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞-—Å—Ç—Ä–µ–ª–∫–∞ –¥–ª—è –º–æ–±–∞–π–ª–∞ */}
            {isMobile && (
                <button 
                    className="chat-toggle-button" 
                    onClick={() => setSheetOpen(true)}
                    aria-label="–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"
                >
                    <span className="triangle" />
                    {Object.values(unreadCounts).reduce((a,b)=>a+(b||0),0) > 0 && (
                        <span className="chat-toggle-badge">{Math.min(99, Object.values(unreadCounts).reduce((a,b)=>a+(b||0),0))}</span>
                    )}
                </button>
            )}

            {/* –ú–æ–±–∏–ª—å–Ω—ã–π –≤—ã–µ–∑–∂–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–≤–∞–π–ø–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
            {isMobile && (
                <MobileChatSheet
                    isOpen={sheetOpen}
                    onClose={() => setSheetOpen(false)}
                    chats={chats}
                    activeChat={activeChat}
                    unreadCounts={unreadCounts}
                    onChatSelect={handleChatSelect}
                    onCreateChat={createChat}
                    dragDx={dragDx}
                    isDraggingOpen={isDraggingOpen}
                />
            )}
            
            {error && <div className="messenger-error">{error}</div>}
            
            {showAttachmentModal && (
                <div className={`attachment-modal ${isClosing ? 'closing' : ''}`}>
                    <div className="attachment-modal-content">
                        <h2>Send {attachmentType}</h2>
                        {attachmentType === 'image' && (
                            <img src={attachmentPreviewUrl} alt="preview" className="attachment-preview" />
                        )}
                        <textarea
                            placeholder="Add a caption..."
                            value={attachmentCaption}
                            onChange={e => setAttachmentCaption(e.target.value)}
                            className="attachment-caption"
                        />
                        <button className="attachment-send-btn" onClick={confirmSendAttachment}>Send</button>
                        <button className="attachment-cancel-btn" onClick={cancelSendAttachment}>Cancel</button>
                    </div>
                </div>
            )}
        </div>
    );
}

export default Messenger; 