import React, { useCallback, useMemo, useState, useEffect } from 'react';
import ReactQuillWrapper from './ReactQuillWrapper';
import SimpleBetterTextEditor from './SimpleBetterTextEditor';
import DOMPurify from 'dompurify';
import './SafeRichTextEditor.css';

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π Rich Text Editor —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç XSS
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç DOMPurify –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
const SafeRichTextEditor = ({ 
    value = '', 
    onChange, 
    placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...', 
    disabled = false,
    maxLength = 5000,
    className = '',
    id
}) => {
    const [useSimpleEditor, setUseSimpleEditor] = useState(false);
    const [editorError, setEditorError] = useState(null);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ React Quill
    useEffect(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ findDOMNode
        try {
            const ReactDOM = require('react-dom');
            if (!ReactDOM.findDOMNode) {
                console.warn('‚ö†Ô∏è [SafeRichTextEditor] findDOMNode –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä');
                setUseSimpleEditor(true);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è [SafeRichTextEditor] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:', error);
            setUseSimpleEditor(true);
        }
    }, []);
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DOMPurify –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const purifyConfig = useMemo(() => ({
        ALLOWED_TAGS: [
            'p', 'br', 'strong', 'em', 'u', 's', 'sub', 'sup',
            'ul', 'ol', 'li', 'blockquote',
            'a', 'h3', 'h4', 'h5', 'h6'
        ],
        ALLOWED_ATTR: {
            'a': ['href', 'title'],
            '*': ['class'] // –¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ CSS –∫–ª–∞—Å—Å—ã
        },
        ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i,
        FORBID_TAGS: ['script', 'object', 'embed', 'iframe', 'form', 'input', 'textarea', 'select', 'button', 'style'],
        FORBID_ATTR: ['onerror', 'onload', 'onclick', 'onmouseover', 'onfocus', 'onblur', 'onchange', 'onsubmit'],
        ALLOW_DATA_ATTR: false,
        ALLOW_UNKNOWN_PROTOCOLS: false,
        SANITIZE_DOM: true,
        KEEP_CONTENT: true,
        FORBID_SCRIPT: true,
        USE_PROFILES: { html: true }
    }), []);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è toolbar - —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const modules = useMemo(() => ({
        toolbar: [
            ['bold', 'italic', 'underline', 'strike'],        // –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            [{ 'header': [3, 4, 5, 6, false] }],             // –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–∏—Å–∫–ª—é—á–∞–µ–º h1, h2)
            [{ 'list': 'ordered'}, { 'list': 'bullet' }],     // –°–ø–∏—Å–∫–∏
            ['blockquote'],                                   // –¶–∏—Ç–∞—Ç—ã
            ['link'],                                         // –¢–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            [{ 'script': 'sub'}, { 'script': 'super' }],     // –ü–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–π/–Ω–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            ['clean']                                         // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ],
        clipboard: {
            // –û—á–∏—Å—Ç–∫–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            matchVisual: false,
        }
    }), []);

    // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (—Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º)
    const formats = useMemo(() => [
        'bold', 'italic', 'underline', 'strike',
        'header', 'list', 'bullet', 'blockquote',
        'link', 'script'
    ], []);

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–µ–π
    const handleChange = useCallback((content, delta, source, editor) => {
        try {
            // –ü–æ–ª—É—á–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
            const htmlContent = editor.getHTML();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–¥–æ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
            if (htmlContent.length > maxLength) {
                return; // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            }

            // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            const sanitizedContent = DOMPurify.sanitize(htmlContent, purifyConfig);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            const dangerousPatterns = [
                /javascript:/gi,
                /data:text\/html/gi,
                /vbscript:/gi,
                /on\w+\s*=/gi,
                /<script/gi,
                /<iframe/gi,
                /<object/gi,
                /<embed/gi,
                /expression\s*\(/gi
            ];

            const hasUnsafeContent = dangerousPatterns.some(pattern => pattern.test(sanitizedContent));
            
            if (hasUnsafeContent) {
                console.warn('‚ö†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
                return;
            }

            // –ü–µ—Ä–µ–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if (onChange && typeof onChange === 'function') {
                onChange(sanitizedContent);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        }
    }, [onChange, maxLength, purifyConfig]);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const safeValue = useMemo(() => {
        if (!value) return '';
        
        try {
            return DOMPurify.sanitize(value, purifyConfig);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è:', error);
            return '';
        }
    }, [value, purifyConfig]);

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
    if (useSimpleEditor || editorError) {
        return (
            <div className={`safe-rich-editor-fallback ${className}`}>
                {editorError && (
                    <div className="editor-error-notice">
                        ‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
                    </div>
                )}
                <SimpleBetterTextEditor
                    value={value}
                    onChange={onChange}
                    placeholder={placeholder}
                    disabled={disabled}
                    maxLength={maxLength}
                    id={id}
                />
            </div>
        );
    }

    return (
        <div className={`safe-rich-editor-container ${className}`}>
            <ReactQuillWrapper
                theme="snow"
                value={safeValue}
                onChange={handleChange}
                modules={modules}
                formats={formats}
                placeholder={placeholder}
                readOnly={disabled}
                className={`safe-rich-editor ${disabled ? 'disabled' : ''}`}
                id={id}
                bounds=".safe-rich-editor-container"
                preserveWhitespace={false}
            />
            
            {/* –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ */}
            <div className="editor-footer">
                <span className="character-count">
                    {safeValue.length} / {maxLength}
                </span>
                <span className="security-badge" title="–ó–∞—â–∏—â–µ–Ω–æ DOMPurify">
                    üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ
                </span>
            </div>
        </div>
    );
};

export default SafeRichTextEditor;