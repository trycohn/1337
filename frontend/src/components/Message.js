import React, { useState, useRef, useEffect } from 'react';
import './Message.css';
import { formatDate } from '../utils/dateHelpers';
import { ensureHttps } from '../utils/userHelpers';
import axios from 'axios';
import InteractiveMessage from './InteractiveMessage';

function Message({ message, isOwn, onDeleteMessage, showUserInfo = false }) {
    const [showContextMenu, setShowContextMenu] = useState(false);
    const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0 });
    const contextMenuRef = useRef(null);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
    const [actionLoading, setActionLoading] = useState(false);
    const [responded, setResponded] = useState(false);
    
    // –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const messageClass = () => {
        let baseClass = isOwn ? 'message own' : 'message';
        
        // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (announcement) –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –±–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        if (message.message_type === 'announcement') {
            baseClass = 'message announcement-wrapper';
        } else if (message.message_type === 'image') {
            baseClass += ' image-message';
        } else if (message.message_type === 'admin_invitation_interactive' || 
                   message.message_type === 'tournament_invite_interactive') {
            baseClass = 'message interactive-wrapper';
        }
        
        // –î–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å
        if (showUserInfo) {
            baseClass += ' tournament-message';
        }
        
        return baseClass;
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏
    const handleContextMenu = (e) => {
        e.preventDefault();
        const rect = e.currentTarget.getBoundingClientRect();
        setMenuPosition({
            x: e.clientX - rect.left,
            y: e.clientY - rect.top
        });
        setShowContextMenu(true);
    };
    
    // –°–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
    const handleClickOutside = (e) => {
        if (contextMenuRef.current && !contextMenuRef.current.contains(e.target)) {
            setShowContextMenu(false);
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const handleDeleteMessage = () => {
        if (onDeleteMessage) {
            onDeleteMessage(message.id);
        }
        setShowContextMenu(false);
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    useEffect(() => {
        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é (accept/reject)
    const handleNotificationAction = async (actionType) => {
        if (!message.content_meta?.notification_id && !message.metadata?.invitation_id) return;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if (isNotificationProcessed()) {
            alert('–≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.');
            return;
        }
        
        setActionLoading(true);
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
                return;
            }

            let response;
            
            // üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if (message.message_type === 'admin_invitation' && message.metadata?.invitation_id) {
                const invitationId = message.metadata.invitation_id;
                const tournamentId = message.metadata.tournament_id;
                const endpoint = actionType === 'accept' ? 'accept-admin-invitation' : 'decline-admin-invitation';
                
                if (!tournamentId) {
                    alert('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏');
                    return;
                }
                
                response = await axios.post(
                    `/api/tournaments/${tournamentId}/${endpoint}`,
                    {},
                    {
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }
                );
            } 
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ notifications API
            else if (message.content_meta?.notification_id) {
                response = await axios.post(
                    `/api/notifications/respond?notificationId=${message.content_meta.notification_id}`,
                    { action: actionType },
                    {
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }
                );
            } else {
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID');
                return;
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
            let successMessage = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ';
            const notifType = message.content_meta?.type || (message.message_type === 'admin_invitation' ? 'admin_invitation' : null);
            
            if (notifType === 'tournament_invite') {
                successMessage = actionType === 'accept' ? '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É!' : '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';
            } else if (notifType === 'friend_request') {
                successMessage = actionType === 'accept' ? '–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –ø—Ä–∏–Ω—è—Ç–∞' : '–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞';
            } else if (notifType === 'admin_request') {
                successMessage = actionType === 'accept' ? '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç' : '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω';
            } else if (notifType === 'admin_invitation' || message.message_type === 'admin_invitation') {
                successMessage = actionType === 'accept' ? '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏–Ω—è—Ç–æ!' : '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if (response.data?.message) {
                successMessage = response.data.message;
            }
            
            alert(successMessage);
            setResponded(true);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if (message.content_meta) {
                message.content_meta.action = actionType;
                message.content_meta.processed = true;
            }
            if (message.metadata) {
                message.metadata.action = actionType;
                message.metadata.processed = true;
            }
            
            console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', response.data);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', err);
            const errorMessage = err.response?.data?.message || err.response?.data?.error || err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
            alert(errorMessage);
        } finally {
            setActionLoading(false);
        }
    };
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const getActionButtonsText = () => {
        const type = message.content_meta?.type || (message.message_type === 'admin_invitation' ? 'admin_invitation' : null);
        if (!type) return { accept: '–ü—Ä–∏–Ω—è—Ç—å', reject: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å' };
        
        switch (type) {
            case 'friend_request':
                return { accept: '–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', reject: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å' };
            case 'admin_request':
                return { accept: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º', reject: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å' };
            case 'tournament_invite':
                return { accept: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', reject: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' };
            case 'admin_invitation':
                return { accept: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', reject: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å' };
            default:
                return { accept: '–ü—Ä–∏–Ω—è—Ç—å', reject: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å' };
        }
    };
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const isNotificationProcessed = () => {
        return message.content_meta?.processed || message.content_meta?.action || 
               message.metadata?.processed || message.metadata?.action;
    };
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const getActionType = () => {
        return message.content_meta?.action || message.metadata?.action || 'unknown';
    };
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const getProcessedStatusText = () => {
        const action = getActionType();
        const type = message.content_meta?.type || (message.message_type === 'admin_invitation' ? 'admin_invitation' : null);
        
        if (!type) return action === 'accept' ? '–ü—Ä–∏–Ω—è—Ç–æ' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
        
        switch (type) {
            case 'friend_request':
                return action === 'accept' ? '–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –ø—Ä–∏–Ω—è—Ç–∞' : '–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞';
            case 'admin_request':
                return action === 'accept' ? '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç' : '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω';
            case 'tournament_invite':
                return action === 'accept' ? '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ' : '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';
            case 'admin_invitation':
                return action === 'accept' ? '‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ' : '‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';
            default:
                return action === 'accept' ? '–ü—Ä–∏–Ω—è—Ç–æ' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
        }
    };
    
    // –†–µ–Ω–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
    const renderMessageContent = () => {
        switch (message.message_type) {
            case 'admin_invitation_interactive':
            case 'tournament_invite_interactive':
                // üÜï –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
                return (
                    <InteractiveMessage 
                        message={message.content}
                        metadata={message.metadata ? 
                            (typeof message.metadata === 'string' ? 
                                JSON.parse(message.metadata) : 
                                message.metadata
                            ) : null
                        }
                        onActionComplete={(actionType, result) => {
                            console.log('–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:', actionType, result);
                            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
                            if (actionType === 'accept' || actionType === 'decline') {
                                // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                                if (message.metadata) {
                                    if (typeof message.metadata === 'string') {
                                        const metadata = JSON.parse(message.metadata);
                                        metadata.processed = true;
                                        metadata.action = actionType;
                                        message.metadata = JSON.stringify(metadata);
                                    } else {
                                        message.metadata.processed = true;
                                        message.metadata.action = actionType;
                                    }
                                }
                            }
                        }}
                    />
                );
                
            case 'image':
                return (
                    <div className="message-image">
                        <img 
                            src={message.content} 
                            alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" 
                            onClick={() => window.open(message.content, '_blank')}
                        />
                    </div>
                );
                
            case 'document':
                return (
                    <div className="message-document">
                        <div className="document-icon">üìÑ</div>
                        <div className="document-info">
                            <div className="document-name">{message.content_meta?.filename || '–î–æ–∫—É–º–µ–Ω—Ç'}</div>
                            <a 
                                href={message.content} 
                                target="_blank" 
                                rel="noopener noreferrer" 
                                className="document-download"
                            >
                                –°–∫–∞—á–∞—Ç—å
                            </a>
                        </div>
                    </div>
                );
                
            case 'file':
                return (
                    <div className="message-file">
                        <div className="file-icon">üìé</div>
                        <div className="file-info">
                            <div className="file-name">{message.content_meta?.filename || '–§–∞–π–ª'}</div>
                            <a 
                                href={message.content} 
                                target="_blank" 
                                rel="noopener noreferrer" 
                                className="file-download"
                            >
                                –°–∫–∞—á–∞—Ç—å
                            </a>
                        </div>
                    </div>
                );
                
            case 'announcement':
                // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞
                const notifId = message.content_meta?.notification_id;
                const notifType = message.content_meta?.type;
                const canRespond = notifId && ['friend_request', 'admin_request', 'tournament_invite'].includes(notifType);
                const buttonTexts = getActionButtonsText();
                const isProcessed = isNotificationProcessed();
                
                return (
                    <div className="message-announcement">
                        <div className="announcement-icon">üì£</div>
                        <div className="announcement-content">
                            <div className="announcement-text">{message.content}</div>
                            
                            {canRespond && !responded && !isProcessed && (
                                <div className="announcement-actions">
                                    <button 
                                        className="action-button accept" 
                                        disabled={actionLoading} 
                                        onClick={() => handleNotificationAction('accept')}
                                    >
                                        {actionLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : buttonTexts.accept}
                                    </button>
                                    <button 
                                        className="action-button reject" 
                                        disabled={actionLoading} 
                                        onClick={() => handleNotificationAction('reject')}
                                    >
                                        {actionLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : buttonTexts.reject}
                                    </button>
                                </div>
                            )}
                            
                            {(responded || isProcessed) && (
                                <div className="announcement-response">
                                    <span className={`response-status ${getActionType() === 'accept' ? 'accepted' : 'rejected'}`}>
                                        {isProcessed ? getProcessedStatusText() : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ'}
                                    </span>
                                </div>
                            )}
                        </div>
                    </div>
                );
                
            case 'admin_invitation':
                // üÜï –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                const invitationId = message.metadata?.invitation_id;
                // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–∏—è invitation_id
                const canRespondToInvitation = invitationId && message.message_type === 'admin_invitation';
                const invitationButtonTexts = getActionButtonsText();
                const isInvitationProcessed = isNotificationProcessed();
                
                return (
                    <div className="message-announcement admin-invitation">
                        <div className="announcement-icon">ü§ù</div>
                        <div className="announcement-content">
                            <div className="announcement-text">{message.content}</div>
                            
                            {canRespondToInvitation && !responded && !isInvitationProcessed && (
                                <div className="announcement-actions">
                                    <button 
                                        className="action-button accept" 
                                        disabled={actionLoading} 
                                        onClick={() => handleNotificationAction('accept')}
                                    >
                                        {actionLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : invitationButtonTexts.accept}
                                    </button>
                                    <button 
                                        className="action-button reject" 
                                        disabled={actionLoading} 
                                        onClick={() => handleNotificationAction('reject')}
                                    >
                                        {actionLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : invitationButtonTexts.reject}
                                    </button>
                                </div>
                            )}
                            
                            {(responded || isInvitationProcessed) && (
                                <div className="announcement-response">
                                    <span className={`response-status ${getActionType() === 'accept' ? 'accepted' : 'rejected'}`}>
                                        {isInvitationProcessed ? getProcessedStatusText() : '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ'}
                                    </span>
                                </div>
                            )}
                        </div>
                    </div>
                );
                
            default:
                // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                return <div className="message-text">{message.content}</div>;
        }
    };
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ/–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ)
    const renderMessageStatus = () => {
        if (isOwn) {
            if (message.is_read) {
                return <span className="message-status read">‚úÖ</span>;
            } else {
                return <span className="message-status sent">‚úì</span>;
            }
        }
        return null;
    };

    return (
        <div className={`message-container ${isOwn ? 'own-container' : ''} ${showUserInfo ? 'tournament-container' : ''}`}>
            {showUserInfo && !isOwn && (
                <div className="message-user-info">
                    <div className="message-user-avatar">
                        <img 
                            src={ensureHttps(message.sender_avatar || message.avatar_url) || '/default-avatar.png'} 
                            alt={message.sender_username || message.username} 
                            onError={(e) => {e.target.src = '/default-avatar.png'}}
                        />
                    </div>
                    <div className="message-user-details">
                        <span className="message-username">{message.sender_username || message.username || '–°–∏—Å—Ç–µ–º–∞'}</span>
                        <span className="message-time-header">
                            {formatDate(message.created_at)}
                        </span>
                    </div>
                </div>
            )}
            
            <div className={messageClass()} onContextMenu={handleContextMenu}>
                {renderMessageContent()}
                
                {showContextMenu && (
                    <div 
                        className="message-context-menu" 
                        ref={contextMenuRef}
                        style={{
                            top: `${menuPosition.y}px`,
                            right: isOwn ? `${menuPosition.x}px` : 'auto',
                            left: !isOwn ? `${menuPosition.x}px` : 'auto'
                        }}
                    >
                        <ul>
                            <li onClick={handleDeleteMessage}>–£–¥–∞–ª–∏—Ç—å</li>
                        </ul>
                    </div>
                )}
            </div>
            
            {!showUserInfo && (
                <div className="message-meta">
                    <span className="message-time">{formatDate(message.created_at)}</span>
                    {renderMessageStatus()}
                </div>
            )}
        </div>
    );
}

export default Message; 