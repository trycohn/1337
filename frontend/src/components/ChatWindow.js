import React, { useState, useRef } from 'react';
import './ChatWindow.css';
import Message from './Message';
import { decodeTokenPayload } from '../utils/userHelpers';

function ChatWindow({ 
    activeChat, 
    messages, 
    newMessage, 
    onInputChange, 
    onSubmit, 
    onKeyPress,
    onSendAttachment,
    messagesEndRef 
}) {
    const [showAttachmentOptions, setShowAttachmentOptions] = useState(false);
    const fileInputRef = useRef(null);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (!activeChat) {
        return (
            <div className="chat-window empty-chat">
                <div className="select-chat-message">
                    –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É
                </div>
            </div>
        );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω
    const getOnlineStatusClass = () => {
        if (!activeChat.online_status) return '';
        
        if (activeChat.online_status === 'online') {
            return 'status-online';
        } else {
            return 'status-offline';
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const handleAttachmentClick = () => {
        setShowAttachmentOptions(!showAttachmentOptions);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–ª–æ–∂–µ–Ω–∏—è
    const handleAttachmentTypeSelect = (type) => {
        fileInputRef.current.setAttribute('data-type', type);
        fileInputRef.current.click();
        setShowAttachmentOptions(false);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    const handleFileSelect = (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        const type = fileInputRef.current.getAttribute('data-type');
        onSendAttachment(file, type);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ input, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞
        e.target.value = '';
    };
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ
    const groupMessagesByDate = () => {
        if (!messages.length) return [];
        
        const groups = [];
        let currentGroup = {
            date: new Date(messages[0].created_at).toDateString(),
            messages: [messages[0]]
        };
        
        for (let i = 1; i < messages.length; i++) {
            const messageDate = new Date(messages[i].created_at).toDateString();
            
            if (messageDate === currentGroup.date) {
                currentGroup.messages.push(messages[i]);
            } else {
                groups.push(currentGroup);
                currentGroup = {
                    date: messageDate,
                    messages: [messages[i]]
                };
            }
        }
        
        groups.push(currentGroup);
        return groups;
    };
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≥—Ä—É–ø–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    const formatGroupDate = (dateString) => {
        const date = new Date(dateString);
        const today = new Date();
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        
        if (date.toDateString() === today.toDateString()) {
            return '–°–µ–≥–æ–¥–Ω—è';
        } else if (date.toDateString() === yesterday.toDateString()) {
            return '–í—á–µ—Ä–∞';
        } else {
            const day = date.getDate().toString().padStart(2, '0');
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const year = date.getFullYear();
            return `${day}.${month}.${year}`;
        }
    };
    
    const messageGroups = groupMessagesByDate();

    return (
        <div className="chat-window">
            <div className="chat-header">
                <div className="chat-header-avatar">
                    <img 
                        src={activeChat.avatar_url || '/default-avatar.png'} 
                        alt={activeChat.name} 
                    />
                </div>
                <div className="chat-header-info">
                    <h2>{activeChat.name}</h2>
                    {activeChat.online_status && (
                        <div className={`online-status ${getOnlineStatusClass()}`}>
                            {activeChat.online_status}
                        </div>
                    )}
                </div>
            </div>
            
            <div className="chat-messages">
                {messageGroups.map((group, groupIndex) => (
                    <div key={groupIndex} className="message-group">
                        <div className="message-date-separator">
                            <span>{formatGroupDate(group.date)}</span>
                        </div>
                        
                        {group.messages.map((message, messageIndex) => (
                            <Message 
                                key={message.id || messageIndex} 
                                message={message} 
                                isOwn={(() => {
                                    const payload = decodeTokenPayload(localStorage.getItem('token'));
                                    return payload ? message.sender_id === payload.id : false;
                                })()}
                            />
                        ))}
                    </div>
                ))}
                
                {/* –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é */}
                <div ref={messagesEndRef} />
            </div>
            
            <div className="chat-input-area">
                <form onSubmit={onSubmit}>
                    <div className="attachment-button" onClick={handleAttachmentClick}>
                        <i className="attachment-icon">üìé</i>
                        
                        {showAttachmentOptions && (
                            <div className="attachment-options">
                                <div className="attachment-option" onClick={() => handleAttachmentTypeSelect('image')}>
                                    <i>üì∑</i> –§–æ—Ç–æ
                                </div>
                                <div className="attachment-option" onClick={() => handleAttachmentTypeSelect('document')}>
                                    <i>üìÑ</i> –î–æ–∫—É–º–µ–Ω—Ç
                                </div>
                                <div className="attachment-option" onClick={() => handleAttachmentTypeSelect('file')}>
                                    <i>üìÅ</i> –§–∞–π–ª
                                </div>
                            </div>
                        )}
                    </div>
                    
                    <input 
                        type="file" 
                        ref={fileInputRef} 
                        style={{ display: 'none' }} 
                        onChange={handleFileSelect}
                    />
                    
                    <input 
                        type="text" 
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." 
                        value={newMessage}
                        onChange={onInputChange}
                        onKeyPress={onKeyPress}
                    />
                    
                    <button type="submit">
                        <span>‚û§</span>
                    </button>
                </form>
            </div>
        </div>
    );
}

export default ChatWindow; 