import React, { useState, useEffect } from 'react';
import './TournamentFilterModal.css'; // –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤

/**
 * üéØ TournamentFilterModal v1.0 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
 * –ö—Ä–∞—Å–∏–≤–æ–µ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
 * 
 * @version 1.0 (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç modal-system)
 * @features –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ, —Ñ–æ—Ä–º–∞—Ç—É, —Ç–∏–ø—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å—Ç–∞—Ç—É—Å—É, –ø—Ä–∏–∑–æ–≤–æ–º—É —Ñ–æ–Ω–¥—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
const TournamentFilterModal = ({
    isOpen,
    onClose,
    filters,
    onApplyFilters,
    tournaments = []
}) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    const [isMobile, setIsMobile] = React.useState(window.innerWidth <= 768);

    React.useEffect(() => {
        const handleResize = () => setIsMobile(window.innerWidth <= 768);
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
    const [localFilters, setLocalFilters] = useState({
        games: [],
        formats: [],
        participantTypes: [],
        statuses: [],
        hasPrizePool: null, // null, true, false
        participantCount: { min: 0, max: 128 }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    useEffect(() => {
        if (isOpen) {
            setLocalFilters({
                games: filters.games || [],
                formats: filters.formats || [],
                participantTypes: filters.participantTypes || [],
                statuses: filters.statuses || [],
                hasPrizePool: filters.hasPrizePool || null,
                participantCount: filters.participantCount || { min: 0, max: 128 }
            });
        }
    }, [isOpen, filters]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    const getUniqueValues = (field) => {
        const values = [...new Set(tournaments.map(t => t[field]).filter(Boolean))];
        return values.sort();
    };

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    const availableGames = getUniqueValues('game').length > 0 
        ? getUniqueValues('game')
        : ['Counter-Strike 2', 'Dota 2', 'Valorant', 'League of Legends', 'CS:GO'];

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    const availableFormats = getUniqueValues('format').length > 0
        ? getUniqueValues('format')
        : ['Single Elimination', 'Double Elimination', 'Round Robin', 'Swiss', 'Mix'];

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const availableParticipantTypes = [
        { value: 'any', label: '–õ—é–±–æ–π' },
        { value: 'solo', label: '–°–æ–ª–æ' },
        { value: 'team', label: '–ö–æ–º–∞–Ω–¥–Ω—ã–π' }
    ];

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    const availableStatuses = [
        { value: 'registration', label: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' },
        { value: 'active', label: '–ê–∫—Ç–∏–≤–µ–Ω' },
        { value: 'in_progress', label: '–ò–¥–µ—Ç' },
        { value: 'completed', label: '–ó–∞–≤–µ—Ä—à–µ–Ω' },
        { value: 'cancelled', label: '–û—Ç–º–µ–Ω–µ–Ω' }
    ];

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const handleCheckboxChange = (category, value) => {
        setLocalFilters(prev => ({
            ...prev,
            [category]: prev[category].includes(value)
                ? prev[category].filter(item => item !== value)
                : [...prev[category], value]
        }));
    };

    const handlePrizepoolChange = (value) => {
        setLocalFilters(prev => ({
            ...prev,
            hasPrizePool: prev.hasPrizePool === value ? null : value
        }));
    };

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ —Å–ª–∞–π–¥–µ—Ä–∞
    const handleParticipantCountChange = (type, value) => {
        const numValue = Math.max(0, Math.min(128, parseInt(value) || 0));
        
        setLocalFilters(prev => {
            const newCount = { ...prev.participantCount };
            
            if (type === 'min') {
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
                newCount.min = Math.min(numValue, newCount.max);
            } else {
                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
                newCount.max = Math.max(numValue, newCount.min);
            }
            
            return {
                ...prev,
                participantCount: newCount
            };
        });
    };

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const resetFilters = () => {
        setLocalFilters({
            games: [],
            formats: [],
            participantTypes: [],
            statuses: [],
            hasPrizePool: null,
            participantCount: { min: 0, max: 128 }
        });
    };

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const applyFilters = () => {
        onApplyFilters(localFilters);
        onClose();
    };

    // –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const getActiveFiltersCount = () => {
        let count = 0;
        count += localFilters.games.length;
        count += localFilters.formats.length;
        count += localFilters.participantTypes.length;
        count += localFilters.statuses.length;
        if (localFilters.hasPrizePool !== null) count += 1;
        if (localFilters.participantCount.min > 0 || localFilters.participantCount.max < 128) count += 1;
        return count;
    };

    if (!isOpen) return null;

    return (
        <div className="tournament-filter-overlay" onClick={onClose}>
            <div 
                className="tournament-filter-container" 
                onClick={(e) => e.stopPropagation()}
            >
                {/* === –ó–ê–ì–û–õ–û–í–û–ö –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê === */}
                <div className="tournament-filter-header">
                    <div>
                        <h2 className="tournament-filter-title">
                            –§–∏–ª—å—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤
                            {getActiveFiltersCount() > 0 && (
                                <span className="tournament-filter-badge tournament-filter-badge-primary">
                                    {getActiveFiltersCount()}
                                </span>
                            )}
                        </h2>
                        <p className="tournament-filter-subtitle">
                            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
                        </p>
                    </div>
                    <button 
                        className="tournament-filter-close" 
                        onClick={onClose}
                        aria-label="–ó–∞–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä"
                    >
                        ‚úï
                    </button>
                </div>

                {/* === –¢–ï–õ–û –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê === */}
                <div className="tournament-filter-body">
                    
                    {/* üéÆ –î–ò–°–¶–ò–ü–õ–ò–ù–ê */}
                    <div className="tournament-filter-section">
                        <h3 className="tournament-filter-section-title">
                            –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
                            {localFilters.games.length > 0 && (
                                <span className="tournament-filter-badge tournament-filter-badge-success">
                                    {localFilters.games.length} –≤—ã–±—Ä–∞–Ω–æ
                                </span>
                            )}
                        </h3>
                        <div className="tournament-filter-checkbox-grid">
                            {availableGames.map(game => (
                                <label key={game} className="tournament-filter-checkbox-item">
                                    <input
                                        type="checkbox"
                                        checked={localFilters.games.includes(game)}
                                        onChange={() => handleCheckboxChange('games', game)}
                                        className="tournament-filter-checkbox"
                                    />
                                    <span className="tournament-filter-checkbox-label">{game}</span>
                                </label>
                            ))}
                        </div>
                    </div>

                    {/* üèÜ –§–û–†–ú–ê–¢ –¢–£–†–ù–ò–†–ê */}
                    <div className="tournament-filter-section">
                        <h3 className="tournament-filter-section-title">
                            –§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
                            {localFilters.formats.length > 0 && (
                                <span className="tournament-filter-badge tournament-filter-badge-success">
                                    {localFilters.formats.length} –≤—ã–±—Ä–∞–Ω–æ
                                </span>
                            )}
                        </h3>
                        <div className="tournament-filter-checkbox-grid">
                            {availableFormats.map(format => (
                                <label key={format} className="tournament-filter-checkbox-item">
                                    <input
                                        type="checkbox"
                                        checked={localFilters.formats.includes(format)}
                                        onChange={() => handleCheckboxChange('formats', format)}
                                        className="tournament-filter-checkbox"
                                    />
                                    <span className="tournament-filter-checkbox-label">{format}</span>
                                </label>
                            ))}
                        </div>
                    </div>

                    {/* üë• –¢–ò–ü –£–ß–ê–°–¢–ù–ò–ö–û–í */}
                    <div className="tournament-filter-section">
                        <h3 className="tournament-filter-section-title">
                            –¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                            {localFilters.participantTypes.length > 0 && (
                                <span className="tournament-filter-badge tournament-filter-badge-success">
                                    {localFilters.participantTypes.length} –≤—ã–±—Ä–∞–Ω–æ
                                </span>
                            )}
                        </h3>
                        <div className="tournament-filter-checkbox-grid">
                            {availableParticipantTypes.map(type => (
                                <label key={type.value} className="tournament-filter-checkbox-item">
                                    <input
                                        type="checkbox"
                                        checked={localFilters.participantTypes.includes(type.value)}
                                        onChange={() => handleCheckboxChange('participantTypes', type.value)}
                                        className="tournament-filter-checkbox"
                                    />
                                    <span className="tournament-filter-checkbox-label">{type.label}</span>
                                </label>
                            ))}
                        </div>
                    </div>

                    {/* üìä –°–¢–ê–¢–£–° */}
                    <div className="tournament-filter-section">
                        <h3 className="tournament-filter-section-title">
                            –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
                            {localFilters.statuses.length > 0 && (
                                <span className="tournament-filter-badge tournament-filter-badge-success">
                                    {localFilters.statuses.length} –≤—ã–±—Ä–∞–Ω–æ
                                </span>
                            )}
                        </h3>
                        <div className="tournament-filter-checkbox-grid">
                            {availableStatuses.map(status => (
                                <label key={status.value} className="tournament-filter-checkbox-item">
                                    <input
                                        type="checkbox"
                                        checked={localFilters.statuses.includes(status.value)}
                                        onChange={() => handleCheckboxChange('statuses', status.value)}
                                        className="tournament-filter-checkbox"
                                    />
                                    <span className="tournament-filter-checkbox-label">{status.label}</span>
                                </label>
                            ))}
                        </div>
                    </div>

                    {/* –°–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
                    {!isMobile && (
                        <>
                            {/* üí∞ –ü–†–ò–ó–û–í–û–ô –§–û–ù–î */}
                            <div className="tournament-filter-section">
                                <h3 className="tournament-filter-section-title">
                                    –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥
                                    {localFilters.hasPrizePool !== null && (
                                        <span className="tournament-filter-badge tournament-filter-badge-success">
                                            {localFilters.hasPrizePool ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}
                                        </span>
                                    )}
                                </h3>
                                <div className="tournament-filter-checkbox-grid">
                                    <label className="tournament-filter-checkbox-item">
                                        <input
                                            type="radio"
                                            name="prizePool"
                                            checked={localFilters.hasPrizePool === true}
                                            onChange={() => handlePrizepoolChange(true)}
                                            className="tournament-filter-checkbox"
                                        />
                                        <span className="tournament-filter-checkbox-label">–ï—Å—Ç—å</span>
                                    </label>
                                    <label className="tournament-filter-checkbox-item">
                                        <input
                                            type="radio"
                                            name="prizePool"
                                            checked={localFilters.hasPrizePool === false}
                                            onChange={() => handlePrizepoolChange(false)}
                                            className="tournament-filter-checkbox"
                                        />
                                        <span className="tournament-filter-checkbox-label">–ù–µ—Ç</span>
                                    </label>
                                </div>
                            </div>
                        </>
                    )}

                    {/* –ö–û–õ–ò–ß–ï–°–¢–í–û –£–ß–ê–°–¢–ù–ò–ö–û–í - –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–µ—Å–∫—Ç–æ–ø) */}
                    {!isMobile && (
                        <div className="tournament-filter-section">
                            <h3 className="tournament-filter-section-title">
                                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                {(localFilters.participantCount.min > 0 || localFilters.participantCount.max < 128) && (
                                    <span className="tournament-filter-badge tournament-filter-badge-success">
                                        {localFilters.participantCount.min} - {localFilters.participantCount.max}
                                    </span>
                                )}
                            </h3>
                            <div style={{ display: 'flex', flexDirection: 'column', gap: '15px' }}>
                            {/* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä 70% —à–∏—Ä–∏–Ω—ã */}
                            <div className="tournament-filter-range-slider" style={{ 
                                width: '70%', 
                                margin: '0 auto',
                                display: 'flex',
                                flexDirection: 'column',
                                alignItems: 'center'
                            }}>
                                <div className="tournament-filter-range-inputs" style={{ 
                                    display: 'flex', 
                                    justifyContent: 'space-between', 
                                    marginBottom: '15px',
                                    gap: '20px',
                                    width: '100%'
                                }}>
                                    <label style={{ flex: 1, textAlign: 'center' }}>
                                        –û—Ç:
                                        <input
                                            type="number"
                                            min="0"
                                            max="128"
                                            value={localFilters.participantCount.min}
                                            onChange={(e) => handleParticipantCountChange('min', e.target.value)}
                                            className="tournament-filter-input tournament-filter-input-small"
                                            style={{ 
                                                width: '100%',
                                                marginTop: '5px'
                                            }}
                                        />
                                    </label>
                                    <label style={{ flex: 1, textAlign: 'center' }}>
                                        –î–æ:
                                        <input
                                            type="number"
                                            min="0"
                                            max="128"
                                            value={localFilters.participantCount.max}
                                            onChange={(e) => handleParticipantCountChange('max', e.target.value)}
                                            className="tournament-filter-input tournament-filter-input-small"
                                            style={{ 
                                                width: '100%',
                                                marginTop: '5px'
                                            }}
                                        />
                                    </label>
                                </div>
                                
                                {/* üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¥–≤–æ–π–Ω–æ–π —Å–ª–∞–π–¥–µ—Ä */}
                                <div className="tournament-filter-dual-range" style={{ 
                                    position: 'relative', 
                                    width: '100%',
                                    height: '30px',
                                    marginBottom: '10px'
                                }}>
                                    {/* –§–æ–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ —Å–ª–∞–π–¥–µ—Ä–∞ */}
                                    <div style={{
                                        position: 'absolute',
                                        top: '50%',
                                        transform: 'translateY(-50%)',
                                        width: '100%',
                                        height: '6px',
                                        background: 'rgba(255, 255, 255, 0.2)',
                                        borderRadius: '3px',
                                        zIndex: 1
                                    }}></div>
                                    
                                    {/* –°–ª–∞–π–¥–µ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è */}
                                    <input
                                        type="range"
                                        min="0"
                                        max="128"
                                        value={localFilters.participantCount.min}
                                        onChange={(e) => handleParticipantCountChange('min', e.target.value)}
                                        style={{ 
                                            position: 'absolute',
                                            width: '100%',
                                            height: '30px',
                                            background: 'transparent',
                                            outline: 'none',
                                            appearance: 'none',
                                            WebkitAppearance: 'none',
                                            MozAppearance: 'none',
                                            pointerEvents: 'none',
                                            zIndex: localFilters.participantCount.max <= localFilters.participantCount.min ? 3 : 2
                                        }}
                                        className="dual-range-slider-input"
                                    />
                                    
                                    {/* –°–ª–∞–π–¥–µ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è */}
                                    <input
                                        type="range"
                                        min="0"
                                        max="128"
                                        value={localFilters.participantCount.max}
                                        onChange={(e) => handleParticipantCountChange('max', e.target.value)}
                                        style={{ 
                                            position: 'absolute',
                                            width: '100%',
                                            height: '30px',
                                            background: 'transparent',
                                            outline: 'none',
                                            appearance: 'none',
                                            WebkitAppearance: 'none',
                                            MozAppearance: 'none',
                                            pointerEvents: 'none',
                                            zIndex: localFilters.participantCount.max <= localFilters.participantCount.min ? 2 : 3
                                        }}
                                        className="dual-range-slider-input"
                                    />
                                </div>
                                
                                <div className="tournament-filter-range-labels" style={{ 
                                    display: 'flex', 
                                    justifyContent: 'space-between',
                                    width: '100%',
                                    fontSize: '12px',
                                    color: 'rgba(255, 255, 255, 0.6)'
                                }}>
                                    <span>0</span>
                                    <span>64</span>
                                    <span>128</span>
                                </div>
                            </div>
                        </div>
                        </div>
                    )}

                    {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
                    {getActiveFiltersCount() > 0 && !isMobile && (
                        <div className="tournament-filter-section">
                            <div style={{ padding: '16px', background: '#111', border: '1px solid #333' }}>
                                <h4 style={{ margin: '0 0 12px 0', fontWeight: 700, color: '#fff' }}>
                                    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤
                                </h4>
                                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
                                    {localFilters.games.map(game => (
                                        <span key={game} className="tournament-filter-badge tournament-filter-badge-primary">
                                            {game}
                                        </span>
                                    ))}
                                    {localFilters.formats.map(format => (
                                        <span key={format} className="tournament-filter-badge tournament-filter-badge-primary">
                                            {format}
                                        </span>
                                    ))}
                                    {localFilters.participantTypes.map(type => (
                                        <span key={type} className="tournament-filter-badge tournament-filter-badge-primary">
                                            {availableParticipantTypes.find(t => t.value === type)?.label}
                                        </span>
                                    ))}
                                    {localFilters.statuses.map(status => (
                                        <span key={status} className="tournament-filter-badge tournament-filter-badge-primary">
                                            {availableStatuses.find(s => s.value === status)?.label}
                                        </span>
                                    ))}
                                    {localFilters.hasPrizePool !== null && (
                                        <span className="tournament-filter-badge tournament-filter-badge-primary">
                                            –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {localFilters.hasPrizePool ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}
                                        </span>
                                    )}
                                    {(localFilters.participantCount.min > 0 || localFilters.participantCount.max < 128) && (
                                        <span className="tournament-filter-badge tournament-filter-badge-primary">
                                            {localFilters.participantCount.min}-{localFilters.participantCount.max} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                        </span>
                                    )}
                                </div>
                            </div>
                        </div>
                    )}
                </div>

                {/* === –ü–û–î–í–ê–õ –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê === */}
                <div className="tournament-filter-footer">
                    <button 
                        className="btn btn-secondary"
                        onClick={resetFilters}
                        disabled={getActiveFiltersCount() === 0}
                    >
                        –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ
                    </button>
                    
                    <button 
                        className="btn btn-secondary"
                        onClick={onClose}
                    >
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    
                    <button 
                        className="btn btn-primary"
                        onClick={applyFilters}
                    >
                        –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                        {getActiveFiltersCount() > 0 && ` (${getActiveFiltersCount()})`}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default TournamentFilterModal; 