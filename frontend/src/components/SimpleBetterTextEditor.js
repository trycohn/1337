import React, { useRef, useCallback, useMemo, useState } from 'react';
import DOMPurify from 'dompurify';
import './SimpleBetterTextEditor.css';

/**
 * üöÄ –ü–†–û–°–¢–û–ô –ù–û –ú–û–©–ù–´–ô RICH TEXT –†–ï–î–ê–ö–¢–û–†
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ React Quill –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å React 19
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç contentEditable —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç XSS
 */
const SimpleBetterTextEditor = ({ 
    value = '', 
    onChange, 
    placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...', 
    disabled = false,
    maxLength = 5000,
    className = '',
    id
}) => {
    const editorRef = useRef(null);
    const [isFocused, setIsFocused] = useState(false);
    const [currentLength, setCurrentLength] = useState(0);

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DOMPurify –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const purifyConfig = useMemo(() => ({
        ALLOWED_TAGS: [
            'p', 'br', 'strong', 'b', 'em', 'i', 'u', 's', 
            'ul', 'ol', 'li', 'blockquote', 'a', 'h3', 'h4', 'h5', 'h6'
        ],
        ALLOWED_ATTR: {
            'a': ['href', 'title'],
            '*': ['class']
        },
        FORBID_TAGS: ['script', 'object', 'embed', 'iframe', 'form', 'input', 'textarea', 'select', 'button', 'style'],
        FORBID_ATTR: ['onerror', 'onload', 'onclick', 'onmouseover', 'onfocus', 'onblur', 'onchange', 'onsubmit'],
        ALLOW_DATA_ATTR: false,
        SANITIZE_DOM: true,
        KEEP_CONTENT: true,
        FORBID_SCRIPT: true
    }), []);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const sanitizeContent = useCallback((content) => {
        try {
            return DOMPurify.sanitize(content, purifyConfig);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏:', error);
            return '';
        }
    }, [purifyConfig]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const safeValue = useMemo(() => {
        return sanitizeContent(value || '');
    }, [value, sanitizeContent]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const handleInput = useCallback((e) => {
        const content = e.target.innerHTML;
        const textLength = e.target.textContent.length;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if (textLength > maxLength) {
            // –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            const truncated = e.target.textContent.substring(0, maxLength);
            e.target.textContent = truncated;
            return;
        }

        setCurrentLength(textLength);

        // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –Ω–∞—Ä—É–∂—É
        const sanitizedContent = sanitizeContent(content);
        
        if (onChange && typeof onChange === 'function') {
            onChange(sanitizedContent);
        }
    }, [onChange, maxLength, sanitizeContent]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const handlePaste = useCallback((e) => {
        e.preventDefault();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        const text = (e.clipboardData || window.clipboardData).getData('text');
        const sanitizedText = sanitizeContent(text);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        document.execCommand('insertText', false, sanitizedText);
    }, [sanitizeContent]);

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const applyFormat = useCallback((command, value = null) => {
        if (disabled) return;
        
        document.execCommand(command, false, value);
        editorRef.current?.focus();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const content = editorRef.current?.innerHTML || '';
        const sanitizedContent = sanitizeContent(content);
        
        if (onChange) {
            onChange(sanitizedContent);
        }
    }, [disabled, onChange, sanitizeContent]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const formatHandlers = useMemo(() => ({
        bold: () => applyFormat('bold'),
        italic: () => applyFormat('italic'),
        underline: () => applyFormat('underline'),
        strikethrough: () => applyFormat('strikeThrough'),
        insertUnorderedList: () => applyFormat('insertUnorderedList'),
        insertOrderedList: () => applyFormat('insertOrderedList'),
        formatBlock: (tag) => applyFormat('formatBlock', tag),
        createLink: () => {
            const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL:');
            if (url) {
                applyFormat('createLink', url);
            }
        },
        removeFormat: () => applyFormat('removeFormat')
    }), [applyFormat]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞
    const handleFocus = useCallback(() => {
        setIsFocused(true);
    }, []);

    const handleBlur = useCallback(() => {
        setIsFocused(false);
    }, []);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ value –∏–∑–≤–Ω–µ
    React.useEffect(() => {
        if (editorRef.current && editorRef.current.innerHTML !== safeValue) {
            editorRef.current.innerHTML = safeValue;
            setCurrentLength(editorRef.current.textContent.length);
        }
    }, [safeValue]);

    return (
        <div className={`simple-text-editor ${className} ${isFocused ? 'focused' : ''} ${disabled ? 'disabled' : ''}`}>
            {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
            <div className="editor-toolbar">
                <div className="toolbar-group">
                    <button 
                        type="button" 
                        onClick={formatHandlers.bold}
                        disabled={disabled}
                        title="–ñ–∏—Ä–Ω—ã–π (Ctrl+B)"
                    >
                        <strong>B</strong>
                    </button>
                    <button 
                        type="button" 
                        onClick={formatHandlers.italic}
                        disabled={disabled}
                        title="–ö—É—Ä—Å–∏–≤ (Ctrl+I)"
                    >
                        <em>I</em>
                    </button>
                    <button 
                        type="button" 
                        onClick={formatHandlers.underline}
                        disabled={disabled}
                        title="–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (Ctrl+U)"
                    >
                        <u>U</u>
                    </button>
                    <button 
                        type="button" 
                        onClick={formatHandlers.strikethrough}
                        disabled={disabled}
                        title="–ó–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ"
                    >
                        <s>S</s>
                    </button>
                </div>

                <div className="toolbar-separator"></div>

                <div className="toolbar-group">
                    <select 
                        onChange={(e) => formatHandlers.formatBlock(e.target.value)}
                        disabled={disabled}
                        defaultValue=""
                    >
                        <option value="">–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç</option>
                        <option value="h3">–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3</option>
                        <option value="h4">–ó–∞–≥–æ–ª–æ–≤–æ–∫ 4</option>
                        <option value="h5">–ó–∞–≥–æ–ª–æ–≤–æ–∫ 5</option>
                        <option value="h6">–ó–∞–≥–æ–ª–æ–≤–æ–∫ 6</option>
                        <option value="blockquote">–¶–∏—Ç–∞—Ç–∞</option>
                    </select>
                </div>

                <div className="toolbar-separator"></div>

                <div className="toolbar-group">
                    <button 
                        type="button" 
                        onClick={formatHandlers.insertUnorderedList}
                        disabled={disabled}
                        title="–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
                    >
                        ‚Ä¢ –°–ø–∏—Å–æ–∫
                    </button>
                    <button 
                        type="button" 
                        onClick={formatHandlers.insertOrderedList}
                        disabled={disabled}
                        title="–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
                    >
                        1. –°–ø–∏—Å–æ–∫
                    </button>
                </div>

                <div className="toolbar-separator"></div>

                <div className="toolbar-group">
                    <button 
                        type="button" 
                        onClick={formatHandlers.createLink}
                        disabled={disabled}
                        title="–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"
                    >
                        üîó –°—Å—ã–ª–∫–∞
                    </button>
                    <button 
                        type="button" 
                        onClick={formatHandlers.removeFormat}
                        disabled={disabled}
                        title="–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
                    >
                        üßπ –û—á–∏—Å—Ç–∏—Ç—å
                    </button>
                </div>
            </div>

            {/* –†–µ–¥–∞–∫—Ç–æ—Ä */}
            <div
                ref={editorRef}
                contentEditable={!disabled}
                className="editor-content"
                onInput={handleInput}
                onPaste={handlePaste}
                onFocus={handleFocus}
                onBlur={handleBlur}
                data-placeholder={placeholder}
                id={id}
                suppressContentEditableWarning={true}
                dangerouslySetInnerHTML={{ __html: safeValue }}
            />

            {/* –ü–æ–¥–≤–∞–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
            <div className="editor-footer">
                <span className="character-count">
                    {currentLength} / {maxLength}
                </span>
                <span className="security-badge" title="–ó–∞—â–∏—â–µ–Ω–æ DOMPurify">
                    üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ
                </span>
            </div>
        </div>
    );
};

export default SimpleBetterTextEditor;