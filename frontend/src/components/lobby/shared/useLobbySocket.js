// üîå useLobbySocket - –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ö—É–∫ –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–±–±–∏
import { useEffect, useRef, useCallback } from 'react';
import io from 'socket.io-client';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ª–æ–±–±–∏
 * @param {Object} params
 * @param {string|number} params.lobbyId - ID –ª–æ–±–±–∏
 * @param {Object} params.user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Function} params.onLobbyState - Callback –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–±–±–∏
 * @param {Function} params.onLobbyUpdate - Callback –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–±–±–∏
 * @param {Function} params.onError - Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * @param {string} params.lobbyType - –¢–∏–ø –ª–æ–±–±–∏ ('tournament' | 'custom')
 * @returns {Object} { socket, isConnected, disconnect }
 */
function useLobbySocket({ 
    lobbyId, 
    user, 
    onLobbyState, 
    onLobbyUpdate, 
    onError,
    lobbyType = 'tournament'
}) {
    const socketRef = useRef(null);
    const isConnectedRef = useRef(false);

    const disconnect = useCallback(() => {
        if (socketRef.current) {
            console.log(`üîå [useLobbySocket] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ª–æ–±–±–∏ ${lobbyId}`);
            socketRef.current.disconnect();
            socketRef.current = null;
            isConnectedRef.current = false;
        }
    }, [lobbyId]);

    useEffect(() => {
        const token = localStorage.getItem('token');
        
        // –ù–µ —Å–æ–∑–¥–∞–µ–º socket –µ—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (!user || !lobbyId || !token) {
            if (lobbyId) {
                console.warn('‚ö†Ô∏è [useLobbySocket] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', { 
                    hasUser: !!user, 
                    lobbyId,
                    hasToken: !!token
                });
            }
            return;
        }

        console.log(`üîå [useLobbySocket] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${lobbyType} –ª–æ–±–±–∏ ${lobbyId}`);
        
        // ‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ —Ç–æ–ª—å–∫–æ polling –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω WebSocket –≤ Nginx
        const socket = io(API_URL, { 
            auth: { token }, 
            transports: ['polling', 'websocket'], // –°–Ω–∞—á–∞–ª–∞ polling
            upgrade: true, // –ü–æ–∑–≤–æ–ª–∏—Ç –∞–ø–≥—Ä–µ–π–¥ –∫–æ–≥–¥–∞ WebSocket –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç
            reconnectionDelay: 1000,
            reconnectionDelayMax: 5000,
            reconnectionAttempts: 5
        });
        
        socketRef.current = socket;

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socket.on('connect', () => {
            console.log(`‚úÖ [useLobbySocket] Socket –ø–æ–¥–∫–ª—é—á–µ–Ω`, { 
                socketId: socket.id,
                lobbyId, 
                userId: user?.id,
                lobbyType
            });
            
            isConnectedRef.current = true;
            
            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ª–æ–±–±–∏
            const roomEvent = lobbyType === 'tournament' ? 'join_lobby' : 'join_admin_lobby';
            socket.emit(roomEvent, { 
                lobbyId: Number(lobbyId),
                userId: user?.id 
            });
            
            console.log(`üì° [useLobbySocket] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ${roomEvent}`);
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–±–±–∏
        socket.on('lobby_state', (data) => {
            console.log(`[useLobbySocket ${lobbyType}] lobby_state received`, data);
            if (data && onLobbyState) {
                onLobbyState(data);
            }
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–±–±–∏
        socket.on('lobby_update', (data) => {
            console.log(`[useLobbySocket ${lobbyType}] lobby_update`, data);
            if (data && onLobbyUpdate) {
                onLobbyUpdate(data);
            }
        });

        // –û—à–∏–±–∫–∏
        socket.on('error', (error) => {
            console.error(`‚ùå [useLobbySocket ${lobbyType}] Socket error:`, error);
            if (onError) {
                onError(error);
            }
        });

        socket.on('connect_error', (error) => {
            console.error(`‚ùå [useLobbySocket ${lobbyType}] Connect error:`, error);
            isConnectedRef.current = false;
            if (onError) {
                onError(error);
            }
        });

        socket.on('disconnect', (reason) => {
            console.log(`üîå [useLobbySocket ${lobbyType}] –û—Ç–∫–ª—é—á–µ–Ω–æ:`, reason);
            isConnectedRef.current = false;
        });

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            console.log(`üîå [useLobbySocket] –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ª–æ–±–±–∏ ${lobbyId}`);
            socket.disconnect();
            socketRef.current = null;
            isConnectedRef.current = false;
        };
    }, [user, lobbyId, lobbyType, onLobbyState, onLobbyUpdate, onError]);

    return {
        socket: socketRef.current,
        isConnected: isConnectedRef.current,
        disconnect
    };
}

export default useLobbySocket;

