// üë• TeamRosterBase - –ë–∞–∑–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã
import React from 'react';
import './TeamRosterBase.css';

function TeamRosterBase({ 
    teamName,
    players = [],
    teamNumber = 1,
    showReady = false,
    isReady = false,
    canToggleReady = false,
    onToggleReady = null,
    emptySlots = 0,
    children // –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, drag-drop)
}) {
    return (
        <div className={`team-roster-base team-${teamNumber}`}>
            <div className="team-roster-header">
                <h3 className="team-roster-name">{teamName}</h3>
                {showReady && (
                    <div className={`team-roster-ready-indicator ${isReady ? 'ready' : 'not-ready'}`}>
                        <span className="ready-icon">{isReady ? '‚úÖ' : '‚ùå'}</span>
                        <span className="ready-text">{isReady ? '–ì–æ—Ç–æ–≤–∞' : '–ù–µ –≥–æ—Ç–æ–≤–∞'}</span>
                    </div>
                )}
            </div>
            
            <div className="team-roster-players">
                {players.map((player, idx) => (
                    <div key={player.id || idx} className="team-roster-player">
                        <div className="player-avatar">
                            <img 
                                src={player.avatar || '/default-avatar.png'} 
                                alt={player.username || player.display_name}
                                onError={(e) => { e.target.src = '/default-avatar.png'; }}
                            />
                        </div>
                        <div className="player-info">
                            <span className="player-name">
                                {player.username || player.display_name || '–ò–≥—Ä–æ–∫'}
                            </span>
                            {player.is_captain && (
                                <span className="player-captain-badge" title="–ö–∞–ø–∏—Ç–∞–Ω">üëë</span>
                            )}
                        </div>
                        {showReady && (
                            <div className="player-ready-status">
                                <span 
                                    className={`ready-indicator ${player.is_ready ? 'ready' : 'not-ready'}`}
                                    title={player.is_ready ? '–ì–æ—Ç–æ–≤' : '–ù–µ –≥–æ—Ç–æ–≤'}
                                >
                                    {player.is_ready ? '‚úÖ' : '‚ùå'}
                                </span>
                            </div>
                        )}
                    </div>
                ))}
                
                {/* –ü—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã */}
                {Array.from({ length: emptySlots }).map((_, idx) => (
                    <div key={`empty-${idx}`} className="team-roster-player empty-slot">
                        <div className="player-avatar empty">
                            <span>?</span>
                        </div>
                        <div className="player-info">
                            <span className="player-name empty">–ü—É—Å—Ç–æ</span>
                        </div>
                    </div>
                ))}
            </div>
            
            {canToggleReady && onToggleReady && (
                <button 
                    className={`team-roster-ready-btn ${isReady ? 'ready' : 'not-ready'}`}
                    onClick={onToggleReady}
                >
                    {isReady ? '–û—Ç–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å' : '–ì–æ—Ç–æ–≤—ã –∫ –∏–≥—Ä–µ'}
                </button>
            )}
            
            {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤ custom –ª–æ–±–±–∏) */}
            {children}
        </div>
    );
}

export default TeamRosterBase;

