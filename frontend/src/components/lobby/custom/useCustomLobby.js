// üéÆ useCustomLobby - –•—É–∫ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–æ–±–±–∏
import { useState, useCallback, useEffect, useMemo, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../../../axios';

function useCustomLobby(user, isAdmin) {
    const navigate = useNavigate();
    const [lobbyId, setLobbyId] = useState(null);
    const [lobby, setLobby] = useState(null);
    const [availableMaps, setAvailableMaps] = useState([]);
    const [selections, setSelections] = useState([]);
    const [team1Users, setTeam1Users] = useState([]);
    const [team2Users, setTeam2Users] = useState([]);
    const [unassignedUsers, setUnassignedUsers] = useState([]);
    const [invitedPendingUsers, setInvitedPendingUsers] = useState([]);
    const [invitedDeclinedUsers, setInvitedDeclinedUsers] = useState([]);
    const [onlineUserIds, setOnlineUserIds] = useState([]);
    const [playerReady, setPlayerReady] = useState({});
    const [loading, setLoading] = useState(false);
    const playerReadyRef = useRef({});
    const pollInFlightRef = useRef(false);
    const teamConfirmInFlightRef = useRef({ 1: false, 2: false });
    const readyStorageKey = useMemo(() => lobbyId ? `admin_lobby_player_ready_${lobbyId}` : null, [lobbyId]);

    // –ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å
    const canInvite = useMemo(() => {
        if (!user) return false;
        if (isAdmin) return true;
        if (lobby && lobby.created_by && Number(lobby.created_by) === Number(user.id)) return true;
        return true; // Backend –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞
    }, [isAdmin, lobby, user]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–±–±–∏
    const updateLobbyState = useCallback((data) => {
        setLobby(data.lobby);
        setSelections(data.selections || []);
        setAvailableMaps(data.available_maps || []);
        setTeam1Users(data.team1_users || []);
        setTeam2Users(data.team2_users || []);
        setUnassignedUsers(data.unassigned_users || []);
        setInvitedPendingUsers(data.invited_pending_users || []);
        setInvitedDeclinedUsers(data.invited_declined_users || []);
        setOnlineUserIds(data.online_user_ids || []);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
        const readyState = {};
        [...(data.team1_users || []), ...(data.team2_users || [])].forEach(u => {
            readyState[u.id] = u.is_ready || false;
        });
        setPlayerReady(readyState);
    }, []);

    // –°–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω-–ª–æ–±–±–∏
    const ensureAdminLobby = useCallback(async () => {
        if (!isAdmin) return;
        const token = localStorage.getItem('token');
        setLoading(true);
        try {
            const { data } = await api.post('/api/admin/match-lobby', {}, { headers: { Authorization: `Bearer ${token}` } });
            if (data?.success) {
                setLobbyId(data.lobby.id);
                const r = await api.get(`/api/admin/match-lobby/${data.lobby.id}`, { headers: { Authorization: `Bearer ${token}` } });
                if (r?.data?.success) {
                    updateLobbyState(r.data);
                } else {
                    setLobby(data.lobby);
                    setAvailableMaps(data.available_maps || []);
                }
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏:', err);
        } finally {
            setLoading(false);
        }
    }, [isAdmin, updateLobbyState]);

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–±–±–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const loadInvitedLobby = useCallback(async () => {
        if (isAdmin) return; // –ê–¥–º–∏–Ω—ã —Å–æ–∑–¥–∞—é—Ç –ª–æ–±–±–∏ —Å–∞–º–∏
        
        const token = localStorage.getItem('token');
        setLoading(true);
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
            const { data } = await api.get('/api/admin/match-lobbies/my-invites', {
                headers: { Authorization: `Bearer ${token}` }
            });
            
            if (data?.success && data.invites?.length > 0) {
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏
                const invite = data.invites[0];
                setLobbyId(invite.lobby_id);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–±–±–∏
                const r = await api.get(`/api/admin/match-lobby/${invite.lobby_id}`, {
                    headers: { Authorization: `Bearer ${token}` }
                });
                
                if (r?.data?.success) {
                    updateLobbyState(r.data);
                }
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ª–æ–±–±–∏:', err);
        } finally {
            setLoading(false);
        }
    }, [isAdmin, updateLobbyState]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–±–±–∏
    const refreshLobbyState = useCallback(async () => {
        if (!lobbyId) return;
        const token = localStorage.getItem('token');
        try {
            const r = await api.get(`/api/admin/match-lobby/${lobbyId}`, { headers: { Authorization: `Bearer ${token}` } });
            if (r?.data?.success) {
                updateLobbyState(r.data);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–±–±–∏:', err);
        }
    }, [lobbyId, updateLobbyState]);

    // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const inviteUserToTeam = useCallback(async (userId, team) => {
        console.log('[useCustomLobby] inviteUserToTeam –≤—ã–∑–≤–∞–Ω:', { userId, team, lobbyId });
        
        if (!userId || !team) {
            console.error('[useCustomLobby] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç userId –∏–ª–∏ team:', { userId, team });
            return;
        }
        
        if (!lobbyId) {
            console.error('[useCustomLobby] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç lobbyId! –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏ —Å–Ω–∞—á–∞–ª–∞.');
            return;
        }
        
        const token = localStorage.getItem('token');
        try {
            const acceptFlag = !!team;
            console.log('[useCustomLobby] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', { lobbyId, userId, team, acceptFlag });
            
            await api.post(`/api/admin/match-lobby/${lobbyId}/invite`, { user_id: userId, team, accept: acceptFlag }, { headers: { Authorization: `Bearer ${token}` } });
            
            console.log('[useCustomLobby] –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            await refreshLobbyState();
        } catch (err) {
            console.error('[useCustomLobby] –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
        }
    }, [lobbyId, refreshLobbyState]);

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const removeUserFromLobby = useCallback(async (userId) => {
        if (!userId || !lobbyId) return;
        const token = localStorage.getItem('token');
        try {
            await api.delete(`/api/admin/match-lobby/${lobbyId}/invite/${userId}`, { headers: { Authorization: `Bearer ${token}` } });
            if (Number(userId) === Number(user?.id)) {
                navigate('/tournaments', { replace: true });
                return;
            }
            await refreshLobbyState();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
        }
    }, [lobbyId, user, navigate, refreshLobbyState]);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –º–∞—Ç—á–∞
    const setMatchFormat = useCallback(async (format) => {
        if (!lobbyId) return;
        const token = localStorage.getItem('token');
        try {
            await api.post(`/api/admin/match-lobby/${lobbyId}/format`, { format }, { headers: { Authorization: `Bearer ${token}` } });
            await refreshLobbyState();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞:', err);
        }
    }, [lobbyId, refreshLobbyState]);

    // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
    const togglePlayerReady = useCallback(async (userId, teamId) => {
        if (!lobbyId) return;
        
        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        setPlayerReady(prev => ({ ...prev, [userId]: !prev[userId] }));
        
        const token = localStorage.getItem('token');
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ backend –Ω–æ–≤—ã–π endpoint –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            const newReady = !playerReady[userId];
            await api.post(
                `/api/admin/match-lobby/${lobbyId}/player-ready`, 
                { userId, ready: newReady }, 
                { headers: { Authorization: `Bearer ${token}` } }
            );
            
            console.log('[useCustomLobby] –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', { userId, ready: newReady });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', err);
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            setPlayerReady(prev => ({ ...prev, [userId]: !prev[userId] }));
        }
    }, [lobbyId, playerReady]);

    // –î–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–æ–π
    const handleMapAction = useCallback(async (mapName, action) => {
        if (!lobbyId) return;
        const token = localStorage.getItem('token');
        
        console.log('[useCustomLobby] –î–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–æ–π:', { mapName, action });
        
        try {
            await api.post(
                `/api/admin/match-lobby/${lobbyId}/select-map`, 
                { mapName, action }, 
                { headers: { Authorization: `Bearer ${token}` } }
            );
            
            console.log('[useCustomLobby] –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            await refreshLobbyState();
        } catch (err) {
            console.error('[useCustomLobby] –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ–π:', err);
            console.error('[useCustomLobby] –î–µ—Ç–∞–ª–∏:', {
                status: err.response?.status,
                data: err.response?.data
            });
        }
    }, [lobbyId, refreshLobbyState]);

    // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–∏–∫/–±–∞–Ω
    const startPickBan = useCallback(async () => {
        if (!lobbyId) return;
        
        console.log('[useCustomLobby] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–∏–∫/–±–∞–Ω –¥–ª—è –ª–æ–±–±–∏:', lobbyId);
        
        const token = localStorage.getItem('token');
        try {
            console.log('[useCustomLobby] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ POST /api/admin/match-lobby/' + lobbyId + '/start-pick');
            
            const { data } = await api.post(
                `/api/admin/match-lobby/${lobbyId}/start-pick`, 
                {}, 
                { headers: { Authorization: `Bearer ${token}` } }
            );
            
            console.log('[useCustomLobby] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            
            if (data?.success) {
                console.log('[useCustomLobby] –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                await refreshLobbyState();
            } else {
                console.error('[useCustomLobby] –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª success: false');
            }
        } catch (err) {
            console.error('[useCustomLobby] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', err);
            console.error('[useCustomLobby] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                status: err.response?.status,
                data: err.response?.data,
                message: err.message
            });
            alert(err.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã');
        }
    }, [lobbyId, refreshLobbyState]);

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–∞
    const createMatch = useCallback(async () => {
        if (!lobbyId) return;
        const token = localStorage.getItem('token');
        try {
            const { data } = await api.post(`/api/admin/match-lobby/${lobbyId}/create-match`, {}, { headers: { Authorization: `Bearer ${token}` } });
            if (data?.success && data.match_id) {
                navigate(`/matches/custom/${data.match_id}`);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞:', err);
        }
    }, [lobbyId, navigate]);

    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–±–±–∏
    const clearLobby = useCallback(async () => {
        if (!lobbyId) return;
        const token = localStorage.getItem('token');
        try {
            await api.post(`/api/admin/match-lobby/${lobbyId}/clear`, {}, { headers: { Authorization: `Bearer ${token}` } });
            await refreshLobbyState();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–±–±–∏:', err);
        }
    }, [lobbyId, refreshLobbyState]);

    // –°–¥–µ–ª–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∫–∞–ø–∏—Ç–∞–Ω–æ–º (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ)
    const makeCaptain = useCallback(async (userId, team) => {
        if (!lobbyId || !userId || !team) return;
        
        const token = localStorage.getItem('token');
        const teamUsers = team === 1 ? team1Users : team2Users;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ —Å—Ç–∞—Ä–æ–º—É –ø–æ—Ä—è–¥–∫—É
        const newOrder = [
            userId,
            ...teamUsers.filter(u => u.id !== userId).map(u => u.id)
        ];
        
        console.log('[useCustomLobby] –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–º–∞–Ω–¥—ã:', { team, newOrder });
        
        try {
            await api.post(
                `/api/admin/match-lobby/${lobbyId}/reorder-team`, 
                { team, userIds: newOrder }, 
                { headers: { Authorization: `Bearer ${token}` } }
            );
            await refreshLobbyState();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞:', err);
        }
    }, [lobbyId, team1Users, team2Users, refreshLobbyState]);

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–±–±–∏
    useEffect(() => {
        if (!readyStorageKey) return;
        // –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ –Ω–æ–≤–æ–µ –ª–æ–±–±–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        try {
            localStorage.removeItem(readyStorageKey);
            setPlayerReady({});
            console.log('[useCustomLobby] –û—á–∏—â–µ–Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ª–æ–±–±–∏');
        } catch (_) {}
    }, [readyStorageKey]);

    // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤ localStorage - –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å "–Ω–µ –≥–æ—Ç–æ–≤"
    // useEffect(() => {
    //     if (!readyStorageKey) return;
    //     try {
    //         localStorage.setItem(readyStorageKey, JSON.stringify(playerReady));
    //     } catch (_) {}
    // }, [playerReady, readyStorageKey]);

    useEffect(() => { 
        playerReadyRef.current = playerReady; 
    }, [playerReady]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    useEffect(() => {
        setPlayerReady(prev => {
            const next = { ...prev };
            for (const u of team1Users) if (next[u.id] === undefined) next[u.id] = false;
            for (const u of team2Users) if (next[u.id] === undefined) next[u.id] = false;
            return next;
        });
    }, [team1Users, team2Users]);

    // üîÑ Live –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–±–±–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    useEffect(() => {
        if (!lobbyId) return;
        
        let isActive = true;
        
        const poll = async () => {
            if (!isActive || !lobbyId) return;
            
            const token = localStorage.getItem('token');
            try {
                const r = await api.get(`/api/admin/match-lobby/${lobbyId}`, { 
                    headers: { Authorization: `Bearer ${token}` } 
                });
                if (r?.data?.success && isActive) {
                    updateLobbyState(r.data);
                }
            } catch (err) {
                console.error('Polling –æ—à–∏–±–∫–∞:', err);
            }
        };
        
        const interval = setInterval(poll, 2000);
        
        return () => {
            isActive = false;
            clearInterval(interval);
        };
    }, [lobbyId, updateLobbyState]);

    return {
        lobbyId,
        lobby,
        availableMaps,
        selections,
        team1Users,
        team2Users,
        unassignedUsers,
        invitedPendingUsers,
        invitedDeclinedUsers,
        onlineUserIds,
        playerReady,
        loading,
        canInvite,
        ensureAdminLobby,
        loadInvitedLobby,
        refreshLobbyState,
        updateLobbyState,
        inviteUserToTeam,
        removeUserFromLobby,
        setMatchFormat,
        togglePlayerReady,
        handleMapAction,
        startPickBan,
        createMatch,
        clearLobby,
        makeCaptain
    };
}

export default useCustomLobby;

