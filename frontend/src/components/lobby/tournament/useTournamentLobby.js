// üéÆ useTournamentLobby - –•—É–∫ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –ª–æ–±–±–∏
import { useState, useCallback, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import useLobbySocket from '../shared/useLobbySocket';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';

function useTournamentLobby(lobbyId, user) {
    const navigate = useNavigate();
    const [lobby, setLobby] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [ready, setReady] = useState(false); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï –≥–æ—Ç–æ–≤
    const [selectedFormat, setSelectedFormat] = useState(null);
    const [steamModalOpen, setSteamModalOpen] = useState(false);
    const redirectedRef = useRef(false);

    // –°–±—Ä–æ—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–±–±–∏
    useEffect(() => {
        setReady(false);
        console.log('[useTournamentLobby] –°–±—Ä–æ—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ª–æ–±–±–∏:', lobbyId);
    }, [lobbyId]);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –º–∞—Ç—á –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    useEffect(() => {
        if (!lobby || redirectedRef.current) return;
        
        if (lobby.status === 'completed' && lobby.match_id) {
            console.log('üéâ [useTournamentLobby] –õ–æ–±–±–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –º–∞—Ç—á:', lobby.match_id);
            redirectedRef.current = true;
            
            const timer = setTimeout(() => {
                navigate(`/tournaments/${lobby.tournament_id}/matches/${lobby.match_id}`);
            }, 2000);
            
            return () => clearTimeout(timer);
        }
    }, [lobby, navigate]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏
    const fetchLobbyInfo = useCallback(async () => {
        if (!user || !lobbyId) {
            console.warn('‚ö†Ô∏è [useTournamentLobby] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ lobbyId');
            return;
        }
        
        if (!user.steam_id && !user.steamId) { 
            setSteamModalOpen(true); 
            setLoading(false); 
            return; 
        }
        
        try {
            const token = localStorage.getItem('token');
            const url = `${API_URL}/api/tournaments/lobby/${lobbyId}`;
            
            const response = await fetch(url, {
                headers: { 'Authorization': `Bearer ${token}` }
            });

            if (!response.ok) {
                // ‚è∞ –õ–æ–±–±–∏ —É—Å—Ç–∞—Ä–µ–ª–æ (410 Gone)
                if (response.status === 410) {
                    const errorData = await response.json();
                    setError(errorData.message || '–≠—Ç–æ –ª–æ–±–±–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
                    setLoading(false);
                    return;
                }
                
                // –ï—Å–ª–∏ –ª–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ
                if (response.status === 404 || response.status === 500) {
                    const activeLobbiesResponse = await fetch(`${API_URL}/api/tournaments/lobbies/active`, {
                        headers: { 'Authorization': `Bearer ${token}` }
                    });
                    
                    if (activeLobbiesResponse.ok) {
                        const activeData = await activeLobbiesResponse.json();
                        
                        if (activeData.success && activeData.lobbies?.length > 0) {
                            const activeLobby = activeData.lobbies[0];
                            navigate(`/match-lobby/${activeLobby.id}`, { replace: true });
                            return;
                        }
                    }
                }
                
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–±–±–∏ (${response.status})`);
            }

            const data = await response.json();
            
            if (data.success) {
                setLobby(data.lobby);
                if (data.lobby.match_format) setSelectedFormat(data.lobby.match_format);
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
            }
        } catch (error) {
            console.error('‚ùå [useTournamentLobby] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–±–±–∏:', error);
            setError(error.message);
        } finally {
            setLoading(false);
        }
    }, [user, lobbyId, navigate]);

    useEffect(() => { 
        fetchLobbyInfo(); 
    }, [fetchLobbyInfo]);

    // üîÑ Live –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–±–±–∏ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    useEffect(() => {
        if (!lobbyId || !user) return;
        
        let isActive = true;
        
        const poll = async () => {
            if (!isActive || !lobbyId || !user) return;
            
            const token = localStorage.getItem('token');
            const url = `${API_URL}/api/tournaments/lobby/${lobbyId}`;
            
            try {
                const response = await fetch(url, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (response.ok && isActive) {
                    const data = await response.json();
                    if (data.success && data.lobby) {
                        setLobby(data.lobby);
                        if (data.lobby.match_format) setSelectedFormat(data.lobby.match_format);
                    }
                }
            } catch (err) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ polling
            }
        };
        
        const interval = setInterval(poll, 3000);
        
        return () => {
            isActive = false;
            clearInterval(interval);
        };
    }, [lobbyId, user]);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    const handleReadyToggle = useCallback(async () => {
        if (!user?.steam_id && !user?.steamId) { 
            setSteamModalOpen(true); 
            return; 
        }
        
        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        setReady(!ready);
        
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`${API_URL}/api/tournaments/lobby/${lobbyId}/ready`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ ready: !ready })
            });

            if (!response.ok) {
                // –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                setReady(ready);
                throw new Error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏');
            }

            const data = await response.json();
            
            if (!data.success) {
                setReady(ready);
            }
        } catch (error) {
            console.error('‚ùå [useTournamentLobby] –û—à–∏–±–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
        }
    }, [user, lobbyId, ready, setSteamModalOpen]);

    // –î–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–æ–π (pick/ban)
    const handleMapAction = useCallback(async (mapName, action) => {
        if (!user?.steam_id && !user?.steamId) {
            setSteamModalOpen(true);
            return;
        }

        console.log('[useTournamentLobby] –î–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–æ–π:', { mapName, action });

        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`${API_URL}/api/tournaments/lobby/${lobbyId}/select-map`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ mapName, action })
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('[useTournamentLobby] –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
                throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ–π');
            }

            const data = await response.json();
            console.log('[useTournamentLobby] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            
            if (!data.success) throw new Error(data.error);
            
            console.log('‚úÖ [useTournamentLobby] –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå [useTournamentLobby] –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ä—Ç–æ–π:', error);
        }
    }, [user, lobbyId, setSteamModalOpen]);

    // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–∏–∫/–±–∞–Ω
    const startPickBan = useCallback(async () => {
        if (!user?.steam_id && !user?.steamId) {
            setSteamModalOpen(true);
            return;
        }

        console.log('[useTournamentLobby] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–∏–∫/–±–∞–Ω –¥–ª—è –ª–æ–±–±–∏:', lobbyId);

        try {
            const token = localStorage.getItem('token');
            console.log('[useTournamentLobby] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ POST /api/tournaments/lobby/' + lobbyId + '/start-pickban');
            
            const response = await fetch(`${API_URL}/api/tournaments/lobby/${lobbyId}/start-pickban`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('[useTournamentLobby] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
                ok: response.ok,
                status: response.status
            });

            if (!response.ok) {
                const data = await response.json();
                console.error('[useTournamentLobby] –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã');
            }

            const data = await response.json();
            console.log('[useTournamentLobby] –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
            
            if (!data.success) {
                console.error('[useTournamentLobby] success = false');
                throw new Error(data.error);
            }
            
            console.log('‚úÖ [useTournamentLobby] –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå [useTournamentLobby] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', error);
            alert(error.message);
        }
    }, [user, lobbyId, setSteamModalOpen]);

    // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const handleLobbyState = useCallback((data) => {
        if (data) {
            setLobby(data);
            if (data.match_format) setSelectedFormat(data.match_format);
            setLoading(false);
        }
    }, []);

    const handleLobbyUpdate = useCallback((data) => {
        if (data) {
            setLobby(data);
            if (data.match_format) setSelectedFormat(data.match_format);
        }
    }, []);

    const handlePlayerReadyUpdate = useCallback((data) => {
        console.log('[useTournamentLobby] WebSocket: –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞:', data);
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ–±—â–∏–π update
    }, []);

    const handleSocketError = useCallback((error) => {
        console.error('‚ùå [useTournamentLobby] Socket error:', error);
        setError(error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    }, []);

    const { socket } = useLobbySocket({
        lobbyId,
        user,
        onLobbyState: handleLobbyState,
        onLobbyUpdate: handleLobbyUpdate,
        onError: handleSocketError,
        lobbyType: 'tournament'
    });

    // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤
    useEffect(() => {
        if (!socket) return;
        
        const handlePlayerReadyEvent = (data) => {
            console.log('[useTournamentLobby] WebSocket: –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data);
            if (data.userId === user?.id && typeof data.ready === 'boolean') {
                setReady(data.ready);
            }
        };
        
        socket.on('lobby_update_player_ready', handlePlayerReadyEvent);
        
        return () => {
            socket.off('lobby_update_player_ready', handlePlayerReadyEvent);
        };
    }, [socket, user]);

    return {
        lobby,
        loading,
        error,
        ready,
        selectedFormat,
        steamModalOpen,
        setSteamModalOpen,
        handleReadyToggle,
        handleMapAction,
        startPickBan,
        socket
    };
}

export default useTournamentLobby;

