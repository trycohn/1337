import React, { useState, useEffect, useCallback } from 'react';
import api from '../utils/api';
import { ensureHttps } from '../utils/userHelpers';
import TeamCard from './TeamCard';
import './TeamGenerator.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
 * 
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Object} props.tournament - –û–±—ä–µ–∫—Ç —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Array} props.participants - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
 * @param {Function} props.onTeamsGenerated - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥
 * @param {Function} props.onTeamsUpdated - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Function} props.onRemoveParticipant - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
 * @param {boolean} props.isAdminOrCreator - –ò–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Function} props.toast - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
const TeamGenerator = ({ 
    tournament, 
    participants, 
    onTeamsGenerated, 
    onTeamsUpdated,
    onRemoveParticipant,
    isAdminOrCreator = false,
    toast
}) => {
    const [ratingType, setRatingType] = useState('faceit');
    const [teamSize, setTeamSize] = useState('5');
    const [loading, setLoading] = useState(false);
    const [mixedTeams, setMixedTeams] = useState([]);
    const [originalParticipants, setOriginalParticipants] = useState([]);
    const [loadingParticipants, setLoadingParticipants] = useState(false);
    const [loadingTeams, setLoadingTeams] = useState(false);

    // üÜï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø
    const [showReformModal, setShowReformModal] = useState(false);
    const [reformLoading, setReformLoading] = useState(false);

    // ‚è±Ô∏è Debounce –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const [lastRequestTime, setLastRequestTime] = useState({});
    const REQUEST_DEBOUNCE_MS = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
    
    const shouldMakeRequest = (requestType) => {
        const now = Date.now();
        const lastTime = lastRequestTime[requestType] || 0;
        
        if (now - lastTime < REQUEST_DEBOUNCE_MS) {
            console.log(`‚è±Ô∏è TeamGenerator Debounce: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${requestType}, –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å ${now - lastTime}ms –Ω–∞–∑–∞–¥`);
            return false;
        }
        
        setLastRequestTime(prev => ({ ...prev, [requestType]: now }));
        return true;
    };

    // üéØ –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –°–†–ï–î–ù–ï–ì–û –†–ï–ô–¢–ò–ù–ì–ê –ö–û–ú–ê–ù–î–´
    const calculateTeamAverageRating = useCallback((team) => {
        if (!team.members || team.members.length === 0) return 0;
        
        const ratings = team.members.map(member => {
            if (ratingType === 'faceit') {
                return parseInt(member.faceit_elo) || 1000; // –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ FACEIT
            } else {
                return parseInt(member.cs2_premier_rank || member.premier_rank) || 5; // –ë–∞–∑–æ–≤—ã–π —Ä–∞–Ω–≥ CS2
            }
        }).filter(rating => rating > 0);
        
        if (ratings.length === 0) return 0;
        
        const average = ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length;
        return Math.round(average);
    }, [ratingType]);

    // üÜï –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø
    const canReformTeams = useCallback(() => {
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (!tournament || !isAdminOrCreator) return false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'active', –Ω–æ –ù–ï 'in_progress'
        if (tournament.status !== 'active') return false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        const hasTeams = (mixedTeams && mixedTeams.length > 0) || 
                         (tournament.teams && tournament.teams.length > 0);
        if (!hasTeams) return false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –º–∏–∫—Å-—Ñ–æ—Ä–º–∞—Ç–∞
        if (tournament.format !== 'mix') return false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π (—Ç—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è)
        // –≠—Ç–æ –≤–∞–∂–Ω–æ - –µ—Å–ª–∏ –º–∞—Ç—á–∏ —Å–æ–∑–¥–∞–Ω—ã, –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Å–µ—Ç–∫—É
        if (tournament.matches && tournament.matches.length > 0) return false;
        
        return true;
    }, [tournament, isAdminOrCreator, mixedTeams]);

    // üÜï –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ê–ù–î
    const handleReformTeams = async () => {
        if (!canReformTeams() || displayParticipants.length < 2) {
            console.warn('–ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
            return;
        }

        setReformLoading(true);
        
        try {
            const teamSizeNumber = parseInt(teamSize);
            
            console.log('üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã:', {
                teamSize: teamSizeNumber,
                participantsCount: displayParticipants.length,
                ratingType,
                tournamentId: tournament.id
            });

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –º–∏–∫—Å-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
            const response = await api.post(`/api/tournaments/${tournament.id}/mix-generate-teams`, {});

            if (response.data && response.data.teams) {
                console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã:', response.data.teams);
                
                // üéØ –û–ë–û–ì–ê–©–ê–ï–ú –ö–û–ú–ê–ù–î–´ –°–†–ï–î–ù–ò–ú –†–ï–ô–¢–ò–ù–ì–û–ú
                const enrichedTeams = response.data.teams.map(team => ({
                    ...team,
                    averageRating: calculateTeamAverageRating(team)
                }));
                
                setMixedTeams(enrichedTeams);
                
                // üéØ –£–í–ï–î–û–ú–õ–Ø–ï–ú –û –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–ò
                if (onTeamsGenerated) {
                    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö');
                    onTeamsGenerated(enrichedTeams);
                }
                
                if (onTeamsUpdated) {
                    onTeamsUpdated();
                }
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                setShowReformModal(false);
                
                console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã');
                
                if (toast) {
                    toast.success('üîÑ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!');
                }
            } else {
                console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥');
                if (toast) {
                    toast.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥');
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
            
            if (toast) {
                const errorMessage = error.response?.data?.message || error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã';
                toast.error(errorMessage);
            }
        } finally {
            setReformLoading(false);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
    const fetchTeams = useCallback(async () => {
        if (!tournament?.id) return;
        
        try {
            const response = await api.get(`/api/tournaments/${tournament.id}/teams`);
            if (response.data && Array.isArray(response.data)) {
                console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞:', response.data);
                
                // üéØ –û–ë–û–ì–ê–©–ê–ï–ú –ö–û–ú–ê–ù–î–´ –°–†–ï–î–ù–ò–ú –†–ï–ô–¢–ò–ù–ì–û–ú
                const enrichedTeams = response.data.map(team => ({
                    ...team,
                    averageRating: calculateTeamAverageRating(team)
                }));
                
                setMixedTeams(enrichedTeams);
                
                // üéØ –í–´–ó–´–í–ê–ï–ú onTeamsGenerated –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –±—ã–ª–∏ –í–ü–ï–†–í–´–ï –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—É—Å—Ç—ã–µ (—ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
                if (mixedTeams.length === 0 && onTeamsGenerated) {
                    console.log('fetchTeams: –≤—ã–∑—ã–≤–∞–µ–º onTeamsGenerated —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)', enrichedTeams);
                    onTeamsGenerated(enrichedTeams);
                } else {
                    console.log('fetchTeams: –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –±–µ–∑ –≤—ã–∑–æ–≤–∞ onTeamsGenerated (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ü–∏–∫–ª–∞)');
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥:', error);
        }
    }, [tournament?.id, calculateTeamAverageRating, mixedTeams.length]); // –î–æ–±–∞–≤–ª—è–µ–º mixedTeams.length –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const fetchOriginalParticipants = useCallback(async () => {
        if (!tournament || !tournament.id || !shouldMakeRequest('original-participants')) return;
        
        setLoadingParticipants(true);
        try {
            console.log('üîç Sending request to: /api/tournaments/' + tournament.id + '/original-participants');
            const response = await api.get(`/api/tournaments/${tournament.id}/original-participants`);
            
            if (response.data) {
                // üÜï –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:', {
                    total: response.data.total,
                    inTeam: response.data.inTeamCount,
                    notInTeam: response.data.notInTeamCount
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                setOriginalParticipants(response.data.all || []);
                
                // üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –¥–ª—è UI
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
                if (response.data.notInTeam && response.data.notInTeam.length > 0) {
                    console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${response.data.notInTeam.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö`);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
            if (toast) {
                toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
            }
        } finally {
            setLoadingParticipants(false);
        }
    }, [tournament?.id]); // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω toast –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    // üÜï –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê –û –°–û–°–¢–û–Ø–ù–ò–ò –£–ß–ê–°–¢–ù–ò–ö–û–í
    const getParticipantsStatusText = useCallback(() => {
        if (!displayParticipants.length) return '';
        
        const inTeam = displayParticipants.filter(p => p.in_team);
        const notInTeam = displayParticipants.filter(p => !p.in_team);
        
        if (notInTeam.length > 0) {
            return ` (${inTeam.length} –≤ –∫–æ–º–∞–Ω–¥–∞—Ö, ${notInTeam.length} –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ)`;
        }
        
        return ` (${inTeam.length} –≤ –∫–æ–º–∞–Ω–¥–∞—Ö)`;
    }, [displayParticipants]);

    // –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    useEffect(() => {
        if (tournament && tournament.team_size) {
            setTeamSize(tournament.team_size.toString());
        }
        
        // üéØ –í–°–ï–ì–î–ê –°–û–•–†–ê–ù–Ø–ï–ú –£–ß–ê–°–¢–ù–ò–ö–û–í
        if (participants && participants.length > 0) {
            setOriginalParticipants(participants);
        }
        
        // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ï–°–ö–û–ù–ï–ß–ù–û–ì–û –¶–ò–ö–õ–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if (tournament && tournament.teams && tournament.teams.length > 0 && mixedTeams.length === 0) {
            console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ (–æ–¥–∏–Ω —Ä–∞–∑)');
            
            // üéØ –û–ë–û–ì–ê–©–ê–ï–ú –ö–û–ú–ê–ù–î–´ –°–†–ï–î–ù–ò–ú –†–ï–ô–¢–ò–ù–ì–û–ú
            const enrichedTeams = tournament.teams.map(team => ({
                ...team,
                averageRating: calculateTeamAverageRating(team)
            }));
            
            setMixedTeams(enrichedTeams);
            
            // üéØ –ù–ï –í–´–ó–´–í–ê–ï–ú onTeamsGenerated –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
            // —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º—É —Ü–∏–∫–ª—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –±–µ–∑ –≤—ã–∑–æ–≤–∞ onTeamsGenerated (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ü–∏–∫–ª–∞)');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (tournament && tournament.id && tournament.participant_type === 'team' && tournament.format === 'mix' && originalParticipants.length === 0) {
            fetchOriginalParticipants();
        }

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        console.log('TeamGenerator useEffect:', {
            tournamentTeams: tournament?.teams,
            hasTeams: tournament?.teams && tournament.teams.length > 0,
            participantType: tournament?.participant_type,
            mixedTeamsLength: mixedTeams.length
        });
    }, [tournament?.id, tournament?.participant_type, tournament?.format, participants?.length]); // –£–ë–ò–†–ê–ï–ú calculateTeamAverageRating –∏ onTeamsGenerated –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const updateTeamSize = async (newSize) => {
        if (!tournament || !tournament.id || !isAdminOrCreator) return;
        
        try {
            const token = localStorage.getItem('token');
            await api.patch(`/api/tournaments/${tournament.id}/team-size`, {
                teamSize: parseInt(newSize, 10)
            }, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            if (toast) {
                toast.success(`–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newSize}`);
            }
            
            if (onTeamsUpdated) {
                onTeamsUpdated();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã:', error);
            if (toast) {
                toast.error(error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã');
            }
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
    const handleFormTeams = async () => {
        if (!tournament?.id || displayParticipants.length < 2) {
            console.warn('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥');
            return;
        }
        
        setLoading(true);
        
        try {
            const teamSizeNumber = parseInt(teamSize);
            
            console.log('üöÄ –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã:', {
                teamSize: teamSizeNumber,
                participantsCount: displayParticipants.length,
                ratingType,
                tournamentId: tournament.id
            });

            const response = await api.post(`/api/tournaments/${tournament.id}/form-teams`, {
                ratingType: ratingType,
                teamSize: teamSizeNumber
            });

            if (response.data && response.data.teams) {
                console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', response.data.teams);
                
                // üéØ –û–ë–û–ì–ê–©–ê–ï–ú –ö–û–ú–ê–ù–î–´ –°–†–ï–î–ù–ò–ú –†–ï–ô–¢–ò–ù–ì–û–ú
                const enrichedTeams = response.data.teams.map(team => ({
                    ...team,
                    averageRating: calculateTeamAverageRating(team)
                }));
                
                setMixedTeams(enrichedTeams);
                
                // üéØ –í–´–ó–´–í–ê–ï–ú onTeamsGenerated –¢–û–õ–¨–ö–û –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –ù–û–í–´–• –∫–æ–º–∞–Ω–¥
                if (onTeamsGenerated) {
                    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö');
                    onTeamsGenerated(enrichedTeams);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º tournament.participant_type –Ω–∞ 'team' –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
                if (onTeamsUpdated) {
                    onTeamsUpdated();
                }
                
                console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
            } else {
                console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫—É
            if (error.response?.data?.message) {
                console.error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', error.response.data.message);
            }
        } finally {
            setLoading(false);
        }
    };

    // üéØ –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í –ò –ö–û–ú–ê–ù–î
    // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –í–°–ï–ì–î–ê –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    const displayParticipants = originalParticipants.length > 0 ? originalParticipants : participants || [];
    
    // –ö–æ–º–∞–Ω–¥—ã –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const teamsExist = tournament?.teams && tournament.teams.length > 0;
    const teamsList = teamsExist ? tournament.teams : mixedTeams;
    
    // üéØ –û–ë–û–ì–ê–©–ê–ï–ú –ö–û–ú–ê–ù–î–´ –°–†–ï–î–ù–ò–ú –†–ï–ô–¢–ò–ù–ì–û–ú –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
    const enrichedTeamsList = teamsList.map(team => ({
        ...team,
        averageRating: team.averageRating || calculateTeamAverageRating(team)
    }));
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥
    console.log('TeamGenerator render:', {
        teamsExist,
        tournamentTeams: tournament?.teams,
        mixedTeamsLength: mixedTeams.length,
        teamsListLength: teamsList.length,
        shouldShowTeams: teamsExist || teamsList.length > 0,
        participantsCount: displayParticipants.length
    });

    // –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥ (–¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤)
    const renderTeamsList = () => {
        const teamsExist = mixedTeams && mixedTeams.length > 0;
        const tournamentTeams = tournament?.teams || [];
        
        console.log('TeamGenerator render:', {
            teamsExist,
            tournamentTeams,
            mixedTeamsLength: mixedTeams.length,
            teamsListLength: tournamentTeams.length,
            shouldShowTeams: teamsExist || tournamentTeams.length > 0,
            onTeamsGeneratedExists: !!onTeamsGenerated
        });

        // üéØ –£–ë–ò–†–ê–ï–ú –î–£–ë–õ–ò–†–£–Æ–©–ò–ô –í–´–ó–û–í onTeamsGenerated –ò–ó –†–ï–ù–î–ï–†–ê
        // –í—ã–∑–æ–≤—ã onTeamsGenerated –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ useEffect –∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö
        if (teamsExist || tournamentTeams.length > 0) {
            const teamsToShow = teamsExist ? mixedTeams : tournamentTeams.map(team => ({
                ...team,
                averageRating: calculateTeamAverageRating(team)
            }));

            return (
                <div className="teams-display">
                    {/* üéØ –ó–ê–ì–û–õ–û–í–û–ö –° –£–õ–£–ß–®–ï–ù–ù–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–û–ô */}
                    <div className="teams-header">
                        <h4>üèÜ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ({teamsToShow.length})</h4>
                        
                        {/* –ü–ê–ù–ï–õ–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–ò */}
                        <div className="teams-stats">
                            <div className="team-stat">
                                <div className="stat-value">{teamsToShow.length}</div>
                                <div className="stat-label">üë• –ö–æ–º–∞–Ω–¥</div>
                            </div>
                            <div className="team-stat">
                                <div className="stat-value">
                                    {teamsToShow.reduce((total, team) => total + (team.members?.length || 0), 0)}
                                </div>
                                <div className="stat-label">üéÆ –ò–≥—Ä–æ–∫–æ–≤</div>
                            </div>
                            <div className="team-stat">
                                <div className="stat-value">
                                    {teamsToShow.length > 0 
                                        ? Math.round(teamsToShow.reduce((sum, team) => sum + (team.averageRating || 0), 0) / teamsToShow.length)
                                        : 0
                                    }
                                </div>
                                <div className="stat-label">‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</div>
                            </div>
                            <div className="team-stat">
                                <div className="stat-value">
                                    {ratingType === 'faceit' ? 'FACEIT' : 'Premier'}
                                </div>
                                <div className="stat-label">üéØ –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞</div>
                            </div>
                        </div>
                    </div>

                    {/* üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ï–¢–ö–ê –ö–û–ú–ê–ù–î */}
                    <div className="mixed-teams-grid">
                        {teamsToShow.map((team, index) => (
                            <div key={team.id || index} className="enhanced-team-card">
                                {/* –ó–ê–ì–û–õ–û–í–û–ö –ö–û–ú–ê–ù–î–´ */}
                                <div className="team-card-header">
                                    <div className="team-title">
                                        <h4>{team.name || `–ö–æ–º–∞–Ω–¥–∞ ${index + 1}`}</h4>
                                        <div className="team-members-count">
                                            üë• {team.members?.length || 0} –∏–≥—Ä–æ–∫{team.members?.length === 1 ? '' : team.members?.length > 4 ? '–æ–≤' : '–∞'}
                                        </div>
                                    </div>
                                    
                                    <div className="team-rating-display">
                                        <div className="rating-label">
                                            {ratingType === 'faceit' ? 'FACEIT' : 'Premier'}
                                        </div>
                                        <div className="rating-value">
                                            {team.averageRating || '‚Äî'}
                                            <span className="rating-suffix">
                                                {ratingType === 'faceit' ? ' ELO' : ' –†–∞–Ω–≥'}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                
                                {/* –°–û–°–¢–ê–í –ö–û–ú–ê–ù–î–´ */}
                                <div className="team-composition">
                                    <h5>üë• –°–æ—Å—Ç–∞–≤</h5>
                                    {team.members && team.members.length > 0 ? (
                                        <div className="team-members-list">
                                            {team.members.map((member, memberIndex) => {
                                                const memberName = member.name || member.username;
                                                const formattedName = formatMemberName(memberName);
                                                
                                                return (
                                                    <div key={memberIndex} className="team-member-row">
                                                        <div className="member-avatar">
                                                            <img 
                                                                src={member.avatar_url || '/default-avatar.png'} 
                                                                alt={memberName}
                                                                onError={(e) => {
                                                                    e.target.onerror = null;
                                                                    e.target.src = '/default-avatar.png';
                                                                }}
                                                            />
                                                        </div>
                                                        <div className="member-info">
                                                            <div 
                                                                className={`member-name ${formattedName.isLongName ? 'member-name-long' : ''}`}
                                                                title={formattedName.isTruncated ? formattedName.originalName : undefined}
                                                            >
                                                                {member.user_id ? (
                                                                    <a href={`/profile/${member.user_id}`} className="member-profile-link">
                                                                        {formattedName.displayName}
                                                                    </a>
                                                                ) : (
                                                                    formattedName.displayName
                                                                )}
                                                            </div>
                                                            <div className="member-rating">
                                                                üéØ {ratingType === 'faceit' 
                                                                    ? `${member.faceit_elo || 1000} ELO`
                                                                    : `${member.cs2_premier_rank || member.premier_rank || 5} Premier`
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    ) : (
                                        <div className="no-members">
                                            üö´ –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                                        </div>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            );
        }

        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤)
        if (tournament?.format === 'mix') {
            return renderGenerationInterface();
        }

        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –±–µ–∑ –∫–æ–º–∞–Ω–¥
        return (
            <div className="no-teams-message">
                <p>üèÜ –ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞</p>
            </div>
        );
    };

    // –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const renderParticipantsList = () => {
        if (tournament?.format !== 'mix') return null;

        // üÜï –†–ê–ó–î–ï–õ–Ø–ï–ú –£–ß–ê–°–¢–ù–ò–ö–û–í –ù–ê –ì–†–£–ü–ü–´
        const inTeamParticipants = displayParticipants.filter(p => p.in_team);
        const notInTeamParticipants = displayParticipants.filter(p => !p.in_team);

        return (
            <div className="original-participants-section">
                <h3>
                    üéÆ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ ({displayParticipants?.length || 0})
                    {getParticipantsStatusText()}
                </h3>
                
                {/* üÜï –£–ß–ê–°–¢–ù–ò–ö–ò –ù–ï –í –ö–û–ú–ê–ù–î–ï (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã) */}
                {(mixedTeams.length > 0 || tournament.participant_type === 'team') && notInTeamParticipants.length > 0 && (
                    <div className="participants-group">
                        <h4 className="participants-group-title">
                            ‚ö†Ô∏è –ù–µ –≤ –∫–æ–º–∞–Ω–¥–µ ({notInTeamParticipants.length})
                        </h4>
                        <div className="participants-grid">
                            {notInTeamParticipants.map((participant) => (
                                <div key={participant?.id || `participant-${Math.random()}`} className="participant-card not-in-team">
                                    <div className="participant-avatar">
                                        <img 
                                            src={ensureHttps(participant.avatar_url) || '/default-avatar.png'} 
                                            alt={`${participant.name} avatar`}
                                            onError={(e) => {
                                                e.target.onerror = null;
                                                e.target.src = '/default-avatar.png';
                                            }}
                                        />
                                    </div>
                                    <div className="participant-info">
                                        <span className="participant-name">{participant.name}</span>
                                        <span className="participant-rating">
                                            {ratingType === 'faceit' 
                                                ? `FACEIT: ${participant.faceit_elo || 1000}`
                                                : `Premier: ${participant.premier_rank || participant.cs2_premier_rank || 5}`
                                            }
                                        </span>
                                        <span className="participant-status">–ù–µ –≤ –∫–æ–º–∞–Ω–¥–µ</span>
                                    </div>
                                    {isAdminOrCreator && tournament.participant_type === 'solo' && (
                                        <button 
                                            className="remove-participant"
                                            onClick={() => onRemoveParticipant(participant.id)}
                                        >
                                            ‚úï
                                        </button>
                                    )}
                                </div>
                            ))}
                        </div>
                    </div>
                )}

                {/* üÜï –£–ß–ê–°–¢–ù–ò–ö–ò –í –ö–û–ú–ê–ù–î–ê–• (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã) */}
                {(mixedTeams.length > 0 || tournament.participant_type === 'team') && inTeamParticipants.length > 0 && (
                    <div className="participants-group">
                        <h4 className="participants-group-title">
                            ‚úÖ –í –∫–æ–º–∞–Ω–¥–∞—Ö ({inTeamParticipants.length})
                        </h4>
                        <div className="participants-grid">
                            {inTeamParticipants.map((participant) => (
                                <div key={participant?.id || `participant-${Math.random()}`} className="participant-card in-team">
                                    <div className="participant-avatar">
                                        <img 
                                            src={ensureHttps(participant.avatar_url) || '/default-avatar.png'} 
                                            alt={`${participant.name} avatar`}
                                            onError={(e) => {
                                                e.target.onerror = null;
                                                e.target.src = '/default-avatar.png';
                                            }}
                                        />
                                    </div>
                                    <div className="participant-info">
                                        <span className="participant-name">{participant.name}</span>
                                        <span className="participant-rating">
                                            {ratingType === 'faceit' 
                                                ? `FACEIT: ${participant.faceit_elo || 1000}`
                                                : `Premier: ${participant.premier_rank || participant.cs2_premier_rank || 5}`
                                            }
                                        </span>
                                        <span className="participant-status">–í –∫–æ–º–∞–Ω–¥–µ</span>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                )}

                {/* üÜï –í–°–ï –£–ß–ê–°–¢–ù–ò–ö–ò –ï–°–õ–ò –ù–ï–¢ –ö–û–ú–ê–ù–î (–∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º) */}
                {mixedTeams.length === 0 && tournament.participant_type !== 'team' && (
                    <div className="mix-players-list">
                        {loadingParticipants ? (
                            <p className="loading-participants">–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</p>
                        ) : displayParticipants && displayParticipants.length > 0 ? (
                            <div className="participants-grid">
                                {displayParticipants.map((participant) => (
                                    <div key={participant?.id || `participant-${Math.random()}`} className="participant-card">
                                        <div className="participant-avatar">
                                            <img 
                                                src={ensureHttps(participant.avatar_url) || '/default-avatar.png'} 
                                                alt={`${participant.name} avatar`}
                                                onError={(e) => {
                                                    e.target.onerror = null;
                                                    e.target.src = '/default-avatar.png';
                                                }}
                                            />
                                        </div>
                                        <div className="participant-info">
                                            <span className="participant-name">{participant.name}</span>
                                            <span className="participant-rating">
                                                {ratingType === 'faceit' 
                                                    ? `FACEIT: ${participant.faceit_elo || 1000}`
                                                    : `Premier: ${participant.premier_rank || participant.cs2_premier_rank || 5}`
                                                }
                                            </span>
                                        </div>
                                        {isAdminOrCreator && tournament.participant_type === 'solo' && (
                                            <button 
                                                className="remove-participant"
                                                onClick={() => onRemoveParticipant(participant.id)}
                                            >
                                                ‚úï
                                            </button>
                                        )}
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <p className="no-participants">–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤</p>
                        )}
                    </div>
                )}

                {/* üéØ –°–ï–ö–¶–ò–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ò–ö–°–û–ú */}
                {isAdminOrCreator && (
                    <div className="mix-settings-section">
                        <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Å–∞</h3>
                        <div className="mix-controls-row">
                            <div className="mix-form-group">
                                <label>–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:</label>
                                <select
                                    value={teamSize}
                                    onChange={(e) => {
                                        const newSize = e.target.value;
                                        setTeamSize(newSize);
                                        updateTeamSize(newSize);
                                    }}
                                    disabled={mixedTeams.length > 0 || loading}
                                >
                                    <option value="2">2 –∏–≥—Ä–æ–∫–∞</option>
                                    <option value="5">5 –∏–≥—Ä–æ–∫–æ–≤</option>
                                </select>
                            </div>
                        
                            <div className="mix-form-group rating-group">
                                <label>–ú–∏–∫—Å–æ–≤–∞—Ç—å –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:</label>
                                <select
                                    value={ratingType}
                                    onChange={(e) => setRatingType(e.target.value)}
                                >
                                    <option value="faceit">FACEit</option>
                                    <option value="premier">Steam Premier</option>
                                </select>
                            </div>
                        </div>

                        <div className="mix-buttons-row">
                            {tournament.participant_type === 'solo' && mixedTeams.length === 0 && (
                                <button 
                                    onClick={handleFormTeams} 
                                    className="form-teams-button"
                                    disabled={loading || displayParticipants.length < 2}
                                >
                                    {loading ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...' : '‚ö° –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}
                                </button>
                            )}
                        
                            {/* üÜï –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ö–ù–û–ü–ö–ê –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø */}
                            {canReformTeams() && (
                                <button 
                                    onClick={() => setShowReformModal(true)} 
                                    className="reform-teams-button"
                                    disabled={reformLoading || displayParticipants.length < 2}
                                >
                                    üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
                                    {notInTeamParticipants.length > 0 && ` (–≤–∫–ª—é—á–∞—è ${notInTeamParticipants.length} –Ω–æ–≤—ã—Ö)`}
                                </button>
                            )}
                        
                            {displayParticipants.length < 2 && (
                                <p className="min-participants-notice">
                                    ‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞
                                </p>
                            )}
                        
                            {/* üÜï –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø */}
                            {mixedTeams.length > 0 && !canReformTeams() && (
                                <div className="reform-blocked-notice">
                                    {tournament.status !== 'active' && (
                                        <p>‚ö†Ô∏è –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤</p>
                                    )}
                                    {tournament.matches && tournament.matches.length > 0 && (
                                        <p>üö´ –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞</p>
                                    )}
                                    {tournament.status === 'in_progress' && (
                                        <p>üö´ –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - —Ç—É—Ä–Ω–∏—Ä —É–∂–µ –Ω–∞—á–∞–ª—Å—è</p>
                                    )}
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </div>
        );
    };

    // –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
    const renderGenerationInterface = () => {
        return (
            <div className="generation-interface">
                <div className="no-teams-message">
                    <div className="no-teams-icon">‚öΩ</div>
                    <h4>–ö–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã</h4>
                    <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤</p>
                </div>
            </div>
        );
    };

    return (
        <div className="team-generator">
            {/* üéØ –í–°–ï–ì–î–ê –ü–û–ö–ê–ó–´–í–ê–ï–ú –£–ß–ê–°–¢–ù–ò–ö–û–í */}
            {renderParticipantsList()}
            
            {/* üéØ –ö–û–ú–ê–ù–î–´ –û–¢–û–ë–†–ê–ñ–ê–Æ–¢–°–Ø –ù–ò–ñ–ï –£–ß–ê–°–¢–ù–ò–ö–û–í */}
            {renderTeamsList()}
            
            {/* üÜï –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø */}
            {showReformModal && (
                <div className="modal-overlay">
                    <div className="modal-content reform-modal">
                        <div className="modal-header">
                            <h3>üîÑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                            <button 
                                className="close-btn"
                                onClick={() => setShowReformModal(false)}
                                disabled={reformLoading}
                            >
                                ‚úï
                            </button>
                        </div>
                        
                        <div className="modal-body">
                            <div className="warning-content">
                                <div className="warning-icon">‚ö†Ô∏è</div>
                                <div className="warning-text">
                                    <h4>–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã?</h4>
                                    <p className="warning-message">
                                        <strong>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞.</strong>
                                    </p>
                                    <p className="warning-details">
                                        –ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:
                                    </p>
                                    <ul className="warning-list">
                                        <li>–í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã</li>
                                        <li>–°–æ–∑–¥–∞–¥—É—Ç—Å—è –Ω–æ–≤—ã–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ {ratingType === 'faceit' ? 'FACEIT' : 'CS2 Premier'}</li>
                                        <li>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–ø–∞—Å—Ç—å –≤ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã</li>
                                        <li>–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥: {teamSize} –∏–≥—Ä–æ–∫{teamSize === '1' ? '' : teamSize > '4' ? '–æ–≤' : '–∞'}</li>
                                        <li>–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å</li>
                                    </ul>
                                    
                                    <div className="current-teams-info">
                                        <p><strong>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</strong></p>
                                        <ul>
                                            <li>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {displayParticipants.length}</li>
                                            <li>–í –∫–æ–º–∞–Ω–¥–∞—Ö: {displayParticipants.filter(p => p.in_team).length}</li>
                                            {displayParticipants.filter(p => !p.in_team).length > 0 && (
                                                <li className="new-participants-highlight">
                                                    üÜï –ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ): {displayParticipants.filter(p => !p.in_team).length}
                                                </li>
                                            )}
                                            <li>–°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥: {mixedTeams.length}</li>
                                            <li>–ò–≥—Ä–æ–∫–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö: {mixedTeams.reduce((total, team) => total + (team.members?.length || 0), 0)}</li>
                                        </ul>
                                        
                                        {/* üÜï –ü–û–ö–ê–ó–´–í–ê–ï–ú –ù–û–í–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í –ï–°–õ–ò –û–ù–ò –ï–°–¢–¨ */}
                                        {displayParticipants.filter(p => !p.in_team).length > 0 && (
                                            <div className="new-participants-preview">
                                                <p><strong>üÜï –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥—ã:</strong></p>
                                                <ul className="new-participants-list">
                                                    {displayParticipants.filter(p => !p.in_team).slice(0, 5).map(participant => (
                                                        <li key={participant.id}>
                                                            {participant.name} 
                                                            <span className="participant-rating-preview">
                                                                ({ratingType === 'faceit' 
                                                                    ? `${participant.faceit_elo || 1000} ELO`
                                                                    : `${participant.cs2_premier_rank || participant.premier_rank || 5} –†–∞–Ω–≥`
                                                                })
                                                            </span>
                                                        </li>
                                                    ))}
                                                    {displayParticipants.filter(p => !p.in_team).length > 5 && (
                                                        <li>... –∏ –µ—â–µ {displayParticipants.filter(p => !p.in_team).length - 5} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</li>
                                                    )}
                                                </ul>
                                            </div>
                                        )}
                                        
                                        {/* üÜï –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê */}
                                        <div className="reform-preview">
                                            <p><strong>üìä –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç:</strong></p>
                                            <ul>
                                                <li>–ö–æ–º–∞–Ω–¥: {Math.floor(displayParticipants.length / parseInt(teamSize))}</li>
                                                <li>–ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ: {teamSize}</li>
                                                <li>–û–±—â–∏–π –æ—Ö–≤–∞—Ç: {Math.floor(displayParticipants.length / parseInt(teamSize)) * parseInt(teamSize)} –∏–∑ {displayParticipants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</li>
                                                {displayParticipants.length % parseInt(teamSize) !== 0 && (
                                                    <li className="warning-remainder">
                                                        ‚ö†Ô∏è –û—Å—Ç–∞–Ω–µ—Ç—Å—è –≤–Ω–µ –∫–æ–º–∞–Ω–¥: {displayParticipants.length % parseInt(teamSize)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                                    </li>
                                                )}
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div className="modal-footer">
                            <button 
                                className="btn-cancel"
                                onClick={() => setShowReformModal(false)}
                                disabled={reformLoading}
                            >
                                ‚ùå –û—Ç–º–µ–Ω–∞
                            </button>
                            <button 
                                className="btn-confirm-reform"
                                onClick={handleReformTeams}
                                disabled={reformLoading}
                            >
                                {reformLoading ? '‚è≥ –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 'üîÑ –î–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã'}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default TeamGenerator; 