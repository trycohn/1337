// frontend/src/components/CreateTournament.js
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import DatePicker, { registerLocale } from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { ru } from 'date-fns/locale';
import { useLoaderAutomatic } from '../hooks/useLoaderAutomaticHook';
import './CreateTournament.css';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å
registerLocale('ru', ru);

function CreateTournament() {
  const navigate = useNavigate();
  const [games, setGames] = useState([]);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    format: '',
    game: '',
    participant_type: 'team',
    team_size: 5,
    max_teams: 16,
    start_date: '',
    prize_pool: '',
    rules: '',
    bracket_type: 'single_elimination',
    mix_rating_type: 'faceit',
    seeding_type: 'random',
    seeding_config: {}
  });
  const { runWithLoader } = useLoaderAutomatic();

  // üÜï –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä—ã CS2 (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ ESLint –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏)
  const isCS2Game = (gameName) => {
    if (!gameName) return false;
    const normalizedGame = gameName.toLowerCase().replace(/[^a-z0-9]/g, '');
    return normalizedGame === 'counterstrike2' || 
           normalizedGame === 'cs2' || 
           (gameName.toLowerCase().includes('counter') && gameName.toLowerCase().includes('strike') && gameName.includes('2'));
  };

  useEffect(() => {
    console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä');
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä —Å –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–æ–º
    runWithLoader(async () => {
      try {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /api/tournaments/games');
        const response = await axios.get('/api/tournaments/games');
        console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
        setGames(response.data);
        console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ games –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', response.data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä:', error);
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      }
    });
  }, [runWithLoader]);

  const handleCreateTournament = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    if (!token) {
      alert('–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞
    if (!formData.start_date) {
      alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞');
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ —Å –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–æ–º
    runWithLoader(async () => {
      try {
        const response = await axios.post(
          '/api/tournaments',
          {
            name: formData.name,
            game: formData.game,
            format: formData.format,
            participant_type: formData.participant_type,
            team_size: formData.format === 'mix' ? formData.team_size : null,
            max_teams: formData.format === 'mix' ? formData.max_teams : null,
            start_date: formData.start_date.toISOString(),
            description: formData.description,
            prize_pool: formData.prize_pool,
            rules: formData.rules,
            bracket_type: formData.format === 'mix' ? formData.bracket_type : 'single_elimination',
            mix_rating_type: formData.format === 'mix' ? formData.mix_rating_type : null,
            seeding_type: formData.seeding_type,
            seeding_config: formData.seeding_config
          },
          { headers: { Authorization: `Bearer ${token}` } }
        );
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
        navigate(`/tournaments/${response.data.id}`);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        alert(error.response?.data?.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞');
      }
    });
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  const handleFormatChange = (e) => {
    const format = e.target.value;
    console.log('–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç:', format);
    setFormData(prev => {
      const newData = {
        ...prev,
        format,
        team_size: format === 'mix' ? 5 : prev.team_size,
        game: format === 'mix' ? 'counter strike 2' : prev.game, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ë–î
        participant_type: format === 'mix' ? 'solo' : 'team',
        bracket_type: format === 'mix' ? 'single_elimination' : 'single_elimination',
        mix_rating_type: format === 'mix' ? 'faceit' : prev.mix_rating_type,
        seeding_type: 'random',
        seeding_config: {}
      };
      console.log('–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', newData);
      return newData;
    });
  };

  const handleParticipantTypeChange = (e) => {
    const participant_type = e.target.value;
    setFormData(prev => ({
      ...prev,
      participant_type
    }));
  };

  // üÜï –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä—ã
  const handleGameChange = (e) => {
    const selectedGame = e.target.value;
    console.log('–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞:', selectedGame, 'isCS2:', isCS2Game(selectedGame));
    
    setFormData(prev => {
      const newData = {
        ...prev,
        game: selectedGame,
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–≥—Ä—ã
        participant_type: isCS2Game(selectedGame) ? 'cs2_classic_5v5' : 'team'
      };
      console.log('–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã:', newData);
      return newData;
    });
  };

  const handleSeedingTypeChange = (e) => {
    const seedingType = e.target.value;
    setFormData(prev => ({
      ...prev,
      seeding_type: seedingType,
      seeding_config: {}
    }));
  };

  console.log('–¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç:', formData.format);
  console.log('–¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞:', formData.game);
  console.log('isCS2Game:', isCS2Game(formData.game));
  console.log('–°–ø–∏—Å–æ–∫ –∏–≥—Ä:', games);

  return (
    <section className="create-tournament">
      <h2>–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä</h2>
      <form onSubmit={handleCreateTournament}>
        
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–µ */}
        <div className="form-main-layout">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="form-section main-section">
            <h3 className="section-title">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className="form-grid">
              <div className="form-group full-width">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</label>
                <input
                  type="text"
                  name="name"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"
                  value={formData.name}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div className="form-group">
                <label>–§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞</label>
                <select
                  name="format"
                  value={formData.format}
                  onChange={handleFormatChange}
                  required
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç</option>
                  <option value="single">Single Elimination</option>
                  <option value="double">Double Elimination</option>
                  <option value="mix">Mix</option>
                </select>
              </div>

              <div className="form-group">
                <label>–ò–≥—Ä–∞</label>
                <select
                  name="game"
                  value={formData.game}
                  onChange={handleGameChange}
                  required
                >
                  {formData.format === 'mix' ? (
                    <option value="counter strike 2">Counter Strike 2</option>
                  ) : (
                    <>
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É</option>
                      {games.map((game) => (
                        <option key={game.id} value={game.name.toLowerCase()}>
                          {game.name}
                        </option>
                      ))}
                    </>
                  )}
                </select>
              </div>

              {formData.format !== 'mix' && (
                <div className="form-group">
                  <label>–¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</label>
                  <select
                    name="participant_type"
                    value={formData.participant_type}
                    onChange={handleParticipantTypeChange}
                    required
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</option>
                    {isCS2Game(formData.game) ? (
                      // CS2-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–∏–ø—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                      <>
                        <option value="cs2_classic_5v5">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 5—Ö5</option>
                        <option value="cs2_wingman_2v2">Wingman 2—Ö2</option>
                      </>
                    ) : (
                      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä
                      <>
                        <option value="team">–ö–æ–º–∞–Ω–¥–Ω—ã–π</option>
                        <option value="solo">–û–¥–∏–Ω–æ—á–Ω—ã–π</option>
                      </>
                    )}
                  </select>
                  {isCS2Game(formData.game) && (
                    <small className="form-hint">
                      {formData.participant_type === 'cs2_classic_5v5' && 'üèÜ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç CS2: –∫–æ–º–∞–Ω–¥—ã –º–∏–Ω–∏–º—É–º 5 –∏–≥—Ä–æ–∫–æ–≤'}
                      {formData.participant_type === 'cs2_wingman_2v2' && '‚ö° Wingman —Ñ–æ—Ä–º–∞—Ç CS2: –∫–æ–º–∞–Ω–¥—ã –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞'}
                    </small>
                  )}
                </div>
              )}

              <div className="form-group full-width">
                <label>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</label>
                <DatePicker
                  selected={formData.start_date}
                  onChange={(date) => setFormData((prev) => ({ ...prev, start_date: date }))}
                  showTimeSelect
                  dateFormat="dd.MM.yyyy HH:mm"
                  timeFormat="HH:mm"
                  timeIntervals={15}
                  timeCaption="–í—Ä–µ–º—è"
                  placeholderText="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"
                  locale="ru"
                  calendarStartDay={1}
                  minDate={new Date()}
                  className="date-picker-input"
                />
                <small className="form-hint">
                  üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ä–æ—Å—Å–∏–π—Å–∫–æ–µ –≤—Ä–µ–º—è)
                </small>
              </div>
            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="form-section additional-section">
            <h3 className="section-title">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className="form-grid single-column">
              <div className="form-group">
                <label>–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥</label>
                <input
                  type="text"
                  name="prize_pool"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 10,000‚ÇΩ"
                  value={formData.prize_pool}
                  onChange={handleInputChange}
                />
              </div>
              
              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</label>
                <textarea
                  name="description"
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞..."
                  value={formData.description}
                  onChange={handleInputChange}
                  rows="4"
                />
              </div>
              
              <div className="form-group">
                <label>–ü—Ä–∞–≤–∏–ª–∞</label>
                <textarea
                  name="rules"
                  placeholder="–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è..."
                  value={formData.rules}
                  onChange={handleInputChange}
                  rows="5"
                />
              </div>
            </div>
          </div>
        </div>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Mix —Ç—É—Ä–Ω–∏—Ä–∞ */}
        {formData.format === 'mix' && (
          <div className="form-section">
            <h3 className="section-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Mix —Ç—É—Ä–Ω–∏—Ä–∞</h3>
            <div className="form-grid">
              <div className="form-group">
                <label>–ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ</label>
                <input
                  type="number"
                  name="team_size"
                  value={formData.team_size}
                  onChange={handleInputChange}
                  min="2"
                  max="10"
                  required
                />
              </div>
              
              <div className="form-group">
                <label>–¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥</label>
                <select
                  name="mix_rating_type"
                  value={formData.mix_rating_type}
                  onChange={handleInputChange}
                  required
                >
                  <option value="faceit">FACEIT ELO</option>
                  <option value="premier">CS2 Premier Rank</option>
                  <option value="mixed">–ü–æ–ª–Ω—ã–π –º–∏–∫—Å (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞)</option>
                </select>
                <small className="form-hint">
                  {formData.mix_rating_type === 'faceit' && '–ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ FACEIT ELO —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}
                  {formData.mix_rating_type === 'premier' && '–ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ CS2 Premier —Ä–∞–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}
                  {formData.mix_rating_type === 'mixed' && '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å–ª—É—á–∞–π–Ω–æ, –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞'}
                </small>
              </div>
              
              <div className="form-group">
                <label>–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏</label>
                <select
                  name="bracket_type"
                  value={formData.bracket_type}
                  onChange={handleInputChange}
                  required
                >
                  <option value="single_elimination">Single Elimination</option>
                  <option value="double_elimination">Double Elimination</option>
                </select>
              </div>
            </div>
          </div>
        )}

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
        <div className="form-section">
          <h3 className="section-title">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h3>
          <div className="form-grid">
            <div className="form-group full-width">
              <label>–¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</label>
              <select
                name="seeding_type"
                value={formData.seeding_type}
                onChange={handleSeedingTypeChange}
                required
              >
                <option value="random">–°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</option>
                <option value="ranking">–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É</option>
                <option value="balanced">–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ</option>
                <option value="manual">–†—É—á–Ω–æ–µ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ)</option>
              </select>
              <small className="form-hint">
                {formData.seeding_type === 'random' && 'üé≤ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º'}
                {formData.seeding_type === 'ranking' && 'üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (FACEIT ELO / CS2 Premier)'}
                {formData.seeding_type === 'balanced' && '‚öñÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –º–∞—Ç—á–µ–π'}
                {formData.seeding_type === 'manual' && '‚úèÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏'}
              </small>
            </div>
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É */}
            {formData.seeding_type === 'ranking' && (
              <div className="form-group">
                <label>–¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞</label>
                <select
                  value={formData.seeding_config.ratingType || 'faceit_elo'}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    seeding_config: {
                      ...prev.seeding_config,
                      ratingType: e.target.value
                    }
                  }))}
                >
                  <option value="faceit_elo">FACEIT ELO</option>
                  <option value="cs2_premier_rank">CS2 Premier Rank</option>
                </select>
              </div>
            )}
            
            {formData.seeding_type === 'ranking' && (
              <div className="form-group">
                <label>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</label>
                <select
                  value={formData.seeding_config.direction || 'desc'}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    seeding_config: {
                      ...prev.seeding_config,
                      direction: e.target.value
                    }
                  }))}
                >
                  <option value="desc">–û—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É</option>
                  <option value="asc">–û—Ç –Ω–∏–∑—à–µ–≥–æ –∫ –≤—ã—Å—à–µ–º—É</option>
                </select>
                <small className="form-hint">
                  –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –±—É–¥—É—Ç —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ –∏–≥—Ä–æ–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ
                </small>
              </div>
            )}
          </div>
          
          <div className="seeding-info-box">
            <h4>üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</h4>
            <ul>
              <li><strong>–°–ª—É—á–∞–π–Ω–æ–µ:</strong> –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥—Ä—É–∂–µ—Å–∫–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, –≥–¥–µ –≤–∞–∂–Ω–∞ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å</li>
              <li><strong>–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É:</strong> –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤ —Å–ª–∞–±—ã—Ö –≤ –Ω–∞—á–∞–ª–µ</li>
              <li><strong>–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ:</strong> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∞—Ç—á–∏ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞</li>
              <li><strong>–†—É—á–Ω–æ–µ:</strong> –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º</li>
            </ul>
          </div>
        </div>

        <div className="form-buttons">
          <button type="submit">–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä</button>
          <button 
            type="button" 
            onClick={() => navigate(-1)}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </form>
    </section>
  );
}

export default CreateTournament;