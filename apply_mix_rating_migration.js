const pool = require('./backend/db');

async function applyMixRatingMigration() {
    const client = await pool.connect();
    
    try {
        console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é mix_rating_type...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞
        const checkColumn = await client.query(`
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'tournaments' AND column_name = 'mix_rating_type'
        `);
        
        if (checkColumn.rows.length > 0) {
            console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ mix_rating_type —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
        await client.query(`
            ALTER TABLE tournaments 
            ADD COLUMN mix_rating_type VARCHAR(20) DEFAULT 'faceit' 
            CHECK (mix_rating_type IN ('faceit', 'premier', 'mixed'))
        `);
        
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ mix_rating_type');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        await client.query(`
            COMMENT ON COLUMN tournaments.mix_rating_type IS 
            '–¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤: faceit, premier –∏–ª–∏ mixed (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞)'
        `);
        
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–æ–ª–æ–Ω–∫–µ');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä—ã
        const updateResult = await client.query(`
            UPDATE tournaments 
            SET mix_rating_type = 'faceit' 
            WHERE format = 'mix' AND mix_rating_type IS NULL
        `);
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.rowCount} –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤`);
        console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è mix_rating_type —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        throw error;
    } finally {
        client.release();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
applyMixRatingMigration()
    .then(() => {
        console.log('üéØ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
    })
    .catch((error) => {
        console.error('üí• –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π:', error);
        process.exit(1);
    }); 