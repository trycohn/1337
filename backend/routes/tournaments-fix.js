// –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è endpoint –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
const express = require('express');
const router = express.Router();
const pool = require('../db');
const { authenticateToken, verifyAdminOrCreator } = require('../middleware/auth');
const { broadcastTournamentUpdate } = require('../notifications');

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
router.post('/:id/clear-match-results', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id } = req.params;
    const userId = req.user.id;

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const tournament = tournamentResult.rows[0];
        console.log(`üîç –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);

        // –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
        const updateResult = await pool.query(
            `UPDATE matches 
             SET winner_team_id = NULL, 
                 score1 = 0, 
                 score2 = 0,
                 maps_data = NULL
             WHERE tournament_id = $1 
             RETURNING *`,
            [id]
        );

        console.log(`‚úÖ –û—á–∏—â–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ${updateResult.rowCount} –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${id}`);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        const tournamentData = updatedTournamentResult.rows[0];
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
        const matchesResult = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, match_number',
            [id]
        );
        tournamentData.matches = matchesResult.rows;
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        let participantsQuery;
        if (tournament.participant_type === 'solo') {
            participantsQuery = `
                SELECT tp.*, u.avatar_url, u.username, u.faceit_elo 
                FROM tournament_participants tp 
                LEFT JOIN users u ON tp.user_id = u.id
                WHERE tp.tournament_id = $1
            `;
        } else {
            participantsQuery = `
                SELECT tt.*, u.avatar_url, u.username
                FROM tournament_teams tt
                LEFT JOIN users u ON tt.creator_id = u.id
                WHERE tt.tournament_id = $1
            `;
        }
        
        const participantsResult = await pool.query(participantsQuery, [id]);
        tournamentData.participants = participantsResult.rows;
        tournamentData.participant_count = participantsResult.rowCount;

        // –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        let teams = [];
        if (tournament.participant_type === 'team') {
            const teamsRes = await pool.query(
                `SELECT tt.id, tt.tournament_id, tt.name, tt.creator_id
                 FROM tournament_teams tt
                 WHERE tt.tournament_id = $1`,
                [id]
            );

            teams = await Promise.all(teamsRes.rows.map(async (team) => {
                const membersRes = await pool.query(
                    `SELECT tm.team_id, tm.user_id, tm.participant_id, 
                            tp.name, u.username, u.avatar_url, u.faceit_elo, u.cs2_premier_rank
                     FROM tournament_team_members tm
                     LEFT JOIN tournament_participants tp ON tm.participant_id = tp.id
                     LEFT JOIN users u ON tm.user_id = u.id
                     WHERE tm.team_id = $1`,
                    [team.id]
                );

                return {
                    ...team,
                    members: membersRes.rows
                };
            }));
        }

        tournamentData.teams = teams;

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏—Ö —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
        try {
            broadcastTournamentUpdate(id, tournamentData);
        } catch (broadcastError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket:', broadcastError);
            // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ WebSocket
        }

        res.status(200).json({ 
            message: `–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ${updateResult.rowCount} –º–∞—Ç—á–µ–π`,
            tournament: tournamentData
        });
        
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π';
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π',
            details: errorMessage,
            timestamp: new Date().toISOString()
        });
    }
});

module.exports = router; 