// –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è endpoint –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
const express = require('express');
const router = express.Router();
const pool = require('../db');
const { authenticateToken, verifyAdminOrCreator } = require('../middleware/auth');
const { broadcastTournamentUpdate } = require('../notifications');

// üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ê–†–®–†–£–¢ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ú–ê–¢–ß–ê
router.post('/matches/:matchId/result', authenticateToken, async (req, res) => {
    const { matchId } = req.params;
    const { winner_team_id, score1, score2, maps_data } = req.body;
    const userId = req.user.id;

    console.log(`üéØ [tournaments-fix] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ ${matchId}:`, {
        winner_team_id,
        score1,
        score2,
        maps_data: maps_data?.length || 0,
        userId
    });

    try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º matchId –≤ —á–∏—Å–ª–æ
        const matchIdNum = Number(matchId);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
        const matchResult = await pool.query('SELECT * FROM matches WHERE id = $1', [matchIdNum]);
        if (matchResult.rows.length === 0) {
            console.log(`‚ùå [tournaments-fix] –ú–∞—Ç—á ${matchId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return res.status(404).json({ error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const match = matchResult.rows[0];
        const tournamentId = match.tournament_id;

        console.log(`‚úÖ [tournaments-fix] –ú–∞—Ç—á –Ω–∞–π–¥–µ–Ω: ${match.id}, —Ç—É—Ä–Ω–∏—Ä: ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [tournamentId]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (tournament.created_by !== userId) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [tournamentId, userId]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞' });
            }
        }

        console.log(`‚úÖ [tournaments-fix] –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ winner_team_id —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
        if (winner_team_id && ![match.team1_id, match.team2_id].includes(winner_team_id)) {
            return res.status(400).json({ error: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞' });
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
        console.log(`üíæ [tournaments-fix] –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ ${matchIdNum}`);
        await pool.query(
            'UPDATE matches SET winner_team_id = $1, score1 = $2, score2 = $3, maps_data = $4, status = $5 WHERE id = $6',
            [winner_team_id, score1, score2, maps_data ? JSON.stringify(maps_data) : null, 'completed', matchIdNum]
        );

        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
        if (winner_team_id && match.next_match_id) {
            console.log(`üèÜ [tournaments-fix] –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ${winner_team_id} –≤ –º–∞—Ç—á ${match.next_match_id}`);
            
            const nextMatchResult = await pool.query('SELECT * FROM matches WHERE id = $1', [match.next_match_id]);
            if (nextMatchResult.rows.length > 0) {
                const nextMatch = nextMatchResult.rows[0];
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                if (!nextMatch.team1_id) {
                    await pool.query('UPDATE matches SET team1_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    console.log(`‚úÖ [tournaments-fix] –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–º–µ—â–µ–Ω –≤ team1 –º–∞—Ç—á–∞ ${nextMatch.id}`);
                } else if (!nextMatch.team2_id) {
                    await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    console.log(`‚úÖ [tournaments-fix] –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–º–µ—â–µ–Ω –≤ team2 –º–∞—Ç—á–∞ ${nextMatch.id}`);
                } else {
                    console.log(`‚ö†Ô∏è [tournaments-fix] –û–±–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ —É–∂–µ –∑–∞–Ω—è—Ç—ã`);
                }
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        console.log(`üìä [tournaments-fix] –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        const updatedTournament = await pool.query('SELECT * FROM tournaments WHERE id = $1', [tournamentId]);
        const tournamentData = updatedTournament.rows[0];
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
        const matchesResult = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, match_number',
            [tournamentId]
        );
        tournamentData.matches = matchesResult.rows;
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const participantsResult = await pool.query(
            'SELECT tp.*, u.avatar_url, u.username FROM tournament_participants tp LEFT JOIN users u ON tp.user_id = u.id WHERE tp.tournament_id = $1',
            [tournamentId]
        );
        tournamentData.participants = participantsResult.rows;
        tournamentData.participant_count = participantsResult.rows.length;

        // üÜï –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        let teams = [];
        if (tournament.participant_type === 'team') {
            const teamsRes = await pool.query(
                `SELECT tt.id, tt.tournament_id, tt.name, tt.creator_id
                 FROM tournament_teams tt
                 WHERE tt.tournament_id = $1`,
                [tournamentId]
            );

            teams = await Promise.all(teamsRes.rows.map(async (team) => {
                const membersRes = await pool.query(
                    `SELECT tm.team_id, tm.user_id, tm.participant_id, 
                            tp.name, u.username, u.avatar_url, u.faceit_elo, u.cs2_premier_rank
                     FROM tournament_team_members tm
                     LEFT JOIN tournament_participants tp ON tm.participant_id = tp.id
                     LEFT JOIN users u ON tm.user_id = u.id
                     WHERE tm.team_id = $1`,
                    [team.id]
                );

                return {
                    ...team,
                    members: membersRes.rows
                };
            }));
        }

        tournamentData.teams = teams;
        tournamentData.mixed_teams = teams; // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        try {
            broadcastTournamentUpdate(tournamentId, tournamentData);
            console.log(`üì° [tournaments-fix] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã`);
        } catch (broadcastError) {
            console.error('‚ö†Ô∏è [tournaments-fix] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', broadcastError);
        }

        console.log(`üéâ [tournaments-fix] –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ ${matchId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
        res.status(200).json({ 
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω', 
            tournament: tournamentData 
        });

    } catch (err) {
        console.error(`‚ùå [tournaments-fix] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ ${matchId}:`, err);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞',
            details: err.message 
        });
    }
});

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
router.post('/:id/clear-match-results', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id } = req.params;
    const userId = req.user.id;

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const tournament = tournamentResult.rows[0];
        console.log(`üîç –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);

        // –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
        const updateResult = await pool.query(
            `UPDATE matches 
             SET winner_team_id = NULL, 
                 score1 = 0, 
                 score2 = 0,
                 maps_data = NULL
             WHERE tournament_id = $1 
             RETURNING *`,
            [id]
        );

        console.log(`‚úÖ –û—á–∏—â–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ${updateResult.rowCount} –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${id}`);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        const tournamentData = updatedTournamentResult.rows[0];
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
        const matchesResult = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, match_number',
            [id]
        );
        tournamentData.matches = matchesResult.rows;
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        let participantsQuery;
        if (tournament.participant_type === 'solo') {
            participantsQuery = `
                SELECT tp.*, u.avatar_url, u.username, u.faceit_elo 
                FROM tournament_participants tp 
                LEFT JOIN users u ON tp.user_id = u.id
                WHERE tp.tournament_id = $1
            `;
        } else {
            participantsQuery = `
                SELECT tt.*, u.avatar_url, u.username
                FROM tournament_teams tt
                LEFT JOIN users u ON tt.creator_id = u.id
                WHERE tt.tournament_id = $1
            `;
        }
        
        const participantsResult = await pool.query(participantsQuery, [id]);
        tournamentData.participants = participantsResult.rows;
        tournamentData.participant_count = participantsResult.rowCount;

        // –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        let teams = [];
        if (tournament.participant_type === 'team') {
            const teamsRes = await pool.query(
                `SELECT tt.id, tt.tournament_id, tt.name, tt.creator_id
                 FROM tournament_teams tt
                 WHERE tt.tournament_id = $1`,
                [id]
            );

            teams = await Promise.all(teamsRes.rows.map(async (team) => {
                const membersRes = await pool.query(
                    `SELECT tm.team_id, tm.user_id, tm.participant_id, 
                            tp.name, u.username, u.avatar_url, u.faceit_elo, u.cs2_premier_rank
                     FROM tournament_team_members tm
                     LEFT JOIN tournament_participants tp ON tm.participant_id = tp.id
                     LEFT JOIN users u ON tm.user_id = u.id
                     WHERE tm.team_id = $1`,
                    [team.id]
                );

                return {
                    ...team,
                    members: membersRes.rows
                };
            }));
        }

        tournamentData.teams = teams;
        tournamentData.mixed_teams = teams; // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏—Ö —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
        try {
            broadcastTournamentUpdate(id, tournamentData);
        } catch (broadcastError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket:', broadcastError);
            // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ WebSocket
        }

        res.status(200).json({ 
            message: `–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ${updateResult.rowCount} –º–∞—Ç—á–µ–π`,
            tournament: tournamentData
        });
        
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π';
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π',
            details: errorMessage,
            timestamp: new Date().toISOString()
        });
    }
});

module.exports = router; 