const express = require('express');
const router = express.Router();
const axios = require('axios');
const pool = require('../db');

// –ë–∞–∑–æ–≤—ã–π URL OpenDota API
const OPENDOTA_API_BASE = 'https://api.opendota.com/api';

// OpenDota API Token (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤)
const OPENDOTA_API_TOKEN = process.env.OPENDOTA_API_TOKEN || null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenDota API
async function makeOpenDotaRequest(endpoint, params = {}, method = 'GET') {
    try {
        const url = `${OPENDOTA_API_BASE}${endpoint}`;
        const config = {
            method: method,
            timeout: 15000,
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': '1337Community-DotaStats/3.0'
            },
            params: {}
        };

        // –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –µ—Å—Ç—å
        if (OPENDOTA_API_TOKEN) {
            config.params.api_key = OPENDOTA_API_TOKEN;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        Object.assign(config.params, params);

        const response = await axios(url, config);
        return response.data;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenDota API (${endpoint}):`, error.message);
        
        if (error.response?.status === 429) {
            throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenDota API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        
        if (error.response?.status === 404) {
            throw new Error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π');
        }
        
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç OpenDota API: ${error.message}`);
    }
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Steam ID64 –≤ Account ID –¥–ª—è OpenDota
function steamIdToAccountId(steamId64) {
    return String(BigInt(steamId64) - BigInt('76561197960265728'));
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è rank_tier –≤ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π MMR
function rankTierToMMR(rankTier) {
    if (!rankTier || rankTier === 0) return 0;
    
    // OpenDota rank_tier: –¥–µ—Å—è—Ç–∫–∏ = —Ä–∞–Ω–≥, –µ–¥–∏–Ω–∏—Ü—ã = –∑–≤–µ–∑–¥—ã (1-5)
    const rankNumber = Math.floor(rankTier / 10); // 1-8 (Herald-Immortal)
    const stars = rankTier % 10; // 1-5
    
    // MMR –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–Ω–≥–∞ (—Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    const mmrRanges = {
        1: { // Herald
            1: 77,   // 0-153 MMR
            2: 231,  // 154-307 MMR
            3: 385,  // 308-461 MMR
            4: 539,  // 462-615 MMR
            5: 693   // 616-769 MMR
        },
        2: { // Guardian
            1: 847,  // 770-923 MMR
            2: 1001, // 924-1077 MMR
            3: 1155, // 1078-1231 MMR
            4: 1309, // 1232-1385 MMR
            5: 1463  // 1386-1539 MMR
        },
        3: { // Crusader
            1: 1617, // 1540-1693 MMR
            2: 1771, // 1694-1847 MMR
            3: 1925, // 1848-2001 MMR
            4: 2079, // 2002-2155 MMR
            5: 2233  // 2156-2309 MMR
        },
        4: { // Archon
            1: 2387, // 2310-2463 MMR
            2: 2541, // 2464-2617 MMR
            3: 2695, // 2618-2771 MMR
            4: 2849, // 2772-2925 MMR
            5: 3003  // 2926-3079 MMR
        },
        5: { // Legend
            1: 3157, // 3080-3233 MMR
            2: 3311, // 3234-3387 MMR
            3: 3465, // 3388-3541 MMR
            4: 3619, // 3542-3695 MMR
            5: 3773  // 3696-3849 MMR
        },
        6: { // Ancient
            1: 3927, // 3850-4003 MMR
            2: 4081, // 4004-4157 MMR
            3: 4235, // 4158-4311 MMR
            4: 4389, // 4312-4465 MMR
            5: 4543  // 4466-4619 MMR
        },
        7: { // Divine
            1: 4720, // 4620-4819 MMR
            2: 4920, // 4820-5019 MMR
            3: 5120, // 5020-5219 MMR
            4: 5320, // 5220-5419 MMR
            5: 5420  // 5420+ MMR
        },
        8: { // Immortal
            1: 5620, // 5620+ MMR
            2: 5720,
            3: 5820,
            4: 5920,
            5: 6020
        }
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (rankNumber < 1 || rankNumber > 8 || stars < 1 || stars > 5) {
        console.warn(`–ù–µ–≤–µ—Ä–Ω—ã–π rank_tier: ${rankTier}, rankNumber: ${rankNumber}, stars: ${stars}`);
        return 0;
    }
    
    return mmrRanges[rankNumber] && mmrRanges[rankNumber][stars] ? mmrRanges[rankNumber][stars] : 0;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ –ø–æ Steam ID
router.get('/player/:steamid', async (req, res) => {
    const { steamid } = req.params;
    
    try {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ Steam ID: ${steamid} —á–µ—Ä–µ–∑ OpenDota API`);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Steam ID –≤ account ID
        const accountId = steamIdToAccountId(steamid);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
        const [playerProfile, winLoss, recentMatches, playerHeroes] = await Promise.all([
            makeOpenDotaRequest(`/players/${accountId}`),
            makeOpenDotaRequest(`/players/${accountId}/wl`),
            makeOpenDotaRequest(`/players/${accountId}/recentMatches`),
            makeOpenDotaRequest(`/players/${accountId}/heroes`, { significant: 1 })
        ]);

        if (!playerProfile || playerProfile.profile === null) {
            return res.status(404).json({ 
                error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ OpenDota API',
                details: '–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –∏–≥—Ä–∞–ª –≤ Dota 2'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let rankings = [];
        try {
            rankings = await makeOpenDotaRequest(`/players/${accountId}/rankings`);
        } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–∞:', error.message);
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π MMR –Ω–∞ –æ—Å–Ω–æ–≤–µ rank_tier
        const estimatedMMR = rankTierToMMR(playerProfile.rank_tier);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        const result = {
            profile: {
                account_id: parseInt(accountId),
                steam_id: steamid,
                avatar: playerProfile.profile?.avatar,
                avatarmedium: playerProfile.profile?.avatarmedium,
                avatarfull: playerProfile.profile?.avatarfull,
                personaname: playerProfile.profile?.personaname,
                profileurl: playerProfile.profile?.profileurl,
                country_code: playerProfile.profile?.loccountrycode,
                rank_tier: playerProfile.rank_tier,
                estimated_mmr: estimatedMMR,
                leaderboard_rank: playerProfile.leaderboard_rank,
                mmr_estimate: playerProfile.competitive_rank || playerProfile.solo_competitive_rank || estimatedMMR,
                solo_competitive_rank: playerProfile.solo_competitive_rank,
                competitive_rank: playerProfile.competitive_rank,
                last_login: playerProfile.profile?.last_login,
                is_contributor: playerProfile.profile?.is_contributor,
                is_subscriber: playerProfile.profile?.is_subscriber,
                plus: playerProfile.profile?.plus
            },
            stats: {
                win: winLoss.win || 0,
                lose: winLoss.lose || 0,
                total_matches: (winLoss.win || 0) + (winLoss.lose || 0),
                winrate: (winLoss.win || 0) + (winLoss.lose || 0) > 0 ? 
                    (((winLoss.win || 0) / ((winLoss.win || 0) + (winLoss.lose || 0))) * 100).toFixed(2) : 0
            },
            recent_matches: (recentMatches || []).slice(0, 10).map(match => ({
                match_id: match.match_id,
                hero_id: match.hero_id,
                start_time: match.start_time,
                duration: match.duration,
                game_mode: match.game_mode,
                lobby_type: match.lobby_type,
                kills: match.kills,
                deaths: match.deaths,
                assists: match.assists,
                gold_per_min: match.gold_per_min,
                xp_per_min: match.xp_per_min,
                hero_damage: match.hero_damage,
                hero_healing: match.hero_healing,
                last_hits: match.last_hits,
                player_slot: match.player_slot,
                radiant_win: match.radiant_win,
                win: ((match.player_slot < 128) === match.radiant_win) ? 1 : 0,
                lane: match.lane,
                lane_role: match.lane_role,
                is_roaming: match.is_roaming,
                cluster: match.cluster,
                leaver_status: match.leaver_status,
                party_size: match.party_size
            })),
            top_heroes: (playerHeroes || [])
                .sort((a, b) => b.games - a.games)
                .slice(0, 10)
                .map(hero => ({
                    hero_id: hero.hero_id,
                    games: hero.games,
                    win: hero.win,
                    lose: hero.games - hero.win,
                    winrate: hero.games > 0 ? ((hero.win / hero.games) * 100).toFixed(2) : 0,
                    last_played: hero.last_played
                })),
            rankings: rankings || []
        };
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${steamid}`);
        res.json(result);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ ${steamid}:`, error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞',
            details: error.message 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ
router.get('/match/:matchid', async (req, res) => {
    const { matchid } = req.params;
    
    try {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ ${matchid} —á–µ—Ä–µ–∑ OpenDota API`);
        
        const matchData = await makeOpenDotaRequest(`/matches/${matchid}`);
        
        if (!matchData) {
            return res.status(404).json({ 
                error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω',
                details: '–ú–∞—Ç—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
            });
        }
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ ${matchid}`);
        res.json(matchData);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ ${matchid}:`, error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ',
            details: error.message 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤
router.get('/heroes', async (req, res) => {
    try {
        console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤ —á–µ—Ä–µ–∑ OpenDota API');
        
        const heroes = await makeOpenDotaRequest('/heroes');
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –≥–µ—Ä–æ–µ–≤ (${heroes.length} –≥–µ—Ä–æ–µ–≤)`);
        res.json(heroes);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤:', error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤',
            details: error.message 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ–µ–≤
router.get('/hero-stats', async (req, res) => {
    try {
        console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ–µ–≤ —á–µ—Ä–µ–∑ OpenDota API');
        
        const heroStats = await makeOpenDotaRequest('/heroStats');
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ—Ä–æ–µ–≤ (${heroStats.length} –≥–µ—Ä–æ–µ–≤)`);
        res.json(heroStats);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ–µ–≤:', error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ–µ–≤',
            details: error.message 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–µ—Ä–æ–µ–≤, –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —Ç.–¥.)
router.get('/constants/:resource', async (req, res) => {
    const { resource } = req.params;
    
    try {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ${resource} —á–µ—Ä–µ–∑ OpenDota API`);
        
        const constants = await makeOpenDotaRequest(`/constants/${resource}`);
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ ${resource}`);
        res.json(constants);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ${resource}:`, error.message);
        res.status(500).json({ 
            error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ${resource}`,
            details: error.message 
        });
    }
});

// –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤
router.get('/search', async (req, res) => {
    const { q } = req.query;
    
    if (!q || q.length < 3) {
        return res.status(400).json({ 
            error: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞' 
        });
    }
    
    try {
        console.log(`üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤: "${q}" —á–µ—Ä–µ–∑ OpenDota API`);
        
        const searchResults = await makeOpenDotaRequest('/search', { q });
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${searchResults.length} –∏–≥—Ä–æ–∫–æ–≤`);
        res.json(searchResults);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤:`, error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤',
            details: error.message 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≥–µ—Ä–æ—é
router.get('/rankings/:heroId', async (req, res) => {
    const { heroId } = req.params;
    
    try {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –≥–µ—Ä–æ—è ${heroId} —á–µ—Ä–µ–∑ OpenDota API`);
        
        const rankings = await makeOpenDotaRequest('/rankings', { hero_id: heroId });
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –≥–µ—Ä–æ—è ${heroId}`);
        res.json(rankings);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –≥–µ—Ä–æ—è ${heroId}:`, error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤',
            details: error.message 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ—Ä–æ—è
router.get('/benchmarks/:heroId', async (req, res) => {
    const { heroId } = req.params;
    
    try {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è –≥–µ—Ä–æ—è ${heroId} —á–µ—Ä–µ–∑ OpenDota API`);
        
        const benchmarks = await makeOpenDotaRequest('/benchmarks', { hero_id: heroId });
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –±–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è –≥–µ—Ä–æ—è ${heroId}`);
        res.json(benchmarks);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –¥–ª—è –≥–µ—Ä–æ—è ${heroId}:`, error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤',
            details: error.message 
        });
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
router.post('/profile/save', async (req, res) => {
    const { user_id, steam_id, dota_stats } = req.body;
    
    if (!user_id || !steam_id || !dota_stats) {
        return res.status(400).json({ 
            error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' 
        });
    }
    
    try {
        const query = `
            INSERT INTO dota_profiles (user_id, steam_id, dota_stats, updated_at) 
            VALUES ($1, $2, $3, NOW()) 
            ON CONFLICT (user_id) 
            DO UPDATE SET 
                steam_id = EXCLUDED.steam_id,
                dota_stats = EXCLUDED.dota_stats,
                updated_at = NOW()
        `;
        
        await pool.query(query, [user_id, steam_id, JSON.stringify(dota_stats)]);
        
        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å Dota 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}`);
        res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å Dota 2 —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω' });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è Dota 2:', error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
            details: error.message 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
router.get('/profile/:userId', async (req, res) => {
    const { userId } = req.params;
    
    try {
        const query = 'SELECT * FROM dota_profiles WHERE user_id = $1';
        const result = await pool.query(query, [userId]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ 
                error: '–ü—Ä–æ—Ñ–∏–ª—å Dota 2 –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }
        
        const profile = result.rows[0];
        res.json({
            user_id: profile.user_id,
            steam_id: profile.steam_id,
            dota_stats: profile.dota_stats,
            estimated_mmr: profile.estimated_mmr,
            created_at: profile.created_at,
            updated_at: profile.updated_at
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è Dota 2:', error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
            details: error.message 
        });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
router.delete('/profile/:userId', async (req, res) => {
    const { userId } = req.params;
    
    try {
        const query = 'DELETE FROM dota_profiles WHERE user_id = $1';
        const result = await pool.query(query, [userId]);
        
        if (result.rowCount === 0) {
            return res.status(404).json({ 
                error: '–ü—Ä–æ—Ñ–∏–ª—å Dota 2 –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }
        
        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å Dota 2 —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å Dota 2 —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è Dota 2:', error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
            details: error.message 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞ (—Ä–µ—Ñ—Ä–µ—à –¥–∞–Ω–Ω—ã—Ö)
router.post('/player/:steamid/refresh', async (req, res) => {
    const { steamid } = req.params;
    
    try {
        console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ ${steamid}`);
        
        const accountId = steamIdToAccountId(steamid);
        const refreshResult = await makeOpenDotaRequest(`/players/${accountId}/refresh`, {}, 'POST');
        
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ ${steamid} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
        res.json({ 
            message: '–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
            ...refreshResult 
        });
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ ${steamid}:`, error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
            details: error.message 
        });
    }
});

// –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MMR –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
router.post('/profiles/update-mmr', async (req, res) => {
    try {
        console.log('üîÑ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MMR –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≥–¥–µ –µ—Å—Ç—å rank_tier, –Ω–æ –Ω–µ—Ç estimated_mmr
        const profiles = await pool.query(`
            SELECT id, dota_stats 
            FROM dota_profiles 
            WHERE estimated_mmr IS NULL OR estimated_mmr = 0
        `);
        
        let updatedCount = 0;
        
        for (const profile of profiles.rows) {
            try {
                const dotaStats = profile.dota_stats;
                
                if (dotaStats && dotaStats.profile && dotaStats.profile.rank_tier) {
                    const estimatedMMR = rankTierToMMR(dotaStats.profile.rank_tier);
                    
                    if (estimatedMMR > 0) {
                        await pool.query(
                            'UPDATE dota_profiles SET estimated_mmr = $1 WHERE id = $2',
                            [estimatedMMR, profile.id]
                        );
                        updatedCount++;
                        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å ID ${profile.id}: rank_tier ${dotaStats.profile.rank_tier} ‚Üí ${estimatedMMR} MMR`);
                    }
                }
            } catch (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è ID ${profile.id}:`, err.message);
            }
        }
        
        console.log(`‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: ${updatedCount}`);
        res.json({ 
            message: '–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MMR –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
            updated_profiles: updatedCount,
            total_profiles: profiles.rows.length
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MMR:', error.message);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MMR',
            details: error.message 
        });
    }
});

module.exports = router;