// üéÆ Routes –¥–ª—è –º–∞—Ç—á–µ–π
const express = require('express');
const router = express.Router();
const pool = require('../db');
const { authenticateToken } = require('../middleware/auth');

// –í–ê–ñ–ù–û: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–æ—É—Ç—ã –ü–ï–†–ï–î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏!

// üîî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è UI)
router.get('/has-active', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –º–∞—Ç—á–∏
        const tournamentCheck = await pool.query(
            `SELECT COUNT(*) as count
             FROM matches m
             LEFT JOIN tournament_team_members ttm1 ON ttm1.team_id = m.team1_id
             LEFT JOIN tournament_team_members ttm2 ON ttm2.team_id = m.team2_id
             WHERE (ttm1.user_id = $1 OR ttm2.user_id = $1)
               AND m.status IN ('pending', 'ready', 'in_progress')
             LIMIT 1`,
            [userId]
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—Ç—á–∏
        const customCheck = await pool.query(
            `SELECT COUNT(*) as count
             FROM admin_match_lobbies aml
             JOIN admin_lobby_invitations ali ON ali.lobby_id = aml.id
             WHERE ali.user_id = $1
               AND aml.status IN ('waiting', 'ready', 'picking', 'ready_to_create', 'match_created')
             LIMIT 1`,
            [userId]
        );
        
        const tournamentCount = parseInt(tournamentCheck.rows[0]?.count) || 0;
        const customCount = parseInt(customCheck.rows[0]?.count) || 0;
        const totalCount = tournamentCount + customCount;
        
        res.json({
            success: true,
            hasActive: totalCount > 0,
            count: totalCount
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π:', error);
        res.status(500).json({ 
            success: false,
            hasActive: false,
            count: 0
        });
    }
});

// üìã –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ + –∫–∞—Å—Ç–æ–º–Ω—ã–µ)
router.get('/my-active', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.id;
        
        // üèÜ –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –º–∞—Ç—á–∏ (–≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã)
        const tournamentMatches = await pool.query(
            `SELECT DISTINCT
                m.id,
                m.tournament_id,
                m.round,
                m.status,
                m.team1_id,
                m.team2_id,
                t1.name as team1_name,
                t2.name as team2_name,
                trn.name as tournament_name,
                trn.game,
                'tournament' as match_type,
                ml.id as lobby_id,
                ml.status as lobby_status,
                m.created_at
             FROM matches m
             JOIN tournaments trn ON trn.id = m.tournament_id
             LEFT JOIN tournament_teams t1 ON t1.id = m.team1_id
             LEFT JOIN tournament_teams t2 ON t2.id = m.team2_id
             LEFT JOIN tournament_team_members ttm1 ON ttm1.team_id = m.team1_id
             LEFT JOIN tournament_team_members ttm2 ON ttm2.team_id = m.team2_id
             LEFT JOIN match_lobbies ml ON ml.match_id = m.id
             WHERE (ttm1.user_id = $1 OR ttm2.user_id = $1)
               AND m.status IN ('pending', 'ready', 'in_progress')
             ORDER BY m.created_at DESC
             LIMIT 20`,
            [userId]
        );
        
        // üéÆ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—Ç—á–∏ (–≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –ª–æ–±–±–∏)
        const customMatches = await pool.query(
            `SELECT 
                aml.id as lobby_id,
                aml.status as lobby_status,
                aml.match_format,
                aml.team1_name,
                aml.team2_name,
                aml.created_at,
                aml.created_by,
                'custom' as match_type
             FROM admin_match_lobbies aml
             JOIN admin_lobby_invitations ali ON ali.lobby_id = aml.id
             WHERE ali.user_id = $1
               AND aml.status IN ('waiting', 'ready', 'picking', 'ready_to_create', 'match_created')
             ORDER BY aml.created_at DESC
             LIMIT 10`,
            [userId]
        );
        
        res.json({
            success: true,
            tournamentMatches: tournamentMatches.rows,
            customMatches: customMatches.rows
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π:', error);
        res.status(500).json({ 
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π' 
        });
    }
});

// üóëÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–æ–±–±–∏ (—É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ)
router.delete('/custom-lobby/:lobbyId/leave', authenticateToken, async (req, res) => {
    try {
        const { lobbyId } = req.params;
        const userId = req.user.id;
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await pool.query(
            `DELETE FROM admin_lobby_invitations 
             WHERE lobby_id = $1 AND user_id = $2`,
            [lobbyId, userId]
        );
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–∫–∏–Ω—É–ª –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–±–±–∏ ${lobbyId}`);
        
        res.json({
            success: true,
            message: '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏'
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–æ–±–±–∏:', error);
        res.status(500).json({ 
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ª–æ–±–±–∏' 
        });
    }
});

// üìä –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å—Ç–æ–º–Ω–æ–º –º–∞—Ç—á–µ (–ü–û–°–õ–ï —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤)
router.get('/:id', authenticateToken, async (req, res) => {
    try {
        const { id } = req.params;
        const userId = req.user.id;
        
        // –ò—â–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–±–±–∏ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º –º–∞—Ç—á–µ–º
        const result = await pool.query(
            `SELECT 
                aml.id as lobby_id,
                aml.status,
                aml.match_format,
                aml.team1_name,
                aml.team2_name,
                aml.connect_url,
                aml.gotv_url,
                aml.created_at,
                aml.created_by
             FROM admin_match_lobbies aml
             WHERE aml.id = $1`,
            [id]
        );
        
        if (!result.rows[0]) {
            return res.status(404).json({ 
                success: false,
                error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }
        
        const lobby = result.rows[0];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        const accessCheck = await pool.query(
            `SELECT 1 FROM admin_lobby_invitations WHERE lobby_id = $1 AND user_id = $2`,
            [id, userId]
        );
        
        const isCreator = Number(lobby.created_by) === Number(userId);
        const isInvited = accessCheck.rows.length > 0;
        const isAdmin = req.user.role === 'admin';
        
        if (!isAdmin && !isCreator && !isInvited) {
            return res.status(403).json({ 
                success: false,
                error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–∞—Ç—á—É' 
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const participants = await pool.query(
            `SELECT 
                ali.user_id,
                ali.team,
                u.username,
                u.avatar_url,
                u.steam_id
             FROM admin_lobby_invitations ali
             JOIN users u ON u.id = ali.user_id
             WHERE ali.lobby_id = $1 AND ali.accepted = TRUE
             ORDER BY ali.team, ali.team_position ASC`,
            [id]
        );
        
        const team1Players = participants.rows.filter(p => p.team === 1);
        const team2Players = participants.rows.filter(p => p.team === 2);
        
        res.json({
            success: true,
            match: {
                id: lobby.lobby_id,
                status: lobby.status,
                match_format: lobby.match_format,
                team1_name: lobby.team1_name,
                team2_name: lobby.team2_name,
                team1_players: team1Players,
                team2_players: team2Players,
                connect_url: lobby.connect_url,
                gotv_url: lobby.gotv_url,
                created_at: lobby.created_at
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–∞:', error);
        res.status(500).json({ 
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–∞' 
        });
    }
});

module.exports = router;
