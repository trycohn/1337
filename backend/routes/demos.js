/**
 * üé¨ DEMO FILES API
 * –ü—Ä–∏–µ–º –∏ —Ä–∞–∑–¥–∞—á–∞ .dem —Ñ–∞–π–ª–æ–≤ –æ—Ç MatchZy
 * 
 * @version 1.0.0
 * @date 2025-10-10
 */

const express = require('express');
const router = express.Router();
const fs = require('fs');
const path = require('path');
const pool = require('../db');

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–º–æ–∫
const DEMOS_DIR = path.join(__dirname, '../uploads/demos');
const MAX_FILE_SIZE = 1024 * 1024 * 1024; // 1 –ì–ë

// –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(DEMOS_DIR)) {
    fs.mkdirSync(DEMOS_DIR, { recursive: true });
}

/**
 * POST /api/demos/upload
 * Webhook –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ–∫ –æ—Ç MatchZy
 */
router.post('/upload', async (req, res) => {
    console.log('üé¨ [Demos] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–µ–º–∫–∏');
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const authHeader = req.headers['authorization'];
        const token = authHeader?.replace('Bearer ', '');
        
        if (!token || token !== process.env.MATCHZY_SECRET_TOKEN) {
            console.log('‚ùå [Demos] –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            return res.status(401).json({ 
                success: false, 
                error: 'Unauthorized' 
            });
        }
        
        // 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç MatchZy
        const fileName = req.headers['matchzy-filename'];
        const matchId = req.headers['matchzy-matchid'];
        const mapNumber = req.headers['matchzy-mapnumber'];
        const roundNumber = req.headers['matchzy-roundnumber'];
        
        console.log('üìã [Demos] –ó–∞–≥–æ–ª–æ–≤–∫–∏:', {
            fileName,
            matchId,
            mapNumber,
            roundNumber
        });
        
        if (!matchId || !mapNumber) {
            console.log('‚ùå [Demos] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏');
            return res.status(400).json({ 
                success: false, 
                error: 'Missing required headers: MatchZy-MatchId, MatchZy-MapNumber' 
            });
        }
        
        // 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ)
        const safeFileName = `${matchId}_map${mapNumber}.dem`;
        const filePath = path.join(DEMOS_DIR, safeFileName);
        
        console.log('üíæ [Demos] –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', filePath);
        
        // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const chunks = [];
        let totalSize = 0;
        
        req.on('data', (chunk) => {
            totalSize += chunk.length;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞
            if (totalSize > MAX_FILE_SIZE) {
                console.log(`‚ùå [Demos] –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞: ${totalSize} > ${MAX_FILE_SIZE}`);
                req.pause();
                req.socket.destroy();
                return;
            }
            
            chunks.push(chunk);
        });
        
        req.on('end', async () => {
            try {
                // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –≤ –±—É—Ñ–µ—Ä
                const buffer = Buffer.concat(chunks);
                
                console.log(`üì¶ [Demos] –ü–æ–ª—É—á–µ–Ω–æ ${buffer.length} –±–∞–π—Ç`);
                
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                fs.writeFileSync(filePath, buffer);
                
                console.log('‚úÖ [Demos] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', safeFileName);
                
                // 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
                const relativePath = `uploads/demos/${safeFileName}`;
                
                const updateQuery = `
                    UPDATE matchzy_maps 
                    SET 
                        demo_file_path = $1,
                        demo_uploaded_at = NOW(),
                        demo_size_bytes = $2
                    WHERE matchid = $3 AND mapnumber = $4
                    RETURNING *
                `;
                
                const result = await pool.query(updateQuery, [
                    relativePath,
                    buffer.length,
                    parseInt(matchId),
                    parseInt(mapNumber)
                ]);
                
                if (result.rows.length === 0) {
                    console.log('‚ö†Ô∏è [Demos] –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω');
                } else {
                    console.log('‚úÖ [Demos] –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', result.rows[0]);
                }
                
                // 6. –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—Ö–∞
                res.status(200).send('OK');
                
            } catch (err) {
                console.error('‚ùå [Demos] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', err);
                res.status(500).json({ 
                    success: false, 
                    error: 'Failed to save demo file' 
                });
            }
        });
        
        req.on('error', (err) => {
            console.error('‚ùå [Demos] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
            res.status(500).json({ 
                success: false, 
                error: 'Failed to receive demo file' 
            });
        });
        
    } catch (error) {
        console.error('‚ùå [Demos] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Internal server error' 
        });
    }
});

/**
 * GET /api/demos/download/:matchid/:mapnumber
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–µ–º–∫–∏
 */
router.get('/download/:matchid/:mapnumber', async (req, res) => {
    const { matchid, mapnumber } = req.params;
    
    console.log(`üì• [Demos] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: matchid=${matchid}, map=${mapnumber}`);
    
    try {
        // 1. –ü–æ–∏—Å–∫ –≤ –ë–î
        const query = `
            SELECT demo_file_path, demo_size_bytes 
            FROM matchzy_maps 
            WHERE matchid = $1 AND mapnumber = $2 AND demo_file_path IS NOT NULL
        `;
        
        const result = await pool.query(query, [parseInt(matchid), parseInt(mapnumber)]);
        
        if (result.rows.length === 0) {
            console.log('‚ùå [Demos] –î–µ–º–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î');
            return res.status(404).json({ 
                success: false, 
                error: 'Demo not found' 
            });
        }
        
        const demoPath = result.rows[0].demo_file_path;
        const fullPath = path.join(__dirname, '..', demoPath);
        
        console.log('üìÇ [Demos] –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', fullPath);
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if (!fs.existsSync(fullPath)) {
            console.log('‚ùå [Demos] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ');
            return res.status(404).json({ 
                success: false, 
                error: 'Demo file not found on disk' 
            });
        }
        
        // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        const fileName = `match_${matchid}_map${mapnumber}.dem`;
        
        res.setHeader('Content-Type', 'application/octet-stream');
        res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
        
        const fileStream = fs.createReadStream(fullPath);
        fileStream.pipe(res);
        
        console.log('‚úÖ [Demos] –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', fileName);
        
    } catch (error) {
        console.error('‚ùå [Demos] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Failed to download demo' 
        });
    }
});

/**
 * GET /api/demos/available/:matchid
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–º–æ–∫ –¥–ª—è –º–∞—Ç—á–∞
 */
router.get('/available/:matchid', async (req, res) => {
    const { matchid } = req.params;
    
    try {
        const query = `
            SELECT mapnumber, demo_file_path, demo_uploaded_at, demo_size_bytes
            FROM matchzy_maps 
            WHERE matchid = $1 AND demo_file_path IS NOT NULL
            ORDER BY mapnumber
        `;
        
        const result = await pool.query(query, [parseInt(matchid)]);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç { "1": true, "2": true, ... }
        const available = {};
        result.rows.forEach(row => {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ
            const fullPath = path.join(__dirname, '..', row.demo_file_path);
            if (fs.existsSync(fullPath)) {
                available[row.mapnumber] = {
                    available: true,
                    size: row.demo_size_bytes,
                    uploaded_at: row.demo_uploaded_at
                };
            }
        });
        
        res.json(available);
        
    } catch (error) {
        console.error('‚ùå [Demos] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–º–æ–∫:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Failed to check available demos' 
        });
    }
});

/**
 * GET /api/demos/stats
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–µ–º–∫–∞–º (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
 */
router.get('/stats', async (req, res) => {
    try {
        const { getDemosStats } = require('../services/demoCleanupService');
        const stats = await getDemosStats();
        
        if (!stats) {
            return res.status(500).json({
                success: false,
                error: 'Failed to get stats'
            });
        }
        
        res.json({
            success: true,
            data: stats
        });
        
    } catch (error) {
        console.error('‚ùå [Demos] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to get stats'
        });
    }
});

/**
 * POST /api/demos/cleanup
 * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–µ–º–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
router.post('/cleanup', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        const authHeader = req.headers['authorization'];
        const token = authHeader?.replace('Bearer ', '');
        
        if (!token) {
            return res.status(401).json({
                success: false,
                error: 'Unauthorized'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const jwt = require('jsonwebtoken');
        let userId;
        
        try {
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            userId = decoded.id;
        } catch (err) {
            return res.status(401).json({
                success: false,
                error: 'Invalid token'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userQuery = await pool.query(
            'SELECT role FROM users WHERE id = $1',
            [userId]
        );
        
        if (userQuery.rows.length === 0 || userQuery.rows[0].role !== 'admin') {
            return res.status(403).json({
                success: false,
                error: 'Admin access required'
            });
        }
        
        // –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
        console.log(`üóëÔ∏è [Demos] –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        const { cleanupOldDemos } = require('../services/demoCleanupService');
        const stats = await cleanupOldDemos();
        
        res.json({
            success: true,
            message: 'Cleanup completed',
            stats: stats
        });
        
    } catch (error) {
        console.error('‚ùå [Demos] –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to cleanup demos'
        });
    }
});

module.exports = router;

