const express = require('express');
const router = express.Router();
const pool = require('../db');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { authenticateToken } = require('../middleware/auth');
const axios = require('axios');
const querystring = require('querystring');
const crypto = require('crypto');
const cookieParser = require('cookie-parser');
const nodemailer = require('nodemailer');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { sendWelcomeEmail } = require('../services/emailService');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ nodemailer
const transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    secure: process.env.SMTP_PORT === '465', // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
    auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
    }
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º cookie-parser middleware
router.use(cookieParser());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const dir = path.join(__dirname, '../uploads/avatars');
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        cb(null, dir);
    },
    filename: (req, file, cb) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –∏ timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const userId = req.user.id;
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        cb(null, `user_${userId}_${timestamp}${ext}`);
    }
});

// –§–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è multer
const fileFilter = (req, file, cb) => {
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (file.mimetype.startsWith('image/')) {
        cb(null, true);
    } else {
        cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'), false);
    }
};

const upload = multer({ 
    storage: storage,
    limits: {
        fileSize: 5 * 1024 * 1024, // 5 –ú–ë
    },
    fileFilter: fileFilter
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/register', async (req, res) => {
    const { username, email, password, referralCode } = req.body;

    if (!username || !email || !password) {
        return res.status(400).json({ message: 'Username, email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const client = await pool.connect();
    
    try {
        await client.query('BEGIN');
        
        const usernameCheck = await client.query('SELECT * FROM users WHERE username = $1', [username]);
        if (usernameCheck.rows.length > 0) {
            await client.query('ROLLBACK');
            return res.status(400).json({ message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ' });
        }

        const emailCheck = await client.query('SELECT * FROM users WHERE email = $1', [email]);
        if (emailCheck.rows.length > 0) {
            await client.query('ROLLBACK');
            return res.status(400).json({ message: 'Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
        }

        // üîó –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ì–û –ö–û–î–ê
        let referrerId = null;
        let referralLinkId = null;
        let tournamentId = null;
        
        if (referralCode) {
            console.log(`üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`);
            
            // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            const referralResult = await client.query(`
                SELECT rl.*, u.username as referrer_username 
                FROM referral_links rl
                JOIN users u ON rl.user_id = u.id
                WHERE rl.referral_code = $1 
                  AND rl.expires_at > NOW() 
                  AND rl.uses_count < rl.max_uses
                  AND rl.is_active = true
            `, [referralCode]);
            
            if (referralResult.rows.length > 0) {
                const referralLink = referralResult.rows[0];
                referrerId = referralLink.user_id;
                referralLinkId = referralLink.id;
                tournamentId = referralLink.tournament_id;
                
                console.log(`‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π: ${referralLink.referrer_username} (ID: ${referrerId})`);
            } else {
                console.log(`‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralCode}`);
                // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥
            }
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const result = await client.query(
            'INSERT INTO users (username, email, password_hash, invited_by, invited_at) VALUES ($1, $2, $3, $4, $5) RETURNING id, username, role',
            [username, email, hashedPassword, referrerId, referrerId ? new Date() : null]
        );
        const newUser = result.rows[0];

        // üîó –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò
        if (referralLinkId) {
            await client.query(`
                UPDATE referral_links 
                SET uses_count = uses_count + 1, 
                    last_used_at = NOW() 
                WHERE id = $1
            `, [referralLinkId]);
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            await client.query(`
                INSERT INTO referral_uses (referral_link_id, new_user_id, registration_ip, user_agent)
                VALUES ($1, $2, $3, $4)
            `, [referralLinkId, newUser.id, req.ip, req.get('User-Agent')]);
            
            console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: +1`);
        }

        const token = jwt.sign(
            { id: newUser.id, role: newUser.role, username: newUser.username },
            process.env.JWT_SECRET,
            { expiresIn: '168h' }
        );

        // üìß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ì–û EMAIL
        let emailSent = false;
        let emailError = null;
        try {
            console.log(`üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username} (${email})`);
            const emailResult = await sendWelcomeEmail(email, username);
            if (emailResult.success) {
                console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${emailResult.messageId}`);
                emailSent = true;
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞:`, emailResult.error);
                emailError = emailResult.error;
            }
        } catch (emailException) {
            console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ email:', emailException);
            emailError = emailException.message;
        }

        // üîî –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–ò–°–¢–ï–ú–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
        try {
            const { sendSystemNotification } = require('../utils/systemNotifications');
            
            let welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 1337 Community, ${username}!\n\n` +
                               `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n` +
                               `‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n` +
                               `‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n` +
                               `‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n` +
                               `‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
            if (referrerId) {
                const referrerResult = await client.query('SELECT username FROM users WHERE id = $1', [referrerId]);
                const referrerUsername = referrerResult.rows[0]?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                welcomeMessage += `üîó –í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${referrerUsername}!\n`;
                
                if (tournamentId) {
                    const tournamentResult = await client.query('SELECT name FROM tournaments WHERE id = $1', [tournamentId]);
                    const tournamentName = tournamentResult.rows[0]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä';
                    welcomeMessage += `üèÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ "${tournamentName}"!\n`;
                }
                welcomeMessage += '\n';
            }
                               
            welcomeMessage += `${emailSent ? 'üìß –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.' : '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ.'}`;
            
            await sendSystemNotification(newUser.id, welcomeMessage, 'welcome', {
                userId: newUser.id,
                username: username,
                email: email,
                emailSent: emailSent,
                referrerId: referrerId,
                tournamentId: tournamentId
            });
            
            console.log(`‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}`);
        } catch (notificationError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationError);
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        }

        // üîó –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–ß–ê–°–¢–ò–ï –í –¢–£–†–ù–ò–†–ï (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞)
        if (tournamentId && referrerId) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                const tournamentCheck = await client.query(`
                    SELECT status, max_participants, 
                           (SELECT COUNT(*) FROM tournament_participants WHERE tournament_id = $1) as current_participants
                    FROM tournaments WHERE id = $1
                `, [tournamentId]);
                
                if (tournamentCheck.rows.length > 0) {
                    const tournament = tournamentCheck.rows[0];
                    
                    if (tournament.status === 'active' && 
                        (!tournament.max_participants || tournament.current_participants < tournament.max_participants)) {
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—É—Ä–Ω–∏—Ä
                        await client.query(`
                            INSERT INTO tournament_participants (tournament_id, user_id)
                            VALUES ($1, $2)
                            ON CONFLICT (tournament_id, user_id) DO NOTHING
                        `, [tournamentId, newUser.id]);
                        
                        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä ID: ${tournamentId}`);
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —É—á–∞—Å—Ç–∏–∏
                        await sendSystemNotification(newUser.id, 
                            `üèÜ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ!\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ç—É—Ä–Ω–∏—Ä–∞.`, 
                            'tournament_join', 
                            { tournamentId: tournamentId }
                        );
                    }
                }
            } catch (tournamentError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä:', tournamentError);
                // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            }
        }

        // üîó –£–í–ï–î–û–ú–õ–Ø–ï–ú –ü–†–ò–ì–õ–ê–°–ò–í–®–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        if (referrerId) {
            try {
                const { sendSystemNotification } = require('../utils/systemNotifications');
                
                await sendSystemNotification(referrerId, 
                    `üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n` +
                    `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n` +
                    `üèÜ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞!`, 
                    'referral_success', 
                    { 
                        newUserId: newUser.id, 
                        newUsername: username,
                        tournamentId: tournamentId 
                    }
                );
                
                console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: ${referrerId}`);
            } catch (referralNotificationError) {
                console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ:', referralNotificationError);
            }
        }

        // üèÜ –ü–†–û–í–ï–†–Ø–ï–ú –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –î–õ–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        try {
            const achievementSystem = require('../services/achievementSystem');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            if (!achievementSystem.initialized) {
                await achievementSystem.initialize();
            }
            
            await achievementSystem.triggerAchievementCheck(newUser.id, 'registration', {
                username: username,
                registrationDate: new Date(),
                referrerId: referrerId,
                tournamentId: tournamentId
            });
            console.log(`üèÜ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
        } catch (achievementError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', achievementError);
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        }

        await client.query('COMMIT');

        // üìä –í–û–ó–í–†–ê–©–ê–ï–ú –†–ê–°–®–ò–†–ï–ù–ù–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ
        const responseData = {
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω',
            userId: newUser.id,
            token,
            user: {
                id: newUser.id,
                username: newUser.username,
                email: email,
                role: newUser.role
            },
            emailSent: emailSent,
            referralSuccess: !!referrerId,
            tournamentJoined: !!(tournamentId && referrerId)
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ email —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ
        if (!emailSent && process.env.NODE_ENV === 'development') {
            responseData.emailError = emailError;
        }

        console.log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (ID: ${newUser.id})${referrerId ? ` –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${referrerId}` : ''}`);
        res.status(201).json(responseData);
    } catch (err) {
        await client.query('ROLLBACK');
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
        res.status(500).json({ error: err.message });
    } finally {
        client.release();
    }
});

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        const userResult = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
        if (userResult.rows.length === 0) {
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }
        const user = userResult.rows[0];

        if (!user.password_hash) {
            return res.status(500).json({ message: '–•—ç—à –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.' });
        }

        const validPassword = await bcrypt.compare(password, user.password_hash);
        if (!validPassword) {
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        const token = jwt.sign(
            { id: user.id, role: user.role, username: user.username },
            process.env.JWT_SECRET,
            { expiresIn: '168h' }
        );

        res.json({ token });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/me', authenticateToken, async (req, res) => {
    const start = Date.now();
    try {
        const userId = req.user.id;
        const result = await pool.query(
            'SELECT id, username, email, role, steam_id, faceit_id, full_name, birth_date, steam_url, avatar_url, is_verified, cs2_premier_rank ' +
            'FROM users WHERE id = $1',
            [userId]
        );
        if (result.rows.length === 0) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ö–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–∞—Ä–∏–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –º–µ—Ç—Ä–∏–∫–∏
        res.set('Cache-Control', 'private, max-age=30, stale-while-revalidate=60');
        res.set('Vary', 'Authorization');
        try {
            res.set('ETag', `W/"user-${userId}-${result.rows[0].username || ''}-${result.rows[0].avatar_url || ''}"`);
            res.set('X-Response-Time', `${Date.now() - start}ms`);
        } catch (_) {}

        return res.json(result.rows[0]);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ /me:', err);
        res.status(500).json({ error: err.message });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Steam (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞)
router.get('/steam', (req, res) => {
    console.log('–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Steam');
    const baseUrl = process.env.SERVER_URL || process.env.REACT_APP_API_URL || 'http://localhost:3000';
    const steamLoginUrl = `https://steamcommunity.com/openid/login?openid.ns=http://specs.openid.net/auth/2.0&openid.mode=checkid_setup&openid.return_to=${baseUrl}/api/users/steam-callback&openid.realm=${baseUrl}&openid.identity=http://specs.openid.net/auth/2.0/identifier_select&openid.claimed_id=http://specs.openid.net/auth/2.0/identifier_select`;
    res.redirect(steamLoginUrl);
});

// Callback –¥–ª—è Steam OpenID
router.get('/steam-callback', async (req, res) => {
    try {
        console.log('Steam callback query:', req.query);
        const openidParams = req.query;

        const checkAuthUrl = 'https://steamcommunity.com/openid/login';
        const authParams = {
            ...openidParams,
            'openid.mode': 'check_authentication'
        };
        console.log('Checking Steam authentication with params:', authParams);
        const response = await axios.get(checkAuthUrl, { params: authParams });
        console.log('Steam auth response:', response.data);
        const isValid = response.data.includes('is_valid:true');

        if (!isValid) {
            console.error('Steam authentication failed');
            return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Steam' });
        }

        const steamId = openidParams['openid.claimed_id'].split('/').pop();
        console.log('Extracted Steam ID:', steamId);

        // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ Trust Score
        const { verifyUserSteamAccount, needsTrustScoreRecheck } = require('../services/antiCheat');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º Steam ID
        const existingUser = await pool.query('SELECT * FROM users WHERE steam_id = $1', [steamId]);
        console.log('Existing user with steam_id:', existingUser.rows);

        if (existingUser.rows.length > 0) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const user = existingUser.rows[0];
            
            // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (user.is_banned) {
                console.log('‚ùå User is banned, rejecting login');
                return res.redirect(`https://1337community.com/auth-error?reason=banned&message=${encodeURIComponent(user.ban_reason || 'Your account has been banned')}`);
            }
            
            // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º Trust Score —Ä–∞–∑ –≤ 7 –¥–Ω–µ–π
            const needsRecheck = await needsTrustScoreRecheck(user.id);
            
            if (needsRecheck) {
                console.log('üîç Trust Score recheck required for user:', user.id);
                const trustResult = await verifyUserSteamAccount(steamId, user.id);
                
                if (trustResult.action === 'HARD_BAN') {
                    // –ë–∞–Ω–∏–º –∞–∫–∫–∞—É–Ω—Ç
                    await pool.query(
                        'UPDATE users SET is_banned = true, ban_reason = $1, banned_at = NOW() WHERE id = $2',
                        [trustResult.reason, user.id]
                    );
                    console.log('‚ùå User banned due to Trust Score:', user.id);
                    return res.redirect(`https://1337community.com/auth-error?reason=trust_score&message=${encodeURIComponent(trustResult.reason)}`);
                }
                
                console.log(`‚úÖ Trust Score OK: ${trustResult.score}/100 (${trustResult.action})`);
            }
            
            // –°–æ–∑–¥–∞–µ–º JWT –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
            const token = jwt.sign(
                { id: user.id, role: user.role, username: user.username },
                process.env.JWT_SECRET,
                { expiresIn: '168h' }
            );
            console.log('User exists, redirecting with token:', token);
            return res.redirect(`https://1337community.com/auth-callback?token=${token}`);
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –ü—Ä–æ–≤–µ—Ä—è–µ–º Trust Score –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞
            console.log('üõ°Ô∏è New user registration, checking Trust Score...');
            const trustResult = await verifyUserSteamAccount(steamId);
            
            if (trustResult.action === 'HARD_BAN') {
                console.log('‚ùå Registration blocked due to Trust Score:', trustResult.reason);
                return res.redirect(`https://1337community.com/auth-error?reason=vac_ban&message=${encodeURIComponent(trustResult.reason || 'Your Steam account is not eligible for registration')}`);
            }
            
            if (trustResult.action === 'SOFT_BAN') {
                console.log('‚ö†Ô∏è Registration flagged for review:', trustResult.reason);
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é (email, SMS –∏ —Ç.–¥.)
                // –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            }
            
            console.log(`‚úÖ Trust Score OK for new user: ${trustResult.score}/100 (${trustResult.action})`);
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–∑ Steam
            const apiKey = process.env.STEAM_API_KEY;
            const steamUserResponse = await axios.get(`https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=${apiKey}&steamids=${steamId}`);
            const steamNickname = steamUserResponse.data.response.players[0].personaname;
            const steamAvatarUrl = steamUserResponse.data.response.players[0].avatarfull;
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∏–∫–Ω–µ–π–º–æ–º –∏ Steam ID
            const newUserResult = await pool.query(
                'INSERT INTO users (username, steam_id, steam_url, avatar_url) VALUES ($1, $2, $3, $4) RETURNING id, username, role',
                [steamNickname, steamId, `https://steamcommunity.com/profiles/${steamId}`, steamAvatarUrl]
            );
            
            const newUser = newUserResult.rows[0];
            
            // üõ°Ô∏è –ê–ù–¢–ò–ß–ò–¢: –°–æ—Ö—Ä–∞–Ω—è–µ–º Trust Score –≤ –ë–î
            await verifyUserSteamAccount(steamId, newUser.id);
            console.log('‚úÖ Trust Score saved for new user:', newUser.id);
            
            // –°–æ–∑–¥–∞–µ–º JWT –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const token = jwt.sign(
                { id: newUser.id, role: newUser.role, username: newUser.username },
                process.env.JWT_SECRET,
                { expiresIn: '168h' }
            );
            
            console.log('Created new user with Steam profile, redirecting with token:', newUser);
            return res.redirect(`https://1337community.com/auth-callback?token=${token}`);
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ steam-callback:', err);
        return res.redirect(`https://1337community.com/auth-error?message=${encodeURIComponent(err.message)}`);
    }
});

// –ü—Ä–∏–≤—è–∑–∫–∞ Steam ID
router.post('/link-steam', authenticateToken, async (req, res) => {
    const { steamId } = req.body;

    if (!steamId) {
        console.error('No steamId provided in /link-steam');
        return res.status(400).json({ message: 'Steam ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    try {
        console.log('Linking Steam ID:', steamId, 'to user:', req.user.id);
        const existingSteamUser = await pool.query('SELECT * FROM users WHERE steam_id = $1', [steamId]);
        if (existingSteamUser.rows.length > 0 && existingSteamUser.rows[0].id !== req.user.id) {
            console.error('Steam ID already linked to another user:', existingSteamUser.rows[0].id);
            return res.status(400).json({ error: '–≠—Ç–æ—Ç Steam ID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' });
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º —á–µ—Ä–µ–∑ Steam API –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ
        let steamNickname = null;
        try {
            const apiKey = process.env.STEAM_API_KEY;
            if (apiKey) {
                const response = await axios.get(`https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=${apiKey}&steamids=${steamId}`);
                if (response.data?.response?.players?.length > 0) {
                    steamNickname = response.data.response.players[0].personaname;
                    console.log(`–ü–æ–ª—É—á–µ–Ω Steam –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}: "${steamNickname}"`);
                }
            }
        } catch (apiError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Steam –Ω–∏–∫–Ω–µ–π–º –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ:', apiError.message);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º Steam –¥–∞–Ω–Ω—ã–µ –≤ –ë–î (–≤–∫–ª—é—á–∞—è –Ω–∏–∫–Ω–µ–π–º –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏)
        await pool.query(
            'UPDATE users SET steam_id = $1, steam_url = $2, steam_nickname = $3 WHERE id = $4',
            [steamId, `https://steamcommunity.com/profiles/${steamId}`, steamNickname, req.user.id]
        );
        console.log('Steam ID linked successfully to user:', req.user.id);

        res.json({ message: 'Steam —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Steam:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å Steam' });
    }
});

// –æ—Ç–≤—è–∑–∫–∞ Steam ID
router.post('/unlink-steam', authenticateToken, async (req, res) => {
    try {
        await pool.query('UPDATE users SET steam_id = NULL, steam_url = NULL, steam_nickname = NULL WHERE id = $1', [req.user.id]);
        res.json({ message: 'Steam –æ—Ç–≤—è–∑–∞–Ω' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ Steam:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å Steam' });
    }
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
router.post('/update-username', authenticateToken, async (req, res) => {
    const { username } = req.body;

    if (!username) {
        return res.status(400).json({ message: '–ù–∏–∫–Ω–µ–π–º –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    try {
        const usernameCheck = await pool.query('SELECT * FROM users WHERE username = $1 AND id != $2', [username, req.user.id]);
        if (usernameCheck.rows.length > 0) {
            return res.status(400).json({ message: '–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç' });
        }

        await pool.query('UPDATE users SET username = $1 WHERE id = $2', [username, req.user.id]);
        res.json({ message: '–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/update-email', authenticateToken, async (req, res) => {
    const { email } = req.body;

    if (!email) {
        return res.status(400).json({ message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        return res.status(400).json({ error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
    }

    try {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${req.user.id}`);
        console.log(`üìß –ù–æ–≤—ã–π email: ${email}`);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const currentUserResult = await pool.query(
            'SELECT id, username, email, steam_id, faceit_id FROM users WHERE id = $1',
            [req.user.id]
        );

        if (currentUserResult.rows.length === 0) {
            console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const currentUser = currentUserResult.rows[0];
        console.log(`üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`, {
            id: currentUser.id,
            username: currentUser.username,
            currentEmail: currentUser.email,
            steamId: currentUser.steam_id,
            faceitId: currentUser.faceit_id
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ email –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å email...');
        const emailCheck = await pool.query(
            'SELECT id, username, email FROM users WHERE email = $1 AND id != $2',
            [email, req.user.id]
        );

        if (emailCheck.rows.length > 0) {
            console.warn('‚ö†Ô∏è Email —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', emailCheck.rows[0]);
            return res.status(400).json({ error: '–≠—Ç–æ—Ç email —É–∂–µ –∑–∞–Ω—è—Ç' });
        }

        console.log('‚úÖ Email —Å–≤–æ–±–æ–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');

        // –û–±–Ω–æ–≤–ª—è–µ–º email –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const updateResult = await pool.query(
            'UPDATE users SET email = $1, is_verified = FALSE WHERE id = $2 RETURNING id, username, email, is_verified',
            [email, req.user.id]
        );

        if (updateResult.rows.length === 0) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å email - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const updatedUser = updateResult.rows[0];
        console.log('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
            id: updatedUser.id,
            username: updatedUser.username,
            newEmail: updatedUser.email,
            isVerified: updatedUser.is_verified
        });

        res.json({ 
            message: 'Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            user: {
                email: updatedUser.email,
                isVerified: updatedUser.is_verified
            }
        });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email:', err);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å email';
        let errorDetails = {};

        if (err.code === '23505') {
            // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            errorMessage = '–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è';
            errorDetails = { duplicateKey: true };
        } else if (err.code === '23503') {
            // –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞
            errorMessage = '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö';
            errorDetails = { foreignKeyViolation: true };
        } else if (err.code === '23502') {
            // –ù–∞—Ä—É—à–µ–Ω–∏–µ NOT NULL
            errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è';
            errorDetails = { notNull: true };
        } else if (err.code === '23514') {
            // –ù–∞—Ä—É—à–µ–Ω–∏–µ CHECK constraint
            errorMessage = '–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º';
            errorDetails = { checkConstraint: true };
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        if (process.env.NODE_ENV === 'development') {
            errorDetails.sqlCode = err.code;
            errorDetails.sqlMessage = err.message;
        }

        res.status(500).json({ 
            error: errorMessage,
            details: errorDetails
        });
    }
});

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/change-password', authenticateToken, async (req, res) => {
    const { oldPassword, newPassword, confirmPassword } = req.body;

    if (!oldPassword || !newPassword || !confirmPassword) {
        return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    if (newPassword !== confirmPassword) {
        return res.status(400).json({ message: '–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç' });
    }

    if (newPassword.length < 6) {
        return res.status(400).json({ message: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await pool.query('SELECT * FROM users WHERE id = $1', [req.user.id]);
        if (userResult.rows.length === 0) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const user = userResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å
        if (!user.password_hash) {
            return res.status(400).json({ message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' });
        }

        const validOldPassword = await bcrypt.compare(oldPassword, user.password_hash);
        if (!validOldPassword) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å' });
        }

        // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        const hashedNewPassword = await bcrypt.hash(newPassword, 10);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await pool.query('UPDATE users SET password_hash = $1 WHERE id = $2', [hashedNewPassword, req.user.id]);

        res.json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ Steam
router.get('/steam-nickname', authenticateToken, async (req, res) => {
    try {
        const userResult = await pool.query('SELECT steam_id, steam_nickname FROM users WHERE id = $1', [req.user.id]);
        const { steam_id: steamId, steam_nickname: cachedNickname } = userResult.rows[0];

        if (!steamId) {
            return res.status(400).json({ error: 'Steam ID –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω' });
        }

        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º —á–µ—Ä–µ–∑ Steam API
            const apiKey = process.env.STEAM_API_KEY;
            const response = await axios.get(`https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=${apiKey}&steamids=${steamId}`);
            const steamNickname = response.data.response.players[0].personaname;

            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º —á–µ—Ä–µ–∑ API - –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            if (steamNickname && steamNickname !== cachedNickname) {
                console.log(`–û–±–Ω–æ–≤–ª—è–µ–º Steam –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}: "${cachedNickname}" -> "${steamNickname}"`);
                await pool.query('UPDATE users SET steam_nickname = $1 WHERE id = $2', [steamNickname, req.user.id]);
            }

            res.json({ steamNickname });
        } catch (apiError) {
            console.log('Steam API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:', apiError.message);
            
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if (cachedNickname) {
                res.json({ steamNickname: cachedNickname });
            } else {
                // –ï—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ—Ç –¥–∞–∂–µ –≤ –∫—ç—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                res.status(500).json({ error: 'Steam API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ' });
            }
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ Steam:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º Steam' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ FACEit
router.get('/faceit-info', authenticateToken, async (req, res) => {
    try {
        const userResult = await pool.query('SELECT faceit_id, faceit_elo FROM users WHERE id = $1', [req.user.id]);
        const { faceit_id: faceitId, faceit_elo: currentFaceitElo } = userResult.rows[0];

        if (!faceitId) {
            return res.status(400).json({ error: 'FACEit ID –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω' });
        }

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º FACEIT API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const playerResponse = await axios.get(`https://open.faceit.com/data/v4/players/${faceitId}`, {
                headers: {
                    'Authorization': `Bearer ${process.env.FACEIT_API_KEY}`
                }
            });
            
            const faceitNickname = playerResponse.data.nickname;
            const faceitUrl = `https://www.faceit.com/ru/players/${faceitNickname}`;
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ELO –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
            const newElo = playerResponse.data.games?.cs2?.faceit_elo || playerResponse.data.games?.csgo?.faceit_elo || 0;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ ELO
            if (newElo !== currentFaceitElo && newElo > 0) {
                console.log(`–û–±–Ω–æ–≤–ª—è–µ–º FACEIT ELO –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}: ${currentFaceitElo} -> ${newElo}`);
                // –û–±–Ω–æ–≤–ª—è–µ–º ELO –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await pool.query('UPDATE users SET faceit_elo = $1 WHERE id = $2', [newElo, req.user.id]);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CS2 (–∏–≥—Ä–∞ —Å ID csgo –≤ FACEIT API)
            try {
                const statsResponse = await axios.get(`https://open.faceit.com/data/v4/players/${faceitId}/stats/cs2`, {
                    headers: {
                        'Authorization': `Bearer ${process.env.FACEIT_API_KEY}`
                    }
                });
                
                // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ FACEIT
                const userData = {
                    faceitNickname,
                    faceitUrl,
                    elo: newElo,
                    level: playerResponse.data.games?.cs2?.skill_level || playerResponse.data.games?.csgo?.skill_level || 0,
                    statsFrom: 'cs2'
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
                if (statsResponse.data && statsResponse.data.lifetime) {
                    userData.stats = statsResponse.data.lifetime;
                }
                
                res.json(userData);
            } catch (cs2Err) {
                console.log('CS2 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º CSGO...');
                try {
                    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CS:GO –µ—Å–ª–∏ CS2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                    const statsResponse = await axios.get(`https://open.faceit.com/data/v4/players/${faceitId}/stats/csgo`, {
                        headers: {
                            'Authorization': `Bearer ${process.env.FACEIT_API_KEY}`
                        }
                    });
                    
                    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ FACEIT
                    const userData = {
                        faceitNickname,
                        faceitUrl,
                        elo: newElo,
                        level: playerResponse.data.games?.csgo?.skill_level || playerResponse.data.games?.cs2?.skill_level || 0,
                        statsFrom: 'csgo'
                    };
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
                    if (statsResponse.data && statsResponse.data.lifetime) {
                        userData.stats = statsResponse.data.lifetime;
                    }
                    
                    res.json(userData);
                } catch (csgoErr) {
                    console.log('–ù–∏ CS2, –Ω–∏ CSGO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    // –ï—Å–ª–∏ API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ID —Å –±–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π
                    res.json({ 
                        faceitNickname: faceitNickname || faceitId, 
                        faceitUrl: `https://www.faceit.com/ru/players/${faceitNickname || faceitId}`,
                        elo: newElo,
                        level: playerResponse.data.games?.cs2?.skill_level || playerResponse.data.games?.csgo?.skill_level || 0,
                        statsFrom: null
                    });
                }
            }
        } catch (apiErr) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å FACEIT API:', apiErr);
            // –ï—Å–ª–∏ API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ID —Å –±–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π –∏ —Ç–µ–∫—É—â–∏–π ELO –∏–∑ –±–∞–∑—ã
            res.json({ 
                faceitNickname: faceitId, 
                faceitUrl: `https://www.faceit.com/ru/players/${faceitId}`,
                elo: currentFaceitElo || 0,
                level: 0,
                statsFrom: null
            });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ FACEIT:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ FACEIT' });
    }
});

// –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è FACEit (–∑–∞–≥–ª—É—à–∫–∞)
router.post('/link-faceit', authenticateToken, async (req, res) => {
    const { faceitId } = req.body;

    if (!faceitId) {
        return res.status(400).json({ message: 'FACEit ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    try {
        const result = await pool.query(
            'UPDATE users SET faceit_id = $1 WHERE id = $2 RETURNING faceit_id',
            [faceitId, req.user.id]
        );
        res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å FACEit —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω', faceitId: result.rows[0].faceit_id });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ FACEit:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å FACEit –ø—Ä–æ—Ñ–∏–ª—å' });
    }
});

// –û—Ç–≤—è–∑–∫–∞ FACEIT ID
router.post('/unlink-faceit', authenticateToken, async (req, res) => {
    try {
        await pool.query('UPDATE users SET faceit_id = NULL WHERE id = $1', [req.user.id]);
        res.json({ message: 'FACEIT –æ—Ç–≤—è–∑–∞–Ω' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ FACEIT:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å FACEIT' });
    }
});

// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
router.post('/verify', authenticateToken, async (req, res) => {
    const { fullName, birthDate, avatarUrl } = req.body;

    if (!fullName || !birthDate) {
        return res.status(400).json({ message: '–§–ò–û –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        const result = await pool.query(
            'UPDATE users SET full_name = $1, birth_date = $2, avatar_url = $3, is_verified = TRUE WHERE id = $4 RETURNING full_name, birth_date, avatar_url, is_verified',
            [fullName, birthDate, avatarUrl || null, req.user.id]
        );
        res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω', user: result.rows[0] });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/stats', authenticateToken, async (req, res) => {
    try {
        const statsResult = await pool.query(
            'SELECT t.name, t.game, uts.result, uts.wins, uts.losses, uts.is_team ' +
            'FROM user_tournament_stats uts ' +
            'JOIN tournaments t ON uts.tournament_id = t.id ' +
            'WHERE uts.user_id = $1',
            [req.user.id]
        );

        const stats = statsResult.rows;
        const soloStats = stats.filter(s => !s.is_team);
        const teamStats = stats.filter(s => s.is_team);

        const soloWins = soloStats.reduce((sum, s) => sum + (s.wins || 0), 0);
        const soloLosses = soloStats.reduce((sum, s) => sum + (s.losses || 0), 0);
        const teamWins = teamStats.reduce((sum, s) => sum + (s.wins || 0), 0);
        const teamLosses = teamStats.reduce((sum, s) => sum + (s.losses || 0), 0);

        const soloWinRate = soloWins + soloLosses > 0 ? (soloWins / (soloWins + soloLosses)) * 100 : 0;
        const teamWinRate = teamWins + teamLosses > 0 ? (teamWins / (teamWins + teamLosses)) * 100 : 0;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
        const gameStats = {};
        stats.forEach(stat => {
            if (!gameStats[stat.game]) {
                gameStats[stat.game] = {
                    solo: { wins: 0, losses: 0 },
                    team: { wins: 0, losses: 0 }
                };
            }
            if (stat.is_team) {
                gameStats[stat.game].team.wins += (stat.wins || 0);
                gameStats[stat.game].team.losses += (stat.losses || 0);
            } else {
                gameStats[stat.game].solo.wins += (stat.wins || 0);
                gameStats[stat.game].solo.losses += (stat.losses || 0);
            }
        });

        res.json({
            tournaments: stats,
            solo: { wins: soloWins, losses: soloLosses, winRate: soloWinRate.toFixed(2) },
            team: { wins: teamWins, losses: teamLosses, winRate: teamWinRate.toFixed(2) },
            byGame: gameStats
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
router.post('/recalculate-tournament-stats', authenticateToken, async (req, res) => {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_tournament_stats
        const tableCheckResult = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'user_tournament_stats'
            );
        `);
        
        if (!tableCheckResult.rows[0].exists) {
            console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ user_tournament_stats –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return res.status(500).json({ 
                error: '–¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                needsTableCreation: true
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –≥–¥–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userTournamentsResult = await pool.query(`
            SELECT DISTINCT t.id, t.name, t.game, t.participant_type, t.format, t.status
            FROM tournaments t
            WHERE t.status = 'completed' 
            AND (
                (t.participant_type = 'solo' AND EXISTS(
                    SELECT 1 FROM tournament_participants tp 
                    WHERE tp.tournament_id = t.id AND tp.user_id = $1
                )) OR
                (t.participant_type = 'team' AND EXISTS(
                    SELECT 1 FROM tournament_teams tt 
                    JOIN tournament_team_members ttm ON tt.id = ttm.team_id 
                    WHERE tt.tournament_id = t.id AND ttm.user_id = $1
                ))
            )
        `, [req.user.id]);

        let updatedTournaments = 0;
        let skippedTournaments = 0;
        let errors = [];

        for (const tournament of userTournamentsResult.rows) {
            try {
                console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ä–Ω–∏—Ä: ${tournament.name} (ID: ${tournament.id})`);
                
                const result = await calculateTournamentResult(tournament.id, req.user.id, tournament.participant_type);
                
                if (result) {
                    // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô UPSERT –≤–º–µ—Å—Ç–æ DELETE+INSERT
                    await pool.query(`
                        INSERT INTO user_tournament_stats (user_id, tournament_id, result, wins, losses, is_team)
                        VALUES ($1, $2, $3, $4, $5, $6)
                        ON CONFLICT (user_id, tournament_id) 
                        DO UPDATE SET 
                            result = EXCLUDED.result,
                            wins = EXCLUDED.wins,
                            losses = EXCLUDED.losses,
                            is_team = EXCLUDED.is_team,
                            updated_at = CURRENT_TIMESTAMP
                    `, [
                        req.user.id,
                        tournament.id, 
                        result.place,
                        result.wins || 0,
                        result.losses || 0,
                        tournament.participant_type === 'team'
                    ]);
                    
                    updatedTournaments++;
                    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournament.name}: ${result.place} (${result.wins}–ü/${result.losses}–ü)`);
                } else {
                    skippedTournaments++;
                    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç—É—Ä–Ω–∏—Ä ${tournament.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç`);
                }
            } catch (tournamentError) {
                errors.push({
                    tournament: tournament.name,
                    error: tournamentError.message
                });
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournament.name}:`, tournamentError.message);
            }
        }

        const totalTournaments = userTournamentsResult.rows.length;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        res.json({ 
            success: true,
            message: `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è ${totalTournaments} —Ç—É—Ä–Ω–∏—Ä–æ–≤`,
            details: {
                total: totalTournaments,
                updated: updatedTournaments,
                skipped: skippedTournaments,
                errors: errors.length
            },
            errors: errors.length > 0 ? errors : undefined,
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            statusMessage: errors.length === 0 
                ? `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedTournaments} –∏–∑ ${totalTournaments} —Ç—É—Ä–Ω–∏—Ä–æ–≤`
                : `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedTournaments} –∏–∑ ${totalTournaments}, –æ—à–∏–±–æ–∫: ${errors.length}`
        });
    } catch (err) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', err);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É';
        let needsTableCreation = false;
        
        if (err.message.includes('user_tournament_stats') && err.message.includes('does not exist')) {
            errorMessage = '–¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞';
            needsTableCreation = true;
        } else if (err.code === '23505') { // Duplicate key
            errorMessage = '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏';
        } else if (err.code === '23503') { // Foreign key violation
            errorMessage = '–°—Å—ã–ª–æ—á–Ω–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∞';
        }
        
        res.status(500).json({ 
            error: errorMessage,
            needsTableCreation,
            sqlErrorCode: err.code,
            development: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
async function calculateTournamentResult(tournamentId, userId, participantType) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
        const matchesResult = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round DESC',
            [tournamentId]
        );
        
        const matches = matchesResult.rows;
        if (matches.length === 0) return null;

        // –ü–æ–ª—É—á–∞–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ (team –∏–ª–∏ participant)
        let participantId;
        if (participantType === 'solo') {
            const participantResult = await pool.query(
                'SELECT id FROM tournament_participants WHERE tournament_id = $1 AND user_id = $2',
                [tournamentId, userId]
            );
            if (participantResult.rows.length === 0) return null;
            participantId = participantResult.rows[0].id;
        } else {
            const teamResult = await pool.query(`
                SELECT tt.id 
                FROM tournament_teams tt
                JOIN tournament_team_members ttm ON tt.id = ttm.team_id
                WHERE tt.tournament_id = $1 AND ttm.user_id = $2
            `, [tournamentId, userId]);
            if (teamResult.rows.length === 0) return null;
            participantId = teamResult.rows[0].id;
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á
        const finalMatch = matches.find(match => {
            const maxRound = Math.max(...matches.map(m => m.round || 0));
            return (match.round === maxRound && match.bracket_type !== 'placement' && match.winner_team_id !== null);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —Ç—É—Ä–Ω–∏—Ä (1 –º–µ—Å—Ç–æ)
        if (finalMatch && finalMatch.winner_team_id === participantId) {
            const wins = matches.filter(m => m.winner_team_id === participantId).length;
            const losses = matches.filter(m => 
                (m.team1_id === participantId || m.team2_id === participantId) && 
                m.winner_team_id !== participantId && m.winner_team_id !== null
            ).length;
            
            return { place: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å', wins, losses };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—á –∑–∞ 3 –º–µ—Å—Ç–æ
        const thirdPlaceMatch = matches.find(m => m.bracket_type === 'placement');
        if (thirdPlaceMatch) {
            if (thirdPlaceMatch.winner_team_id === participantId) {
                const wins = matches.filter(m => m.winner_team_id === participantId).length;
                const losses = matches.filter(m => 
                    (m.team1_id === participantId || m.team2_id === participantId) && 
                    m.winner_team_id !== participantId && m.winner_team_id !== null
                ).length;
                
                return { place: '3 –º–µ—Å—Ç–æ', wins, losses };
            } else if (thirdPlaceMatch.team1_id === participantId || thirdPlaceMatch.team2_id === participantId) {
                const wins = matches.filter(m => m.winner_team_id === participantId).length;
                const losses = matches.filter(m => 
                    (m.team1_id === participantId || m.team2_id === participantId) && 
                    m.winner_team_id !== participantId && m.winner_team_id !== null
                ).length;
                
                return { place: '4 –º–µ—Å—Ç–æ', wins, losses };
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—à–µ–ª –ª–∏ –¥–æ —Ñ–∏–Ω–∞–ª–∞ (2 –º–µ—Å—Ç–æ)
        if (finalMatch && (finalMatch.team1_id === participantId || finalMatch.team2_id === participantId)) {
            const wins = matches.filter(m => m.winner_team_id === participantId).length;
            const losses = matches.filter(m => 
                (m.team1_id === participantId || m.team2_id === participantId) && 
                m.winner_team_id !== participantId && m.winner_team_id !== null
            ).length;
            
            return { place: '2 –º–µ—Å—Ç–æ', wins, losses };
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–π —Å—Ç–∞–¥–∏–∏ –≤—ã–±—ã–ª
        const playerMatches = matches.filter(m => 
            m.team1_id === participantId || m.team2_id === participantId
        ).sort((a, b) => (b.round || 0) - (a.round || 0));

        if (playerMatches.length > 0) {
            const lastMatch = playerMatches[0];
            const wins = matches.filter(m => m.winner_team_id === participantId).length;
            const losses = matches.filter(m => 
                (m.team1_id === participantId || m.team2_id === participantId) && 
                m.winner_team_id !== participantId && m.winner_team_id !== null
            ).length;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é –≤—ã–±—ã–≤–∞–Ω–∏—è
            const maxRound = Math.max(...matches.map(m => m.round || 0));
            const roundsFromEnd = maxRound - (lastMatch.round || 0);
            
            let stage;
            if (roundsFromEnd === 0) stage = '–§–∏–Ω–∞–ª–∏—Å—Ç';
            else if (roundsFromEnd === 1) stage = '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª';
            else if (roundsFromEnd === 2) stage = '1/4 —Ñ–∏–Ω–∞–ª–∞';
            else if (roundsFromEnd === 3) stage = '1/8 —Ñ–∏–Ω–∞–ª–∞';
            else stage = `${roundsFromEnd + 1} —Ä–∞—É–Ω–¥`;

            return { place: stage, wins, losses };
        }

        return { place: '–£—á–∞—Å—Ç–Ω–∏–∫', wins: 0, losses: 0 };
        
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        return null;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/match-history', authenticateToken, async (req, res) => {
    try {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π
        const matchHistoryResult = await pool.query(`
            SELECT 
                m.id,
                t.completed_at as date,
                t.name as tournament_name,
                t.id as tournament_id,
                t.game as discipline,
                m.score1,
                m.score2,
                CASE 
                    WHEN m.winner_team_id = m.team1_id THEN 
                        CASE WHEN tp1.user_id = $1 OR EXISTS(
                            SELECT 1 FROM tournament_team_members ttm 
                            WHERE ttm.team_id = m.team1_id AND ttm.user_id = $1
                        ) THEN 'win' ELSE 'loss' END
                    WHEN m.winner_team_id = m.team2_id THEN 
                        CASE WHEN tp2.user_id = $1 OR EXISTS(
                            SELECT 1 FROM tournament_team_members ttm 
                            WHERE ttm.team_id = m.team2_id AND ttm.user_id = $1
                        ) THEN 'win' ELSE 'loss' END
                    ELSE 'unknown'
                END as result,
                COALESCE(
                    CASE WHEN tp1.user_id = $1 THEN COALESCE(tp2.name, tt2.name)
                         WHEN tp2.user_id = $1 THEN COALESCE(tp1.name, tt1.name)
                         ELSE '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫' END,
                    '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫'
                ) as opponent,
                CONCAT(COALESCE(m.score1, 0), ':', COALESCE(m.score2, 0)) as score
            FROM matches m
            JOIN tournaments t ON m.tournament_id = t.id
            LEFT JOIN tournament_participants tp1 ON m.team1_id = tp1.id
            LEFT JOIN tournament_participants tp2 ON m.team2_id = tp2.id
            LEFT JOIN tournament_teams tt1 ON m.team1_id = tt1.id
            LEFT JOIN tournament_teams tt2 ON m.team2_id = tt2.id
            LEFT JOIN tournament_team_members ttm1 ON tt1.id = ttm1.team_id
            LEFT JOIN tournament_team_members ttm2 ON tt2.id = ttm2.team_id
            WHERE 
                (tp1.user_id = $1 OR tp2.user_id = $1 OR ttm1.user_id = $1 OR ttm2.user_id = $1)
                AND m.winner_team_id IS NOT NULL
            ORDER BY m.id DESC
            LIMIT 100
        `, [req.user.id]);

        res.json(matchHistoryResult.rows);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π:', err);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        res.json([]);
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/tournaments', authenticateToken, async (req, res) => {
    try {
        console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –≥–¥–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–∑ user_tournament_stats
        const tournamentsQuery = `
            SELECT DISTINCT 
                t.*,
                uts.result as tournament_result,
                uts.wins,
                uts.losses,
                uts.is_team,
                uts.updated_at as stats_updated_at,
                CASE 
                    WHEN t.participant_type = 'solo' THEN 'solo'
                    WHEN t.participant_type = 'team' THEN 'team'
                    ELSE 'unknown'
                END as participation_type
            FROM tournaments t
            LEFT JOIN (
                -- –î–ª—è —Å–æ–ª–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤
                SELECT DISTINCT tp.tournament_id, tp.user_id
                FROM tournament_participants tp
                WHERE tp.user_id = $1
                UNION
                -- –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ 
                SELECT DISTINCT tt.tournament_id, ttm.user_id
                FROM tournament_teams tt
                JOIN tournament_team_members ttm ON tt.id = ttm.team_id
                WHERE ttm.user_id = $1
            ) user_participation ON t.id = user_participation.tournament_id
            LEFT JOIN user_tournament_stats uts ON (
                uts.tournament_id = t.id AND 
                uts.user_id = $1
            )
            WHERE user_participation.tournament_id IS NOT NULL
            ORDER BY t.start_date DESC
        `;
        
        const result = await pool.query(tournamentsQuery, [req.user.id]);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        result.rows.forEach(tournament => {
            console.log(`üéØ –¢—É—Ä–Ω–∏—Ä "${tournament.name}" (${tournament.status}): —Ä–µ–∑—É–ª—å—Ç–∞—Ç = "${tournament.tournament_result || '–ù–µ —É–∫–∞–∑–∞–Ω'}", –æ–±–Ω–æ–≤–ª–µ–Ω: ${tournament.stats_updated_at || '–Ω–∏–∫–æ–≥–¥–∞'}`);
        });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const processedTournaments = result.rows.map(tournament => ({
            ...tournament,
            // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            tournament_result: tournament.tournament_result || (
                tournament.status === 'completed' ? '–ù–µ —É–∫–∞–∑–∞–Ω' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
            ),
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            has_stats: !!tournament.tournament_result,
            stats_last_updated: tournament.stats_updated_at,
            win_rate: tournament.wins !== null && tournament.losses !== null 
                ? tournament.wins + tournament.losses > 0 
                    ? Math.round((tournament.wins / (tournament.wins + tournament.losses)) * 100)
                    : 0
                : null
        }));
        
        res.json(processedTournaments);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤',
            details: process.env.NODE_ENV === 'development' ? err.message : undefined
        });
    }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ email
router.post('/verify-email', authenticateToken, async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const userResult = await pool.query(
            'SELECT email FROM users WHERE id = $1',
            [req.user.id]
        );
        
        if (userResult.rows.length === 0) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const email = userResult.rows[0].email;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await pool.query(
            'UPDATE users SET verification_token = $1, token_expiry = NOW() + INTERVAL \'30 minutes\' WHERE id = $2',
            [verificationCode, req.user.id]
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å)
        const { sendEmailVerificationCode } = require('../services/emailService');
        const sendResult = await sendEmailVerificationCode(email, req.user.username, verificationCode);

        if (!sendResult.success) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å –∫–æ–¥–æ–º:', sendResult.error);
            return res.status(502).json({ error: '–°–µ—Ä–≤–∏—Å –ø–æ—á—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
        }

        res.json({ message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });
    }
});

router.post('/confirm-email', authenticateToken, async (req, res) => {
    const { code } = req.body;
    
    if (!code) {
        return res.status(400).json({ message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    
    try {
        const result = await pool.query(
            'SELECT verification_token, token_expiry, email, username FROM users WHERE id = $1',
            [req.user.id]
        );
        
        if (result.rows.length === 0) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { verification_token, token_expiry, email, username } = result.rows[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞
        if (token_expiry && new Date() > new Date(token_expiry)) {
            return res.status(400).json({ message: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if (code !== verification_token) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
        await pool.query(
            'UPDATE users SET is_verified = TRUE, verification_token = NULL, token_expiry = NULL WHERE id = $1',
            [req.user.id]
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ (–æ—Ç –µ–¥–∏–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
        const { transporter: mailer } = require('../services/emailService');
        const successMailOptions = {
            from: {
                name: '1337 Community',
                address: process.env.SMTP_USER || 'noreply@1337community.com'
            },
            to: email,
            subject: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚Äî 1337 Community',
            html: `
                <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif; max-width: 600px; margin: 0 auto; background:#000; color:#fff; border:2px solid #ff0000; border-radius:12px;">
                    <div style="padding:24px; text-align:center;">
                        <h2 style="margin:0 0 8px 0;">–í–∞—à email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</h2>
                        <p style="margin:0; color:#bbb">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!</p>
                    </div>
                    <div style="padding:0 24px 24px 24px; color:#ccc;">
                        –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤.
                    </div>
                </div>
            `.trim()
        };

        await mailer.sendMail(successMailOptions);
        
        res.json({ message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email' });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Faceit –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
router.get('/link-faceit', async (req, res) => {
    try {
        const { token } = req.query;
        
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        let decoded;
        try {
            decoded = jwt.verify(token, process.env.JWT_SECRET);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', err);
            return res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }

        const clientId = process.env.FACEIT_CLIENT_ID;
        const redirectUri = process.env.FACEIT_REDIRECT_URI;

        if (!clientId || !redirectUri) {
            console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è FACEIT');
            return res.status(500).json({ error: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FACEIT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è code_verifier –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ code_challenge (S256)
        const codeVerifier = crypto.randomBytes(32).toString('hex');
        const hash = crypto.createHash('sha256').update(codeVerifier).digest();
        const codeChallenge = hash.toString('base64')
          .replace(/\+/g, '-')  // URL-safe
          .replace(/\//g, '_')
          .replace(/=+$/, '');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º state-–ø–∞—Ä–∞–º–µ—Ç—Ä, –≤–∫–ª—é—á–∞—é—â–∏–π userId
        const randomPart = crypto.randomBytes(8).toString('hex');
        const state = `${randomPart}-${decoded.id}`;

        console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏ –¥–ª—è FACEIT –ø—Ä–∏–≤—è–∑–∫–∏:');
        console.log('code_verifier:', codeVerifier.substring(0, 10) + '...');
        console.log('state:', state);
        console.log('userId:', decoded.id);

        const cookieOptions = { 
            httpOnly: true, 
            secure: true, 
            sameSite: 'none',
            maxAge: 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç
        };
        
        console.log('Cookie options:', cookieOptions);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º codeVerifier –∏ state –≤ –∫—É–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è HTTPS
        res.cookie('faceit_code_verifier', codeVerifier, cookieOptions);
        res.cookie('faceit_state', state, cookieOptions);

        const authUrl = 'https://accounts.faceit.com';
        const params = querystring.stringify({
            client_id: clientId,
            redirect_uri: redirectUri,
            response_type: 'code',
            scope: 'openid profile email membership',
            code_challenge: codeChallenge,
            code_challenge_method: 'S256',
            state: state,
            redirect_popup: 'true'
        });
        
        console.log('Redirect URL:', `${authUrl}?${params}`);
        console.log('FACEIT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', {clientId, redirectUri});
        
        res.redirect(`${authUrl}?${params}`);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ link-faceit:', err);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// Callback –¥–ª—è Faceit –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
router.get('/faceit-callback', async (req, res) => {
    const { code, state: returnedState } = req.query;
    console.log('–ü–æ–ª—É—á–µ–Ω callback –æ—Ç FACEIT:', req.query);
    console.log('Cookies –≤ –∑–∞–ø—Ä–æ—Å–µ:', req.cookies);
    
    if (!code) {
        console.error('–û—à–∏–±–∫–∞: –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return res.redirect('https://1337community.com/profile?error=no_code');
    }
    
    try {
        const savedState = req.cookies.faceit_state;
        if (!savedState || savedState !== returnedState) {
            console.error('–û—à–∏–±–∫–∞: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ state –ø–∞—Ä–∞–º–µ—Ç—Ä–∞', {
                savedState,
                returnedState
            });
            return res.redirect('https://1337community.com/profile?error=invalid_state');
        }
        
        const codeVerifier = req.cookies.faceit_code_verifier;
        if (!codeVerifier) {
            console.error('–û—à–∏–±–∫–∞: code_verifier –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—É–∫–∏');
            return res.redirect('https://1337community.com/profile?error=no_verifier');
        }

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ FACEIT...');
        
        // –û–±–º–µ–Ω –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–¥–∞–≤–∞—è code_verifier
        const tokenParams = {
            grant_type: 'authorization_code',
            code,
            redirect_uri: process.env.FACEIT_REDIRECT_URI,
            code_verifier: codeVerifier
        };
        
        const tokenResponse = await axios.post(
            'https://api.faceit.com/auth/v1/oauth/token',
            querystring.stringify(tokenParams),
            { 
                headers: { 
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Authorization': 'Basic ' + Buffer.from(
                        `${process.env.FACEIT_CLIENT_ID}:${process.env.FACEIT_CLIENT_SECRET}`
                    ).toString('base64')
                }
            }
        );
        
        const { access_token } = tokenResponse.data;
        console.log('–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é access_token
        const userInfoResponse = await axios.get(
            'https://api.faceit.com/auth/v1/resources/userinfo',
            { headers: { Authorization: `Bearer ${access_token}` } }
        );
        const faceitUser = userInfoResponse.data;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º FACEIT ID –∏ –Ω–∏–∫–Ω–µ–π–º
        const faceitId = faceitUser.sub || faceitUser.guid || faceitUser.id;
        const faceitNickname = faceitUser.nickname || faceitUser.name || faceitUser.preferred_username;
        
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è FACEIT:', faceitId, faceitNickname);
        
        // –û—á–∏—â–∞–µ–º –∫—É–∫–∏
        res.clearCookie('faceit_code_verifier', { httpOnly: true, secure: true, sameSite: 'none' });
        res.clearCookie('faceit_state', { httpOnly: true, secure: true, sameSite: 'none' });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–µ–π –≤—Ö–æ–¥–∞ –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        if (savedState.includes('-login')) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º FACEIT ID
            const existingUser = await pool.query('SELECT * FROM users WHERE faceit_id = $1', [faceitId]);
            
            if (existingUser.rows.length > 0) {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º JWT –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
                const user = existingUser.rows[0];
                const token = jwt.sign(
                    { id: user.id, role: user.role, username: user.username },
                    process.env.JWT_SECRET,
                    { expiresIn: '168h' }
                );
                console.log('Existing user found, redirecting with token:', token);
                return res.redirect(`https://1337community.com/auth-callback?token=${token}`);
            } else {
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
                console.log('Creating new user with FACEIT profile:', faceitNickname);
                
                // –ü–æ–ª—É—á–∞–µ–º ELO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ FACEIT API
                let faceitElo = 0;
                try {
                    const playerResponse = await axios.get(`https://open.faceit.com/data/v4/players/${faceitId}`, {
                        headers: {
                            'Authorization': `Bearer ${process.env.FACEIT_API_KEY}`
                        }
                    });
                    faceitElo = playerResponse.data.games?.cs2?.faceit_elo || playerResponse.data.games?.csgo?.faceit_elo || 0;
                } catch (apiErr) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ELO –∏–∑ FACEIT API:', apiErr);
                }
                
                const newUserResult = await pool.query(
                    'INSERT INTO users (username, faceit_id, faceit_elo) VALUES ($1, $2, $3) RETURNING id, username, role',
                    [faceitNickname, faceitId, faceitElo]
                );
                
                const newUser = newUserResult.rows[0];
                
                // –°–æ–∑–¥–∞–µ–º JWT –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const token = jwt.sign(
                    { id: newUser.id, role: newUser.role, username: newUser.username },
                    process.env.JWT_SECRET,
                    { expiresIn: '168h' }
                );
                
                console.log('Created new user with FACEIT profile, redirecting with token:', newUser);
                return res.redirect(`https://1337community.com/auth-callback?token=${token}`);
            }
        } else {
            // –≠—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
            const stateParts = savedState.split('-');
            const userId = stateParts[stateParts.length - 1];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ FACEIT ID –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
            const existingFaceitUser = await pool.query('SELECT * FROM users WHERE faceit_id = $1 AND id != $2', [faceitId, userId]);
            if (existingFaceitUser.rows.length > 0) {
                console.error('FACEIT ID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É');
                return res.redirect('https://1337community.com/profile?error=faceit_already_linked');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º ELO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ FACEIT API
            let faceitElo = 0;
            try {
                const playerResponse = await axios.get(`https://open.faceit.com/data/v4/players/${faceitId}`, {
                    headers: {
                        'Authorization': `Bearer ${process.env.FACEIT_API_KEY}`
                    }
                });
                faceitElo = playerResponse.data.games?.cs2?.faceit_elo || playerResponse.data.games?.csgo?.faceit_elo || 0;
            } catch (apiErr) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ELO –∏–∑ FACEIT API:', apiErr);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º faceit_id –∏ faceit_elo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await pool.query('UPDATE users SET faceit_id = $1, faceit_elo = $2 WHERE id = $3', [faceitId, faceitElo, userId]);
            console.log(`FACEit –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å ELO ${faceitElo}`);
            
            res.redirect('https://1337community.com/profile?faceit=success');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ FACEIT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err.response?.data || err.message);
        // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –æ—à–∏–±–∫–∏
        if (err.response) {
            console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π:', {
                data: err.response.data,
                status: err.response.status,
                headers: err.response.headers
            });
        }
        
        res.redirect(`https://1337community.com/auth-error?message=${encodeURIComponent(err.message)}`);
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ FACEIT (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞)
router.get('/faceit-login', (req, res) => {
    console.log('–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ FACEIT');
    const clientId = process.env.FACEIT_CLIENT_ID;
    const redirectUri = process.env.FACEIT_REDIRECT_URI; // –¥–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Faceit

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è code_verifier –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ code_challenge (S256)
    const codeVerifier = crypto.randomBytes(32).toString('hex');
    const hash = crypto.createHash('sha256').update(codeVerifier).digest();
    const codeChallenge = hash.toString('base64')
      .replace(/\+/g, '-')  // URL-safe
      .replace(/\//g, '_')
      .replace(/=+$/, '');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º state-–ø–∞—Ä–∞–º–µ—Ç—Ä —Å –ø–æ–º–µ—Ç–∫–æ–π, —á—Ç–æ —ç—Ç–æ –ª–æ–≥–∏–Ω
    const randomPart = crypto.randomBytes(8).toString('hex');
    const state = `${randomPart}-login`;

    console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏ –¥–ª—è FACEIT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    console.log('code_verifier:', codeVerifier.substring(0, 10) + '...');
    console.log('state:', state);

    const cookieOptions = { 
        httpOnly: true, 
        secure: true, 
        sameSite: 'none',
        maxAge: 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º codeVerifier –∏ state –≤ –∫—É–∫–∏
    res.cookie('faceit_code_verifier', codeVerifier, cookieOptions);
    res.cookie('faceit_state', state, cookieOptions);

    const authUrl = 'https://accounts.faceit.com';
    const params = querystring.stringify({
        client_id: clientId,
        redirect_uri: redirectUri,
        response_type: 'code',
        scope: 'openid profile email membership',
        code_challenge: codeChallenge,
        code_challenge_method: 'S256',
        state: state,
        redirect_popup: 'true'
    });
    
    console.log('FACEIT login redirect URL:', `${authUrl}?${params}`);
    
    res.redirect(`${authUrl}?${params}`);
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
router.post('/upload-avatar', authenticateToken, upload.single('avatar'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º SERVER_URL –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
        const baseUrl = process.env.NODE_ENV === 'production'
            ? process.env.SERVER_URL || 'https://1337community.com'
            : `https://${req.get('host')}`;
        const relativePath = `/uploads/avatars/${req.file.filename}`;
        const avatar_url = `${baseUrl}${relativePath}`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await pool.query(
            'UPDATE users SET avatar_url = $1 WHERE id = $2',
            [avatar_url, req.user.id]
        );

        res.json({ 
            message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
            avatar_url: avatar_url
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä' });
    }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ Steam
router.post('/set-steam-avatar', authenticateToken, async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º Steam ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await pool.query(
            'SELECT steam_id FROM users WHERE id = $1',
            [req.user.id]
        );
        
        const steamId = userResult.rows[0].steam_id;
        
        if (!steamId) {
            return res.status(400).json({ error: 'Steam –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ Steam API
        const apiKey = process.env.STEAM_API_KEY;
        const steamUserResponse = await axios.get(
            `https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=${apiKey}&steamids=${steamId}`
        );
        
        // –ü–æ–ª—É—á–∞–µ–º URL –∞–≤–∞—Ç–∞—Ä–∞
        const steamAvatarUrl = steamUserResponse.data.response.players[0].avatarfull;
        
        if (!steamAvatarUrl) {
            return res.status(404).json({ error: '–ê–≤–∞—Ç–∞—Ä Steam –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await pool.query(
            'UPDATE users SET avatar_url = $1 WHERE id = $2',
            [steamAvatarUrl, req.user.id]
        );
        
        res.json({ 
            message: '–ê–≤–∞—Ç–∞—Ä –∏–∑ Steam —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            avatar_url: steamAvatarUrl
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ Steam:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∏–∑ Steam' });
    }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ FACEIT
router.post('/set-faceit-avatar', authenticateToken, async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º FACEIT ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await pool.query(
            'SELECT faceit_id FROM users WHERE id = $1',
            [req.user.id]
        );
        
        const faceitId = userResult.rows[0].faceit_id;
        
        if (!faceitId) {
            return res.status(400).json({ error: 'FACEIT –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É' });
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º FACEIT API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const playerResponse = await axios.get(`https://open.faceit.com/data/v4/players/${faceitId}`, {
            headers: {
                'Authorization': `Bearer ${process.env.FACEIT_API_KEY}`
            }
        });
        
        // –ü–æ–ª—É—á–∞–µ–º URL –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        const faceitAvatarUrl = playerResponse.data.avatar || null;
        
        if (!faceitAvatarUrl) {
            return res.status(404).json({ error: '–ê–≤–∞—Ç–∞—Ä FACEIT –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await pool.query(
            'UPDATE users SET avatar_url = $1 WHERE id = $2',
            [faceitAvatarUrl, req.user.id]
        );
        
        res.json({ 
            message: '–ê–≤–∞—Ç–∞—Ä –∏–∑ FACEIT —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            avatar_url: faceitAvatarUrl
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ FACEIT:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∏–∑ FACEIT' });
    }
});

// –ü—É–±–ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ (–¥–ª—è —Ñ–æ—Ä–º—ã –≤—ã–±–æ—Ä–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ)
router.get('/preloaded-avatars', async (req, res) => {
    try {
        const fs = require('fs');
        const path = require('path');
        const dir = path.join(__dirname, '../uploads/avatars/preloaded');
        if (!fs.existsSync(dir)) return res.json({ avatars: [] });
        const files = fs.readdirSync(dir).filter(f => /\.(png|jpe?g|webp)$/i.test(f));
        const metaPath = path.join(dir, 'meta.json');
        let categories = {};
        try {
            if (fs.existsSync(metaPath)) {
                const raw = fs.readFileSync(metaPath, 'utf8');
                const json = JSON.parse(raw);
                if (json && typeof json === 'object' && json.categories && typeof json.categories === 'object') {
                    categories = json.categories;
                }
            }
        } catch (_) {}
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é standard)
        const list = files.map(name => ({
            filename: name,
            url: `/uploads/avatars/preloaded/${name}`,
            category: categories[name] || 'standard'
        }));
        res.json({ avatars: list });
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫:', e);
        res.status(500).json({ avatars: [] });
    }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
router.post('/set-preloaded-avatar', authenticateToken, async (req, res) => {
    try {
        const { url } = req.body;
        if (!url || typeof url !== 'string') return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL' });
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ –ø–æ–ª–Ω—ã–π URL. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.
        let stored = url;
        try {
            if (url.startsWith('http://') || url.startsWith('https://')) {
                const u = new URL(url);
                stored = u.pathname + (u.search || '');
            }
        } catch (_) {
            // –µ—Å–ª–∏ new URL —É–ø–∞–ª, –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å (–µ—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π ‚Äî –æ–∫)
        }
        if (!stored.startsWith('/uploads/avatars/preloaded/')) {
            return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É' });
        }
        await pool.query('UPDATE users SET avatar_url = $1 WHERE id = $2', [stored, req.user.id]);
        return res.json({ success: true, avatar_url: stored });
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏:', e);
        return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
router.get('/profile/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        console.log(`üîç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è)
        const userResult = await pool.query(
            'SELECT id, username, steam_id, faceit_id, steam_url, avatar_url, cs2_premier_rank, created_at FROM users WHERE id = $1',
            [userId]
        );
        
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
            found: userResult.rows.length > 0,
            rowCount: userResult.rows.length
        });
        
        if (userResult.rows.length === 0) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const user = userResult.rows[0];
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.username} (ID: ${user.id})`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user.online_status = 'offline';
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è WebSocket –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        const app = global.app || req.app;
        const connectedClients = app.get('connectedClients');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (connectedClients && connectedClients.has(userId.toString())) {
            const ws = connectedClients.get(userId.toString());
            if (ws && ws.readyState === 1) { // 1 = WebSocket.OPEN
                user.online_status = 'online';
            }
        }
        
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω Steam, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        if (user.steam_id) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –Ω–∏–∫–Ω–µ–π–º–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ)
                const steamCacheResult = await pool.query(
                    'SELECT steam_nickname, steam_nickname_updated FROM users WHERE id = $1 AND steam_nickname_updated > NOW() - INTERVAL \'1 hour\'',
                    [userId]
                );
                
                if (steamCacheResult.rows.length > 0 && steamCacheResult.rows[0].steam_nickname) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º
                    user.steam_nickname = steamCacheResult.rows[0].steam_nickname;
                } else {
                    // –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É Steam API
                    const apiKey = process.env.STEAM_API_KEY;
                    if (apiKey) {
                        const steamUserResponse = await axios.get(`https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=${apiKey}&steamids=${user.steam_id}`, {
                            timeout: 5000 // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
                        });
                        
                        if (steamUserResponse.data.response.players.length > 0) {
                            const steamNickname = steamUserResponse.data.response.players[0].personaname;
                            user.steam_nickname = steamNickname;
                            
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                            await pool.query(
                                'UPDATE users SET steam_nickname = $1, steam_nickname_updated = NOW() WHERE id = $2',
                                [steamNickname, userId]
                            );
                        }
                    }
                }
            } catch (steamErr) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ Steam:', steamErr.message);
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
                const fallbackResult = await pool.query('SELECT steam_nickname FROM users WHERE id = $1', [userId]);
                if (fallbackResult.rows.length > 0 && fallbackResult.rows[0].steam_nickname) {
                    user.steam_nickname = fallbackResult.rows[0].steam_nickname;
                }
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const statsResult = await pool.query(
            'SELECT t.name, t.game, uts.result, uts.wins, uts.losses, uts.is_team ' +
            'FROM user_tournament_stats uts ' +
            'JOIN tournaments t ON uts.tournament_id = t.id ' +
            'WHERE uts.user_id = $1',
            [userId]
        );

        const stats = statsResult.rows;
        const soloStats = stats.filter(s => !s.is_team);
        const teamStats = stats.filter(s => s.is_team);

        const soloWins = soloStats.reduce((sum, s) => sum + (s.wins || 0), 0);
        const soloLosses = soloStats.reduce((sum, s) => sum + (s.losses || 0), 0);
        const teamWins = teamStats.reduce((sum, s) => sum + (s.wins || 0), 0);
        const teamLosses = teamStats.reduce((sum, s) => sum + (s.losses || 0), 0);

        const soloWinRate = soloWins + soloLosses > 0 ? (soloWins / (soloWins + soloLosses)) * 100 : 0;
        const teamWinRate = teamWins + teamLosses > 0 ? (teamWins / (teamWins + teamLosses)) * 100 : 0;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.stats = {
            tournaments: stats,
            solo: { wins: soloWins, losses: soloLosses, winRate: soloWinRate.toFixed(2) },
            team: { wins: teamWins, losses: teamLosses, winRate: teamWinRate.toFixed(2) }
        };
        
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω Faceit, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        if (user.faceit_id) {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º FACEIT API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const playerResponse = await axios.get(`https://open.faceit.com/data/v4/players/${user.faceit_id}`, {
                    headers: {
                        'Authorization': `Bearer ${process.env.FACEIT_API_KEY}`
                    }
                });
                
                const faceitNickname = playerResponse.data.nickname;
                const faceitUrl = `https://www.faceit.com/ru/players/${faceitNickname}`;
                const faceitElo = playerResponse.data.games?.cs2?.faceit_elo || playerResponse.data.games?.csgo?.faceit_elo || 0;
                const faceitLevel = playerResponse.data.games?.cs2?.skill_level || playerResponse.data.games?.csgo?.skill_level || 0;
                
                user.faceit = {
                    faceitNickname,
                    faceitUrl,
                    elo: faceitElo,
                    level: faceitLevel
                };
                
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CS2 –∏–ª–∏ CSGO
                try {
                    const statsResponse = await axios.get(`https://open.faceit.com/data/v4/players/${user.faceit_id}/stats/cs2`, {
                        headers: {
                            'Authorization': `Bearer ${process.env.FACEIT_API_KEY}`
                        }
                    });
                    
                    if (statsResponse.data && statsResponse.data.lifetime) {
                        user.faceit.stats = statsResponse.data.lifetime;
                        user.faceit.statsFrom = 'cs2';
                    }
                } catch (cs2Err) {
                    try {
                        const statsResponse = await axios.get(`https://open.faceit.com/data/v4/players/${user.faceit_id}/stats/csgo`, {
                            headers: {
                                'Authorization': `Bearer ${process.env.FACEIT_API_KEY}`
                            }
                        });
                        
                        if (statsResponse.data && statsResponse.data.lifetime) {
                            user.faceit.stats = statsResponse.data.lifetime;
                            user.faceit.statsFrom = 'csgo';
                        }
                    } catch (csgoErr) {
                        // –ï—Å–ª–∏ –æ–±–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        console.log('–ù–∏ CS2, –Ω–∏ CSGO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId);
                    }
                }
            } catch (faceitErr) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Faceit:', faceitErr.message);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö Faceit
            }
        }
        
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω Steam –∏ –µ—Å—Ç—å Premier —Ä–∞–Ω–≥, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –æ—Ç–≤–µ—Ç—É
        if (user.steam_id && user.cs2_premier_rank) {
            user.premier_rank = user.cs2_premier_rank;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏)
        const friendsResult = await pool.query(`
            SELECT f.id, f.status,
                u.id as friend_id, u.username, u.avatar_url
            FROM friends f
            JOIN users u ON (
                CASE
                    WHEN f.user_id = $1 THEN f.friend_id
                    WHEN f.friend_id = $1 THEN f.user_id
                END
            ) = u.id
            WHERE (f.user_id = $1 OR f.friend_id = $1)
            AND f.status = 'accepted'
            LIMIT 10
        `, [userId]);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ—Ç–≤–µ—Ç—É
        if (friendsResult.rows.length > 0) {
            user.friends = friendsResult.rows.map(row => ({
                id: row.friend_id,
                username: row.username,
                avatar_url: row.avatar_url
            }));
        }
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ –Ω—É–∂–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—è
        delete user.cs2_premier_rank;
        
        console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω`);
        res.json(user);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–º–∏–Ω—É—Ç–∞"
function getMinutesWord(minutes) {
    if (minutes >= 11 && minutes <= 14) {
        return '–º–∏–Ω—É—Ç';
    }
    
    const lastDigit = minutes % 10;
    if (lastDigit === 1) {
        return '–º–∏–Ω—É—Ç—É';
    } else if (lastDigit >= 2 && lastDigit <= 4) {
        return '–º–∏–Ω—É—Ç—ã';
    } else {
        return '–º–∏–Ω—É—Ç';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—á–∞—Å"
function getHoursWord(hours) {
    if (hours >= 11 && hours <= 14) {
        return '—á–∞—Å–æ–≤';
    }
    
    const lastDigit = hours % 10;
    if (lastDigit === 1) {
        return '—á–∞—Å';
    } else if (lastDigit >= 2 && lastDigit <= 4) {
        return '—á–∞—Å–∞';
    } else {
        return '—á–∞—Å–æ–≤';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
function getDaysWord(days) {
    if (days >= 11 && days <= 14) {
        return '–¥–Ω–µ–π';
    }
    
    const lastDigit = days % 10;
    if (lastDigit === 1) {
        return '–¥–µ–Ω—å';
    } else if (lastDigit >= 2 && lastDigit <= 4) {
        return '–¥–Ω—è';
    } else {
        return '–¥–Ω–µ–π';
    }
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
router.get('/search', authenticateToken, async (req, res) => {
    // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ query, –∏ q
    const query = (req.query.query ?? req.query.q ?? '').toString();
    const limitRaw = parseInt(req.query.limit, 10);
    const limit = Number.isFinite(limitRaw) ? Math.min(Math.max(limitRaw, 1), 20) : 10;
    
    console.log('üîç [Backend] –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô - –ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù');
    console.log('üîç [Backend] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { query });
    console.log('üîç [Backend] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', { id: req.user?.id, username: req.user?.username });
    
    if (!query || query.length < 2) {
        console.log('üîç [Backend] –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
        return res.status(400).json({ error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ - 2 —Å–∏–º–≤–æ–ª–∞' });
    }

    try {
        console.log('üîç [Backend] –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º:', `%${query}%`, 'limit:', limit);
        const likePattern = `%${query}%`;
        // –ë—ã—Å—Ç—Ä—ã–π –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Å pg_trgm (ORDER BY similarity)
        const result = await pool.query(
            `SELECT id, username, avatar_url, faceit_elo, cs2_premier_rank, steam_id
             FROM users
             WHERE username ILIKE $1 OR email ILIKE $1
             ORDER BY GREATEST(similarity(username, $2), similarity(email, $2)) DESC
             LIMIT $3`,
            [likePattern, query, limit]
        );
        
        console.log('üîç [Backend] SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('üîç [Backend] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', result.rows.length);
        console.log('üîç [Backend] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', result.rows.map(user => ({ id: user.id, username: user.username })));
        
        res.json(result.rows);
    } catch (err) {
        console.error('üîç [Backend] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/:id/status', authenticateToken, async (req, res) => {
    const userId = req.params.id;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º last_activity_at –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        const result = await pool.query(
            'SELECT last_activity_at FROM users WHERE id = $1',
            [userId]
        );
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const lastActivity = result.rows[0].last_activity_at;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ last_activity_at
        if (!lastActivity) {
            // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–ª–∞–π–Ω
            return res.json({
                online: false,
                last_online: null
            });
        }
        
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç Date –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
            const lastActivityDate = new Date(lastActivity);
            // –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω, –µ—Å–ª–∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –Ω–µ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
            const isOnline = (Date.now() - lastActivityDate.getTime()) < 15 * 60 * 1000;
            
            res.json({
                online: isOnline,
                last_online: lastActivity
            });
        } catch (dateError) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId, ':', dateError);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω
            res.json({
                online: false,
                last_online: null
            });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        res.json({
            online: false,
            last_online: null
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
router.post('/create-organization-request', authenticateToken, upload.single('logo'), async (req, res) => {
    const { organizationName, description, websiteUrl, vkUrl, telegramUrl } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!organizationName || !description) {
        return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π email
        const userResult = await pool.query('SELECT username, email, is_verified FROM users WHERE id = $1', [req.user.id]);
        
        if (userResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const user = userResult.rows[0];
        
        if (!user.email) {
            return res.status(400).json({ error: '–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å email' });
        }
        
        if (!user.is_verified) {
            return res.status(400).json({ error: '–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingRequestResult = await pool.query(
            'SELECT id FROM organization_requests WHERE user_id = $1 AND status = $2',
            [req.user.id, 'pending']
        );
        
        if (existingRequestResult.rows.length > 0) {
            return res.status(400).json({ error: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
        let logoUrl = null;
        if (req.file) {
            const baseUrl = process.env.NODE_ENV === 'production'
                ? process.env.SERVER_URL || 'https://1337community.com'
                : `http://localhost:3000`;
            logoUrl = `${baseUrl}/uploads/avatars/${req.file.filename}`;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const requestResult = await pool.query(`
            INSERT INTO organization_requests (
                user_id, organization_name, description, website_url, 
                vk_url, telegram_url, logo_url, status
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, 'pending')
            RETURNING *
        `, [
            req.user.id,
            organizationName,
            description,
            websiteUrl || null,
            vkUrl || null,
            telegramUrl || null,
            logoUrl
        ]);
        
        const request = requestResult.rows[0];
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        try {
            // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            const requestDate = new Date(request.created_at).toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            const baseUrl = process.env.CLIENT_URL || 'https://1337community.com';

            // HTML —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            const adminMailOptions = {
                from: process.env.SMTP_FROM,
                to: 'nikita_gorenkov@mail.ru, Try.conn@yandex.ru',
                subject: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ - 1337Community',
                html: `
                    <div style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 600px; margin: 0 auto; background-color: #ffffff; padding: 0;">
                        <div style="background-color: #ffffff; border: 1px solid #e0e0e0;">
                            <!-- Header -->
                            <div style="background-color: #000000; color: #ffffff; padding: 20px; text-align: center;">
                                <h1 style="margin: 0; font-size: 24px; font-weight: 300;">1337 COMMUNITY</h1>
                                <p style="margin: 5px 0 0 0; font-size: 14px; opacity: 0.8;">–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é</p>
                            </div>
                            
                            <!-- Content -->
                            <div style="padding: 30px;">
                                <h2 style="color: #000000; margin: 0 0 25px 0; font-size: 20px; font-weight: 400; border-bottom: 1px solid #e0e0e0; padding-bottom: 10px;">
                                    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ
                                </h2>
                                
                                <!-- Applicant Info -->
                                <div style="margin-bottom: 25px;">
                                    <h3 style="color: #333333; margin: 0 0 15px 0; font-size: 16px; font-weight: 500;">–ó–∞—è–≤–∏—Ç–µ–ª—å</h3>
                                    <table style="width: 100%; border-collapse: collapse;">
                                        <tr>
                                            <td style="padding: 8px 0; color: #666666; width: 120px; font-size: 14px;">–ù–∏–∫–Ω–µ–π–º:</td>
                                            <td style="padding: 8px 0; color: #000000; font-size: 14px; font-weight: 500;">${user.username}</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 8px 0; color: #666666; width: 120px; font-size: 14px;">Email:</td>
                                            <td style="padding: 8px 0; color: #000000; font-size: 14px;">${user.email}</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 8px 0; color: #666666; width: 120px; font-size: 14px;">–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</td>
                                            <td style="padding: 8px 0; color: #000000; font-size: 14px;">${requestDate}</td>
                                        </tr>
                                    </table>
                                </div>
                                
                                <!-- Organization Info -->
                                <div style="margin-bottom: 25px;">
                                    <h3 style="color: #333333; margin: 0 0 15px 0; font-size: 16px; font-weight: 500;">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</h3>
                                    <table style="width: 100%; border-collapse: collapse;">
                                        <tr>
                                            <td style="padding: 8px 0; color: #666666; width: 120px; font-size: 14px; vertical-align: top;">–ù–∞–∑–≤–∞–Ω–∏–µ:</td>
                                            <td style="padding: 8px 0; color: #000000; font-size: 14px; font-weight: 500;">${organizationName}</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 8px 0; color: #666666; width: 120px; font-size: 14px; vertical-align: top;">–û–ø–∏—Å–∞–Ω–∏–µ:</td>
                                            <td style="padding: 8px 0; color: #000000; font-size: 14px; line-height: 1.4;">
                                                <div style="background-color: #f8f8f8; padding: 12px; border-left: 3px solid #000000; font-style: italic;">
                                                    ${description}
                                                </div>
                                            </td>
                                        </tr>
                                        ${websiteUrl ? `
                                        <tr>
                                            <td style="padding: 8px 0; color: #666666; width: 120px; font-size: 14px;">–í–µ–±-—Å–∞–π—Ç:</td>
                                            <td style="padding: 8px 0; font-size: 14px;"><a href="${websiteUrl}" target="_blank" style="color: #000000; text-decoration: underline;">${websiteUrl}</a></td>
                                        </tr>` : ''}
                                        ${vkUrl ? `
                                        <tr>
                                            <td style="padding: 8px 0; color: #666666; width: 120px; font-size: 14px;">VK:</td>
                                            <td style="padding: 8px 0; font-size: 14px;"><a href="${vkUrl}" target="_blank" style="color: #000000; text-decoration: underline;">${vkUrl}</a></td>
                                        </tr>` : ''}
                                        ${telegramUrl ? `
                                        <tr>
                                            <td style="padding: 8px 0; color: #666666; width: 120px; font-size: 14px;">Telegram:</td>
                                            <td style="padding: 8px 0; font-size: 14px;"><a href="${telegramUrl}" target="_blank" style="color: #000000; text-decoration: underline;">${telegramUrl}</a></td>
                                        </tr>` : ''}
                                        ${logoUrl ? `
                                        <tr>
                                            <td style="padding: 8px 0; color: #666666; width: 120px; font-size: 14px;">–õ–æ–≥–æ—Ç–∏–ø:</td>
                                            <td style="padding: 8px 0; font-size: 14px;"><a href="${logoUrl}" target="_blank" style="color: #000000; text-decoration: underline;">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–æ—Ç–∏–ø</a></td>
                                        </tr>` : ''}
                                    </table>
                                </div>
                                
                                <!-- Action Button -->
                                <div style="text-align: center; margin: 30px 0; padding: 20px 0; border-top: 1px solid #e0e0e0; border-bottom: 1px solid #e0e0e0;">
                                    <p style="margin: 0 0 15px 0; color: #333333; font-size: 14px;">–ó–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è</p>
                                    <a href="https://1337community.com/admin" 
                                       style="display: inline-block; background-color: #000000; color: #ffffff; padding: 12px 30px; text-decoration: none; font-size: 14px; font-weight: 500; letter-spacing: 0.5px; text-transform: uppercase;">
                                        –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
                                    </a>
                                </div>
                            </div>
                            
                            <!-- Footer -->
                            <div style="background-color: #f8f8f8; padding: 20px; text-align: center; border-top: 1px solid #e0e0e0;">
                                <p style="margin: 0 0 5px 0; color: #666666; font-size: 12px;">1337 Community ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</p>
                                <p style="margin: 0; color: #999999; font-size: 11px;">
                                    ID –∑–∞—è–≤–∫–∏: #${request.id} | ${new Date().toLocaleString('ru-RU')}
                                </p>
                            </div>
                        </div>
                    </div>
                `
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            await transporter.sendMail(adminMailOptions);
            console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            
        } catch (emailErr) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:', emailErr);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
        }
        
        res.json({ 
            message: '–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ—ë –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.',
            requestId: request.id,
            organizationName: organizationName
        });
        
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/organization-request-status', authenticateToken, async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT * FROM organization_requests 
            WHERE user_id = $1 
            ORDER BY created_at DESC 
            LIMIT 1
        `, [req.user.id]);

        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        res.json(result.rows[0]);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏' });
    }
});

// –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
router.post('/forgot-password', async (req, res) => {
    const { email } = req.body;

    if (!email) {
        return res.status(400).json({ message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
        const userResult = await pool.query('SELECT id, username, email FROM users WHERE email = $1', [email]);
        
        if (userResult.rows.length === 0) {
            // –ù–µ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ email –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            return res.json({ message: '–ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è' });
        }

        const user = userResult.rows[0];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        const resetToken = crypto.randomBytes(32).toString('hex');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è (1 —á–∞—Å)
        await pool.query(
            'UPDATE users SET password_reset_token = $1, password_reset_expires = NOW() + INTERVAL \'1 hour\' WHERE id = $2',
            [resetToken, user.id]
        );
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        const baseUrl = process.env.CLIENT_URL || 'https://1337community.com';
        const resetUrl = `${baseUrl}/reset-password?token=${resetToken}`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        const mailOptions = {
            from: process.env.SMTP_FROM,
            to: email,
            subject: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - 1337 Community',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #333;">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>
                    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.username}!</p>
                    <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ 1337 Community.</p>
                    <p>–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:</p>
                    <div style="text-align: center; margin: 30px 0;">
                        <a href="${resetUrl}" 
                           style="display: inline-block; background-color: #000000; color: #ffffff; padding: 12px 30px; text-decoration: none; font-size: 14px; font-weight: 500; letter-spacing: 0.5px; text-transform: uppercase;">
                            –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
                        </a>
                    </div>
                    <p>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.</p>
                    <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
                    <div style="background-color: #f8f8f8; padding: 20px; text-align: center; border-top: 1px solid #e0e0e0;">
                        <p style="margin: 0 0 5px 0; color: #666666; font-size: 12px;">1337 Community ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</p>
                        <p style="margin: 0; color: #999999; font-size: 11px;">
                            ${new Date().toLocaleString('ru-RU')}
                        </p>
                    </div>
                </div>
            `
        };
        
        await transporter.sendMail(mailOptions);
        
        res.json({ message: '–ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è' });
        
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è' });
    }
});

// –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
router.post('/reset-password', async (req, res) => {
    const { token, password, confirmPassword } = req.body;

    if (!token || !password || !confirmPassword) {
        return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    if (password !== confirmPassword) {
        return res.status(400).json({ message: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç' });
    }

    if (password.length < 6) {
        return res.status(400).json({ message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
    }

    try {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        const userResult = await pool.query(
            'SELECT id, username, email FROM users WHERE password_reset_token = $1 AND password_reset_expires > NOW()',
            [token]
        );

        if (userResult.rows.length === 0) {
            return res.status(400).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
        }

        const user = userResult.rows[0];

        // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(password, 10);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∏ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞
        await pool.query(
            'UPDATE users SET password_hash = $1, password_reset_token = NULL, password_reset_expires = NULL WHERE id = $2',
            [hashedPassword, user.id]
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è
        const successMailOptions = {
            from: process.env.SMTP_FROM,
            to: user.email,
            subject: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω - 1337 Community',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #333;">–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω</h2>
                    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.username}!</p>
                    <p>–í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.</p>
                    <p>–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞.</p>
                    <div style="background-color: #f0f8ff; padding: 15px; margin: 20px 0; border-left: 4px solid #4682b4;">
                        <p style="margin: 0;">–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.</p>
                    </div>
                    <div style="background-color: #f8f8f8; padding: 20px; text-align: center; border-top: 1px solid #e0e0e0;">
                        <p style="margin: 0 0 5px 0; color: #666666; font-size: 12px;">1337 Community ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</p>
                        <p style="margin: 0; color: #999999; font-size: 11px;">
                            ${new Date().toLocaleString('ru-RU')}
                        </p>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(successMailOptions);

        res.json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' });

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å' });
    }
});

module.exports = router;