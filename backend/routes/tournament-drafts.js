// backend/routes/tournament-drafts.js
// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
// –î–∞—Ç–∞: 3 –æ–∫—Ç—è–±—Ä—è 2025

const express = require('express');
const router = express.Router();
const auth = require('../middleware/auth');
const pool = require('../db');

/**
 * POST /api/tournaments/drafts
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
 */
router.post('/drafts', auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const { draft_data, current_step, draft_name } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!draft_data || typeof draft_data !== 'object') {
      return res.status(400).json({ 
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞' 
      });
    }

    if (current_step && (current_step < 1 || current_step > 6)) {
      return res.status(400).json({ 
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —à–∞–≥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-6)' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingDraft = await pool.query(
      `SELECT id FROM tournament_drafts 
       WHERE user_id = $1 
       ORDER BY last_saved_at DESC 
       LIMIT 1`,
      [userId]
    );

    let result;

    if (existingDraft.rows.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫
      const draftId = existingDraft.rows[0].id;
      
      result = await pool.query(
        `UPDATE tournament_drafts 
         SET 
           draft_data = $1,
           current_step = COALESCE($2, current_step),
           draft_name = COALESCE($3, draft_name),
           expires_at = NOW() + INTERVAL '7 days'
         WHERE id = $4 AND user_id = $5
         RETURNING *`,
        [
          JSON.stringify(draft_data),
          current_step,
          draft_name,
          draftId,
          userId
        ]
      );

      console.log(`‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ ${draftId} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
      result = await pool.query(
        `INSERT INTO tournament_drafts (
           user_id, 
           draft_data, 
           current_step, 
           draft_name,
           meta
         ) VALUES ($1, $2, $3, $4, $5)
         RETURNING *`,
        [
          userId,
          JSON.stringify(draft_data),
          current_step || 1,
          draft_name || '–ß–µ—Ä–Ω–æ–≤–∏–∫ —Ç—É—Ä–Ω–∏—Ä–∞',
          JSON.stringify({ auto_saved: true, source: 'wizard' })
        ]
      );

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }

    res.json({
      success: true,
      draft: result.rows[0]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞',
      details: error.message 
    });
  }
});

/**
 * GET /api/tournaments/drafts
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/drafts', auth, async (req, res) => {
  try {
    const userId = req.user.id;

    const result = await pool.query(
      `SELECT 
         id,
         draft_data,
         current_step,
         draft_name,
         created_at,
         last_saved_at,
         expires_at,
         meta
       FROM tournament_drafts
       WHERE user_id = $1
       ORDER BY last_saved_at DESC`,
      [userId]
    );

    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${result.rows.length} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    res.json({
      success: true,
      drafts: result.rows
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤',
      details: error.message 
    });
  }
});

/**
 * GET /api/tournaments/drafts/:id
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
 */
router.get('/drafts/:id', auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const draftId = req.params.id;

    const result = await pool.query(
      `SELECT * FROM tournament_drafts
       WHERE id = $1 AND user_id = $2`,
      [draftId, userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ 
        error: '–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    const draft = result.rows[0];
    if (new Date(draft.expires_at) < new Date()) {
      // –ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å—Ç–∞—Ä–µ–ª - —É–¥–∞–ª—è–µ–º
      await pool.query(
        'DELETE FROM tournament_drafts WHERE id = $1',
        [draftId]
      );
      
      return res.status(410).json({ 
        error: '–ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å—Ç–∞—Ä–µ–ª –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω' 
      });
    }

    res.json({
      success: true,
      draft: draft
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞',
      details: error.message 
    });
  }
});

/**
 * PUT /api/tournaments/drafts/:id
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
 */
router.put('/drafts/:id', auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const draftId = req.params.id;
    const { draft_data, current_step, draft_name } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const existingDraft = await pool.query(
      'SELECT id FROM tournament_drafts WHERE id = $1 AND user_id = $2',
      [draftId, userId]
    );

    if (existingDraft.rows.length === 0) {
      return res.status(404).json({ 
        error: '–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞' 
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
    const result = await pool.query(
      `UPDATE tournament_drafts 
       SET 
         draft_data = COALESCE($1, draft_data),
         current_step = COALESCE($2, current_step),
         draft_name = COALESCE($3, draft_name),
         expires_at = NOW() + INTERVAL '7 days'
       WHERE id = $4 AND user_id = $5
       RETURNING *`,
      [
        draft_data ? JSON.stringify(draft_data) : null,
        current_step,
        draft_name,
        draftId,
        userId
      ]
    );

    console.log(`‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ ${draftId} –æ–±–Ω–æ–≤–ª–µ–Ω`);

    res.json({
      success: true,
      draft: result.rows[0]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞',
      details: error.message 
    });
  }
});

/**
 * DELETE /api/tournaments/drafts/:id
 * –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
 */
router.delete('/drafts/:id', auth, async (req, res) => {
  try {
    const userId = req.user.id;
    const draftId = req.params.id;

    const result = await pool.query(
      'DELETE FROM tournament_drafts WHERE id = $1 AND user_id = $2 RETURNING id',
      [draftId, userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ 
        error: '–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞' 
      });
    }

    console.log(`üóëÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫ ${draftId} —É–¥–∞–ª–µ–Ω`);

    res.json({
      success: true,
      message: '–ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞',
      details: error.message 
    });
  }
});

/**
 * POST /api/tournaments/drafts/cleanup
 * –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ (admin only)
 */
router.post('/drafts/cleanup', auth, async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (req.user.role !== 'admin') {
      return res.status(403).json({ 
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' 
      });
    }

    const result = await pool.query('SELECT cleanup_expired_drafts()');
    const deletedCount = result.rows[0].cleanup_expired_drafts;

    console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: —É–¥–∞–ª–µ–Ω–æ ${deletedCount} —à—Ç—É–∫`);

    res.json({
      success: true,
      deleted_count: deletedCount
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤',
      details: error.message 
    });
  }
});

/**
 * GET /api/tournaments/drafts/stats
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
router.get('/drafts/stats', auth, async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (req.user.role !== 'admin') {
      return res.status(403).json({ 
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' 
      });
    }

    const stats = await pool.query(`
      SELECT 
        COUNT(*) as total_drafts,
        COUNT(DISTINCT user_id) as unique_users,
        AVG(current_step) as avg_step,
        COUNT(CASE WHEN expires_at < NOW() THEN 1 END) as expired_drafts,
        COUNT(CASE WHEN meta->>'source' = 'wizard' THEN 1 END) as wizard_drafts,
        COUNT(CASE WHEN meta->>'source' = 'manual' THEN 1 END) as manual_drafts
      FROM tournament_drafts
    `);

    res.json({
      success: true,
      stats: stats.rows[0]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      details: error.message 
    });
  }
});

module.exports = router;

