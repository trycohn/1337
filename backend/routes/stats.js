/**
 * üìä STATS API
 * API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
 * 
 * @version 2.0.0
 * @date 2025-10-02
 */

const express = require('express');
const router = express.Router();
const pool = require('../db');
const { authenticateToken } = require('../middleware/auth');

/**
 * GET /api/stats/player/:userId
 * –ü–æ–ª—É—á–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
 */
router.get('/player/:userId', async (req, res) => {
    const { userId } = req.params;
    
    try {
        const result = await pool.query(
            'SELECT * FROM player_aggregated_stats WHERE user_id = $1',
            [userId]
        );
        
        if (result.rows.length === 0) {
            return res.json({
                success: true,
                stats: null,
                message: 'No stats available yet'
            });
        }
        
        res.json({
            success: true,
            stats: result.rows[0]
        });
        
    } catch (error) {
        console.error('‚ùå [Stats API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ success: false, error: 'Failed to get stats' });
    }
});

/**
 * GET /api/stats/player/:userId/recent
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –º–∞—Ç—á–µ–π
 */
router.get('/player/:userId/recent', async (req, res) => {
    const { userId } = req.params;
    const { limit = 10 } = req.query;
    
    try {
        const result = await pool.query(`
            SELECT 
                pms.*,
                ms.map_name,
                m.created_at as match_date,
                m.winner_team_id,
                CASE WHEN m.winner_team_id = pms.team_id THEN true ELSE false END as won
            FROM player_match_stats pms
            JOIN matches m ON m.id = pms.match_id
            LEFT JOIN match_stats ms ON ms.match_id = pms.match_id
            WHERE pms.user_id = $1
            ORDER BY m.created_at DESC
            LIMIT $2
        `, [userId, limit]);
        
        res.json({
            success: true,
            matches: result.rows
        });
        
    } catch (error) {
        console.error('‚ùå [Stats API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è recent stats:', error);
        res.status(500).json({ success: false, error: 'Failed to get recent stats' });
    }
});

/**
 * GET /api/stats/player/:userId/maps
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–∞–º
 */
router.get('/player/:userId/maps', async (req, res) => {
    const { userId } = req.params;
    
    try {
        const result = await pool.query(
            'SELECT * FROM player_map_stats WHERE user_id = $1 ORDER BY matches_played DESC',
            [userId]
        );
        
        res.json({
            success: true,
            maps: result.rows
        });
        
    } catch (error) {
        console.error('‚ùå [Stats API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è map stats:', error);
        res.status(500).json({ success: false, error: 'Failed to get map stats' });
    }
});

/**
 * GET /api/stats/leaderboard
 * –ü–æ–ª—É—á–∏—Ç—å leaderboard –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
 */
router.get('/leaderboard', async (req, res) => {
    const { metric = 'rating', limit = 100 } = req.query;
    
    try {
        let orderBy;
        
        switch (metric) {
            case 'rating':
                orderBy = 'avg_rating DESC';
                break;
            case 'kd':
                orderBy = 'kd_ratio DESC';
                break;
            case 'hs':
                orderBy = 'avg_hs_percentage DESC';
                break;
            case 'adr':
                orderBy = 'avg_adr DESC';
                break;
            case 'clutch':
                orderBy = 'clutch_success_rate DESC';
                break;
            default:
                orderBy = 'avg_rating DESC';
        }
        
        const result = await pool.query(`
            SELECT 
                pas.*,
                u.username,
                u.avatar_url
            FROM player_aggregated_stats pas
            JOIN users u ON u.id = pas.user_id
            WHERE pas.total_matches >= 5
            ORDER BY ${orderBy}
            LIMIT $1
        `, [limit]);
        
        res.json({
            success: true,
            leaderboard: result.rows,
            metric
        });
        
    } catch (error) {
        console.error('‚ùå [Stats API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è leaderboard:', error);
        res.status(500).json({ success: false, error: 'Failed to get leaderboard' });
    }
});

/**
 * GET /api/admin/stats-anomalies
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–æ–º–∞–ª–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
router.get('/admin/stats-anomalies', authenticateToken, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!req.user || req.user.role !== 'admin') {
            return res.status(403).json({ error: 'Forbidden' });
        }
        
        const { severity = null, reviewed = false, limit = 50 } = req.query;
        
        let whereClause = 'WHERE 1=1';
        const params = [];
        
        if (severity) {
            params.push(severity);
            whereClause += ` AND severity = $${params.length}`;
        }
        
        if (reviewed === 'false') {
            whereClause += ' AND reviewed = false';
        }
        
        params.push(limit);
        
        const result = await pool.query(`
            SELECT 
                psa.*,
                u.username,
                u.email,
                m.id as match_id,
                t.name as tournament_name
            FROM player_stats_anomalies psa
            JOIN users u ON u.id = psa.user_id
            LEFT JOIN matches m ON m.id = psa.match_id
            LEFT JOIN tournaments t ON t.id = m.tournament_id
            ${whereClause}
            ORDER BY psa.detected_at DESC, psa.severity DESC
            LIMIT $${params.length}
        `, params);
        
        res.json({
            success: true,
            anomalies: result.rows
        });
        
    } catch (error) {
        console.error('‚ùå [Stats API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π:', error);
        res.status(500).json({ success: false, error: 'Failed to get anomalies' });
    }
});

module.exports = router;
