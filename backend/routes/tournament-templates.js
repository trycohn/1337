// backend/routes/tournament-templates.js
// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
// –î–∞—Ç–∞: 3 –æ–∫—Ç—è–±—Ä—è 2025

const express = require('express');
const router = express.Router();
const { authenticateToken } = require('../middleware/auth');
const pool = require('../db');

/**
 * GET /api/tournament-templates
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
 */
router.get('/', async (req, res) => {
  try {
    const { category, search, official_only } = req.query;
    
    let query = `
      SELECT 
        id,
        name,
        description,
        category,
        thumbnail_url,
        icon,
        is_official,
        use_count,
        config,
        created_at
      FROM tournament_templates
      WHERE is_active = TRUE
    `;
    
    const params = [];
    let paramIndex = 1;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (category && category !== 'all') {
      query += ` AND category = $${paramIndex}`;
      params.push(category);
      paramIndex++;
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (search) {
      query += ` AND name ILIKE $${paramIndex}`;
      params.push(`%${search}%`);
      paramIndex++;
    }
    
    // –¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    if (official_only === 'true') {
      query += ` AND is_official = TRUE`;
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏, –∑–∞—Ç–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    query += ` ORDER BY is_official DESC, use_count DESC, created_at DESC`;
    
    const result = await pool.query(query, params);
    
    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${result.rows.length} —à–∞–±–ª–æ–Ω–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤`);
    
    res.json({
      success: true,
      templates: result.rows
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤',
      details: error.message 
    });
  }
});

/**
 * GET /api/tournament-templates/:id
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
 */
router.get('/:id', async (req, res) => {
  try {
    const templateId = parseInt(req.params.id, 10);
    
    if (isNaN(templateId)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞' });
    }
    
    const result = await pool.query(
      `SELECT * FROM tournament_templates 
       WHERE id = $1 AND is_active = TRUE`,
      [templateId]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({
      success: true,
      template: result.rows[0]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞',
      details: error.message 
    });
  }
});

/**
 * POST /api/tournament-templates/:id/use
 * –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
 */
router.post('/:id/use', async (req, res) => {
  try {
    const templateId = parseInt(req.params.id, 10);
    
    if (isNaN(templateId)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞' });
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ë–î
    await pool.query('SELECT increment_template_use_count($1)', [templateId]);
    
    console.log(`üìä –®–∞–±–ª–æ–Ω ${templateId} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω`);
    
    res.json({
      success: true,
      message: '–°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞',
      details: error.message 
    });
  }
});

/**
 * POST /api/tournament-templates
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ (Pro feature - TODO)
 */
router.post('/', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const { name, description, category, config } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !config) {
      return res.status(400).json({ 
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }
    
    // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ Pro –ø–æ–¥–ø–∏—Å–∫–∏
    // if (req.user.subscription !== 'pro') {
    //   return res.status(403).json({ 
    //     error: '–¢—Ä–µ–±—É–µ—Ç—Å—è Pro –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤' 
    //   });
    // }
    
    const result = await pool.query(
      `INSERT INTO tournament_templates 
       (name, description, category, creator_id, is_official, config)
       VALUES ($1, $2, $3, $4, FALSE, $5)
       RETURNING *`,
      [
        name,
        description || null,
        category || 'custom',
        userId,
        JSON.stringify(config)
      ]
    );
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω ${result.rows[0].id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    
    res.status(201).json({
      success: true,
      template: result.rows[0]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞',
      details: error.message 
    });
  }
});

/**
 * PUT /api/tournament-templates/:id
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∏–ª–∏ admin)
 */
router.put('/:id', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const templateId = parseInt(req.params.id, 10);
    const { name, description, category, icon, is_official, is_active, config } = req.body;
    
    if (isNaN(templateId)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const template = await pool.query(
      'SELECT creator_id, is_official FROM tournament_templates WHERE id = $1',
      [templateId]
    );
    
    if (template.rows.length === 0) {
      return res.status(404).json({ error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if (template.rows[0].creator_id !== userId && req.user.role !== 'admin') {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
    const result = await pool.query(
      `UPDATE tournament_templates
       SET 
         name = COALESCE($1, name),
         description = COALESCE($2, description),
         category = COALESCE($3, category),
         icon = COALESCE($4, icon),
         is_official = COALESCE($5, is_official),
         is_active = COALESCE($6, is_active),
         config = COALESCE($7, config)
       WHERE id = $8
       RETURNING *`,
      [
        name || null,
        description || null,
        category || null,
        icon || null,
        is_official !== undefined ? is_official : null,
        is_active !== undefined ? is_active : null,
        config ? JSON.stringify(config) : null,
        templateId
      ]
    );
    
    console.log(`‚úÖ –®–∞–±–ª–æ–Ω ${templateId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    
    res.json({
      success: true,
      template: result.rows[0]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞',
      details: error.message 
    });
  }
});

/**
 * DELETE /api/tournament-templates/:id
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–∏)
 */
router.delete('/:id', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const templateId = parseInt(req.params.id, 10);
    
    if (isNaN(templateId)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const template = await pool.query(
      'SELECT creator_id, is_official FROM tournament_templates WHERE id = $1',
      [templateId]
    );
    
    if (template.rows.length === 0) {
      return res.status(404).json({ error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (template.rows[0].is_official) {
      return res.status(403).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω' });
    }
    
    if (template.rows[0].creator_id !== userId && req.user.role !== 'admin') {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞' });
    }
    
    // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (is_active = FALSE)
    await pool.query(
      'UPDATE tournament_templates SET is_active = FALSE WHERE id = $1',
      [templateId]
    );
    
    console.log(`üóëÔ∏è –®–∞–±–ª–æ–Ω ${templateId} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
    
    res.json({
      success: true,
      message: '–®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞',
      details: error.message 
    });
  }
});

/**
 * GET /api/tournament-templates/stats
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
router.get('/stats/overview', authenticateToken, async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (req.user.role !== 'admin') {
      return res.status(403).json({ 
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' 
      });
    }
    
    const stats = await pool.query(`
      SELECT 
        COUNT(*) as total_templates,
        COUNT(CASE WHEN is_official = TRUE THEN 1 END) as official_count,
        COUNT(CASE WHEN is_official = FALSE THEN 1 END) as custom_count,
        SUM(use_count) as total_uses,
        AVG(use_count) as avg_uses_per_template
      FROM tournament_templates
      WHERE is_active = TRUE
    `);
    
    res.json({
      success: true,
      stats: stats.rows[0]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      details: error.message 
    });
  }
});

module.exports = router;

