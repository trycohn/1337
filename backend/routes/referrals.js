/**
 * üîó –°–ò–°–¢–ï–ú–ê –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô v1.0.0
 * 
 * @version 1.0.0
 * @updated 2025-01-25
 * @author 1337 Community Development Team
 * @purpose API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
 * @features –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–∞–º, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */

const express = require('express');
const router = express.Router();
const pool = require('../db');
const { authenticateToken } = require('../middleware/auth');
const crypto = require('crypto');

// üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
router.post('/generate-link', authenticateToken, async (req, res) => {
    const { tournament_id } = req.body;
    const user_id = req.user.id;

    if (!tournament_id) {
        return res.status(400).json({ 
            success: false, 
            message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
        });
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournamentCheck = await pool.query(
            'SELECT id, name, status FROM tournaments WHERE id = $1',
            [tournament_id]
        );

        if (tournamentCheck.rows.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        const tournament = tournamentCheck.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
        if (tournament.status !== 'active') {
            return res.status(400).json({ 
                success: false, 
                message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingLink = await pool.query(`
            SELECT * FROM referral_links 
            WHERE user_id = $1 AND tournament_id = $2 
            AND expires_at > NOW()
            AND (is_active = true OR is_active IS NULL)
        `, [user_id, tournament_id]);

        if (existingLink.rows.length > 0) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É
            const link = existingLink.rows[0];
            const baseUrl = process.env.CLIENT_URL || 
                           (process.env.NODE_ENV === 'production' ? 'https://1337community.com' : 'http://localhost:3000');
            
            return res.json({
                success: true,
                message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                data: {
                    ...link,
                    full_url: `${baseUrl}/invite/${link.referral_code}`
                }
            });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
        const referralCode = crypto.randomBytes(8).toString('hex').toUpperCase();
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const result = await pool.query(`
            INSERT INTO referral_links (
                user_id, tournament_id, referral_code, 
                expires_at, max_uses, uses_count
            ) VALUES ($1, $2, $3, NOW() + INTERVAL '7 days', 10, 0)
            RETURNING *
        `, [user_id, tournament_id, referralCode]);

        const referralLink = result.rows[0];
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
        const baseUrl = process.env.CLIENT_URL || 
                       (process.env.NODE_ENV === 'production' ? 'https://1337community.com' : 'http://localhost:3000');
        
        const fullUrl = `${baseUrl}/invite/${referralCode}`;

        console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${fullUrl} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.username}`);

        res.json({
            success: true,
            message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
            data: {
                ...referralLink,
                full_url: fullUrl
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏' 
        });
    }
});

// üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (–¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è)
router.get('/info/:referralCode', async (req, res) => {
    const { referralCode } = req.params;

    if (!referralCode) {
        return res.status(400).json({ 
            success: false, 
            message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
        });
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const result = await pool.query(`
            SELECT 
                rl.*,
                u.username as referrer_username,
                t.id as tournament_id,
                t.name as tournament_name,
                t.game as tournament_game,
                t.format as tournament_format,
                t.status as tournament_status,
                t.max_participants as tournament_max_participants,
                (SELECT COUNT(*) FROM tournament_participants WHERE tournament_id = t.id) as tournament_participants_count
            FROM referral_links rl
            LEFT JOIN users u ON rl.user_id = u.id
            LEFT JOIN tournaments t ON rl.tournament_id = t.id
            WHERE rl.referral_code = $1 
              AND rl.expires_at > NOW()
              AND rl.uses_count < rl.max_uses
        `, [referralCode]);

        if (result.rows.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∞' 
            });
        }

        const linkData = result.rows[0];
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const responseData = {
            id: linkData.id,
            referral_code: linkData.referral_code,
            user_id: linkData.user_id,
            referrer_username: linkData.referrer_username,
            expires_at: linkData.expires_at,
            max_uses: linkData.max_uses,
            uses_count: linkData.uses_count,
            created_at: linkData.created_at,
            tournament: linkData.tournament_id ? {
                id: linkData.tournament_id,
                name: linkData.tournament_name,
                game: linkData.tournament_game,
                format: linkData.tournament_format,
                status: linkData.tournament_status,
                max_participants: linkData.tournament_max_participants,
                participants_count: parseInt(linkData.tournament_participants_count)
            } : null
        };

        console.log(`üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ ${referralCode} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞`);

        res.json({
            success: true,
            data: responseData
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Å—ã–ª–∫–µ' 
        });
    }
});

// üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/stats', authenticateToken, async (req, res) => {
    const user_id = req.user.id;

    try {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –ë–î
        const statsResult = await pool.query(
            'SELECT * FROM get_user_referral_stats($1)',
            [user_id]
        );

        const stats = statsResult.rows[0] || {
            total_invitations: 0,
            successful_registrations: 0,
            tournament_participants: 0,
            active_links: 0
        };

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö
        const recentLinksResult = await pool.query(
            `SELECT rl.id, rl.referral_code, rl.expires_at, rl.uses_count, rl.max_uses, 
                    t.name as tournament_name, t.id as tournament_id,
                    rl.created_at
             FROM referral_links rl
             JOIN tournaments t ON rl.tournament_id = t.id
             WHERE rl.user_id = $1 
             ORDER BY rl.created_at DESC 
             LIMIT 10`,
            [user_id]
        );

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö
        const successfulInvitesResult = await pool.query(
            `SELECT rr.registered_at, rr.participated_in_tournament,
                    u.username as invited_user_name,
                    t.name as tournament_name, t.id as tournament_id
             FROM referral_registrations rr
             JOIN users u ON rr.referred_user_id = u.id
             JOIN tournaments t ON rr.tournament_id = t.id
             WHERE rr.referrer_id = $1 
             ORDER BY rr.registered_at DESC 
             LIMIT 10`,
            [user_id]
        );

        res.json({
            success: true,
            data: {
                summary: stats,
                recent_links: recentLinksResult.rows,
                successful_invites: successfulInvitesResult.rows
            }
        });

    } catch (error) {
        console.error('‚ùå [getStats] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' 
        });
    }
});

// üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/stats', authenticateToken, async (req, res) => {
    const user_id = req.user.id;

    try {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        const statsResult = await pool.query(`
            SELECT 
                COUNT(DISTINCT rl.id) as total_invitations,
                COUNT(DISTINCT ru.new_user_id) as successful_registrations,
                COUNT(DISTINCT CASE WHEN tp.user_id IS NOT NULL THEN ru.new_user_id END) as tournament_participants,
                COUNT(DISTINCT CASE WHEN rl.is_active = true AND rl.expires_at > NOW() THEN rl.id END) as active_links
            FROM referral_links rl
            LEFT JOIN referral_uses ru ON rl.id = ru.referral_link_id
            LEFT JOIN tournament_participants tp ON ru.new_user_id = tp.user_id AND rl.tournament_id = tp.tournament_id
            WHERE rl.user_id = $1
        `, [user_id]);

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö
        const recentResult = await pool.query(`
            SELECT 
                rl.referral_code,
                rl.created_at,
                rl.expires_at,
                rl.uses_count,
                rl.max_uses,
                t.name as tournament_name,
                ARRAY_AGG(u.username) FILTER (WHERE u.username IS NOT NULL) as invited_users
            FROM referral_links rl
            LEFT JOIN tournaments t ON rl.tournament_id = t.id
            LEFT JOIN referral_uses ru ON rl.id = ru.referral_link_id
            LEFT JOIN users u ON ru.new_user_id = u.id
            WHERE rl.user_id = $1
            GROUP BY rl.id, rl.referral_code, rl.created_at, rl.expires_at, rl.uses_count, rl.max_uses, t.name
            ORDER BY rl.created_at DESC
            LIMIT 10
        `, [user_id]);

        const stats = statsResult.rows[0];
        const recentInvitations = recentResult.rows;

        console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.username} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞`);

        res.json({
            success: true,
            data: {
                summary: {
                    total_invitations: parseInt(stats.total_invitations),
                    successful_registrations: parseInt(stats.successful_registrations),
                    tournament_participants: parseInt(stats.tournament_participants),
                    active_links: parseInt(stats.active_links)
                },
                recent_invitations: recentInvitations
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' 
        });
    }
});

// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ frontend)
router.get('/validate/:referralCode', async (req, res) => {
    const { referralCode } = req.params;

    if (!referralCode) {
        return res.status(400).json({ 
            success: false, 
            message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω' 
        });
    }

    try {
        const linkResult = await pool.query(
            `SELECT rl.id, rl.user_id, rl.tournament_id, rl.expires_at, rl.uses_count, rl.max_uses,
                    t.name as tournament_name, t.status as tournament_status,
                    u.username as inviter_name
             FROM referral_links rl
             JOIN tournaments t ON rl.tournament_id = t.id
             JOIN users u ON rl.user_id = u.id
             WHERE rl.referral_code = $1`,
            [referralCode]
        );

        if (linkResult.rows.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
            });
        }

        const link = linkResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
        const isExpired = new Date(link.expires_at) < new Date();
        const isMaxUsesReached = link.uses_count >= link.max_uses;
        const isTournamentActive = link.tournament_status === 'active';

        res.json({
            success: true,
            data: {
                is_valid: !isExpired && !isMaxUsesReached && isTournamentActive,
                tournament: {
                    id: link.tournament_id,
                    name: link.tournament_name,
                    status: link.tournament_status
                },
                inviter: {
                    id: link.user_id,
                    username: link.inviter_name
                },
                link_info: {
                    expires_at: link.expires_at,
                    is_expired: isExpired,
                    uses_count: link.uses_count,
                    max_uses: link.max_uses,
                    is_max_uses_reached: isMaxUsesReached
                }
            }
        });

    } catch (error) {
        console.error('‚ùå [validateLink] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏' 
        });
    }
});

// üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
router.post('/register-referral', async (req, res) => {
    const { referral_code, new_user_id } = req.body;

    if (!referral_code || !new_user_id) {
        return res.status(400).json({ 
            success: false, 
            message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
    }

    const client = await pool.connect();
    
    try {
        await client.query('BEGIN');

        // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const linkResult = await client.query(
            `SELECT rl.id, rl.user_id as referrer_id, rl.tournament_id, rl.expires_at, rl.uses_count, rl.max_uses
             FROM referral_links rl
             WHERE rl.referral_code = $1`,
            [referral_code]
        );

        if (linkResult.rows.length === 0) {
            await client.query('ROLLBACK');
            return res.status(404).json({ 
                success: false, 
                message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
            });
        }

        const link = linkResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
        const isExpired = new Date(link.expires_at) < new Date();
        const isMaxUsesReached = link.uses_count >= link.max_uses;

        if (isExpired || isMaxUsesReached) {
            await client.query('ROLLBACK');
            return res.status(400).json({ 
                success: false, 
                message: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∞' 
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∫—Ç–æ –µ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª)
        await client.query(
            'UPDATE users SET invited_by = $1, invited_at = NOW() WHERE id = $2',
            [link.referrer_id, new_user_id]
        );

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å—Å—ã–ª–∫–∏
        await client.query(
            'UPDATE referral_links SET uses_count = uses_count + 1, updated_at = NOW() WHERE id = $1',
            [link.id]
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        await client.query(
            `INSERT INTO referral_registrations (referrer_id, referred_user_id, tournament_id, referral_link_id)
             VALUES ($1, $2, $3, $4)`,
            [link.referrer_id, new_user_id, link.tournament_id, link.id]
        );

        await client.query('COMMIT');

        console.log(`‚úÖ [registerReferral] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${new_user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç ${link.referrer_id}`);

        res.json({
            success: true,
            message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
            data: {
                referrer_id: link.referrer_id,
                tournament_id: link.tournament_id
            }
        });

    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå [registerReferral] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' 
        });
    } finally {
        client.release();
    }
});

// üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å—Å—ã–ª–æ–∫ (–∞–¥–º–∏–Ω—Å–∫–∏–π endpoint)
router.post('/cleanup-expired', authenticateToken, async (req, res) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (req.user.role !== 'admin') {
        return res.status(403).json({ 
            success: false, 
            message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' 
        });
    }

    try {
        const result = await pool.query('SELECT cleanup_expired_referral_links()');
        const deletedCount = result.rows[0].cleanup_expired_referral_links;

        res.json({
            success: true,
            message: `–£–¥–∞–ª–µ–Ω–æ ${deletedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`,
            deleted_count: deletedCount
        });

    } catch (error) {
        console.error('‚ùå [cleanupExpired] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å—Å—ã–ª–æ–∫' 
        });
    }
});

module.exports = router; 