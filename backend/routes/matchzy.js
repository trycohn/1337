/**
 * üéÆ MATCHZY WEBHOOK API
 * –ü—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç MatchZy plugin
 * 
 * @version 1.0.0
 * @date 2025-10-02
 */

const express = require('express');
const router = express.Router();
const StatsProcessor = require('../services/stats/StatsProcessor');
const AnomalyDetector = require('../services/stats/AnomalyDetector');

/**
 * POST /api/matchzy/match-end
 * Webhook –æ—Ç MatchZy –∫–æ–≥–¥–∞ –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω (—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î)
 */
router.post('/match-end', async (req, res) => {
    console.log('üéØ [MatchZy] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ç—á–∞');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env)
        if (process.env.MATCHZY_SECRET_TOKEN) {
            const token = req.headers['x-matchzy-token'] || 
                         req.headers['authorization']?.replace('Bearer ', '');
            
            if (token !== process.env.MATCHZY_SECRET_TOKEN) {
                console.log('‚ùå [MatchZy] –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                return res.status(401).json({ 
                    success: false, 
                    error: 'Unauthorized' 
                });
            }
        }
        
        const { matchid, event, winner, team1_series_score, team2_series_score, time_until_restore } = req.body;
        
        if (!matchid) {
            return res.status(400).json({ 
                success: false, 
                error: 'matchid is required' 
            });
        }
        
        console.log(`üìä [MatchZy] Webhook series_end:`, {
            matchid,
            event: event || 'series_end',
            score: `${team1_series_score || 0}:${team2_series_score || 0}`,
            winner: winner?.team || 'N/A'
        });
        
        // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É —á—Ç–æ webhook –ø–æ–ª—É—á–µ–Ω
        res.json({ 
            success: true, 
            message: 'Webhook received, processing stats in background' 
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–µ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫ —á—Ç–æ–±—ã MatchZy —É—Å–ø–µ–ª –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î)
        setTimeout(async () => {
            try {
                console.log(`‚è≥ [MatchZy] –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`);
                await importStatsForMatch(parseInt(matchid));
            } catch (error) {
                console.error(`‚ùå [MatchZy] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è matchid=${matchid}:`, error.message);
            }
        }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∞
        
    } catch (error) {
        console.error('‚ùå [MatchZy] –û—à–∏–±–∫–∞ webhook:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Failed to process webhook' 
        });
    }
});

/**
 * –ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞ –∏–∑ –ë–î —Å–µ—Ä–≤–µ—Ä–∞
 */
async function importStatsForMatch(matchid) {
    const pool = require('../db');
    const { withMySql } = require('../services/matchzyPollingService');
    
    console.log(`üîç [MatchZy] –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è matchid=${matchid}`);
    
    try {
        // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º lobby_id –∏–∑ matchid
        const lobbyId = deriveLobbyIdFromMatchId(matchid);
        
        if (!lobbyId) {
            console.log(`‚ö†Ô∏è [MatchZy] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å lobby_id –∏–∑ matchid=${matchid}`);
            return;
        }
        
        console.log(`üîç [MatchZy] –ò–∑–≤–ª–µ—á–µ–Ω lobby_id=${lobbyId} –∏–∑ matchid=${matchid}`);
        
        // 2. –ù–∞—Ö–æ–¥–∏–º server_id –ø–æ lobby_id
        const lobbyResult = await pool.query(
            'SELECT server_id FROM admin_match_lobbies WHERE id = $1',
            [lobbyId]
        );
        
        if (!lobbyResult.rows[0]?.server_id) {
            console.log(`‚ö†Ô∏è [MatchZy] –ù–µ –Ω–∞–π–¥–µ–Ω server_id –¥–ª—è lobby_id=${lobbyId}`);
            return;
        }
        
        const serverId = lobbyResult.rows[0].server_id;
        console.log(`üñ•Ô∏è [MatchZy] –ù–∞–π–¥–µ–Ω server_id=${serverId}`);
        
        // 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await withMySql(async (conn) => {
            console.log(`üì• [MatchZy] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —Å–µ—Ä–≤–µ—Ä–∞...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
            const [matches] = await conn.execute(
                'SELECT * FROM matchzy_stats_matches WHERE matchid = ?',
                [matchid]
            );
            
            if (matches.length === 0) {
                console.log(`‚ö†Ô∏è [MatchZy] –ú–∞—Ç—á ${matchid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î —Å–µ—Ä–≤–µ—Ä–∞ (–µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω?)`);
                return;
            }
            
            const matchRow = matches[0];
            console.log(`‚úÖ [MatchZy] –ù–∞–π–¥–µ–Ω –º–∞—Ç—á: ${matchRow.team1_name} ${matchRow.team1_score}:${matchRow.team2_score} ${matchRow.team2_name}`);
            
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á
            const { importMatchFromMySql } = require('../services/matchzyPollingService');
            await importMatchFromMySql(matchRow, conn);
            
            console.log(`‚úÖ [MatchZy] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞ ${matchid} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!`);
            
        }, serverId);
        
    } catch (error) {
        console.error(`‚ùå [MatchZy] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:`, error.message);
        throw error;
    }
}

/**
 * –ò–∑–≤–ª–µ—á—å lobby_id –∏–∑ matchid
 */
function deriveLobbyIdFromMatchId(matchid) {
    try {
        const s = String(matchid);
        if (s.length <= 8) return null;
        const lobbyId = Number(s.slice(0, -8));
        return Number.isInteger(lobbyId) && lobbyId > 0 ? lobbyId : null;
    } catch (_) {
        return null;
    }
}

/**
 * POST /api/matchzy/stats
 * Webhook –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç MatchZy (legacy, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
router.post('/stats', async (req, res) => {
    console.log('üìä [MatchZy] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç MatchZy webhook (legacy)');
    
    try {
        // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
        const token = req.headers['x-matchzy-token'] || 
                     req.headers['authorization']?.split(' ')[1];
        
        if (!token || token !== process.env.MATCHZY_SECRET_TOKEN) {
            console.log('‚ùå [MatchZy] Unauthorized webhook attempt');
            return res.status(401).json({ 
                success: false, 
                error: 'Unauthorized' 
            });
        }
        
        const matchzyData = req.body;
        
        console.log('üìù [MatchZy] –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞:', {
            matchId: matchzyData.matchId,
            map: matchzyData.mapName,
            teams: `${matchzyData.team1?.name} vs ${matchzyData.team2?.name}`
        });
        
        // 2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        const result = await StatsProcessor.processMatchZyData(matchzyData);
        
        // 3. –ï—Å–ª–∏ –º–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        if (result.status === 'processed' && result.match_id) {
            console.log('üîç [MatchZy] –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π...');
            
            // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
            const participants = await pool.query(`
                SELECT DISTINCT user_id 
                FROM player_match_stats 
                WHERE match_id = $1
            `, [result.match_id]);
            
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥–æ–≥–æ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
            for (const participant of participants.rows) {
                const anomalyResult = await AnomalyDetector.detectAnomalies(
                    participant.user_id,
                    result.match_id
                );
                
                // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ - —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å Trust Score
                if (anomalyResult.risk_level === 'CRITICAL' || 
                    anomalyResult.risk_level === 'HIGH') {
                    await AnomalyDetector.adjustTrustScoreOnAnomalies(
                        participant.user_id,
                        anomalyResult.anomalies
                    );
                }
            }
        }
        
        res.json({
            success: true,
            ...result
        });
        
    } catch (error) {
        console.error('‚ùå [MatchZy] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Failed to process stats' 
        });
    }
});

/**
 * POST /api/matchzy/demo
 * Upload demo —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
router.post('/demo', async (req, res) => {
    console.log('üìπ [MatchZy] –ü–æ–ª—É—á–µ–Ω demo —Ñ–∞–π–ª');
    
    try {
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —Ö—Ä–∞–Ω–µ–Ω–∏–µ demo –¥–æ–±–∞–≤–∏–º –≤ –í–∞—Ä–∏–∞–Ω—Ç–µ 3
        res.json({ 
            success: true, 
            message: 'Demo received (storage not implemented yet)' 
        });
    } catch (error) {
        console.error('‚ùå [MatchZy] –û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ demo:', error);
        res.status(500).json({ success: false, error: 'Failed to upload demo' });
    }
});

module.exports = router;

