/**
 * üéÆ MATCHZY WEBHOOK API
 * –ü—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç MatchZy plugin
 * 
 * @version 1.0.0
 * @date 2025-10-02
 */

const express = require('express');
const router = express.Router();
const StatsProcessor = require('../services/stats/StatsProcessor');
const AnomalyDetector = require('../services/stats/AnomalyDetector');

/**
 * POST /api/matchzy/match-end
 * Webhook –æ—Ç MatchZy –∫–æ–≥–¥–∞ –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω (—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î)
 */
router.post('/match-end', async (req, res) => {
    console.log('üéØ [MatchZy] –ü–æ–ª—É—á–µ–Ω webhook');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env)
        if (process.env.MATCHZY_SECRET_TOKEN) {
            const token = req.headers['x-matchzy-token'] || 
                         req.headers['authorization']?.replace('Bearer ', '');
            
            console.log('üîë [MatchZy] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:');
            console.log('   –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:', token ? token.substring(0, 20) + '...' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢');
            console.log('   –û–∂–∏–¥–∞–µ–º—ã–π —Ç–æ–∫–µ–Ω:', process.env.MATCHZY_SECRET_TOKEN ? process.env.MATCHZY_SECRET_TOKEN.substring(0, 20) + '...' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
            console.log('   Headers:', JSON.stringify(req.headers));
            
            if (token !== process.env.MATCHZY_SECRET_TOKEN) {
                console.log('‚ùå [MatchZy] –¢–æ–∫–µ–Ω—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
                return res.status(401).json({ 
                    success: false, 
                    error: 'Unauthorized' 
                });
            }
            
            console.log('‚úÖ [MatchZy] –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
        } else {
            console.log('‚ö†Ô∏è [MatchZy] MATCHZY_SECRET_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
        }
        
        const eventData = req.body;
        const { matchid, event, winner, team1_series_score, team2_series_score } = eventData;
        
        // –§–ò–õ–¨–¢–†–£–ï–ú: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ series_end
        if (event !== 'series_end') {
            console.log(`‚ÑπÔ∏è [MatchZy] –°–æ–±—ã—Ç–∏–µ "${event}" –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è (–∂–¥–µ–º series_end)`);
            return res.status(200).send('OK'); // –í—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200!
        }
        
        if (!matchid) {
            console.log('‚ö†Ô∏è [MatchZy] matchid –Ω–µ —É–∫–∞–∑–∞–Ω –≤ webhook');
            return res.status(200).send('OK'); // –í—Å—ë —Ä–∞–≤–Ω–æ 200
        }
        
        console.log(`üìä [MatchZy] series_end –ø–æ–ª—É—á–µ–Ω:`, {
            matchid,
            score: `${team1_series_score || 0}:${team2_series_score || 0}`,
            winner: winner?.team || 'N/A'
        });
        
        // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É —á—Ç–æ webhook –ø–æ–ª—É—á–µ–Ω
        res.status(200).send('OK');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–µ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫ —á—Ç–æ–±—ã MatchZy —É—Å–ø–µ–ª –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î)
        setTimeout(async () => {
            try {
                console.log(`‚è≥ [MatchZy] –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è matchid=${matchid}...`);
                const mid = parseInt(matchid);
                await importStatsForMatch(mid);
                
                // –°–≤—è–∑—ã–≤–∞–µ–º matchid —Å –Ω–∞—à–∏–º–∏ –º–∞—Ç—á–∞–º–∏/–ª–æ–±–±–∏
                const { materializePlayerStatsFromMatchzy, linkOurRefs } = require('../services/matchzyPollingService');
                await linkOurRefs(mid);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –º–∞—Ç—á–∞
                await updateTournamentMatchScore(mid);
                
                // –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ–º player_match_stats –∏–∑ matchzy_* ‚Üí –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
                await materializePlayerStatsFromMatchzy(mid);
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MVP –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö –∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–∞—Ç—á–µ–π
                try {
                    const MVPCalculator = require('../services/mvpCalculator');
                    const mvpResult = await MVPCalculator.calculateMatchMVP(mid);
                    if (mvpResult?.mvp) {
                        console.log(`üèÜ [MatchZy] MVP: ${mvpResult.mvp.name} (${mvpResult.mvp.mvp_score.toFixed(2)} –æ—á–∫–æ–≤)`);
                    }
                } catch (mvpError) {
                    console.error(`‚ö†Ô∏è [MatchZy] –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ MVP:`, mvpError.message);
                }
            } catch (error) {
                console.error(`‚ùå [MatchZy] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è matchid=${matchid}:`, error.message);
            }
        }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∞
        
    } catch (error) {
        console.error('‚ùå [MatchZy] –û—à–∏–±–∫–∞ webhook:', error);
        res.status(200).send('OK'); // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200
    }
});

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –º–∞—Ç—á–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
 */
async function updateTournamentMatchScore(matchid) {
    const pool = require('../db');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –∏–∑ matchzy_matches
        const matchzyResult = await pool.query(
            `SELECT our_match_id, tournament_lobby_id, team1_score, team2_score, winner
             FROM matchzy_matches 
             WHERE matchid = $1`,
            [matchid]
        );
        
        if (!matchzyResult.rows[0]) {
            console.log(`‚ÑπÔ∏è [updateScore] –ú–∞—Ç—á ${matchid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ matchzy_matches`);
            return;
        }
        
        const { our_match_id, tournament_lobby_id, team1_score, team2_score, winner } = matchzyResult.rows[0];
        
        // –ï—Å–ª–∏ –Ω–µ—Ç our_match_id –∏–ª–∏ –Ω–µ—Ç tournament_lobby_id - —ç—Ç–æ –Ω–µ —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –º–∞—Ç—á
        if (!our_match_id || !tournament_lobby_id) {
            console.log(`‚ÑπÔ∏è [updateScore] –ú–∞—Ç—á ${matchid} –Ω–µ —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π (our_match_id=${our_match_id}, tournament_lobby_id=${tournament_lobby_id})`);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º team1_id –∏ team2_id –∏–∑ matches
        const matchResult = await pool.query(
            `SELECT team1_id, team2_id FROM matches WHERE id = $1`,
            [our_match_id]
        );
        
        if (!matchResult.rows[0]) {
            console.log(`‚ö†Ô∏è [updateScore] –ú–∞—Ç—á ${our_match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ matches`);
            return;
        }
        
        const { team1_id, team2_id } = matchResult.rows[0];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º winner_team_id –Ω–∞ –æ—Å–Ω–æ–≤–µ winner ('team1' –∏–ª–∏ 'team2')
        let winner_team_id = null;
        if (winner === 'team1' && team1_id) {
            winner_team_id = team1_id;
        } else if (winner === 'team2' && team2_id) {
            winner_team_id = team2_id;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á
        await pool.query(
            `UPDATE matches 
             SET score1 = $1, score2 = $2, winner_team_id = $3, status = 'completed'
             WHERE id = $4`,
            [team1_score || 0, team2_score || 0, winner_team_id, our_match_id]
        );
        
        console.log(`‚úÖ [updateScore] –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç –º–∞—Ç—á–∞ ${our_match_id}: ${team1_score}:${team2_score}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner_team_id || '–Ω–µ—Ç'}`);
        
    } catch (error) {
        console.error(`‚ùå [updateScore] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –¥–ª—è matchid=${matchid}:`, error.message);
    }
}

/**
 * –ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞ –∏–∑ –ë–î —Å–µ—Ä–≤–µ—Ä–∞
 */
async function importStatsForMatch(matchid) {
    const pool = require('../db');
    const { withMySql } = require('../services/matchzyPollingService');
    
    console.log(`üîç [MatchZy] –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è matchid=${matchid}`);
    
    try {
        // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ matchid (–º–æ–∂–µ—Ç –±—ã—Ç—å matchId –∏–ª–∏ lobbyId)
        const extractedId = deriveLobbyIdFromMatchId(matchid);
        
        if (!extractedId) {
            console.log(`‚ö†Ô∏è [MatchZy] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ matchid=${matchid}`);
            return;
        }
        
        console.log(`üîç [MatchZy] –ò–∑–≤–ª–µ—á–µ–Ω ID=${extractedId} –∏–∑ matchid=${matchid}`);
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–µ –ª–æ–±–±–∏ (match_lobbies)
        let lobbyType = null;
        let lobbyId = null;
        let matchId = null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω–æ–µ –ª–æ–±–±–∏ –ø–æ match_id
        const tournamentMatchResult = await pool.query(
            `SELECT ml.id as lobby_id, ml.match_id 
             FROM match_lobbies ml 
             WHERE ml.match_id = $1`,
            [extractedId]
        );
        
        if (tournamentMatchResult.rows[0]) {
            lobbyType = 'tournament';
            lobbyId = tournamentMatchResult.rows[0].lobby_id;
            matchId = tournamentMatchResult.rows[0].match_id;
            console.log(`üèÜ [MatchZy] –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–µ –ª–æ–±–±–∏: lobby_id=${lobbyId}, match_id=${matchId}`);
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–±–±–∏ (admin_match_lobbies)
            const adminLobbyResult = await pool.query(
                'SELECT id, server_id FROM admin_match_lobbies WHERE id = $1',
                [extractedId]
            );
            
            if (adminLobbyResult.rows[0]) {
                lobbyType = 'admin';
                lobbyId = extractedId;
                console.log(`üéÆ [MatchZy] –ù–∞–π–¥–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–±–±–∏: lobby_id=${lobbyId}`);
            }
        }
        
        if (!lobbyId) {
            console.log(`‚ö†Ô∏è [MatchZy] –õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ID=${extractedId}`);
            return;
        }
        
        // 3. –ü–æ–ª—É—á–∞–µ–º server_id –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ MySQL –ë–î —Å–µ—Ä–≤–µ—Ä–∞
        let serverId = null;
        if (lobbyType === 'admin') {
            const lobbyResult = await pool.query(
                'SELECT server_id FROM admin_match_lobbies WHERE id = $1',
                [lobbyId]
            );
            
            if (!lobbyResult.rows[0]?.server_id) {
                console.log(`‚ö†Ô∏è [MatchZy] –ù–µ –Ω–∞–π–¥–µ–Ω server_id –¥–ª—è admin lobby_id=${lobbyId}`);
                return;
            }
            
            serverId = lobbyResult.rows[0].server_id;
            console.log(`üñ•Ô∏è [MatchZy] –ù–∞–π–¥–µ–Ω server_id=${serverId} –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–æ–±–±–∏`);
        } else if (lobbyType === 'tournament') {
            // –ü–æ–ª—É—á–∞–µ–º server_id –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –ª–æ–±–±–∏
            const lobbyResult = await pool.query(
                'SELECT server_id FROM match_lobbies WHERE id = $1',
                [lobbyId]
            );
            
            if (!lobbyResult.rows[0]?.server_id) {
                console.log(`‚ö†Ô∏è [MatchZy] –ù–µ –Ω–∞–π–¥–µ–Ω server_id –¥–ª—è tournament lobby_id=${lobbyId}`);
                return;
            }
            
            serverId = lobbyResult.rows[0].server_id;
            console.log(`üñ•Ô∏è [MatchZy] –ù–∞–π–¥–µ–Ω server_id=${serverId} –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –ª–æ–±–±–∏`);
        }
        
        // 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await withMySql(async (conn) => {
            console.log(`üì• [MatchZy] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —Å–µ—Ä–≤–µ—Ä–∞...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
            const [matches] = await conn.execute(
                'SELECT * FROM matchzy_stats_matches WHERE matchid = ?',
                [matchid]
            );
            
            if (matches.length === 0) {
                console.log(`‚ö†Ô∏è [MatchZy] –ú–∞—Ç—á ${matchid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î —Å–µ—Ä–≤–µ—Ä–∞ (–µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω?)`);
                return;
            }
            
            const matchRow = matches[0];
            console.log(`‚úÖ [MatchZy] –ù–∞–π–¥–µ–Ω –º–∞—Ç—á: ${matchRow.team1_name} ${matchRow.team1_score}:${matchRow.team2_score} ${matchRow.team2_name}`);
            
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á
            const { importMatchFromMySql } = require('../services/matchzyPollingService');
            await importMatchFromMySql(matchRow, conn);
            
            console.log(`‚úÖ [MatchZy] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞ ${matchid} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!`);
            
        }, serverId);
        
    } catch (error) {
        console.error(`‚ùå [MatchZy] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:`, error.message);
        throw error;
    }
}

/**
 * –ò–∑–≤–ª–µ—á—å ID –∏–∑ matchid (–Ω–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: matchid = ID * 1000 + –º–∏–ª–∏—Å–µ–∫—É–Ω–¥—ã)
 */
function deriveLobbyIdFromMatchId(matchid) {
    try {
        // –ù–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: matchid = (ID * 1000) + (timestamp % 1000)
        // –î–µ–ª–∏–º –Ω–∞ 1000 –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑
        const id = Math.floor(matchid / 1000);
        return Number.isInteger(id) && id > 0 ? id : null;
    } catch (_) {
        return null;
    }
}

/**
 * POST /api/matchzy/import-match-stats/:matchId
 * –†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –º–∞—Ç—á–∞
 */
router.post('/import-match-stats/:matchId', async (req, res) => {
    try {
        const matchId = parseInt(req.params.matchId);
        
        if (!matchId || isNaN(matchId)) {
            return res.status(400).json({ 
                success: false, 
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –º–∞—Ç—á–∞' 
            });
        }
        
        console.log(`üì• [Manual Import] –ó–∞–ø—Ä–æ—Å –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è match_id=${matchId}`);
        
        const pool = require('../db');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ –∏ –ø–æ–ª—É—á–∞–µ–º lobby_id
        const matchResult = await pool.query(
            `SELECT ml.id as lobby_id, m.id as match_id, m.team1_name, m.team2_name
             FROM matches m
             LEFT JOIN match_lobbies ml ON ml.match_id = m.id
             WHERE m.id = $1`,
            [matchId]
        );
        
        if (!matchResult.rows[0]) {
            return res.status(404).json({ 
                success: false, 
                error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }
        
        const matchData = matchResult.rows[0];
        console.log(`‚úÖ [Manual Import] –ù–∞–π–¥–µ–Ω –º–∞—Ç—á: ${matchData.team1_name} vs ${matchData.team2_name}`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º matchid –Ω–∞ –æ—Å–Ω–æ–≤–µ match_id (–∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à—É —Ñ–æ—Ä–º—É–ª—É)
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π matchid –≤ matchzy_matches –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        const existingResult = await pool.query(
            `SELECT matchid FROM matchzy_matches WHERE our_match_id = $1 ORDER BY matchid DESC LIMIT 1`,
            [matchId]
        );
        
        let matchid;
        if (existingResult.rows[0]) {
            matchid = existingResult.rows[0].matchid;
            console.log(`üîç [Manual Import] –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π matchid=${matchid}`);
        } else {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º matchid –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º—É–ª—ã
            matchid = (matchId * 1000) + Math.floor(Math.random() * 1000);
            console.log(`üÜï [Manual Import] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π matchid=${matchid}`);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤ —Ñ–æ–Ω–µ
        setTimeout(async () => {
            try {
                console.log(`‚è≥ [Manual Import] –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è matchid=${matchid}...`);
                
                await importStatsForMatch(matchid);
                
                const { materializePlayerStatsFromMatchzy, linkOurRefs } = require('../services/matchzyPollingService');
                await linkOurRefs(matchid);
                await updateTournamentMatchScore(matchid);
                await materializePlayerStatsFromMatchzy(matchid);
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MVP
                try {
                    const MVPCalculator = require('../services/mvpCalculator');
                    await MVPCalculator.calculateMatchMVP(matchid);
                } catch (mvpError) {
                    console.error(`‚ö†Ô∏è [Manual Import] –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ MVP:`, mvpError.message);
                }
                
                console.log(`‚úÖ [Manual Import] –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è match_id=${matchId}`);
            } catch (error) {
                console.error(`‚ùå [Manual Import] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:`, error.message);
            }
        }, 100);
        
        res.json({ 
            success: true, 
            message: '–ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω',
            matchid 
        });
        
    } catch (error) {
        console.error('‚ùå [Manual Import] –û—à–∏–±–∫–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

/**
 * POST /api/matchzy/stats
 * Webhook –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç MatchZy (legacy, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
router.post('/stats', async (req, res) => {
    console.log('üìä [MatchZy] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç MatchZy webhook (legacy)');
    
    try {
        // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
        const token = req.headers['x-matchzy-token'] || 
                     req.headers['authorization']?.split(' ')[1];
        
        if (!token || token !== process.env.MATCHZY_SECRET_TOKEN) {
            console.log('‚ùå [MatchZy] Unauthorized webhook attempt');
            return res.status(401).json({ 
                success: false, 
                error: 'Unauthorized' 
            });
        }
        
        const matchzyData = req.body;
        
        console.log('üìù [MatchZy] –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞:', {
            matchId: matchzyData.matchId,
            map: matchzyData.mapName,
            teams: `${matchzyData.team1?.name} vs ${matchzyData.team2?.name}`
        });
        
        // 2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        const result = await StatsProcessor.processMatchZyData(matchzyData);
        
        // 3. –ï—Å–ª–∏ –º–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        if (result.status === 'processed' && result.match_id) {
            console.log('üîç [MatchZy] –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π...');
            
            // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
            const participants = await pool.query(`
                SELECT DISTINCT user_id 
                FROM player_match_stats 
                WHERE match_id = $1
            `, [result.match_id]);
            
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥–æ–≥–æ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
            for (const participant of participants.rows) {
                const anomalyResult = await AnomalyDetector.detectAnomalies(
                    participant.user_id,
                    result.match_id
                );
                
                // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ - —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å Trust Score
                if (anomalyResult.risk_level === 'CRITICAL' || 
                    anomalyResult.risk_level === 'HIGH') {
                    await AnomalyDetector.adjustTrustScoreOnAnomalies(
                        participant.user_id,
                        anomalyResult.anomalies
                    );
                }
            }
        }
        
        res.json({
            success: true,
            ...result
        });
        
    } catch (error) {
        console.error('‚ùå [MatchZy] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Failed to process stats' 
        });
    }
});

/**
 * POST /api/matchzy/demo
 * Upload demo —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
router.post('/demo', async (req, res) => {
    console.log('üìπ [MatchZy] –ü–æ–ª—É—á–µ–Ω demo —Ñ–∞–π–ª');
    
    try {
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —Ö—Ä–∞–Ω–µ–Ω–∏–µ demo –¥–æ–±–∞–≤–∏–º –≤ –í–∞—Ä–∏–∞–Ω—Ç–µ 3
        res.json({ 
            success: true, 
            message: 'Demo received (storage not implemented yet)' 
        });
    } catch (error) {
        console.error('‚ùå [MatchZy] –û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ demo:', error);
        res.status(500).json({ success: false, error: 'Failed to upload demo' });
    }
});

module.exports = router;

