/**
 * üéÆ MATCHZY WEBHOOK API
 * –ü—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç MatchZy plugin
 * 
 * @version 1.0.0
 * @date 2025-10-02
 */

const express = require('express');
const router = express.Router();
const StatsProcessor = require('../services/stats/StatsProcessor');
const AnomalyDetector = require('../services/stats/AnomalyDetector');

/**
 * POST /api/matchzy/stats
 * Webhook –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç MatchZy
 */
router.post('/stats', async (req, res) => {
    console.log('üìä [MatchZy] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç MatchZy webhook');
    
    try {
        // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
        const token = req.headers['x-matchzy-token'] || 
                     req.headers['authorization']?.split(' ')[1];
        
        if (!token || token !== process.env.MATCHZY_SECRET_TOKEN) {
            console.log('‚ùå [MatchZy] Unauthorized webhook attempt');
            return res.status(401).json({ 
                success: false, 
                error: 'Unauthorized' 
            });
        }
        
        const matchzyData = req.body;
        
        console.log('üìù [MatchZy] –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞:', {
            matchId: matchzyData.matchId,
            map: matchzyData.mapName,
            teams: `${matchzyData.team1?.name} vs ${matchzyData.team2?.name}`
        });
        
        // 2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        const result = await StatsProcessor.processMatchZyData(matchzyData);
        
        // 3. –ï—Å–ª–∏ –º–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        if (result.status === 'processed' && result.match_id) {
            console.log('üîç [MatchZy] –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π...');
            
            // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
            const participants = await pool.query(`
                SELECT DISTINCT user_id 
                FROM player_match_stats 
                WHERE match_id = $1
            `, [result.match_id]);
            
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥–æ–≥–æ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
            for (const participant of participants.rows) {
                const anomalyResult = await AnomalyDetector.detectAnomalies(
                    participant.user_id,
                    result.match_id
                );
                
                // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ - —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å Trust Score
                if (anomalyResult.risk_level === 'CRITICAL' || 
                    anomalyResult.risk_level === 'HIGH') {
                    await AnomalyDetector.adjustTrustScoreOnAnomalies(
                        participant.user_id,
                        anomalyResult.anomalies
                    );
                }
            }
        }
        
        res.json({
            success: true,
            ...result
        });
        
    } catch (error) {
        console.error('‚ùå [MatchZy] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Failed to process stats' 
        });
    }
});

/**
 * POST /api/matchzy/demo
 * Upload demo —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
router.post('/demo', async (req, res) => {
    console.log('üìπ [MatchZy] –ü–æ–ª—É—á–µ–Ω demo —Ñ–∞–π–ª');
    
    try {
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —Ö—Ä–∞–Ω–µ–Ω–∏–µ demo –¥–æ–±–∞–≤–∏–º –≤ –í–∞—Ä–∏–∞–Ω—Ç–µ 3
        res.json({ 
            success: true, 
            message: 'Demo received (storage not implemented yet)' 
        });
    } catch (error) {
        console.error('‚ùå [MatchZy] –û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ demo:', error);
        res.status(500).json({ success: false, error: 'Failed to upload demo' });
    }
});

module.exports = router;

