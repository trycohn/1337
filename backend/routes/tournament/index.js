// backend/routes/tournament/index.js
//
// üèóÔ∏è –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –¢–£–†–ù–ò–†–û–í v4.0 (–ë–ï–ó –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ï–¢–ö–ò)
// ====================================================
// 
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –∑–∞–º–µ–Ω—è–µ—Ç –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π —Ñ–∞–π–ª tournaments.js –Ω–∞ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
// –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º Clean Architecture –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.
//
// üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥—É–ª–µ–π:
// ‚îú‚îÄ‚îÄ üéØ controllers/tournament/ - HTTP-—Å–ª–æ–π (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤)
// ‚îú‚îÄ‚îÄ üîß services/tournament/   - –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
// ‚îú‚îÄ‚îÄ üóÑÔ∏è repositories/tournament/ - –°–ª–æ–π –¥–∞–Ω–Ω—ã—Ö (—Ä–∞–±–æ—Ç–∞ —Å –ë–î)
// ‚îú‚îÄ‚îÄ ‚úÖ validators/tournament/ - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
// ‚îî‚îÄ‚îÄ üõ†Ô∏è utils/tournament/      - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
//
// ‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
// ‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
// ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∫–æ–¥–∞
// ‚Ä¢ –õ–µ–≥–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
// ‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID
// ‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
// ‚Ä¢ –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
//
// üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è: –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª tournaments.js —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ tournaments.js.legacy.backup
// üö´ v4.0: –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
//

const express = require('express');
const pool = require('../../db');
const { authenticateToken, verifyEmailRequired, verifyAdminOrCreator } = require('../../middleware/auth');
const TournamentController = require('../../controllers/tournament/TournamentController');
const ParticipantController = require('../../controllers/tournament/ParticipantController');
const MatchController = require('../../controllers/tournament/MatchController');
const AdminController = require('../../controllers/tournament/AdminController');
const ChatController = require('../../controllers/tournament/ChatController');
const MixTeamController = require('../../controllers/tournament/MixTeamController');
const FullMixController = require('../../controllers/tournament/FullMixController');
const { BracketController } = require('../../controllers/tournament/BracketController');
const MatchLobbyController = require('../../controllers/matchLobby/MatchLobbyController');
const ShareController = require('../../controllers/tournament/ShareController');
const TournamentStatsController = require('../../controllers/tournament/TournamentStatsController');

const router = express.Router();

// üìã **–û–°–ù–û–í–ù–´–ï –¢–£–†–ù–ò–†–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò**

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä (–î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–ï–†–ï–î /:id!)
router.get('/games', TournamentController.getGames);

// üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–ï–†–ï–î /:id!)
router.get('/seeding-types', BracketController.getSeedingTypes);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–ï–†–ï–î /:id!)
router.get('/winners', TournamentController.getWinners);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
router.get('/', TournamentController.getAllTournaments);

// üÜï –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã (—Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
router.get('/my', authenticateToken, TournamentController.getMyTournaments);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ ID
router.get('/:id', TournamentController.getTournamentById);

// üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
router.get('/:id/results', TournamentController.getTournamentResults);

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
router.post('/', authenticateToken, verifyEmailRequired, TournamentController.createTournament);

// üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ —Ñ–∏–Ω–∞–ª–∞ —Å–µ—Ä–∏–∏
router.put('/:id/series-final-flag', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.updateSeriesFinalFlag);

// üÜï –°–≤—è–∑–∏ —Ñ–∏–Ω–∞–ª ‚Üî –æ—Ç–±–æ—Ä–æ—á–Ω—ã–µ
router.put('/:id/qualifiers', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.setFinalQualifiers);
router.get('/:id/qualifiers', TournamentController.getFinalQualifiers);
router.post('/:id/qualifiers/sync', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.syncQualifiers);

// üÜï Live‚Äë–ø–æ–∏—Å–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
router.get('/search/live', TournamentController.searchTournaments);

// üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
router.delete('/:id', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.deleteTournament);

// ‚öñÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
router.put('/:id/rules', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.updateRules);

// üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞  
router.put('/:id/description', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.updateDescription);

// üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
router.put('/:id/rating-type', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.updateRatingType);

// üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (MIX)
router.put('/:id/mix-link-requirements', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.updateMixLinkRequirements);

// üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Ç—É—Ä–Ω–∏—Ä–∞
router.put('/:id/game', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.updateGame);

// üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
router.put('/:id/format', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.updateFormat);

// üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
router.put('/:id/start-date', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.updateStartDate);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏
router.put('/:id/lobby-enabled', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.updateLobbyEnabled);

// üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
router.put('/:id/bracket-type', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.updateBracketType);

// üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
router.put('/:id/team-size', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.updateTeamSize);

// üéÆ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–¢–ß–ê–ú–ò** (–ë–ï–ó –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ï–¢–ö–ò)

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
router.post('/:id/clear-match-results', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, MatchController.clearMatchResults);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
router.get('/:id/matches', MatchController.getMatches);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
router.get('/:id/matches/:matchId', MatchController.getMatch);

// üîó –ü—É–±–ª–∏—á–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞ (–¥–ª—è —à–µ–π—Ä–∏–Ω–≥–∞)
router.get('/:id/match/:matchId', async (req, res) => {
    const { id: tournamentId, matchId } = req.params;
    
    console.log(`üîó [Public Match Route] –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–∞ ${matchId} —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
    
    try {
        // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö JOIN'–æ–≤
        const matchResult = await pool.query(`
            SELECT 
                m.*,
                t.name as tournament_name,
                t.game,
                t.type as tournament_type,
                (
                    SELECT json_agg(
                        json_build_object(
                            'map_name', ms.map_name,
                            'action_type', ms.action_type,
                            'team_id', ms.team_id,
                            'action_order', ms.action_order
                        ) ORDER BY ms.action_order
                    )
                    FROM map_selections ms
                    WHERE ms.lobby_id = (
                        SELECT id FROM match_lobbies WHERE match_id = m.id ORDER BY created_at DESC NULLS LAST LIMIT 1
                    )
                ) as selections
            FROM matches m
            JOIN tournaments t ON m.tournament_id = t.id
            WHERE m.id = $1 AND m.tournament_id = $2
        `, [parseInt(matchId), parseInt(tournamentId)]);
        
        if (matchResult.rows.length === 0) {
            return res.status(404).json({
                success: false,
                message: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
        
        const match = matchResult.rows[0];
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
        let team1 = null, team2 = null;
        
        if (match.team1_id) {
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
            const team1Result = await pool.query(`
                SELECT id, name, creator_id as user_id, 'team' as type
                FROM tournament_teams 
                WHERE id = $1
            `, [match.team1_id]);
            
            if (team1Result.rows.length > 0) {
                team1 = team1Result.rows[0];
                team1.avatar_url = null; // –£ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤
            } else {
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
                const participant1Result = await pool.query(`
                    SELECT tp.id, COALESCE(u.username, tp.name) as name, u.avatar_url, u.id as user_id, 'individual' as type
                    FROM tournament_participants tp
                    LEFT JOIN users u ON tp.user_id = u.id
                    WHERE tp.id = $1
                `, [match.team1_id]);
                
                if (participant1Result.rows.length > 0) {
                    team1 = participant1Result.rows[0];
                }
            }
        }
        
        if (match.team2_id) {
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
            const team2Result = await pool.query(`
                SELECT id, name, creator_id as user_id, 'team' as type
                FROM tournament_teams 
                WHERE id = $1
            `, [match.team2_id]);
            
            if (team2Result.rows.length > 0) {
                team2 = team2Result.rows[0];
                team2.avatar_url = null; // –£ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤
            } else {
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
                const participant2Result = await pool.query(`
                    SELECT tp.id, COALESCE(u.username, tp.name) as name, u.avatar_url, u.id as user_id, 'individual' as type
                    FROM tournament_participants tp
                    LEFT JOIN users u ON tp.user_id = u.id
                    WHERE tp.id = $1
                `, [match.team2_id]);
                
                if (participant2Result.rows.length > 0) {
                    team2 = participant2Result.rows[0];
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∫ –º–∞—Ç—á—É
        match.team1 = team1;
        match.team2 = team2;
        match.team1_name = team1?.name || 'TBD';
        match.team2_name = team2?.name || 'TBD';
        
        // üó∫Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π –º–∞–ø–ø—É–ª —Ç—É—Ä–Ω–∏—Ä–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
        try {
            const mapsRes = await pool.query(
                `SELECT 
                    tm.display_order,
                    tm.map_name,
                    lower(regexp_replace(tm.map_name, '^de[_-]?', '')) AS map_key_norm,
                    COALESCE(m.display_name, tm.map_name) AS display_name,
                    m.image_url
                 FROM tournament_maps tm
                 LEFT JOIN maps m
                   ON lower(regexp_replace(m.name, '^de[_-]?', '')) = lower(regexp_replace(tm.map_name, '^de[_-]?', ''))
                 WHERE tm.tournament_id = $1
                 ORDER BY tm.display_order ASC, tm.id ASC`,
                [parseInt(tournamentId)]
            );

            const details = (mapsRes.rows || []).map(r => ({
                order: r.display_order,
                name: r.map_name,
                key: r.map_key_norm,
                display_name: r.display_name,
                image_url: r.image_url || null
            }));
            match.available_map_details = details;
            match.available_maps = details.map(d => d.key);
        } catch (e) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å tournament_maps:', e.message);
            match.available_map_details = [];
            match.available_maps = [];
        }

        // –ï—Å–ª–∏ –ø—É–ª –∫–∞—Ä—Ç –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –º–∞–ø–ø—É–ª –∏–∑ —Ç–∞–±–ª–∏—Ü—ã default_map_pool
        if (!match.available_map_details || match.available_map_details.length === 0) {
            try {
                const poolRes = await pool.query(`
                    SELECT map_name AS key, display_order
                    FROM default_map_pool
                    ORDER BY display_order ASC, id ASC
                `);
                const fallbackKeys = (poolRes.rows || []).map(r => r.key);

                // –ü–æ–ª—É—á–∞–µ–º display_name –∏ image_url –∏–∑ —Ç–∞–±–ª–∏—Ü—ã maps, –µ—Å–ª–∏ –µ—Å—Ç—å
                const mapsMetaRes = await pool.query(
                    `SELECT 
                        lower(regexp_replace(name, '^de[_-]?', '')) AS key,
                        COALESCE(display_name, name) AS display_name,
                        image_url
                     FROM maps
                     WHERE lower(regexp_replace(name, '^de[_-]?', '')) = ANY($1)`,
                    [fallbackKeys]
                );
                const metaByKey = new Map((mapsMetaRes.rows || []).map(r => [r.key, r]));

                match.available_map_details = fallbackKeys.map((key, idx) => {
                    const meta = metaByKey.get(key);
                    const fallbackDisplay = (key === 'dust2' ? 'Dust II' : key.charAt(0).toUpperCase() + key.slice(1));
                    return {
                        order: idx + 1,
                        name: key,
                        key,
                        display_name: (meta && meta.display_name) || fallbackDisplay,
                        image_url: meta ? meta.image_url : null
                    };
                });
                match.available_maps = fallbackKeys;
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –º–∞–ø–ø—É–ª–∞:', e.message);
                match.available_map_details = [];
                match.available_maps = [];
            }
        }

        console.log(`‚úÖ [Public Match Route] –ú–∞—Ç—á –Ω–∞–π–¥–µ–Ω: ${match.team1_name} vs ${match.team2_name}`);
        
        res.json({
            success: true,
            data: match
        });
        
    } catch (error) {
        console.error(`‚ùå [Public Match Route] –û—à–∏–±–∫–∞:`, error.message);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞',
            error: error.message
        });
    }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —à–µ–π—Ä–∏–Ω–≥–∞ –º–∞—Ç—á–∞
router.get('/:id/match/:matchId/share-image', ShareController.generateMatchShareImage);

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
router.post('/:id/matches/:matchId/result', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, MatchController.saveMatchResult);

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
router.put('/:id/matches/:matchId/result', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, MatchController.editMatchResult);

// üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò** (–ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´)

// –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
router.post('/:id/participate', authenticateToken, verifyEmailRequired, ParticipantController.participateInTournament);

// –û—Ç–º–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è
router.delete('/:id/participate', authenticateToken, verifyEmailRequired, ParticipantController.withdrawFromTournament);

// üë§ –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
router.post('/:id/add-participant', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, ParticipantController.addParticipant);

// üë• –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –∏–≥—Ä–æ–∫–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤)
router.post('/:id/add-team', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, ParticipantController.addTeamWithPlayers);

// üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–ê–í–û–ú –ö–û–ú–ê–ù–î
const TeamMemberController = require('../../controllers/tournament/TeamMemberController');
// –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
router.post('/:id/teams/:teamId/members', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TeamMemberController.addTeamMember);
// –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
router.delete('/:id/teams/:teamId/members/:participantId', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TeamMemberController.removeTeamMember);
// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
router.get('/:id/teams/:teamId/members', authenticateToken, TeamMemberController.getTeamMembers);

// üìã –õ–ò–°–¢ –û–ñ–ò–î–ê–ù–ò–Ø
const WaitingListController = require('../../controllers/tournament/WaitingListController');
// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–∏—Å—Ç—É –æ–∂–∏–¥–∞–Ω–∏—è (–¥–ª—è –∏–≥—Ä–æ–∫–æ–≤)
router.post('/:id/waiting-list/join', authenticateToken, verifyEmailRequired, WaitingListController.joinWaitingList);
// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.get('/:id/waiting-list', authenticateToken, verifyAdminOrCreator, WaitingListController.getWaitingList);
// –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –ª–∏—Å—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.post('/:id/waiting-list/:participantId/assign', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, WaitingListController.assignToTeam);

// üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
router.delete('/:id/participants/:participantId', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, ParticipantController.removeParticipant);

// ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
router.put('/:id/participants/:participantId/name', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, ParticipantController.updateParticipantName);

// üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
router.post('/:id/invite', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, ParticipantController.inviteToTournament);

// ü§ù –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä
router.post('/:id/handle-invitation', authenticateToken, verifyEmailRequired, ParticipantController.handleInvitation);

// üîÑ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ò–ö–° –ö–û–ú–ê–ù–î–ê–ú–ò** (–ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´)

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–∫—Å –∫–æ–º–∞–Ω–¥
router.post('/:id/mix-generate-teams', authenticateToken, verifyAdminOrCreator, MixTeamController.generateMixTeams);

// üîÑ –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (frontend –æ–∂–∏–¥–∞–µ—Ç form-teams)
router.post('/:id/form-teams', authenticateToken, verifyAdminOrCreator, MixTeamController.generateMixTeams);

// üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Å –∫–æ–º–∞–Ω–¥
router.post('/:id/mix-regenerate-teams', authenticateToken, verifyAdminOrCreator, MixTeamController.regenerateMixTeams);

// üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
router.patch('/:id/mix-team-size', authenticateToken, verifyAdminOrCreator, MixTeamController.updateTeamSize);

// üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
router.get('/:id/teams', MixTeamController.getTeams);

// üÜï –ö–∞—Ä—Ç–∞ —Å–æ—Å—Ç–∞–≤–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–µ—Ç–∫–∏ (team_id -> roster)
router.get('/:id/team-rosters', MixTeamController.getTeamRosters);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
router.get('/:id/original-participants', MixTeamController.getOriginalParticipants);

// üëë **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ü–ò–¢–ê–ù–ê–ú–ò –ö–û–ú–ê–ù–î** (–ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê v4.8)

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
router.post('/:id/teams/:teamId/set-captain', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, MixTeamController.setCaptain);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ø–∏—Ç–∞–Ω–µ –∫–æ–º–∞–Ω–¥—ã
router.get('/:id/teams/:teamId/captain', MixTeamController.getTeamCaptain);

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
router.post('/:id/teams/:teamId/auto-assign-captain', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, MixTeamController.autoAssignCaptain);

// –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
router.post('/:id/assign-all-captains', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, MixTeamController.assignAllCaptains);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–ø–∏—Ç–∞–Ω–∞–º —Ç—É—Ä–Ω–∏—Ä–∞
router.get('/:id/captains-stats', MixTeamController.getCaptainsStats);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã
router.get('/:id/teams/:teamId/is-captain/:userId', MixTeamController.isUserCaptain);

// –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤)
router.post('/:id/migrate-captains', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, MixTeamController.migrateCaptains);

// üîÑ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–£–†–ù–ò–†–û–ú** (–ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´)

// –ó–∞–ø—É—Å–∫ —Ç—É—Ä–Ω–∏—Ä–∞
router.post('/:id/start', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.startTournament);

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
router.post('/:id/end', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, TournamentController.endTournament);

// üõ°Ô∏è **–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò**

// –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
router.post('/:id/request-admin', authenticateToken, verifyAdminOrCreator, AdminController.requestAdmin);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
router.get('/:id/admin-request-status', authenticateToken, verifyAdminOrCreator, AdminController.getAdminRequestStatus);

// –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
router.post('/:id/respond-admin-request', authenticateToken, verifyAdminOrCreator, AdminController.respondToAdminRequest);

// –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
router.post('/:id/invite-admin', authenticateToken, verifyAdminOrCreator, AdminController.inviteAdmin);

// –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
router.post('/:id/accept-admin-invitation', authenticateToken, verifyEmailRequired, AdminController.acceptAdminInvitation);

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
router.post('/:id/decline-admin-invitation', authenticateToken, verifyEmailRequired, AdminController.declineAdminInvitation);

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
router.delete('/:id/admins/:userId', authenticateToken, verifyAdminOrCreator, AdminController.removeAdmin);

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
router.post('/admin-invitations/cleanup-expired', authenticateToken, verifyAdminOrCreator, AdminController.cleanupExpiredInvitations);

// üìß –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/admin-invitations/my', authenticateToken, AdminController.getUserInvitations);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
router.get('/admin-invitations/stats', authenticateToken, verifyAdminOrCreator, AdminController.getInvitationStats);

// üí¨ **–ß–ê–¢ –¢–£–†–ù–ò–†–ê**

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
router.get('/:id/chat/messages', authenticateToken, verifyAdminOrCreator, ChatController.getChatMessages);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
router.get('/:id/chat/participants', authenticateToken, verifyAdminOrCreator, ChatController.getChatParticipants);

// ===========================================
// üèóÔ∏è –†–û–£–¢–´ –¢–£–†–ù–ò–†–ù–û–ô –°–ï–¢–ö–ò (–ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê)
// ===========================================

// üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
router.post('/:id/generate-bracket', authenticateToken, verifyAdminOrCreator, BracketController.generateBracket);

// üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
router.post('/:id/regenerate-bracket', authenticateToken, verifyAdminOrCreator, BracketController.regenerateBracket);

// üé≤ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
router.get('/:id/seeding-preview', authenticateToken, verifyAdminOrCreator, BracketController.previewSeeding);

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
router.get('/:id/bracket-statistics', authenticateToken, verifyAdminOrCreator, BracketController.getBracketStatistics);

// üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
router.post('/:id/clear-bracket-results', authenticateToken, verifyAdminOrCreator, BracketController.clearBracketResults);

// üÜï –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∫–∏
router.post('/:id/manual-bracket-edit', authenticateToken, verifyAdminOrCreator, TournamentController.manualBracketEdit);

// ===========================================
// üéÆ –†–û–£–¢–´ –õ–û–ë–ë–ò –ú–ê–¢–ß–ï–ô (CS2)
// ===========================================

// üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
router.put('/:id/lobby-settings', authenticateToken, verifyAdminOrCreator, MatchLobbyController.updateLobbySettings);

// üèÅ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –¥–ª—è –º–∞—Ç—á–∞
router.post('/:tournamentId/matches/:matchId/create-lobby', authenticateToken, verifyAdminOrCreator, MatchLobbyController.createMatchLobby);

// üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –¥–ª—è –º–∞—Ç—á–∞
router.post('/:tournamentId/matches/:matchId/recreate-lobby', authenticateToken, verifyAdminOrCreator, MatchLobbyController.recreateMatchLobby);

// üîé –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏ –º–∞—Ç—á–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
router.get('/:tournamentId/matches/:matchId/active-lobby', authenticateToken, MatchLobbyController.getActiveLobbyByMatch);

// üîé –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–±–±–∏ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Ç—á–µ–π (–±–∞—Ç—á)
router.post('/:tournamentId/matches/active-lobbies', authenticateToken, MatchLobbyController.getActiveLobbiesBatch);

// üîé –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/lobbies/active', authenticateToken, MatchLobbyController.getActiveLobbiesForUser);

// üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏
router.get('/lobby/:lobbyId', authenticateToken, MatchLobbyController.getLobbyInfo);

// ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
router.post('/lobby/:lobbyId/ready', authenticateToken, MatchLobbyController.setReadyStatus);

// üé≤ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
router.post('/lobby/:lobbyId/set-first-picker', authenticateToken, verifyAdminOrCreator, MatchLobbyController.setFirstPicker);

// üó∫Ô∏è –í—ã–±–æ—Ä –∏–ª–∏ –±–∞–Ω –∫–∞—Ä—Ç—ã
router.post('/lobby/:lobbyId/select-map', authenticateToken, MatchLobbyController.selectMap);

// üöÄ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–∏–∫/–±–∞–Ω (–∞–¥–º–∏–Ω —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω—ã)
router.post('/lobby/:lobbyId/start-pickban', authenticateToken, MatchLobbyController.startPickBan);

// üì® –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –ª–æ–±–±–∏
router.post('/:tournamentId/lobby/:lobbyId/resend-invites', authenticateToken, verifyAdminOrCreator, MatchLobbyController.resendLobbyInvitations);

// üîé –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
router.get('/:tournamentId/my-active-lobby', authenticateToken, MatchLobbyController.getUserActiveLobby);

// ===========================================
// üÜï FULL MIX (–±–µ–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π —Å–µ—Ç–∫–∏)
// ===========================================
router.post('/:id/fullmix/start', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.start);
router.post('/:id/fullmix/generate-next', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.generateNext);
router.post('/:id/fullmix/complete-round', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.completeRound);
router.get('/:id/fullmix/standings', FullMixController.standings);
router.get('/:id/fullmix/snapshots', FullMixController.snapshots);
router.get('/:id/fullmix/rounds/:round', FullMixController.getRound);
router.post('/:id/fullmix/rounds/:round/approve', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.approve);
router.post('/:id/fullmix/rounds/:round/reshuffle', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.reshuffle);
router.post('/:id/fullmix/rounds/:round/redraft', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.redraft);
router.post('/:id/fullmix/rounds/:round/confirm-rosters', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.confirmRosters);
router.get('/:id/fullmix/settings', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.settings);
router.put('/:id/fullmix/settings', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.settings);
// PREVIEW (—á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ä–∞—É–Ω–¥–æ–≤): —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã/—Å–æ–∑–¥–∞—Ç–µ–ª–∏
router.post('/:id/fullmix/rounds/:round/preview', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.createPreview);
router.get('/:id/fullmix/rounds/:round/preview', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.getPreview);
router.delete('/:id/fullmix/rounds/:round/preview', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.deletePreview);

// üÜï –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—ã–≤—à–∏–º–∏ (–∞–¥–º–∏–Ω)
router.get('/:id/fullmix/eliminated', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.getEliminated);
router.post('/:id/fullmix/eliminated', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.addEliminated);
router.delete('/:id/fullmix/eliminated', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.deleteEliminated);
router.post('/:id/fullmix/eliminated/recover', authenticateToken, verifyEmailRequired, verifyAdminOrCreator, FullMixController.recoverEliminated);

// üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–£–†–ù–ò–†–û–í (–ù–û–í–û–ï v4.28.0)**

// üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –º–µ—Å—Ç –∫–æ–º–∞–Ω–¥ (–ø—É–±–ª–∏—á–Ω—ã–π)
router.get('/:id/standings', async (req, res) => {
    try {
        const StandingsService = require('../../services/tournament/StandingsService');
        const result = await StandingsService.getTournamentStandings(parseInt(req.params.id));
        res.json(result);
    } catch (error) {
        console.error('‚ùå [Standings] –û—à–∏–±–∫–∞:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—É–±–ª–∏—á–Ω—ã–π)
router.get('/:id/stats', TournamentStatsController.getTournamentStats);

// üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ MVP —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—É–±–ª–∏—á–Ω—ã–π)
router.get('/:id/stats/mvp', TournamentStatsController.getMVP);

// üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø—É–±–ª–∏—á–Ω—ã–π)
// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: most_kills, highest_adr, best_hs, clutch_king, eco_master, most_assists, best_accuracy
router.get('/:id/stats/leaderboard', TournamentStatsController.getLeaderboard);

// üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ (–ø—É–±–ª–∏—á–Ω—ã–π)
router.get('/:id/stats/player/:userId', TournamentStatsController.getPlayerStats);

// üîÑ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω/—Å–æ–∑–¥–∞—Ç–µ–ª—å)
router.post('/:id/stats/recalculate', authenticateToken, TournamentStatsController.recalculateStats);

// üèÜ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MVP –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω/—Å–æ–∑–¥–∞—Ç–µ–ª—å)
router.post('/:id/stats/finalize', authenticateToken, TournamentStatsController.finalizeTournament);

// üìä **–ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê**

// üîç WebSocket —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
router.get('/websocket/stats', authenticateToken, async (req, res) => {
    try {
        const websocketMonitor = require('../../utils/tournament/websocketMonitor');
        const stats = websocketMonitor.getStats();
        
        res.json({
            success: true,
            data: stats,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è WebSocket —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebSocket'
        });
    }
});

module.exports = router; 