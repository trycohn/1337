// backend/routes/tournaments.js
const express = require('express');
const router = express.Router();
const pool = require('../db');
const { authenticateToken, restrictTo, verifyEmailRequired, verifyAdminOrCreator } = require('../middleware/auth');
const { sendNotification, broadcastTournamentUpdate } = require('../notifications');
const { generateBracket } = require('../bracketGenerator');

// üîß –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –§–£–ù–ö–¶–ò–ô –ß–ê–¢–ê
const sendTournamentChatAnnouncement = async (tourName, message, tournamentId) => {
    console.log(`üì¢ [CHAT] –¢—É—Ä–Ω–∏—Ä "${tourName}": ${message}`);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
};

const addUserToTournamentChat = async (tourName, userId, isAdmin = false) => {
    console.log(`‚ûï [CHAT] –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ "${tourName}"`);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π –≤ –∂—É—Ä–Ω–∞–ª —Ç—É—Ä–Ω–∏—Ä–∞
async function logTournamentEvent(tournamentId, userId, eventType, eventData = {}) {
    try {
        console.log('üìä –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ tournament_logs:', {
            tournamentId,
            userId,
            eventType,
            eventData
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tournament_logs —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const tableExists = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'tournament_logs'
            );
        `);
        
        if (!tableExists.rows[0].exists) {
            console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ tournament_logs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }
        
        const result = await pool.query(
            `INSERT INTO tournament_logs (tournament_id, user_id, event_type, event_data)
             VALUES ($1, $2, $3, $4)
             RETURNING id`,
            [tournamentId, userId, eventType, eventData] // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è jsonb
        );
        
        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ tournament_logs, ID:', result.rows[0].id);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        console.error('‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ logTournamentEvent:', {
            message: error.message,
            code: error.code,
            detail: error.detail,
            tournamentId,
            userId,
            eventType,
            eventData
        });
        // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–ª–æ—É
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
router.get('/', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT t.*, 
                   CASE 
                     WHEN t.participant_type = 'solo' THEN (
                       SELECT COUNT(*) FROM tournament_participants tp WHERE tp.tournament_id = t.id
                     )
                     WHEN t.participant_type = 'team' THEN (
                       SELECT COUNT(*) FROM tournament_teams tt WHERE tt.tournament_id = t.id
                     )
                     ELSE 0
                   END AS participant_count
            FROM tournaments t
        `);
        console.log('üîç Tournaments fetched:', result.rows);
        res.json(result.rows); // –£–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤:', err);
        res.status(500).json({ error: err.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
router.get('/games', async (req, res) => {
    console.log('üîç –ó–∞–ø—Ä–æ—Å –∫ /api/tournaments/games –ø–æ–ª—É—á–µ–Ω');
    try {
        const result = await pool.query('SELECT id, name FROM games');
        console.log('üîç Games fetched:', result.rows);
        res.json(result.rows);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', err);
        res.status(500).json({ error: err.message });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
router.post('/', authenticateToken, verifyEmailRequired, async (req, res) => {
    const { name, game, format, participant_type, max_participants, start_date, description, bracket_type, team_size } = req.body;
    try {
        const result = await pool.query(
            `INSERT INTO tournaments
             (name, game, format, created_by, status, participant_type, max_participants, start_date, description, bracket_type, team_size)
             VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING *`,
            [name, game, format, req.user.id, 'active', participant_type, max_participants || null, start_date || null, description || null, bracket_type || null, team_size || 1]
        );
        const tournament = result.rows[0];
        console.log('üîç Tournament created:', result.rows[0]);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        await logTournamentEvent(tournament.id, req.user.id, 'tournament_created', {
            name: tournament.name,
            game: tournament.game,
            format: tournament.format
        });
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç—É—Ä–Ω–∏—Ä–∞
        try {
            const chatRes = await pool.query(
                'INSERT INTO chats (name, type) VALUES ($1, $2) RETURNING id',
                [tournament.name, 'group']
            );
            const tournamentChatId = chatRes.rows[0].id;
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞
            await pool.query(
                'INSERT INTO chat_participants (chat_id, user_id, is_admin) VALUES ($1, $2, $3)',
                [tournamentChatId, req.user.id, true]
            );
            console.log(`–°–æ–∑–¥–∞–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç ${tournamentChatId} –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournament.name}`);
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        }
        res.status(201).json(tournament);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
router.get('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–°: –¥–æ–±–∞–≤–ª—è–µ–º JOIN —Å —Ç–∞–±–ª–∏—Ü–µ–π users –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç–µ–ª—è
        const tournamentResult = await pool.query(`
            SELECT t.*, 
                   u.username as creator_username, 
                   u.avatar_url as creator_avatar_url,
                   u.id as creator_user_id
            FROM tournaments t
            LEFT JOIN users u ON t.created_by = u.id
            WHERE t.id = $1
        `, [id]);
        
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ message: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const tournament = tournamentResult.rows[0];

        // üÜï –ü–û–õ–£–ß–ê–ï–ú –î–ê–ù–ù–´–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í –¢–£–†–ù–ò–†–ê
        const adminsResult = await pool.query(`
            SELECT ta.id, ta.user_id, ta.permissions, ta.created_at,
                   u.username, u.avatar_url
            FROM tournament_admins ta
            JOIN users u ON ta.user_id = u.id
            WHERE ta.tournament_id = $1
            ORDER BY ta.created_at ASC
        `, [id]);

        console.log('üîç DEBUG: –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º:', {
            tournament_id: tournament.id,
            tournament_name: tournament.name,
            created_by: tournament.created_by,
            creator_username: tournament.creator_username,
            creator_avatar_url: tournament.creator_avatar_url,
            admins_count: adminsResult.rows.length
        });

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–≤–∞—Ç–∞—Ä–∫–µ
        let participantsQuery;
        if (tournament.participant_type === 'solo') {
            participantsQuery = `
                SELECT tp.*, tp.faceit_elo, tp.cs2_premier_rank, tp.in_team,
                       u.avatar_url, u.username, 
                       COALESCE(tp.faceit_elo, u.faceit_elo) as faceit_elo_combined,
                       COALESCE(tp.cs2_premier_rank, u.cs2_premier_rank) as cs2_premier_rank_combined
                FROM tournament_participants tp 
                LEFT JOIN users u ON tp.user_id = u.id
                WHERE tp.tournament_id = $1
                ORDER BY tp.created_at ASC
            `;
        } else {
            participantsQuery = `
                SELECT tt.*, u.avatar_url, u.username
                FROM tournament_teams tt
                LEFT JOIN users u ON tt.creator_id = u.id
                WHERE tt.tournament_id = $1
                ORDER BY tt.id ASC
            `;
        }
        
        const participantsResult = await pool.query(participantsQuery, [id]);

        const matchesResult = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, match_number',
            [id]
        );

        // üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const matchesWithMaps = matchesResult.rows.filter(match => match.maps_data);
        if (matchesWithMaps.length > 0) {
            console.log(`üîç DEBUG: –¢—É—Ä–Ω–∏—Ä ${id} - –Ω–∞–π–¥–µ–Ω–æ ${matchesWithMaps.length} –º–∞—Ç—á–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç:`);
            matchesWithMaps.slice(0, 3).forEach(match => {
                console.log(`- –ú–∞—Ç—á ${match.id}: maps_data = ${typeof match.maps_data === 'string' ? match.maps_data.substring(0, 100) + '...' : match.maps_data}`);
            });
        } else {
            console.log(`‚ÑπÔ∏è DEBUG: –¢—É—Ä–Ω–∏—Ä ${id} - –º–∞—Ç—á–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }

        // –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ò –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        let teams = [];
        if (tournament.participant_type === 'team' || tournament.format === 'mix') {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞
            const teamsRes = await pool.query(
                `SELECT tt.id, tt.tournament_id, tt.name, tt.creator_id
                 FROM tournament_teams tt
                 WHERE tt.tournament_id = $1`,
                [id]
            );

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            teams = await Promise.all(teamsRes.rows.map(async (team) => {
                const membersRes = await pool.query(
                    `SELECT tm.team_id, tm.user_id, tm.participant_id, 
                            tp.name, u.username, u.avatar_url, 
                            tp.faceit_elo as tp_faceit_elo, tp.cs2_premier_rank as tp_cs2_premier_rank,
                            u.faceit_elo as user_faceit_elo, u.cs2_premier_rank as user_cs2_premier_rank,
                            COALESCE(tp.faceit_elo, u.faceit_elo, 1000) as faceit_elo,
                            COALESCE(tp.cs2_premier_rank, u.cs2_premier_rank, 5) as cs2_premier_rank
                     FROM tournament_team_members tm
                     LEFT JOIN tournament_participants tp ON tm.participant_id = tp.id
                     LEFT JOIN users u ON tm.user_id = u.id
                     WHERE tm.team_id = $1`,
                    [team.id]
                );

                return {
                    ...team,
                    members: membersRes.rows
                };
            }));
        }

        const responseData = {
            ...tournament,
            participants: participantsResult.rows,
            participant_count: participantsResult.rows.length,
            matches: matchesResult.rows,
            teams: teams, // –ö–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤
            mixed_teams: teams, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ mixed_teams –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            admins: adminsResult.rows // üÜï –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        };
        console.log('üîç Tournament details fetched:', {
            name: responseData.name,
            format: responseData.format,
            participant_type: responseData.participant_type,
            participants: responseData.participants.length,
            matches: responseData.matches.length,
            teams: responseData.teams.length,
            creator: responseData.creator_username,
            admins: responseData.admins.length
        });
        res.json(responseData);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –ù–∞—á–∞–ª–æ —Ç—É—Ä–Ω–∏—Ä–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ in_progress)
router.post('/:id/start', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id } = req.params;
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const tournament = tournamentResult.rows[0];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
        const matchesResult = await pool.query('SELECT COUNT(*) FROM matches WHERE tournament_id = $1', [id]);
        if (parseInt(matchesResult.rows[0].count) === 0) {
            return res.status(400).json({ error: '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É' });
        }
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const updateResult = await pool.query(
            'UPDATE tournaments SET status = $1 WHERE id = $2 RETURNING *',
            ['in_progress', id]
        );
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournament = updateResult.rows[0];
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        let participantsQuery;
        if (updatedTournament.participant_type === 'solo') {
            participantsQuery = `
                SELECT tp.*, tp.faceit_elo, tp.cs2_premier_rank, tp.in_team,
                       u.avatar_url, u.username, 
                       COALESCE(tp.faceit_elo, u.faceit_elo) as faceit_elo_combined,
                       COALESCE(tp.cs2_premier_rank, u.cs2_premier_rank) as cs2_premier_rank_combined
                FROM tournament_participants tp 
                LEFT JOIN users u ON tp.user_id = u.id
                WHERE tp.tournament_id = $1
                ORDER BY tp.created_at ASC
            `;
        } else {
            participantsQuery = `
                SELECT tt.*, u.avatar_url, u.username
                FROM tournament_teams tt
                LEFT JOIN users u ON tt.creator_id = u.id
                WHERE tt.tournament_id = $1
                ORDER BY tt.id ASC
            `;
        }
        
        const participantsResult = await pool.query(participantsQuery, [id]);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
        const matchesResult2 = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, match_number',
            [id]
        );
        
        // –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        let teams = [];
        if (updatedTournament.participant_type === 'team') {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞
            const teamsRes = await pool.query(
                `SELECT tt.id, tt.tournament_id, tt.name, tt.creator_id
                 FROM tournament_teams tt
                 WHERE tt.tournament_id = $1`,
                [id]
            );

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            teams = await Promise.all(teamsRes.rows.map(async (team) => {
                const membersRes = await pool.query(
                    `SELECT tm.team_id, tm.user_id, tm.participant_id, 
                            tp.name, u.username, u.avatar_url, 
                            tp.faceit_elo as tp_faceit_elo, tp.cs2_premier_rank as tp_cs2_premier_rank,
                            u.faceit_elo as user_faceit_elo, u.cs2_premier_rank as user_cs2_premier_rank,
                            COALESCE(tp.faceit_elo, u.faceit_elo, 1000) as faceit_elo,
                            COALESCE(tp.cs2_premier_rank, u.cs2_premier_rank, 5) as cs2_premier_rank
                     FROM tournament_team_members tm
                     LEFT JOIN tournament_participants tp ON tm.participant_id = tp.id
                     LEFT JOIN users u ON tm.user_id = u.id
                     WHERE tm.team_id = $1`,
                    [team.id]
                );

                return {
                    ...team,
                    members: membersRes.rows
                };
            }));
        }
        
        const responseData = {
            ...updatedTournament,
            participants: participantsResult.rows,
            participant_count: participantsResult.rows.length,
            matches: matchesResult2.rows,
            teams: teams, // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–≤–µ—Ç
            mixed_teams: teams, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ mixed_teams –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            admins: adminsResult.rows // üÜï –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        broadcastTournamentUpdate(id, responseData);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await logTournamentEvent(id, req.user.id, 'tournament_started', {
            participantCount: participantsResult.rows.length
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –æ –Ω–∞—á–∞–ª–µ
        await sendTournamentChatAnnouncement(
            updatedTournament.name,
            `–¢—É—Ä–Ω–∏—Ä "${updatedTournament.name}" –Ω–∞—á–∞—Ç`,
            id
        );
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        res.status(200).json({
            message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç',
            tournament: responseData
        });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
router.post('/:id/participate', authenticateToken, async (req, res) => {
    const { id } = req.params;
    const userId = req.user.id;
    const { teamId, newTeamName } = req.body;

    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å–µ—Ç–∫–∞
        const matchesCheck = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1',
            [id]
        );
        if (matchesCheck.rows.length > 0) {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏' });
        }

        const participantCountQuery =
            tournament.participant_type === 'solo'
                ? 'SELECT COUNT(*) FROM tournament_participants WHERE tournament_id = $1'
                : 'SELECT COUNT(*) FROM tournament_teams WHERE tournament_id = $1';
        const participantCountResult = await pool.query(participantCountQuery, [id]);
        const participantCount = parseInt(participantCountResult.rows[0].count);

        if (tournament.max_participants && participantCount >= tournament.max_participants) {
            return res.status(400).json({ error: '–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç' });
        }

        const checkParticipationQuery =
            tournament.participant_type === 'solo'
                ? 'SELECT * FROM tournament_participants WHERE tournament_id = $1 AND user_id = $2'
                : 'SELECT tt.* FROM tournament_teams tt JOIN tournament_team_members ttm ON tt.id = ttm.team_id WHERE tt.tournament_id = $1 AND ttm.user_id = $2';
        const checkResult = await pool.query(checkParticipationQuery, [id, userId]);
        if (checkResult.rows.length > 0) {
            return res.status(400).json({ error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ' });
        }

        // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í
        // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º –≤ tournament_participants, –¥–∞–∂–µ –µ—Å–ª–∏ participant_type = 'team'
        if (tournament.format === 'mix') {
            console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.username} (ID: ${userId}) —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–µ ${id}`);
            
            // üÜï –ü–û–õ–£–ß–ê–ï–ú –†–ï–ô–¢–ò–ù–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –ü–†–û–§–ò–õ–Ø
            const userResult = await pool.query('SELECT faceit_elo, cs2_premier_rank FROM users WHERE id = $1', [userId]);
            const userRatings = userResult.rows[0] || {};
            
            // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ tournament_participants —Å —Ñ–ª–∞–≥–æ–º in_team = false –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
            await pool.query(
                'INSERT INTO tournament_participants (tournament_id, user_id, name, in_team, faceit_elo, cs2_premier_rank) VALUES ($1, $2, $3, $4, $5, $6)',
                [id, userId, req.user.username, false, userRatings.faceit_elo || null, userRatings.cs2_premier_rank || null]
            );
            
            console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ ${req.user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä –∫–∞–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ (–Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ) —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏`);
            
        } else if (tournament.participant_type === 'solo') {
            // üÜï –ü–û–õ–£–ß–ê–ï–ú –†–ï–ô–¢–ò–ù–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –ü–†–û–§–ò–õ–Ø –î–õ–Ø SOLO –¢–£–†–ù–ò–†–û–í
            const userResult = await pool.query('SELECT faceit_elo, cs2_premier_rank FROM users WHERE id = $1', [userId]);
            const userRatings = userResult.rows[0] || {};
            
            await pool.query(
                'INSERT INTO tournament_participants (tournament_id, user_id, name, faceit_elo, cs2_premier_rank) VALUES ($1, $2, $3, $4, $5)',
                [id, userId, req.user.username, userRatings.faceit_elo || null, userRatings.cs2_premier_rank || null]
            );
        } else {
            let selectedTeamId;
            if (teamId) {
                const teamCheck = await pool.query(
                    'SELECT * FROM tournament_teams WHERE id = $1 AND creator_id = $2',
                    [teamId, userId]
                );
                if (teamCheck.rows.length === 0) {
                    return res.status(400).json({ error: '–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º' });
                }
                selectedTeamId = teamId;
            } else if (newTeamName) {
                const teamResult = await pool.query(
                    'INSERT INTO tournament_teams (tournament_id, name, creator_id) VALUES ($1, $2, $3) RETURNING id',
                    [id, newTeamName, userId]
                );
                selectedTeamId = teamResult.rows[0].id;
            } else {
                return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ ID –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã' });
            }

            await pool.query(
                'INSERT INTO tournament_team_members (team_id, user_id) VALUES ($1, $2)',
                [selectedTeamId, userId]
            );
        }

        const notificationMessage = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –≤–∞—à–µ–º —Ç—É—Ä–Ω–∏—Ä–µ "${tournament.name}"`;
        const notificationResult = await pool.query(
            'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4) RETURNING *',
            [tournament.created_by, notificationMessage, 'participant_added', id]
        );
        const notification = notificationResult.rows[0];

        sendNotification(tournament.created_by, {
            id: notification.id,
            user_id: tournament.created_by,
            message: notificationMessage,
            type: 'participant_added',
            tournament_id: id,
            created_at: new Date().toISOString(),
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await logTournamentEvent(id, req.user.id, 'participant_joined', {
            username: req.user.username,
            participationType: tournament.participant_type,
            teamName: newTeamName || null
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        await addUserToTournamentChat(tournament.name, req.user.id, false);
        await sendTournamentChatAnnouncement(
            tournament.name,
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ "${tournament.name}"`,
            id
        );

        res.status(200).json({ message: '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ' });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ:', err);
        res.status(500).json({ error: err.message });
    }
});

// –û—Ç–∫–∞–∑ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
router.post('/:id/withdraw', authenticateToken, async (req, res) => {
    const { id } = req.params;
    const userId = req.user.id;

    try {
        console.log(`üö™ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–∞–∑ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–∫–∞–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        if (!['active', 'in_progress'].includes(tournament.status)) {
            return res.status(400).json({ 
                error: '–û—Ç–∫–∞–∑ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
        let participantInfo = null;
        if (tournament.participant_type === 'solo') {
            const participantResult = await pool.query(
                'SELECT * FROM tournament_participants WHERE tournament_id = $1 AND user_id = $2',
                [id, userId]
            );
            if (participantResult.rows.length === 0) {
                return res.status(400).json({ error: '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ' });
            }
            participantInfo = participantResult.rows[0];
        } else {
            const teamCheck = await pool.query(
                'SELECT tt.id, tt.name FROM tournament_teams tt JOIN tournament_team_members ttm ON tt.id = ttm.team_id WHERE tt.tournament_id = $1 AND ttm.user_id = $2',
                [id, userId]
            );
            if (teamCheck.rows.length === 0) {
                return res.status(400).json({ error: '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ' });
            }
            participantInfo = teamCheck.rows[0];
        }

        // –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–µ—Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö
        if (tournament.status === 'in_progress') {
            console.log(`‚ö†Ô∏è –¢—É—Ä–Ω–∏—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–µ—Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${userId}`);
            
            if (tournament.participant_type === 'solo') {
                // –ù–∞–π—Ç–∏ –≤—Å–µ –Ω–µ—Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                const unfinishedMatches = await pool.query(`
                    SELECT m.*, 
                           tp1.name as participant1_name, tp1.user_id as participant1_user_id,
                           tp2.name as participant2_name, tp2.user_id as participant2_user_id
                    FROM matches m
                    LEFT JOIN tournament_participants tp1 ON m.participant1_id = tp1.id
                    LEFT JOIN tournament_participants tp2 ON m.participant2_id = tp2.id
                    WHERE m.tournament_id = $1 
                    AND (tp1.user_id = $2 OR tp2.user_id = $2)
                    AND m.status = 'pending'
                `, [id, userId]);

                console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${unfinishedMatches.rows.length} –Ω–µ—Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π`);

                // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º –º–∞—Ç—á–µ
                for (const match of unfinishedMatches.rows) {
                    const isParticipant1 = match.participant1_user_id === userId;
                    const winnerId = isParticipant1 ? match.participant2_id : match.participant1_id;
                    const loserId = isParticipant1 ? match.participant1_id : match.participant2_id;
                    
                    console.log(`‚öîÔ∏è –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–∞—Ç—á–µ ${match.id}: —É—á–∞—Å—Ç–Ω–∏–∫ ${userId} –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
                    await pool.query(`
                        UPDATE matches 
                        SET winner_team_id = $1, 
                            status = 'completed',
                            updated_at = NOW(),
                            score = $2
                        WHERE id = $3
                    `, [winnerId, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ (–æ—Ç–∫–∞–∑ –æ—Ç —É—á–∞—Å—Ç–∏—è)', match.id]);

                    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
                    await logTournamentEvent(id, userId, 'technical_loss', {
                        match_id: match.id,
                        reason: 'participant_withdrawal'
                    });

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫—É –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–±–µ–¥–µ
                    const opponentId = isParticipant1 ? match.participant2_user_id : match.participant1_user_id;
                    if (opponentId) {
                        const opponentNotificationMessage = `–í–∞–º –∑–∞—Å—á–∏—Ç–∞–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–±–µ–¥–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ "${tournament.name}" –∏–∑-–∑–∞ –æ—Ç–∫–∞–∑–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –æ—Ç —É—á–∞—Å—Ç–∏—è`;
                        await pool.query(
                            'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4)',
                            [opponentId, opponentNotificationMessage, 'technical_victory', id]
                        );
                        sendNotification(opponentId, {
                            user_id: opponentId,
                            message: opponentNotificationMessage,
                            type: 'technical_victory',
                            tournament_id: id,
                            created_at: new Date().toISOString(),
                        });
                    }
                }
            }
            // –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É
        }

        // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
        let deleted = false;
        if (tournament.participant_type === 'solo') {
            const deleteResult = await pool.query(
                'DELETE FROM tournament_participants WHERE tournament_id = $1 AND user_id = $2 RETURNING *',
                [id, userId]
            );
            deleted = deleteResult.rowCount > 0;
        } else {
            const teamCheck = await pool.query(
                'SELECT tt.id FROM tournament_teams tt JOIN tournament_team_members ttm ON tt.id = ttm.team_id WHERE tt.tournament_id = $1 AND ttm.user_id = $2',
                [id, userId]
            );
            if (teamCheck.rows.length > 0) {
                const teamId = teamCheck.rows[0].id;
                await pool.query(
                    'DELETE FROM tournament_team_members WHERE team_id = $1 AND user_id = $2',
                    [teamId, userId]
                );
                const memberCount = await pool.query(
                    'SELECT COUNT(*) FROM tournament_team_members WHERE team_id = $1',
                    [teamId]
                );
                if (parseInt(memberCount.rows[0].count) === 0) {
                    await pool.query(
                        'DELETE FROM tournament_teams WHERE id = $1',
                        [teamId]
                    );
                }
                deleted = true;
            }
        }

        if (!deleted) {
            return res.status(400).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞' });
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫–∞–∑–∞ –æ—Ç —É—á–∞—Å—Ç–∏—è
        await logTournamentEvent(id, userId, 'participant_withdrawn', {
            tournament_status: tournament.status,
            had_technical_losses: tournament.status === 'in_progress'
        });

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ç—É—Ä–Ω–∏—Ä–∞
        const statusText = tournament.status === 'in_progress' ? ' (—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ—Ä–∞–∂–µ–Ω–∏–π –≤ –Ω–µ—Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö)' : '';
        const notificationMessage = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.username || userId} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –≤–∞—à–µ–º —Ç—É—Ä–Ω–∏—Ä–µ "${tournament.name}"${statusText}`;
        await pool.query(
            'INSERT INTO notifications (user_id, message, type) VALUES ($1, $2, $3)',
            [tournament.created_by, notificationMessage, 'participant_withdrawn']
        );
        sendNotification(tournament.created_by, {
            user_id: tournament.created_by,
            message: notificationMessage,
            type: 'participant_withdrawn',
            created_at: new Date().toISOString(),
        });

        const responseMessage = tournament.status === 'in_progress' 
            ? '–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ. –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –Ω–µ—Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö.' 
            : '–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ';

        console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ ${userId} —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ ${id}`);
        res.status(200).json({ message: responseMessage });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —É—á–∞—Å—Ç–∏—è:', err);
        res.status(500).json({ error: err.message });
    }
});

// –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è solo –∏ team)
router.post('/:id/add-participant', authenticateToken, async (req, res) => {
    const { id } = req.params;
    const { participantName, userId, faceit_elo, cs2_premier_rank } = req.body;
    const currentUserId = req.user.id;

    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if (tournament.created_by !== currentUserId) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [id, currentUserId]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' });
            }
        }

        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å–µ—Ç–∫–∞
        const matchesCheck = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1',
            [id]
        );
        if (matchesCheck.rows.length > 0) {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏' });
        }

        const participantCountQuery =
            tournament.participant_type === 'solo'
                ? 'SELECT COUNT(*) FROM tournament_participants WHERE tournament_id = $1'
                : 'SELECT COUNT(*) FROM tournament_teams WHERE tournament_id = $1';
        const participantCountResult = await pool.query(participantCountQuery, [id]);
        const participantCount = parseInt(participantCountResult.rows[0].count);

        if (tournament.max_participants && participantCount >= tournament.max_participants) {
            return res.status(400).json({ error: '–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç' });
        }

        if (!participantName) {
            return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞' });
        }

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω userId, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userId) {
            const userCheck = await pool.query('SELECT * FROM users WHERE id = $1', [userId]);
            if (userCheck.rows.length === 0) {
                return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
            const participationCheck = await pool.query(
                'SELECT * FROM tournament_participants WHERE tournament_id = $1 AND user_id = $2',
                [id, userId]
            );
            if (participationCheck.rows.length > 0) {
                return res.status(400).json({ error: '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ' });
            }
        }

        console.log(`üéØ –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participantName}, faceit_elo: ${faceit_elo}, cs2_premier_rank: ${cs2_premier_rank}`);

        // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –†–ï–ô–¢–ò–ù–ì–û–í
        // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º –≤ tournament_participants, –¥–∞–∂–µ –µ—Å–ª–∏ participant_type = 'team'
        if (tournament.format === 'mix') {
            console.log(`üéØ –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä: ${participantName} (user_id: ${userId || '–≥–æ—Å—Ç—å'})`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ tournament_participants —Å —Ñ–ª–∞–≥–æ–º in_team = false –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
            await pool.query(
                'INSERT INTO tournament_participants (tournament_id, user_id, name, in_team, faceit_elo, cs2_premier_rank) VALUES ($1, $2, $3, $4, $5, $6)',
                [id, userId || null, participantName, false, faceit_elo || null, cs2_premier_rank || null]
            );
            
            console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ ${participantName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä –∫–∞–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ (–Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ) —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏`);
            
        } else if (tournament.participant_type === 'solo') {
            // –û–±—ã—á–Ω—ã–µ solo —Ç—É—Ä–Ω–∏—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            await pool.query(
                'INSERT INTO tournament_participants (tournament_id, user_id, name, faceit_elo, cs2_premier_rank) VALUES ($1, $2, $3, $4, $5)',
                [id, userId || null, participantName, faceit_elo || null, cs2_premier_rank || null]
            );
        } else {
            // –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
            const teamResult = await pool.query(
                'INSERT INTO tournament_teams (tournament_id, name, creator_id) VALUES ($1, $2, $3) RETURNING id',
                [id, participantName, userId || null]
            );
            if (userId) {
                await pool.query(
                    'INSERT INTO tournament_team_members (team_id, user_id) VALUES ($1, $2)',
                    [teamResult.rows[0].id, userId]
                );
            }
        }

        res.status(200).json({ message: '–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω' });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
router.post('/:id/invite', authenticateToken, async (req, res) => {
    const { id } = req.params;
    const { username, email } = req.body;
    const creatorId = req.user.id;

    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (tournament.created_by !== creatorId) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [id, creatorId]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' });
            }
        }

        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
        }

        if (!username && !email) {
            return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ email' });
        }

        let user;
        if (username) {
            const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);
            if (result.rows.length === 0) {
                return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
            user = result.rows[0];
        } else if (email) {
            const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
            if (result.rows.length === 0) {
                return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
            user = result.rows[0];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
        const checkParticipationQuery =
            tournament.participant_type === 'solo'
                ? 'SELECT * FROM tournament_participants WHERE tournament_id = $1 AND user_id = $2'
                : 'SELECT tt.* FROM tournament_teams tt JOIN tournament_team_members ttm ON tt.id = ttm.team_id WHERE tt.tournament_id = $1 AND ttm.user_id = $2';
        const checkResult = await pool.query(checkParticipationQuery, [id, user.id]);
        if (checkResult.rows.length > 0) {
            return res.status(400).json({ error: '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const inviteCheck = await pool.query(
            'SELECT * FROM tournament_invitations WHERE tournament_id = $1 AND user_id = $2 AND status = $3',
            [id, user.id, 'pending']
        );
        if (inviteCheck.rows.length > 0) {
            return res.status(400).json({ error: '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä' });
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const invitationResult = await pool.query(
            'INSERT INTO tournament_invitations (tournament_id, user_id, invited_by, status) VALUES ($1, $2, $3, $4) RETURNING *',
            [id, user.id, creatorId, 'pending']
        );

        const notificationMessage = `–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä "${tournament.name}" —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º ${req.user.username}`;
        const notificationResult = await pool.query(
            'INSERT INTO notifications (user_id, message, type, tournament_id, invitation_id) VALUES ($1, $2, $3, $4, $5) RETURNING *',
            [user.id, notificationMessage, 'tournament_invite', id, invitationResult.rows[0].id]
        );

        sendNotification(user.id, {
            id: notificationResult.rows[0].id,
            user_id: user.id,
            message: notificationMessage,
            type: 'tournament_invite',
            tournament_id: id,
            invitation_id: invitationResult.rows[0].id,
            created_at: new Date().toISOString(),
        });

        res.status(200).json({ message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
        res.status(500).json({ error: err.message });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
router.post('/:id/handle-invitation', authenticateToken, async (req, res) => {
    const { id } = req.params;
    const { action, invitation_id } = req.body;
    const userId = req.user.id;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const invitationResult = await pool.query(
            'SELECT * FROM tournament_invitations WHERE id = $1 AND user_id = $2 AND tournament_id = $3 AND status = $4',
            [invitation_id, userId, id, 'pending']
        );
        
        if (invitationResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' });
        }

        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (action === 'accept') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const checkParticipationQuery =
                tournament.participant_type === 'solo'
                    ? 'SELECT * FROM tournament_participants WHERE tournament_id = $1 AND user_id = $2'
                    : 'SELECT tt.* FROM tournament_teams tt JOIN tournament_team_members ttm ON tt.id = ttm.team_id WHERE tt.tournament_id = $1 AND ttm.user_id = $2';
            const checkResult = await pool.query(checkParticipationQuery, [id, userId]);
            if (checkResult.rows.length > 0) {
                return res.status(400).json({ error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ' });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í
            if (tournament.format === 'mix') {
                console.log(`üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.username} (ID: ${userId}) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä ${id}`);
                
                // üÜï –ü–û–õ–£–ß–ê–ï–ú –†–ï–ô–¢–ò–ù–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –ü–†–û–§–ò–õ–Ø
                const userResult = await pool.query('SELECT faceit_elo, cs2_premier_rank FROM users WHERE id = $1', [userId]);
                const userRatings = userResult.rows[0] || {};
                
                // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ tournament_participants —Å —Ñ–ª–∞–≥–æ–º in_team = false –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
                await pool.query(
                    'INSERT INTO tournament_participants (tournament_id, user_id, name, in_team, faceit_elo, cs2_premier_rank) VALUES ($1, $2, $3, $4, $5, $6)',
                    [id, userId, req.user.username, false, userRatings.faceit_elo || null, userRatings.cs2_premier_rank || null]
                );
                
                console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ ${req.user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä –∫–∞–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ (–Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ) —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏`);
                
            } else if (tournament.participant_type === 'solo') {
                // üÜï –ü–û–õ–£–ß–ê–ï–ú –†–ï–ô–¢–ò–ù–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –ü–†–û–§–ò–õ–Ø –î–õ–Ø SOLO –¢–£–†–ù–ò–†–û–í
                const userResult = await pool.query('SELECT faceit_elo, cs2_premier_rank FROM users WHERE id = $1', [userId]);
                const userRatings = userResult.rows[0] || {};
                
                await pool.query(
                    'INSERT INTO tournament_participants (tournament_id, user_id, name, faceit_elo, cs2_premier_rank) VALUES ($1, $2, $3, $4, $5)',
                    [id, userId, req.user.username, userRatings.faceit_elo || null, userRatings.cs2_premier_rank || null]
                );
            } else {
                const teamResult = await pool.query(
                    'INSERT INTO tournament_teams (tournament_id, name, creator_id) VALUES ($1, $2, $3) RETURNING id',
                    [id, `${req.user.username}'s Team`, userId]
                );
                await pool.query(
                    'INSERT INTO tournament_team_members (team_id, user_id) VALUES ($1, $2)',
                    [teamResult.rows[0].id, userId]
                );
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            await pool.query(
                'UPDATE tournament_invitations SET status = $1 WHERE id = $2',
                ['accepted', invitation_id]
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
            const creatorNotificationMessage = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.username} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä "${tournament.name}"`;
            await pool.query(
                'INSERT INTO notifications (user_id, message, type, tournament_id, invitation_id) VALUES ($1, $2, $3, $4, $5)',
                [tournament.created_by, creatorNotificationMessage, 'invitation_accepted', id, invitation_id]
            );
            sendNotification(tournament.created_by, {
                user_id: tournament.created_by,
                message: creatorNotificationMessage,
                type: 'invitation_accepted',
                tournament_id: id,
                invitation_id: invitation_id,
                created_at: new Date().toISOString(),
            });

            res.status(200).json({ message: '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É' });
        } else if (action === 'reject') {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            await pool.query(
                'UPDATE tournament_invitations SET status = $1 WHERE id = $2',
                ['rejected', invitation_id]
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
            const creatorNotificationMessage = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä "${tournament.name}"`;
            await pool.query(
                'INSERT INTO notifications (user_id, message, type, tournament_id, invitation_id) VALUES ($1, $2, $3, $4, $5)',
                [tournament.created_by, creatorNotificationMessage, 'invitation_rejected', id, invitation_id]
            );
            sendNotification(tournament.created_by, {
                user_id: tournament.created_by,
                message: creatorNotificationMessage,
                type: 'invitation_rejected',
                tournament_id: id,
                invitation_id: invitation_id,
                created_at: new Date().toISOString(),
            });

            res.status(200).json({ message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' });
        } else {
            res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
        res.status(500).json({ error: err.message });
    }
});

// –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
router.post('/:id/request-admin', authenticateToken, verifyEmailRequired, async (req, res) => {
    const { id } = req.params;
    const userId = req.user.id;

    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (tournament.created_by === userId) {
            return res.status(400).json({ error: '–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç—É—Ä–Ω–∏—Ä–∞' });
        }

        const adminCheck = await pool.query(
            'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
            [id, userId]
        );
        if (adminCheck.rows.length > 0) {
            return res.status(400).json({ error: '–í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞' });
        }

        const requestCheck = await pool.query(
            'SELECT * FROM admin_requests WHERE tournament_id = $1 AND user_id = $2 AND status = $3',
            [id, userId, 'pending']
        );
        if (requestCheck.rows.length > 0) {
            return res.status(400).json({ error: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
        }

        await pool.query(
            'INSERT INTO admin_requests (tournament_id, user_id) VALUES ($1, $2)',
            [id, userId]
        );

        const notificationMessage = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"`;
        const notificationResult = await pool.query(
            'INSERT INTO notifications (user_id, message, type, tournament_id, requester_id) VALUES ($1, $2, $3, $4, $5) RETURNING *',
            [tournament.created_by, notificationMessage, 'admin_request', id, userId]
        );
        const notification = notificationResult.rows[0];

        sendNotification(tournament.created_by, {
            id: notification.id,
            user_id: tournament.created_by,
            message: notificationMessage,
            type: 'admin_request',
            tournament_id: id,
            requester_id: userId,
            created_at: new Date().toISOString(),
        });

        res.status(200).json({ message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:', err);
        res.status(500).json({ error: err.message });
    }
});

// –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
router.post('/:id/respond-admin-request', authenticateToken, verifyEmailRequired, async (req, res) => {
    const { id } = req.params;
    const { requesterId, action } = req.body; // action: 'accept' –∏–ª–∏ 'reject'
    const creatorId = req.user.id;

    if (!['accept', 'reject'].includes(action)) {
        return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: —É–∫–∞–∂–∏—Ç–µ "accept" –∏–ª–∏ "reject"' });
    }

    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (tournament.created_by !== creatorId) {
            return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã' });
        }

        const requestResult = await pool.query(
            'SELECT * FROM admin_requests WHERE tournament_id = $1 AND user_id = $2 AND status = $3',
            [id, requesterId, 'pending']
        );
        if (requestResult.rows.length === 0) {
            return res.status(404).json({ error: '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω' });
        }

        const requesterResult = await pool.query('SELECT username FROM users WHERE id = $1', [requesterId]);
        if (requesterResult.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const requesterUsername = requesterResult.rows[0].username;

        if (action === 'accept') {
            // –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å
            await pool.query(
                'INSERT INTO tournament_admins (tournament_id, user_id) VALUES ($1, $2) ON CONFLICT DO NOTHING',
                [id, requesterId]
            );
            await pool.query(
                'UPDATE admin_requests SET status = $1 WHERE tournament_id = $2 AND user_id = $3',
                ['accepted', id, requesterId]
            );

            const notificationMessage = `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}" –ø—Ä–∏–Ω—è—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º ${req.user.username}`;
            const notificationResult = await pool.query(
                'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4) RETURNING *',
                [requesterId, notificationMessage, 'admin_request_accepted', id]
            );
            
            const notification = notificationResult.rows[0];
            sendNotification(requesterId, {
                id: notification.id,
                user_id: requesterId,
                message: notificationMessage,
                type: 'admin_request_accepted',
                tournament_id: id,
                created_at: new Date().toISOString(),
            });
        } else {
            // –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            await pool.query(
                'UPDATE admin_requests SET status = $1 WHERE tournament_id = $2 AND user_id = $3',
                ['rejected', id, requesterId]
            );

            const notificationMessage = `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}" –æ—Ç–∫–ª–æ–Ω—ë–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º ${req.user.username}`;
            const notificationResult = await pool.query(
                'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4) RETURNING *',
                [requesterId, notificationMessage, 'admin_request_rejected', id]
            );
            
            const notification = notificationResult.rows[0];
            sendNotification(requesterId, {
                id: notification.id,
                user_id: requesterId,
                message: notificationMessage,
                type: 'admin_request_rejected',
                tournament_id: id,
                created_at: new Date().toISOString(),
            });
        }

        res.status(200).json({ message: `–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ ${action === 'accept' ? '–ø—Ä–∏–Ω—è—Ç' : '–æ—Ç–∫–ª–æ–Ω—ë–Ω'}` });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:', err);
        res.status(500).json({ error: err.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
router.get('/:id/admin-request-status', authenticateToken, async (req, res) => {
    const { id } = req.params;
    const userId = req.user.id;

    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const adminCheck = await pool.query(
            'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
            [id, userId]
        );
        if (adminCheck.rows.length > 0) {
            return res.json({ status: 'accepted' });
        }

        const requestCheck = await pool.query(
            'SELECT status FROM admin_requests WHERE tournament_id = $1 AND user_id = $2',
            [id, userId]
        );
        if (requestCheck.rows.length > 0) {
            return res.json({ status: requestCheck.rows[0].status });
        }

        return res.json({ status: null });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
router.post('/:id/generate-bracket', authenticateToken, verifyEmailRequired, async (req, res) => {
    const { id } = req.params;
    const { thirdPlaceMatch } = req.body;
    const userId = req.user.id;

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (tournament.created_by !== userId) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [id, userId]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É' });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ç–∫–∞ –µ—â—ë –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞
        const existingMatches = await pool.query('SELECT * FROM matches WHERE tournament_id = $1', [id]);
        
        // –ï—Å–ª–∏ –º–∞—Ç—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —É–¥–∞–ª—è–µ–º –∏—Ö –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–π —Å–µ—Ç–∫–∏
        if (existingMatches.rows.length > 0) {
            console.log(`–£–¥–∞–ª–µ–Ω–∏–µ ${existingMatches.rows.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${id} –ø–µ—Ä–µ–¥ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–µ—Ç–∫–∏`);
            await pool.query('DELETE FROM matches WHERE tournament_id = $1', [id]);
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        let participants;
        if (tournament.participant_type === 'solo') {
            const participantsResult = await pool.query(
                'SELECT id, name FROM tournament_participants WHERE tournament_id = $1',
                [id]
            );
            participants = participantsResult.rows;
        } else {
            const participantsResult = await pool.query(
                'SELECT id, name FROM tournament_teams WHERE tournament_id = $1',
                [id]
            );
            participants = participantsResult.rows;
        }

        if (participants.length < 2) {
            return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏' });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥—É–ª—è bracketGenerator
        const matches = await generateBracket(tournament.format, id, participants, thirdPlaceMatch);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const updatedTournamentResult = await pool.query(
            'SELECT t.*, ' +
            '(SELECT COALESCE(json_agg(to_jsonb(tp) || jsonb_build_object(\'avatar_url\', u.avatar_url)), \'[]\') FROM tournament_participants tp LEFT JOIN users u ON tp.user_id = u.id WHERE tp.tournament_id = t.id) as participants, ' +
            '(SELECT COALESCE(json_agg(m.*), \'[]\') FROM matches m WHERE m.tournament_id = t.id) as matches ' +
            'FROM tournaments t WHERE t.id = $1',
            [id]
        );

        const tournamentData = updatedTournamentResult.rows[0];
        tournamentData.matches = Array.isArray(tournamentData.matches) && tournamentData.matches[0] !== null 
            ? tournamentData.matches 
            : [];
        tournamentData.participants = Array.isArray(tournamentData.participants) && tournamentData.participants[0] !== null 
            ? tournamentData.participants 
            : [];

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏–º —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
        broadcastTournamentUpdate(id, tournamentData);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
        await sendTournamentChatAnnouncement(
            tournamentData.name,
            `–°–µ—Ç–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournamentData.name}" —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞`,
            id
        );
        console.log('üîç Bracket generated for tournament:', tournamentData);
        res.status(200).json({ message: '–°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞', tournament: tournamentData });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', err);
        res.status(500).json({ error: err.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
router.post('/:id/update-match', authenticateToken, async (req, res) => {
    const { id } = req.params;
    let { matchId, winner_team_id, score1, score2, maps } = req.body;
    const userId = req.user.id;

    try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º matchId –∏ winner_team_id –≤ —á–∏—Å–ª–∞
        matchId = Number(matchId);
        winner_team_id = winner_team_id ? Number(winner_team_id) : null;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (tournament.created_by !== userId) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [id, userId]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã' });
            }
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
        const matchResult = await pool.query('SELECT * FROM matches WHERE id = $1 AND tournament_id = $2', [matchId, id]);
        if (matchResult.rows.length === 0) {
            return res.status(400).json({ error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const match = matchResult.rows[0];

        // –ó–∞–ø—Ä–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á —É–∂–µ —Å—ã–≥—Ä–∞–Ω (–µ—Å—Ç—å winner_team_id)
        for (const nextMatchId of [match.next_match_id, match.loser_next_match_id]) {
            if (nextMatchId) {
                const nextRes = await pool.query(
                    'SELECT winner_team_id FROM matches WHERE id = $1',
                    [nextMatchId]
                );
                if (nextRes.rows.length && nextRes.rows[0].winner_team_id) {
                    return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á —É–∂–µ —Å—ã–≥—Ä–∞–Ω' });
                }
            }
        }
        
        if (match.winner_team_id && match.winner_team_id === winner_team_id) {
            return res.status(400).json({ error: '–≠—Ç–æ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ winner_team_id —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
        if (winner_team_id && ![match.team1_id, match.team2_id].includes(winner_team_id)) {
            return res.status(400).json({ error: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ (—Å—á–µ—Ç, –∫–∞—Ä—Ç—ã)
        const scoreChanged = match.score1 !== score1 || match.score2 !== score2;
        const mapsChanged = maps && Array.isArray(maps) && maps.length > 0;
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏:
        // 1. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è
        // 2. –ò–∑–º–µ–Ω–∏–ª—Å—è —Å—á–µ—Ç
        // 3. –î–æ–±–∞–≤–ª–µ–Ω—ã/–∏–∑–º–µ–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö
        if (match.winner_team_id === winner_team_id && !scoreChanged && !mapsChanged) {
            return res.status(400).json({ error: '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è' });
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–∞—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã)
        let mapsData = null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π –∫–∞—Ä—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        const isGameSupportingMaps = tournament.game && (
            // Counter-Strike –≤–∞—Ä–∏–∞–Ω—Ç—ã
            tournament.game === 'Counter-Strike 2' ||
            tournament.game === 'Counter Strike 2' ||
            tournament.game === 'CS2' ||
            tournament.game === 'cs2' ||
            tournament.game.toLowerCase().includes('counter') ||
            tournament.game.toLowerCase().includes('cs') ||
            // Valorant
            tournament.game === 'Valorant' ||
            tournament.game === 'VALORANT' ||
            tournament.game.toLowerCase().includes('valorant') ||
            // –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã —Å –∫–∞—Ä—Ç–∞–º–∏
            tournament.game.toLowerCase().includes('overwatch') ||
            tournament.game.toLowerCase().includes('dota') ||
            tournament.game.toLowerCase().includes('league') ||
            // –û–±—â–∏–π –ø–æ–¥—Ö–æ–¥ - –µ—Å–ª–∏ –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º
            (Array.isArray(maps) && maps.length > 0)
        );
        
        console.log(`üîç DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –º–∞—Ç—á–∞ ${matchId}:`);
        console.log(`- –ü–æ–ª—É—á–µ–Ω—ã –∫–∞—Ä—Ç—ã:`, maps);
        console.log(`- –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç:`, typeof maps);
        console.log(`- –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Å—Å–∏–≤–æ–º:`, Array.isArray(maps));
        console.log(`- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç:`, maps ? maps.length : 0);
        console.log(`- –ò–≥—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞:`, tournament.game);
        console.log(`- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∫–∞—Ä—Ç—ã:`, isGameSupportingMaps);
        
        if (Array.isArray(maps) && maps.length > 0 && isGameSupportingMaps) {
            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö –¥–ª—è –∏–≥—Ä—ã: ${tournament.game}`);
            console.log(`üìã –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç:`, JSON.stringify(maps, null, 2));
            mapsData = JSON.stringify(maps);
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
            if (maps.length > 1) {
                let team1Wins = 0;
                let team2Wins = 0;
                
                maps.forEach(map => {
                    if (parseInt(map.score1) > parseInt(map.score2)) {
                        team1Wins++;
                    } else if (parseInt(map.score2) > parseInt(map.score1)) {
                        team2Wins++;
                    }
                });
                
                score1 = team1Wins;
                score2 = team2Wins;
                
                console.log(`–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä—Ç: ${team1Wins}:${team2Wins}`);
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
                if (team1Wins > team2Wins) {
                    winner_team_id = match.team1_id;
                } else if (team2Wins > team1Wins) {
                    winner_team_id = match.team2_id;
                }
                // –í —Å–ª—É—á–∞–µ –Ω–∏—á—å–µ–π (—Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç) winner_team_id –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
            }
        } else {
            console.log(`–î–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è. –ü—Ä–∏—á–∏–Ω—ã:`);
            console.log(`- –ï—Å—Ç—å –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç: ${Array.isArray(maps)}`);
            console.log(`- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç: ${maps ? maps.length : 0}`);
            console.log(`- –ò–≥—Ä–∞: ${tournament.game}`);
            console.log(`- –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ CS2: ${isGameSupportingMaps}`);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
        if (mapsData) {
            console.log(`–û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á ${matchId} —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞—Ä—Ç–∞—Ö:`, mapsData);
            await pool.query(
                'UPDATE matches SET winner_team_id = $1, score1 = $2, score2 = $3, maps_data = $4 WHERE id = $5',
                [winner_team_id, score1, score2, mapsData, matchId]
            );
            console.log(`–ú–∞—Ç—á ${matchId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞—Ä—Ç–∞—Ö`);
        } else {
            console.log(`–û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á ${matchId} –ë–ï–ó –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–∞—Ö`);
            await pool.query(
                'UPDATE matches SET winner_team_id = $1, score1 = $2, score2 = $3 WHERE id = $4',
                [winner_team_id, score1, score2, matchId]
            );
            console.log(`–ú–∞—Ç—á ${matchId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–∞—Ö`);
        }

        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ ${match.match_number}: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ${winner_team_id}, —Å—á–µ—Ç ${score1}:${score2}`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        const loser_team_id = match.team1_id === winner_team_id ? match.team2_id : match.team1_id;

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (winner_team_id && match.next_match_id) {
            const nextMatchResult = await pool.query('SELECT * FROM matches WHERE id = $1', [match.next_match_id]);
            if (nextMatchResult.rows.length > 0) {
                const nextMatch = nextMatchResult.rows[0];
                console.log(`–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: ${nextMatch.match_number}`);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é (team1 –∏–ª–∏ team2) –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                if (!nextMatch.team1_id) {
                    await pool.query('UPDATE matches SET team1_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    console.log(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å (${winner_team_id}) –ø–æ–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é team1 –º–∞—Ç—á–∞ ${nextMatch.match_number}`);
                } else if (!nextMatch.team2_id) {
                    await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    console.log(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å (${winner_team_id}) –ø–æ–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é team2 –º–∞—Ç—á–∞ ${nextMatch.match_number}`);
                } else {
                    console.log(`–û–±–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Ç—á–µ ${nextMatch.match_number} —É–∂–µ –∑–∞–Ω—è—Ç—ã`);
                }
            }
        }

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –≤ –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª –∏ –µ—Å—Ç—å loser_next_match_id
        if (loser_team_id && match.loser_next_match_id) {
            const loserNextMatchResult = await pool.query('SELECT * FROM matches WHERE id = $1', [match.loser_next_match_id]);
            if (loserNextMatchResult.rows.length > 0) {
                const loserNextMatch = loserNextMatchResult.rows[0];
                console.log(`–ú–∞—Ç—á –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ: ${loserNextMatch.match_number} (–º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ)`);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é (team1 –∏–ª–∏ team2) –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
                if (!loserNextMatch.team1_id) {
                    await pool.query('UPDATE matches SET team1_id = $1 WHERE id = $2', [loser_team_id, loserNextMatch.id]);
                    console.log(`–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π (${loser_team_id}) –ø–æ–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é team1 –º–∞—Ç—á–∞ ${loserNextMatch.match_number}`);
                } else if (!loserNextMatch.team2_id) {
                    await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [loser_team_id, loserNextMatch.id]);
                    console.log(`–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π (${loser_team_id}) –ø–æ–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é team2 –º–∞—Ç—á–∞ ${loserNextMatch.match_number}`);
                } else {
                    console.log(`–û–±–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Ç—á–µ ${loserNextMatch.match_number} —É–∂–µ –∑–∞–Ω—è—Ç—ã`);
                }
            }
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (—Ä–∞—É–Ω–¥ -1)
        if (match.round === -1) {
            // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ match.next_match_id
            console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥');
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è Double Elimination
        if (tournament.format === 'double_elimination') {
            if (match.round !== -1 && match.next_match_id) {
                const nextMatchResult = await pool.query('SELECT * FROM matches WHERE id = $1', [match.next_match_id]);
                if (nextMatchResult.rows.length > 0) {
                    const nextMatch = nextMatchResult.rows[0];

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —É–∂–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
                    if (nextMatch.team1_id === winner_team_id || nextMatch.team2_id === winner_team_id) {
                        console.log(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å (team ${winner_team_id}) —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Ç—á ${nextMatch.id}`);
                    } else if (!nextMatch.team1_id) {
                        await pool.query('UPDATE matches SET team1_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    } else if (!nextMatch.team2_id && nextMatch.team1_id !== winner_team_id) {
                        await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    } else if (nextMatch.team1_id === nextMatch.team2_id) {
                        await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    } else {
                        const roundMatches = await pool.query(
                            'SELECT * FROM matches WHERE tournament_id = $1 AND round = $2 AND bracket_type = $3',
                            [id, match.round + 1, 'winner']
                        );
                        const availableMatch = roundMatches.rows.find(m => !m.team2_id && m.team1_id !== winner_team_id);
                        if (availableMatch) {
                            await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [winner_team_id, availableMatch.id]);
                            await pool.query('UPDATE matches SET next_match_id = $1 WHERE id = $2', [availableMatch.id, matchId]);
                        } else {
                            return res.status(400).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–µ–π —Å–µ—Ç–∫–µ' });
                        }
                    }
                }
            }

            // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –Ω–∏–∂–Ω—é—é —Å–µ—Ç–∫—É –∏–ª–∏ –≤—ã–±—ã–≤–∞–µ—Ç
            if (loser_team_id) {
                if (match.bracket_type === 'winner') {
                    // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –∏–∑ –≤–µ—Ä—Ö–Ω–µ–π —Å–µ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –Ω–∏–∂–Ω—é—é
                    let targetLoserRound;
                    const totalWinnerRounds = Math.ceil(Math.log2(6)); // –î–ª—è 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 3 —Ä–∞—É–Ω–¥–∞ (0, 1, 2)
                    const totalLoserRounds = totalWinnerRounds + 1; // 4 —Ä–∞—É–Ω–¥–∞ (1, 2, 3, 4)

                    if (match.round === -1) {
                        targetLoserRound = 1;
                    } else if (match.round === totalWinnerRounds - 1) {
                        // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –∏–∑ —Ñ–∏–Ω–∞–ª–∞ –≤–µ—Ä—Ö–Ω–µ–π —Å–µ—Ç–∫–∏ (Round 2) –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ —Ñ–∏–Ω–∞–ª –Ω–∏–∂–Ω–µ–π —Å–µ—Ç–∫–∏ (Round 4)
                        targetLoserRound = totalLoserRounds;
                    } else {
                        // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –∏–∑ Round 0 –≤–µ—Ä—Ö–Ω–µ–π —Å–µ—Ç–∫–∏ -> Round 1 –Ω–∏–∂–Ω–µ–π, Round 1 –≤–µ—Ä—Ö–Ω–µ–π -> Round 2 –Ω–∏–∂–Ω–µ–π –∏ —Ç.–¥.
                        targetLoserRound = match.round + 1;
                    }

                    let loserMatches = await pool.query(
                        'SELECT * FROM matches WHERE tournament_id = $1 AND bracket_type = $2 AND round = $3 AND is_third_place_match = false',
                        [id, 'loser', targetLoserRound]
                    );

                    let availableLoserMatch = loserMatches.rows.find(m => (!m.team1_id || !m.team2_id) && m.team1_id !== loser_team_id && m.team2_id !== loser_team_id);

                    if (!availableLoserMatch) {
                        const maxMatchNumberResult = await pool.query(
                            'SELECT COALESCE(MAX(match_number), 0) as max_match_number FROM matches WHERE tournament_id = $1 AND bracket_type = $2 AND round = $3',
                            [id, 'loser', targetLoserRound]
                        );
                        const maxMatchNumber = maxMatchNumberResult.rows[0].max_match_number;

                        const newMatchResult = await pool.query(
                            'INSERT INTO matches (tournament_id, round, match_number, bracket_type, team1_id, team2_id, match_date) ' +
                            'VALUES ($1, $2, $3, $4, $5, NULL, NOW()) RETURNING *',
                            [id, targetLoserRound, maxMatchNumber + 1, 'loser', loser_team_id]
                        );
                        availableLoserMatch = newMatchResult.rows[0];
                        console.log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Ç—á ${availableLoserMatch.id} –≤ —Ä–∞—É–Ω–¥–µ ${targetLoserRound} —Å–µ—Ç–∫–∏ –ª—É–∑–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (team ${loser_team_id})`);
                    } else {
                        if (!availableLoserMatch.team1_id) {
                            await pool.query('UPDATE matches SET team1_id = $1 WHERE id = $2', [loser_team_id, availableLoserMatch.id]);
                        } else {
                            await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [loser_team_id, availableLoserMatch.id]);
                        }
                        console.log(`–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π (team ${loser_team_id}) –∏–∑ —Ä–∞—É–Ω–¥–∞ ${match.round} –≤–µ—Ä—Ö–Ω–µ–π —Å–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Ç—á ${availableLoserMatch.id} —Ä–∞—É–Ω–¥–∞ ${targetLoserRound} —Å–µ—Ç–∫–∏ –ª—É–∑–µ—Ä–æ–≤`);
                    }
                } else if (match.bracket_type === 'loser') {
                    // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –∏–∑ –Ω–∏–∂–Ω–µ–π —Å–µ—Ç–∫–∏ –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
                    console.log(`–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π (team ${loser_team_id}) –∏–∑ –º–∞—Ç—á–∞ ${match.id} –Ω–∏–∂–Ω–µ–π —Å–µ—Ç–∫–∏ –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞`);
                }
            }
        }

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const tourInfoRes = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        const tourInfo = tourInfoRes.rows[0];
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        let updatedParticipants;
        if (tourInfo.participant_type === 'solo') {
            const partsRes = await pool.query(
                `SELECT tp.*, u.avatar_url, u.username, u.faceit_elo 
                 FROM tournament_participants tp
                 LEFT JOIN users u ON tp.user_id = u.id
                 WHERE tp.tournament_id = $1`,
                [id]
            );
            updatedParticipants = partsRes.rows;
        } else {
            const teamsRes = await pool.query(
                `SELECT tt.*, u.avatar_url
                 FROM tournament_teams tt
                 LEFT JOIN users u ON tt.creator_id = u.id
                 WHERE tt.tournament_id = $1`,
                [id]
            );
            updatedParticipants = teamsRes.rows;
        }
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç—á–∏
        const matchesRes = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, match_number',
            [id]
        );
        const tournamentData = {
            ...tourInfo,
            participants: updatedParticipants,
            participant_count: updatedParticipants.length,
            matches: matchesRes.rows
        };
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        broadcastTournamentUpdate(id, tournamentData);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
        {
            // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥/—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const pType = tournament.participant_type;
            let team1Name, team2Name;
            if (pType === 'solo') {
                const p1 = await pool.query('SELECT name FROM tournament_participants WHERE id=$1', [match.team1_id]);
                team1Name = p1.rows[0]?.name;
                const p2 = await pool.query('SELECT name FROM tournament_participants WHERE id=$1', [match.team2_id]);
                team2Name = p2.rows[0]?.name;
            } else {
                const t1 = await pool.query('SELECT name FROM tournament_teams WHERE id=$1', [match.team1_id]);
                team1Name = t1.rows[0]?.name;
                const t2 = await pool.query('SELECT name FROM tournament_teams WHERE id=$1', [match.team2_id]);
                team2Name = t2.rows[0]?.name;
            }
            const winName = winner_team_id ? (winner_team_id === match.team1_id ? team1Name : team2Name) : '';
            const announcement = `–ú–∞—Ç—á ${match.match_number} ${team1Name} vs ${team2Name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—á–µ—Ç–æ–º ${score1}:${score2}${winName ? `, –ø–æ–±–µ–¥–∏–ª ${winName}` : ''}. –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ç–∫—É: /tournaments/${id}`;
            await sendTournamentChatAnnouncement(tournament.name, announcement, id);
        }
        console.log('üîç Match updated for tournament:', tournamentData);
        res.status(200).json({ message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω', tournament: tournamentData });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ
router.put('/:id', authenticateToken, verifyEmailRequired, async (req, res) => {
    const { id } = req.params;
    const { name, game, format, participant_type, max_participants, start_date, description } = req.body;
    const userId = req.user.id;

    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (tournament.created_by !== userId) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [id, userId]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ' });
            }
        }

        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
        }

        const updateResult = await pool.query(
            'UPDATE tournaments SET name = $1, game = $2, format = $3, participant_type = $4, max_participants = $5, start_date = $6, description = $7 WHERE id = $8 RETURNING *',
            [name, game, format, participant_type, max_participants, start_date, description, id]
        );
        if (updateResult.rows.length === 0) {
            return res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ' });
        }
        const updatedTournament = updateResult.rows[0];

        res.status(200).json({ message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', tournament: updatedTournament });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ:', err);
        res.status(500).json({ error: err.message });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
router.delete('/:id', authenticateToken, verifyEmailRequired, async (req, res) => {
    const { id } = req.params;
    const userId = req.user.id;

    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (tournament.created_by !== userId) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [id, userId]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç—É—Ä–Ω–∏—Ä' });
            }
        }

        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
        }

        const deleteResult = await pool.query('DELETE FROM tournaments WHERE id = $1 RETURNING *', [id]);
        if (deleteResult.rows.length === 0) {
            return res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä' });
        }

        const deletedTournament = deleteResult.rows[0];
        res.status(200).json({ message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', tournament: deletedTournament });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞
router.post('/matches/:matchId/result', authenticateToken, verifyEmailRequired, async (req, res) => {
    const { matchId } = req.params;
    const { winner_team_id, score1, score2 } = req.body;
    const userId = req.user.id;

    try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º matchId –≤ —á–∏—Å–ª–æ
        const matchIdNum = Number(matchId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [matchIdNum]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (tournament.created_by !== userId) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [matchIdNum, userId]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞' });
            }
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
        const matchResult = await pool.query('SELECT * FROM matches WHERE id = $1 AND tournament_id = $2', [matchIdNum, matchIdNum]);
        if (matchResult.rows.length === 0) {
            return res.status(400).json({ error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const match = matchResult.rows[0];

        // –ó–∞–ø—Ä–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á —É–∂–µ —Å—ã–≥—Ä–∞–Ω (–µ—Å—Ç—å winner_team_id)
        for (const nextMatchId of [match.next_match_id, match.loser_next_match_id]) {
            if (nextMatchId) {
                const nextRes = await pool.query(
                    'SELECT winner_team_id FROM matches WHERE id = $1',
                    [nextMatchId]
                );
                if (nextRes.rows.length && nextRes.rows[0].winner_team_id) {
                    return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á —É–∂–µ —Å—ã–≥—Ä–∞–Ω' });
                }
            }
        }
        
        if (match.winner_team_id && match.winner_team_id === winner_team_id) {
            return res.status(400).json({ error: '–≠—Ç–æ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ winner_team_id —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
        if (winner_team_id && ![match.team1_id, match.team2_id].includes(winner_team_id)) {
            return res.status(400).json({ error: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ (—Å—á–µ—Ç, –∫–∞—Ä—Ç—ã)
        const scoreChanged = match.score1 !== score1 || match.score2 !== score2;
        const mapsChanged = maps && Array.isArray(maps) && maps.length > 0;
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏:
        // 1. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è
        // 2. –ò–∑–º–µ–Ω–∏–ª—Å—è —Å—á–µ—Ç
        // 3. –î–æ–±–∞–≤–ª–µ–Ω—ã/–∏–∑–º–µ–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö
        if (match.winner_team_id === winner_team_id && !scoreChanged && !mapsChanged) {
            return res.status(400).json({ error: '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è' });
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
        await pool.query(
            'UPDATE matches SET winner_team_id = $1, score1 = $2, score2 = $3 WHERE id = $4',
            [winner_team_id, score1, score2, matchIdNum]
        );

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        const loser_team_id = match.team1_id === winner_team_id ? match.team2_id : match.team1_id;

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (winner_team_id && match.next_match_id) {
            const nextMatchResult = await pool.query('SELECT * FROM matches WHERE id = $1', [match.next_match_id]);
            if (nextMatchResult.rows.length > 0) {
                const nextMatch = nextMatchResult.rows[0];
                console.log(`–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: ${nextMatch.match_number}`);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é (team1 –∏–ª–∏ team2) –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                if (!nextMatch.team1_id) {
                    await pool.query('UPDATE matches SET team1_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    console.log(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å (${winner_team_id}) –ø–æ–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é team1 –º–∞—Ç—á–∞ ${nextMatch.match_number}`);
                } else if (!nextMatch.team2_id) {
                    await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    console.log(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å (${winner_team_id}) –ø–æ–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é team2 –º–∞—Ç—á–∞ ${nextMatch.match_number}`);
                } else {
                    console.log(`–û–±–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Ç—á–µ ${nextMatch.match_number} —É–∂–µ –∑–∞–Ω—è—Ç—ã`);
                }
            }
        }

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –≤ –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª –∏ –µ—Å—Ç—å loser_next_match_id
        if (loser_team_id && match.loser_next_match_id) {
            const loserNextMatchResult = await pool.query('SELECT * FROM matches WHERE id = $1', [match.loser_next_match_id]);
            if (loserNextMatchResult.rows.length > 0) {
                const loserNextMatch = loserNextMatchResult.rows[0];
                console.log(`–ú–∞—Ç—á –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ: ${loserNextMatch.match_number} (–º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ)`);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é (team1 –∏–ª–∏ team2) –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
                if (!loserNextMatch.team1_id) {
                    await pool.query('UPDATE matches SET team1_id = $1 WHERE id = $2', [loser_team_id, loserNextMatch.id]);
                    console.log(`–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π (${loser_team_id}) –ø–æ–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é team1 –º–∞—Ç—á–∞ ${loserNextMatch.match_number}`);
                } else if (!loserNextMatch.team2_id) {
                    await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [loser_team_id, loserNextMatch.id]);
                    console.log(`–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π (${loser_team_id}) –ø–æ–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é team2 –º–∞—Ç—á–∞ ${loserNextMatch.match_number}`);
                } else {
                    console.log(`–û–±–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Ç—á–µ ${loserNextMatch.match_number} —É–∂–µ –∑–∞–Ω—è—Ç—ã`);
                }
            }
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (—Ä–∞—É–Ω–¥ -1)
        if (match.round === -1) {
            // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ match.next_match_id
            console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥');
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è Double Elimination
        if (tournament.format === 'double_elimination') {
            if (match.round !== -1 && match.next_match_id) {
                const nextMatchResult = await pool.query('SELECT * FROM matches WHERE id = $1', [match.next_match_id]);
                if (nextMatchResult.rows.length > 0) {
                    const nextMatch = nextMatchResult.rows[0];

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —É–∂–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
                    if (nextMatch.team1_id === winner_team_id || nextMatch.team2_id === winner_team_id) {
                        console.log(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å (team ${winner_team_id}) —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Ç—á ${nextMatch.id}`);
                    } else if (!nextMatch.team1_id) {
                        await pool.query('UPDATE matches SET team1_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    } else if (!nextMatch.team2_id && nextMatch.team1_id !== winner_team_id) {
                        await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    } else if (nextMatch.team1_id === nextMatch.team2_id) {
                        await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [winner_team_id, nextMatch.id]);
                    } else {
                        const roundMatches = await pool.query(
                            'SELECT * FROM matches WHERE tournament_id = $1 AND round = $2 AND bracket_type = $3',
                            [id, match.round + 1, 'winner']
                        );
                        const availableMatch = roundMatches.rows.find(m => !m.team2_id && m.team1_id !== winner_team_id);
                        if (availableMatch) {
                            await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [winner_team_id, availableMatch.id]);
                            await pool.query('UPDATE matches SET next_match_id = $1 WHERE id = $2', [availableMatch.id, matchId]);
                        } else {
                            return res.status(400).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–µ–π —Å–µ—Ç–∫–µ' });
                        }
                    }
                }
            }

            // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –Ω–∏–∂–Ω—é—é —Å–µ—Ç–∫—É –∏–ª–∏ –≤—ã–±—ã–≤–∞–µ—Ç
            if (loser_team_id) {
                if (match.bracket_type === 'winner') {
                    // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –∏–∑ –≤–µ—Ä—Ö–Ω–µ–π —Å–µ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –Ω–∏–∂–Ω—é—é
                    let targetLoserRound;
                    const totalWinnerRounds = Math.ceil(Math.log2(6)); // –î–ª—è 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 3 —Ä–∞—É–Ω–¥–∞ (0, 1, 2)
                    const totalLoserRounds = totalWinnerRounds + 1; // 4 —Ä–∞—É–Ω–¥–∞ (1, 2, 3, 4)

                    if (match.round === -1) {
                        targetLoserRound = 1;
                    } else if (match.round === totalWinnerRounds - 1) {
                        // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –∏–∑ —Ñ–∏–Ω–∞–ª–∞ –≤–µ—Ä—Ö–Ω–µ–π —Å–µ—Ç–∫–∏ (Round 2) –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ —Ñ–∏–Ω–∞–ª –Ω–∏–∂–Ω–µ–π —Å–µ—Ç–∫–∏ (Round 4)
                        targetLoserRound = totalLoserRounds;
                    } else {
                        // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –∏–∑ Round 0 –≤–µ—Ä—Ö–Ω–µ–π —Å–µ—Ç–∫–∏ -> Round 1 –Ω–∏–∂–Ω–µ–π, Round 1 –≤–µ—Ä—Ö–Ω–µ–π -> Round 2 –Ω–∏–∂–Ω–µ–π –∏ —Ç.–¥.
                        targetLoserRound = match.round + 1;
                    }

                    let loserMatches = await pool.query(
                        'SELECT * FROM matches WHERE tournament_id = $1 AND bracket_type = $2 AND round = $3 AND is_third_place_match = false',
                        [id, 'loser', targetLoserRound]
                    );

                    let availableLoserMatch = loserMatches.rows.find(m => (!m.team1_id || !m.team2_id) && m.team1_id !== loser_team_id && m.team2_id !== loser_team_id);

                    if (!availableLoserMatch) {
                        const maxMatchNumberResult = await pool.query(
                            'SELECT COALESCE(MAX(match_number), 0) as max_match_number FROM matches WHERE tournament_id = $1 AND bracket_type = $2 AND round = $3',
                            [id, 'loser', targetLoserRound]
                        );
                        const maxMatchNumber = maxMatchNumberResult.rows[0].max_match_number;

                        const newMatchResult = await pool.query(
                            'INSERT INTO matches (tournament_id, round, match_number, bracket_type, team1_id, team2_id, match_date) ' +
                            'VALUES ($1, $2, $3, $4, $5, NULL, NOW()) RETURNING *',
                            [id, targetLoserRound, maxMatchNumber + 1, 'loser', loser_team_id]
                        );
                        availableLoserMatch = newMatchResult.rows[0];
                        console.log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Ç—á ${availableLoserMatch.id} –≤ —Ä–∞—É–Ω–¥–µ ${targetLoserRound} —Å–µ—Ç–∫–∏ –ª—É–∑–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (team ${loser_team_id})`);
                    } else {
                        if (!availableLoserMatch.team1_id) {
                            await pool.query('UPDATE matches SET team1_id = $1 WHERE id = $2', [loser_team_id, availableLoserMatch.id]);
                        } else {
                            await pool.query('UPDATE matches SET team2_id = $1 WHERE id = $2', [loser_team_id, availableLoserMatch.id]);
                        }
                        console.log(`–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π (team ${loser_team_id}) –∏–∑ —Ä–∞—É–Ω–¥–∞ ${match.round} –≤–µ—Ä—Ö–Ω–µ–π —Å–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Ç—á ${availableLoserMatch.id} —Ä–∞—É–Ω–¥–∞ ${targetLoserRound} —Å–µ—Ç–∫–∏ –ª—É–∑–µ—Ä–æ–≤`);
                    }
                } else if (match.bracket_type === 'loser') {
                    // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –∏–∑ –Ω–∏–∂–Ω–µ–π —Å–µ—Ç–∫–∏ –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
                    console.log(`–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π (team ${loser_team_id}) –∏–∑ –º–∞—Ç—á–∞ ${match.id} –Ω–∏–∂–Ω–µ–π —Å–µ—Ç–∫–∏ –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞`);
                }
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournament = await pool.query(
            'SELECT t.*, ' +
            '(SELECT COALESCE(json_agg(to_jsonb(tp) || jsonb_build_object(\'avatar_url\', u.avatar_url)), \'[]\') FROM tournament_participants tp LEFT JOIN users u ON tp.user_id = u.id WHERE tp.tournament_id = t.id) as participants, ' +
            '(SELECT COALESCE(json_agg(m.*), \'[]\') FROM matches m WHERE m.tournament_id = t.id) as matches ' +
            'FROM tournaments t WHERE t.id = $1',
            [matchIdNum]
        );

        const tournamentData = updatedTournament.rows[0] || {};
        tournamentData.matches = Array.isArray(tournamentData.matches) && tournamentData.matches[0] !== null 
            ? tournamentData.matches 
            : [];
        tournamentData.participants = Array.isArray(tournamentData.participants) && tournamentData.participants[0] !== null 
            ? tournamentData.participants 
            : [];

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏–º —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
        broadcastTournamentUpdate(matchIdNum, tournamentData);

        console.log('üîç Match updated for tournament:', tournamentData);
        res.status(200).json({ message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω', tournament: tournamentData });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
router.put('/:id/full-description', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id } = req.params;
    const { full_description } = req.body;
    const userId = req.user.id;

    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (tournament.created_by !== userId) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [id, userId]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞' });
            }
        }

        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
        }

        const updateResult = await pool.query(
            'UPDATE tournaments SET full_description = $1 WHERE id = $2 RETURNING *',
            [full_description, id]
        );
        if (updateResult.rows.length === 0) {
            return res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞' });
        }
        const updatedTournament = updateResult.rows[0];

        res.status(200).json({ message: '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', tournament: updatedTournament });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
router.put('/:id/rules', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id } = req.params;
    const { rules } = req.body;
    const userId = req.user.id;

    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const tournament = tournamentResult.rows[0];

        if (tournament.created_by !== userId) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [id, userId]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞' });
            }
        }

        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
        }

        const updateResult = await pool.query(
            'UPDATE tournaments SET rules = $1 WHERE id = $2 RETURNING *',
            [rules, id]
        );
        if (updateResult.rows.length === 0) {
            return res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞' });
        }
        const updatedTournament = updateResult.rows[0];

        res.status(200).json({ message: '–†–µ–≥–ª–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', tournament: updatedTournament });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
router.put('/:id/description', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id } = req.params;
    const { description } = req.body;
    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const updateResult = await pool.query(
            'UPDATE tournaments SET description = $1 WHERE id = $2 RETURNING *',
            [description, id]
        );
        if (updateResult.rows.length === 0) {
            return res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞' });
        }
        res.status(200).json({ message: '–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', tournament: updateResult.rows[0] });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞ —Ç—É—Ä–Ω–∏—Ä–∞
router.put('/:id/prize-pool', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id } = req.params;
    const { prize_pool } = req.body;
    try {
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        const updateResult = await pool.query(
            'UPDATE tournaments SET prize_pool = $1 WHERE id = $2 RETURNING *',
            [prize_pool, id]
        );
        if (updateResult.rows.length === 0) {
            return res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞' });
        }
        res.status(200).json({ message: '–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', tournament: updateResult.rows[0] });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º
router.post('/:id/mix-generate-teams', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id } = req.params;
    const { ratingType = 'faceit' } = req.body; // üîß –£–ë–ò–†–ê–ï–ú teamSize: requestedTeamSize –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
        const tourRes = await pool.query('SELECT team_size, created_by, name FROM tournaments WHERE id = $1', [id]);
        if (!tourRes.rows.length) return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        const { team_size: sizeFromDb, created_by, name: tournamentName } = tourRes.rows[0];
        
        // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ teamSize —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        console.log(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TEAM_SIZE:`);
        console.log(`   - –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î (sizeFromDb):`, sizeFromDb);
        console.log(`   - –¢–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è:`, typeof sizeFromDb);
        console.log(`   - parseInt —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, parseInt(sizeFromDb, 10));
        console.log(`   - isNaN –ø—Ä–æ–≤–µ—Ä–∫–∞:`, isNaN(parseInt(sizeFromDb, 10)));
        
        // üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ teamSize
        let teamSize;
        if (sizeFromDb !== null && sizeFromDb !== undefined) {
            const parsedSize = parseInt(sizeFromDb, 10);
            if (!isNaN(parsedSize) && parsedSize > 0) {
                teamSize = parsedSize;
                console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ë–î: ${teamSize}`);
            } else {
                teamSize = 5; // fallback
                console.log(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ team_size –≤ –ë–î (${sizeFromDb}), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: ${teamSize}`);
            }
        } else {
            teamSize = 5; // fallback for null/undefined
            console.log(`‚ö†Ô∏è team_size –≤ –ë–î —Ä–∞–≤–Ω–æ null/undefined, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: ${teamSize}`);
        }

        console.log(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournamentName}" (ID: ${id})`);
        console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã = ${teamSize} (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—É—Ä–Ω–∏—Ä–∞), —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ = ${ratingType}`);

        // üÜï –ü–û–õ–£–ß–ê–ï–ú –í–°–ï–• –£–ß–ê–°–¢–ù–ò–ö–û–í –°–ù–ê–ß–ê–õ–ê –ü–ï–†–ï–î –£–î–ê–õ–ï–ù–ò–ï–ú –ö–û–ú–ê–ù–î
        const partRes = await pool.query(
            `SELECT tp.id AS participant_id, tp.user_id, tp.name, tp.in_team,
                    tp.faceit_elo, tp.cs2_premier_rank,
                    u.faceit_elo as user_faceit_elo, u.cs2_premier_rank as user_premier_rank,
                    COALESCE(tp.faceit_elo, u.faceit_elo, 1000) as faceit_rating,
                    COALESCE(tp.cs2_premier_rank, u.cs2_premier_rank, 5) as premier_rating
             FROM tournament_participants tp
             LEFT JOIN users u ON tp.user_id = u.id
             WHERE tp.tournament_id = $1
             ORDER BY tp.in_team DESC, tp.created_at ASC`,
            [id]
        );
        
        const participants = partRes.rows;
        if (!participants.length) {
            return res.status(400).json({ error: '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥' });
        }
        
        console.log(`üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: ${participants.length}`);
        
        // üÜï –ü–†–û–í–ï–†–Ø–ï–ú –î–û–°–¢–ê–¢–û–ß–ù–û–°–¢–¨ –£–ß–ê–°–¢–ù–ò–ö–û–í –î–û –£–î–ê–õ–ï–ù–ò–Ø –ö–û–ú–ê–ù–î
        const totalPlayers = participants.length;
        const fullTeams = Math.floor(totalPlayers / teamSize);
        const playersInTeams = fullTeams * teamSize;
        const remainingPlayers = totalPlayers - playersInTeams;
        
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥:`);
        console.log(`   - –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${totalPlayers}`);
        console.log(`   - –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ${teamSize}`);
        console.log(`   - –ü–æ–ª–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: ${fullTeams}`);
        console.log(`   - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: ${playersInTeams}`);
        console.log(`   - –û—Å—Ç–∞–Ω–µ—Ç—Å—è –≤–Ω–µ –∫–æ–º–∞–Ω–¥: ${remainingPlayers}`);
        
        if (fullTeams === 0) {
            console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${teamSize - totalPlayers} –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã`);
            return res.status(400).json({ 
                error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ${teamSize} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∞ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ ${totalPlayers}` 
            });
        }

        // üîß –¢–ï–ü–ï–†–¨ –ë–ï–ó–û–ü–ê–°–ù–û –£–î–ê–õ–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–û–ú–ê–ù–î–´
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${id} –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º`);
        
        // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        await pool.query(
            'DELETE FROM tournament_team_members WHERE team_id IN (SELECT id FROM tournament_teams WHERE tournament_id = $1)',
            [id]
        );
        
        // –£–¥–∞–ª—è–µ–º —Å–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
        const deleteResult = await pool.query(
            'DELETE FROM tournament_teams WHERE tournament_id = $1',
            [id]
        );
        
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥`);

        // üÜï –£–õ–£–ß–®–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ô–¢–ò–ù–ì–û–í –£–ß–ê–°–¢–ù–ò–ö–û–í
        console.log(`üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ô–¢–ò–ù–ì–û–í (—Ç–∏–ø: ${ratingType}):`);
        participants.forEach((p, index) => {
            const debugInfo = {
                index: index + 1,
                name: p.name,
                user_id: p.user_id,
                is_guest: !p.user_id,
                tp_faceit_elo: p.faceit_elo,
                tp_cs2_premier_rank: p.cs2_premier_rank,
                user_faceit_elo: p.user_faceit_elo,
                user_premier_rank: p.user_premier_rank,
                final_faceit_rating: p.faceit_rating,
                final_premier_rating: p.premier_rating,
                selected_rating: ratingType === 'faceit' ? p.faceit_rating : p.premier_rating,
                in_team: p.in_team
            };
            console.log(`  ${index + 1}. ${JSON.stringify(debugInfo)}`);
        });
        
        // üÜï –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –£–ß–ê–°–¢–ù–ò–ö–û–í
        const guestParticipants = participants.filter(p => !p.user_id);
        const registeredParticipants = participants.filter(p => p.user_id);
        const participantsWithCustomRatings = participants.filter(p => p.faceit_elo || p.cs2_premier_rank);
        
        console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–ß–ê–°–¢–ù–ò–ö–û–í:`);
        console.log(`   - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${registeredParticipants.length}`);
        console.log(`   - –ì–æ—Å—Ç–µ–π: ${guestParticipants.length}`);
        console.log(`   - –° –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏: ${participantsWithCustomRatings.length}`);
        
        if (guestParticipants.length > 0) {
            console.log(`üë• –ì–û–°–¢–ò –° –†–ï–ô–¢–ò–ù–ì–ê–ú–ò:`);
            guestParticipants.forEach(guest => {
                console.log(`   - ${guest.name}: faceit=${guest.faceit_elo}, premier=${guest.cs2_premier_rank}`);
            });
        }
        
        // üÜï –°–û–†–¢–ò–†–£–ï–ú –ò–ì–†–û–ö–û–í –ü–û –†–ï–ô–¢–ò–ù–ì–£ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞)
        const sortedParticipants = [...participants].sort((a, b) => {
            let ratingA, ratingB;
            
            if (ratingType === 'faceit') {
                ratingA = a.faceit_rating;
                ratingB = b.faceit_rating;
            } else if (ratingType === 'premier') {
                ratingA = a.premier_rating;
                ratingB = b.premier_rating;
            } else {
                ratingA = a.faceit_rating;
                ratingB = b.faceit_rating;
            }
            
            // üÜï –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–û–†–¢–ò–†–û–í–ö–ê: –µ—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ä–∞–≤–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
            if (ratingB === ratingA) {
                return Math.random() - 0.5; // –°–ª—É—á–∞–π–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Ä–∞–≤–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            }
            
            return ratingB - ratingA; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é (–ª—É—á—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        });
        
        // üÜï –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–†–¢–ò–†–û–í–ö–ò –° –ü–†–û–í–ï–†–ö–û–ô ELO –ù–ï–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–•
        console.log(`üîΩ –£–ß–ê–°–¢–ù–ò–ö–ò –ü–û–°–õ–ï –°–û–†–¢–ò–†–û–í–ö–ò –ü–û ${ratingType.toUpperCase()}:`);
        sortedParticipants.slice(0, Math.min(15, sortedParticipants.length)).forEach((p, index) => {
            const selectedRating = ratingType === 'faceit' ? p.faceit_rating : p.premier_rating;
            const isGuest = !p.user_id;
            const hasCustomRating = p.faceit_elo || p.cs2_premier_rank;
            
            // üîç –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø –ù–ï–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í
            if (isGuest && hasCustomRating) {
                console.log(`  ${index + 1}. üîç –ì–û–°–¢–¨ ${p.name}:`);
                console.log(`     - –ö–∞—Å—Ç–æ–º–Ω—ã–π FACEIT ELO: ${p.faceit_elo}`);
                console.log(`     - –ö–∞—Å—Ç–æ–º–Ω—ã–π Premier: ${p.cs2_premier_rank}`);
                console.log(`     - –ò—Ç–æ–≥–æ–≤—ã–π FACEIT —Ä–µ–π—Ç–∏–Ω–≥: ${p.faceit_rating}`);
                console.log(`     - –ò—Ç–æ–≥–æ–≤—ã–π Premier —Ä–µ–π—Ç–∏–Ω–≥: ${p.premier_rating}`);
                console.log(`     - –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ô —Ä–µ–π—Ç–∏–Ω–≥ (${ratingType}): ${selectedRating}`);
            } else {
                console.log(`  ${index + 1}. ${p.name} - ${ratingType} —Ä–µ–π—Ç–∏–Ω–≥: ${selectedRating} ${isGuest ? '(–≥–æ—Å—Ç—å)' : '(–∑–∞—Ä–µ–≥.)'} ${hasCustomRating ? '(–∫–∞—Å—Ç–æ–º)' : '(–ø—Ä–æ—Ñ.)'}`);
            }
        });
        if (sortedParticipants.length > 15) {
            console.log(`  ... –∏ –µ—â–µ ${sortedParticipants.length - 15} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        }
        
        // üÜï –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ô–¢–ò–ù–ì–û–í
        const ratingsUsed = sortedParticipants.map(p => ratingType === 'faceit' ? p.faceit_rating : p.premier_rating);
        const minRating = Math.min(...ratingsUsed);
        const maxRating = Math.max(...ratingsUsed);
        const avgRating = ratingsUsed.reduce((sum, rating) => sum + rating, 0) / ratingsUsed.length;
        
        console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ô–¢–ò–ù–ì–û–í (${ratingType}):`);
        console.log(`   - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: ${minRating}`);
        console.log(`   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: ${maxRating}`);
        console.log(`   - –°—Ä–µ–¥–Ω–∏–π: ${Math.round(avgRating)}`);
        console.log(`   - –†–∞–∑–±—Ä–æ—Å: ${maxRating - minRating}`);
        
        // üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–£–õ–ï–í–´–• –ò –ë–ê–ó–û–í–´–• –†–ï–ô–¢–ò–ù–ì–û–í
        const baseRatingValue = ratingType === 'faceit' ? 1000 : 5;
        const zeroRatings = ratingsUsed.filter(r => r === 0);
        const baseRatings = ratingsUsed.filter(r => r === baseRatingValue);
        
        if (zeroRatings.length > 0) {
            console.log(`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${zeroRatings.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º!`);
            const participantsWithZeroRating = sortedParticipants.filter(p => 
                (ratingType === 'faceit' ? p.faceit_rating : p.premier_rating) === 0
            );
            participantsWithZeroRating.forEach(p => {
                console.log(`   - ‚ùå ${p.name}: tp.faceit_elo=${p.faceit_elo}, tp.cs2_premier_rank=${p.cs2_premier_rank}, user.faceit_elo=${p.user_faceit_elo}, user.cs2_premier_rank=${p.user_premier_rank}`);
                console.log(`     Final: faceit_rating=${p.faceit_rating}, premier_rating=${p.premier_rating}`);
            });
        }
        
        if (baseRatings.length > 0) {
            console.log(`üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –±–∞–∑–æ–≤—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º (${baseRatingValue}): ${baseRatings.length}`);
        }
        
        // üÜï –ü–†–û–í–ï–†–ö–ê –ù–ï–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í –° –ö–ê–°–¢–û–ú–ù–´–ú–ò –†–ï–ô–¢–ò–ù–ì–ê–ú–ò
        const guestsWithCustomRatings = sortedParticipants.filter(p => !p.user_id && (p.faceit_elo || p.cs2_premier_rank));
        if (guestsWithCustomRatings.length > 0) {
            console.log(`üë§ –ì–û–°–¢–ò –° –ö–ê–°–¢–û–ú–ù–´–ú–ò –†–ï–ô–¢–ò–ù–ì–ê–ú–ò: ${guestsWithCustomRatings.length}`);
            guestsWithCustomRatings.forEach((p, idx) => {
                const currentRating = ratingType === 'faceit' ? p.faceit_rating : p.premier_rating;
                const customValue = ratingType === 'faceit' ? p.faceit_elo : p.cs2_premier_rank;
                console.log(`   ${idx + 1}. ${p.name}: –∫–∞—Å—Ç–æ–º=${customValue}, –∏—Ç–æ–≥=${currentRating}, –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ=${sortedParticipants.indexOf(p) + 1}`);
            });
        }
        
        // üÜï –†–ê–ó–î–ï–õ–Ø–ï–ú –£–ß–ê–°–¢–ù–ò–ö–û–í: –ø–µ—Ä–≤—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –∫–æ–º–∞–Ω–¥—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤–Ω–µ –∫–æ–º–∞–Ω–¥
        const participantsForTeams = sortedParticipants.slice(0, playersInTeams);
        const participantsNotInTeams = sortedParticipants.slice(playersInTeams);
        
        console.log(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥: ${participantsForTeams.length}`);
        console.log(`üö´ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–Ω–µ –∫–æ–º–∞–Ω–¥: ${participantsNotInTeams.length}`);
        
        // üÜï –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ê–ù–î –° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –°–õ–£–ß–ê–ô–ù–û–°–¢–¨–Æ
        const teams = [];
        
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for (let i = 0; i < fullTeams; i++) {
            teams.push({
                name: `–ö–æ–º–∞–Ω–¥–∞ ${i + 1}`,
                members: []
            });
        }
        
        // üîß –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ê–î–ê–ü–¢–ò–í–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –†–ê–ó–ú–ï–†–ê –ö–û–ú–ê–ù–î–´
        if (teamSize === 2) {
            console.log(`üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–û–ü–ê–†–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏–∑ 2 –∏–≥—Ä–æ–∫–æ–≤`);
            
            // üéØ –í–ê–†–ò–ê–ù–¢ 1: –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–û–ü–ê–†–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú
            // –ü—Ä–∏–Ω—Ü–∏–ø: —Å–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã, –æ—Ü–µ–Ω–∏–≤–∞–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –æ–±—â–µ–º—É —Å—Ä–µ–¥–Ω–µ–º—É
            // –ü–ª—é—Å—ã: –ø—Ä–æ—Å—Ç–æ—Ç–∞, –±—ã—Å—Ç—Ä–æ—Ç–∞ (O(n¬≤)), –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            // –ú–∏–Ω—É—Å—ã: –∂–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
            // –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: 30-60% —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            
            const averageRating = participantsForTeams.reduce((sum, p) => {
                return sum + (ratingType === 'faceit' ? p.faceit_rating : p.premier_rating);
            }, 0) / participantsForTeams.length;
            
            console.log(`üìä –û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${Math.round(averageRating)}`);
            
            // ============================================
            // üéØ –í–ê–†–ò–ê–ù–¢ 2: –ê–î–ê–ü–¢–ò–í–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –° –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–û–ô (–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô)
            // 
            // –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
            // 1. –í—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–æ–º–∞–Ω–¥—ã:
            //    - teamSize = 2: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–∞—Ä (—Ç–µ–∫—É—â–∏–π)
            //    - teamSize = 3-5: –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è "–∑–º–µ–π–∫–∞"
            //    - teamSize > 5: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è "–∑–º–µ–π–∫–∞"
            // 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –¥–æ 100 –ø–æ–ø—ã—Ç–æ–∫:
            //    - –¶–µ–ª—å: –¥–æ—Å—Ç–∏—á—å ‚â§15% —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
            //    - –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –æ–±–º–µ–Ω–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
            //    - –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –æ–±–º–µ–Ω–∞ –Ω–∞ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            // 3. –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
            //
            // –ü–ª—é—Å—ã: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ, —É–º–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            // –ú–∏–Ω—É—Å—ã: –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –¥–æ–ª—å—à–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (100-500ms)
            // –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: 10-20% —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            // 
            // –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
            // ```javascript
            // let teams = createInitialTeams(participantsForTeams, teamSize, algorithm);
            // let attempts = 0;
            // while (!isBalanced(teams, 15) && attempts < 100) {
            //     const bestSwap = findBestPlayerSwap(teams, ratingType);
            //     if (bestSwap) executeSwap(teams, bestSwap);
            //     attempts++;
            // }
            // ```
            // ============================================
            
            // ============================================  
            // üéØ –í–ê–†–ò–ê–ù–¢ 3: –ì–ò–ë–†–ò–î–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –° –≠–õ–ï–ú–ï–ù–¢–ê–ú–ò ML
            //
            // –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
            // 1. –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º:
            //    - 50 –ø–æ–∫–æ–ª–µ–Ω–∏–π —ç–≤–æ–ª—é—Ü–∏–∏ –ø–æ–ø—É–ª—è—Ü–∏–π –∫–æ–º–∞–Ω–¥
            //    - –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ–ª–µ–∫—Ü–∏—è –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É (–±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥)
            //    - –û–¥–Ω–æ—Ç–æ—á–µ—á–Ω–æ–µ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ —Å –º—É—Ç–∞—Ü–∏–µ–π 10%
            // 2. –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∂–∏–≥–∞:
            //    - 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞
            //    - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ 99.5% –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é
            //    - –ü—Ä–∏–Ω—è—Ç–∏–µ —Ö—É–¥—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é exp(-delta/temperature)
            // 3. –ñ–∞–¥–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–∫ fallback
            // 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
            //
            // –ü–ª—é—Å—ã: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
            // –ú–∏–Ω—É—Å—ã: —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –¥–æ–ª–≥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (3-10s), –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å
            // –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å: 5-15% —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            //
            // –ü—Ä–∏–º–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏–∑ 2 –∏–≥—Ä–æ–∫–æ–≤:
            // –í—Ö–æ–¥—è—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏: [3000, 2500, 2000, 1500, 1200, 1000, 900, 800]
            // –†–µ–∑—É–ª—å—Ç–∞—Ç ML: –ö1:[1400,900]=1150, –ö2:[1200,950]=1075, –ö3:[1100,1000]=1050, –ö4:[800,1250]=1025
            // –ë–∞–ª–∞–Ω—Å: (1150-1025)/1025 = 12% ‚Üê –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!
            // ============================================
            
            // üöÄ –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –í–ê–†–ò–ê–ù–¢–ê 1: –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–û–ü–ê–†–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú
            
            // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º –∏—Ö –±–ª–∏–∑–æ—Å—Ç—å –∫ —Å—Ä–µ–¥–Ω–µ–º—É
            const allPairs = [];
            for (let i = 0; i < participantsForTeams.length; i++) {
                for (let j = i + 1; j < participantsForTeams.length; j++) {
                    const player1 = participantsForTeams[i];
                    const player2 = participantsForTeams[j];
                    
                    const rating1 = ratingType === 'faceit' ? player1.faceit_rating : player1.premier_rating;
                    const rating2 = ratingType === 'faceit' ? player2.faceit_rating : player2.premier_rating;
                    
                    const pairAverage = (rating1 + rating2) / 2;
                    const distanceFromAverage = Math.abs(pairAverage - averageRating);
                    
                    allPairs.push({
                        player1,
                        player2,
                        pairAverage,
                        distanceFromAverage,
                        used: false
                    });
                }
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É (–ª—É—á—à–∏–µ –ø–∞—Ä—ã –ø–µ—Ä–≤—ã–º–∏)
            allPairs.sort((a, b) => a.distanceFromAverage - b.distanceFromAverage);
            
            console.log(`üìä –°–æ–∑–¥–∞–Ω–æ ${allPairs.length} –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä, –∏—â–µ–º ${fullTeams} –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö`);
            
            // –ñ–∞–¥–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –ø–∞—Ä—ã
            const usedPlayers = new Set();
            let teamIndex = 0;
            
            for (const pair of allPairs) {
                if (teamIndex >= fullTeams) break;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
                if (!usedPlayers.has(pair.player1.participant_id) && 
                    !usedPlayers.has(pair.player2.participant_id)) {
                    
                    teams[teamIndex].members.push(pair.player1, pair.player2);
                    usedPlayers.add(pair.player1.participant_id);
                    usedPlayers.add(pair.player2.participant_id);
                    
                    console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${teamIndex + 1}: ${pair.player1.name} (${ratingType === 'faceit' ? pair.player1.faceit_rating : pair.player1.premier_rating}) + ${pair.player2.name} (${ratingType === 'faceit' ? pair.player2.faceit_rating : pair.player2.premier_rating}) = ${Math.round(pair.pairAverage)} avg (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${Math.round(pair.distanceFromAverage)})`);
                    
                    teamIndex++;
                }
            }
            
            console.log(`üéØ –ü–û–ü–ê–†–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –ó–ê–í–ï–†–®–ï–ù: —Å–æ–∑–¥–∞–Ω–æ ${teamIndex} –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥`);
        } else {
            console.log(`‚ùå –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ø–æ–ø–∞—Ä–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –ø–æ—Ç–æ–º—É —á—Ç–æ teamSize=${teamSize} –ù–ï —Ä–∞–≤–µ–Ω 2`);
            console.log(`üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê teamSize:`);
            console.log(`   - –ó–Ω–∞—á–µ–Ω–∏–µ teamSize: ${teamSize}`);
            console.log(`   - –¢–∏–ø teamSize: ${typeof teamSize}`);
            console.log(`   - teamSize === 2: ${teamSize === 2}`);
            console.log(`   - teamSize == '2': ${teamSize == '2'}`);
            console.log(`   - teamSize == 2: ${teamSize == 2}`);
            console.log(`   - parseInt(teamSize) === 2: ${parseInt(teamSize) === 2}`);
        
            console.log(`üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ô –ê–õ–ì–û–†–ò–¢–ú "–ó–ú–ï–ô–ö–ê" –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏–∑ ${teamSize} –∏–≥—Ä–æ–∫–æ–≤`);
            
            // üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø: —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥
            let participantIndex = 0;
            
            // üéØ –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï "–ó–ú–ï–ô–ö–ê": –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å + —Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–º–µ—Ä–∞
            for (let round = 0; round < teamSize; round++) {
                console.log(`üîÑ –†–∞—É–Ω–¥ ${round + 1}/${teamSize} —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
                
                // –í —á–µ—Ç–Ω—ã—Ö —Ä–∞—É–Ω–¥–∞—Ö –∏–¥–µ–º —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ (0 ‚Üí 1 ‚Üí 2 ‚Üí 3)
                // –í –Ω–µ—á–µ—Ç–Ω—ã—Ö —Ä–∞—É–Ω–¥–∞—Ö –∏–¥–µ–º —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ (3 ‚Üí 2 ‚Üí 1 ‚Üí 0)
                const isEvenRound = round % 2 === 0;
                
                for (let i = 0; i < fullTeams && participantIndex < participantsForTeams.length; i++) {
                    const teamIndex = isEvenRound ? i : (fullTeams - 1 - i);
                    const participant = participantsForTeams[participantIndex];
                    
                    teams[teamIndex].members.push(participant);
                    
                    const participantRating = ratingType === 'faceit' ? participant.faceit_rating : participant.premier_rating;
                    console.log(`üë§ –†–∞—É–Ω–¥ ${round + 1}, –∏–≥—Ä–æ–∫ ${participant.name} (—Ä–µ–π—Ç–∏–Ω–≥: ${participantRating}) ‚Üí –ö–æ–º–∞–Ω–¥–∞ ${teamIndex + 1} (–ø–æ–∑–∏—Ü–∏—è ${teams[teamIndex].members.length}/${teamSize})`);
                    
                    participantIndex++;
                }
            }
            
            console.log(`üéØ –ê–õ–ì–û–†–ò–¢–ú "–ó–ú–ï–ô–ö–ê" –ó–ê–í–ï–†–®–ï–ù: –≤—Å–µ ${fullTeams} –∫–æ–º–∞–Ω–¥ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–æ–≤–Ω–æ ${teamSize} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        }
        
        // üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        let allTeamsValid = true;
        teams.forEach((team, index) => {
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${index + 1}: ${team.members.length}/${teamSize} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            
            if (team.members.length !== teamSize) {
                console.error(`‚ùå –û–®–ò–ë–ö–ê: –ö–æ–º–∞–Ω–¥–∞ ${index + 1} —Å–æ–¥–µ—Ä–∂–∏—Ç ${team.members.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–º–µ—Å—Ç–æ ${teamSize}!`);
                allTeamsValid = false;
            }
        });
        
        if (!allTeamsValid) {
            return res.status(500).json({ 
                error: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: –Ω–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç ${teamSize} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤` 
            });
        }
        
        console.log(`üéØ –ê–õ–ì–û–†–ò–¢–ú "–ó–ú–ï–ô–ö–ê" –ó–ê–í–ï–†–®–ï–ù: –≤—Å–µ ${fullTeams} –∫–æ–º–∞–Ω–¥ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–æ–≤–Ω–æ ${teamSize} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        
        // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–§–û–†–ú–ò–†–û–í–ê–ù–ù–´–• –ö–û–ú–ê–ù–î
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${teams.length} –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${id}`);
        console.log(`üìä –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´ –ê–õ–ì–û–†–ò–¢–ú–ê "–ó–ú–ï–ô–ö–ê":`);
        console.log(`   - –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –æ—Ç —Å–∏–ª—å–Ω–µ–π—à–∏—Ö –∫ —Å–ª–∞–±–µ–π—à–∏–º`);
        console.log(`   - –†–∞—É–Ω–¥ 1: —Å–∏–ª—å–Ω–µ–π—à–∏–µ –∏–≥—Ä–æ–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è 1‚Üí2‚Üí3‚Üí4 –ø–æ –∫–æ–º–∞–Ω–¥–∞–º`);
        console.log(`   - –†–∞—É–Ω–¥ 2: —Å–ª–µ–¥—É—é—â–∏–µ –∏–≥—Ä–æ–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è 4‚Üí3‚Üí2‚Üí1 (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)`);
        console.log(`   - –†–∞—É–Ω–¥ 3: —Å–Ω–æ–≤–∞ 1‚Üí2‚Üí3‚Üí4, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ`);
        console.log(`   - –†–µ–∑—É–ª—å—Ç–∞—Ç: –≤ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ –∏–≥—Ä–æ–∫–∏ —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è = —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã`);
        
        teams.forEach((team, index) => {
            const teamRatings = team.members.map(member => 
                ratingType === 'faceit' ? member.faceit_rating : member.premier_rating
            );
            const avgTeamRating = teamRatings.reduce((sum, rating) => sum + rating, 0) / teamRatings.length;
            const teamMembersList = team.members.map(m => `${m.name}(${ratingType === 'faceit' ? m.faceit_rating : m.premier_rating})`).join(', ');
            
            console.log(`üèÜ –ö–æ–º–∞–Ω–¥–∞ ${index + 1}: ${team.members.length} –∏–≥—Ä–æ–∫–æ–≤, —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ ${Math.round(avgTeamRating)}`);
            console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${teamMembersList}`);
        });

        // üéØ –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–†–û–õ–Ø –ë–ê–õ–ê–ù–°–ê –ö–û–ú–ê–ù–î - –í–ê–†–ò–ê–ù–¢ 2: –ê–î–ê–ü–¢–ò–í–ù–´–ô –° –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–û–ô (—Ü–µ–ª—å ‚â§15%)
        console.log(`‚öñÔ∏è –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –ë–ê–õ–ê–ù–°–ê –ö–û–ú–ê–ù–î (–º–∞–∫—Å. —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ 15%)`);
        
        // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã
        const calculateTeamAverage = (team) => {
            const ratings = team.members.map(member => 
                ratingType === 'faceit' ? member.faceit_rating : member.premier_rating
            );
            return ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length;
        };
        
        // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–∞–Ω–¥
        const checkTeamBalance = (teamsToCheck) => {
            const teamAverages = teamsToCheck.map(team => calculateTeamAverage(team));
            const minAvg = Math.min(...teamAverages);
            const maxAvg = Math.max(...teamAverages);
            const percentageDiff = ((maxAvg - minAvg) / minAvg) * 100;
            
            return {
                teamAverages,
                minAvg,
                maxAvg,
                percentageDiff,
                isBalanced: percentageDiff <= 15
            };
        };
        
        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        let balanceCheck = checkTeamBalance(teams);
        console.log(`üìä –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥:`);
        console.log(`   - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${Math.round(balanceCheck.minAvg)}`);
        console.log(`   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${Math.round(balanceCheck.maxAvg)}`);
        console.log(`   - –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${Math.round(balanceCheck.percentageDiff)}%`);
        console.log(`   - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã: ${balanceCheck.isBalanced ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        // üîÑ –ê–õ–ì–û–†–ò–¢–ú –ü–ï–†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò (–µ—Å–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ > 15%)
        let rebalanceAttempts = 0;
        const maxRebalanceAttempts = 100; // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 50 –¥–æ 100 –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 2
        
        while (!balanceCheck.isBalanced && rebalanceAttempts < maxRebalanceAttempts) {
            rebalanceAttempts++;
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ #${rebalanceAttempts}`);
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Å–∏–ª—å–Ω—É—é –∏ —Å–∞–º—É—é —Å–ª–∞–±—É—é –∫–æ–º–∞–Ω–¥—ã
            const teamAverages = teams.map((team, index) => ({
                index,
                average: calculateTeamAverage(team),
                team
            }));
            
            teamAverages.sort((a, b) => b.average - a.average);
            const strongestTeam = teamAverages[0];
            const weakestTeam = teamAverages[teamAverages.length - 1];
            
            console.log(`   - –°–∞–º–∞—è —Å–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${strongestTeam.team.name} (${Math.round(strongestTeam.average)})`);
            console.log(`   - –°–∞–º–∞—è —Å–ª–∞–±–∞—è –∫–æ–º–∞–Ω–¥–∞: ${weakestTeam.team.name} (${Math.round(weakestTeam.average)})`);
            
            // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω –∏–≥—Ä–æ–∫–∞–º–∏
            let swapMade = false;
            
            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–∞–±–µ–π—à–∏—Ö –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ)
            const strongTeamMembers = [...strongestTeam.team.members].sort((a, b) => {
                const ratingA = ratingType === 'faceit' ? a.faceit_rating : a.premier_rating;
                const ratingB = ratingType === 'faceit' ? b.faceit_rating : b.premier_rating;
                return ratingA - ratingB; // –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (—Å–ª–∞–±–µ–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
            });
            
            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å–ª–∞–±–æ–π –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—è —Å —Å–∏–ª—å–Ω–µ–π—à–∏—Ö –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ)
            const weakTeamMembers = [...weakestTeam.team.members].sort((a, b) => {
                const ratingA = ratingType === 'faceit' ? a.faceit_rating : a.premier_rating;
                const ratingB = ratingType === 'faceit' ? b.faceit_rating : b.premier_rating;
                return ratingB - ratingA; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é (—Å–∏–ª—å–Ω–µ–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
            });
            
            // –ò—â–µ–º –ª—É—á—à–∏–π –æ–±–º–µ–Ω
            outerLoop: for (const strongMember of strongTeamMembers) {
                for (const weakMember of weakTeamMembers) {
                    const strongRating = ratingType === 'faceit' ? strongMember.faceit_rating : strongMember.premier_rating;
                    const weakRating = ratingType === 'faceit' ? weakMember.faceit_rating : weakMember.premier_rating;
                    
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∏ (–æ–±–º–µ–Ω –Ω–µ –¥–∞—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞)
                    if (Math.abs(strongRating - weakRating) < 50) continue;
                    
                    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–º–µ–Ω–∞
                    const testStrongTeam = {
                        ...strongestTeam.team,
                        members: strongestTeam.team.members.map(m => 
                            m.participant_id === strongMember.participant_id ? weakMember : m
                        )
                    };
                    
                    const testWeakTeam = {
                        ...weakestTeam.team,
                        members: weakestTeam.team.members.map(m => 
                            m.participant_id === weakMember.participant_id ? strongMember : m
                        )
                    };
                    
                    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥
                    const testTeams = teams.map((team, index) => {
                        if (index === strongestTeam.index) return testStrongTeam;
                        if (index === weakestTeam.index) return testWeakTeam;
                        return team;
                    });
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞
                    const testBalance = checkTeamBalance(testTeams);
                    
                    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —É–ª—É—á—à–∏–ª—Å—è, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±–º–µ–Ω
                    if (testBalance.percentageDiff < balanceCheck.percentageDiff) {
                        console.log(`   ‚úÖ –í—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω –Ω–∞–π–¥–µ–Ω: ${strongMember.name} (${strongRating}) ‚Üî ${weakMember.name} (${weakRating})`);
                        console.log(`   üìä –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: ${Math.round(balanceCheck.percentageDiff)}% ‚Üí ${Math.round(testBalance.percentageDiff)}%`);
                        
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–º–µ–Ω
                        teams[strongestTeam.index] = testStrongTeam;
                        teams[weakestTeam.index] = testWeakTeam;
                        
                        swapMade = true;
                        break outerLoop;
                    }
                }
            }
            
            // –ï—Å–ª–∏ –æ–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É
            if (!swapMade && rebalanceAttempts % 10 === 0) {
                console.log(`   üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ ${rebalanceAttempts})`);
                
                // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
                const team1Index = Math.floor(Math.random() * teams.length);
                let team2Index = Math.floor(Math.random() * teams.length);
                while (team2Index === team1Index) {
                    team2Index = Math.floor(Math.random() * teams.length);
                }
                
                const member1Index = Math.floor(Math.random() * teams[team1Index].members.length);
                const member2Index = Math.floor(Math.random() * teams[team2Index].members.length);
                
                const member1 = teams[team1Index].members[member1Index];
                const member2 = teams[team2Index].members[member2Index];
                
                teams[team1Index].members[member1Index] = member2;
                teams[team2Index].members[member2Index] = member1;
                
                console.log(`   üîÑ –°–ª—É—á–∞–π–Ω—ã–π –æ–±–º–µ–Ω: ${member1.name} ‚Üî ${member2.name}`);
                swapMade = true;
            }
            
            if (!swapMade) {
                console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É`);
                break;
            }
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
            balanceCheck = checkTeamBalance(teams);
            console.log(`   üìä –ù–æ–≤–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${Math.round(balanceCheck.percentageDiff)}%`);
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        const finalBalance = checkTeamBalance(teams);
        console.log(`‚öñÔ∏è –§–ò–ù–ê–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–° –ö–û–ú–ê–ù–î:`);
        console.log(`   - –ü–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: ${rebalanceAttempts}`);
        console.log(`   - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${Math.round(finalBalance.minAvg)}`);
        console.log(`   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${Math.round(finalBalance.maxAvg)}`);
        console.log(`   - –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${Math.round(finalBalance.percentageDiff)}%`);
        console.log(`   - –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ (‚â§15%): ${finalBalance.isBalanced ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢ (–∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π)'}`);
        
        if (!finalBalance.isBalanced) {
            console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å 15% –±–∞–ª–∞–Ω—Å–∞. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
            console.log(`   - –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            console.log(`   - –ú–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫`);
            console.log(`   - –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ—Å—Ç–∞–≤–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
        teams.forEach((team, index) => {
            const avgRating = calculateTeamAverage(team);
            console.log(`üèÜ –§–ò–ù–ê–õ - –ö–æ–º–∞–Ω–¥–∞ ${index + 1} "${team.name}": —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ ${Math.round(avgRating)}`);
            team.members.forEach((member, memberIndex) => {
                const memberRating = ratingType === 'faceit' ? member.faceit_rating : member.premier_rating;
                console.log(`   ${memberIndex + 1}. ${member.name}: ${memberRating} ${ratingType === 'faceit' ? 'ELO' : 'Premier'}`);
            });
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ë–î
        const createdTeams = [];
        const participantIdsInTeams = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—ã
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ë–î
        for (const team of teams) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            const teamResult = await pool.query(
                'INSERT INTO tournament_teams (tournament_id, name, creator_id) VALUES ($1, $2, $3) RETURNING *',
                [id, team.name, created_by]
            );
            
            const teamId = teamResult.rows[0].id;
            const members = [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            for (const member of team.members) {
                await pool.query(
                    'INSERT INTO tournament_team_members (team_id, user_id, participant_id) VALUES ($1, $2, $3)',
                    [teamId, member.user_id, member.participant_id]
                );
                
                // –°–æ–±–∏—Ä–∞–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞
                participantIdsInTeams.push(member.participant_id);
                
                members.push({
                    participant_id: member.participant_id,
                    user_id: member.user_id,
                    name: member.name,
                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
                    faceit_elo: member.faceit_elo || member.user_faceit_elo || 1000,
                    cs2_premier_rank: member.cs2_premier_rank || member.user_premier_rank || 5,
                    // üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
                    faceit_rating_used: member.faceit_rating,
                    premier_rating_used: member.premier_rating
                });
                
                // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–•–†–ê–ù–Ø–ï–ú–û–ì–û –£–ß–ê–°–¢–ù–ò–ö–ê
                if (!member.user_id && (member.faceit_elo || member.cs2_premier_rank)) {
                    console.log(`üîç –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Å—Ç—è ${member.name} –≤ –∫–æ–º–∞–Ω–¥—É ${team.name}:`);
                    console.log(`   - –ò—Å—Ö–æ–¥–Ω—ã–π tp.faceit_elo: ${member.faceit_elo}`);
                    console.log(`   - –ò—Å—Ö–æ–¥–Ω—ã–π tp.cs2_premier_rank: ${member.cs2_premier_rank}`);
                    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π u.faceit_elo: ${member.user_faceit_elo}`);
                    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π u.cs2_premier_rank: ${member.user_premier_rank}`);
                    console.log(`   - –ò—Ç–æ–≥–æ–≤—ã–π faceit_rating: ${member.faceit_rating}`);
                    console.log(`   - –ò—Ç–æ–≥–æ–≤—ã–π premier_rating: ${member.premier_rating}`);
                    console.log(`   - –°–æ—Ö—Ä–∞–Ω—è–µ–º faceit_elo: ${member.faceit_elo || member.user_faceit_elo || 1000}`);
                    console.log(`   - –°–æ—Ö—Ä–∞–Ω—è–µ–º cs2_premier_rank: ${member.cs2_premier_rank || member.user_premier_rank || 5}`);
                }
            }
            
            createdTeams.push({
                id: teamId,
                name: team.name,
                members: members
            });
        }
        
        // üÜï –ü–û–ú–ï–ß–ê–ï–ú –£–ß–ê–°–¢–ù–ò–ö–û–í –í –ö–û–ú–ê–ù–î–ê–• –ö–ê–ö in_team = true
        if (participantIdsInTeams.length > 0) {
            await pool.query(
                `UPDATE tournament_participants 
                 SET in_team = TRUE 
                 WHERE id = ANY($1::int[])`,
                [participantIdsInTeams]
            );
            console.log(`‚úÖ –ü–æ–º–µ—á–µ–Ω–æ ${participantIdsInTeams.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∫ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö`);
        }

        // üÜï –ü–û–ú–ï–ß–ê–ï–ú –û–°–¢–ê–í–®–ò–•–°–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í –ö–ê–ö in_team = false
        const participantIdsNotInTeams = participantsNotInTeams.map(p => p.participant_id);
        if (participantIdsNotInTeams.length > 0) {
            await pool.query(
                `UPDATE tournament_participants 
                 SET in_team = FALSE 
                 WHERE id = ANY($1::int[])`,
                [participantIdsNotInTeams]
            );
            console.log(`‚úÖ –ü–æ–º–µ—á–µ–Ω–æ ${participantIdsNotInTeams.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∫ –ù–ï –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö`);
        } else {
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–Ω–µ –∫–æ–º–∞–Ω–¥, —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –≤ –∫–æ–º–∞–Ω–¥–µ
            await pool.query(
                `UPDATE tournament_participants 
                 SET in_team = TRUE 
                 WHERE tournament_id = $1`,
                [id]
            );
            console.log(`‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ –Ω–∞ team
        await pool.query('UPDATE tournaments SET participant_type = $1 WHERE id = $2', ['team', id]);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
        let resultMessage = `–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournamentName}". `;
        resultMessage += `–°–æ–∑–¥–∞–Ω–æ ${createdTeams.length} –∫–æ–º–∞–Ω–¥ –∏–∑ ${playersInTeams} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
        if (remainingPlayers > 0) {
            resultMessage += `, ${remainingPlayers} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å –≤–Ω–µ –∫–æ–º–∞–Ω–¥`;
        }
        resultMessage += `. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–π—Ç–∏–Ω–≥: ${ratingType === 'faceit' ? 'FACEIT ELO' : 'CS2 Premier Rank'}.`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥
        await sendTournamentChatAnnouncement(
            tournamentName,
            resultMessage,
            id
        );
        
        // üÜï –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø –û–¢–í–ï–¢–ê
        const teamAverageRatings = createdTeams.map(team => {
            const ratings = team.members.map(member => 
                ratingType === 'faceit' ? member.faceit_rating_used : member.premier_rating_used
            );
            return ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length;
        });
        
        const overallAverage = teamAverageRatings.reduce((sum, avg) => sum + avg, 0) / teamAverageRatings.length;
        const ratingStandardDeviation = Math.sqrt(
            teamAverageRatings.reduce((sum, avg) => sum + Math.pow(avg - overallAverage, 2), 0) / teamAverageRatings.length
        );
        
        const guestsInTeams = createdTeams.reduce((total, team) => 
            total + team.members.filter(member => !member.user_id).length, 0
        );
        
        const customRatingsInTeams = createdTeams.reduce((total, team) => 
            total + team.members.filter(member => member.faceit_elo || member.cs2_premier_rank).length, 0
        );
        
        // üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –ë–ê–õ–ê–ù–°–ê
        const finalBalanceForResponse = checkTeamBalance(teams);
        const balanceQuality = finalBalanceForResponse.percentageDiff <= 8 ? '–û—Ç–ª–∏—á–Ω—ã–π' : 
                               finalBalanceForResponse.percentageDiff <= 15 ? '–•–æ—Ä–æ—à–∏–π' : 
                               finalBalanceForResponse.percentageDiff <= 25 ? '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π' : '–ü–ª–æ—Ö–æ–π';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        res.json({ 
            teams: createdTeams,
            summary: {
                totalParticipants: totalPlayers,
                teamsCreated: fullTeams,
                participantsInTeams: playersInTeams,
                participantsNotInTeams: remainingPlayers,
                ratingType: ratingType,
                teamSize: teamSize,
                message: resultMessage,
                // üÜï –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–õ–ê–ù–°–ê
                balanceStats: {
                    overallAverageRating: Math.round(overallAverage),
                    ratingStandardDeviation: Math.round(ratingStandardDeviation * 100) / 100,
                    teamAverageRatings: teamAverageRatings.map(avg => Math.round(avg)),
                    // üéØ –ù–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–õ–ê–ù–°–ê
                    balancePercentage: Math.round(finalBalanceForResponse.percentageDiff * 100) / 100,
                    isBalanced: finalBalanceForResponse.isBalanced,
                    balanceQuality: balanceQuality,
                    rebalanceAttempts: rebalanceAttempts,
                    targetAchieved: finalBalanceForResponse.isBalanced,
                    minTeamRating: Math.round(finalBalanceForResponse.minAvg),
                    maxTeamRating: Math.round(finalBalanceForResponse.maxAvg)
                },
                participantStats: {
                    guestsInTeams: guestsInTeams,
                    registeredInTeams: playersInTeams - guestsInTeams,
                    customRatingsUsed: customRatingsInTeams
                }
            }
        });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥:', err);
        console.error('‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:', {
            message: err.message,
            stack: err.stack,
            tournamentId: id,
            requestBody: req.body
        });
        res.status(500).json({ error: err.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–∞
router.patch('/:id/team-size', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id } = req.params;
    const { teamSize } = req.body;
    
    if (!teamSize || ![2, 5].includes(parseInt(teamSize, 10))) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 2 –∏–ª–∏ 5' });
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const tournament = tournamentResult.rows[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        if (tournament.format !== 'mix') {
            return res.status(400).json({ error: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è mix-—Ç—É—Ä–Ω–∏—Ä–æ–≤' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª—Å—è –ª–∏ —É–∂–µ —Ç—É—Ä–Ω–∏—Ä
        if (tournament.status !== 'active' && tournament.status !== 'pending') {
            return res.status(400).json({ error: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ active –∏–ª–∏ pending' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ —Å–µ—Ç–∫–∞
        const bracketCheck = await pool.query('SELECT COUNT(*) FROM matches WHERE tournament_id = $1', [id]);
        if (parseInt(bracketCheck.rows[0].count) > 0) {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –ª–∏ —É–∂–µ –∫–æ–º–∞–Ω–¥—ã
        const teamsCheck = await pool.query('SELECT COUNT(*) FROM tournament_teams WHERE tournament_id = $1', [id]);
        if (parseInt(teamsCheck.rows[0].count) > 0) {
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è
            await pool.query('DELETE FROM tournament_team_members WHERE team_id IN (SELECT id FROM tournament_teams WHERE tournament_id = $1)', [id]);
            await pool.query('DELETE FROM tournament_teams WHERE tournament_id = $1', [id]);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
        const updateResult = await pool.query(
            'UPDATE tournaments SET team_size = $1 WHERE id = $2 RETURNING *',
            [teamSize, id]
        );
        
        res.status(200).json({
            message: `–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${teamSize}`,
            tournament: updateResult.rows[0]
        });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã:', err);
        res.status(500).json({ error: err.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º
router.get('/:id/original-participants', async (req, res) => {
    const { id } = req.params;
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const tourCheck = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tourCheck.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // üÜï –ü–û–õ–£–ß–ê–ï–ú –í–°–ï–• –£–ß–ê–°–¢–ù–ò–ö–û–í –° –§–õ–ê–ì–û–ú in_team –î–õ–Ø –†–ê–ó–î–ï–õ–ï–ù–ò–Ø –ù–ê –ì–†–£–ü–ü–´
        const participantsRes = await pool.query(
            `SELECT tp.id, tp.user_id, tp.name, tp.tournament_id, tp.in_team,
                    tp.faceit_elo, tp.cs2_premier_rank,
                    u.avatar_url, u.username, 
                    COALESCE(tp.faceit_elo, u.faceit_elo, 1000) as faceit_elo_combined,
                    COALESCE(tp.cs2_premier_rank, u.cs2_premier_rank, 5) as cs2_premier_rank_combined
             FROM tournament_participants tp
             LEFT JOIN users u ON tp.user_id = u.id
             WHERE tp.tournament_id = $1
             ORDER BY tp.in_team DESC, tp.created_at ASC`,
            [id]
        );

        // üÜï –†–ê–ó–î–ï–õ–Ø–ï–ú –£–ß–ê–°–¢–ù–ò–ö–û–í –ù–ê –ì–†–£–ü–ü–´
        const allParticipants = participantsRes.rows;
        const inTeam = allParticipants.filter(p => p.in_team);
        const notInTeam = allParticipants.filter(p => !p.in_team);

        console.log(`üìä –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${id}: –≤—Å–µ–≥–æ ${allParticipants.length}, –≤ –∫–æ–º–∞–Ω–¥–∞—Ö ${inTeam.length}, –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö ${notInTeam.length}`);

        res.json({
            all: allParticipants,
            inTeam: inTeam,
            notInTeam: notInTeam,
            total: allParticipants.length,
            inTeamCount: inTeam.length,
            notInTeamCount: notInTeam.length
        });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err);
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', err);
        console.error('‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:', {
            message: err.message,
            stack: err.stack,
            tournamentId: id,
            userId: req.user?.id,
            requestBody: req.body
        });
        res.status(500).json({ error: err.message });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π)
router.delete('/:id/participants/:participantId', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id, participantId } = req.params;
    const userId = req.user.id;

    try {
        console.log(`üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${participantId} –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ ${id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const tournament = tournamentResult.rows[0];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å–µ—Ç–∫–∞
        const matchesCheck = await pool.query(
            'SELECT COUNT(*) FROM matches WHERE tournament_id = $1',
            [id]
        );
        if (parseInt(matchesCheck.rows[0].count) > 0) {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        let participantInfo = null;
        let deleted = false;
        
        if (tournament.participant_type === 'solo') {
            // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            const participantResult = await pool.query(
                'SELECT tp.*, u.username FROM tournament_participants tp LEFT JOIN users u ON tp.user_id = u.id WHERE tp.id = $1 AND tp.tournament_id = $2',
                [participantId, id]
            );
            
            if (participantResult.rows.length === 0) {
                return res.status(404).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
            
            participantInfo = participantResult.rows[0];
            
            // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            const deleteResult = await pool.query(
                'DELETE FROM tournament_participants WHERE id = $1 AND tournament_id = $2 RETURNING *',
                [participantId, id]
            );
            
            deleted = deleteResult.rowCount > 0;
            
        } else {
            // –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            const teamResult = await pool.query(
                'SELECT tt.*, u.username as creator_name FROM tournament_teams tt LEFT JOIN users u ON tt.creator_id = u.id WHERE tt.id = $1 AND tt.tournament_id = $2',
                [participantId, id]
            );
            
            if (teamResult.rows.length === 0) {
                return res.status(404).json({ error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }
            
            participantInfo = teamResult.rows[0];
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            await pool.query(
                'DELETE FROM tournament_team_members WHERE team_id = $1',
                [participantId]
            );
            
            // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
            const deleteResult = await pool.query(
                'DELETE FROM tournament_teams WHERE id = $1 AND tournament_id = $2 RETURNING *',
                [participantId, id]
            );
            
            deleted = deleteResult.rowCount > 0;
        }
        
        if (!deleted) {
            return res.status(400).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞' });
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        await logTournamentEvent(id, userId, 'participant_removed', {
            removedParticipant: {
                id: participantId,
                name: participantInfo.name || participantInfo.username,
                type: tournament.participant_type
            },
            removedBy: req.user.username
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ç—É—Ä–Ω–∏—Ä–∞ (–µ—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω)
        if (tournament.created_by !== userId) {
            const notificationMessage = `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${req.user.username} —É–¥–∞–ª–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ "${participantInfo.name || participantInfo.username}" –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"`;
            await pool.query(
                'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4)',
                [tournament.created_by, notificationMessage, 'participant_removed', id]
            );
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É (–µ—Å–ª–∏ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
        if (participantInfo.user_id) {
            const notificationMessage = `–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}" –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`;
            await pool.query(
                'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4)',
                [participantInfo.user_id, notificationMessage, 'removed_from_tournament', id]
            );
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await sendTournamentChatAnnouncement(
            tournament.name,
            `–£—á–∞—Å—Ç–Ω–∏–∫ "${participantInfo.name || participantInfo.username}" –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"`,
            id
        );
        
        console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ ${participantId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ ${id}`);
        
        res.status(200).json({ 
            message: '–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞',
            removedParticipant: {
                id: participantId,
                name: participantInfo.name || participantInfo.username
            }
        });
        
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', err);
        res.status(500).json({ error: err.message });
    }
});

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò –¢–£–†–ù–ò–†–û–í =====

// –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
router.post('/:id/invite-admin', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id } = req.params;
    const { user_id } = req.body;
    const inviterId = req.user.id;

    try {
        console.log('üëë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
            tournamentId: id,
            inviterId,
            targetUserId: user_id
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        const tournament = tournamentResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await pool.query('SELECT id, username FROM users WHERE id = $1', [user_id]);
        if (userResult.rows.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        const targetUser = userResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const adminCheckResult = await pool.query(
            'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
            [id, user_id]
        );

        if (adminCheckResult.rows.length > 0) {
            return res.status(400).json({ 
                success: false, 
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç—É—Ä–Ω–∏—Ä–∞
        if (tournament.created_by === user_id) {
            return res.status(400).json({ 
                success: false, 
                message: '–°–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ —É–∂–µ –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const existingInvitationResult = await pool.query(
            `SELECT * FROM admin_invitations 
             WHERE tournament_id = $1 AND invitee_id = $2 AND status = 'pending' 
             AND expires_at > NOW()`,
            [id, user_id]
        );

        if (existingInvitationResult.rows.length > 0) {
            return res.status(400).json({ 
                success: false, 
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' 
            });
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 7 –¥–Ω–µ–π)
        const invitationResult = await pool.query(
            `INSERT INTO admin_invitations (tournament_id, inviter_id, invitee_id, status, expires_at)
             VALUES ($1, $2, $3, 'pending', NOW() + INTERVAL '7 days')
             RETURNING *`,
            [id, inviterId, user_id]
        );

        const invitation = invitationResult.rows[0];

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        let systemUserId = null;
        try {
            const systemUserResult = await pool.query(
                "SELECT id FROM users WHERE username = '1337community' AND is_system_user = true"
            );
            if (systemUserResult.rows.length > 0) {
                systemUserId = systemUserResult.rows[0].id;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (systemUserId) {
            try {
                // –ù–∞—Ö–æ–¥–∏–º —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
                const chatResult = await pool.query(
                    'SELECT id FROM chats WHERE name = $1 AND type = $2',
                    [tournament.name, 'group']
                );

                if (chatResult.rows.length > 0) {
                    const chatId = chatResult.rows[0].id;

                    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                    const messageText = `ü§ù ${req.user.username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"!\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞:\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π\n‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

                    const messageResult = await pool.query(
                        `INSERT INTO messages (chat_id, sender_id, content, message_type, metadata)
                         VALUES ($1, $2, $3, 'admin_invitation', $4)
                         RETURNING *`,
                        [
                            chatId, 
                            systemUserId, 
                            messageText,
                            JSON.stringify({
                                invitation_id: invitation.id,
                                tournament_id: id,
                                inviter_id: inviterId,
                                invitee_id: user_id,
                                actions: [
                                    {
                                        type: 'accept_admin_invitation',
                                        label: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
                                        invitation_id: invitation.id
                                    },
                                    {
                                        type: 'decline_admin_invitation', 
                                        label: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                                        invitation_id: invitation.id
                                    }
                                ]
                            })
                        ]
                    );

                    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞');
                } else {
                    console.warn('‚ö†Ô∏è –ß–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç:', error.message);
            }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(id, inviterId, 'admin_invited', {
            invitedUser: {
                id: user_id,
                username: targetUser.username
            },
            inviter: req.user.username
        });

        console.log('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');

        res.status(200).json({
            success: true,
            message: `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUser.username}`,
            data: {
                invitation_id: invitation.id,
                expires_at: invitation.expires_at
            }
        });

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', err);
        res.status(500).json({ 
            success: false, 
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
router.delete('/:id/admins/:userId', authenticateToken, verifyAdminOrCreator, async (req, res) => {
    const { id, userId } = req.params;
    const removerId = req.user.id;

    try {
        console.log('üóëÔ∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
            tournamentId: id,
            removerId,
            targetUserId: userId
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [id]);
        if (tournamentResult.rows.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        const tournament = tournamentResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
        if (tournament.created_by === parseInt(userId)) {
            return res.status(400).json({ 
                success: false, 
                message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const adminResult = await pool.query(
            'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
            [id, userId]
        );

        if (adminResult.rows.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞' 
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–¥–∞–ª—è–µ–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userResult = await pool.query('SELECT username FROM users WHERE id = $1', [userId]);
        const targetUsername = userResult.rows[0]?.username || `User #${userId}`;

        // –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const deleteResult = await pool.query(
            'DELETE FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2 RETURNING *',
            [id, userId]
        );

        if (deleteResult.rowCount === 0) {
            return res.status(400).json({ 
                success: false, 
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' 
            });
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(id, removerId, 'admin_removed', {
            removedAdmin: {
                id: userId,
                username: targetUsername
            },
            remover: req.user.username
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try {
            await pool.query(
                'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4)',
                [
                    userId, 
                    `–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"`, 
                    'admin_removed', 
                    id
                ]
            );
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error.message);
        }

        console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');

        res.status(200).json({
            success: true,
            message: `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${targetUsername} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`,
            data: {
                removed_admin_id: userId
            }
        });

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', err);
        res.status(500).json({ 
            success: false, 
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

// –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
router.post('/admin-invitations/:invitationId/accept', authenticateToken, async (req, res) => {
    const { invitationId } = req.params;
    const userId = req.user.id;

    try {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', {
            invitationId,
            userId
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const invitationResult = await pool.query(
            `SELECT ai.*, t.name as tournament_name, u.username as inviter_username
             FROM admin_invitations ai
             JOIN tournaments t ON ai.tournament_id = t.id
             JOIN users u ON ai.inviter_id = u.id
             WHERE ai.id = $1 AND ai.invitee_id = $2 AND ai.status = 'pending' 
             AND ai.expires_at > NOW()`,
            [invitationId, userId]
        );

        if (invitationResult.rows.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ' 
            });
        }

        const invitation = invitationResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const adminCheckResult = await pool.query(
            'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
            [invitation.tournament_id, userId]
        );

        if (adminCheckResult.rows.length > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ accepted –¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            await pool.query(
                'UPDATE admin_invitations SET status = $1, responded_at = NOW() WHERE id = $2',
                ['accepted', invitationId]
            );

            return res.status(200).json({ 
                success: true, 
                message: '–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞' 
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
        await pool.query(
            `INSERT INTO tournament_admins (tournament_id, user_id, permissions)
             VALUES ($1, $2, $3)`,
            [
                invitation.tournament_id, 
                userId, 
                JSON.stringify({
                    can_edit_matches: true,
                    can_manage_participants: true,
                    can_invite_admins: true
                })
            ]
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        await pool.query(
            'UPDATE admin_invitations SET status = $1, responded_at = NOW() WHERE id = $2',
            ['accepted', invitationId]
        );

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(invitation.tournament_id, userId, 'admin_assigned', {
            newAdmin: {
                id: userId,
                username: req.user.username
            },
            inviter: invitation.inviter_username,
            via: 'invitation_accepted'
        });

        console.log('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã');

        res.status(200).json({
            success: true,
            message: `–í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ "${invitation.tournament_name}"`,
            data: {
                tournament_id: invitation.tournament_id,
                tournament_name: invitation.tournament_name
            }
        });

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
        res.status(500).json({ 
            success: false, 
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
router.post('/admin-invitations/:invitationId/decline', authenticateToken, async (req, res) => {
    const { invitationId } = req.params;
    const userId = req.user.id;

    try {
        console.log('‚ùå –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', {
            invitationId,
            userId
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const invitationResult = await pool.query(
            `SELECT ai.*, t.name as tournament_name, u.username as inviter_username
             FROM admin_invitations ai
             JOIN tournaments t ON ai.tournament_id = t.id
             JOIN users u ON ai.inviter_id = u.id
             WHERE ai.id = $1 AND ai.invitee_id = $2 AND ai.status = 'pending'`,
            [invitationId, userId]
        );

        if (invitationResult.rows.length === 0) {
            return res.status(404).json({ 
                success: false, 
                message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' 
            });
        }

        const invitation = invitationResult.rows[0];

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        await pool.query(
            'UPDATE admin_invitations SET status = $1, responded_at = NOW() WHERE id = $2',
            ['declined', invitationId]
        );

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(invitation.tournament_id, userId, 'admin_invitation_declined', {
            declinedBy: {
                id: userId,
                username: req.user.username
            },
            inviter: invitation.inviter_username
        });

        console.log('‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');

        res.status(200).json({
            success: true,
            message: `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞ "${invitation.tournament_name}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ`,
            data: {
                tournament_id: invitation.tournament_id,
                tournament_name: invitation.tournament_name
            }
        });

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
        res.status(500).json({ 
            success: false, 
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

module.exports = router;