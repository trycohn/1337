/**
 * API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CS2 —Å–µ—Ä–≤–µ—Ä–∞–º–∏
 */

const express = require('express');
const router = express.Router();
const pool = require('../db');
const { authenticateToken } = require('../middleware/auth');
const rconService = require('../services/rconService');

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const requireAdmin = (req, res, next) => {
    if (!req.user || req.user.role !== 'admin') {
        return res.status(403).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
    next();
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
 * GET /api/servers
 */
router.get('/', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { status, location, is_active } = req.query;
        
        let query = 'SELECT * FROM cs2_servers WHERE 1=1';
        const params = [];
        let paramIndex = 1;
        
        if (status) {
            query += ` AND status = $${paramIndex++}`;
            params.push(status);
        }
        
        if (location) {
            query += ` AND location = $${paramIndex++}`;
            params.push(location);
        }
        
        if (is_active !== undefined) {
            query += ` AND is_active = $${paramIndex++}`;
            params.push(is_active === 'true');
        }
        
        query += ' ORDER BY name ASC';
        
        const result = await pool.query(query, params);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        const servers = result.rows.map(server => ({
            ...server,
            rcon_password: '***',
            server_password: server.server_password ? '***' : null,
            gotv_password: server.gotv_password ? '***' : null,
            db_password: server.db_password ? '***' : null
        }));
        
        res.json({ success: true, servers });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤' });
    }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ ID
 * GET /api/servers/:id
 */
router.get('/:id', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        
        const result = await pool.query(
            'SELECT * FROM cs2_servers WHERE id = $1',
            [id]
        );
        
        if (!result.rows[0]) {
            return res.status(404).json({ error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const server = {
            ...result.rows[0],
            rcon_password: '***',
            server_password: result.rows[0].server_password ? '***' : null,
            gotv_password: result.rows[0].gotv_password ? '***' : null,
            db_password: result.rows[0].db_password ? '***' : null
        };
        
        res.json({ success: true, server });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
 * POST /api/servers
 */
router.post('/', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const {
            name,
            host,
            port,
            rcon_password,
            db_host,
            db_port,
            db_user,
            db_password,
            db_name
        } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!name || !host || !rcon_password) {
            return res.status(400).json({ 
                error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: name, host, rcon_password' 
            });
        }
        
        const serverPort = port || 27015;
        
        const result = await pool.query(
            `INSERT INTO cs2_servers 
            (name, host, port, rcon_password, gotv_host, gotv_port,
             db_host, db_port, db_user, db_password, db_name)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
            RETURNING *`,
            [
                name,
                host,
                serverPort,
                rcon_password,
                host, // GOTV –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ IP
                serverPort, // GOTV –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç
                db_host || null,
                db_port || 3306,
                db_user || null,
                db_password || null,
                db_name || null
            ]
        );
        
        const server = {
            ...result.rows[0],
            rcon_password: '***',
            server_password: result.rows[0].server_password ? '***' : null,
            gotv_password: result.rows[0].gotv_password ? '***' : null,
            db_password: result.rows[0].db_password ? '***' : null
        };
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: ${name} (${host}:${port})`);
        
        res.json({ 
            success: true, 
            server,
            message: '–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', error);
        
        if (error.code === '23505') { // unique violation
            return res.status(400).json({ error: '–°–µ—Ä–≤–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }
        
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä' });
    }
});

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
 * PUT /api/servers/:id
 */
router.put('/:id', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const {
            name,
            host,
            port,
            rcon_password,
            db_host,
            db_port,
            db_user,
            db_password,
            db_name
        } = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        const existing = await pool.query('SELECT id FROM cs2_servers WHERE id = $1', [id]);
        if (!existing.rows[0]) {
            return res.status(404).json({ error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const updates = [];
        const params = [];
        let paramIndex = 1;
        
        if (name !== undefined) {
            updates.push(`name = $${paramIndex++}`);
            params.push(name);
        }
        if (host !== undefined) {
            updates.push(`host = $${paramIndex++}, gotv_host = $${paramIndex++}`);
            params.push(host);
            params.push(host); // GOTV –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ IP
        }
        if (port !== undefined) {
            updates.push(`port = $${paramIndex++}, gotv_port = $${paramIndex++}`);
            params.push(port);
            params.push(port); // GOTV –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç
        }
        if (rcon_password !== undefined && rcon_password !== '') {
            updates.push(`rcon_password = $${paramIndex++}`);
            params.push(rcon_password);
        }
        if (db_host !== undefined) {
            updates.push(`db_host = $${paramIndex++}`);
            params.push(db_host || null);
        }
        if (db_port !== undefined) {
            updates.push(`db_port = $${paramIndex++}`);
            params.push(db_port || 3306);
        }
        if (db_user !== undefined) {
            updates.push(`db_user = $${paramIndex++}`);
            params.push(db_user || null);
        }
        if (db_password !== undefined && db_password !== '') {
            updates.push(`db_password = $${paramIndex++}`);
            params.push(db_password);
        }
        if (db_name !== undefined) {
            updates.push(`db_name = $${paramIndex++}`);
            params.push(db_name || null);
        }
        
        updates.push(`updated_at = CURRENT_TIMESTAMP`);
        params.push(id);
        
        const query = `UPDATE cs2_servers SET ${updates.join(', ')} WHERE id = $${paramIndex} RETURNING *`;
        
        const result = await pool.query(query, params);
        
        const server = {
            ...result.rows[0],
            rcon_password: '***',
            server_password: result.rows[0].server_password ? '***' : null,
            gotv_password: result.rows[0].gotv_password ? '***' : null,
            db_password: result.rows[0].db_password ? '***' : null
        };
        
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: ${server.name}`);
        
        res.json({ 
            success: true, 
            server,
            message: '–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' });
    }
});

/**
 * –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
 * DELETE /api/servers/:id
 */
router.delete('/:id', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        
        const result = await pool.query(
            'DELETE FROM cs2_servers WHERE id = $1 RETURNING name',
            [id]
        );
        
        if (!result.rows[0]) {
            return res.status(404).json({ error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        console.log(`üóëÔ∏è –°–µ—Ä–≤–µ—Ä —É–¥–∞–ª–µ–Ω: ${result.rows[0].name}`);
        
        res.json({ 
            success: true, 
            message: `–°–µ—Ä–≤–µ—Ä "${result.rows[0].name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω` 
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' });
    }
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ (RCON –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
 * POST /api/servers/:id/check
 */
router.post('/:id/check', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        
        const status = await rconService.checkServerStatus(id);
        
        res.json({ 
            success: true, 
            status,
            message: status.online ? '–°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω' : '–°–µ—Ä–≤–µ—Ä –æ—Ñ–ª–∞–π–Ω'
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å RCON –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 * POST /api/servers/:id/command
 */
router.post('/:id/command', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { command, lobby_id } = req.body;
        
        if (!command) {
            return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É' });
        }
        
        const result = await rconService.executeCommand(
            id, 
            command, 
            {
                userId: req.user.id,
                lobbyId: lobby_id || null
            }
        );
        
        res.json({ 
            success: true, 
            result,
            message: '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è RCON –∫–æ–º–∞–Ω–¥—ã:', error);
        res.status(500).json({ error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É' });
    }
});

module.exports = router;

