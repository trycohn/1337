const express = require('express');
const router = express.Router();
const pool = require('../db');
const { sendNotification } = require('../notifications');

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', async (req, res) => {
    const userId = req.query.userId;
    const includeProcessed = req.query.includeProcessed === 'true';
    
    try {
        // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ includeProcessed
        let query = `SELECT n.*, CASE 
            WHEN n.type = 'admin_request' THEN ar.status 
            WHEN n.type = 'admin_request_accepted' THEN 'accepted'
            WHEN n.type = 'admin_request_rejected' THEN 'rejected'
            ELSE NULL END AS request_status 
        FROM notifications n`;
        
        if (!includeProcessed) {
            // –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ admin_request, –¥–æ–±–∞–≤–ª—è–µ–º join –∏ —É—Å–ª–æ–≤–∏–µ
            query += `
            LEFT JOIN admin_requests ar ON n.requester_id = ar.user_id AND n.tournament_id = ar.tournament_id
            WHERE n.user_id = $1 
            AND (n.type != 'admin_request' OR (n.type = 'admin_request' AND ar.status = 'pending'))`;
        } else {
            // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            query += `
            LEFT JOIN admin_requests ar ON n.requester_id = ar.user_id AND n.tournament_id = ar.tournament_id
            WHERE n.user_id = $1`;
        }
        
        query += ` ORDER BY n.created_at DESC`;
        
        const result = await pool.query(query, [userId]);
        res.json(result.rows);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', err);
        res.status(500).json({ error: err.message });
    }   
});

// –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.post('/', async (req, res) => {
  const { user_id, message, type, tournament_id, requester_id } = req.body;
  try {
    const result = await pool.query(
      'INSERT INTO notifications (user_id, message, type, tournament_id, requester_id, is_read) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *',
      [user_id, message, type, tournament_id || null, requester_id || null, false]
    );
    const notification = result.rows[0];
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
    sendNotification(user_id, notification);

    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç
    const systemChatName = '1337community';
    const chatRes = await pool.query('SELECT id FROM chats WHERE name = $1', [systemChatName]);
    if (chatRes.rows.length > 0) {
        const systemChatId = chatRes.rows[0].id;
        const msgRes = await pool.query(
            'INSERT INTO messages (chat_id, sender_id, content, message_type, content_meta) VALUES ($1, NULL, $2, $3, $4) RETURNING *',
            [systemChatId, notification.message, 'announcement', { notification_id: notification.id, type: notification.type }]
        );
        const newMsg = msgRes.rows[0];
        const io = req.app.get('io');
        io.to(`chat_${systemChatId}`).emit('message', newMsg);
    }

    res.status(201).json(notification);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
    res.status(500).json({ error: err.message });
  }
});

// –ü–æ–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
router.post('/mark-read', async (req, res) => {
    const userId = req.query.userId;
    const notificationIds = req.body.notificationIds;
    const notificationId = req.query.notificationId;
    
    try {
        if (notificationIds && Array.isArray(notificationIds)) {
            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await pool.query(
                'UPDATE notifications SET is_read = true WHERE id = ANY($1) AND user_id = $2',
                [notificationIds, userId]
            );
        } else if (notificationId) {
            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await pool.query(
                'UPDATE notifications SET is_read = true WHERE id = $1 AND user_id = $2',
                [notificationId, userId]
            );
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –¥–µ–π—Å—Ç–≤–∏–π
            await pool.query(
                `UPDATE notifications 
                SET is_read = true 
                WHERE user_id = $1 
                AND is_read = false 
                AND type NOT IN ('tournament_invite', 'admin_request', 'friend_request')`,
                [userId]
            );
        }
        res.status(200).json({ message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', err);
        res.status(500).json({ error: err.message });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
router.post('/respond', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    const notificationId = req.query.notificationId;
    const { action } = req.body;

    if (!notificationId || !action) {
        return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ' });
    }

    try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const jwt = require('jsonwebtoken');
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.id;

        // –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = await pool.query(
            'SELECT * FROM notifications WHERE id = $1',
            [notificationId]
        );

        if (notification.rows.length === 0) {
            return res.status(404).json({ error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }

        const notificationData = notification.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (notificationData.user_id !== userId) {
            return res.status(403).json({ error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        switch (notificationData.type) {
            case 'admin_request':
                // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞
                await pool.query(
                    `UPDATE admin_requests 
                     SET status = $1
                     WHERE tournament_id = $2 AND user_id = $3`,
                    [action === 'accept' ? 'accepted' : 'rejected', notificationData.tournament_id, notificationData.requester_id]
                );

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–º—É
                const notificationMessage = `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ "${
                    (await pool.query('SELECT name FROM tournaments WHERE id = $1', [notificationData.tournament_id])).rows[0]?.name || '–¢—É—Ä–Ω–∏—Ä'
                }" –±—ã–ª ${action === 'accept' ? '–ø—Ä–∏–Ω—è—Ç' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}`;
                
                const notificationInsertResult = await pool.query(
                    `INSERT INTO notifications (user_id, message, type, tournament_id, requester_id, is_read)
                     VALUES ($1, $2, $3, $4, $5, false) RETURNING *`,
                    [
                        notificationData.requester_id,
                        notificationMessage,
                        action === 'accept' ? 'admin_request_accepted' : 'admin_request_rejected',
                        notificationData.tournament_id,
                        userId
                    ]
                );
                
                // –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const newNotification = notificationInsertResult.rows[0];
                console.log(`üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${notificationData.requester_id}`);
                sendNotification(notificationData.requester_id, newNotification);

                // –ï—Å–ª–∏ –ø—Ä–∏–Ω—è—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω—ã —Ç—É—Ä–Ω–∏—Ä–∞
                if (action === 'accept') {
                    await pool.query(
                        `INSERT INTO tournament_admins (tournament_id, user_id) 
                         VALUES ($1, $2)
                         ON CONFLICT DO NOTHING`,
                        [notificationData.tournament_id, notificationData.requester_id]
                    );
                }
                break;

            case 'friend_request':
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ —Ç–æ, —á—Ç–æ –æ–Ω–∞ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    const requestCheck = await pool.query(
                        'SELECT f.*, u.username FROM friends f JOIN users u ON f.user_id = u.id WHERE f.id = $1 AND f.friend_id = $2 AND f.status = $3',
                        [notificationData.content_meta?.request_id || 0, userId, 'pending']
                    );
                    
                    if (requestCheck.rows.length === 0) {
                        // –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é-–ø–æ–ª—É—á–∞—Ç–µ–ª—é
                        const secondCheck = await pool.query(
                            'SELECT f.*, u.username FROM friends f JOIN users u ON f.user_id = u.id WHERE f.user_id = $1 AND f.friend_id = $2 AND f.status = $3',
                            [notificationData.requester_id, userId, 'pending']
                        );
                        
                        if (secondCheck.rows.length === 0) {
                            return res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' });
                        }
                        
                        const friendRequest = secondCheck.rows[0];
                        
                        if (action === 'accept') {
                            // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º, —á—Ç–æ –∏ –≤ friends.js
                            await pool.query(
                                'UPDATE friends SET status = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
                                ['accepted', friendRequest.id]
                            );
                            
                            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞—è–≤–∫–∏
                            const acceptNotification = {
                                user_id: friendRequest.user_id,
                                message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${(await pool.query('SELECT username FROM users WHERE id = $1', [userId])).rows[0]?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è`,
                                type: 'friend_request_accepted',
                                requester_id: userId
                            };
                            
                            const notificationResult = await pool.query(
                                'INSERT INTO notifications (user_id, message, type, requester_id, is_read) VALUES ($1, $2, $3, $4, $5) RETURNING *',
                                [acceptNotification.user_id, acceptNotification.message, acceptNotification.type, acceptNotification.requester_id, false]
                            );
                            
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
                            sendNotification(friendRequest.user_id, notificationResult.rows[0]);
                        } else {
                            // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
                            await pool.query(
                                'UPDATE friends SET status = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
                                ['rejected', friendRequest.id]
                            );
                        }
                    } else {
                        const friendRequest = requestCheck.rows[0];
                        
                        if (action === 'accept') {
                            // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É
                            await pool.query(
                                'UPDATE friends SET status = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
                                ['accepted', friendRequest.id]
                            );
                            
                            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞—è–≤–∫–∏
                            const acceptNotification = {
                                user_id: friendRequest.user_id,
                                message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${(await pool.query('SELECT username FROM users WHERE id = $1', [userId])).rows[0]?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è`,
                                type: 'friend_request_accepted',
                                requester_id: userId
                            };
                            
                            const notificationResult = await pool.query(
                                'INSERT INTO notifications (user_id, message, type, requester_id, is_read) VALUES ($1, $2, $3, $4, $5) RETURNING *',
                                [acceptNotification.user_id, acceptNotification.message, acceptNotification.type, acceptNotification.requester_id, false]
                            );
                            
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
                            sendNotification(friendRequest.user_id, notificationResult.rows[0]);
                        } else {
                            // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
                            await pool.query(
                                'UPDATE friends SET status = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
                                ['rejected', friendRequest.id]
                            );
                        }
                    }
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è:', err);
                    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è' });
                }
                break;

            case 'tournament_invite':
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
                if (action === 'accept') {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
                    await pool.query(
                        `INSERT INTO tournament_participants (tournament_id, user_id, status)
                         VALUES ($1, $2, 'confirmed')
                         ON CONFLICT (tournament_id, user_id) DO UPDATE SET status = 'confirmed'`,
                        [notificationData.tournament_id, userId]
                    );
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                await pool.query(
                    `UPDATE tournament_invitations 
                     SET status = $1, responded_at = NOW()
                     WHERE tournament_id = $2 AND invited_user_id = $3`,
                    [action === 'accept' ? 'accepted' : 'rejected', notificationData.tournament_id, userId]
                );
                break;

            default:
                return res.status(400).json({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
        }

        // –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        await pool.query(
            'UPDATE notifications SET is_read = true WHERE id = $1',
            [notificationId]
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Socket.IO
        const io = req.app.get('io');
        if (io) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            io.to(`user_${userId}`).emit('notification_update', {
                id: notificationId,
                action,
                type: notificationData.type,
                status: 'processed'
            });
            
            // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å–æ–∑–¥–∞–≤—à–µ–º—É –∑–∞–ø—Ä–æ—Å
            if (notificationData.requester_id) {
                io.to(`user_${notificationData.requester_id}`).emit('notification_update', {
                    type: `${notificationData.type}_${action === 'accept' ? 'accepted' : 'rejected'}`,
                    from_user_id: userId,
                    status: action === 'accept' ? 'accepted' : 'rejected'
                });
            }
        }

        res.json({ success: true, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
        res.status(500).json({ error: err.message });
    }
});

module.exports = router;