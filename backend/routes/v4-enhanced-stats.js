// Enhanced Statistics API –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 4
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å real-time —Å–µ—Ä–≤–∏—Å–æ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

const express = require('express');
const router = express.Router();
const { authenticateToken } = require('../middleware/auth');

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å graceful fallback
let realTimeStatsService = null;
let achievementSystem = null;

try {
    realTimeStatsService = require('../services/realTimeStatsService');
} catch (error) {
    console.warn('‚ö†Ô∏è realTimeStatsService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã');
}

try {
    achievementSystem = require('../services/achievementSystem');
} catch (error) {
    console.warn('‚ö†Ô∏è achievementSystem –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞');
}

const pool = require('../db');

// üÜï Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (alias –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
router.get('/enhanced-stats/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
        if (req.user.id != userId && req.user.role !== 'admin') {
            return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
        }

        let stats = null;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ real-time —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (realTimeStatsService) {
            try {
                stats = await realTimeStatsService.getCurrentStats(userId);
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ real-time —Å–µ—Ä–≤–∏—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
            }
        }
        
        // Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ real-time –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if (!stats) {
            stats = await getBasicStats(userId);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        let achievements = { achievements: [], totalPoints: 0, level: 1 };
        if (achievementSystem) {
            try {
                achievements = await achievementSystem.getUserAchievements(userId);
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error.message);
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        let ranking = { position: null, totalUsers: 0 };
        if (achievementSystem) {
            try {
                ranking = await achievementSystem.getUserRanking(userId);
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error.message);
            }
        }

        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 4
        const enhancedMetrics = await getEnhancedMetrics(userId);

        res.json({
            ...stats,
            achievements,
            ranking,
            enhancedMetrics,
            version: '4.0',
            realTime: realTimeStatsService !== null,
            fallbackMode: realTimeStatsService === null
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' });
    }
});

// üÜï Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (alias)
router.get('/user-achievements/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        const { category } = req.query;
        
        if (req.user.id != userId && req.user.role !== 'admin') {
            return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
        }

        // Fallback –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if (!achievementSystem) {
            return res.json({
                achievements: [],
                totalPoints: 0,
                level: 1,
                nextLevelPoints: 100,
                currentLevelPoints: 0,
                message: '–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            });
        }

        let achievementsData = await achievementSystem.getUserAchievements(userId);
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if (category) {
            achievementsData.achievements = achievementsData.achievements.filter(
                a => a.category === category
            );
        }

        res.json(achievementsData);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        
        // Fallback –æ—Ç–≤–µ—Ç
        res.json({
            achievements: [],
            totalPoints: 0,
            level: 1,
            nextLevelPoints: 100,
            currentLevelPoints: 0,
            error: '–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        });
    }
});

// üÜï Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
router.get('/achievements', async (req, res) => {
    try {
        // Fallback –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if (!achievementSystem) {
            return res.json({
                achievements: generateBasicAchievements(),
                categories: ['tournament', 'skill', 'social', 'special'],
                message: '–ü–æ–∫–∞–∑–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (—Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)'
            });
        }

        const achievements = await achievementSystem.getAllAchievements();
        
        res.json({
            achievements,
            categories: [...new Set(achievements.map(a => a.category))]
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        
        // Fallback –æ—Ç–≤–µ—Ç
        res.json({
            achievements: generateBasicAchievements(),
            categories: ['tournament', 'skill', 'social', 'special'],
            error: '–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        });
    }
});

// üÜï Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤
router.get('/leaderboards', async (req, res) => {
    try {
        const { limit = 10, category = 'overall' } = req.query;
        
        // Fallback –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if (!achievementSystem) {
            const basicLeaderboard = await generateBasicLeaderboard(parseInt(limit));
            return res.json({
                leaderboard: basicLeaderboard,
                category,
                generatedAt: new Date().toISOString(),
                totalUsers: basicLeaderboard.length,
                message: '–ü–æ–∫–∞–∑–∞–Ω –±–∞–∑–æ–≤—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (—Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)'
            });
        }
        
        const leaderboard = await achievementSystem.getLeaderboard(parseInt(limit), category);
        
        res.json({
            leaderboard,
            category,
            generatedAt: new Date().toISOString(),
            totalUsers: leaderboard.length
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
        
        // Fallback –æ—Ç–≤–µ—Ç
        const basicLeaderboard = await generateBasicLeaderboard(parseInt(req.query.limit || 10));
        res.json({
            leaderboard: basicLeaderboard,
            category: req.query.category || 'overall',
            generatedAt: new Date().toISOString(),
            totalUsers: basicLeaderboard.length,
            error: '–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å real-time –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
router.get('/stats/enhanced/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
        if (req.user.id != userId && req.user.role !== 'admin') {
            return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
        }

        let stats = null;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ real-time —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (realTimeStatsService) {
            try {
                stats = await realTimeStatsService.getCurrentStats(userId);
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ real-time —Å–µ—Ä–≤–∏—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
            }
        }
        
        // Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ real-time –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if (!stats) {
            stats = await getBasicStats(userId);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        let achievements = { achievements: [], totalPoints: 0, level: 1 };
        if (achievementSystem) {
            try {
                achievements = await achievementSystem.getUserAchievements(userId);
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error.message);
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        let ranking = { position: null, totalUsers: 0 };
        if (achievementSystem) {
            try {
                ranking = await achievementSystem.getUserRanking(userId);
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error.message);
            }
        }

        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 4
        const enhancedMetrics = await getEnhancedMetrics(userId);

        res.json({
            ...stats,
            achievements,
            ranking,
            enhancedMetrics,
            version: '4.0',
            realTime: realTimeStatsService !== null,
            fallbackMode: realTimeStatsService === null
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' });
    }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AI-–∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
router.get('/analysis/performance/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        
        if (req.user.id != userId && req.user.role !== 'admin') {
            return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
        }

        let analysis = null;
        
        if (realTimeStatsService) {
            try {
                analysis = await realTimeStatsService.generateTournamentAnalysis(userId);
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ real-time –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π:', error.message);
            }
        }
        
        // Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        if (!analysis) {
            analysis = await generateBasicAnalysis(userId);
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
        const deepAnalysis = await generateDeepPerformanceAnalysis(userId);
        
        res.json({
            ...analysis,
            deepAnalysis,
            generatedAt: new Date().toISOString(),
            analysisType: realTimeStatsService ? 'enhanced' : 'basic'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑' });
    }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
router.get('/achievements/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        const { category } = req.query;
        
        if (req.user.id != userId && req.user.role !== 'admin') {
            return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
        }

        let achievementsData = await achievementSystem.getUserAchievements(userId);
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if (category) {
            achievementsData.achievements = achievementsData.achievements.filter(
                a => a.category === category
            );
        }

        res.json(achievementsData);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è' });
    }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
router.get('/leaderboard/achievements', async (req, res) => {
    try {
        const { limit = 10 } = req.query;
        
        const leaderboard = await achievementSystem.getLeaderboard(parseInt(limit));
        
        res.json({
            leaderboard,
            generatedAt: new Date().toISOString(),
            totalUsers: leaderboard.length
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥' });
    }
});

// Endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
router.post('/achievements/check/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        
        if (req.user.id != userId && req.user.role !== 'admin') {
            return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
        }

        const newAchievements = await achievementSystem.triggerAchievementCheck(
            userId, 
            'manual_check',
            { triggeredBy: req.user.id }
        );

        res.json({
            newAchievements,
            message: newAchievements.length > 0 
                ? `–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${newAchievements.length} –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!`
                : '–ù–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ—Ç'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è' });
    }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∏–≥—Ä–∞–º
router.get('/analytics/games/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        
        if (req.user.id != userId && req.user.role !== 'admin') {
            return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
        }

        const gameAnalytics = await generateGameAnalytics(userId);
        
        res.json({
            ...gameAnalytics,
            userId,
            generatedAt: new Date().toISOString()
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º' });
    }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
router.get('/analytics/performance-history/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        const { period = '6m' } = req.query; // 1m, 3m, 6m, 1y
        
        if (req.user.id != userId && req.user.role !== 'admin') {
            return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
        }

        const performanceHistory = await generatePerformanceHistory(userId, period);
        
        res.json({
            ...performanceHistory,
            period,
            userId,
            generatedAt: new Date().toISOString()
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' });
    }
});

// Endpoint –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
router.post('/stats/recalculate/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        
        if (req.user.id != userId && req.user.role !== 'admin') {
            return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
        }

        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const recalcResult = await recalculateUserStats(userId);
        
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –µ—Å–ª–∏ real-time —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
        if (realTimeStatsService) {
            try {
                await realTimeStatsService.invalidateStatsCache(userId);
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                await realTimeStatsService.broadcastStatsUpdate(userId, 'stats_recalculated');
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        let newAchievements = [];
        if (achievementSystem) {
            try {
                newAchievements = await achievementSystem.triggerAchievementCheck(
                    userId, 
                    'stats_recalculated',
                    recalcResult
                );
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error.message);
            }
        }

        res.json({
            ...recalcResult,
            newAchievements,
            realTimeUpdate: realTimeStatsService !== null,
            achievementsChecked: achievementSystem !== null,
            message: realTimeStatsService 
                ? '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏'
                : '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ (real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' });
    }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π WebSocket
router.get('/system/connections', authenticateToken, async (req, res) => {
    try {
        if (req.user.role !== 'admin') {
            return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' });
        }

        let connectionStats = {
            totalConnections: 0,
            connectedUsers: [],
            realTimeEnabled: false
        };
        
        if (realTimeStatsService) {
            try {
                connectionStats = realTimeStatsService.getConnectionStats();
                connectionStats.realTimeEnabled = true;
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:', error.message);
            }
        }
        
        res.json({
            ...connectionStats,
            timestamp: new Date().toISOString(),
            serviceStatus: realTimeStatsService ? 'available' : 'unavailable'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π' });
    }
});

// Endpoint –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ (alias –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
router.post('/ai-analysis/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        
        if (req.user.id != userId && req.user.role !== 'admin') {
            return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
        }

        let analysis = null;
        
        if (realTimeStatsService) {
            try {
                analysis = await realTimeStatsService.generateTournamentAnalysis(userId);
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ real-time –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π:', error.message);
            }
        }
        
        // Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        if (!analysis) {
            analysis = await generateBasicAnalysis(userId);
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑
        const aiAnalysis = await generateAdvancedAIAnalysis(userId);
        
        res.json({
            success: true,
            data: {
                ...analysis,
                aiAnalysis,
                generatedAt: new Date().toISOString(),
                analysisType: realTimeStatsService ? 'enhanced_ai' : 'basic_ai',
                version: '4.0'
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –∞–Ω–∞–ª–∏–∑–∞:', error);
        res.status(500).json({ 
            success: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑',
            message: error.message 
        });
    }
});

// üöÄ Endpoint –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º (V4 ULTIMATE)
router.post('/recalculate-enhanced/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        
        if (req.user.id != userId && req.user.role !== 'admin') {
            return res.status(403).json({ 
                success: false,
                error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' 
            });
        }

        console.log(`üöÄ V4 ULTIMATE: –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        // –®–∞–≥ 1: –ë–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        let basicRecalcResult = null;
        try {
            basicRecalcResult = await recalculateUserStats(userId);
            console.log('‚úÖ V4: –ë–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        } catch (basicError) {
            console.error('‚ùå V4: –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', basicError);
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
                details: basicError.message
            });
        }

        // –®–∞–≥ 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let enhancedAnalysis = null;
        try {
            enhancedAnalysis = await generateAdvancedAIAnalysis(userId);
            console.log('‚úÖ V4: AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
        } catch (analysisError) {
            console.warn('‚ö†Ô∏è V4: –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:', analysisError.message);
            enhancedAnalysis = { error: 'AI –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' };
        }

        // –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏ real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (realTimeStatsService) {
            try {
                await realTimeStatsService.invalidateStatsCache(userId);
                await realTimeStatsService.broadcastStatsUpdate(userId, 'enhanced_recalculation');
                console.log('‚úÖ V4: Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
            } catch (rtError) {
                console.warn('‚ö†Ô∏è V4: –û—à–∏–±–∫–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', rtError.message);
            }
        }

        // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        let newAchievements = [];
        if (achievementSystem) {
            try {
                newAchievements = await achievementSystem.triggerAchievementCheck(
                    userId, 
                    'enhanced_recalculation',
                    { ...basicRecalcResult, enhancedAnalysis }
                );
                console.log(`‚úÖ V4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–∞–π–¥–µ–Ω–æ ${newAchievements.length})`);
            } catch (achievementError) {
                console.warn('‚ö†Ô∏è V4: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', achievementError.message);
            }
        }

        // –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        let personalizedRecommendations = [];
        try {
            const stats = await getBasicStats(userId);
            personalizedRecommendations = generateEnhancedRecommendations(stats, enhancedAnalysis);
            console.log('‚úÖ V4: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (recError) {
            console.warn('‚ö†Ô∏è V4: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', recError.message);
        }

        // –®–∞–≥ 6: –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–≤–∏—Ç–∏—è
        let developmentPath = null;
        try {
            developmentPath = await calculateDevelopmentPath(userId, enhancedAnalysis);
            console.log('‚úÖ V4: –ü—É—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω');
        } catch (devError) {
            console.warn('‚ö†Ô∏è V4: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è:', devError.message);
        }

        console.log(`üéâ V4 ULTIMATE: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        res.json({
            success: true,
            version: '4.0',
            basicRecalculation: basicRecalcResult,
            aiAnalysis: enhancedAnalysis,
            newAchievements,
            personalizedRecommendations,
            developmentPath,
            systemStatus: {
                realTimeEnabled: realTimeStatsService !== null,
                achievementsEnabled: achievementSystem !== null,
                aiAnalysisEnabled: enhancedAnalysis && !enhancedAnalysis.error
            },
            completedAt: new Date().toISOString(),
            message: 'üöÄ V4 ULTIMATE: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!'
        });

    } catch (error) {
        console.error('‚ùå V4 ULTIMATE: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:', error);
        res.status(500).json({ 
            success: false,
            error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞',
            message: error.message,
            fallback: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async function getBasicStats(userId) {
    try {
        // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ real-time —Å–µ—Ä–≤–∏—Å–∞
        const statsResult = await pool.query(`
            SELECT t.name, t.game, uts.result, uts.wins, uts.losses, uts.is_team, uts.updated_at
            FROM user_tournament_stats uts 
            JOIN tournaments t ON uts.tournament_id = t.id 
            WHERE uts.user_id = $1
            ORDER BY uts.updated_at DESC
        `, [userId]);

        const tournaments = statsResult.rows;
        const soloStats = tournaments.filter(s => !s.is_team);
        const teamStats = tournaments.filter(s => s.is_team);

        const soloWins = soloStats.reduce((sum, s) => sum + (s.wins || 0), 0);
        const soloLosses = soloStats.reduce((sum, s) => sum + (s.losses || 0), 0);
        const teamWins = teamStats.reduce((sum, s) => sum + (s.wins || 0), 0);
        const teamLosses = teamStats.reduce((sum, s) => sum + (s.losses || 0), 0);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
        const gameStats = {};
        tournaments.forEach(stat => {
            if (!gameStats[stat.game]) {
                gameStats[stat.game] = {
                    solo: { wins: 0, losses: 0 },
                    team: { wins: 0, losses: 0 }
                };
            }
            if (stat.is_team) {
                gameStats[stat.game].team.wins += (stat.wins || 0);
                gameStats[stat.game].team.losses += (stat.losses || 0);
            } else {
                gameStats[stat.game].solo.wins += (stat.wins || 0);
                gameStats[stat.game].solo.losses += (stat.losses || 0);
            }
        });

        return {
            tournaments,
            solo: { 
                wins: soloWins, 
                losses: soloLosses, 
                winRate: soloWins + soloLosses > 0 ? ((soloWins / (soloWins + soloLosses)) * 100).toFixed(2) : 0 
            },
            team: { 
                wins: teamWins, 
                losses: teamLosses, 
                winRate: teamWins + teamLosses > 0 ? ((teamWins / (teamWins + teamLosses)) * 100).toFixed(2) : 0 
            },
            byGame: gameStats,
            lastUpdated: new Date().toISOString(),
            source: 'basic_fallback'
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return {
            tournaments: [],
            solo: { wins: 0, losses: 0, winRate: 0 },
            team: { wins: 0, losses: 0, winRate: 0 },
            byGame: {},
            lastUpdated: new Date().toISOString(),
            source: 'basic_fallback',
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'
        };
    }
}

async function getEnhancedMetrics(userId) {
    try {
        const result = await pool.query(`
            SELECT 
                COUNT(DISTINCT t.id) as unique_tournaments,
                COUNT(DISTINCT t.game) as games_played,
                AVG(CASE WHEN uts.result LIKE '%–ü–æ–±–µ–¥–∏—Ç–µ–ª—å%' THEN 1.0 ELSE 0.0 END) as championship_rate,
                AVG(uts.wins::float / NULLIF(uts.wins + uts.losses, 0)) as avg_match_winrate,
                COUNT(CASE WHEN uts.result LIKE '%–º–µ—Å—Ç–æ%' THEN 1 END) as podium_finishes,
                EXTRACT(epoch FROM NOW() - MIN(uts.created_at)) / 86400 as career_days
            FROM user_tournament_stats uts
            JOIN tournaments t ON uts.tournament_id = t.id
            WHERE uts.user_id = $1
        `, [userId]);

        return result.rows[0] || {};
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:', error);
        return {};
    }
}

async function generateDeepPerformanceAnalysis(userId) {
    try {
        // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        const timeAnalysis = await pool.query(`
            SELECT 
                EXTRACT(hour FROM t.start_date) as hour,
                COUNT(*) as tournaments,
                AVG(CASE WHEN uts.result LIKE '%–ü–æ–±–µ–¥–∏—Ç–µ–ª—å%' THEN 1.0 ELSE 0.0 END) as win_rate
            FROM user_tournament_stats uts
            JOIN tournaments t ON uts.tournament_id = t.id
            WHERE uts.user_id = $1
            GROUP BY EXTRACT(hour FROM t.start_date)
            ORDER BY win_rate DESC
            LIMIT 3
        `, [userId]);

        // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        const dayAnalysis = await pool.query(`
            SELECT 
                EXTRACT(dow FROM t.start_date) as day_of_week,
                COUNT(*) as tournaments,
                AVG(CASE WHEN uts.result LIKE '%–ü–æ–±–µ–¥–∏—Ç–µ–ª—å%' THEN 1.0 ELSE 0.0 END) as win_rate
            FROM user_tournament_stats uts
            JOIN tournaments t ON uts.tournament_id = t.id
            WHERE uts.user_id = $1
            GROUP BY EXTRACT(dow FROM t.start_date)
            ORDER BY win_rate DESC
        `, [userId]);

        // –ê–Ω–∞–ª–∏–∑ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤
        const opponentAnalysis = await pool.query(`
            SELECT 
                COUNT(DISTINCT m.id) as total_matches,
                AVG(CASE WHEN m.winner_team_id = tp.id OR m.winner_team_id = tt.id THEN 1.0 ELSE 0.0 END) as win_rate
            FROM matches m
            LEFT JOIN tournament_participants tp ON (m.team1_id = tp.id OR m.team2_id = tp.id) AND tp.user_id = $1
            LEFT JOIN tournament_teams tt ON (m.team1_id = tt.id OR m.team2_id = tt.id)
            LEFT JOIN tournament_team_members ttm ON tt.id = ttm.team_id AND ttm.user_id = $1
            WHERE (tp.user_id = $1 OR ttm.user_id = $1) AND m.winner_team_id IS NOT NULL
        `, [userId]);

        return {
            bestTimeHours: timeAnalysis.rows,
            bestDaysOfWeek: dayAnalysis.rows,
            matchStatistics: opponentAnalysis.rows[0] || {},
            analysisType: 'deep_performance'
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
        return { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑' };
    }
}

async function generateGameAnalytics(userId) {
    try {
        const result = await pool.query(`
            SELECT 
                t.game,
                COUNT(*) as tournaments_played,
                COUNT(CASE WHEN uts.result LIKE '%–ü–æ–±–µ–¥–∏—Ç–µ–ª—å%' THEN 1 END) as championships,
                AVG(uts.wins::float / NULLIF(uts.wins + uts.losses, 0)) as avg_winrate,
                MAX(uts.wins) as best_tournament_wins,
                AVG(CASE WHEN uts.result LIKE '%–º–µ—Å—Ç–æ%' THEN 1.0 ELSE 0.0 END) as podium_rate
            FROM user_tournament_stats uts
            JOIN tournaments t ON uts.tournament_id = t.id
            WHERE uts.user_id = $1
            GROUP BY t.game
            ORDER BY championships DESC, avg_winrate DESC
        `, [userId]);

        const games = result.rows.map(row => ({
            game: row.game,
            tournaments: parseInt(row.tournaments_played),
            championships: parseInt(row.championships),
            averageWinRate: parseFloat(row.avg_winrate || 0).toFixed(3),
            bestTournamentWins: parseInt(row.best_tournament_wins || 0),
            podiumRate: parseFloat(row.podium_rate || 0).toFixed(3),
            performanceRating: calculateGamePerformanceRating(row)
        }));

        return {
            games,
            bestGame: games[0]?.game || null,
            totalGames: games.length
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∏–≥—Ä–∞–º:', error);
        return { games: [], bestGame: null, totalGames: 0 };
    }
}

function calculateGamePerformanceRating(gameData) {
    const {
        tournaments_played,
        championships,
        avg_winrate,
        podium_rate
    } = gameData;

    let rating = 0;
    
    // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ —É—á–∞—Å—Ç–∏–µ
    rating += Math.min(tournaments_played * 2, 20);
    
    // –û—á–∫–∏ –∑–∞ —á–µ–º–ø–∏–æ–Ω—Å—Ç–≤–∞
    rating += championships * 15;
    
    // –û—á–∫–∏ –∑–∞ –≤–∏–Ω—Ä–µ–π—Ç
    rating += (avg_winrate || 0) * 30;
    
    // –û—á–∫–∏ –∑–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ç–æ–ø-3
    rating += (podium_rate || 0) * 20;

    return Math.min(Math.round(rating), 100);
}

async function generatePerformanceHistory(userId, period) {
    let dateFilter = '';
    
    switch (period) {
        case '1m':
            dateFilter = "AND uts.created_at >= NOW() - INTERVAL '1 month'";
            break;
        case '3m':
            dateFilter = "AND uts.created_at >= NOW() - INTERVAL '3 months'";
            break;
        case '6m':
            dateFilter = "AND uts.created_at >= NOW() - INTERVAL '6 months'";
            break;
        case '1y':
            dateFilter = "AND uts.created_at >= NOW() - INTERVAL '1 year'";
            break;
        default:
            dateFilter = "AND uts.created_at >= NOW() - INTERVAL '6 months'";
    }

    try {
        const result = await pool.query(`
            SELECT 
                DATE_TRUNC('week', uts.created_at) as week,
                COUNT(*) as tournaments,
                COUNT(CASE WHEN uts.result LIKE '%–ü–æ–±–µ–¥–∏—Ç–µ–ª—å%' THEN 1 END) as wins,
                AVG(uts.wins::float / NULLIF(uts.wins + uts.losses, 0)) as avg_winrate
            FROM user_tournament_stats uts
            WHERE uts.user_id = $1 ${dateFilter}
            GROUP BY DATE_TRUNC('week', uts.created_at)
            ORDER BY week ASC
        `, [userId]);

        const history = result.rows.map(row => ({
            week: row.week,
            tournaments: parseInt(row.tournaments),
            wins: parseInt(row.wins),
            winRate: parseFloat(row.avg_winrate || 0).toFixed(3),
            performance: calculateWeeklyPerformance(row)
        }));

        return {
            history,
            totalWeeks: history.length,
            trend: calculateTrend(history)
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        return { history: [], totalWeeks: 0, trend: 'stable' };
    }
}

function calculateWeeklyPerformance(weekData) {
    const { tournaments, wins, avg_winrate } = weekData;
    
    let score = 0;
    score += Math.min(tournaments * 10, 50); // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    score += wins * 20; // –ü–æ–±–µ–¥—ã
    score += (avg_winrate || 0) * 30; // –í–∏–Ω—Ä–µ–π—Ç
    
    return Math.min(Math.round(score), 100);
}

function calculateTrend(history) {
    if (history.length < 2) return 'stable';
    
    const recent = history.slice(-3);
    const older = history.slice(-6, -3);
    
    if (recent.length === 0 || older.length === 0) return 'stable';
    
    const recentAvg = recent.reduce((sum, w) => sum + w.performance, 0) / recent.length;
    const olderAvg = older.reduce((sum, w) => sum + w.performance, 0) / older.length;
    
    const difference = recentAvg - olderAvg;
    
    if (difference > 10) return 'improving';
    if (difference < -10) return 'declining';
    return 'stable';
}

async function recalculateUserStats(userId) {
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–µ—Ä–µ—Å—á–µ—Ç–∞
    try {
        // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API endpoint –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const token = localStorage.getItem('token') || process.env.INTERNAL_API_TOKEN || 'internal';
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ users —Ä–æ—É—Ç–µ—Ä–∞
        const response = await pool.query(`
            -- –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç—É—Ä–Ω–∏—Ä–æ–≤
            WITH user_tournament_data AS (
                SELECT 
                    tp.user_id,
                    t.id as tournament_id,
                    t.name as tournament_name,
                    t.game,
                    tp.result,
                    CASE 
                        WHEN tp.result LIKE '%–ü–æ–±–µ–¥–∏—Ç–µ–ª—å%' THEN 1
                        ELSE 0
                    END as is_winner,
                    CASE 
                        WHEN tp.result LIKE '%–º–µ—Å—Ç–æ%' OR tp.result LIKE '%–ü–æ–±–µ–¥–∏—Ç–µ–ª—å%' THEN 1
                        ELSE 0
                    END as is_top_finish
                FROM tournament_participants tp
                JOIN tournaments t ON tp.tournament_id = t.id
                WHERE tp.user_id = $1
            ),
            match_stats AS (
                SELECT 
                    tp.user_id,
                    COUNT(m.id) as total_matches,
                    COUNT(CASE WHEN m.winner_team_id = tp.id THEN 1 END) as wins,
                    COUNT(CASE WHEN m.winner_team_id != tp.id AND m.winner_team_id IS NOT NULL THEN 1 END) as losses
                FROM tournament_participants tp
                LEFT JOIN matches m ON (m.team1_id = tp.id OR m.team2_id = tp.id)
                WHERE tp.user_id = $1
                GROUP BY tp.user_id
            )
            SELECT 
                COUNT(DISTINCT utd.tournament_id) as tournaments_played,
                SUM(utd.is_winner) as tournaments_won,
                SUM(utd.is_top_finish) as top_finishes,
                COALESCE(ms.total_matches, 0) as total_matches,
                COALESCE(ms.wins, 0) as match_wins,
                COALESCE(ms.losses, 0) as match_losses
            FROM user_tournament_data utd
            LEFT JOIN match_stats ms ON utd.user_id = ms.user_id
            GROUP BY utd.user_id, ms.total_matches, ms.wins, ms.losses
        `, [userId]);

        const stats = response.rows[0] || {
            tournaments_played: 0,
            tournaments_won: 0,
            top_finishes: 0,
            total_matches: 0,
            match_wins: 0,
            match_losses: 0
        };

        return {
            success: true,
            userId: parseInt(userId),
            stats: {
                tournamentsPlayed: parseInt(stats.tournaments_played),
                tournamentsWon: parseInt(stats.tournaments_won),
                topFinishes: parseInt(stats.top_finishes),
                totalMatches: parseInt(stats.total_matches),
                matchWins: parseInt(stats.match_wins),
                matchLosses: parseInt(stats.match_losses),
                winRate: stats.total_matches > 0 
                    ? ((stats.match_wins / stats.total_matches) * 100).toFixed(2) 
                    : 0
            },
            message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞',
            recalculatedAt: new Date().toISOString()
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ API:', error);
        
        // Fallback –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        return { 
            success: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
            fallback: true,
            message: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
        };
    }
}

async function generateBasicAnalysis(userId) {
    try {
        const stats = await getBasicStats(userId);
        
        if (!stats || !stats.tournaments.length) {
            return { message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' };
        }

        // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI
        const totalWins = stats.solo.wins + stats.team.wins;
        const totalLosses = stats.solo.losses + stats.team.losses;
        const overallWinRate = totalWins + totalLosses > 0 ? (totalWins / (totalWins + totalLosses)) * 100 : 0;
        
        const winningTournaments = stats.tournaments.filter(t => t.result?.includes('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å')).length;
        const topThreeFinishes = stats.tournaments.filter(t => 
            t.result?.includes('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å') || 
            t.result?.includes('2 –º–µ—Å—Ç–æ') || 
            t.result?.includes('3 –º–µ—Å—Ç–æ')
        ).length;

        return {
            performanceRating: Math.min(Math.round(overallWinRate + winningTournaments * 10 + topThreeFinishes * 5), 100),
            strengths: generateBasicStrengths(stats, overallWinRate),
            improvements: generateBasicImprovements(stats, overallWinRate),
            gameRecommendations: generateBasicGameRecommendations(stats),
            prediction: generateBasicPrediction(stats),
            analysisType: 'basic'
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
        return { error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑' };
    }
}

function generateBasicStrengths(stats, winRate) {
    const strengths = [];
    
    if (winRate > 60) strengths.push('–í—ã—Å–æ–∫–∏–π –æ–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç');
    if (parseFloat(stats.solo.winRate) > 60) strengths.push('–°–∏–ª—å–Ω–∞—è —Å–æ–ª–æ –∏–≥—Ä–∞');
    if (parseFloat(stats.team.winRate) > 60) strengths.push('–•–æ—Ä–æ—à–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞');
    if (stats.tournaments.filter(t => t.result?.includes('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å')).length > 0) {
        strengths.push('–û–ø—ã—Ç –ø–æ–±–µ–¥ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö');
    }
    
    return strengths.length > 0 ? strengths : ['–°—Ç–∞–±–∏–ª—å–Ω–∞—è –∏–≥—Ä–∞'];
}

function generateBasicImprovements(stats, winRate) {
    const improvements = [];
    
    if (winRate < 40) improvements.push('–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ–±—â–µ–π –∏–≥—Ä–æ–π');
    if (parseFloat(stats.solo.winRate) < 40) improvements.push('–£–ª—É—á—à–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤');
    if (parseFloat(stats.team.winRate) < 40) improvements.push('–†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π –∏–≥—Ä—ã');
    if (stats.tournaments.length < 5) improvements.push('–ë–æ–ª—å—à–µ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö');
    
    return improvements.length > 0 ? improvements : ['–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'];
}

function generateBasicGameRecommendations(stats) {
    const gamePerformance = [];
    
    Object.entries(stats.byGame).forEach(([game, gameStats]) => {
        const totalWins = gameStats.solo.wins + gameStats.team.wins;
        const totalLosses = gameStats.solo.losses + gameStats.team.losses;
        const winRate = totalWins + totalLosses > 0 ? (totalWins / (totalWins + totalLosses)) * 100 : 0;
        
        gamePerformance.push({ game, winRate, total: totalWins + totalLosses });
    });
    
    gamePerformance.sort((a, b) => b.winRate - a.winRate);
    
    return gamePerformance.slice(0, 2).map(gp => ({
        game: gp.game,
        reason: `–í–∏–Ω—Ä–µ–π—Ç ${gp.winRate.toFixed(1)}%`
    }));
}

function generateBasicPrediction(stats) {
    const recentTournaments = stats.tournaments.slice(0, 3);
    const recentWins = recentTournaments.filter(t => 
        t.result?.includes('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å') || t.result?.includes('–º–µ—Å—Ç–æ')
    ).length;
    
    if (recentWins >= 2) {
        return { prediction: '–•–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö', confidence: 70 };
    } else if (recentWins >= 1) {
        return { prediction: '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', confidence: 55 };
    } else {
        return { prediction: '–§–æ–∫—É—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–∏', confidence: 45 };
    }
}

async function generateAdvancedAIAnalysis(userId) {
    try {
        const stats = await getBasicStats(userId);
        
        if (!stats || !stats.tournaments.length) {
            return {
                message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞',
                confidence: 0,
                recommendations: ['–ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞']
            };
        }

        // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –∞–Ω–∞–ª–∏–∑ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º (—Å–∏–º—É–ª—è—Ü–∏—è)
        const aiInsights = {
            skillProgression: analyzeSkillProgression(stats),
            playStyle: analyzePlayStyle(stats),
            mentalGame: analyzeMentalGame(stats),
            adaptability: analyzeAdaptability(stats),
            clutchPerformance: analyzeClutchPerformance(stats),
            teamworkRating: analyzeTeamwork(stats),
            strategicThinking: analyzeStrategicThinking(stats),
            consistencyIndex: analyzeConsistency(stats),
            potentialCeiling: analyzePotential(stats),
            improvementAreas: generateAIRecommendations(stats)
        };

        // –û–±—â–∏–π AI —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞
        const overallAIRating = calculateOverallAIRating(aiInsights);

        // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI
        const personalizedAdvice = generatePersonalizedAdvice(stats, aiInsights);

        // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã
        const futurePredictions = generateFuturePredictions(stats, aiInsights);

        return {
            overallRating: overallAIRating,
            confidence: calculateAnalysisConfidence(stats),
            insights: aiInsights,
            personalizedAdvice,
            futurePredictions,
            analysisMetadata: {
                dataPoints: stats.tournaments.length,
                algorithmVersion: '4.2.1',
                lastUpdated: new Date().toISOString()
            }
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞:', error);
        return {
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –∞–Ω–∞–ª–∏–∑',
            fallbackMessage: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑'
        };
    }
}

function analyzeSkillProgression(stats) {
    const tournaments = stats.tournaments.slice(0, 10); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—É—Ä–Ω–∏—Ä–æ–≤
    if (tournaments.length < 3) return { trend: 'insufficient_data', score: 50 };

    const early = tournaments.slice(-3);
    const recent = tournaments.slice(0, 3);
    
    const earlyWinRate = calculateWinRateFromTournaments(early);
    const recentWinRate = calculateWinRateFromTournaments(recent);
    
    const progression = recentWinRate - earlyWinRate;
    
    return {
        trend: progression > 10 ? 'improving' : progression < -10 ? 'declining' : 'stable',
        score: Math.min(Math.max(50 + progression, 0), 100),
        progressionRate: progression.toFixed(1)
    };
}

function analyzePlayStyle(stats) {
    const soloWinRate = parseFloat(stats.solo.winRate);
    const teamWinRate = parseFloat(stats.team.winRate);
    
    let style = 'balanced';
    if (soloWinRate > teamWinRate + 15) style = 'independent';
    else if (teamWinRate > soloWinRate + 15) style = 'collaborative';
    
    return {
        style,
        soloEfficiency: soloWinRate,
        teamEfficiency: teamWinRate,
        versatility: 100 - Math.abs(soloWinRate - teamWinRate)
    };
}

function analyzeMentalGame(stats) {
    // –ê–Ω–∞–ª–∏–∑ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const tournaments = stats.tournaments;
    const winStreaks = findStreaks(tournaments, 'win');
    const lossStreaks = findStreaks(tournaments, 'loss');
    
    const mentalStrength = Math.max(0, 100 - (lossStreaks.maxLength * 10) + (winStreaks.maxLength * 5));
    
    return {
        mentalStrength: Math.min(mentalStrength, 100),
        longestWinStreak: winStreaks.maxLength,
        longestLossStreak: lossStreaks.maxLength,
        resilience: lossStreaks.maxLength < 3 ? 'high' : lossStreaks.maxLength < 5 ? 'medium' : 'needs_work'
    };
}

function analyzeAdaptability(stats) {
    const gameTypes = Object.keys(stats.byGame);
    const adaptabilityScore = Math.min(gameTypes.length * 25, 100);
    
    return {
        score: adaptabilityScore,
        gamesPlayed: gameTypes.length,
        adaptabilityLevel: adaptabilityScore > 75 ? 'excellent' : adaptabilityScore > 50 ? 'good' : 'developing'
    };
}

function analyzeClutchPerformance(stats) {
    // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞—Ç—á-–ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å–∞
    const winningTournaments = stats.tournaments.filter(t => t.result?.includes('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å')).length;
    const totalTournaments = stats.tournaments.length;
    
    const clutchRating = totalTournaments > 0 ? (winningTournaments / totalTournaments) * 100 : 0;
    
    return {
        clutchRating: clutchRating.toFixed(1),
        championshipRate: ((winningTournaments / Math.max(totalTournaments, 1)) * 100).toFixed(1),
        performance: clutchRating > 20 ? 'elite' : clutchRating > 10 ? 'good' : 'developing'
    };
}

function analyzeTeamwork(stats) {
    const teamStats = stats.team;
    const teamWinRate = parseFloat(teamStats.winRate);
    
    return {
        rating: teamWinRate,
        level: teamWinRate > 70 ? 'excellent' : teamWinRate > 50 ? 'good' : 'needs_improvement',
        teamMatches: teamStats.wins + teamStats.losses
    };
}

function analyzeStrategicThinking(stats) {
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏–≥—Ä
    const gamePerformance = Object.values(stats.byGame);
    const avgPerformance = gamePerformance.reduce((sum, game) => {
        const totalWins = game.solo.wins + game.team.wins;
        const totalGames = totalWins + game.solo.losses + game.team.losses;
        return sum + (totalGames > 0 ? (totalWins / totalGames) * 100 : 0);
    }, 0) / Math.max(gamePerformance.length, 1);
    
    return {
        strategicRating: avgPerformance.toFixed(1),
        gameVersatility: gamePerformance.length,
        thinking: avgPerformance > 60 ? 'advanced' : avgPerformance > 40 ? 'developing' : 'basic'
    };
}

function analyzeConsistency(stats) {
    const recentTournaments = stats.tournaments.slice(0, 5);
    if (recentTournaments.length < 3) return { score: 50, level: 'insufficient_data' };
    
    const winRates = recentTournaments.map(t => {
        const total = t.wins + t.losses;
        return total > 0 ? (t.wins / total) * 100 : 0;
    });
    
    const avgWinRate = winRates.reduce((a, b) => a + b, 0) / winRates.length;
    const variance = winRates.reduce((sum, rate) => sum + Math.pow(rate - avgWinRate, 2), 0) / winRates.length;
    const consistency = Math.max(0, 100 - Math.sqrt(variance));
    
    return {
        score: consistency.toFixed(1),
        level: consistency > 80 ? 'very_consistent' : consistency > 60 ? 'consistent' : 'inconsistent',
        variance: variance.toFixed(1)
    };
}

function analyzePotential(stats) {
    const currentPerformance = (parseFloat(stats.solo.winRate) + parseFloat(stats.team.winRate)) / 2;
    const gamesPlayed = Object.keys(stats.byGame).length;
    const experience = stats.tournaments.length;
    
    // –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –æ–ø—ã—Ç–∞
    const potentialScore = Math.min(currentPerformance + (gamesPlayed * 5) + (experience * 2), 100);
    
    return {
        currentLevel: currentPerformance.toFixed(1),
        potentialCeiling: potentialScore.toFixed(1),
        growthPotential: (potentialScore - currentPerformance).toFixed(1),
        assessment: potentialScore > 80 ? 'pro_level' : potentialScore > 65 ? 'advanced' : 'developing'
    };
}

function generateAIRecommendations(stats) {
    const recommendations = [];
    
    if (parseFloat(stats.solo.winRate) < 50) {
        recommendations.push({
            area: 'individual_skills',
            priority: 'high',
            suggestion: '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å–æ–ª–æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö'
        });
    }
    
    if (parseFloat(stats.team.winRate) < 50) {
        recommendations.push({
            area: 'teamwork',
            priority: 'high',
            suggestion: '–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ'
        });
    }
    
    if (Object.keys(stats.byGame).length < 2) {
        recommendations.push({
            area: 'versatility',
            priority: 'medium',
            suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –ø–æ —Ä–∞–∑–Ω—ã–º –∏–≥—Ä–∞–º –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏'
        });
    }
    
    if (stats.tournaments.length < 10) {
        recommendations.push({
            area: 'experience',
            priority: 'medium',
            suggestion: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –æ–ø—ã—Ç–∞'
        });
    }
    
    return recommendations;
}

function calculateOverallAIRating(insights) {
    const weights = {
        skillProgression: 0.2,
        playStyle: 0.15,
        mentalGame: 0.2,
        adaptability: 0.1,
        clutchPerformance: 0.15,
        teamworkRating: 0.1,
        consistencyIndex: 0.1
    };
    
    let totalScore = 0;
    totalScore += insights.skillProgression.score * weights.skillProgression;
    totalScore += Math.max(insights.playStyle.soloEfficiency, insights.playStyle.teamEfficiency) * weights.playStyle;
    totalScore += insights.mentalGame.mentalStrength * weights.mentalGame;
    totalScore += insights.adaptability.score * weights.adaptability;
    totalScore += parseFloat(insights.clutchPerformance.clutchRating) * weights.clutchPerformance;
    totalScore += insights.teamworkRating.rating * weights.teamworkRating;
    totalScore += parseFloat(insights.consistencyIndex.score) * weights.consistencyIndex;
    
    return Math.round(totalScore);
}

function calculateAnalysisConfidence(stats) {
    const dataPoints = stats.tournaments.length;
    if (dataPoints < 3) return 30;
    if (dataPoints < 5) return 50;
    if (dataPoints < 10) return 70;
    if (dataPoints < 20) return 85;
    return 95;
}

function generatePersonalizedAdvice(stats, insights) {
    const advice = [];
    
    if (insights.skillProgression.trend === 'declining') {
        advice.push('üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã');
    }
    
    if (insights.playStyle.style === 'independent') {
        advice.push('ü§ù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤');
    }
    
    if (insights.mentalGame.resilience === 'needs_work') {
        advice.push('üß† –†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é - –¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –ø–æ—Å–ª–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–π');
    }
    
    if (insights.consistencyIndex.score < 60) {
        advice.push('‚öñÔ∏è –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã, –∞ –Ω–µ –Ω–∞ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö');
    }
    
    return advice;
}

function generateFuturePredictions(stats, insights) {
    return {
        nextTournamentWinChance: calculateWinProbability(insights),
        expectedPerformance: generatePerformanceExpectation(insights),
        skillDevelopmentPath: generateSkillPath(insights),
        timeToImprovement: estimateImprovementTime(insights)
    };
}

function calculateWinProbability(insights) {
    const baseChance = insights.skillProgression.score * 0.3 + 
                     insights.clutchPerformance.clutchRating * 0.4 + 
                     insights.consistencyIndex.score * 0.3;
    
    return Math.round(Math.min(baseChance, 85)); // –ú–∞–∫—Å–∏–º—É–º 85% —á—Ç–æ–±—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º
}

function generatePerformanceExpectation(insights) {
    if (insights.skillProgression.trend === 'improving') return 'above_average';
    if (insights.skillProgression.trend === 'declining') return 'below_average';
    return 'average';
}

function generateSkillPath(insights) {
    const priorities = [];
    
    if (insights.teamworkRating.rating < 50) priorities.push('teamwork');
    if (insights.adaptability.score < 50) priorities.push('game_versatility');
    if (insights.mentalGame.mentalStrength < 60) priorities.push('mental_strength');
    if (insights.consistencyIndex.score < 70) priorities.push('consistency');
    
    return priorities.slice(0, 3); // –¢–æ–ø 3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
}

function estimateImprovementTime(insights) {
    const currentLevel = calculateOverallAIRating(insights);
    
    if (currentLevel < 40) return '2-3 –º–µ—Å—è—Ü–∞';
    if (currentLevel < 60) return '1-2 –º–µ—Å—è—Ü–∞';
    if (currentLevel < 80) return '3-4 –Ω–µ–¥–µ–ª–∏';
    return '1-2 –Ω–µ–¥–µ–ª–∏';
}

function findStreaks(tournaments, type) {
    let maxLength = 0;
    let currentLength = 0;
    
    tournaments.forEach(tournament => {
        const isWin = tournament.result?.includes('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å') || tournament.result?.includes('–º–µ—Å—Ç–æ');
        const matches = (type === 'win' && isWin) || (type === 'loss' && !isWin);
        
        if (matches) {
            currentLength++;
            maxLength = Math.max(maxLength, currentLength);
        } else {
            currentLength = 0;
        }
    });
    
    return { maxLength, currentLength };
}

function calculateWinRateFromTournaments(tournaments) {
    const totalWins = tournaments.reduce((sum, t) => sum + (t.wins || 0), 0);
    const totalLosses = tournaments.reduce((sum, t) => sum + (t.losses || 0), 0);
    return totalWins + totalLosses > 0 ? (totalWins / (totalWins + totalLosses)) * 100 : 0;
}

function generateEnhancedRecommendations(stats, aiAnalysis) {
    const recommendations = [];
    
    if (!stats || !aiAnalysis || aiAnalysis.error) {
        return [{
            category: 'general',
            priority: 'medium',
            title: '–ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
            description: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
            actionPlan: ['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —Ç—É—Ä–Ω–∏—Ä', '–ò–∑—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã', '–ù–∞–π–¥–∏—Ç–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤']
        }];
    }

    const insights = aiAnalysis.insights || {};
    const overallRating = aiAnalysis.overallRating || 50;

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –Ω–∞–≤—ã–∫–æ–≤
    if (insights.skillProgression && insights.skillProgression.trend === 'declining') {
        recommendations.push({
            category: 'skill_development',
            priority: 'high',
            title: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã',
            description: '–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º.',
            actionPlan: [
                '–í–æ–∑—å–º–∏—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ 2-3 –¥–Ω—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞',
                '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä',
                '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –±–∞–∑–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–∞—Ö',
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'
            ]
        });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é –∏–≥—Ä—ã
    if (insights.playStyle && insights.playStyle.style === 'independent') {
        recommendations.push({
            category: 'teamwork',
            priority: 'medium',
            title: '–†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
            description: '–í—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ–ª–æ, –Ω–æ –∫–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è.',
            actionPlan: [
                '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤',
                '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞–º–∏',
                '–ò–∑—É—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
                '–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –¥–µ–π—Å—Ç–≤–∏–π'
            ]
        });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    if (insights.mentalGame && insights.mentalGame.resilience === 'needs_work') {
        recommendations.push({
            category: 'mental_strength',
            priority: 'high',
            title: '–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
            description: '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —Å–µ—Ä–∏–π –ø–æ—Ä–∞–∂–µ–Ω–∏–π.',
            actionPlan: [
                '–î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è',
                '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –∞ –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ',
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏',
                '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞'
            ]
        });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (insights.adaptability && insights.adaptability.score < 50) {
        recommendations.push({
            category: 'versatility',
            priority: 'medium',
            title: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–ø–µ—Ä—Ç—É–∞—Ä–∞',
            description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ –∏–≥—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏.',
            actionPlan: [
                '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –ø–æ –Ω–æ–≤–æ–π –∏–≥—Ä–µ',
                '–ò–∑—É—á–∏—Ç–µ –º–µ—Ç–∞ —Ä–∞–∑–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω',
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (1v1, –∫–æ–º–∞–Ω–¥–Ω—ã–µ)',
                '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–æ–ø-–∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö'
            ]
        });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    if (insights.consistencyIndex && parseFloat(insights.consistencyIndex.score) < 60) {
        recommendations.push({
            category: 'consistency',
            priority: 'high',
            title: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏',
            description: '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.',
            actionPlan: [
                '–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–∞–∑–º–∏–Ω–∫—É –ø–µ—Ä–µ–¥ –∏–≥—Ä–∞–º–∏',
                '–ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π',
                '–ò–∑–±–µ–≥–∞–π—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –≤ –≤–∞–∂–Ω—ã—Ö –º–∞—Ç—á–∞—Ö',
                '–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –∏–≥—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤'
            ]
        });
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
    if (overallRating < 40) {
        recommendations.push({
            category: 'foundation',
            priority: 'high',
            title: '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—Å–Ω–æ–≤–∞–º–∏',
            description: '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–∞—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ—á–Ω–æ–π –±–∞–∑—ã.',
            actionPlan: [
                '–£–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—é –æ—Å–Ω–æ–≤ –∏–≥—Ä—ã',
                '–ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ–±—ã—á–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏',
                '–ù–∞–π–¥–∏—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∏–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞',
                '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –º–µ–Ω–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö –¥–ª—è –Ω–∞–±–æ—Ä–∞ –æ–ø—ã—Ç–∞'
            ]
        });
    } else if (overallRating > 80) {
        recommendations.push({
            category: 'mastery',
            priority: 'medium',
            title: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
            description: '–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö.',
            actionPlan: [
                '–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∫—Ä—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã',
                '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã',
                '–ò–∑—É—á–∞–π—Ç–µ –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –º–µ—Ç—É',
                '–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —É–∑–∫–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏'
            ]
        });
    }

    return recommendations.slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
}

async function calculateDevelopmentPath(userId, aiAnalysis) {
    try {
        const stats = await getBasicStats(userId);
        
        if (!stats || !aiAnalysis || aiAnalysis.error) {
            return {
                currentStage: 'beginner',
                nextMilestone: '–£—á–∞—Å—Ç–∏–µ –≤ 5 —Ç—É—Ä–Ω–∏—Ä–∞—Ö',
                estimatedTime: '2-4 –Ω–µ–¥–µ–ª–∏',
                focusAreas: ['experience', 'basic_skills'],
                progressPercentage: 25
            };
        }

        const insights = aiAnalysis.insights || {};
        const overallRating = aiAnalysis.overallRating || 50;
        const totalTournaments = stats.tournaments?.length || 0;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–¥–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è
        let currentStage = 'beginner';
        let progressPercentage = 0;
        
        if (overallRating >= 80) {
            currentStage = 'expert';
            progressPercentage = 90;
        } else if (overallRating >= 65) {
            currentStage = 'advanced';
            progressPercentage = 75;
        } else if (overallRating >= 45) {
            currentStage = 'intermediate';
            progressPercentage = 50;
        } else {
            currentStage = 'beginner';
            progressPercentage = 25;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞
        const focusAreas = [];
        if (insights.skillProgression && insights.skillProgression.score < 60) {
            focusAreas.push('skill_development');
        }
        if (insights.mentalGame && insights.mentalGame.mentalStrength < 70) {
            focusAreas.push('mental_strength');
        }
        if (insights.teamworkRating && insights.teamworkRating.rating < 50) {
            focusAreas.push('teamwork');
        }
        if (insights.consistencyIndex && parseFloat(insights.consistencyIndex.score) < 70) {
            focusAreas.push('consistency');
        }
        if (insights.adaptability && insights.adaptability.score < 75) {
            focusAreas.push('versatility');
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ö—É
        let nextMilestone = '';
        let estimatedTime = '';

        switch (currentStage) {
            case 'beginner':
                nextMilestone = totalTournaments < 10 ? 
                    `–£—á–∞—Å—Ç–∏–µ –≤ ${10 - totalTournaments} —Ç—É—Ä–Ω–∏—Ä–∞—Ö` : 
                    '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 50% –≤–∏–Ω—Ä–µ–π—Ç–∞';
                estimatedTime = '4-6 –Ω–µ–¥–µ–ª—å';
                break;
            case 'intermediate':
                nextMilestone = '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ';
                estimatedTime = '2-4 –Ω–µ–¥–µ–ª–∏';
                break;
            case 'advanced':
                nextMilestone = '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–ø-3 —Ñ–∏–Ω–∏—à–∏';
                estimatedTime = '3-5 –Ω–µ–¥–µ–ª—å';
                break;
            case 'expert':
                nextMilestone = '–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ';
                estimatedTime = '1-2 –º–µ—Å—è—Ü–∞';
                break;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º roadmap
        const roadmap = generateDevelopmentRoadmap(currentStage, focusAreas, insights);

        return {
            currentStage,
            nextMilestone,
            estimatedTime,
            focusAreas: focusAreas.slice(0, 3), // –¢–æ–ø 3 –æ–±–ª–∞—Å—Ç–∏
            progressPercentage,
            roadmap,
            lastUpdated: new Date().toISOString()
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è:', error);
        return {
            currentStage: 'unknown',
            nextMilestone: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            estimatedTime: '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
            focusAreas: ['general'],
            progressPercentage: 50,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—É—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è'
        };
    }
}

function generateDevelopmentRoadmap(currentStage, focusAreas, insights) {
    const roadmap = {
        immediate: [], // –ë–ª–∏–∂–∞–π—à–∏–µ 1-2 –Ω–µ–¥–µ–ª–∏
        shortTerm: [], // 1-2 –º–µ—Å—è—Ü–∞
        longTerm: []   // 3-6 –º–µ—Å—è—Ü–µ–≤
    };

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if (focusAreas.includes('mental_strength')) {
        roadmap.immediate.push({
            goal: '–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
            actions: ['–í–Ω–µ–¥—Ä–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏', '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ'],
            metric: '–°–Ω–∏–∂–µ–Ω–∏–µ —Å–µ—Ä–∏–π –ø–æ—Ä–∞–∂–µ–Ω–∏–π'
        });
    }

    if (focusAreas.includes('consistency')) {
        roadmap.immediate.push({
            goal: '–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
            actions: ['–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–∞–∑–º–∏–Ω–∫—É', '–ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π'],
            metric: '–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–±—Ä–æ—Å–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö'
        });
    }

    // –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏
    if (focusAreas.includes('skill_development')) {
        roadmap.shortTerm.push({
            goal: '–£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤',
            actions: ['–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ 1-2 —á–∞—Å–∞', '–ò–∑—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤'],
            metric: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–∏–Ω—Ä–µ–π—Ç–∞ –Ω–∞ 10%'
        });
    }

    if (focusAreas.includes('teamwork')) {
        roadmap.shortTerm.push({
            goal: '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏–Ω–µ—Ä–≥–∏—è',
            actions: ['–ù–∞–π—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É', '–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é'],
            metric: '–£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö'
        });
    }

    // –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏
    if (currentStage === 'advanced' || currentStage === 'expert') {
        roadmap.longTerm.push({
            goal: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å',
            actions: ['–£—á–∞—Å—Ç–∏–µ –≤ –∫—Ä—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö', '–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞'],
            metric: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç–æ–ø-3 —Ñ–∏–Ω–∏—à–∏'
        });
    } else {
        roadmap.longTerm.push({
            goal: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã',
            actions: ['–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ', '–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –Ω–æ–≤–∏—á–∫–æ–≤'],
            metric: '–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å'
        });
    }

    if (focusAreas.includes('versatility')) {
        roadmap.longTerm.push({
            goal: '–ú–Ω–æ–≥–æ–ø—Ä–æ—Ñ–∏–ª—å–Ω–æ—Å—Ç—å',
            actions: ['–û—Å–≤–æ–µ–Ω–∏–µ 3+ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω', '–£—á–∞—Å—Ç–∏–µ –≤ mix-—Ç—É—Ä–Ω–∏—Ä–∞—Ö'],
            metric: '–¢–æ–ø-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–∞—Ö'
        });
    }

    return roadmap;
}

function generateBasicAchievements() {
    return [
        {
            id: 'first_tournament',
            name: '–ü–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä',
            description: '–ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –ø–µ—Ä–≤–æ–º —Ç—É—Ä–Ω–∏—Ä–µ',
            category: 'tournament',
            icon: 'üèÜ',
            points: 10,
            requirement: 'participate_in_tournament',
            tier: 'bronze'
        },
        {
            id: 'first_win',
            name: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞',
            description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á',
            category: 'skill',
            icon: 'ü•á',
            points: 25,
            requirement: 'win_match',
            tier: 'bronze'
        },
        {
            id: 'tournament_winner',
            name: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞',
            description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ —Ç—É—Ä–Ω–∏—Ä',
            category: 'tournament',
            icon: 'üëë',
            points: 100,
            requirement: 'win_tournament',
            tier: 'gold'
        },
        {
            id: 'consistent_player',
            name: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏–≥—Ä–æ–∫',
            description: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ 5 —Ç—É—Ä–Ω–∏—Ä–∞—Ö',
            category: 'tournament',
            icon: '‚≠ê',
            points: 50,
            requirement: 'participate_in_5_tournaments',
            tier: 'silver'
        },
        {
            id: 'team_player',
            name: '–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫',
            description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä',
            category: 'social',
            icon: 'ü§ù',
            points: 75,
            requirement: 'win_team_tournament',
            tier: 'silver'
        },
        {
            id: 'versatile_gamer',
            name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫',
            description: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –ø–æ 3 —Ä–∞–∑–Ω—ã–º –∏–≥—Ä–∞–º',
            category: 'skill',
            icon: 'üéÆ',
            points: 150,
            requirement: 'play_3_games',
            tier: 'gold'
        },
        {
            id: 'rising_star',
            name: '–í–æ—Å—Ö–æ–¥—è—â–∞—è –∑–≤–µ–∑–¥–∞',
            description: '–ü–æ–ø–∞–¥–∏—Ç–µ –≤ —Ç–æ–ø-3 –≤ —Ç—É—Ä–Ω–∏—Ä–µ',
            category: 'skill',
            icon: 'üåü',
            points: 60,
            requirement: 'top_3_finish',
            tier: 'silver'
        },
        {
            id: 'tournament_veteran',
            name: '–í–µ—Ç–µ—Ä–∞–Ω —Ç—É—Ä–Ω–∏—Ä–æ–≤',
            description: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ 10 —Ç—É—Ä–Ω–∏—Ä–∞—Ö',
            category: 'tournament',
            icon: 'üéñÔ∏è',
            points: 200,
            requirement: 'participate_in_10_tournaments',
            tier: 'gold'
        }
    ];
}

async function generateBasicLeaderboard(limit = 10) {
    try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const result = await pool.query(`
            SELECT 
                u.id,
                u.username,
                u.avatar_url,
                COUNT(DISTINCT tp.tournament_id) as tournaments_played,
                COUNT(CASE WHEN tp.result LIKE '%–ü–æ–±–µ–¥–∏—Ç–µ–ª—å%' THEN 1 END) as tournaments_won,
                COUNT(CASE WHEN tp.result LIKE '%–º–µ—Å—Ç–æ%' OR tp.result LIKE '%–ü–æ–±–µ–¥–∏—Ç–µ–ª—å%' THEN 1 END) as top_finishes,
                (COUNT(CASE WHEN tp.result LIKE '%–ü–æ–±–µ–¥–∏—Ç–µ–ª—å%' THEN 1 END) * 100 + 
                 COUNT(CASE WHEN tp.result LIKE '%–º–µ—Å—Ç–æ%' THEN 1 END) * 50 + 
                 COUNT(DISTINCT tp.tournament_id) * 10) as total_points
            FROM users u
            LEFT JOIN tournament_participants tp ON u.id = tp.user_id
            WHERE u.id IS NOT NULL
            GROUP BY u.id, u.username, u.avatar_url
            HAVING COUNT(DISTINCT tp.tournament_id) > 0
            ORDER BY total_points DESC, tournaments_won DESC, tournaments_played DESC
            LIMIT $1
        `, [limit]);

        return result.rows.map((row, index) => ({
            position: index + 1,
            userId: row.id,
            username: row.username,
            avatar: row.avatar_url,
            stats: {
                tournamentsPlayed: parseInt(row.tournaments_played),
                tournamentsWon: parseInt(row.tournaments_won),
                topFinishes: parseInt(row.top_finishes),
                totalPoints: parseInt(row.total_points)
            },
            achievements: Math.floor(parseInt(row.total_points) / 50), // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            level: Math.max(1, Math.floor(parseInt(row.total_points) / 100))
        }));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
        
        // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        return Array.from({ length: Math.min(limit, 5) }, (_, index) => ({
            position: index + 1,
            userId: index + 1,
            username: `–ò–≥—Ä–æ–∫ ${index + 1}`,
            avatar: '/default-avatar.png',
            stats: {
                tournamentsPlayed: Math.floor(Math.random() * 20) + 5,
                tournamentsWon: Math.floor(Math.random() * 5),
                topFinishes: Math.floor(Math.random() * 10),
                totalPoints: Math.floor(Math.random() * 500) + 100
            },
            achievements: Math.floor(Math.random() * 8) + 1,
            level: Math.floor(Math.random() * 10) + 1
        }));
    }
}

module.exports = router; 