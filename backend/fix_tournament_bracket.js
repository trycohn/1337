#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Single Elimination
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node fix_tournament_bracket.js [tournament_id] [action]
 * 
 * Actions:
 * - validate: —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
 * - fix: –≤–∞–ª–∏–¥–∞—Ü–∏—è + –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 * node fix_tournament_bracket.js 59 validate
 * node fix_tournament_bracket.js 59 fix
 */

const { 
    validateSingleEliminationBracket, 
    fixSingleEliminationBracket 
} = require('./bracketGenerators/singleElimination');

const pool = require('./db');

async function main() {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log(`
üìã –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Single Elimination

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node fix_tournament_bracket.js <tournament_id> [action]

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  tournament_id  - ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  action         - validate (–≤–∞–ª–∏–¥–∞—Ü–∏—è) –∏–ª–∏ fix (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)

–ü—Ä–∏–º–µ—Ä—ã:
  node fix_tournament_bracket.js 59 validate    # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
  node fix_tournament_bracket.js 59 fix         # –ü—Ä–æ–≤–µ—Ä–∫–∞ + –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        `);
        process.exit(0);
    }
    
    const tournamentId = parseInt(args[0]);
    const action = args[1] || 'validate';
    
    if (isNaN(tournamentId)) {
        console.error('‚ùå –û—à–∏–±–∫–∞: tournament_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
        process.exit(1);
    }
    
    if (!['validate', 'fix'].includes(action)) {
        console.error('‚ùå –û—à–∏–±–∫–∞: action –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "validate" –∏–ª–∏ "fix"');
        process.exit(1);
    }
    
    console.log(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ID: ${tournamentId}`);
    console.log(`üìã –î–µ–π—Å—Ç–≤–∏–µ: ${action === 'validate' ? '–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è' : '–í–∞–ª–∏–¥–∞—Ü–∏—è + –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'}`);
    console.log('=' .repeat(60));
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournamentResult = await pool.query(
            'SELECT id, name, format FROM tournaments WHERE id = $1',
            [tournamentId]
        );
        
        if (tournamentResult.rows.length === 0) {
            console.error(`‚ùå –¢—É—Ä–Ω–∏—Ä —Å ID ${tournamentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            process.exit(1);
        }
        
        const tournament = tournamentResult.rows[0];
        console.log(`üèÜ –¢—É—Ä–Ω–∏—Ä: "${tournament.name}"`);
        console.log(`üìä –§–æ—Ä–º–∞—Ç: ${tournament.format}`);
        
        if (tournament.format !== 'single-elimination') {
            console.warn(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ç—É—Ä–Ω–∏—Ä –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "${tournament.format}", –∞ –Ω–µ "single-elimination"`);
            console.log('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...\n');
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        console.log('\nüîç –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
        const validation = await validateSingleEliminationBracket(tournamentId);
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:');
        console.log(`–°—Ç–∞—Ç—É—Å: ${validation.valid ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : '‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã'}`);
        console.log(`–ú–∞—Ç—á–µ–π: ${validation.matchesCount}`);
        console.log(`–†–∞—É–Ω–¥–æ–≤: ${validation.roundsCount}`);
        console.log(`–ü—Ä–æ–±–ª–µ–º: ${validation.issues ? validation.issues.length : 0}`);
        
        if (!validation.valid && validation.issues) {
            console.log('\nüö® –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
            validation.issues.forEach((issue, index) => {
                console.log(`  ${index + 1}. [${issue.type}] ${issue.message}`);
            });
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if (action === 'fix') {
            if (validation.valid) {
                console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - —Å–µ—Ç–∫–∞ —É–∂–µ –≤–∞–ª–∏–¥–Ω–∞');
            } else {
                console.log('\nüîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
                const fixResult = await fixSingleEliminationBracket(tournamentId);
                
                if (fixResult.success) {
                    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
                    console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${fixResult.fixesApplied}`);
                    
                    if (fixResult.fixes && fixResult.fixes.length > 0) {
                        console.log('\n‚úÖ –ü–†–ò–ú–ï–ù–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
                        fixResult.fixes.forEach((fix, index) => {
                            console.log(`  ${index + 1}. [${fix.type}] ${fix.message}`);
                        });
                    }
                    
                    if (fixResult.stillHasIssues) {
                        console.log('\n‚ö†Ô∏è  –û–°–¢–ê–õ–ò–°–¨ –ü–†–û–ë–õ–ï–ú–´:');
                        fixResult.remainingIssues.forEach((issue, index) => {
                            console.log(`  ${index + 1}. [${issue.type}] ${issue.message}`);
                        });
                        console.log('\n–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º.');
                    } else {
                        console.log('\nüéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
                    }
                } else {
                    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${fixResult.error}`);
                }
            }
        }
        
        console.log('\n' + '=' .repeat(60));
        console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
    } catch (error) {
        console.error(`\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
        console.error(error.stack);
        process.exit(1);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
}); 