#!/usr/bin/env node

/**
 * üîç –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
 * 
 * –ü—Ä–æ–±–ª–µ–º–∞: POST /api/tournaments/matches/1606/result –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 (Not Found)
 * –ü—Ä–∏—á–∏–Ω–∞: –ú–∞—Ç—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID
 * 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
 * 3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É API endpoints
 * 4. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
 */

const { Pool } = require('pg');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ª–æ–∫–∞–ª—å–Ω—ã–µ)
const pool = new Pool({
    user: 'postgres',
    host: 'localhost',
    database: '1337community',
    password: '01012006Fortnite!',
    port: 5432,
});

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ú–ê–¢–ß–ï–ô');
console.log('='.repeat(60));

async function diagnoseMatchResultProblem() {
    try {
        // ID –º–∞—Ç—á–∞ –∏–∑ –æ—à–∏–±–∫–∏
        const problemMatchId = 1606;
        
        console.log(`\n1. üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ ${problemMatchId}...`);
        
        const matchCheck = await pool.query('SELECT * FROM matches WHERE id = $1', [problemMatchId]);
        
        if (matchCheck.rows.length === 0) {
            console.log(`‚ùå –ú–ê–¢–ß ${problemMatchId} –ù–ï –ù–ê–ô–î–ï–ù –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!`);
            console.log(`   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É 404.`);
        } else {
            console.log(`‚úÖ –ú–∞—Ç—á ${problemMatchId} –Ω–∞–π–¥–µ–Ω:`);
            console.log(`   - Tournament ID: ${matchCheck.rows[0].tournament_id}`);
            console.log(`   - Team 1 ID: ${matchCheck.rows[0].team1_id}`);
            console.log(`   - Team 2 ID: ${matchCheck.rows[0].team2_id}`);
            console.log(`   - Winner: ${matchCheck.rows[0].winner_team_id || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
            console.log(`   - Score: ${matchCheck.rows[0].score1 || 0}:${matchCheck.rows[0].score2 || 0}`);
        }
        
        console.log(`\n2. üîç –ò—â–µ–º –º–∞—Ç—á–∏ —Ä—è–¥–æ–º —Å ID ${problemMatchId}...`);
        
        const nearbyMatches = await pool.query(
            'SELECT id, tournament_id, team1_id, team2_id, winner_team_id, score1, score2, created_at ' +
            'FROM matches WHERE id BETWEEN $1 AND $2 ORDER BY id',
            [problemMatchId - 10, problemMatchId + 10]
        );
        
        if (nearbyMatches.rows.length > 0) {
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${nearbyMatches.rows.length} –º–∞—Ç—á–µ–π —Ä—è–¥–æ–º —Å ${problemMatchId}:`);
            nearbyMatches.rows.forEach(match => {
                console.log(`   ID ${match.id}: Tournament ${match.tournament_id}, Teams ${match.team1_id} vs ${match.team2_id}, Winner: ${match.winner_team_id || 'TBD'}`);
            });
        } else {
            console.log(`‚ùå –ù–µ—Ç –º–∞—Ç—á–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ID ${problemMatchId - 10} - ${problemMatchId + 10}`);
        }
        
        console.log(`\n3. üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏...`);
        
        const recentMatches = await pool.query(
            'SELECT id, tournament_id, team1_id, team2_id, winner_team_id, score1, score2, created_at ' +
            'FROM matches ORDER BY created_at DESC LIMIT 20'
        );
        
        if (recentMatches.rows.length > 0) {
            console.log(`üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π:`);
            recentMatches.rows.forEach(match => {
                const date = new Date(match.created_at).toLocaleString('ru-RU');
                console.log(`   ID ${match.id}: Tournament ${match.tournament_id}, —Å–æ–∑–¥–∞–Ω ${date}`);
            });
        }
        
        console.log(`\n4. üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã...`);
        
        const activeTournaments = await pool.query(
            `SELECT t.id, t.name, t.status, COUNT(m.id) as matches_count 
             FROM tournaments t 
             LEFT JOIN matches m ON t.id = m.tournament_id 
             WHERE t.status = 'active' 
             GROUP BY t.id, t.name, t.status 
             ORDER BY t.id DESC LIMIT 10`
        );
        
        if (activeTournaments.rows.length > 0) {
            console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã —Å –º–∞—Ç—á–∞–º–∏:`);
            activeTournaments.rows.forEach(tournament => {
                console.log(`   Tournament ${tournament.id}: "${tournament.name}", –º–∞—Ç—á–µ–π: ${tournament.matches_count}`);
            });
        }
        
        console.log(`\n5. üîç –ò—â–µ–º —Ç—É—Ä–Ω–∏—Ä, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–≥ –±—ã –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –º–∞—Ç—á ${problemMatchId}...`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ç—É—Ä–Ω–∏—Ä—ã —Å –º–∞—Ç—á–∞–º–∏ –±–ª–∏–∑–∫–æ –∫ —ç—Ç–æ–º—É ID
        const possibleTournaments = await pool.query(
            `SELECT DISTINCT m.tournament_id, t.name, COUNT(m.id) as matches_count,
                    MIN(m.id) as min_match_id, MAX(m.id) as max_match_id
             FROM matches m
             JOIN tournaments t ON m.tournament_id = t.id
             WHERE m.id BETWEEN $1 AND $2
             GROUP BY m.tournament_id, t.name
             ORDER BY m.tournament_id DESC`,
            [problemMatchId - 100, problemMatchId + 100]
        );
        
        if (possibleTournaments.rows.length > 0) {
            console.log(`üìä –¢—É—Ä–Ω–∏—Ä—ã —Å –º–∞—Ç—á–∞–º–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${problemMatchId - 100} - ${problemMatchId + 100}:`);
            possibleTournaments.rows.forEach(tournament => {
                console.log(`   Tournament ${tournament.tournament_id}: "${tournament.name}"`);
                console.log(`     –ú–∞—Ç—á–µ–π: ${tournament.matches_count}, ID –¥–∏–∞–ø–∞–∑–æ–Ω: ${tournament.min_match_id} - ${tournament.max_match_id}`);
            });
        }
        
        console.log(`\n6. üí° –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:`);
        
        if (matchCheck.rows.length === 0) {
            console.log(`‚ùå –ú–∞—Ç—á ${problemMatchId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
            console.log(`   ‚Ä¢ –ú–∞—Ç—á –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
            console.log(`   ‚Ä¢ ID –º–∞—Ç—á–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π`);
            console.log(`   ‚Ä¢ Frontend –ø–µ—Ä–µ–¥–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π ID –º–∞—Ç—á–∞`);
            console.log(`   ‚Ä¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö`);
            
            console.log(`\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:`);
            console.log(`   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ frontend - –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ ID –º–∞—Ç—á–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è`);
            console.log(`   2. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ frontend`);
            console.log(`   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–µ–π –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏`);
            console.log(`   4. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ API endpoint`);
        } else {
            console.log(`‚úÖ –ú–∞—Ç—á ${problemMatchId} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º`);
            console.log(`üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:`);
            console.log(`   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ backend –Ω–∞ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏`);
            console.log(`   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
            console.log(`   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞`);
        }
        
        console.log(`\n7. üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã matches
        const tableStructure = await pool.query(`
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'matches' 
            ORDER BY ordinal_position
        `);
        
        console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã matches:`);
        tableStructure.rows.forEach(col => {
            console.log(`   ${col.column_name}: ${col.data_type} (${col.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    } finally {
        await pool.end();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoint –Ω–∞–ø—Ä—è–º—É—é
async function testMatchResultEndpoint() {
    console.log(`\n8. üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINT:`);
    console.log(`   Endpoint: POST /api/tournaments/matches/:matchId/result`);
    console.log(`   –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å: /api/tournaments/`);
    console.log(`   –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è –º–∞—Ç—á–∞ 1606: /api/tournaments/matches/1606/result`);
    
    const testUrl = 'https://1337community.com/api/tournaments/matches/1606/result';
    console.log(`   –ü–æ–ª–Ω—ã–π URL: ${testUrl}`);
    
    console.log(`\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:`);
    console.log(`   curl -X POST "${testUrl}" \\`);
    console.log(`        -H "Authorization: Bearer YOUR_TOKEN" \\`);
    console.log(`        -H "Content-Type: application/json" \\`);
    console.log(`        -d '{"winner_team_id": 123, "score1": 1, "score2": 0}'`);
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
(async () => {
    await diagnoseMatchResultProblem();
    await testMatchResultEndpoint();
    
    console.log(`\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê`);
    console.log(`üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã`);
})(); 