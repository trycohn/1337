// backend/fix_regenerate_participants.js
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏

const pool = require('./db');

/**
 * üîß –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {string} participantType - –¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ('solo' –∏–ª–∏ 'team')
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ [{ id: number, name: string }]
 */
async function getSafeParticipants(tournamentId, participantType) {
    console.log(`üîç [getSafeParticipants] –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}, —Ç–∏–ø: ${participantType}`);
    
    let participants = [];
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if (participantType === 'solo') {
            const result = await pool.query(
                'SELECT id, name FROM tournament_participants WHERE tournament_id = $1',
                [tournamentId]
            );
            participants = result.rows;
        } else {
            const result = await pool.query(
                'SELECT id, name FROM tournament_teams WHERE tournament_id = $1',
                [tournamentId]
            );
            participants = result.rows;
        }
        
        console.log(`üìä [getSafeParticipants] –ü–æ–ª—É—á–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ë–î`);
        
        // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–£–ß–ï–ù–ù–´–• –î–ê–ù–ù–´–•
        console.log(`üîç [getSafeParticipants] –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–£–ß–ï–ù–ù–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í:`);
        
        if (participants.length > 0) {
            console.log(`   - –ü–µ—Ä–≤—ã–µ 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ë–î:`);
            participants.slice(0, 3).forEach((participant, index) => {
                console.log(`     ${index + 1}. ID: ${participant.id} (—Ç–∏–ø: ${typeof participant.id}), Name: "${participant.name}"`);
                console.log(`        –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç: ${JSON.stringify(participant)}`);
            });
        }
        
        // üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–†–ò–í–ï–î–ï–ù–ò–ï ID –ö –ß–ò–°–õ–ê–ú
        console.log(`üîß [getSafeParticipants] –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ ID –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É...`);
        
        const validatedParticipants = participants.map((participant, index) => {
            const originalId = participant.id;
            let numericId;
            
            // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –∫ —á–∏—Å–ª—É
            if (typeof originalId === 'string') {
                // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å
                if (originalId.startsWith('{"') || originalId.startsWith('{')) {
                    // –≠—Ç–æ JSON —Å—Ç—Ä–æ–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID
                    try {
                        const parsed = JSON.parse(originalId);
                        numericId = Number(parsed.id);
                        console.log(`   üîß –£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1}: –ò–∑–≤–ª–µ—á–µ–Ω ID ${numericId} –∏–∑ JSON –æ–±—ä–µ–∫—Ç–∞`);
                    } catch (parseError) {
                        console.log(`   ‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON: ${originalId}`);
                        throw new Error(`–£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: ${originalId}`);
                    }
                } else {
                    // –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º
                    numericId = Number(originalId);
                    console.log(`   üîß –£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1}: –ü—Ä–∏–≤–µ–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ "${originalId}" –∫ —á–∏—Å–ª—É ${numericId}`);
                }
            } else if (typeof originalId === 'number') {
                // –£–∂–µ —á–∏—Å–ª–æ
                numericId = originalId;
                console.log(`   ‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1}: ID —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º ${numericId}`);
            } else {
                // –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–∏–ø
                console.log(`   ‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1}: –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–∏–ø ID: ${typeof originalId}, –∑–Ω–∞—á–µ–Ω–∏–µ: ${originalId}`);
                throw new Error(`–£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1} –∏–º–µ–µ—Ç –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–∏–ø ID: ${typeof originalId}`);
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–∏–≤—à–µ–≥–æ—Å—è —á–∏—Å–ª–∞
            if (isNaN(numericId) || numericId <= 0) {
                console.log(`   ‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1}: –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ ${numericId} –∏–∑ ${originalId}`);
                throw new Error(`–£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1}: ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º: ${numericId}`);
            }
            
            return {
                id: numericId,
                name: participant.name || `–£—á–∞—Å—Ç–Ω–∏–∫ ${numericId}`
            };
        });
        
        console.log(`‚úÖ [getSafeParticipants] –í—Å–µ ${validatedParticipants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã`);
        console.log(`   - –ò—Ç–æ–≥–æ–≤—ã–µ ID: [${validatedParticipants.map(p => p.id).join(', ')}]`);
        
        return validatedParticipants;
        
    } catch (error) {
        console.error(`‚ùå [getSafeParticipants] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`, error);
        throw error;
    }
}

/**
 * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testParticipantValidation(tournamentId) {
    console.log(`üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò –£–ß–ê–°–¢–ù–ò–ö–û–í –î–õ–Ø –¢–£–†–ù–ò–†–ê ${tournamentId}`);
    console.log('='.repeat(60));
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [tournamentId]);
        if (tournamentResult.rows.length === 0) {
            throw new Error(`–¢—É—Ä–Ω–∏—Ä ${tournamentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
        const tournament = tournamentResult.rows[0];
        console.log(`üìã –¢—É—Ä–Ω–∏—Ä: "${tournament.name}", —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${tournament.participant_type}`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        const participants = await getSafeParticipants(tournamentId, tournament.participant_type);
        
        console.log(`‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã`);
        console.log(`   - –í—Å–µ ID —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏: ${participants.every(p => typeof p.id === 'number')}`);
        console.log(`   - –í—Å–µ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ: ${participants.every(p => p.id > 0)}`);
        console.log(`   - –í—Å–µ –∏–º–µ—é—Ç –∏–º–µ–Ω–∞: ${participants.every(p => p.name && p.name.trim().length > 0)}`);
        
        return participants;
        
    } catch (error) {
        console.error(`‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù:`, error.message);
        throw error;
    }
}

module.exports = {
    getSafeParticipants,
    testParticipantValidation
}; 