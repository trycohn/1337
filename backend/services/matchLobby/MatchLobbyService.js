// üéÆ MatchLobbyService - –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–±–±–∏ –º–∞—Ç—á–µ–π –¥–ª—è CS2
const pool = require('../../db');
const { sendNotification } = require('../../notifications');

class MatchLobbyService {
    // üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
    static async createLobbySettings(tournamentId, settings) {
        const { enabled = false, matchFormat = null } = settings;
        
        const result = await pool.query(
            `INSERT INTO tournament_lobby_settings (tournament_id, enabled, match_format)
             VALUES ($1, $2, $3)
             ON CONFLICT (tournament_id)
             DO UPDATE SET enabled = $2, match_format = $3, updated_at = CURRENT_TIMESTAMP
             RETURNING *`,
            [tournamentId, enabled, matchFormat]
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        await pool.query(
            'UPDATE tournaments SET lobby_enabled = $1 WHERE id = $2',
            [enabled, tournamentId]
        );
        
        return result.rows[0];
    }
    
    // üó∫Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞
    static async setTournamentMaps(tournamentId, maps) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ä—Ç—ã
            await client.query(
                'DELETE FROM tournament_maps WHERE tournament_id = $1',
                [tournamentId]
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã
            const mapPromises = maps.map((mapName, index) => 
                client.query(
                    `INSERT INTO tournament_maps (tournament_id, map_name, display_order)
                     VALUES ($1, $2, $3) RETURNING *`,
                    [tournamentId, mapName, index]
                )
            );
            
            const results = await Promise.all(mapPromises);
            await client.query('COMMIT');
            
            return results.map(r => r.rows[0]);
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    // üèÅ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –¥–ª—è –º–∞—Ç—á–∞
    static async createMatchLobby(matchId, tournamentId) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏ —Ç—É—Ä–Ω–∏—Ä–∞
            const settingsResult = await client.query(
                'SELECT * FROM tournament_lobby_settings WHERE tournament_id = $1',
                [tournamentId]
            );
            
            if (!settingsResult.rows[0]?.enabled) {
                throw new Error('–õ–æ–±–±–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞');
            }
            
            const settings = settingsResult.rows[0];
            
            // –°–æ–∑–¥–∞–µ–º –ª–æ–±–±–∏
            const lobbyResult = await client.query(
                `INSERT INTO match_lobbies (match_id, tournament_id, match_format, status)
                 VALUES ($1, $2, $3, 'waiting')
                 RETURNING *`,
                [matchId, tournamentId, settings.match_format]
            );
            
            const lobby = lobbyResult.rows[0];
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
            const matchResult = await client.query(
                `SELECT m.*, 
                        t1.name as team1_name, t2.name as team2_name,
                        t1.id as team1_id, t2.id as team2_id
                 FROM tournament_matches m
                 LEFT JOIN tournament_teams t1 ON m.team1_id = t1.id
                 LEFT JOIN tournament_teams t2 ON m.team2_id = t2.id
                 WHERE m.id = $1`,
                [matchId]
            );
            
            if (!matchResult.rows[0]) {
                throw new Error('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const match = matchResult.rows[0];
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ —Å–æ–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const invitations = [];
            
            // –î–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ - –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
            if (match.team1_id && match.team2_id) {
                // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥
                const captainsResult = await client.query(
                    `SELECT tm.user_id, tm.team_id, u.username
                     FROM tournament_team_members tm
                     JOIN users u ON tm.user_id = u.id
                     WHERE tm.team_id IN ($1, $2) AND tm.is_captain = true`,
                    [match.team1_id, match.team2_id]
                );
                
                for (const captain of captainsResult.rows) {
                    const invResult = await client.query(
                        `INSERT INTO lobby_invitations (lobby_id, user_id, team_id)
                         VALUES ($1, $2, $3) RETURNING *`,
                        [lobby.id, captain.user_id, captain.team_id]
                    );
                    invitations.push(invResult.rows[0]);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await sendNotification(captain.user_id, {
                        id: Date.now(),
                        user_id: captain.user_id,
                        type: 'match_lobby_invite',
                        message: `–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –ª–æ–±–±–∏ –º–∞—Ç—á–∞ —Ç—É—Ä–Ω–∏—Ä–∞. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—Ö–æ–¥–∞.`,
                        metadata: JSON.stringify({ lobbyId: lobby.id, matchId, tournamentId }),
                        created_at: new Date()
                    });
                }
            }
            
            await client.query('COMMIT');
            
            return {
                lobby,
                match,
                invitations
            };
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    // üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏
    static async getLobbyInfo(lobbyId, userId) {
        const result = await pool.query(
            `SELECT l.*, 
                    m.team1_id, m.team2_id,
                    t1.name as team1_name, t2.name as team2_name,
                    t.name as tournament_name, t.game,
                    CASE 
                        WHEN EXISTS (
                            SELECT 1 FROM lobby_invitations 
                            WHERE lobby_id = l.id AND user_id = $2
                        ) THEN true 
                        ELSE false 
                    END as user_invited,
                    (
                        SELECT json_agg(
                            json_build_object(
                                'map_name', ms.map_name,
                                'action_type', ms.action_type,
                                'team_id', ms.team_id,
                                'action_order', ms.action_order
                            ) ORDER BY ms.action_order
                        )
                        FROM map_selections ms
                        WHERE ms.lobby_id = l.id
                    ) as selections,
                    (
                        SELECT json_agg(
                            json_build_object(
                                'map_name', tm.map_name,
                                'display_order', tm.display_order
                            ) ORDER BY tm.display_order
                        )
                        FROM tournament_maps tm
                        WHERE tm.tournament_id = l.tournament_id
                    ) as available_maps
             FROM match_lobbies l
             JOIN tournament_matches m ON l.match_id = m.id
             JOIN tournaments t ON l.tournament_id = t.id
             LEFT JOIN tournament_teams t1 ON m.team1_id = t1.id
             LEFT JOIN tournament_teams t2 ON m.team2_id = t2.id
             WHERE l.id = $1`,
            [lobbyId, userId]
        );
        
        if (!result.rows[0]) {
            throw new Error('–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        
        return result.rows[0];
    }
    
    // ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    static async setReadyStatus(lobbyId, userId, ready) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            const inviteResult = await client.query(
                `SELECT i.*, tm.team_id
                 FROM lobby_invitations i
                 LEFT JOIN tournament_team_members tm ON i.user_id = tm.user_id
                 WHERE i.lobby_id = $1 AND i.user_id = $2`,
                [lobbyId, userId]
            );
            
            if (!inviteResult.rows[0]) {
                throw new Error('–í—ã –Ω–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ —ç—Ç–æ –ª–æ–±–±–∏');
            }
            
            const teamId = inviteResult.rows[0].team_id;
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
            const matchResult = await client.query(
                `SELECT m.team1_id, m.team2_id
                 FROM match_lobbies l
                 JOIN tournament_matches m ON l.match_id = m.id
                 WHERE l.id = $1`,
                [lobbyId]
            );
            
            const match = matchResult.rows[0];
            const isTeam1 = match.team1_id === teamId;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            const updateField = isTeam1 ? 'team1_ready' : 'team2_ready';
            const result = await client.query(
                `UPDATE match_lobbies 
                 SET ${updateField} = $1
                 WHERE id = $2
                 RETURNING *`,
                [ready, lobbyId]
            );
            
            const lobby = result.rows[0];
            
            // –ï—Å–ª–∏ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Ç–æ–≤—ã, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
            if (lobby.team1_ready && lobby.team2_ready && lobby.status === 'waiting') {
                await client.query(
                    `UPDATE match_lobbies 
                     SET status = 'ready'
                     WHERE id = $1`,
                    [lobbyId]
                );
            }
            
            await client.query('COMMIT');
            
            return lobby;
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    // üé≤ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ
    static async setFirstPicker(lobbyId, teamId, adminUserId) {
        const result = await pool.query(
            `UPDATE match_lobbies 
             SET first_picker_team_id = $1, 
                 current_turn_team_id = $1,
                 status = 'picking'
             WHERE id = $2 AND status = 'ready'
             RETURNING *`,
            [teamId, lobbyId]
        );
        
        if (!result.rows[0]) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ');
        }
        
        return result.rows[0];
    }
    
    // üó∫Ô∏è –í—ã–±–æ—Ä –∏–ª–∏ –±–∞–Ω –∫–∞—Ä—Ç—ã
    static async selectMap(lobbyId, userId, mapName, action) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—É—â–∏–π —Ö–æ–¥
            const lobbyResult = await client.query(
                `SELECT l.*, i.team_id as user_team_id
                 FROM match_lobbies l
                 JOIN lobby_invitations i ON l.id = i.lobby_id
                 WHERE l.id = $1 AND i.user_id = $2`,
                [lobbyId, userId]
            );
            
            if (!lobbyResult.rows[0]) {
                throw new Error('–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫');
            }
            
            const lobby = lobbyResult.rows[0];
            
            if (lobby.status !== 'picking') {
                throw new Error('–í—ã–±–æ—Ä –∫–∞—Ä—Ç –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è');
            }
            
            if (lobby.current_turn_team_id !== lobby.user_team_id) {
                throw new Error('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞/–∑–∞–±–∞–Ω–µ–Ω–∞
            const existingSelection = await client.query(
                'SELECT * FROM map_selections WHERE lobby_id = $1 AND map_name = $2',
                [lobbyId, mapName]
            );
            
            if (existingSelection.rows[0]) {
                throw new Error('–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –∑–∞–±–∞–Ω–µ–Ω–∞');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
            const actionsCount = await client.query(
                'SELECT COUNT(*) as count FROM map_selections WHERE lobby_id = $1',
                [lobbyId]
            );
            
            const actionOrder = parseInt(actionsCount.rows[0].count) + 1;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
            await client.query(
                `INSERT INTO map_selections (lobby_id, map_name, action_type, team_id, action_order)
                 VALUES ($1, $2, $3, $4, $5)`,
                [lobbyId, mapName, action, lobby.user_team_id, actionOrder]
            );
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
            const nextTurn = await this.determineNextTurn(
                client, 
                lobbyId, 
                lobby.match_format, 
                actionOrder
            );
            
            if (nextTurn.completed) {
                await client.query(
                    `UPDATE match_lobbies 
                     SET status = 'completed', 
                         completed_at = CURRENT_TIMESTAMP
                     WHERE id = $1`,
                    [lobbyId]
                );
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ –º–∞—Ç—á
                await this.saveSelectedMapsToMatch(client, lobbyId);
            } else {
                await client.query(
                    'UPDATE match_lobbies SET current_turn_team_id = $1 WHERE id = $2',
                    [nextTurn.teamId, lobbyId]
                );
            }
            
            await client.query('COMMIT');
            
            return {
                success: true,
                completed: nextTurn.completed,
                nextTurn: nextTurn.teamId
            };
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    // üîÑ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞
    static async determineNextTurn(client, lobbyId, matchFormat, currentAction) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        const teamsResult = await client.query(
            `SELECT m.team1_id, m.team2_id, l.first_picker_team_id
             FROM match_lobbies l
             JOIN tournament_matches m ON l.match_id = m.id
             WHERE l.id = $1`,
            [lobbyId]
        );
        
        const { team1_id, team2_id, first_picker_team_id } = teamsResult.rows[0];
        const secondPickerTeamId = team1_id === first_picker_team_id ? team2_id : team1_id;
        
        // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        const sequences = {
            'bo1': ['ban', 'ban', 'ban', 'ban', 'ban', 'ban', 'pick'],
            'bo3': ['ban', 'ban', 'pick', 'pick', 'ban', 'ban', 'pick'],
            'bo5': ['pick', 'pick', 'ban', 'ban', 'pick', 'pick', 'pick']
        };
        
        const sequence = sequences[matchFormat];
        
        if (currentAction >= sequence.length) {
            return { completed: true };
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–µ–π —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
        // –í bo1: —á–µ—Ä–µ–¥—É—é—Ç—Å—è
        // –í bo3: 1-2-2-1-1-2-2
        // –í bo5: 1-2-2-1-1-2-2
        const turnPatterns = {
            'bo1': [1, 2, 1, 2, 1, 2, 1],
            'bo3': [1, 2, 2, 1, 1, 2, 2],
            'bo5': [1, 2, 2, 1, 1, 2, 2]
        };
        
        const pattern = turnPatterns[matchFormat];
        const nextTurnIndex = pattern[currentAction];
        const nextTeamId = nextTurnIndex === 1 ? first_picker_team_id : secondPickerTeamId;
        
        return { 
            completed: false, 
            teamId: nextTeamId,
            actionType: sequence[currentAction]
        };
    }
    
    // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –≤ –º–∞—Ç—á
    static async saveSelectedMapsToMatch(client, lobbyId) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pick –∫–∞—Ä—Ç—ã
        const picksResult = await client.query(
            `SELECT map_name 
             FROM map_selections 
             WHERE lobby_id = $1 AND action_type = 'pick'
             ORDER BY action_order`,
            [lobbyId]
        );
        
        const selectedMaps = picksResult.rows.map(r => r.map_name);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á
        const matchResult = await client.query(
            `UPDATE tournament_matches 
             SET maps_data = $1
             WHERE id = (SELECT match_id FROM match_lobbies WHERE id = $2)
             RETURNING *`,
            [JSON.stringify(selectedMaps.map(map => ({ map_name: map }))), lobbyId]
        );
        
        return matchResult.rows[0];
    }
    
    // üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–±–±–∏ (–¥–ª—è WebSocket)
    static async subscribeToLobby(io, socket, lobbyId, userId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const lobby = await this.getLobbyInfo(lobbyId, userId);
        
        if (!lobby.user_invited) {
            throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–±–±–∏');
        }
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ
        socket.join(`lobby_${lobbyId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        socket.emit('lobby_state', lobby);
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –ª–æ–±–±–∏ ${lobbyId}`);
    }
    
    // üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ª–æ–±–±–∏
    static async broadcastLobbyUpdate(io, lobbyId) {
        const lobby = await pool.query(
            `SELECT l.*, 
                    (
                        SELECT json_agg(
                            json_build_object(
                                'map_name', ms.map_name,
                                'action_type', ms.action_type,
                                'team_id', ms.team_id,
                                'action_order', ms.action_order
                            ) ORDER BY ms.action_order
                        )
                        FROM map_selections ms
                        WHERE ms.lobby_id = l.id
                    ) as selections
             FROM match_lobbies l
             WHERE l.id = $1`,
            [lobbyId]
        );
        
        if (lobby.rows[0]) {
            io.to(`lobby_${lobbyId}`).emit('lobby_update', lobby.rows[0]);
        }
    }
}

module.exports = MatchLobbyService; 