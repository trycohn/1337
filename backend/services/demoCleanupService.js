/**
 * üóëÔ∏è DEMO CLEANUP SERVICE
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ-—Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
 * 
 * @version 1.0.0
 * @date 2025-10-10
 */

const fs = require('fs');
const path = require('path');
const pool = require('../db');

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–µ–º–∫–∞–º–∏
const DEMOS_DIR = path.join(__dirname, '../uploads/demos');

/**
 * –û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ–∫ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
 * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏
 */
async function cleanupOldDemos() {
    console.log('üóëÔ∏è [DemoCleanup] –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–µ–º–æ–∫...');
    
    const stats = {
        checked: 0,
        deleted: 0,
        errors: 0,
        freedSpace: 0,
        timestamp: new Date().toISOString()
    };
    
    const client = await pool.connect();
    
    try {
        await client.query('BEGIN');
        
        // 1. –ü–æ–∏—Å–∫ –¥–µ–º–æ–∫ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
        const query = `
            SELECT matchid, mapnumber, demo_file_path, demo_size_bytes, demo_uploaded_at
            FROM matchzy_maps 
            WHERE demo_uploaded_at < NOW() - INTERVAL '7 days'
              AND demo_file_path IS NOT NULL
            ORDER BY demo_uploaded_at ASC
        `;
        
        const result = await client.query(query);
        stats.checked = result.rows.length;
        
        console.log(`üìä [DemoCleanup] –ù–∞–π–¥–µ–Ω–æ ${stats.checked} –¥–µ–º–æ–∫ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π`);
        
        if (stats.checked === 0) {
            await client.query('COMMIT');
            console.log('‚úÖ [DemoCleanup] –ù–µ—Ç –¥–µ–º–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            return stats;
        }
        
        // 2. –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –¥–µ–º–∫–∏
        for (const row of result.rows) {
            try {
                const fullPath = path.join(__dirname, '..', row.demo_file_path);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                if (fs.existsSync(fullPath)) {
                    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    fs.unlinkSync(fullPath);
                    stats.freedSpace += row.demo_size_bytes || 0;
                    console.log(`üóëÔ∏è [DemoCleanup] –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${row.demo_file_path} (${formatBytes(row.demo_size_bytes)})`);
                } else {
                    console.log(`‚ö†Ô∏è [DemoCleanup] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (—É–∂–µ —É–¥–∞–ª–µ–Ω?): ${row.demo_file_path}`);
                }
                
                // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î (–æ–±–Ω—É–ª—è–µ–º –ø–æ–ª—è)
                const updateQuery = `
                    UPDATE matchzy_maps 
                    SET 
                        demo_file_path = NULL,
                        demo_uploaded_at = NULL,
                        demo_size_bytes = NULL
                    WHERE matchid = $1 AND mapnumber = $2
                `;
                
                await client.query(updateQuery, [row.matchid, row.mapnumber]);
                
                stats.deleted++;
                
                console.log(`‚úÖ [DemoCleanup] –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è matchid=${row.matchid}, map=${row.mapnumber}`);
                
            } catch (err) {
                stats.errors++;
                console.error(`‚ùå [DemoCleanup] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ–º–∫–∏ matchid=${row.matchid}, map=${row.mapnumber}:`, err.message);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        }
        
        await client.query('COMMIT');
        
        // 4. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üìä [DemoCleanup] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:');
        console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${stats.checked}`);
        console.log(`   –£–¥–∞–ª–µ–Ω–æ: ${stats.deleted}`);
        console.log(`   –û—à–∏–±–æ–∫: ${stats.errors}`);
        console.log(`   –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: ${formatBytes(stats.freedSpace)}`);
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå [DemoCleanup] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        stats.errors++;
        throw error;
    } finally {
        client.release();
    }
    
    return stats;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
function formatBytes(bytes) {
    if (!bytes || bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `${(bytes / Math.pow(k, i)).toFixed(2)} ${sizes[i]}`;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–µ–º–∫–∞–º
 * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 */
async function getDemosStats() {
    try {
        const query = `
            SELECT 
                COUNT(*) as total_demos,
                SUM(demo_size_bytes) as total_size,
                COUNT(CASE WHEN demo_uploaded_at < NOW() - INTERVAL '7 days' THEN 1 END) as old_demos,
                SUM(CASE WHEN demo_uploaded_at < NOW() - INTERVAL '7 days' THEN demo_size_bytes ELSE 0 END) as old_size
            FROM matchzy_maps
            WHERE demo_file_path IS NOT NULL
        `;
        
        const result = await pool.query(query);
        const row = result.rows[0];
        
        return {
            total_demos: parseInt(row.total_demos) || 0,
            total_size: parseInt(row.total_size) || 0,
            total_size_formatted: formatBytes(row.total_size),
            old_demos: parseInt(row.old_demos) || 0,
            old_size: parseInt(row.old_size) || 0,
            old_size_formatted: formatBytes(row.old_size)
        };
    } catch (error) {
        console.error('‚ùå [DemoCleanup] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return null;
    }
}

module.exports = {
    cleanupOldDemos,
    getDemosStats,
    formatBytes
};

