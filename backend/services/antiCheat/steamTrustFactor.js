/**
 * üõ°Ô∏è STEAM TRUST FACTOR SERVICE
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ Steam Web API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
 * 
 * @version 1.0.0
 * @date 2025-10-02
 */

const axios = require('axios');
const { calculateTrustScore } = require('./trustScoreCalculator');
const pool = require('../../db');

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SteamID64 –≤ SteamID32 (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
 * @param {string} steamId64 - Steam ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ 64-bit
 * @returns {string} Steam ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ 32-bit
 */
function convertSteamId64To32(steamId64) {
  const base = BigInt('76561197960265728');
  const id = BigInt(steamId64);
  return (id - base).toString();
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Steam –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API
 * @param {string} steamId64 - Steam ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
 */
async function getSteamProfileData(steamId64) {
  const apiKey = process.env.STEAM_API_KEY;
  
  if (!apiKey) {
    console.warn('‚ö†Ô∏è [Steam API] STEAM_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
    return null;
  }
  
  try {
    console.log(`üì° [Steam API] –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Steam ID: ${steamId64}`);
    
    // 1. –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    const summaryUrl = `https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/`;
    const summaryResponse = await axios.get(summaryUrl, {
      params: {
        key: apiKey,
        steamids: steamId64
      },
      timeout: 10000
    });
    
    if (!summaryResponse.data?.response?.players?.length) {
      console.error('‚ùå [Steam API] –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }
    
    const player = summaryResponse.data.response.players[0];
    console.log(`‚úÖ [Steam API] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è: ${player.personaname}`);
    
    // 2. –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∞—Ö
    const bansUrl = `https://api.steampowered.com/ISteamUser/GetPlayerBans/v1/`;
    const bansResponse = await axios.get(bansUrl, {
      params: {
        key: apiKey,
        steamids: steamId64
      },
      timeout: 10000
    });
    
    const bans = bansResponse.data?.players?.[0] || {};
    console.log(`‚úÖ [Steam API] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∞—Ö:`, {
      vac: bans.NumberOfVACBans || 0,
      game: bans.NumberOfGameBans || 0,
      days_since: bans.DaysSinceLastBan || null
    });
    
    // 3. –ü–æ–ª—É—á–∏—Ç—å owned games (–µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—É–±–ª–∏—á–Ω—ã–π)
    let ownedGames = [];
    let cs2Hours = 0;
    
    try {
      const gamesUrl = `https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/`;
      const gamesResponse = await axios.get(gamesUrl, {
        params: {
          key: apiKey,
          steamid: steamId64,
          include_played_free_games: 1,
          include_appinfo: 0
        },
        timeout: 10000
      });
      
      if (gamesResponse.data?.response?.games) {
        ownedGames = gamesResponse.data.response.games;
        console.log(`‚úÖ [Steam API] –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä: ${ownedGames.length} –∏–≥—Ä`);
        
        // –ù–∞–π—Ç–∏ CS2 (App ID 730)
        const cs2Game = ownedGames.find(g => g.appid === 730);
        if (cs2Game) {
          cs2Hours = Math.floor(cs2Game.playtime_forever / 60);
          console.log(`‚úÖ [Steam API] CS2 —á–∞—Å–æ–≤: ${cs2Hours}`);
        } else {
          console.log('‚ÑπÔ∏è [Steam API] CS2 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ');
        }
      }
    } catch (gamesError) {
      console.warn('‚ö†Ô∏è [Steam API] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å?)');
    }
    
    // 4. –í—ã—á–∏—Å–ª–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
    const accountCreated = player.timecreated 
      ? new Date(player.timecreated * 1000)
      : null;
    
    const accountAgeDays = accountCreated
      ? Math.floor((Date.now() - accountCreated.getTime()) / (1000 * 60 * 60 * 24))
      : null;
    
    console.log(`‚úÖ [Steam API] –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: ${accountAgeDays} –¥–Ω–µ–π`);
    
    // 5. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
    // communityvisibilitystate: 1 = private, 3 = public
    const isPublic = player.communityvisibilitystate === 3;
    
    // 6. –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const steamUserData = {
      steam_id: steamId64,
      profile_url: player.profileurl,
      nickname: player.personaname,
      avatar: player.avatarfull || player.avatarmedium || player.avatar,
      
      // Account quality
      account_age_days: accountAgeDays,
      account_created: accountCreated,
      steam_level: 0, // –ü–æ–ª—É—á–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      
      // Privacy
      profile_public: isPublic,
      profile_private: !isPublic,
      
      // Bans
      vac_bans: bans.NumberOfVACBans || 0,
      game_bans: bans.NumberOfGameBans || 0,
      last_ban_days: bans.DaysSinceLastBan || null,
      is_community_banned: bans.CommunityBanned || false,
      is_economy_banned: bans.EconomyBan !== 'none',
      is_trade_banned: bans.EconomyBan === 'banned',
      
      // Games
      games_count: ownedGames.length,
      cs2_hours: cs2Hours,
      cs2_owned: cs2Hours > 0 || ownedGames.some(g => g.appid === 730)
    };
    
    return steamUserData;
    
  } catch (error) {
    console.error('‚ùå [Steam API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message);
    
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ API –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return {
      steam_id: steamId64,
      error: error.message,
      fallback: true
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Steam –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç Trust Score
 * 
 * @param {string} steamId64 - Steam ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å trust_score –∏ action
 */
async function verifyUserSteamAccount(steamId64, userId = null) {
  console.log('üõ°Ô∏è [AntiCheat] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É Steam –∞–∫–∫–∞—É–Ω—Ç–∞:', steamId64);
  
  try {
    // 1. –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Steam API
    const steamUser = await getSteamProfileData(steamId64);
    
    if (!steamUser) {
      console.warn('‚ö†Ô∏è [AntiCheat] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Steam, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
      
      // Fallback: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      return {
        score: 30,
        action: 'WATCH_LIST',
        error: 'Steam API unavailable',
        details: {
          steam_id: steamId64,
          fallback: true
        }
      };
    }
    
    // –ï—Å–ª–∏ Steam API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –Ω–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ fallback –¥–∞–Ω–Ω—ã–µ
    if (steamUser.fallback) {
      return {
        score: 30,
        action: 'WATCH_LIST',
        error: steamUser.error,
        details: steamUser
      };
    }
    
    // 2. –í—ã—á–∏—Å–ª–∏—Ç—å Trust Score
    const trustResult = calculateTrustScore(steamUser);
    
    console.log(`‚úÖ [AntiCheat] Trust Score –≤—ã—á–∏—Å–ª–µ–Ω: ${trustResult.score}/100 (${trustResult.action})`);
    
    // 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω userId)
    if (userId) {
      await saveTrustScore(userId, steamId64, trustResult, steamUser);
    }
    
    return trustResult;
    
  } catch (error) {
    console.error('‚ùå [AntiCheat] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Steam –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
    
    // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º
    return {
      score: 20,
      action: 'WATCH_LIST',
      error: error.message,
      details: {
        steam_id: steamId64,
        critical_error: true
      }
    };
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Trust Score –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * 
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} steamId - Steam ID
 * @param {Object} trustResult - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ Trust Score
 * @param {Object} steamUser - –î–∞–Ω–Ω—ã–µ Steam –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function saveTrustScore(userId, steamId, trustResult, steamUser) {
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
    const existingResult = await client.query(
      'SELECT id, trust_score, trust_action FROM user_trust_scores WHERE user_id = $1',
      [userId]
    );
    
    if (existingResult.rows.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const oldScore = existingResult.rows[0].trust_score;
      const oldAction = existingResult.rows[0].trust_action;
      
      await client.query(`
        UPDATE user_trust_scores SET
          trust_score = $1,
          trust_action = $2,
          account_age_days = $3,
          steam_level = $4,
          cs2_hours = $5,
          vac_bans = $6,
          game_bans = $7,
          last_ban_days = $8,
          profile_public = $9,
          games_count = $10,
          is_community_banned = $11,
          is_trade_banned = $12,
          checked_at = NOW(),
          check_count = check_count + 1,
          details = $13
        WHERE user_id = $14
      `, [
        trustResult.score,
        trustResult.action,
        steamUser.account_age_days,
        steamUser.steam_level || 0,
        steamUser.cs2_hours,
        steamUser.vac_bans,
        steamUser.game_bans,
        steamUser.last_ban_days,
        steamUser.profile_public,
        steamUser.games_count,
        steamUser.is_community_banned,
        steamUser.is_trade_banned,
        JSON.stringify(trustResult.details),
        userId
      ]);
      
      // –ó–∞–ø–∏—Å–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (oldScore !== trustResult.score || oldAction !== trustResult.action) {
        await client.query(`
          INSERT INTO user_trust_history (
            user_id, old_score, new_score, old_action, new_action, reason
          ) VALUES ($1, $2, $3, $4, $5, $6)
        `, [
          userId,
          oldScore,
          trustResult.score,
          oldAction,
          trustResult.action,
          'Periodic recheck'
        ]);
        
        console.log(`üìä [Trust Score] –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${oldScore} ‚Üí ${trustResult.score}`);
      }
      
      console.log(`‚úÖ [Trust Score] –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è user_id=${userId}`);
      
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await client.query(`
        INSERT INTO user_trust_scores (
          user_id, steam_id, trust_score, trust_action,
          account_age_days, steam_level, cs2_hours,
          vac_bans, game_bans, last_ban_days,
          profile_public, games_count,
          is_community_banned, is_trade_banned,
          details
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
      `, [
        userId,
        steamId,
        trustResult.score,
        trustResult.action,
        steamUser.account_age_days,
        steamUser.steam_level || 0,
        steamUser.cs2_hours,
        steamUser.vac_bans,
        steamUser.game_bans,
        steamUser.last_ban_days,
        steamUser.profile_public,
        steamUser.games_count,
        steamUser.is_community_banned,
        steamUser.is_trade_banned,
        JSON.stringify(trustResult.details)
      ]);
      
      console.log(`‚úÖ [Trust Score] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–ª—è user_id=${userId}`);
    }
    
    await client.query('COMMIT');
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå [Trust Score] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error);
    throw error;
  } finally {
    client.release();
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å Trust Score –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞
 */
async function needsTrustScoreRecheck(userId) {
  try {
    const result = await pool.query(
      'SELECT checked_at FROM user_trust_scores WHERE user_id = $1',
      [userId]
    );
    
    if (result.rows.length === 0) {
      return true; // –ù–µ—Ç –∑–∞–ø–∏—Å–∏ - –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
    }
    
    const lastCheck = new Date(result.rows[0].checked_at);
    const daysSinceCheck = (Date.now() - lastCheck.getTime()) / (1000 * 60 * 60 * 24);
    
    // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 7 –¥–Ω–µ–π
    return daysSinceCheck > 7;
    
  } catch (error) {
    console.error('‚ùå [Trust Score] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ recheck:', error);
    return true; // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ª—É—á—à–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å
  }
}

module.exports = {
  verifyUserSteamAccount,
  saveTrustScore,
  needsTrustScoreRecheck,
  getSteamProfileData
};

