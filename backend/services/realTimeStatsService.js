// Real-time Statistics Service –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 4
// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç live –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ WebSocket

const WebSocket = require('ws');
const pool = require('../db');

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Redis —Å graceful fallback
let Redis = null;
try {
    Redis = require('redis');
} catch (error) {
    console.warn('‚ö†Ô∏è Redis –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è');
}

class RealTimeStatsService {
    constructor() {
        this.wss = null;
        this.clients = new Map(); // userId -> WebSocket
        this.redis = null;
        this.isInitialized = false;
    }

    async initialize(server) {
        try {
            console.log('üîå [WEBSOCKET] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
            console.log('üîå [WEBSOCKET] NODE_ENV:', process.env.NODE_ENV);
            console.log('üîå [WEBSOCKET] –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞:', process.env.PORT || 3000);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
            this.wss = new WebSocket.Server({ 
                server,
                path: '/ws/stats'
            });

            console.log('‚úÖ [WEBSOCKET] WebSocket —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω');
            console.log('‚úÖ [WEBSOCKET] Path: /ws/stats');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if (Redis) {
                try {
                    console.log('üîÑ [WEBSOCKET] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...');
                    this.redis = Redis.createClient({
                        host: process.env.REDIS_HOST || 'localhost',
                        port: process.env.REDIS_PORT || 6379,
                        password: process.env.REDIS_PASSWORD || undefined
                    });

                    await this.redis.connect();
                    console.log('‚úÖ [WEBSOCKET] Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è Real-time —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
                } catch (redisError) {
                    console.warn('‚ö†Ô∏è [WEBSOCKET] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis:', {
                        message: redisError.message,
                        stack: redisError.stack
                    });
                    console.warn('‚ö†Ô∏è [WEBSOCKET] –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è');
                    this.redis = null;
                }
            } else {
                console.log('‚ÑπÔ∏è [WEBSOCKET] Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è');
            }

            this.setupWebSocketHandlers();
            this.isInitialized = true;
            
            console.log('üöÄ [WEBSOCKET] Real-time Statistics Service —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå [WEBSOCKET] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Real-time Stats Service:', {
                message: error.message,
                stack: error.stack
            });
            // Graceful fallback - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ WebSocket
            this.isInitialized = false;
        }
    }

    setupWebSocketHandlers() {
        this.wss.on('connection', (ws, req) => {
            const connectTime = new Date().toISOString();
            console.log('üîå [WEBSOCKET] –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', {
                timestamp: connectTime,
                url: req.url,
                origin: req.headers.origin,
                userAgent: req.headers['user-agent'],
                remoteAddress: req.connection?.remoteAddress || req.socket?.remoteAddress
            });

            ws.on('message', async (message) => {
                try {
                    console.log('üì® [WEBSOCKET] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
                        messageLength: message.length,
                        timestamp: new Date().toISOString()
                    });
                    
                    const data = JSON.parse(message);
                    
                    console.log('üîç [WEBSOCKET] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
                        type: data.type,
                        userId: data.userId,
                        hasToken: !!data.token,
                        timestamp: new Date().toISOString()
                    });
                    
                    await this.handleMessage(ws, data);
                } catch (error) {
                    console.error('‚ùå [WEBSOCKET] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
                        error: error.message,
                        stack: error.stack,
                        message: message.toString(),
                        timestamp: new Date().toISOString()
                    });
                    ws.send(JSON.stringify({
                        type: 'error',
                        message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'
                    }));
                }
            });

            ws.on('close', (code, reason) => {
                const disconnectTime = new Date().toISOString();
                let disconnectedUserId = null;
                
                // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Map –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
                for (const [userId, client] of this.clients.entries()) {
                    if (client === ws) {
                        this.clients.delete(userId);
                        disconnectedUserId = userId;
                        break;
                    }
                }
                
                console.log('üíî [WEBSOCKET] WebSocket –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ:', {
                    userId: disconnectedUserId,
                    code: code,
                    reason: reason?.toString(),
                    disconnectTime: disconnectTime,
                    activeClients: this.clients.size
                });
            });

            ws.on('error', (error) => {
                console.error('‚ùå [WEBSOCKET] WebSocket –æ—à–∏–±–∫–∞:', {
                    error: error.message,
                    stack: error.stack,
                    code: error.code,
                    timestamp: new Date().toISOString()
                });
            });
        });
        
        console.log('‚úÖ [WEBSOCKET] WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    async handleMessage(ws, data) {
        const { type, userId, token } = data;

        switch (type) {
            case 'authenticate':
            case 'subscribe_stats':
                console.log(`üîê [WEBSOCKET] –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
                
                if (await this.validateUserToken(userId, token)) {
                    this.clients.set(userId, ws);
                    console.log(`‚úÖ [WEBSOCKET] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ real-time —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:`, {
                        userId: userId,
                        totalClients: this.clients.size,
                        timestamp: new Date().toISOString()
                    });
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    const currentStats = await this.getCurrentStats(userId);
                    ws.send(JSON.stringify({
                        type: 'stats_update',
                        data: currentStats
                    }));
                    
                    console.log(`üìä [WEBSOCKET] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userId}`);
                } else {
                    console.warn(`‚ùå [WEBSOCKET] –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
                    ws.send(JSON.stringify({
                        type: 'error',
                        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
                    }));
                }
                break;

            case 'request_tournament_analysis':
                console.log(`üìà [WEBSOCKET] –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
                
                if (await this.validateUserToken(userId, token)) {
                    const analysis = await this.generateTournamentAnalysis(userId);
                    ws.send(JSON.stringify({
                        type: 'tournament_analysis',
                        data: analysis
                    }));
                    
                    console.log(`üìà [WEBSOCKET] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userId}`);
                } else {
                    console.warn(`‚ùå [WEBSOCKET] –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞: ${userId}`);
                }
                break;

            case 'ping':
                console.log(`üèì [WEBSOCKET] Ping –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
                ws.send(JSON.stringify({ type: 'pong' }));
                break;

            default:
                console.warn(`‚ùì [WEBSOCKET] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:`, {
                    type: type,
                    userId: userId,
                    timestamp: new Date().toISOString()
                });
        }
    }

    async validateUserToken(userId, token) {
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è)
        try {
            const jwt = require('jsonwebtoken');
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            return decoded.id == userId;
        } catch (error) {
            return false;
        }
    }

    async getCurrentStats(userId) {
        const cacheKey = `user_stats_${userId}`;
        
        try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
            if (this.redis) {
                const cached = await this.redis.get(cacheKey);
                if (cached) {
                    return JSON.parse(cached);
                }
            }

            // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
            const stats = await this.fetchStatsFromDatabase(userId);
            
            // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
            if (this.redis && stats) {
                await this.redis.setEx(cacheKey, 300, JSON.stringify(stats));
            }
            
            return stats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return null;
        }
    }

    async fetchStatsFromDatabase(userId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const statsResult = await pool.query(`
                SELECT t.name, t.game, uts.result, uts.wins, uts.losses, uts.is_team, uts.updated_at
                FROM user_tournament_stats uts 
                JOIN tournaments t ON uts.tournament_id = t.id 
                WHERE uts.user_id = $1
                ORDER BY uts.updated_at DESC
            `, [userId]);

            const tournaments = statsResult.rows;
            const soloStats = tournaments.filter(s => !s.is_team);
            const teamStats = tournaments.filter(s => s.is_team);

            const soloWins = soloStats.reduce((sum, s) => sum + (s.wins || 0), 0);
            const soloLosses = soloStats.reduce((sum, s) => sum + (s.losses || 0), 0);
            const teamWins = teamStats.reduce((sum, s) => sum + (s.wins || 0), 0);
            const teamLosses = teamStats.reduce((sum, s) => sum + (s.losses || 0), 0);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º
            const gameStats = {};
            tournaments.forEach(stat => {
                if (!gameStats[stat.game]) {
                    gameStats[stat.game] = {
                        solo: { wins: 0, losses: 0 },
                        team: { wins: 0, losses: 0 }
                    };
                }
                if (stat.is_team) {
                    gameStats[stat.game].team.wins += (stat.wins || 0);
                    gameStats[stat.game].team.losses += (stat.losses || 0);
                } else {
                    gameStats[stat.game].solo.wins += (stat.wins || 0);
                    gameStats[stat.game].solo.losses += (stat.losses || 0);
                }
            });

            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 4
            const extendedStats = {
                totalTournaments: tournaments.length,
                winningTournaments: tournaments.filter(t => t.result?.includes('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å')).length,
                topThreeFinishes: tournaments.filter(t => 
                    t.result?.includes('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å') || 
                    t.result?.includes('2 –º–µ—Å—Ç–æ') || 
                    t.result?.includes('3 –º–µ—Å—Ç–æ')
                ).length,
                recentForm: tournaments.slice(0, 5).map(t => ({
                    game: t.game,
                    result: t.result,
                    date: t.updated_at
                })),
                averageFinishPosition: this.calculateAveragePosition(tournaments),
                performanceByGame: gameStats,
                trends: await this.calculatePerformanceTrends(userId, tournaments)
            };

            return {
                tournaments,
                solo: { 
                    wins: soloWins, 
                    losses: soloLosses, 
                    winRate: soloWins + soloLosses > 0 ? ((soloWins / (soloWins + soloLosses)) * 100).toFixed(2) : 0 
                },
                team: { 
                    wins: teamWins, 
                    losses: teamLosses, 
                    winRate: teamWins + teamLosses > 0 ? ((teamWins / (teamWins + teamLosses)) * 100).toFixed(2) : 0 
                },
                byGame: gameStats,
                extended: extendedStats,
                lastUpdated: new Date().toISOString()
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î:', error);
            return null;
        }
    }

    calculateAveragePosition(tournaments) {
        const positions = tournaments
            .map(t => {
                if (t.result?.includes('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å')) return 1;
                if (t.result?.includes('2 –º–µ—Å—Ç–æ')) return 2;
                if (t.result?.includes('3 –º–µ—Å—Ç–æ')) return 3;
                if (t.result?.includes('4 –º–µ—Å—Ç–æ')) return 4;
                if (t.result?.includes('–ü–æ–ª—É—Ñ–∏–Ω–∞–ª')) return 4;
                if (t.result?.includes('1/4')) return 8;
                return 10; // –£—á–∞—Å—Ç–Ω–∏–∫
            })
            .filter(p => p <= 10);

        return positions.length > 0 
            ? (positions.reduce((a, b) => a + b, 0) / positions.length).toFixed(1)
            : null;
    }

    async calculatePerformanceTrends(userId, tournaments) {
        // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const recentTournaments = tournaments.slice(0, 10);
        const olderTournaments = tournaments.slice(10, 20);

        if (recentTournaments.length === 0) return null;

        const recentWinRate = this.getWinRateFromTournaments(recentTournaments);
        const olderWinRate = olderTournaments.length > 0 ? this.getWinRateFromTournaments(olderTournaments) : recentWinRate;

        return {
            direction: recentWinRate > olderWinRate ? 'improving' : recentWinRate < olderWinRate ? 'declining' : 'stable',
            recentWinRate: recentWinRate.toFixed(1),
            change: Math.abs(recentWinRate - olderWinRate).toFixed(1)
        };
    }

    getWinRateFromTournaments(tournaments) {
        const totalWins = tournaments.reduce((sum, t) => sum + (t.wins || 0), 0);
        const totalLosses = tournaments.reduce((sum, t) => sum + (t.losses || 0), 0);
        return totalWins + totalLosses > 0 ? (totalWins / (totalWins + totalLosses)) * 100 : 0;
    }

    async generateTournamentAnalysis(userId) {
        try {
            const stats = await this.getCurrentStats(userId);
            if (!stats || !stats.tournaments.length) {
                return { message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' };
            }

            // AI-–∞–Ω–∞–ª–∏–∑ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            const analysis = {
                performanceRating: this.calculatePerformanceRating(stats),
                strengths: this.identifyStrengths(stats),
                improvements: this.suggestImprovements(stats),
                gameRecommendations: this.recommendGames(stats),
                prediction: this.predictNextTournamentResult(stats)
            };

            return analysis;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error);
            return { error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑' };
        }
    }

    calculatePerformanceRating(stats) {
        const { solo, team, extended } = stats;
        
        // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (0-100)
        let rating = 50; // –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥

        // –í–∏–Ω—Ä–µ–π—Ç –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥
        const overallWinRate = (parseFloat(solo.winRate) + parseFloat(team.winRate)) / 2;
        rating += (overallWinRate - 50) * 0.8;

        // –¢–æ–ø-3 —Ñ–∏–Ω–∏—à–∏ –¥–∞—é—Ç –±–æ–Ω—É—Å
        if (extended.topThreeFinishes > 0) {
            rating += Math.min(extended.topThreeFinishes * 5, 20);
        }

        // –ü–æ–±–µ–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –¥–∞—é—Ç –±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å
        if (extended.winningTournaments > 0) {
            rating += extended.winningTournaments * 10;
        }

        // –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥
        if (extended.averageFinishPosition) {
            rating += (10 - parseFloat(extended.averageFinishPosition)) * 2;
        }

        return Math.max(0, Math.min(100, Math.round(rating)));
    }

    identifyStrengths(stats) {
        const strengths = [];
        
        if (parseFloat(stats.solo.winRate) > 60) {
            strengths.push('–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞ –≤ —Å–æ–ª–æ-—Ç—É—Ä–Ω–∏—Ä–∞—Ö');
        }
        
        if (parseFloat(stats.team.winRate) > 60) {
            strengths.push('–°–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞');
        }

        if (stats.extended.winningTournaments > 0) {
            strengths.push('–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–±–µ–∂–¥–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö');
        }

        if (stats.extended.trends?.direction === 'improving') {
            strengths.push('–†–∞—Å—Ç—É—â–∞—è —Ñ–æ—Ä–º–∞');
        }

        return strengths.length > 0 ? strengths : ['–°—Ç–∞–±–∏–ª—å–Ω–∞—è –∏–≥—Ä–∞'];
    }

    suggestImprovements(stats) {
        const improvements = [];

        if (parseFloat(stats.solo.winRate) < 40) {
            improvements.push('–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏');
        }

        if (parseFloat(stats.team.winRate) < 40) {
            improvements.push('–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è');
        }

        if (stats.extended.trends?.direction === 'declining') {
            improvements.push('–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Ä–∞–∂–µ–Ω–∏–π');
        }

        if (stats.extended.averageFinishPosition > 7) {
            improvements.push('–§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤ —Ç–æ–ø-8');
        }

        return improvements.length > 0 ? improvements : ['–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'];
    }

    recommendGames(stats) {
        const { byGame } = stats;
        const gamePerformance = [];

        Object.entries(byGame).forEach(([game, gameStats]) => {
            const totalWins = gameStats.solo.wins + gameStats.team.wins;
            const totalLosses = gameStats.solo.losses + gameStats.team.losses;
            const winRate = totalWins + totalLosses > 0 ? (totalWins / (totalWins + totalLosses)) * 100 : 0;
            
            gamePerformance.push({ game, winRate, total: totalWins + totalLosses });
        });

        gamePerformance.sort((a, b) => b.winRate - a.winRate);

        return gamePerformance.slice(0, 2).map(gp => ({
            game: gp.game,
            reason: `–í—ã—Å–æ–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç ${gp.winRate.toFixed(1)}%`
        }));
    }

    predictNextTournamentResult(stats) {
        const recentForm = stats.extended.recentForm.slice(0, 3);
        const recentWins = recentForm.filter(f => 
            f.result?.includes('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å') || f.result?.includes('–º–µ—Å—Ç–æ')
        ).length;

        if (recentWins >= 2) {
            return { prediction: '–í—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ —Ç–æ–ø-3', confidence: 75 };
        } else if (recentWins >= 1) {
            return { prediction: '–•–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã –ø–æ–ø–∞—Å—Ç—å –≤ –ø–ª–µ–π-–æ—Ñ—Ñ', confidence: 60 };
        } else {
            return { prediction: '–§–æ–∫—É—Å –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∏–≥—Ä–µ', confidence: 50 };
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    async broadcastStatsUpdate(userId, updateType = 'stats_update') {
        if (!this.isInitialized) {
            console.log(`‚ö†Ô∏è [WEBSOCKET] Broadcast –ø—Ä–æ–ø—É—â–µ–Ω - —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
            return;
        }
        
        const client = this.clients.get(userId);
        
        if (!client) {
            console.log(`‚ö†Ô∏è [WEBSOCKET] Broadcast –ø—Ä–æ–ø—É—â–µ–Ω - –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
            return;
        }
        
        if (client.readyState !== WebSocket.OPEN) {
            console.log(`‚ö†Ô∏è [WEBSOCKET] Broadcast –ø—Ä–æ–ø—É—â–µ–Ω - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${client.readyState}`);
            this.clients.delete(userId); // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            return;
        }
        
        try {
            console.log(`üì° [WEBSOCKET] –û—Ç–ø—Ä–∞–≤–∫–∞ broadcast –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, {
                userId: userId,
                updateType: updateType,
                totalClients: this.clients.size,
                timestamp: new Date().toISOString()
            });
            
            const currentStats = await this.getCurrentStats(userId);
            const message = JSON.stringify({
                type: updateType,
                data: currentStats,
                timestamp: new Date().toISOString()
            });
            
            client.send(message);
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (this.redis) {
                await this.redis.del(`user_stats_${userId}`);
                console.log(`üóëÔ∏è [WEBSOCKET] –ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
            }
            
            console.log(`‚úÖ [WEBSOCKET] Broadcast —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:`, {
                userId: userId,
                updateType: updateType,
                messageLength: message.length,
                timestamp: new Date().toISOString()
            });
        } catch (error) {
            console.error('‚ùå [WEBSOCKET] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
                userId: userId,
                updateType: updateType,
                error: error.message,
                stack: error.stack,
                timestamp: new Date().toISOString()
            });
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            this.clients.delete(userId);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
    async invalidateStatsCache(userId) {
        if (this.redis) {
            await this.redis.del(`user_stats_${userId}`);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    getConnectionStats() {
        return {
            totalConnections: this.clients.size,
            connectedUsers: Array.from(this.clients.keys())
        };
    }
}

module.exports = new RealTimeStatsService(); 