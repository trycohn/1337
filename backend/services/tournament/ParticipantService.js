const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const TeamRepository = require('../../repositories/tournament/TeamRepository');
const TournamentValidator = require('../../validators/tournament/TournamentValidator');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentEventNotification } = require('../../utils/tournament/chatHelpers');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { broadcastTournamentUpdate } = require('../../notifications');

class ParticipantService {
    /**
     * üÜï –û–¢–ü–†–ê–í–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• WEBSOCKET –°–û–ë–´–¢–ò–ô –î–õ–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í
     */
    static async _broadcastParticipantUpdate(tournamentId, action, participantData, userId = null) {
        console.log(`üéØ [_broadcastParticipantUpdate] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É WebSocket —Å–æ–±—ã—Ç–∏—è`);
        console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`, {
            tournamentId: parseInt(tournamentId),
            action,
            participantData,
            userId
        });
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º io –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ server
            const io = global.io || require('../../socketio-server').getIO();
            
            console.log(`üîå Socket.IO instance –Ω–∞–π–¥–µ–Ω:`, !!io);
            
            if (io) {
                const updateData = {
                    tournamentId: parseInt(tournamentId),
                    action: action, // 'added', 'removed', 'updated'
                    participant: participantData,
                    timestamp: new Date().toISOString(),
                    userId: userId
                };
                
                console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ participant_update:`, updateData);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                io.emit('participant_update', updateData);
                
                console.log(`‚úÖ –°–æ–±—ã—Ç–∏–µ participant_update –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
                console.log(`üéØ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ participant_update –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${action} —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${participantData.name || participantData.id}`);
            } else {
                console.error(`‚ùå Socket.IO instance –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
                console.warn('‚ö†Ô∏è Socket.IO instance –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ participant_update');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–±—ã—Ç–∏—è participant_update:', error);
            console.error('Stack trace:', error.stack);
        }
    }

    /**
     * –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
     */
    static async participateInTournament(tournamentId, userId, username, options = {}) {
        console.log(`üë• ParticipantService: –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.status !== 'active') {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingParticipant = await ParticipantRepository.getUserParticipation(tournamentId, userId);
        if (existingParticipant) {
            throw new Error('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ');
        }

        // üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è MIX —Ç—É—Ä–Ω–∏—Ä–æ–≤
        if (tournament.format === 'mix') {
            try {
                const pool = require('../../db');
                const userResult = await pool.query('SELECT id, steam_id, faceit_id FROM users WHERE id = $1', [userId]);
                const user = userResult.rows[0] || {};

                const needsFaceit = !!tournament.require_faceit_linked && (tournament.mix_rating_type === 'faceit');
                const needsSteam = !!tournament.require_steam_linked && (tournament.mix_rating_type === 'premier');

                if (needsFaceit && !user.faceit_id) {
                    const err = new Error('–î–ª—è —É—á–∞—Å—Ç–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å FACEIT –∞–∫–∫–∞—É–Ω—Ç');
                    err.code = 'FACEIT_LINK_REQUIRED';
                    throw err;
                }

                if (needsSteam && !user.steam_id) {
                    const err = new Error('–î–ª—è —É—á–∞—Å—Ç–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å Steam –∞–∫–∫–∞—É–Ω—Ç');
                    err.code = 'STEAM_LINK_REQUIRED';
                    throw err;
                }
            } catch (checkErr) {
                // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ; —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏
                throw checkErr;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (tournament.max_participants) {
            const currentCount = await ParticipantRepository.getCountByTournamentId(tournamentId);
            if (currentCount >= tournament.max_participants) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω');
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        if (tournament.participant_type === 'team') {
            return await this._handleTeamParticipation(tournament, userId, username, options);
        } else {
            return await this._handleSoloParticipation(tournament, userId, username);
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
     */
    static async cancelParticipation(tournamentId, userId, username) {
        console.log(`‚ùå ParticipantService: –û—Ç–º–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.status !== 'active') {
            throw new Error('–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const participant = await ParticipantRepository.getUserParticipation(tournamentId, userId);
        if (!participant) {
            throw new Error('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ');
        }

        // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await ParticipantRepository.removeParticipant(tournamentId, userId);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(tournamentId, userId, 'participant_left', {
            participantName: username
        });

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        await sendTournamentEventNotification(tournamentId, 'participant_left', {
            participantName: username
        });

        // üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ WebSocket —Å–æ–±—ã—Ç–∏–µ
        await this._broadcastParticipantUpdate(tournamentId, 'removed', participant, userId);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ WebSocket
        const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);
        broadcastTournamentUpdate(tournamentId, updatedTournament);

        console.log('‚úÖ ParticipantService: –£—á–∞—Å—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getParticipants(tournamentId) {
        return await ParticipantRepository.getByTournamentId(tournamentId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ (–∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    static async getByTournamentId(tournamentId) {
        return await this.getParticipants(tournamentId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ (–≤–∫–ª—é—á–∞—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö)
     */
    static async getOriginalParticipants(tournamentId) {
        console.log(`üë• ParticipantService: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const participants = await ParticipantRepository.getByTournamentId(tournamentId);
        
        // –†–∞–∑–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—ã
        const allParticipants = participants;
        const inTeam = participants.filter(p => p.in_team);
        const notInTeam = participants.filter(p => !p.in_team);
        
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –≤—Å–µ–≥–æ ${allParticipants.length}, –≤ –∫–æ–º–∞–Ω–¥–∞—Ö ${inTeam.length}, –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö ${notInTeam.length}`);
        
        return {
            all: allParticipants,
            inTeam: inTeam,
            notInTeam: notInTeam,
            total: allParticipants.length,
            inTeamCount: inTeam.length,
            notInTeamCount: notInTeam.length
        };
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
     */
    static async removeParticipant(tournamentId, participantId, adminUserId) {
        console.log(`üõ°Ô∏è ParticipantService: –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${participantId} –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await this._checkAdminAccess(tournamentId, adminUserId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (tournament.status !== 'active') {
            throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞');
        }

        // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const removedParticipant = await ParticipantRepository.removeById(participantId);
        if (!removedParticipant) {
            throw new Error('–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(tournamentId, adminUserId, 'participant_removed_by_admin', {
            removedParticipantId: participantId,
            removedParticipantName: removedParticipant.name
        });

        // üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ WebSocket —Å–æ–±—ã—Ç–∏–µ
        await this._broadcastParticipantUpdate(tournamentId, 'removed', removedParticipant, adminUserId);

        console.log('‚úÖ ParticipantService: –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
        return removedParticipant;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
     */
    static async _handleSoloParticipation(tournament, userId, username) {
        console.log(`üë§ [ParticipantService] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournament.id}`);

        // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä
        const participant = await ParticipantRepository.create({
            tournament_id: tournament.id,
            user_id: userId,
            name: username
        });

        await logTournamentEvent(tournament.id, userId, 'participant_joined', {
            participant_name: username,
            tournament_name: tournament.name
        });

        await sendTournamentChatAnnouncement(
            tournament.id,
            `üéÆ ${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É!`
        );

        // üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ WebSocket —Å–æ–±—ã—Ç–∏–µ
        await this._broadcastParticipantUpdate(tournament.id, 'added', participant, userId);
        
        return participant;
    }

    /**
     * üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ (–≤–∫–ª—é—á–∞—è CS2)
     */
    static async _handleTeamParticipation(tournament, userId, username, options) {
        console.log(`üë• [ParticipantService] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournament.id}`);
        console.log(`üìã –û–ø—Ü–∏–∏:`, options);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è CS2
        const minTeamSize = this._getMinTeamSize(tournament.participant_type);
        
        if (options.teamId) {
            // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
            await this._joinOrCreateFromUserTeam(tournament, userId, username, options.teamId, minTeamSize);
        } else if (options.newTeamName) {
            await this._createNewTeam(tournament, userId, username, options.newTeamName, minTeamSize);
        } else {
            throw new Error('–î–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é');
        }
    }

    /**
     * üÜï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π
     */
    static async _joinOrCreateFromUserTeam(tournament, userId, username, teamId, minTeamSize = 1) {
        const pool = require('../../db');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
        const tournamentTeam = await TeamRepository.getById(teamId);
        
        if (tournamentTeam && tournamentTeam.tournament_id === tournament.id) {
            // –≠—Ç–æ —É–∂–µ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é
            return await this._joinExistingTournamentTeam(tournament, userId, username, teamId, minTeamSize);
        }
        
        // –ò—â–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
        const userTeamResult = await pool.query('SELECT * FROM user_teams WHERE id = $1', [teamId]);
        const userTeam = userTeamResult.rows[0];
        
        if (!userTeam) {
            throw new Error('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        const memberResult = await pool.query(
            'SELECT * FROM user_team_members WHERE team_id = $1 AND user_id = $2', 
            [teamId, userId]
        );
        
        if (memberResult.rows.length === 0) {
            throw new Error('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã
        const existingTournamentTeamResult = await pool.query(
            'SELECT * FROM tournament_teams WHERE tournament_id = $1 AND name = $2',
            [tournament.id, userTeam.name]
        );
        
        if (existingTournamentTeamResult.rows.length > 0) {
            // –¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–µ–π
            const existingTeam = existingTournamentTeamResult.rows[0];
            return await this._joinExistingTournamentTeam(tournament, userId, username, existingTeam.id, minTeamSize);
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—É—Ä–Ω–∏—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π
        console.log(`üÜï –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É "${userTeam.name}" –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã ${teamId}`);
        
        const tournamentTeamData = await TeamRepository.create({
            tournament_id: tournament.id,
            name: userTeam.name,
            creator_id: userTeam.captain_id
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        const userTeamMembersResult = await pool.query(`
            SELECT utm.*, u.username 
            FROM user_team_members utm 
            JOIN users u ON utm.user_id = u.id 
            WHERE utm.team_id = $1
        `, [teamId]);
        
        for (const member of userTeamMembersResult.rows) {
            // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            const participant = await ParticipantRepository.create({
                tournament_id: tournament.id,
                user_id: member.user_id,
                name: member.username
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—É—Ä–Ω–∏—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É
            await TeamRepository.addMember(
                tournamentTeamData.id, 
                member.user_id, 
                participant.id,
                member.role === 'captain' // is_captain
            );
        }
        
        await logTournamentEvent(tournament.id, userId, 'team_imported_from_user_team', {
            user_team_id: teamId,
            tournament_team_id: tournamentTeamData.id,
            team_name: userTeam.name,
            members_count: userTeamMembersResult.rows.length
        });

        await sendTournamentChatAnnouncement(
            tournament.id,
            `üèÜ –ö–æ–º–∞–Ω–¥–∞ "${userTeam.name}" –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É! (${userTeamMembersResult.rows.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`
        );
    }

    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
     */
    static async _joinExistingTournamentTeam(tournament, userId, username, teamId, minTeamSize = 1) {
        const team = await TeamRepository.getById(teamId);
        
        if (!team || team.tournament_id !== tournament.id) {
            throw new Error('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ');
        }

        const membersCount = await TeamRepository.getMembersCount(teamId);
        const maxTeamSize = this._getMaxTeamSize(tournament.participant_type);
        
        if (membersCount >= maxTeamSize) {
            const typeName = this._getTypeDisplayName(tournament.participant_type);
            throw new Error(`–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º ${maxTeamSize} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è ${typeName})`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã
        const existingMemberResult = await pool.query(
            'SELECT * FROM tournament_team_members WHERE team_id = $1 AND user_id = $2',
            [teamId, userId]
        );
        
        if (existingMemberResult.rows.length > 0) {
            throw new Error('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        }

        // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const participant = await ParticipantRepository.create({
            tournament_id: tournament.id,
            user_id: userId,
            name: username
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
        await TeamRepository.addMember(teamId, userId, participant.id);

        await logTournamentEvent(tournament.id, userId, 'participant_joined_team', {
            participant_name: username,
            team_name: team.name,
            team_id: teamId
        });

        await sendTournamentChatAnnouncement(
            tournament.id,
            `üë• ${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ "${team.name}"!`
        );
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static _getMinTeamSize(participantType) {
        const minSizes = {
            'cs2_classic_5v5': 5,
            'cs2_wingman_2v2': 2,
            'team': 1, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
            'solo': 1
        };
        return minSizes[participantType] || 1;
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static _getMaxTeamSize(participantType) {
        const maxSizes = {
            'cs2_classic_5v5': 10,
            'cs2_wingman_2v2': 4,
            'team': 10, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
            'solo': 1
        };
        return maxSizes[participantType] || 10;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
     */
    static async _createNewTeam(tournament, userId, username, teamName, minTeamSize = 1) {
        const maxTeamSize = this._getMaxTeamSize(tournament.participant_type);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        const team = await TeamRepository.create({
            tournament_id: tournament.id,
            name: teamName,
            creator_id: userId
        });

        // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const participant = await ParticipantRepository.create({
            tournament_id: tournament.id,
            user_id: userId,
            name: username
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É
        await TeamRepository.addMember(team.id, userId, participant.id);

        const typeName = this._getTypeDisplayName(tournament.participant_type);

        await logTournamentEvent(tournament.id, userId, 'team_created', {
            team_name: teamName,
            team_id: team.id,
            creator_name: username,
            min_team_size: minTeamSize,
            max_team_size: maxTeamSize
        });

        await sendTournamentChatAnnouncement(
            tournament.id,
            `üèÜ ${username} —Å–æ–∑–¥–∞–ª –∫–æ–º–∞–Ω–¥—É "${teamName}" –¥–ª—è ${typeName}! –ú–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${minTeamSize}`
        );
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static _getTypeDisplayName(participantType) {
        const names = {
            'cs2_classic_5v5': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 5—Ö5',
            'cs2_wingman_2v2': 'Wingman 2—Ö2',
            'team': '–∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞',
            'solo': '–æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞'
        };
        return names[participantType] || participantType;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @private
     */
    static async _checkAdminAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (!isAdmin) {
                throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ');
            }
        }
    }

    /**
     * –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
     */
    static async addParticipant(tournamentId, adminUserId, participantData) {
        console.log(`‚ûï ParticipantService: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä ${tournamentId} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminUserId}`);
        console.log(`üìã –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:`, participantData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        await this._checkAdminAccess(tournamentId, adminUserId);
        
        const { participantName, userId, faceit_elo, cs2_premier_rank } = participantData;
        
        if (!participantName) {
            throw new Error('–£–∫–∞–∂–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω userId)
        if (userId) {
            const existingParticipant = await ParticipantRepository.getUserParticipation(tournamentId, userId);
            if (existingParticipant) {
                throw new Error('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ');
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const newParticipant = await ParticipantRepository.create({
            tournament_id: tournamentId,
            user_id: userId || null,
            name: participantName,
            faceit_elo: faceit_elo || null,
            cs2_premier_rank: cs2_premier_rank || null
        });
        
        console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`, newParticipant);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(tournamentId, adminUserId, 'participant_added', {
            participantId: newParticipant.id,
            participantName: participantName,
            addedByAdmin: true
        });
        
        console.log(`üìù –°–æ–±—ã—Ç–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: participant_added`);
        
        // üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ WebSocket —Å–æ–±—ã—Ç–∏–µ
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ participant_update —Å –¥–∞–Ω–Ω—ã–º–∏:`, {
            tournamentId,
            action: 'added',
            participant: newParticipant,
            adminUserId
        });
        
        await this._broadcastParticipantUpdate(tournamentId, 'added', newParticipant, adminUserId);
        
        console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ ${participantName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä ${tournamentId}`);
        return newParticipant;
    }
}

module.exports = ParticipantService;