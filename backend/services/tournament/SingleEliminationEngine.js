/**
 * ‚ö° –î–í–ò–ñ–û–ö SINGLE ELIMINATION
 * 
 * –û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Single Elimination
 * —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */

const { BracketMath } = require('../../utils/tournament/bracketMath');
const { SeedingFactory, SEEDING_TYPES } = require('../../utils/tournament/seedingAlgorithms');
const pool = require('../../db');

/**
 * üèÜ –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–≤–∏–∂–∫–∞ Single Elimination
 */
class SingleEliminationEngine {
    
    /**
     * üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥
     * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç—á–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
     */
    static async generateBracket(tournamentId, participants, options = {}) {
        const startTime = Date.now();
        console.log(`‚ö° [SingleEliminationEngine] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this._validateInput(tournamentId, participants, options);
            
            // 2. –†–∞—Å—á–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bye-–ø—Ä–æ—Ö–æ–¥–æ–≤
            const bracketMath = BracketMath.calculateSingleEliminationParams(
                participants.length, 
                { thirdPlaceMatch: options.thirdPlaceMatch || false }
            );
            
            console.log(`üìä –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, {
                originalParticipants: bracketMath.originalParticipantCount,
                actualParticipants: bracketMath.actualParticipants,
                excludedParticipants: bracketMath.excludedParticipants, // –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ 0
                needsPreliminaryRound: bracketMath.needsPreliminaryRound,
                preliminaryMatches: bracketMath.preliminaryMatches,
                firstRoundByes: bracketMath.firstRoundByes,
                totalMatches: bracketMath.totalMatches,
                rounds: bracketMath.rounds
            });
            
            // 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const seedingType = options.seedingType || SEEDING_TYPES.RANDOM;
            const seededParticipants = SeedingFactory.createSeeding(
                seedingType,
                participants, // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                participants.length, // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                options.seedingOptions || {}
            );
            
            console.log(`üé≤ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —Ç–∏–ø ${seedingType}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${seededParticipants.length}`);
            
            // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞—Ç—á–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bye-–ø—Ä–æ—Ö–æ–¥–æ–≤
            const matches = await this._generateMatches(
                tournamentId,
                seededParticipants,
                bracketMath,
                options
            );
            
            // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            const validationResult = this._validateGeneratedBracket(matches, bracketMath);
            if (!validationResult.isValid) {
                throw new Error(`–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∞: ${validationResult.errors.join(', ')}`);
            }
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [SingleEliminationEngine] –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${duration}ms`);
            
            return {
                success: true,
                matches,
                excludedParticipants: [], // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª—å—à–µ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                bracketMath,
                seedingInfo: {
                    type: seedingType,
                    participantsUsed: seededParticipants.length,
                    participantsExcluded: 0 // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
                },
                generationTime: duration,
                generatedAt: new Date().toISOString()
            };
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [SingleEliminationEngine] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${duration}ms):`, error.message);
            
            return {
                success: false,
                error: error.message,
                generationTime: duration,
                generatedAt: new Date().toISOString()
            };
        }
    }
    
    /**
     * üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {Object} bracketMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
     */
    static async _generateMatches(tournamentId, participants, bracketMath, options) {
        const matches = [];
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            let currentRoundParticipants = participants;
            
            // üÜï 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            if (bracketMath.needsPreliminaryRound) {
                const preliminaryMatches = await this._generatePreliminaryRound(
                    client,
                    tournamentId,
                    participants,
                    bracketMath
                );
                matches.push(...preliminaryMatches);
                console.log(`üéØ [_generateMatches] –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${preliminaryMatches.length}`);
            }
            
            // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–µ—Ä–≤–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
            const firstRoundMatches = await this._generateFirstRoundMatches(
                client,
                tournamentId,
                participants,
                bracketMath
            );
            matches.push(...firstRoundMatches);
            
            // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤
            const subsequentRoundMatches = await this._generateSubsequentRounds(
                client,
                tournamentId,
                firstRoundMatches,
                bracketMath
            );
            matches.push(...subsequentRoundMatches);
            
            // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            if (bracketMath.hasThirdPlaceMatch) {
                const thirdPlaceMatch = await this._generateThirdPlaceMatch(
                    client,
                    tournamentId,
                    matches,
                    bracketMath
                );
                matches.push(thirdPlaceMatch);
            }
            
            await client.query('COMMIT');
            
            console.log(`üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç—á–µ–π: ${matches.length}`);
            return matches;
            
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    /**
     * üÜï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (—Ä–∞—É–Ω–¥ 0)
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {Object} bracketMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @returns {Array} - –ú–∞—Ç—á–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
     */
    static async _generatePreliminaryRound(client, tournamentId, participants, bracketMath) {
        console.log(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞: ${bracketMath.preliminaryMatches} –º–∞—Ç—á–µ–π`);
        console.log(`üéØ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞: ${bracketMath.preliminaryParticipants}`);
        console.log(`üéØ –ü—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—É–Ω–¥: ${bracketMath.directAdvancers}`);
        
        const preliminaryMatches = [];
        const matchPromises = [];
        
        // üÜï –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
        // –ü–µ—Ä–≤—ã–µ directAdvancers —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—É–Ω–¥
        const preliminaryStartIndex = bracketMath.directAdvancers;
        
        for (let i = 0; i < bracketMath.preliminaryMatches; i++) {
            const participant1Index = preliminaryStartIndex + (i * 2);
            const participant2Index = preliminaryStartIndex + (i * 2) + 1;
            
            const participant1 = participants[participant1Index];
            const participant2 = participants[participant2Index];
            
            console.log(`üéØ [preliminaryRound] –ú–∞—Ç—á ${i + 1}: ${participant1?.name || participant1?.id} vs ${participant2?.name || participant2?.id}`);
            
            const matchData = {
                tournament_id: tournamentId,
                round: 0, // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ = 0
                match_number: i + 1,
                team1_id: participant1?.id || null,
                team2_id: participant2?.id || null,
                status: 'pending',
                bracket_type: 'winner'
            };
            
            const matchPromise = this._insertMatch(client, matchData);
            matchPromises.push(matchPromise);
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –≤—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const insertedMatches = await Promise.all(matchPromises);
        preliminaryMatches.push(...insertedMatches);
        
        console.log(`‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥: —Å–æ–∑–¥–∞–Ω–æ ${preliminaryMatches.length} –º–∞—Ç—á–µ–π`);
        return preliminaryMatches;
    }
    
    /**
     * ü•á –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—á–µ–π –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {Object} bracketMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @returns {Array} - –ú–∞—Ç—á–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
     */
    static async _generateFirstRoundMatches(client, tournamentId, participants, bracketMath) {
        console.log(`ü•á –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞: ${bracketMath.firstRoundMatches} –º–∞—Ç—á–µ–π`);
        console.log(`üéØ [firstRound] –õ–æ–≥–∏–∫–∞: —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–∫–∏–¥–∞—Ç—å ${bracketMath.directAdvancers} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –º–∞—Ç—á–∞–º, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç—ã –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π`);
        
        const firstRoundMatches = [];
        const matchPromises = [];
        
        if (bracketMath.needsPreliminaryRound) {
            // üÜï –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–∫–∏–¥—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø—Ä—è–º—É—é, –ø–æ –æ–¥–Ω–æ–º—É –≤ –∫–∞–∂–¥—ã–π –º–∞—Ç—á
            
            // –£—á–∞—Å—Ç–Ω–∏–∫–∏, –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä—è–º—É—é (–ø–µ—Ä–≤—ã–µ directAdvancers —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
            const directParticipants = participants.slice(0, bracketMath.directAdvancers);
            
            console.log(`üéØ [firstRound] –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ –Ω–∞–ø—Ä—è–º—É—é:`, directParticipants.map(p => p.name || p.id));
            
            for (let i = 0; i < bracketMath.firstRoundMatches; i++) {
                let participant1 = null;
                let participant2 = null;
                
                // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á –æ–¥–Ω–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, –ø—Ä–æ—Ö–æ–¥—è—â–∏–º –Ω–∞–ø—Ä—è–º—É—é
                if (i < directParticipants.length) {
                    participant1 = directParticipants[i];
                    console.log(`ü•á [firstRound] –ú–∞—Ç—á ${i + 1}: ${participant1?.name || participant1?.id} (–ø—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥) vs TBD (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ)`);
                } else {
                    console.log(`ü•á [firstRound] –ú–∞—Ç—á ${i + 1}: TBD (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ) vs TBD (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ)`);
                }
                
                const matchData = {
                    tournament_id: tournamentId,
                    round: 1,
                    match_number: i + 1,
                    team1_id: participant1?.id || null,
                    team2_id: participant2?.id || null, // –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
                    status: 'pending',
                    bracket_type: 'winner'
                };
                
                const matchPromise = this._insertMatch(client, matchData);
                matchPromises.push(matchPromise);
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            const totalMatches = bracketMath.firstRoundMatches;
            
            console.log(`üéØ [firstRound] –ë–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è ${totalMatches} –º–∞—Ç—á–µ–π`);
            
            for (let i = 0; i < totalMatches; i++) {
                const participant1 = participants[i * 2];
                const participant2 = participants[i * 2 + 1];
                
                console.log(`ü•á [firstRound] –ú–∞—Ç—á ${i + 1}: ${participant1?.name || participant1?.id} vs ${participant2?.name || participant2?.id}`);
                
                const matchData = {
                    tournament_id: tournamentId,
                    round: 1,
                    match_number: i + 1,
                    team1_id: participant1?.id || null,
                    team2_id: participant2?.id || null,
                    status: 'pending',
                    bracket_type: 'winner'
                };
                
                const matchPromise = this._insertMatch(client, matchData);
                matchPromises.push(matchPromise);
            }
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –≤—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const insertedMatches = await Promise.all(matchPromises);
        firstRoundMatches.push(...insertedMatches);
        
        console.log(`‚úÖ –ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥: —Å–æ–∑–¥–∞–Ω–æ ${firstRoundMatches.length} –º–∞—Ç—á–µ–π`);
        return firstRoundMatches;
    }
    
    /**
     * ‚è≠Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—á–µ–π –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} firstRoundMatches - –ú–∞—Ç—á–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
     * @param {Object} bracketMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @returns {Array} - –ú–∞—Ç—á–∏ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤
     */
    static async _generateSubsequentRounds(client, tournamentId, firstRoundMatches, bracketMath) {
        const allMatches = [...firstRoundMatches];
        let currentRoundMatches = firstRoundMatches;
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º mainRounds, –∏–Ω–∞—á–µ rounds
        const totalMainRounds = bracketMath.needsPreliminaryRound ? bracketMath.mainRounds : bracketMath.rounds;
        const startRound = 2; // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä–∞—É–Ω–¥–∞ 2 (—Ä–∞—É–Ω–¥ 1 —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω)
        
        console.log(`‚è≠Ô∏è [_generateSubsequentRounds] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—É–Ω–¥–æ–≤ ${startRound}-${totalMainRounds}`);
        console.log(`‚è≠Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º ${bracketMath.needsPreliminaryRound ? 'mainRounds' : 'rounds'}: ${totalMainRounds}`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—É–Ω–¥—ã –æ—Ç 2 –¥–æ —Ñ–∏–Ω–∞–ª–∞
        for (let round = startRound; round <= totalMainRounds; round++) {
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –≤ —Ä–∞—É–Ω–¥–µ
            const matchesInRound = Math.pow(2, totalMainRounds - round);
            console.log(`‚è≠Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—É–Ω–¥–∞ ${round}: ${matchesInRound} –º–∞—Ç—á–µ–π (—Ñ–æ—Ä–º—É–ª–∞: 2^(${totalMainRounds} - ${round}))`);
            
            const roundMatches = [];
            const matchPromises = [];
            
            for (let i = 0; i < matchesInRound; i++) {
                const sourceMatch1 = currentRoundMatches[i * 2];
                const sourceMatch2 = currentRoundMatches[i * 2 + 1];
                
                const matchData = {
                    tournament_id: tournamentId,
                    round: round,
                    match_number: i + 1,
                    team1_id: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è source –º–∞—Ç—á–µ–π
                    team2_id: null,
                    status: 'pending',
                    bracket_type: 'winner',
                    source_match1_id: sourceMatch1?.id || null,
                    source_match2_id: sourceMatch2?.id || null
                };
                
                const matchPromise = this._insertMatch(client, matchData);
                matchPromises.push(matchPromise);
            }
            
            const insertedMatches = await Promise.all(matchPromises);
            roundMatches.push(...insertedMatches);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º next_match_id –¥–ª—è –º–∞—Ç—á–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            await this._updateNextMatchIds(client, currentRoundMatches, roundMatches);
            
            allMatches.push(...roundMatches);
            currentRoundMatches = roundMatches;
            
            console.log(`‚úÖ –†–∞—É–Ω–¥ ${round}: —Å–æ–∑–¥–∞–Ω–æ ${roundMatches.length} –º–∞—Ç—á–µ–π`);
        }
        
        return allMatches.slice(firstRoundMatches.length); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏
    }
    
    /**
     * ü•â –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} allMatches - –í—Å–µ –º–∞—Ç—á–∏
     * @param {Object} bracketMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @returns {Object} - –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
     */
    static async _generateThirdPlaceMatch(client, tournamentId, allMatches, bracketMath) {
        console.log(`ü•â –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ`);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ (–º–∞—Ç—á–∏ —Ä–∞—É–Ω–¥–∞ rounds-1)
        const semifinalMatches = allMatches.filter(match => 
            match.round === bracketMath.rounds - 1 && 
            match.bracket_type === 'winner'
        );
        
        if (semifinalMatches.length !== 2) {
            throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –¥–ª—è –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ`);
        }
        
        const thirdPlaceMatchData = {
            tournament_id: tournamentId,
            round: bracketMath.rounds,
            match_number: 1,
            team1_id: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–æ–≤
            team2_id: null,
            status: 'pending',
            bracket_type: 'placement',
            is_third_place_match: true,
            source_match1_id: semifinalMatches[0].id,
            source_match2_id: semifinalMatches[1].id
        };
        
        const thirdPlaceMatch = await this._insertMatch(client, thirdPlaceMatchData);
        
        console.log(`‚úÖ –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω: ID ${thirdPlaceMatch.id}`);
        return thirdPlaceMatch;
    }
    
    /**
     * üíæ –í—Å—Ç–∞–≤–∫–∞ –º–∞—Ç—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @param {Object} matchData - –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
     * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞—Ç—á
     */
    static async _insertMatch(client, matchData) {
        const query = `
            INSERT INTO matches (
                tournament_id, round, match_number, team1_id, team2_id,
                status, bracket_type, is_third_place_match, 
                source_match1_id, source_match2_id
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
            RETURNING *
        `;
        
        const values = [
            matchData.tournament_id,
            matchData.round,
            matchData.match_number,
            matchData.team1_id,
            matchData.team2_id,
            matchData.status || 'pending',
            matchData.bracket_type || 'winner',
            matchData.is_third_place_match || false,
            matchData.source_match1_id,
            matchData.source_match2_id
        ];
        
        const result = await client.query(query, values);
        return result.rows[0];
    }
    
    /**
     * üîó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ next_match_id –¥–ª—è —Å–≤—è–∑–∏ –º–∞—Ç—á–µ–π
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @param {Array} currentRoundMatches - –ú–∞—Ç—á–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
     * @param {Array} nextRoundMatches - –ú–∞—Ç—á–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
     */
    static async _updateNextMatchIds(client, currentRoundMatches, nextRoundMatches) {
        const updatePromises = [];
        
        for (let i = 0; i < currentRoundMatches.length; i++) {
            const nextMatchIndex = Math.floor(i / 2);
            const nextMatch = nextRoundMatches[nextMatchIndex];
            
            if (nextMatch) {
                const updatePromise = client.query(
                    'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                    [nextMatch.id, currentRoundMatches[i].id]
                );
                updatePromises.push(updatePromise);
            }
        }
        
        await Promise.all(updatePromises);
    }
    
    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    static _validateInput(tournamentId, participants, options) {
        if (!Number.isInteger(tournamentId) || tournamentId <= 0) {
            throw new Error('ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º');
        }
        
        if (!Array.isArray(participants)) {
            throw new Error('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞');
        }
        
        if (participants.length < 2) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–º–∏–Ω–∏–º—É–º 2)');
        }
        
        if (participants.length > 1024) {
            throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 1024)');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants.forEach((participant, index) => {
            if (!participant || typeof participant !== 'object') {
                throw new Error(`–£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
            }
            
            if (!participant.id) {
                throw new Error(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${index + 1} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID`);
            }
        });
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ü–∏–π
        if (options.seedingType && !Object.values(SEEDING_TYPES).includes(options.seedingType)) {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${options.seedingType}`);
        }
    }
    
    /**
     * üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {Array} matches - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
     * @param {Object} bracketMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    static _validateGeneratedBracket(matches, bracketMath) {
        const errors = [];
        
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π
            const expectedTotal = bracketMath.totalMatchesWithThirdPlace;
            if (matches.length !== expectedTotal) {
                errors.push(`–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π: ${matches.length}, –æ–∂–∏–¥–∞–ª–æ—Å—å: ${expectedTotal}`);
            }
            
            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –ø–æ —Ä–∞—É–Ω–¥–∞–º
            const matchesByRound = {};
            matches.forEach(match => {
                if (!matchesByRound[match.round]) {
                    matchesByRound[match.round] = [];
                }
                matchesByRound[match.round].push(match);
            });
            
            // üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (bracketMath.needsPreliminaryRound) {
                const preliminaryMatches = matchesByRound[0]?.length || 0;
                if (preliminaryMatches !== bracketMath.preliminaryMatches) {
                    errors.push(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π ${preliminaryMatches}, –æ–∂–∏–¥–∞–ª–æ—Å—å: ${bracketMath.preliminaryMatches}`);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—É–Ω–¥—ã —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
            const mainRounds = bracketMath.needsPreliminaryRound ? bracketMath.mainRounds : bracketMath.rounds;
            
            for (let round = 1; round <= mainRounds; round++) {
                const roundMatches = matchesByRound[round]?.filter(m => !m.is_third_place_match) || [];
                const actualMatches = roundMatches.length;
                
                // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º firstRoundMatches –∏–∑ bracketMath
                let expectedMatches;
                if (round === 1) {
                    expectedMatches = bracketMath.firstRoundMatches;
                } else {
                    // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
                    expectedMatches = Math.pow(2, mainRounds - round);
                }
                
                if (actualMatches !== expectedMatches) {
                    errors.push(`–†–∞—É–Ω–¥ ${round}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π ${actualMatches}, –æ–∂–∏–¥–∞–ª–æ—Å—å: ${expectedMatches}`);
                }
            }
            
            // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
            const sourceMatchIds = new Set();
            const nextMatchIds = new Set();
            
            matches.forEach(match => {
                if (match.source_match1_id) sourceMatchIds.add(match.source_match1_id);
                if (match.source_match2_id) sourceMatchIds.add(match.source_match2_id);
                if (match.next_match_id) nextMatchIds.add(match.next_match_id);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ source –º–∞—Ç—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            const matchIds = new Set(matches.map(m => m.id));
            for (const sourceId of sourceMatchIds) {
                if (!matchIds.has(sourceId)) {
                    errors.push(`–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π source –º–∞—Ç—á: ${sourceId}`);
                }
            }
            
            // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
            if (bracketMath.hasThirdPlaceMatch) {
                const thirdPlaceMatches = matches.filter(m => m.is_third_place_match);
                if (thirdPlaceMatches.length !== 1) {
                    errors.push(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –∑–∞ 3-–µ –º–µ—Å—Ç–æ: ${thirdPlaceMatches.length}, –æ–∂–∏–¥–∞–ª–æ—Å—å: 1`);
                }
            }
            
            // üÜï 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø—Ä—è–º—É—é
            if (bracketMath.needsPreliminaryRound) {
                console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç—É—Ä–Ω–∏—Ä —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞—É–Ω–¥–æ–º`);
                console.log(`üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${bracketMath.preliminaryMatches}`);
                console.log(`üîç –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞: ${bracketMath.preliminaryParticipants}`);
                console.log(`üîç –ü—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—É–Ω–¥: ${bracketMath.directAdvancers}`);
            } else {
                console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞`);
            }
            
            console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ç–∫–∏: ${errors.length === 0 ? '–£–°–ü–ï–®–ù–û' : '–û–®–ò–ë–ö–ò'}`);
            
            return {
                isValid: errors.length === 0,
                errors,
                matchCount: matches.length,
                expectedMatchCount: expectedTotal,
                roundsValidated: Object.keys(matchesByRound).length
            };
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`, error);
            errors.push(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
            
            return {
                isValid: false,
                errors,
                validationError: error.message
            };
        }
    }
}

module.exports = {
    SingleEliminationEngine
}; 