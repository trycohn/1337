/**
 * ‚ö° –î–í–ò–ñ–û–ö SINGLE ELIMINATION
 * 
 * –û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Single Elimination
 * —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */

const { BracketMath } = require('../../utils/tournament/bracketMath');
const { SeedingFactory, SEEDING_TYPES } = require('../../utils/tournament/seedingAlgorithms');
const pool = require('../../db');

/**
 * üèÜ –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–≤–∏–∂–∫–∞ Single Elimination
 */
class SingleEliminationEngine {
    
    /**
     * üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥
     * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç—á–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
     */
    static async generateBracket(tournamentId, participants, options = {}) {
        const startTime = Date.now();
        console.log(`‚ö° [SingleEliminationEngine] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        console.log(`üë• [SingleEliminationEngine] –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}`);
        
        try {
            // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this._validateInput(tournamentId, participants, options);
            
            // 2. –†–∞—Å—á–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const bracketMath = BracketMath.calculateSingleEliminationParams(
                participants.length,  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                { thirdPlaceMatch: options.thirdPlaceMatch || false }
            );
            
            console.log(`üìä –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`, {
                originalParticipants: bracketMath.originalParticipantCount,
                actualParticipants: bracketMath.actualParticipants,
                excludedParticipants: bracketMath.excludedParticipants,
                needsPreliminaryRound: bracketMath.needsPreliminaryRound,
                preliminaryMatches: bracketMath.preliminaryMatches,
                preliminaryParticipants: bracketMath.preliminaryParticipants,
                directAdvancers: bracketMath.directAdvancers,
                totalMatches: bracketMath.totalMatches,
                rounds: bracketMath.rounds
            });
            
            // 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            const seedingType = options.seedingType || SEEDING_TYPES.RANDOM;
            console.log(`üé≤ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ ${seedingType} –¥–ª—è ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            
            const seededParticipants = SeedingFactory.createSeeding(
                seedingType,
                participants, // –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
                participants.length, // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –∏–º–µ–Ω–Ω–æ participants.length, –∞ –ù–ï bracketMath.actualParticipants
                options.seedingOptions || {}
            );
            
            // üîß –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (seededParticipants.length !== participants.length) {
                console.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ—Ç–µ—Ä—è–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!`);
                console.error(`   –ë—ã–ª–æ: ${participants.length}, —Å—Ç–∞–ª–æ: ${seededParticipants.length}`);
                throw new Error(`–ü–æ—Ç–µ—Ä—è–Ω ${participants.length - seededParticipants.length} —É—á–∞—Å—Ç–Ω–∏–∫(–æ–≤) –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏`);
            }
            
            console.log(`‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —Ç–∏–ø ${seedingType}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${seededParticipants.length} (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –í–°–ï)`);
            
            // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞—Ç—á–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bye-–ø—Ä–æ—Ö–æ–¥–æ–≤
            const matches = await this._generateMatches(
                tournamentId,
                seededParticipants,
                bracketMath,
                options
            );
            
            // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            const validationResult = this._validateGeneratedBracket(matches, bracketMath);
            if (!validationResult.isValid) {
                throw new Error(`–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∞: ${validationResult.errors.join(', ')}`);
            }
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [SingleEliminationEngine] –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${duration}ms`);
            console.log(`üéâ –ò–¢–û–ì: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${seededParticipants.length} –∏–∑ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ—Ç–µ—Ä—å: 0)`);
            
            return {
                success: true,
                matches,
                excludedParticipants: [], // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª—å—à–µ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                bracketMath,
                seedingInfo: {
                    type: seedingType,
                    participantsUsed: seededParticipants.length,
                    participantsExcluded: 0, // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
                    participantsOriginal: participants.length // üÜï –î–û–ë–ê–í–õ–ï–ù–û: –∏—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                },
                generationTime: duration,
                generatedAt: new Date().toISOString()
            };
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [SingleEliminationEngine] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${duration}ms):`, error.message);
            
            return {
                success: false,
                error: error.message,
                generationTime: duration,
                generatedAt: new Date().toISOString()
            };
        }
    }
    
    /**
     * üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {Object} bracketMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
     */
    static async _generateMatches(tournamentId, participants, bracketMath, options) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            console.log(`üèóÔ∏è [–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê] –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏`);
            console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, ${bracketMath.totalMatches} –º–∞—Ç—á–µ–π, ${bracketMath.rounds} —Ä–∞—É–Ω–¥–æ–≤`);
            
            // üÜï –®–ê–ì 1: –°–æ–∑–¥–∞–µ–º –í–°–ï –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—É—Å—Ç—ã–µ, –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤), –≤–∫–ª—é—á–∞—è –º–∞—Ç—á –∑–∞ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ
            const allMatches = await this._createAllTournamentMatches(client, tournamentId, bracketMath);
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${allMatches.length} –º–∞—Ç—á–µ–π –¥–ª—è –≤—Å–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞`);
            
            // üÜï –®–ê–ì 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï —Å–≤—è–∑–∏ next_match_id –∏ loser_next_match_id –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
            await this._establishAllConnections(client, allMatches, participants, bracketMath);
            console.log(`üîó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏`);
            
            // üÜï –®–ê–ì 3: –†–∞–∑–º–µ—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¢–û–õ–¨–ö–û –≤ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö
            await this._placeParticipantsInStartingMatches(client, allMatches, participants, bracketMath);
            console.log(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –≤ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö`);
            
            await client.query('COMMIT');
            
            console.log(`üéâ [–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê] –ü–æ–ª–Ω–∞—è —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${allMatches.length} –º–∞—Ç—á–µ–π`);
            return allMatches;
            
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    /**
     * üÜï –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –í–°–ï–• –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—É—Å—Ç—ã—Ö)
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞  
     * @param {Object} bracketMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @returns {Array} - –í—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async _createAllTournamentMatches(client, tournamentId, bracketMath) {
        console.log(`üèóÔ∏è [createAllTournamentMatches] –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞`);
        
        const allMatches = [];
        const matchPromises = [];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–∞—É–Ω–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
        const startRound = bracketMath.needsPreliminaryRound ? 0 : 1;
        const totalRounds = bracketMath.needsPreliminaryRound ? bracketMath.mainRounds : bracketMath.rounds;
        
        console.log(`üìä –°–æ–∑–¥–∞–µ–º —Ä–∞—É–Ω–¥—ã ${startRound} - ${totalRounds}`);
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        for (let round = startRound; round <= totalRounds; round++) {
            let matchesInRound;
            
            if (round === 0) {
                // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
                matchesInRound = bracketMath.preliminaryMatches;
            } else if (round === 1) {
                // –ü–µ—Ä–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—É–Ω–¥
                matchesInRound = bracketMath.firstRoundMatches;
            } else {
                // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞—É–Ω–¥—ã: —Ñ–æ—Ä–º—É–ª–∞ 2^(totalRounds - round)
                matchesInRound = Math.pow(2, totalRounds - round);
            }
            
            console.log(`üîß –†–∞—É–Ω–¥ ${round}: —Å–æ–∑–¥–∞–µ–º ${matchesInRound} –º–∞—Ç—á–µ–π`);
            
            // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            for (let matchNumber = 1; matchNumber <= matchesInRound; matchNumber++) {
                
                // üÜï –û–ü–†–ï–î–ï–õ–Ø–ï–ú –¢–ò–ü –ú–ê–¢–ß–ê: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π, –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–π
                let bracketType = 'winner';
                
                // –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á = –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥ (totalRounds) –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ç—á –≤ —Ä–∞—É–Ω–¥–µ
                if (round === totalRounds && matchesInRound === 1) {
                    bracketType = 'final';
                    console.log(`üèÜ –ú–∞—Ç—á ${matchNumber} –≤ —Ä–∞—É–Ω–¥–µ ${round} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –§–ò–ù–ê–õ–¨–ù–´–ô –º–∞—Ç—á (–∑–∞ 1-–µ –º–µ—Å—Ç–æ)`);
                }
                // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                // –ü–æ–ª—É—Ñ–∏–Ω–∞–ª = –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥ —Å 2 –º–∞—Ç—á–∞–º–∏ –ò —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ >= 8 (–Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–ª—É—Ñ–∏–Ω–∞–ª)
                else if (round === totalRounds - 1 && matchesInRound === 2 && bracketMath.originalParticipants >= 8) {
                    bracketType = 'semifinal';
                    console.log(`ü•à –ú–∞—Ç—á ${matchNumber} –≤ —Ä–∞—É–Ω–¥–µ ${round} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ü–û–õ–£–§–ò–ù–ê–õ–¨–ù–´–ô –º–∞—Ç—á`);
                }
                // üîß –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –í –º–∞–ª—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º –º–∞—Ç—á–µ–º
                else if (round === totalRounds - 1 && matchesInRound === 2 && bracketMath.originalParticipants < 8) {
                    bracketType = 'winner'; // –û—Å—Ç–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º –º–∞—Ç—á–µ–º
                    console.log(`üéØ –ú–∞—Ç—á ${matchNumber} –≤ —Ä–∞—É–Ω–¥–µ ${round} - –æ–±—ã—á–Ω—ã–π –º–∞—Ç—á (—Ç—É—Ä–Ω–∏—Ä —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∞)`);
                }
                
                const matchData = {
                    tournament_id: tournamentId,
                    round: round,
                    match_number: matchNumber,
                    team1_id: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –º–∞—Ç—á–µ–π
                    team2_id: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –º–∞—Ç—á–µ–π
                    status: 'pending',
                    bracket_type: bracketType // üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –º–∞—Ç—á–∞
                };
                
                const matchPromise = this._insertMatch(client, matchData);
                matchPromises.push(matchPromise);
            }
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –≤—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const insertedMatches = await Promise.all(matchPromises);
        allMatches.push(...insertedMatches);
        
        // üîß –î–û–ë–ê–í–õ–Ø–ï–ú: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        if (bracketMath.hasThirdPlaceMatch) {
            console.log(`ü•â –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –≤ —Ä–∞—É–Ω–¥–µ ${totalRounds}`);
            
            const thirdPlaceMatchData = {
                tournament_id: tournamentId,
                round: totalRounds, // –¢–æ—Ç –∂–µ —Ä–∞—É–Ω–¥, —á—Ç–æ –∏ —Ñ–∏–Ω–∞–ª
                match_number: 0, // –ú–µ–Ω—å—à–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–æ–º
                team1_id: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º–∏ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∞
                team2_id: null,
                status: 'pending',
                bracket_type: 'placement'
            };
            
            const thirdPlaceMatch = await this._insertMatch(client, thirdPlaceMatchData);
            allMatches.push(thirdPlaceMatch);
            
            console.log(`‚úÖ –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω: ID ${thirdPlaceMatch.id}, —Ä–∞—É–Ω–¥ ${totalRounds}, match_number 0`);
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥—É –∏ –Ω–æ–º–µ—Ä—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        allMatches.sort((a, b) => {
            if (a.round !== b.round) return a.round - b.round;
            return a.match_number - b.match_number;
        });
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞: ${allMatches.length} –º–∞—Ç—á–µ–π`);
        return allMatches;
    }
    
    /**
     * üÜï –®–ê–ì 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –í–°–ï–• —Å–≤—è–∑–µ–π next_match_id
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @param {Array} allMatches - –í—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Object} bracketMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     */
    static async _establishAllConnections(client, allMatches, participants, bracketMath) {
        console.log(`üîó [establishAllConnections] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏`);
        
        const updatePromises = [];
        
        // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–∫–ª—é—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ 3-–µ –º–µ—Å—Ç–æ –∏ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
        // –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –∏—Å–∫–ª—é—á–∞–µ–º –¥–ª—è –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, —Ç–∞–∫ –∫–∞–∫ —Å–≤—è–∑–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —è–≤–Ω–æ –≤ —Å–µ–∫—Ü–∏–∏ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
        const standardMatches = allMatches.filter(match => {
            if (match.bracket_type === 'placement') return false; // –í—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
            if (match.bracket_type === 'semifinal') return false; // –í—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
            if (match.bracket_type === 'final') return false; // –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∏–Ω–∞–ª –¥–ª—è –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ - —Å–≤—è–∑–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —è–≤–Ω–æ
            return true;
        });
        
        console.log(`üîß –ò—Å–∫–ª—é—á–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º ${standardMatches.length} –∏–∑ ${allMatches.length} –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π`);
        console.log(`üîß –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —è–≤–Ω–æ –≤ —Å–µ–∫—Ü–∏–∏ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ`);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        const matchesByRound = {};
        standardMatches.forEach(match => {
            if (!matchesByRound[match.round]) {
                matchesByRound[match.round] = [];
            }
            matchesByRound[match.round].push(match);
        });
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—É–Ω–¥–æ–≤
        const startRound = bracketMath.needsPreliminaryRound ? 0 : 1;
        const totalRounds = bracketMath.needsPreliminaryRound ? bracketMath.mainRounds : bracketMath.rounds;
        
        console.log(`üîó –°–≤—è–∑—ã–≤–∞–µ–º —Ä–∞—É–Ω–¥—ã ${startRound} - ${totalRounds - 1} —Å –∏—Ö —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ä–∞—É–Ω–¥–∞–º–∏ (–±–µ–∑ –º–∞—Ç—á–µ–π –∑–∞ 3-–µ –º–µ—Å—Ç–æ)`);
        
        // –°–≤—è–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º
        for (let round = startRound; round < totalRounds; round++) {
            const currentRoundMatches = matchesByRound[round] || [];
            let nextRoundMatches = matchesByRound[round + 1] || [];
            
            // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –ø—É—Å—Ç, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥, –≤–∫–ª—é—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
            if (nextRoundMatches.length === 0 && round + 1 <= totalRounds) {
                const finalMatches = allMatches.filter(match => 
                    match.round === round + 1 && match.bracket_type === 'final'
                );
                if (finalMatches.length > 0) {
                    nextRoundMatches = finalMatches;
                    console.log(`üîß –î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞ ${round} –≤–∫–ª—é—á–µ–Ω—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏: ${finalMatches.length} —à—Ç.`);
                }
            }
            
            console.log(`üîó –†–∞—É–Ω–¥ ${round} -> –†–∞—É–Ω–¥ ${round + 1}: ${currentRoundMatches.length} -> ${nextRoundMatches.length} –º–∞—Ç—á–µ–π`);
            
            if (round === 0 && bracketMath.needsPreliminaryRound) {
                // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
                await this._linkPreliminaryToFirstRound_v3(client, currentRoundMatches, nextRoundMatches, participants, bracketMath, updatePromises);
            } else {
                // üîß –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤
                await this._linkStandardRounds(client, currentRoundMatches, nextRoundMatches, updatePromises);
            }
        }
        
        // üîß –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ —Å –º–∞—Ç—á–µ–º –∑–∞ 3-–µ –º–µ—Å—Ç–æ
        if (bracketMath.hasThirdPlaceMatch) {
            console.log(`ü•â –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å –º–∞—Ç—á–µ–º –∑–∞ 3-–µ –º–µ—Å—Ç–æ`);
            
            // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á –∑–∞ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ
            const thirdPlaceMatch = allMatches.find(match => match.bracket_type === 'placement');
            
            // üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á–∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            // –í –±–æ–ª—å—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö (8+ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) - —ç—Ç–æ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ (bracket_type = 'semifinal')
            // –í –º–∞–ª—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö (< 8 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) - —ç—Ç–æ –æ–±—ã—á–Ω—ã–µ –º–∞—Ç—á–∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            let semifinalMatches;
            
            if (bracketMath.originalParticipants >= 8) {
                // –ë–æ–ª—å—à–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã: –∏—â–µ–º —è–≤–Ω–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
                semifinalMatches = allMatches.filter(match => match.bracket_type === 'semifinal');
                console.log(`üîç –ë–æ–ª—å—à–æ–π —Ç—É—Ä–Ω–∏—Ä: –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏: ${semifinalMatches.length} —à—Ç. (–ø–æ bracket_type = 'semifinal')`);
            } else {
                // –ú–∞–ª—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã: –∏—â–µ–º –º–∞—Ç—á–∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—É–Ω–¥–∞ —Å bracket_type = 'winner'
                const semifinalRound = totalRounds - 1;
                semifinalMatches = allMatches.filter(match => 
                    match.round === semifinalRound && 
                    match.bracket_type === 'winner'
                );
                console.log(`üîç –ú–∞–ª—ã–π —Ç—É—Ä–Ω–∏—Ä: –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ç—á–∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—É–Ω–¥–∞: ${semifinalMatches.length} —à—Ç. –≤ —Ä–∞—É–Ω–¥–µ ${semifinalRound} (bracket_type = 'winner')`);
            }
            
            if (thirdPlaceMatch && semifinalMatches.length === 2) {
                console.log(`üéØ –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ: ID ${thirdPlaceMatch.id}, —Ä–∞—É–Ω–¥ ${thirdPlaceMatch.round}, match_number ${thirdPlaceMatch.match_number}`);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loser_next_match_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—É–Ω–¥–∞
                for (const semifinalMatch of semifinalMatches) {
                    const updatePromise = client.query(
                        'UPDATE matches SET loser_next_match_id = $1 WHERE id = $2',
                        [thirdPlaceMatch.id, semifinalMatch.id]
                    );
                    updatePromises.push(updatePromise);
                    
                    console.log(`üîó –ú–∞—Ç—á ${semifinalMatch.id} (M${semifinalMatch.match_number}) (–ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π) -> –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ ${thirdPlaceMatch.id}`);
                }
                
                // üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ —Å —Ñ–∏–Ω–∞–ª–æ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
                if (bracketMath.originalParticipants >= 8) {
                    const finalMatch = allMatches.find(match => match.bracket_type === 'final');
                    if (finalMatch) {
                        console.log(`üèÜ –ù–∞–π–¥–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á: ID ${finalMatch.id}, —Ä–∞—É–Ω–¥ ${finalMatch.round}`);
                        
                        for (const semifinalMatch of semifinalMatches) {
                            const updatePromise = client.query(
                                'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                                [finalMatch.id, semifinalMatch.id]
                            );
                            updatePromises.push(updatePromise);
                            
                            console.log(`üîó –ü–æ–ª—É—Ñ–∏–Ω–∞–ª ${semifinalMatch.id} (M${semifinalMatch.match_number}) (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å) -> –§–∏–Ω–∞–ª ${finalMatch.id}`);
                        }
                    } else {
                        console.error(`‚ùå –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
                    }
                } else {
                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –í –º–∞–ª—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö —Ç–∞–∫–∂–µ —è–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ —Å —Ñ–∏–Ω–∞–ª–æ–º
                    const finalMatch = allMatches.find(match => match.bracket_type === 'final');
                    if (finalMatch) {
                        console.log(`üèÜ –ú–∞–ª—ã–π —Ç—É—Ä–Ω–∏—Ä: –Ω–∞–π–¥–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á ID ${finalMatch.id}, —Ä–∞—É–Ω–¥ ${finalMatch.round}`);
                        
                        for (const semifinalMatch of semifinalMatches) {
                            const updatePromise = client.query(
                                'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                                [finalMatch.id, semifinalMatch.id]
                            );
                            updatePromises.push(updatePromise);
                            
                            console.log(`üîó –ú–∞—Ç—á ${semifinalMatch.id} (M${semifinalMatch.match_number}) (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å) -> –§–∏–Ω–∞–ª ${finalMatch.id}`);
                        }
                    } else {
                        console.error(`‚ùå –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ª–æ–º —Ç—É—Ä–Ω–∏—Ä–µ!`);
                    }
                }
            } else {
                if (!thirdPlaceMatch) {
                    console.error(`‚ùå –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
                }
                if (semifinalMatches.length !== 2) {
                    console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—É–Ω–¥–∞: ${semifinalMatches.length}, –æ–∂–∏–¥–∞–ª–æ—Å—å: 2`);
                }
            }
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π
        if (updatePromises.length > 0) {
            await Promise.all(updatePromises);
            console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${updatePromises.length} —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏`);
        }
    }
    
    /**
     * üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ —Å –ø–µ—Ä–≤—ã–º —Ä–∞—É–Ω–¥–æ–º (v4)
     * –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —É—á–∏—Ç—ã–≤–∞–µ—Ç —á—Ç–æ DirectAdvancers –∑–∞–ø–æ–ª–Ω—è—é—Ç –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
     * @private
     */
    static async _linkPreliminaryToFirstRound_v3(client, preliminaryMatches, firstRoundMatches, participants, bracketMath, updatePromises) {
        console.log(`üéØ [linkPreliminaryToFirstRound_v4] ${preliminaryMatches.length} –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö -> ${firstRoundMatches.length} –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞`);
        console.log(`üìä DirectAdvancers: ${bracketMath.directAdvancers}, Preliminary participants: ${bracketMath.preliminaryParticipants}`);
        
        // üîß –®–ê–ì 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω —Ä–∞–∑–º–µ—â–µ–Ω–∏—è DirectAdvancers –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏–∫–µ –≤ _placeParticipantsInStartingMatches)
        const directAdvancers = participants.slice(0, bracketMath.directAdvancers);
        console.log(`üë• DirectAdvancers: ${directAdvancers.map(p => p.name || p.id).join(', ')}`);
        
        // üîß –®–ê–ì 2: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ DirectAdvancers –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
        // DirectAdvancers –∑–∞–ø–æ–ª–Ω—è—é—Ç –ø–æ–∑–∏—Ü–∏–∏: team1, team2, team1 —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞, team2 —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞ –∏ —Ç.–¥.
        const occupancyPlan = [];
        let directAdvancerIndex = 0;
        
        for (let matchIndex = 0; matchIndex < firstRoundMatches.length; matchIndex++) {
            const match = firstRoundMatches[matchIndex];
            const plan = {
                matchId: match.id,
                matchNumber: match.match_number,
                team1_directAdvancer: null,
                team2_directAdvancer: null,
                team1_needsWinner: false,
                team2_needsWinner: false
            };
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º team1_id DirectAdvancer'–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (directAdvancerIndex < directAdvancers.length) {
                plan.team1_directAdvancer = directAdvancers[directAdvancerIndex];
                directAdvancerIndex++;
            } else {
                plan.team1_needsWinner = true;
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º team2_id DirectAdvancer'–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (directAdvancerIndex < directAdvancers.length) {
                plan.team2_directAdvancer = directAdvancers[directAdvancerIndex];
                directAdvancerIndex++;
            } else {
                plan.team2_needsWinner = true;
            }
            
            occupancyPlan.push(plan);
            
            console.log(`üéØ –ú–∞—Ç—á ${match.id} (M${match.match_number}):`);
            console.log(`   Team1: ${plan.team1_directAdvancer ? plan.team1_directAdvancer.name || plan.team1_directAdvancer.id : '–ù—É–∂–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ'}`);
            console.log(`   Team2: ${plan.team2_directAdvancer ? plan.team2_directAdvancer.name || plan.team2_directAdvancer.id : '–ù—É–∂–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ'}`);
        }
        
        // üîß –®–ê–ì 3: –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        let preliminaryMatchIndex = 0;
        
        for (let matchIndex = 0; matchIndex < occupancyPlan.length && preliminaryMatchIndex < preliminaryMatches.length; matchIndex++) {
            const plan = occupancyPlan[matchIndex];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º team2_id (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º team2, –ø–æ—Ç–æ–º team1 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if (plan.team2_needsWinner && preliminaryMatchIndex < preliminaryMatches.length) {
                const preliminaryMatch = preliminaryMatches[preliminaryMatchIndex];
                
                const updateQuery = 'UPDATE matches SET next_match_id = $1 WHERE id = $2';
                const updatePromise = client.query(updateQuery, [plan.matchId, preliminaryMatch.id]);
                updatePromises.push(updatePromise);
                
                console.log(`üéØ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á ${preliminaryMatch.id} (M${preliminaryMatch.match_number}) -> –ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –º–∞—Ç—á ${plan.matchId} (M${plan.matchNumber}) [team2_id]`);
                
                preliminaryMatchIndex++;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º team1_id (–µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏)
            if (plan.team1_needsWinner && preliminaryMatchIndex < preliminaryMatches.length) {
                const preliminaryMatch = preliminaryMatches[preliminaryMatchIndex];
                
                const updateQuery = 'UPDATE matches SET next_match_id = $1 WHERE id = $2';
                const updatePromise = client.query(updateQuery, [plan.matchId, preliminaryMatch.id]);
                updatePromises.push(updatePromise);
                
                console.log(`üéØ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á ${preliminaryMatch.id} (M${preliminaryMatch.match_number}) -> –ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –º–∞—Ç—á ${plan.matchId} (M${plan.matchNumber}) [team1_id]`);
                
                preliminaryMatchIndex++;
            }
        }
        
        // üîß –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ —Å–≤—è–∑–∞–Ω—ã
        if (preliminaryMatchIndex !== preliminaryMatches.length) {
            console.error(`‚ùå –û–®–ò–ë–ö–ê: –°–≤—è–∑–∞–Ω–æ ${preliminaryMatchIndex} –∏–∑ ${preliminaryMatches.length} –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π`);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏: —Å–≤—è–∑–∞–Ω–æ ${preliminaryMatchIndex} –∏–∑ ${preliminaryMatches.length}`);
        }
        
        console.log(`‚úÖ –°–≤—è–∑–∞–Ω–æ ${preliminaryMatches.length} –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å –ø–µ—Ä–≤—ã–º —Ä–∞—É–Ω–¥–æ–º (—É—á—Ç–µ–Ω—ã DirectAdvancers)`);
    }
    
    /**
     * üîß –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤
     * @private
     */
    static async _linkStandardRounds(client, currentRoundMatches, nextRoundMatches, updatePromises) {
        console.log(`üîó [linkStandardRounds] ${currentRoundMatches.length} -> ${nextRoundMatches.length} –º–∞—Ç—á–µ–π`);
        
        // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–∞—É–Ω–¥—É –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
        // –ò—Å–∫–ª—é—á–∞–µ–º –µ–≥–æ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á
        const validNextMatches = nextRoundMatches.filter(match => match.bracket_type !== 'placement');
        
        if (validNextMatches.length !== nextRoundMatches.length) {
            console.log(`üîß –ò—Å–∫–ª—é—á–µ–Ω –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è: ${validNextMatches.length} –∏–∑ ${nextRoundMatches.length} –º–∞—Ç—á–µ–π`);
        }
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∫–∞–∂–¥—ã–µ 2 –º–∞—Ç—á–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤–µ–¥—É—Ç –∫ 1 –º–∞—Ç—á—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        for (let i = 0; i < currentRoundMatches.length; i++) {
            const currentMatch = currentRoundMatches[i];
            const nextMatchIndex = Math.floor(i / 2);
            const nextMatch = validNextMatches[nextMatchIndex]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
            
            if (nextMatch) {
                const updatePromise = client.query(
                    'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                    [nextMatch.id, currentMatch.id]
                );
                updatePromises.push(updatePromise);
                
                console.log(`üîó –ú–∞—Ç—á ${currentMatch.id} (R${currentMatch.round}M${currentMatch.match_number}) -> –ú–∞—Ç—á ${nextMatch.id} (R${nextMatch.round}M${nextMatch.match_number}) [${nextMatch.bracket_type}]`);
            } else {
                console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –º–∞—Ç—á –¥–ª—è ${currentMatch.id} (index: ${nextMatchIndex})`);
            }
        }
    }
    
    /**
     * üÜï –®–ê–ì 3: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @param {Array} allMatches - –í—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Object} bracketMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     */
    static async _placeParticipantsInStartingMatches(client, allMatches, participants, bracketMath) {
        console.log(`üë• [placeParticipantsInStartingMatches] –†–∞–∑–º–µ—â–µ–Ω–∏–µ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        console.log(`üìä BracketMath: directAdvancers=${bracketMath.directAdvancers}, preliminaryParticipants=${bracketMath.preliminaryParticipants}`);
        
        // üîß –î–û–ë–ê–í–õ–Ø–ï–ú –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í
        console.log(`üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:`);
        participants.forEach((p, index) => {
            console.log(`   ${index + 1}. ID: ${p.id}, Name: ${p.name || p.username || 'Unknown'}`);
        });
        
        // üîß –ò–°–ö–õ–Æ–ß–ê–ï–ú —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –∏–∑ –ª–æ–≥–∏–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        // –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –∏—Å–∫–ª—é—á–∞–µ–º –¥–ª—è –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω—ã—Ö –º–∞—Ç—á–∞—Ö
        const standardMatches = allMatches.filter(match => {
            if (match.bracket_type === 'placement') return false; // –í—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
            if (match.bracket_type === 'semifinal') return false; // –í—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
            if (match.bracket_type === 'final') return false; // –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∏–Ω–∞–ª –¥–ª—è –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            return true;
        });
        
        console.log(`üîß –ò—Å–∫–ª—é—á–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º ${standardMatches.length} –∏–∑ ${allMatches.length} –º–∞—Ç—á–µ–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è`);
        console.log(`üîß –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω—ã—Ö –º–∞—Ç—á–∞—Ö, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
        
        const updatePromises = [];
        
        if (bracketMath.needsPreliminaryRound) {
            // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –° –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ú –†–ê–£–ù–î–û–ú
            console.log(`üéØ –¢—É—Ä–Ω–∏—Ä —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞—É–Ω–¥–æ–º`);
            console.log(`üìä DirectAdvancers: ${bracketMath.directAdvancers}, Preliminary: ${bracketMath.preliminaryParticipants}`);
            
            // 1. –†–∞–∑–º–µ—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø—Ä—è–º—É—é, –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ (–°–û–ì–õ–ê–°–û–í–ê–ù–ù–û –° –õ–û–ì–ò–ö–û–ô –°–í–Ø–ó–´–í–ê–ù–ò–Ø)
            const directParticipants = participants.slice(0, bracketMath.directAdvancers);
            let firstRoundMatches = standardMatches.filter(m => m.round === 1);
            
            // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—Ç—á–µ–π –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö (–æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏), –≤–∫–ª—é—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
            if (firstRoundMatches.length === 0) {
                const finalMatches = allMatches.filter(m => m.round === 1 && m.bracket_type === 'final');
                if (finalMatches.length > 0) {
                    firstRoundMatches = finalMatches;
                    console.log(`üîß –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è DirectAdvancers –≤–∫–ª—é—á–µ–Ω—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏: ${finalMatches.length} —à—Ç.`);
                }
            }
            
            console.log(`üë§ DIRECT PARTICIPANTS (–ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥):`);
            directParticipants.forEach((p, index) => {
                console.log(`   ${index + 1}. ID: ${p.id}, Name: ${p.name || p.username || 'Unknown'}`);
            });
            
            console.log(`üéØ –†–∞–∑–º–µ—â–∞–µ–º ${directParticipants.length} DirectAdvancers –≤ ${firstRoundMatches.length} –º–∞—Ç—á–∞—Ö –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞:`);
            
            // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: DirectAdvancers –∑–∞–ø–æ–ª–Ω—è—é—Ç –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ
            let directAdvancerIndex = 0;
            
            for (let i = 0; i < firstRoundMatches.length && directAdvancerIndex < directParticipants.length; i++) {
                const match = firstRoundMatches[i];
                
                console.log(`ü•ä –ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –º–∞—Ç—á ${match.id} (M${match.match_number}) [${match.bracket_type}]:`);
                
                // –†–∞–∑–º–µ—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ DirectAdvancer –≤ team1_id
                if (directAdvancerIndex < directParticipants.length) {
                    const participant = directParticipants[directAdvancerIndex];
                    const updatePromise = client.query(
                        'UPDATE matches SET team1_id = $1 WHERE id = $2',
                        [participant.id, match.id]
                    );
                    updatePromises.push(updatePromise);
                    console.log(`   ‚úÖ Team1: ${participant.name || participant.id} (DirectAdvancer ${directAdvancerIndex + 1})`);
                    directAdvancerIndex++;
                }
                
                // –†–∞–∑–º–µ—â–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ DirectAdvancer –≤ team2_id (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (directAdvancerIndex < directParticipants.length) {
                    const participant = directParticipants[directAdvancerIndex];
                    const updatePromise = client.query(
                        'UPDATE matches SET team2_id = $1 WHERE id = $2',
                        [participant.id, match.id]
                    );
                    updatePromises.push(updatePromise);
                    console.log(`   ‚úÖ Team2: ${participant.name || participant.id} (DirectAdvancer ${directAdvancerIndex + 1})`);
                    directAdvancerIndex++;
                } else {
                    console.log(`   üîÑ Team2: –ó–∞–π–º–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞`);
                }
            }
            
            // 2. –†–∞–∑–º–µ—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
            const preliminaryParticipants = participants.slice(bracketMath.directAdvancers);
            const preliminaryMatches = standardMatches.filter(m => m.round === 0);
            
            console.log(`\nüî• PRELIMINARY PARTICIPANTS (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥):`);
            preliminaryParticipants.forEach((p, index) => {
                console.log(`   ${index + 1}. ID: ${p.id}, Name: ${p.name || p.username || 'Unknown'}`);
            });
            
            console.log(`\nü•ä –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ ${preliminaryMatches.length} –º–∞—Ç—á–∞—Ö –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞:`);
            
            for (let i = 0; i < preliminaryMatches.length; i++) {
                const match = preliminaryMatches[i];
                const participant1 = preliminaryParticipants[i * 2];
                const participant2 = preliminaryParticipants[i * 2 + 1];
                
                console.log(`üî• –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á ${match.id} (M${match.match_number}):`);
                
                if (participant1) {
                    const updatePromise1 = client.query(
                        'UPDATE matches SET team1_id = $1 WHERE id = $2',
                        [participant1.id, match.id]
                    );
                    updatePromises.push(updatePromise1);
                    console.log(`   üë§ Team1: ${participant1.name || participant1.id} (ID: ${participant1.id})`);
                } else {
                    console.log(`   ‚ùå Team1: –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
                }
                
                if (participant2) {
                    const updatePromise2 = client.query(
                        'UPDATE matches SET team2_id = $1 WHERE id = $2',
                        [participant2.id, match.id]
                    );
                    updatePromises.push(updatePromise2);
                    console.log(`   üë§ Team2: ${participant2.name || participant2.id} (ID: ${participant2.id})`);
                } else {
                    console.log(`   ‚ùå Team2: –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
                }
            }
            
        } else {
            // üéØ –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–ï–ó –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –†–ê–£–ù–î–ê
            console.log(`üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞`);
            
            const firstRoundMatches = standardMatches.filter(m => m.round === 1);
            
            console.log(`üìã –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ ${firstRoundMatches.length} –º–∞—Ç—á–∞—Ö –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞:`);
            
            for (let i = 0; i < firstRoundMatches.length; i++) {
                const match = firstRoundMatches[i];
                const participant1 = participants[i * 2];
                const participant2 = participants[i * 2 + 1];
                
                console.log(`ü•ä –ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –º–∞—Ç—á ${match.id} (M${match.match_number}):`);
                
                if (participant1) {
                    const updatePromise1 = client.query(
                        'UPDATE matches SET team1_id = $1 WHERE id = $2',
                        [participant1.id, match.id]
                    );
                    updatePromises.push(updatePromise1);
                    console.log(`   üë§ Team1: ${participant1.name || participant1.id} (ID: ${participant1.id})`);
                } else {
                    console.log(`   ‚ùå Team1: –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
                }
                
                if (participant2) {
                    const updatePromise2 = client.query(
                        'UPDATE matches SET team2_id = $1 WHERE id = $2',
                        [participant2.id, match.id]
                    );
                    updatePromises.push(updatePromise2);
                    console.log(`   üë§ Team2: ${participant2.name || participant2.id} (ID: ${participant2.id})`);
                } else {
                    console.log(`   ‚ùå Team2: –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
                }
            }
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (updatePromises.length > 0) {
            await Promise.all(updatePromises);
            console.log(`‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ ${updatePromises.length / 2} –º–∞—Ç—á–∞—Ö`);
        }
    }
    
    /**
     * üíæ –í—Å—Ç–∞–≤–∫–∞ –º–∞—Ç—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @param {Object} matchData - –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
     * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω—ã–π –º–∞—Ç—á
     */
    static async _insertMatch(client, matchData) {
        const query = `
            INSERT INTO matches (
                tournament_id, round, match_number, team1_id, team2_id,
                status, bracket_type
            ) VALUES ($1, $2, $3, $4, $5, $6, $7)
            RETURNING *
        `;
        
        const values = [
            matchData.tournament_id,
            matchData.round,
            matchData.match_number,
            matchData.team1_id,
            matchData.team2_id,
            matchData.status || 'pending',
            matchData.bracket_type || 'winner'
        ];
        
        const result = await client.query(query, values);
        return result.rows[0];
    }
    
    /**
     * üîó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ next_match_id –¥–ª—è —Å–≤—è–∑–∏ –º–∞—Ç—á–µ–π
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @param {Array} currentRoundMatches - –ú–∞—Ç—á–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
     * @param {Array} nextRoundMatches - –ú–∞—Ç—á–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
     */
    static async _updateNextMatchIds(client, currentRoundMatches, nextRoundMatches) {
        const updatePromises = [];
        
        for (let i = 0; i < currentRoundMatches.length; i++) {
            const nextMatchIndex = Math.floor(i / 2);
            const nextMatch = nextRoundMatches[nextMatchIndex];
            
            if (nextMatch) {
                const updatePromise = client.query(
                    'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                    [nextMatch.id, currentRoundMatches[i].id]
                );
                updatePromises.push(updatePromise);
            }
        }
        
        await Promise.all(updatePromises);
    }
    
    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {Object} options - –û–ø—Ü–∏–∏
     */
    static _validateInput(tournamentId, participants, options) {
        if (!Number.isInteger(tournamentId) || tournamentId <= 0) {
            throw new Error('ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º');
        }
        
        if (!Array.isArray(participants)) {
            throw new Error('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞');
        }
        
        if (participants.length < 2) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–º–∏–Ω–∏–º—É–º 2)');
        }
        
        if (participants.length > 1024) {
            throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 1024)');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants.forEach((participant, index) => {
            if (!participant || typeof participant !== 'object') {
                throw new Error(`–£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
            }
            
            if (!participant.id) {
                throw new Error(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${index + 1} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID`);
            }
        });
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—Ü–∏–π
        if (options.seedingType && !Object.values(SEEDING_TYPES).includes(options.seedingType)) {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${options.seedingType}`);
        }
    }
    
    /**
     * üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {Array} matches - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
     * @param {Object} bracketMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    static _validateGeneratedBracket(matches, bracketMath) {
        const errors = [];
        
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π
            const expectedTotal = bracketMath.totalMatchesWithThirdPlace;
            if (matches.length !== expectedTotal) {
                errors.push(`–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π: ${matches.length}, –æ–∂–∏–¥–∞–ª–æ—Å—å: ${expectedTotal}`);
            }
            
            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –ø–æ —Ä–∞—É–Ω–¥–∞–º
            const matchesByRound = {};
            matches.forEach(match => {
                if (!matchesByRound[match.round]) {
                    matchesByRound[match.round] = [];
                }
                matchesByRound[match.round].push(match);
            });
            
            // üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (bracketMath.needsPreliminaryRound) {
                const preliminaryMatches = matchesByRound[0]?.length || 0;
                if (preliminaryMatches !== bracketMath.preliminaryMatches) {
                    errors.push(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π ${preliminaryMatches}, –æ–∂–∏–¥–∞–ª–æ—Å—å: ${bracketMath.preliminaryMatches}`);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—É–Ω–¥—ã —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
            const mainRounds = bracketMath.needsPreliminaryRound ? bracketMath.mainRounds : bracketMath.rounds;
            
            for (let round = 1; round <= mainRounds; round++) {
                const roundMatches = matchesByRound[round]?.filter(m => m.bracket_type !== 'placement') || [];
                const actualMatches = roundMatches.length;
                
                // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º firstRoundMatches –∏–∑ bracketMath
                let expectedMatches;
                if (round === 1) {
                    expectedMatches = bracketMath.firstRoundMatches;
                } else {
                    // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
                    expectedMatches = Math.pow(2, mainRounds - round);
                }
                
                if (actualMatches !== expectedMatches) {
                    errors.push(`–†–∞—É–Ω–¥ ${round}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π ${actualMatches}, –æ–∂–∏–¥–∞–ª–æ—Å—å: ${expectedMatches}`);
                }
            }
            
            // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
            const sourceMatchIds = new Set();
            const nextMatchIds = new Set();
            
            matches.forEach(match => {
                if (match.source_match1_id) sourceMatchIds.add(match.source_match1_id);
                if (match.source_match2_id) sourceMatchIds.add(match.source_match2_id);
                if (match.next_match_id) nextMatchIds.add(match.next_match_id);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ source –º–∞—Ç—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            const matchIds = new Set(matches.map(m => m.id));
            for (const sourceId of sourceMatchIds) {
                if (!matchIds.has(sourceId)) {
                    errors.push(`–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π source –º–∞—Ç—á: ${sourceId}`);
                }
            }
            
            // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
            if (bracketMath.hasThirdPlaceMatch) {
                const thirdPlaceMatches = matches.filter(m => m.bracket_type === 'placement');
                if (thirdPlaceMatches.length !== 1) {
                    errors.push(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –∑–∞ 3-–µ –º–µ—Å—Ç–æ: ${thirdPlaceMatches.length}, –æ–∂–∏–¥–∞–ª–æ—Å—å: 1`);
                }
            }
            
            // üÜï 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø—Ä—è–º—É—é
            if (bracketMath.needsPreliminaryRound) {
                console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç—É—Ä–Ω–∏—Ä —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞—É–Ω–¥–æ–º`);
                console.log(`üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${bracketMath.preliminaryMatches}`);
                console.log(`üîç –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞: ${bracketMath.preliminaryParticipants}`);
                console.log(`üîç –ü—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—É–Ω–¥: ${bracketMath.directAdvancers}`);
            } else {
                console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞`);
            }
            
            console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ç–∫–∏: ${errors.length === 0 ? '–£–°–ü–ï–®–ù–û' : '–û–®–ò–ë–ö–ò'}`);
            
            return {
                isValid: errors.length === 0,
                errors,
                matchCount: matches.length,
                expectedMatchCount: expectedTotal,
                roundsValidated: Object.keys(matchesByRound).length
            };
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`, error);
            errors.push(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
            
            return {
                isValid: false,
                errors,
                validationError: error.message
            };
        }
    }
}

module.exports = {
    SingleEliminationEngine
}; 