const pool = require('../../db');
const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const TeamRepository = require('../../repositories/tournament/TeamRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');

class MixTeamService {
    /**
     * üéØ –†–ê–°–ß–ï–¢ –°–†–ï–î–ù–ï–ì–û –†–ï–ô–¢–ò–ù–ì–ê –ö–û–ú–ê–ù–î–´
     */
    static calculateTeamAverageRating(members, ratingType) {
        if (!members || members.length === 0) return 0;
        
        const ratings = members.map(member => this.normalizeParticipantRating(member, ratingType))
                              .filter(rating => !isNaN(rating) && rating > 0);
        
        if (ratings.length === 0) return ratingType === 'faceit' ? 1000 : 5;
        
        const average = ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length;
        return Math.round(average);
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
     */
    static normalizeParticipantRating(participant, ratingType) {
        let rating;
        
        if (ratingType === 'faceit') {
            // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ –î–õ–Ø FACEIT (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º):
            // 1. –ö–∞—Å—Ç–æ–º–Ω—ã–π ELO —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–µ—Å–ª–∏ –±—ã–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥)
            // 2. ELO –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // 3. FACEIT —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
            // 4. –î–µ—Ñ–æ–ª—Ç 1000
            
            if (participant.faceit_elo && !isNaN(parseInt(participant.faceit_elo)) && parseInt(participant.faceit_elo) > 0) {
                rating = parseInt(participant.faceit_elo);
            } else if (participant.user_faceit_elo && !isNaN(parseInt(participant.user_faceit_elo)) && parseInt(participant.user_faceit_elo) > 0) {
                rating = parseInt(participant.user_faceit_elo);
            } else if (participant.faceit_rating && !isNaN(parseInt(participant.faceit_rating)) && parseInt(participant.faceit_rating) > 0) {
                rating = parseInt(participant.faceit_rating);
            } else if (participant.user_faceit_rating && !isNaN(parseInt(participant.user_faceit_rating)) && parseInt(participant.user_faceit_rating) > 0) {
                rating = parseInt(participant.user_faceit_rating);
            } else {
                rating = 1000; // –î–µ—Ñ–æ–ª—Ç –¥–ª—è FACEIT
            }
        } else if (ratingType === 'premier') {
            // üéØ –ü–†–ò–û–†–ò–¢–ï–¢ –î–õ–Ø CS2 PREMIER (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º):
            // 1. –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ä–∞–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–µ—Å–ª–∏ –±—ã–ª —É–∫–∞–∑–∞–Ω –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥)
            // 2. Premier —Ä–∞–Ω–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // 3. –î–µ—Ñ–æ–ª—Ç 5
            
            if (participant.cs2_premier_rank && !isNaN(parseInt(participant.cs2_premier_rank)) && parseInt(participant.cs2_premier_rank) > 0) {
                rating = parseInt(participant.cs2_premier_rank);
            } else if (participant.user_premier_rank && !isNaN(parseInt(participant.user_premier_rank)) && parseInt(participant.user_premier_rank) > 0) {
                rating = parseInt(participant.user_premier_rank);
            } else if (participant.premier_rank && !isNaN(parseInt(participant.premier_rank)) && parseInt(participant.premier_rank) > 0) {
                rating = parseInt(participant.premier_rank);
            } else if (participant.premier_rating && !isNaN(parseInt(participant.premier_rating)) && parseInt(participant.premier_rating) > 0) {
                rating = parseInt(participant.premier_rating);
            } else if (participant.user_premier_rating && !isNaN(parseInt(participant.user_premier_rating)) && parseInt(participant.user_premier_rating) > 0) {
                rating = parseInt(participant.user_premier_rating);
            } else {
                rating = 5; // –î–µ—Ñ–æ–ª—Ç –¥–ª—è Premier
            }
        } else {
            // Fallback –Ω–∞ faceit –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            rating = 1000;
        }
        
        console.log(`üìä –†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${participant.name}: ${rating} (—Ç–∏–ø: ${ratingType})`);
        return rating;
    }

    /**
     * üÜï –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ì–û–†–ò–¢–ú –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ê–ù–î
     * –ü—Ä–∏–Ω—Ü–∏–ø—ã:
     * 1. –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏  
     * 2. –°–∏–ª—å–Ω—ã–π + —Å–ª–∞–±—ã–π –∏–≥—Ä–æ–∫ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
     * 3. –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ +-20% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
     */
    static generateOptimalTeams(participants, teamSize, ratingType) {
        console.log(`üéØ [generateOptimalTeams] –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ${teamSize}`);
        
        // 1. –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        const sortedParticipants = [...participants].sort((a, b) => {
            const ratingA = this.normalizeParticipantRating(a, ratingType);
            const ratingB = this.normalizeParticipantRating(b, ratingType);
            return ratingB - ratingA; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é (—Å–∏–ª—å–Ω–µ–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        });
        
        // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        const totalRating = sortedParticipants.reduce((sum, p) => 
            sum + this.normalizeParticipantRating(p, ratingType), 0
        );
        const averageRating = totalRating / sortedParticipants.length;
        const targetTeamRating = averageRating * teamSize; // –¶–µ–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
        
        console.log(`üìä [generateOptimalTeams] –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${Math.round(averageRating)}, —Ü–µ–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã: ${Math.round(targetTeamRating)}`);
        
        const fullTeams = Math.floor(sortedParticipants.length / teamSize);
        const playersInTeams = fullTeams * teamSize;
        const participantsForTeams = sortedParticipants.slice(0, playersInTeams);
        
        let teams = [];
        
        if (teamSize === 2) {
            teams = this.generateOptimalPairs(participantsForTeams, ratingType, averageRating);
        } else {
            teams = this.generateOptimalLargeTeams(participantsForTeams, teamSize, ratingType, averageRating);
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–ª—É—á—à–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥
        const balanceResult = this.optimizeTeamBalance(teams, ratingType, averageRating);
        
        console.log(`‚úÖ [generateOptimalTeams] –°–æ–∑–¥–∞–Ω–æ ${teams.length} –∫–æ–º–∞–Ω–¥ —Å –±–∞–ª–∞–Ω—Å–æ–º ${Math.round(balanceResult.finalBalance)}%`);
        return teams;
    }

    /**
     * üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ï –ü–û–ü–ê–†–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï (–¥–ª—è –∫–æ–º–∞–Ω–¥ –∏–∑ 2 –∏–≥—Ä–æ–∫–æ–≤)
     */
    static generateOptimalPairs(participants, ratingType, averageRating) {
        console.log(`üí´ [generateOptimalPairs] –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        
        const teams = [];
        const used = new Set();
        const targetPairRating = averageRating * 2;
        
        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä —Å –∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        const allPairs = [];
        
        for (let i = 0; i < participants.length; i++) {
            for (let j = i + 1; j < participants.length; j++) {
                const player1 = participants[i];
                const player2 = participants[j];
                const rating1 = this.normalizeParticipantRating(player1, ratingType);
                const rating2 = this.normalizeParticipantRating(player2, ratingType);
                const pairRating = rating1 + rating2;
                const deviation = Math.abs(pairRating - targetPairRating);
                
                allPairs.push({
                    player1,
                    player2,
                    rating1,
                    rating2,
                    pairRating,
                    deviation,
                    averageRating: pairRating / 2
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é (–ª—É—á—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        allPairs.sort((a, b) => a.deviation - b.deviation);
        
        // –ñ–∞–¥–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –ø–∞—Ä—ã
        for (const pair of allPairs) {
            if (teams.length >= Math.floor(participants.length / 2)) break;
            
            const player1Id = pair.player1.id || pair.player1.participant_id;
            const player2Id = pair.player2.id || pair.player2.participant_id;
            
            if (!used.has(player1Id) && !used.has(player2Id)) {
                teams.push({
                    name: `–ö–æ–º–∞–Ω–¥–∞ ${teams.length + 1}`,
                    members: [pair.player1, pair.player2],
                    totalRating: pair.pairRating,
                    averageRating: pair.averageRating
                });
                
                used.add(player1Id);
                used.add(player2Id);
                
                console.log(`‚úÖ –ü–∞—Ä–∞ ${teams.length}: ${pair.player1.name} (${pair.rating1}) + ${pair.player2.name} (${pair.rating2}) = ${Math.round(pair.averageRating)} —Å—Ä–µ–¥–Ω–∏–π`);
            }
        }
        
        return teams;
    }

    /**
     * üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–õ–Ø –ë–û–õ–¨–®–ò–• –ö–û–ú–ê–ù–î (5+ –∏–≥—Ä–æ–∫–æ–≤)
     */
    static generateOptimalLargeTeams(participants, teamSize, ratingType, averageRating) {
        console.log(`üèÜ [generateOptimalLargeTeams] –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ ${teamSize} –∏–≥—Ä–æ–∫–æ–≤`);
        
        const fullTeams = Math.floor(participants.length / teamSize);
        const teams = [];
        
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for (let i = 0; i < fullTeams; i++) {
            teams.push({
                name: `–ö–æ–º–∞–Ω–¥–∞ ${i + 1}`,
                members: [],
                totalRating: 0,
                averageRating: 0
            });
        }
        
        // üéØ –ù–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú: "–£–ú–ù–ê–Ø –ó–ú–ï–ô–ö–ê"
        // –ü—Ä–∏–Ω—Ü–∏–ø: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ –±—ã–ª–∏ –∏ —Å–∏–ª—å–Ω—ã–µ, –∏ —Å–ª–∞–±—ã–µ
        
        let participantIndex = 0;
        
        // –†–∞—É–Ω–¥ 1: –°–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
        for (let teamIndex = 0; teamIndex < fullTeams && participantIndex < participants.length; teamIndex++) {
            const participant = participants[participantIndex];
            const rating = this.normalizeParticipantRating(participant, ratingType);
            
            teams[teamIndex].members.push(participant);
            teams[teamIndex].totalRating += rating;
            
            console.log(`üèÖ –°–∏–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫: ${participant.name} (${rating}) ‚Üí –ö–æ–º–∞–Ω–¥–∞ ${teamIndex + 1}`);
            participantIndex++;
        }
        
        // –†–∞—É–Ω–¥—ã 2-N: –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
        for (let round = 1; round < teamSize; round++) {
            const isEvenRound = round % 2 === 0;
            
            for (let i = 0; i < fullTeams && participantIndex < participants.length; i++) {
                // –í —á–µ—Ç–Ω—ã—Ö —Ä–∞—É–Ω–¥–∞—Ö –∏–¥–µ–º –ø—Ä—è–º–æ, –≤ –Ω–µ—á–µ—Ç–Ω—ã—Ö - –æ–±—Ä–∞—Ç–Ω–æ
                const teamIndex = isEvenRound ? i : (fullTeams - 1 - i);
                const participant = participants[participantIndex];
                const rating = this.normalizeParticipantRating(participant, ratingType);
                
                teams[teamIndex].members.push(participant);
                teams[teamIndex].totalRating += rating;
                
                console.log(`üë§ –†–∞—É–Ω–¥ ${round + 1}: ${participant.name} (${rating}) ‚Üí –ö–æ–º–∞–Ω–¥–∞ ${teamIndex + 1}`);
                participantIndex++;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∫–æ–º–∞–Ω–¥
        teams.forEach(team => {
            team.averageRating = team.totalRating / team.members.length;
        });
        
        return teams;
    }

    /**
     * üéØ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ë–ê–õ–ê–ù–°–ê –ö–û–ú–ê–ù–î (—Ü–µ–ª–µ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ +-20%)
     */
    static optimizeTeamBalance(teams, ratingType, globalAverageRating, maxIterations = 50) {
        console.log(`‚öñÔ∏è [optimizeTeamBalance] –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å ${teams.length} –∫–æ–º–∞–Ω–¥ (—Ü–µ–ª—å: ¬±20%)`);
        
        let iteration = 0;
        let improved = true;
        
        while (improved && iteration < maxIterations) {
            improved = false;
            iteration++;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            const teamAverages = teams.map(team => 
                team.members.reduce((sum, member) => 
                    sum + this.normalizeParticipantRating(member, ratingType), 0
                ) / team.members.length
            );
            
            const minAvg = Math.min(...teamAverages);
            const maxAvg = Math.max(...teamAverages);
            const currentBalance = ((maxAvg - minAvg) / globalAverageRating) * 100;
            
            console.log(`üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è ${iteration}: –±–∞–ª–∞–Ω—Å ${Math.round(currentBalance)}%`);
            
            // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —É–∂–µ —Ö–æ—Ä–æ—à–∏–π (<=20%), –∑–∞–≤–µ—Ä—à–∞–µ–º
            if (currentBalance <= 20) {
                console.log(`‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å: ${Math.round(currentBalance)}%`);
                break;
            }
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Å–∏–ª—å–Ω—É—é –∏ —Å–∞–º—É—é —Å–ª–∞–±—É—é –∫–æ–º–∞–Ω–¥—ã
            const strongestTeamIndex = teamAverages.indexOf(maxAvg);
            const weakestTeamIndex = teamAverages.indexOf(minAvg);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω
            const strongestTeam = teams[strongestTeamIndex];
            const weakestTeam = teams[weakestTeamIndex];
            
            // –ò—â–µ–º —Å–∞–º–æ–≥–æ —Å–ª–∞–±–æ–≥–æ –≤ —Å–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –∏ —Å–∞–º–æ–≥–æ —Å–∏–ª—å–Ω–æ–≥–æ –≤ —Å–ª–∞–±–æ–π –∫–æ–º–∞–Ω–¥–µ
            const strongTeamWeakest = strongestTeam.members.reduce((weakest, member) => {
                const memberRating = this.normalizeParticipantRating(member, ratingType);
                const weakestRating = this.normalizeParticipantRating(weakest, ratingType);
                return memberRating < weakestRating ? member : weakest;
            });
            
            const weakTeamStrongest = weakestTeam.members.reduce((strongest, member) => {
                const memberRating = this.normalizeParticipantRating(member, ratingType);
                const strongestRating = this.normalizeParticipantRating(strongest, ratingType);
                return memberRating > strongestRating ? member : strongest;
            });
            
            const strongTeamWeakestRating = this.normalizeParticipantRating(strongTeamWeakest, ratingType);
            const weakTeamStrongestRating = this.normalizeParticipantRating(weakTeamStrongest, ratingType);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ª—É—á—à–∏—Ç –ª–∏ –æ–±–º–µ–Ω –±–∞–ª–∞–Ω—Å
            if (strongTeamWeakestRating < weakTeamStrongestRating) {
                const ratingDiff = weakTeamStrongestRating - strongTeamWeakestRating;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞
                const newStrongAvg = (teamAverages[strongestTeamIndex] * strongestTeam.members.length - strongTeamWeakestRating + weakTeamStrongestRating) / strongestTeam.members.length;
                const newWeakAvg = (teamAverages[weakestTeamIndex] * weakestTeam.members.length - weakTeamStrongestRating + strongTeamWeakestRating) / weakestTeam.members.length;
                
                const newMaxAvg = Math.max(newStrongAvg, newWeakAvg, ...teamAverages.filter((_, i) => i !== strongestTeamIndex && i !== weakestTeamIndex));
                const newMinAvg = Math.min(newStrongAvg, newWeakAvg, ...teamAverages.filter((_, i) => i !== strongestTeamIndex && i !== weakestTeamIndex));
                const newBalance = ((newMaxAvg - newMinAvg) / globalAverageRating) * 100;
                
                // –ï—Å–ª–∏ –æ–±–º–µ–Ω —É–ª—É—á—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å
                if (newBalance < currentBalance) {
                    console.log(`üîÑ –û–±–º–µ–Ω: ${strongTeamWeakest.name} (${strongTeamWeakestRating}) ‚Üî ${weakTeamStrongest.name} (${weakTeamStrongestRating})`);
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
                    const strongIndex = strongestTeam.members.findIndex(m => (m.id || m.participant_id) === (strongTeamWeakest.id || strongTeamWeakest.participant_id));
                    const weakIndex = weakestTeam.members.findIndex(m => (m.id || m.participant_id) === (weakTeamStrongest.id || weakTeamStrongest.participant_id));
                    
                    strongestTeam.members[strongIndex] = weakTeamStrongest;
                    weakestTeam.members[weakIndex] = strongTeamWeakest;
                    
                    improved = true;
                }
            }
        }
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞
        const finalTeamAverages = teams.map(team => 
            team.members.reduce((sum, member) => 
                sum + this.normalizeParticipantRating(member, ratingType), 0
            ) / team.members.length
        );
        
        const finalMinAvg = Math.min(...finalTeamAverages);
        const finalMaxAvg = Math.max(...finalTeamAverages);
        const finalBalance = ((finalMaxAvg - finalMinAvg) / globalAverageRating) * 100;
        
        console.log(`‚úÖ [optimizeTeamBalance] –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${Math.round(finalBalance)}% –∑–∞ ${iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π`);
        
        return {
            finalBalance,
            iterations: iteration,
            teamAverages: finalTeamAverages,
            isBalanced: finalBalance <= 20
        };
    }

    /**
     * üéØ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ú–ê–ù–î (–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞)
     */
    static async generateTeams(tournamentId, ratingTypeFromRequest = null) {
        const startTime = Date.now();
        console.log(`üöÄ [generateTeams] –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            // üîç 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
            const tournament = await TournamentRepository.getById(tournamentId);
            if (!tournament) {
                throw new Error(`–¢—É—Ä–Ω–∏—Ä ${tournamentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // üÜï –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–ò–ü –†–ï–ô–¢–ò–ù–ì–ê –ò–ó –ù–ê–°–¢–†–û–ï–ö –¢–£–†–ù–ò–†–ê
            const ratingType = tournament.mix_rating_type || 'faceit';
            console.log(`üìä –¢—É—Ä–Ω–∏—Ä: "${tournament.name}", —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ${tournament.team_size}, —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞: ${ratingType}`);

            // üîç 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
            const participants = await ParticipantRepository.getAllByTournamentId(tournamentId);
            if (!participants || participants.length === 0) {
                throw new Error('–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥');
            }

            console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥`);

            // üîç 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const teamSize = parseInt(tournament.team_size, 10) || 5;
            const fullTeams = Math.floor(participants.length / teamSize);
            const playersInTeams = fullTeams * teamSize;

            if (fullTeams === 0) {
                throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ${teamSize}, –∞ –µ—Å—Ç—å ${participants.length}`);
            }

            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Üí ${fullTeams} –∫–æ–º–∞–Ω–¥ –ø–æ ${teamSize} –∏–≥—Ä–æ–∫–æ–≤ (${playersInTeams} –≤ –∫–æ–º–∞–Ω–¥–∞—Ö, ${participants.length - playersInTeams} –æ—Å—Ç–∞–Ω–µ—Ç—Å—è)`);

            // üîç 4. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
            console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}...`);
            await TeamRepository.deleteAllByTournamentId(tournamentId);

            // üîç 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
            console.log(`üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥...`);
            const teams = this.generateOptimalTeams(participants, teamSize, ratingType);

            console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${teams.length} –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥`);

            // üîç 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...`);
            const createdTeams = [];

            for (let i = 0; i < teams.length; i++) {
                const team = teams[i];
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                const createdTeam = await TeamRepository.create({
                    tournament_id: tournamentId,
                    name: team.name,
                    creator_id: tournament.created_by
                });

                // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—É
                const teamMembers = [];
                for (const member of team.members) {
                    await TeamRepository.addMember(
                        createdTeam.id, 
                        member.user_id, 
                        member.id || member.participant_id
                    );

                    teamMembers.push({
                        ...member,
                        team_id: createdTeam.id
                    });
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                const participantIds = team.members.map(m => m.id || m.participant_id).filter(Boolean);
                if (participantIds.length > 0) {
                    await ParticipantRepository.updateInTeamStatus(participantIds, true);
                }

                createdTeams.push({
                    ...createdTeam,
                    members: teamMembers,
                    averageRating: team.averageRating || this.calculateTeamAverageRating(team.members, ratingType),
                    averageRatingFaceit: this.calculateTeamAverageRating(team.members, 'faceit'),
                    averageRatingPremier: this.calculateTeamAverageRating(team.members, 'premier'),
                    ratingType: ratingType
                });

                console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ "${team.name}" —Å–æ–∑–¥–∞–Ω–∞ —Å ${team.members.length} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏`);
            }

            // üîç 7. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ 'team'
            console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ 'team'...`);
            await TournamentRepository.updateParticipantType(tournamentId, 'team');

            // üîç 8. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            const endTime = Date.now();
            const duration = endTime - startTime;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥
            const teamAverages = createdTeams.map(team => team.averageRating);
            const minAvg = Math.min(...teamAverages);
            const maxAvg = Math.max(...teamAverages);
            const overallAvg = teamAverages.reduce((sum, avg) => sum + avg, 0) / teamAverages.length;
            const balance = ((maxAvg - minAvg) / overallAvg) * 100;

            console.log(`üéâ [generateTeams] –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û –∑–∞ ${duration}ms:`);
            console.log(`   üìä –°–æ–∑–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${createdTeams.length}`);
            console.log(`   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: ${playersInTeams}`);
            console.log(`   ‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥: ${Math.round(balance)}%`);
            console.log(`   üéØ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: min=${Math.round(minAvg)}, max=${Math.round(maxAvg)}, –æ–±—â–∏–π=${Math.round(overallAvg)}`);

            return {
                success: true,
                teams: createdTeams,
                summary: {
                    totalParticipants: participants.length,
                    teamsCreated: createdTeams.length,
                    participantsInTeams: playersInTeams,
                    participantsNotInTeams: participants.length - playersInTeams,
                    teamSize: teamSize,
                    ratingType: ratingType,
                    algorithm: teamSize === 2 ? 'optimal_pairs' : 'smart_snake',
                    balance: {
                        percentage: Math.round(balance * 100) / 100,
                        isGood: balance <= 20,
                        minTeamRating: Math.round(minAvg),
                        maxTeamRating: Math.round(maxAvg),
                        averageRating: Math.round(overallAvg)
                    },
                    duration: duration
                }
            };

        } catch (error) {
            const endTime = Date.now();
            console.error(`‚ùå [generateTeams] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∑–∞ ${endTime - startTime}ms:`, error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ (—Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π)
     */
    static async getOriginalParticipants(tournamentId) {
        const participants = await ParticipantRepository.getAllByTournamentId(tournamentId);
        
        const inTeam = participants.filter(p => p.in_team);
        const notInTeam = participants.filter(p => !p.in_team);
        
        return {
            all: participants,
            inTeam,
            notInTeam,
            total: participants.length,
            inTeamCount: inTeam.length,
            notInTeamCount: notInTeam.length
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async clearTeams(tournamentId, userId) {
        console.log(`üóëÔ∏è MixTeamService: –û—á–∏—Å—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            const teamsCountResult = await client.query(
                'SELECT COUNT(*) as count FROM tournament_teams WHERE tournament_id = $1',
                [tournamentId]
            );
            const teamsCount = parseInt(teamsCountResult.rows[0].count);
            
            if (teamsCount === 0) {
                await client.query('COMMIT');
                console.log(`‚ÑπÔ∏è [clearTeams] –¢—É—Ä–Ω–∏—Ä ${tournamentId} –Ω–µ –∏–º–µ–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
                return {
                    success: true,
                    message: '–ö–æ–º–∞–Ω–¥—ã —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
                    deletedTeams: 0
                };
            }
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥)
            await client.query(
                'DELETE FROM tournament_teams WHERE tournament_id = $1',
                [tournamentId]
            );
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await client.query(
                'UPDATE tournament_participants SET in_team = FALSE WHERE tournament_id = $1',
                [tournamentId]
            );
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π
            await client.query(
                'UPDATE tournaments SET participant_type = $1 WHERE id = $2',
                ['individual', tournamentId]
            );
            
            await client.query('COMMIT');
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'teams_cleared', {
                deletedTeams: teamsCount
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            await sendTournamentChatAnnouncement(
                tournamentId,
                `üóëÔ∏è –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ —É–¥–∞–ª–µ–Ω—ã. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.`
            );
            
            console.log(`‚úÖ [clearTeams] –£–¥–∞–ª–µ–Ω–æ ${teamsCount} –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            
            return {
                success: true,
                message: `–£–¥–∞–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${teamsCount}`,
                deletedTeams: teamsCount
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [clearTeams] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            throw error;
        } finally {
            client.release();
        }
    }
}

module.exports = MixTeamService; 