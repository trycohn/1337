/**
 * üèóÔ∏è –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ò–° –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–£–†–ù–ò–†–ù–û–ô –°–ï–¢–ö–ò
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —Å–µ—Ç–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤
 * —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
 */

const { SingleEliminationEngine } = require('./SingleEliminationEngine');
const { DoubleEliminationEngine } = require('./DoubleEliminationEngine');
const { SeedingFactory, SEEDING_TYPES } = require('../../utils/tournament/seedingAlgorithms');
const { BracketMath } = require('../../utils/tournament/bracketMath');
const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { broadcastTournamentUpdate } = require('../../notifications');
const pool = require('../../db');

/**
 * üéØ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
 */
class BracketGenerationService {
    
    /**
     * üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
     * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    static async generateBracket(tournamentId, userId, options = {}) {
        const startTime = Date.now();
        console.log(`üöÄ [BracketGenerationService] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            const tournament = await this._getTournamentWithValidation(tournamentId, userId, client);
            
            // 2. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
            const participants = await this._getParticipantsForBracket(tournament, client);
            
            // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            const seedingOptions = this._prepareSeedingOptions(tournament, options);
            
            // 4. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Ç–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            await this._clearExistingBracket(tournamentId, client);
            
            // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É
            const generationResult = await this._generateBracketByType(
                tournament,
                participants,
                seedingOptions
            );
            
            if (!generationResult.success) {
                throw new Error(generationResult.error);
            }
            
            // 6. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            await this._updateTournamentAfterGeneration(tournament, generationResult, client);
            
            // 7. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(
                tournamentId,
                userId,
                'bracket_generated',
                {
                    bracketType: tournament.bracket_type,
                    seedingType: seedingOptions.seedingType,
                    participantsUsed: generationResult.seedingInfo.participantsUsed,
                    participantsExcluded: generationResult.seedingInfo.participantsExcluded,
                    totalMatches: generationResult.matches.length,
                    generationTime: generationResult.generationTime
                }
            );
            
            await client.query('COMMIT');
            
            // 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
            broadcastTournamentUpdate(tournamentId, {
                type: 'bracket_generated',
                data: {
                    matchesCount: generationResult.matches.length,
                    participantsUsed: generationResult.seedingInfo.participantsUsed
                }
            });
            
            const totalDuration = Date.now() - startTime;
            console.log(`‚úÖ [BracketGenerationService] –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${totalDuration}ms`);
            
            return {
                success: true,
                tournament,
                matches: generationResult.matches,
                excludedParticipants: generationResult.excludedParticipants,
                seedingInfo: generationResult.seedingInfo,
                bracketMath: generationResult.bracketMath,
                generationTime: totalDuration,
                message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. –°–æ–∑–¥–∞–Ω–æ –º–∞—Ç—á–µ–π: ${generationResult.matches.length}`
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            
            const totalDuration = Date.now() - startTime;
            console.error(`‚ùå [BracketGenerationService] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${totalDuration}ms):`, error.message);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            try {
                await logTournamentEvent(
                    tournamentId,
                    userId,
                    'bracket_generation_failed',
                    { error: error.message, duration: totalDuration }
                );
            } catch (logError) {
                console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', logError);
            }
            
            return {
                success: false,
                error: error.message,
                generationTime: totalDuration
            };
            
        } finally {
            client.release();
        }
    }
    
    /**
     * üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} options - –û–ø—Ü–∏–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    static async regenerateBracket(tournamentId, userId, options = {}) {
        console.log(`üîÑ [BracketGenerationService] –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
        return await this.generateBracket(tournamentId, userId, {
            ...options,
            forceRegenerate: true
        });
    }
    
    /**
     * üé≤ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @returns {Object} - –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     */
    static async previewSeeding(tournamentId, options = {}) {
        console.log(`üé≤ [BracketGenerationService] –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            const tournament = await TournamentRepository.getById(tournamentId);
            if (!tournament) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const participants = await this._getParticipantsForBracket(tournament);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            const bracketMath = BracketMath.calculateSingleEliminationParams(
                participants.length,
                { thirdPlaceMatch: options.thirdPlaceMatch || false }
            );
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            const seedingOptions = this._prepareSeedingOptions(tournament, options);
            const seededParticipants = SeedingFactory.createSeeding(
                seedingOptions.seedingType,
                participants,
                bracketMath.actualParticipants,
                seedingOptions.seedingOptions
            );
            
            return {
                success: true,
                participants: seededParticipants,
                excludedParticipants: participants.slice(bracketMath.actualParticipants),
                bracketMath,
                seedingInfo: {
                    type: seedingOptions.seedingType,
                    participantsUsed: seededParticipants.length,
                    participantsExcluded: bracketMath.excludedParticipants
                }
            };
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`, error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }
    
    /**
     * üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async _getTournamentWithValidation(tournamentId, userId, client) {
        const tournament = await TournamentRepository.getById(tournamentId, client);
        
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–µ—Ç–∫–∏
        const hasPermission = await this._checkBracketGenerationPermission(tournamentId, userId, client);
        if (!hasPermission) {
            throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
        if (tournament.status !== 'active') {
            throw new Error(`–ù–µ–ª—å–∑—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${tournament.status}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–µ—Ç–∫–∏
        if (!tournament.bracket_type || tournament.bracket_type !== 'single_elimination') {
            throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏: ${tournament.bracket_type}`);
        }
        
        return tournament;
    }
    
    /**
     * üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–µ—Ç–∫–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @returns {boolean} - –ï—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∞
     */
    static async _checkBracketGenerationPermission(tournamentId, userId, client) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç—É—Ä–Ω–∏—Ä–∞
            const tournament = await TournamentRepository.getById(tournamentId, client);
            if (tournament && tournament.created_by === userId) {
                return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞
            const adminCheck = await client.query(
                'SELECT id FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [tournamentId, userId]
            );
            
            if (adminCheck.rows.length > 0) {
                return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–∏—Å—Ç–µ–º—ã)
            const userCheck = await client.query(
                'SELECT role FROM users WHERE id = $1',
                [userId]
            );
            
            if (userCheck.rows.length > 0 && userCheck.rows[0].role === 'admin') {
                return true;
            }
            
            return false;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:', error);
            return false;
        }
    }
    
    /**
     * üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
     * @param {Object} tournament - –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static async _getParticipantsForBracket(tournament, client) {
        if (tournament.format === 'mix') {
            // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            return await this._getMixTeams(tournament.id, client);
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            return await ParticipantRepository.getByTournamentId(tournament.id, client);
        }
    }
    
    /**
     * üéÆ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥
     */
    static async _getMixTeams(tournamentId, client) {
        try {
            const query = `
                SELECT 
                    tt.id,
                    tt.name,
                    tt.creator_id,
                    COALESCE(
                        JSON_AGG(
                            JSON_BUILD_OBJECT(
                                'id', tp.id,
                                'user_id', tp.user_id,
                                'name', tp.name,
                                'faceit_elo', tp.faceit_elo,
                                'cs2_premier_rank', tp.cs2_premier_rank
                            )
                        ) FILTER (WHERE tp.id IS NOT NULL), 
                        '[]'::json
                    ) as members
                FROM tournament_teams tt
                LEFT JOIN tournament_team_members ttm ON tt.id = ttm.team_id
                LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
                WHERE tt.tournament_id = $1
                GROUP BY tt.id, tt.name, tt.creator_id
                ORDER BY tt.id
            `;
            
            const result = await (client || pool).query(query, [tournamentId]);
            
            return result.rows.map(team => ({
                id: team.id,
                name: team.name,
                type: 'team',
                members: team.members || [],
                captain_id: team.creator_id
            }));
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–∫—Å –∫–æ–º–∞–Ω–¥:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞');
        }
    }
    
    /**
     * ‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø—Ü–∏–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {Object} tournament - –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Object} options - –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
     * @returns {Object} - –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
     */
    static _prepareSeedingOptions(tournament, options) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        let seedingType = options.seedingType || tournament.seeding_type || SEEDING_TYPES.RANDOM;
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if (!Object.values(SEEDING_TYPES).includes(seedingType)) {
            console.warn(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${seedingType}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ`);
            seedingType = SEEDING_TYPES.RANDOM;
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        const seedingOptions = {
            ratingType: options.ratingType || 'faceit_elo',
            direction: options.direction || 'desc',
            customOrder: options.customOrder || [],
            balanceTeams: options.balanceTeams !== false // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞
        if (tournament.seeding_config) {
            Object.assign(seedingOptions, tournament.seeding_config);
        }
        
        return {
            seedingType,
            seedingOptions,
            thirdPlaceMatch: options.thirdPlaceMatch || false
        };
    }
    
    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Object} client - –ö–ª–∏–µ–Ω—Ç –ë–î
     */
    static async _clearExistingBracket(tournamentId, client) {
        console.log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ foreign key —Å—Å—ã–ª–∫–∏
            await client.query(`
                UPDATE matches 
                SET 
                    next_match_id = NULL,
                    loser_next_match_id = NULL,
                    source_match1_id = NULL,
                    source_match2_id = NULL
                WHERE tournament_id = $1
            `, [tournamentId]);
            
            // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ç—á–∏
            const deleteResult = await client.query(
                'DELETE FROM matches WHERE tournament_id = $1',
                [tournamentId]
            );
            
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –º–∞—Ç—á–µ–π: ${deleteResult.rowCount}`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ç–∫–∏:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É');
        }
    }
    
    /**
     * üèóÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Object} tournament - –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {Object} seedingOptions - –û–ø—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    static async _generateBracketByType(tournament, participants, seedingOptions) {
        // üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø —Å–µ—Ç–∫–∏ –∏–∑ –æ–ø—Ü–∏–π –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω, –∏–Ω–∞—á–µ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
        const bracketType = seedingOptions.bracketType || tournament.bracket_type;
        
        console.log(`üèóÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —Ç–∏–ø–∞: ${bracketType}`);
        
        let result;
        switch (bracketType) {
            case 'single_elimination':
                result = await SingleEliminationEngine.generateBracket(
                    tournament.id,
                    participants,
                    seedingOptions
                );
                break;
                
            case 'double_elimination':
                result = await DoubleEliminationEngine.generateBracket(
                    tournament.id,
                    participants,
                    seedingOptions
                );
                break;
            
            default:
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏: ${bracketType}`);
        }
        
        // üÜï –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Å–µ—Ç–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (result && result.success) {
            result.bracketType = bracketType;
        }
        
        return result;
    }
    
    /**
     * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @private
     */
    static async _updateTournamentAfterGeneration(tournament, generationResult, client) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await client.query(
            'UPDATE tournaments SET excluded_participants_count = $1 WHERE id = $2',
            [generationResult.seedingInfo.participantsExcluded, tournament.id]
        );
        
        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞: –∏—Å–∫–ª—é—á–µ–Ω–æ ${generationResult.seedingInfo.participantsExcluded} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        
        // üÜï –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Å–µ—Ç–∫–∏ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (generationResult.bracketType && generationResult.bracketType !== tournament.bracket_type) {
            await client.query(
                'UPDATE tournaments SET bracket_type = $1 WHERE id = $2',
                [generationResult.bracketType, tournament.id]
            );
            console.log(`üèÜ –¢–∏–ø —Å–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: ${generationResult.bracketType}`);
        }
    }
    
    /**
     * üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∫–∏
     */
    static async getBracketStatistics(tournamentId) {
        try {
            const query = `
                SELECT 
                    COUNT(*) as total_matches,
                    COUNT(*) FILTER (WHERE status = 'completed') as completed_matches,
                    COUNT(*) FILTER (WHERE status = 'pending') as pending_matches,
                    COUNT(*) FILTER (WHERE status = 'ongoing') as ongoing_matches,
                    COUNT(DISTINCT round) as total_rounds,
                    MAX(round) as final_round,
                    COUNT(*) FILTER (WHERE is_third_place_match = true) as third_place_matches
                FROM matches 
                WHERE tournament_id = $1
            `;
            
            const result = await pool.query(query, [tournamentId]);
            const stats = result.rows[0];
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—É—Ä–Ω–∏—Ä–∞
            const progress = stats.total_matches > 0 
                ? Math.round((stats.completed_matches / stats.total_matches) * 100)
                : 0;
            
            return {
                success: true,
                statistics: {
                    totalMatches: parseInt(stats.total_matches),
                    completedMatches: parseInt(stats.completed_matches),
                    pendingMatches: parseInt(stats.pending_matches),
                    ongoingMatches: parseInt(stats.ongoing_matches),
                    totalRounds: parseInt(stats.total_rounds),
                    finalRound: parseInt(stats.final_round),
                    hasThirdPlaceMatch: parseInt(stats.third_place_matches) > 0,
                    progressPercentage: progress
                }
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∫–∏:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }
}

module.exports = {
    BracketGenerationService,
    SEEDING_TYPES
}; 