/**
 * üèóÔ∏è –°–ï–†–í–ò–° –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–£–†–ù–ò–†–ù–´–• –°–ï–¢–û–ö V2.0
 * 
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —Å–µ—Ç–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤:
 * - Single Elimination
 * - Double Elimination
 * - Round Robin (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)
 * - Swiss System (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)
 */

const { SingleEliminationEngine } = require('./SingleEliminationEngine');
const { DoubleEliminationEngine } = require('./DoubleEliminationEngine');
const { SeedingFactory, SEEDING_TYPES } = require('../../utils/tournament/seedingAlgorithms');
const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const TeamRepository = require('../../repositories/tournament/TeamRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { broadcastTournamentUpdate } = require('../../notifications');
const pool = require('../../db');

/**
 * üèóÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —Å–µ—Ç–æ–∫
 */
class BracketGenerationService {
    
    /**
     * üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    static async generateBracket(tournamentId, userId, options = {}) {
        const startTime = Date.now();
        console.log(`üöÄ [BracketGenerationService] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // 1. –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            const tournament = await this._getTournamentWithValidation(tournamentId, userId, client);
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            await this._checkBracketGenerationPermission(tournamentId, userId, client);
            
            // 3. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const participants = await this._getParticipantsForBracket(tournament, client);
            
            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (participants.length < 2) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–º–∏–Ω–∏–º—É–º 2)');
            }
            
            // 5. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Ç–∫—É
            await this._clearExistingBracket(tournamentId, client);
            
            // üÜï 6. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–ø
            if (options.bracketType && options.bracketType !== tournament.bracket_type) {
                console.log(`üèÜ [BracketGenerationService] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏: ${tournament.bracket_type} ‚Üí ${options.bracketType}`);
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏
                const validBracketTypes = ['single_elimination', 'double_elimination'];
                if (!validBracketTypes.includes(options.bracketType)) {
                    throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–µ—Ç–∫–∏: ${options.bracketType}`);
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                const oldBracketType = tournament.bracket_type;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await client.query(
                    'UPDATE tournaments SET bracket_type = $1 WHERE id = $2',
                    [options.bracketType, tournamentId]
                );
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç tournament –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                tournament.bracket_type = options.bracketType;
                
                // üÜï –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏
                await logTournamentEvent(tournamentId, userId, 'bracket_type_changed', {
                    old_bracket_type: oldBracketType,
                    new_bracket_type: options.bracketType,
                    during_regeneration: true
                });
                
                console.log(`‚úÖ [BracketGenerationService] –¢–∏–ø —Å–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${options.bracketType}"`);
            }
            
            // 7. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            const seedingOptions = this._prepareSeedingOptions(tournament, options);
            
            // 8. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            const generationResult = await this._generateBracketByType(tournament, participants, seedingOptions);
            
            if (!generationResult.success) {
                throw new Error(generationResult.error);
            }
            
            // 9. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
            await this._updateTournamentAfterGeneration(tournament, generationResult, client);
            
            // 10. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'bracket_generated', {
                bracketType: tournament.bracket_type,
                participants: participants.length,
                matches: generationResult.matches.length,
                seedingType: seedingOptions.seedingType,
                generationTime: Date.now() - startTime
            });
            
            await client.query('COMMIT');
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [BracketGenerationService] –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${duration}ms`);
            
            // 11. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);
            broadcastTournamentUpdate(tournamentId, updatedTournament);
            
            return {
                success: true,
                message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ ${tournament.bracket_type} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞`,
                tournament: updatedTournament,
                matches: generationResult.matches,
                excludedParticipants: generationResult.excludedParticipants || [],
                bracketMath: generationResult.bracketMath,
                seedingInfo: generationResult.seedingInfo,
                generationTime: duration
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            
            const duration = Date.now() - startTime;
            console.error(`‚ùå [BracketGenerationService] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${duration}ms):`, error.message);
            
            return {
                success: false,
                error: error.message,
                generationTime: duration
            };
        } finally {
            client.release();
        }
    }
    
    /**
     * üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} options - –û–ø—Ü–∏–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    static async regenerateBracket(tournamentId, userId, options = {}) {
        console.log(`üîÑ [BracketGenerationService] –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Ç–æ –ø–æ —Å—É—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ñ–ª–∞–≥–æ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        return await this.generateBracket(tournamentId, userId, {
            ...options,
            forceRegenerate: true
        });
    }
    
    /**
     * üé≤ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    static async previewSeeding(tournamentId, options = {}) {
        console.log(`üé≤ [BracketGenerationService] –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
            const tournament = await TournamentRepository.getById(tournamentId);
            if (!tournament) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const participants = await this._getParticipantsForBracket(tournament, pool);
            
            if (participants.length < 2) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–º–∏–Ω–∏–º—É–º 2)');
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            const seedingOptions = this._prepareSeedingOptions(tournament, options);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            const seededParticipants = SeedingFactory.createSeeding(
                seedingOptions.seedingType,
                participants,
                participants.length,
                seedingOptions.seedingOptions
            );
            
            return {
                success: true,
                participants: seededParticipants,
                excludedParticipants: [],
                seedingInfo: {
                    type: seedingOptions.seedingType,
                    participantsUsed: seededParticipants.length,
                    participantsExcluded: 0
                }
            };
            
        } catch (error) {
            console.error(`‚ùå [BracketGenerationService] –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`, error.message);
            
            return {
                success: false,
                error: error.message
            };
        }
    }
    
    /**
     * üèóÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
     * @private
     */
    static async _getTournamentWithValidation(tournamentId, userId, client) {
        const tournament = await TournamentRepository.getById(tournamentId);
        
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // üîß –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –†–∞–∑—Ä–µ—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        // –ü–æ—Å–∫–æ–ª—å–∫—É —Å—Ç–∞—Ç—É—Å –±–æ–ª—å—à–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
        if (tournament.status === 'active') {
            return tournament;
        }
        
        // –î–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (tournament.status === 'in_progress') {
            throw new Error('–¢—É—Ä–Ω–∏—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–∫–∏ —Å–Ω–∞—á–∞–ª–∞ —Å–±—Ä–æ—Å—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É.');
        }
        
        if (tournament.status === 'completed') {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–∫–∏ —Å–Ω–∞—á–∞–ª–∞ —Å–±—Ä–æ—Å—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π.');
        }
        
        throw new Error(`–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: "${tournament.status}"`);
    }
    
    /**
     * üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
     * @private
     */
    static async _checkBracketGenerationPermission(tournamentId, userId, client) {
        const tournament = await TournamentRepository.getById(tournamentId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç—É—Ä–Ω–∏—Ä–∞
        if (tournament.created_by !== userId) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (!isAdmin) {
                throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É');
            }
        }
    }
    
    /**
     * üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @private
     */
    static async _getParticipantsForBracket(tournament, client) {
        if (tournament.format === 'mix') {
            // –î–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            return await this._getMixTeams(tournament.id, client);
        } else if (tournament.participant_type === 'team') {
            // –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—ã
            return await TournamentRepository.getTeamsWithMembers(tournament.id);
        } else {
            // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            return await ParticipantRepository.getByTournamentId(tournament.id);
        }
    }
    
    /**
     * üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–∫—Å-–∫–æ–º–∞–Ω–¥
     * @private
     */
    static async _getMixTeams(tournamentId, client) {
        const teams = await TeamRepository.getByTournamentId(tournamentId);
        
        if (teams.length === 0) {
            throw new Error('–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã');
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–¥—Ö–æ–¥—è—â–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
        return teams.map(team => ({
            id: team.id,
            name: team.name,
            type: 'team',
            members: team.members || []
        }));
    }
    
    /**
     * ‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø—Ü–∏–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @private
     */
    static _prepareSeedingOptions(tournament, options) {
        const seedingType = options.seedingType || SEEDING_TYPES.RANDOM;
        
        const seedingOptions = {
            seedingType,
            seedingOptions: {
                ratingField: tournament.format === 'mix' ? 'team_rating' : 'faceit_elo',
                ...options.seedingOptions
            },
            thirdPlaceMatch: options.thirdPlaceMatch || false,
            bracketType: tournament.bracket_type || 'single_elimination'
        };
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
        if (tournament.format === 'mix') {
            seedingOptions.seedingOptions.mixRatingType = tournament.mix_rating_type || 'faceit';
        }
        
        return seedingOptions;
    }
    
    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @private
     */
    static async _clearExistingBracket(tournamentId, client) {
        console.log(`üóëÔ∏è [BracketGenerationService] –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
        const result = await client.query(
            'DELETE FROM matches WHERE tournament_id = $1',
            [tournamentId]
        );
        
        if (result.rowCount > 0) {
            console.log(`   –£–¥–∞–ª–µ–Ω–æ ${result.rowCount} –º–∞—Ç—á–µ–π`);
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
        await client.query(
            'UPDATE tournaments SET status = $1 WHERE id = $2',
            ['active', tournamentId]
        );
    }
    
    /**
     * üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
     * @private
     */
    static async _generateBracketByType(tournament, participants, seedingOptions) {
        const bracketType = tournament.bracket_type || 'single_elimination';
        
        console.log(`üéØ [BracketGenerationService] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —Ç–∏–ø–∞: ${bracketType}`);
        
        switch (bracketType) {
            case 'single_elimination':
                return await SingleEliminationEngine.generateBracket(
                    tournament.id,
                    participants,
                    seedingOptions
                );
                
            case 'double_elimination':
                return await DoubleEliminationEngine.generateBracket(
                    tournament.id,
                    participants,
                    seedingOptions
                );
                
            default:
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏: ${bracketType}`);
        }
    }
    
    /**
     * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @private
     */
    static async _updateTournamentAfterGeneration(tournament, generationResult, client) {
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        // –¢—É—Ä–Ω–∏—Ä –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ 'active' –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
        // –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ 'in_progress' —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ startTournament()
        
        console.log(`üìä [BracketGenerationService] –¢—É—Ä–Ω–∏—Ä ${tournament.id} –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ (—Å—Ç–∞—Ç—É—Å: ${tournament.status})`);
        console.log(`üí° [BracketGenerationService] –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä"`);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
        // await client.query(
        //     'UPDATE tournaments SET bracket_generated_at = CURRENT_TIMESTAMP WHERE id = $1',
        //     [tournament.id]
        // );
    }
    
    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∫–∏
     */
    static async getBracketStatistics(tournamentId) {
        console.log(`üìä [BracketGenerationService] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            const tournament = await TournamentRepository.getById(tournamentId);
            if (!tournament) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
            const matches = await pool.query(
                'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, match_number',
                [tournamentId]
            );
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ç–∏–ø–∞–º
            const matchesByType = {};
            matches.rows.forEach(match => {
                if (!matchesByType[match.bracket_type]) {
                    matchesByType[match.bracket_type] = [];
                }
                matchesByType[match.bracket_type].push(match);
            });
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const statistics = {
                tournamentId,
                bracketType: tournament.bracket_type,
                totalMatches: matches.rows.length,
                matchesByType: Object.keys(matchesByType).reduce((acc, type) => {
                    acc[type] = matchesByType[type].length;
                    return acc;
                }, {}),
                completedMatches: matches.rows.filter(m => m.status === 'completed').length,
                pendingMatches: matches.rows.filter(m => m.status === 'pending').length,
                rounds: Math.max(...matches.rows.map(m => m.round), 0),
                generatedAt: tournament.updated_at
            };
            
            return {
                success: true,
                statistics
            };
            
        } catch (error) {
            console.error(`‚ùå [BracketGenerationService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error.message);
            
            return {
                success: false,
                error: error.message
            };
        }
    }
}

module.exports = {
    BracketGenerationService,
    SEEDING_TYPES
}; 