const pool = require('../../db');
const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const TeamRepository = require('../../repositories/tournament/TeamRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendNotification } = require('../../notifications');
const { sendTournamentInviteNotification } = require('../../utils/systemNotifications');

class InvitationService {
    /**
     * –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—É—Ä–Ω–∏—Ä
     */
    static async inviteToTournament(tournamentId, inviterId, inviterUsername, { username, email }) {
        console.log(`üìß InvitationService: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä ${tournamentId} –æ—Ç ${inviterUsername}`);

        // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        await this._checkInviteAccess(tournamentId, inviterId);

        if (tournament.status !== 'active') {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        }

        if (!username && !email) {
            throw new Error('–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ email');
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user;
        if (username) {
            const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);
            if (result.rows.length === 0) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            user = result.rows[0];
        } else if (email) {
            const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
            if (result.rows.length === 0) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            user = result.rows[0];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
        const existingParticipant = await ParticipantRepository.getUserParticipation(tournamentId, user.id);
        if (existingParticipant) {
            throw new Error('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const inviteCheck = await pool.query(
            'SELECT * FROM tournament_invitations WHERE tournament_id = $1 AND user_id = $2 AND status = $3',
            [tournamentId, user.id, 'pending']
        );
        if (inviteCheck.rows.length > 0) {
            throw new Error('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä');
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const invitationResult = await pool.query(
            'INSERT INTO tournament_invitations (tournament_id, user_id, invited_by, status) VALUES ($1, $2, $3, $4) RETURNING *',
            [tournamentId, user.id, inviterId, 'pending']
        );

        // üìß –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –í –ß–ê–¢ –û–¢ –°–ò–°–¢–ï–ú–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø 1337community
        try {
            await sendTournamentInviteNotification(
                user.id, 
                tournament.name, 
                inviterUsername, 
                tournamentId
            );
            console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`);
        } catch (chatError) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç:`, chatError);
            console.error(`‚ö†Ô∏è –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ`);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫)
        const isTeamTournament = tournament.participant_type === 'team';
        const notificationMessage = isTeamTournament 
            ? `–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä "${tournament.name}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${inviterUsername}. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É—á–∞—Å—Ç–∏—è.`
            : `–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä "${tournament.name}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${inviterUsername}`;
        const notificationResult = await pool.query(
            'INSERT INTO notifications (user_id, message, type, tournament_id, invitation_id) VALUES ($1, $2, $3, $4, $5) RETURNING *',
            [user.id, notificationMessage, 'tournament_invite', tournamentId, invitationResult.rows[0].id]
        );

        sendNotification(user.id, {
            id: notificationResult.rows[0].id,
            user_id: user.id,
            message: notificationMessage,
            type: 'tournament_invite',
            tournament_id: tournamentId,
            invitation_id: invitationResult.rows[0].id,
            created_at: new Date().toISOString(),
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(tournamentId, inviterId, 'invitation_sent', {
            invitedUserId: user.id,
            invitedUsername: user.username,
            invitationId: invitationResult.rows[0].id
        });

        console.log('‚úÖ InvitationService: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return invitationResult.rows[0];
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–ø—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
     */
    static async handleInvitation(tournamentId, userId, username, { action, invitation_id }) {
        console.log(`ü§ù InvitationService: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ${invitation_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${username}`);

        if (!['accept', 'reject'].includes(action)) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const invitationResult = await pool.query(
            'SELECT * FROM tournament_invitations WHERE id = $1 AND user_id = $2 AND tournament_id = $3 AND status = $4',
            [invitation_id, userId, tournamentId, 'pending']
        );
        
        if (invitationResult.rows.length === 0) {
            throw new Error('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
        }

        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (action === 'accept') {
            // –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            return await this._acceptInvitation(tournament, userId, username, invitation_id);
        } else {
            // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            return await this._rejectInvitation(tournament, userId, username, invitation_id);
        }
    }

    /**
     * –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
     * @private
     */
    static async _acceptInvitation(tournament, userId, username, invitation_id) {
        console.log(`‚úÖ InvitationService: –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ${invitation_id}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingParticipant = await ParticipantRepository.getUserParticipation(tournament.id, userId);
        if (existingParticipant) {
            throw new Error('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ');
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await pool.query('SELECT faceit_elo, cs2_premier_rank FROM users WHERE id = $1', [userId]);
        const userRatings = userResult.rows[0] || {};

        // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        if (tournament.format === 'mix') {
            // –ú–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä: –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            await pool.query(
                'INSERT INTO tournament_participants (tournament_id, user_id, name, in_team, faceit_elo, cs2_premier_rank) VALUES ($1, $2, $3, $4, $5, $6)',
                [tournament.id, userId, username, false, userRatings.faceit_elo || null, userRatings.cs2_premier_rank || null]
            );
        } else if (tournament.participant_type === 'solo') {
            // –°–æ–ª–æ-—Ç—É—Ä–Ω–∏—Ä
            await pool.query(
                'INSERT INTO tournament_participants (tournament_id, user_id, name, faceit_elo, cs2_premier_rank) VALUES ($1, $2, $3, $4, $5)',
                [tournament.id, userId, username, userRatings.faceit_elo || null, userRatings.cs2_premier_rank || null]
            );
        } else {
            // –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä: —Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            const teamResult = await pool.query(
                'INSERT INTO tournament_teams (tournament_id, name, creator_id) VALUES ($1, $2, $3) RETURNING id',
                [tournament.id, `${username}'s Team`, userId]
            );
            
            const participantResult = await pool.query(
                'INSERT INTO tournament_participants (tournament_id, user_id, name) VALUES ($1, $2, $3) RETURNING id',
                [tournament.id, userId, username]
            );
            
            await pool.query(
                'INSERT INTO tournament_team_members (team_id, user_id, participant_id) VALUES ($1, $2, $3)',
                [teamResult.rows[0].id, userId, participantResult.rows[0].id]
            );
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        await pool.query(
            'UPDATE tournament_invitations SET status = $1 WHERE id = $2',
            ['accepted', invitation_id]
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ç—É—Ä–Ω–∏—Ä–∞
        const creatorNotificationMessage = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä "${tournament.name}"`;
        await pool.query(
            'INSERT INTO notifications (user_id, message, type, tournament_id, invitation_id) VALUES ($1, $2, $3, $4, $5)',
            [tournament.created_by, creatorNotificationMessage, 'invitation_accepted', tournament.id, invitation_id]
        );
        
        sendNotification(tournament.created_by, {
            user_id: tournament.created_by,
            message: creatorNotificationMessage,
            type: 'invitation_accepted',
            tournament_id: tournament.id,
            invitation_id: invitation_id,
            created_at: new Date().toISOString(),
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(tournament.id, userId, 'invitation_accepted', {
            invitationId: invitation_id,
            participantType: tournament.participant_type
        });

        console.log('‚úÖ InvitationService: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ');
        return { message: '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É' };
    }

    /**
     * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
     * @private
     */
    static async _rejectInvitation(tournament, userId, username, invitation_id) {
        console.log(`‚ùå InvitationService: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ${invitation_id}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        await pool.query(
            'UPDATE tournament_invitations SET status = $1 WHERE id = $2',
            ['rejected', invitation_id]
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ç—É—Ä–Ω–∏—Ä–∞
        const creatorNotificationMessage = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä "${tournament.name}"`;
        await pool.query(
            'INSERT INTO notifications (user_id, message, type, tournament_id, invitation_id) VALUES ($1, $2, $3, $4, $5)',
            [tournament.created_by, creatorNotificationMessage, 'invitation_rejected', tournament.id, invitation_id]
        );
        
        sendNotification(tournament.created_by, {
            user_id: tournament.created_by,
            message: creatorNotificationMessage,
            type: 'invitation_rejected',
            tournament_id: tournament.id,
            invitation_id: invitation_id,
            created_at: new Date().toISOString(),
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(tournament.id, userId, 'invitation_rejected', {
            invitationId: invitation_id
        });

        console.log('‚úÖ InvitationService: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
        return { message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
     * @private
     */
    static async _checkInviteAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (!isAdmin) {
                throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
            }
        }
    }
}

module.exports = InvitationService; 