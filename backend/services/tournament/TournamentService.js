const pool = require('../../db');
const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const MatchRepository = require('../../repositories/tournament/MatchRepository');
const TeamRepository = require('../../repositories/tournament/TeamRepository');
const ChatService = require('../tournament/ChatService');
const MatchLobbyService = require('../matchLobby/MatchLobbyService');
const { logTournamentEvent, logAdvancement } = require('./TournamentLogService');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { broadcastTournamentUpdate } = require('../../notifications');

class TournamentService {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static async getAllTournaments() {
        console.log('üîç TournamentService: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        return await TournamentRepository.getAllWithParticipantCount();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ ID —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    static async getTournamentById(tournamentId) {
        const startTime = Date.now();
        console.log(`üîç [TournamentService] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
            const tournament = await TournamentRepository.getByIdWithCreator(tournamentId);
            if (!tournament) {
                return null;
            }
            console.log(`üèÜ [getTournamentById] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: ${tournament.name}, —Ñ–æ—Ä–º–∞—Ç: ${tournament.format}, —Å—Ç–∞—Ç—É—Å: ${tournament.status}`);

            // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            const admins = await TournamentRepository.getAdmins(tournamentId);
            console.log(`üë• [getTournamentById] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: –Ω–∞–π–¥–µ–Ω–æ ${admins.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`);

            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const participants = await ParticipantRepository.getByTournamentId(tournamentId);
            console.log(`üéØ [getTournamentById] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: –Ω–∞–π–¥–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);

            // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
            const matches = await MatchRepository.getByTournamentId(tournamentId);
            console.log(`‚öîÔ∏è [getTournamentById] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: –Ω–∞–π–¥–µ–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π`);
            
            // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í
            if (tournament.format === 'mix') {
                console.log(`üß© [getTournamentById] –ú–ò–ö–° –¢–£–†–ù–ò–† ${tournamentId} - –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:`);
                console.log(`   üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}`);
                console.log(`   ‚öîÔ∏è –ú–∞—Ç—á–µ–π –≤ –±–∞–∑–µ: ${matches.length}`);
                
                if (matches.length > 0) {
                    console.log(`   üéØ –ü–µ—Ä–≤—ã–π –º–∞—Ç—á:`, {
                        id: matches[0].id,
                        team1_id: matches[0].team1_id,
                        team2_id: matches[0].team2_id,
                        round: matches[0].round,
                        bracket_type: matches[0].bracket_type
                    });
                    console.log(`   üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á:`, {
                        id: matches[matches.length - 1].id,
                        team1_id: matches[matches.length - 1].team1_id,
                        team2_id: matches[matches.length - 1].team2_id,
                        round: matches[matches.length - 1].round,
                        bracket_type: matches[matches.length - 1].bracket_type
                    });
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            let teams = [];
            if (tournament.format === 'mix' || tournament.participant_type === 'team') {
                teams = await TournamentRepository.getTeamsWithMembers(tournamentId);
                console.log(`üèÜ [getTournamentById] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: –Ω–∞–π–¥–µ–Ω–æ ${teams.length} –∫–æ–º–∞–Ω–¥`);
                
                // üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø –ö–û–ú–ê–ù–î
                if (tournament.format === 'mix' && teams.length > 0) {
                    console.log(`   üß© –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞:`, {
                        id: teams[0].id,
                        name: teams[0].name,
                        members_count: teams[0].members ? teams[0].members.length : 0
                    });
                }
            }

            const result = {
                ...tournament,
                creator_name: tournament.creator_username,
                creator_avatar_url: tournament.creator_avatar_url,
                participants: participants,
                participant_count: participants.length,
                matches: matches,
                teams: teams,
                mixed_teams: teams,
                admins: admins
            };

            const endTime = Date.now();
            console.log(`‚úÖ [TournamentService] –¢—É—Ä–Ω–∏—Ä ${tournamentId} –ø–æ–ª—É—á–µ–Ω –∑–∞ ${endTime - startTime}ms`);
            console.log(`üìã [getTournamentById] –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, {
                name: result.name,
                format: result.format,
                status: result.status,
                participants_count: result.participants.length,
                matches_count: result.matches.length,
                teams_count: result.teams.length,
                admins_count: result.admins.length
            });
            
            // üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–û–ó–í–†–ê–©–ê–ï–ú–´–• –ú–ê–¢–ß–ï–ô
            console.log(`üîç [getTournamentById] –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ú–ê–¢–ß–ï–ô –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`);
            console.log(`   üìä result.matches is Array: ${Array.isArray(result.matches)}`);
            console.log(`   üìä result.matches length: ${result.matches ? result.matches.length : 'undefined'}`);
            if (result.matches && result.matches.length > 0) {
                console.log(`   üéØ –ü–µ—Ä–≤—ã–π –º–∞—Ç—á –≤ result:`, {
                    id: result.matches[0].id,
                    tournament_id: result.matches[0].tournament_id,
                    team1_id: result.matches[0].team1_id,
                    team2_id: result.matches[0].team2_id,
                    round: result.matches[0].round
                });
            } else {
                console.log(`   ‚ö†Ô∏è result.matches –ø—É—Å—Ç–æ–π –∏–ª–∏ undefined!`);
            }

            return result;

        } catch (error) {
            console.error(`‚ùå [TournamentService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async createTournament(tournamentData, userId) {
        console.log('‚ûï TournamentService: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞', tournamentData);

        const {
            name, game, format, participant_type, max_participants,
            start_date, description, bracket_type, team_size, mix_rating_type,
            lobby_enabled, lobby_match_format, selected_maps, full_double_elimination,
            require_faceit_linked, require_steam_linked,
            is_series_final
        } = tournamentData;

        const tournament = await TournamentRepository.create({
            name,
            game,
            format,
            created_by: userId,
            status: 'active',
            participant_type,
            max_participants: max_participants || null,
            start_date: start_date || null,
            description: description || null,
            bracket_type: bracket_type || 'single_elimination', // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º single_elimination –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            team_size: team_size || 1,
            mix_rating_type: (format === 'mix' && mix_rating_type) ? mix_rating_type : null,
            lobby_enabled: lobby_enabled || false,
            // üÜï –ù–û–í–û–ï: –û–ø—Ü–∏—è Full Double Elimination
            full_double_elimination: (bracket_type === 'double_elimination' && full_double_elimination) || false,
            // üÜï –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è MIX)
            require_faceit_linked: format === 'mix' ? !!require_faceit_linked : false,
            require_steam_linked: format === 'mix' ? !!require_steam_linked : false,
            // üÜï –§–ª–∞–≥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–µ—Ä–∏–∏
            is_series_final: !!is_series_final
        });

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏, —Å–æ–∑–¥–∞–µ–º –∏—Ö
        if (lobby_enabled && selected_maps && selected_maps.length === 7) {
            await MatchLobbyService.createLobbySettings(tournament.id, {
                enabled: true,
                matchFormat: lobby_match_format
            });
            
            await MatchLobbyService.setTournamentMaps(tournament.id, selected_maps);
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        await logTournamentEvent(tournament.id, userId, 'tournament_created', {
            name: tournament.name,
            game: tournament.game,
            format: tournament.format,
            mix_rating_type: tournament.mix_rating_type,
            lobby_enabled: tournament.lobby_enabled
        });

        console.log('‚úÖ TournamentService: –¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω', tournament);
        return tournament;
    }

    /**
     * üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–µ—Ä–∏–∏
     */
    static async updateSeriesFinalFlag(tournamentId, isFinal, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        if (tournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (!isAdmin) throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
        }
        const result = await pool.query(
            'UPDATE tournaments SET is_series_final = $1 WHERE id = $2 RETURNING *',
            [!!isFinal, tournamentId]
        );
        return result.rows[0];
    }

    /**
     * üÜï –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π —Ñ–∏–Ω–∞–ª ‚Üî –æ—Ç–±–æ—Ä–æ—á–Ω—ã–µ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)
     */
    static async setFinalQualifiers(finalTournamentId, qualifiers, userId) {
        const tournament = await TournamentRepository.getById(finalTournamentId);
        if (!tournament) throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        if (!tournament.is_series_final) throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ñ–∏–Ω–∞–ª —Å–µ—Ä–∏–∏');
        if (tournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(finalTournamentId, userId);
            if (!isAdmin) throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
        }
        return TournamentRepository.setFinalQualifiers(finalTournamentId, qualifiers);
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–±–æ—Ä–æ—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Ñ–∏–Ω–∞–ª–∞
     */
    static async getFinalQualifiers(finalTournamentId) {
        return TournamentRepository.getFinalQualifiers(finalTournamentId);
    }

    /**
     * üÜï –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –æ—Ç–±–æ—Ä–æ—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ —Ñ–∏–Ω–∞–ª
     * –ë–µ—Ä—ë–º top N –º–µ—Å—Ç (1..slots) –∏–∑ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–±–æ—Ä–æ—á–Ω–æ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
     */
    static async syncQualifiersToFinal(finalTournamentId, userId) {
        const finalTournament = await TournamentRepository.getById(finalTournamentId);
        if (!finalTournament) throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        if (!finalTournament.is_series_final) throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ñ–∏–Ω–∞–ª —Å–µ—Ä–∏–∏');
        if (finalTournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(finalTournamentId, userId);
            if (!isAdmin) throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
        }

        const qualifiers = await TournamentRepository.getFinalQualifiers(finalTournamentId);
        const promotions = [];

        for (const q of qualifiers) {
            const qualifierId = q.qualifier_tournament_id;
            const slots = Math.max(1, Math.min(3, parseInt(q.slots || 1)));

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞ –æ—Ç–±–æ—Ä–æ—á–Ω–æ–≥–æ
            const res = await pool.query(`
                WITH finals AS (
                  SELECT m.* FROM matches m WHERE m.tournament_id = $1::int
                ),
                gf AS (
                  SELECT winner_team_id, team1_id, team2_id
                  FROM finals
                  WHERE bracket_type IN ('grand_final_reset','grand_final','final')
                  ORDER BY (bracket_type='grand_final_reset') DESC, id DESC
                  LIMIT 1
                ),
                first_place AS (
                  SELECT COALESCE(gf.winner_team_id, NULL) AS id FROM gf
                ),
                second_place AS (
                  SELECT CASE WHEN gf.winner_team_id = gf.team1_id THEN gf.team2_id ELSE gf.team1_id END AS id FROM gf
                ),
                third_place AS (
                  SELECT winner_team_id AS id
                  FROM finals
                  WHERE bracket_type = 'placement' OR is_third_place_match = true
                  ORDER BY id DESC LIMIT 1
                )
                SELECT id FROM (
                  SELECT id FROM first_place
                  UNION ALL
                  SELECT id FROM second_place
                  UNION ALL
                  SELECT id FROM third_place
                ) places WHERE id IS NOT NULL LIMIT $2::int;
            `, [qualifierId, slots]);

            const promotedIds = res.rows.map(r => r.id);
            for (let placed = 1; placed <= promotedIds.length; placed++) {
                const refId = promotedIds[placed - 1];
                if (!refId) continue;

                // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ refId —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ team_id/participant_id
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ: —Å—Å—ã–ª–∫–∞ –Ω–∞ participant/team –∑–∞–ø–∏—Å—å)
                await pool.query(
                    `INSERT INTO tournament_promotions (final_tournament_id, qualifier_tournament_id, team_id, placed, meta)
                     VALUES ($1::int,$2::int,$3::int,$4::int,$5::jsonb)
                     ON CONFLICT (final_tournament_id, qualifier_tournament_id, team_id, placed)
                     DO UPDATE SET meta = EXCLUDED.meta, created_at = NOW()`,
                    [finalTournamentId, qualifierId, refId, placed, JSON.stringify({ source: 'manual_sync' })]
                );

                // –í—Å—Ç–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ñ–∏–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç participant_type
                if (['team','cs2_classic_5v5','cs2_wingman_2v2'].includes(finalTournament.participant_type)) {
                    // –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ñ–∏–Ω–∞–ª: —Å–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É –ø–æ –∏–º–µ–Ω–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ—Å—Ç–∞–≤
                    // 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã/—É—á–∞—Å—Ç–Ω–∏–∫–∞
                    const srcTeamRes = await pool.query(
                        `SELECT id, name, creator_id FROM tournament_teams WHERE id = $1::int`,
                        [refId]
                    );
                    let sourceName = null;
                    let sourceCreatorId = null;
                    let isTeamSource = false;
                    if (srcTeamRes.rows.length > 0) {
                        isTeamSource = true;
                        sourceName = srcTeamRes.rows[0].name;
                        sourceCreatorId = srcTeamRes.rows[0].creator_id || null;
                    } else {
                        const srcPartRes = await pool.query(
                            `SELECT tp.name, tp.user_id FROM tournament_participants tp WHERE tp.id = $1::int`,
                            [refId]
                        );
                        if (srcPartRes.rows.length > 0) {
                            sourceName = srcPartRes.rows[0].name || ('Qualified #' + refId);
                            sourceCreatorId = srcPartRes.rows[0].user_id || null;
                        } else {
                            sourceName = 'Qualified #' + refId;
                            sourceCreatorId = null;
                        }
                    }

                    // 2) –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–∏–Ω–∞–ª–µ, –µ—Å–ª–∏ –Ω–µ—Ç
                    const insertTeamRes = await pool.query(
                        `WITH ins AS (
                           INSERT INTO tournament_teams (tournament_id, name, creator_id)
                           SELECT $1::int, $2::text, $3
                           WHERE NOT EXISTS (
                             SELECT 1 FROM tournament_teams t WHERE t.tournament_id = $1::int AND t.name = $2::text
                           )
                           RETURNING id
                         )
                         SELECT id FROM ins
                         UNION ALL
                         SELECT id FROM tournament_teams WHERE tournament_id = $1::int AND name = $2::text LIMIT 1`,
                        [finalTournamentId, sourceName, sourceCreatorId]
                    );
                    const finalTeamId = insertTeamRes.rows[0]?.id;

                    // 3) –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ—Å—Ç–∞–≤ (–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö, —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏—Ö)
                    if (isTeamSource && finalTeamId) {
                        const membersRes = await pool.query(
                            `SELECT user_id, participant_id, is_captain, captain_rating
                             FROM tournament_team_members WHERE team_id = $1::int`,
                            [refId]
                        );

                        // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
                        const finalMembersRes = await pool.query(
                            `SELECT user_id, participant_id FROM tournament_team_members WHERE team_id = $1::int`,
                            [finalTeamId]
                        );
                        const finalMembers = finalMembersRes.rows || [];

                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                        for (const m of (membersRes.rows || [])) {
                            let newUserId = m.user_id || null;
                            let newParticipantId = null;

                            // –ï—Å–ª–∏ –Ω–µ—Ç user_id, –Ω–æ –µ—Å—Ç—å participant_id ‚Äî —Å–æ–∑–¥–∞–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ñ–∏–Ω–∞–ª–µ —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
                            if (!newUserId && m.participant_id) {
                                const srcP = await pool.query(
                                    `SELECT name FROM tournament_participants WHERE id = $1::int`,
                                    [m.participant_id]
                                );
                                const pName = srcP.rows[0]?.name || ('Qualified #' + refId);
                                const insP = await pool.query(
                                    `WITH ins AS (
                                       INSERT INTO tournament_participants (tournament_id, user_id, name, in_team)
                                       SELECT $1::int, NULL, $2::text, false
                                       WHERE NOT EXISTS (
                                         SELECT 1 FROM tournament_participants p WHERE p.tournament_id = $1::int AND p.name = $2::text
                                       )
                                       RETURNING id
                                     )
                                     SELECT id FROM ins
                                     UNION ALL
                                     SELECT id FROM tournament_participants WHERE tournament_id = $1::int AND name = $2::text LIMIT 1`,
                                    [finalTournamentId, pName]
                                );
                                newParticipantId = insP.rows[0]?.id || null;
                            }

                            // –í—Å—Ç–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–∏–Ω–∞–ª–µ, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–µ–π –ø–æ user_id/participant_id
                            await pool.query(
                                `INSERT INTO tournament_team_members (team_id, user_id, participant_id, is_captain, captain_rating)
                                 SELECT $1::int, $2::int, $3::int, $4, $5
                                 WHERE NOT EXISTS (
                                   SELECT 1 FROM tournament_team_members ttm
                                   WHERE ttm.team_id = $1::int AND (
                                     (ttm.user_id IS NOT DISTINCT FROM $2::int)
                                     OR ($3::int IS NOT NULL AND ttm.participant_id IS NOT DISTINCT FROM $3::int)
                                   )
                                 )`,
                                [finalTeamId, newUserId, newParticipantId, !!m.is_captain, m.captain_rating || null]
                            );
                        }

                        // –ú—è–≥–∫–∞—è —á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å user_id, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
                        const sourceUserIds = (membersRes.rows || [])
                            .map(x => x.user_id)
                            .filter(uid => uid !== null && uid !== undefined);
                        if (sourceUserIds.length > 0) {
                            await pool.query(
                                `DELETE FROM tournament_team_members 
                                 WHERE team_id = $1::int 
                                   AND user_id IS NOT NULL 
                                   AND NOT (user_id = ANY($2::int[]))`,
                                [finalTeamId, sourceUserIds]
                            );
                        }
                    } else if (finalTeamId) {
                        // –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –¥–æ–±–∞–≤–∏–º –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–∫ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
                        const srcPartRes = await pool.query(
                            `SELECT tp.user_id, COALESCE(tp.name, u.username, 'Qualified #' || $3) AS name
                             FROM tournament_participants tp
                             LEFT JOIN users u ON u.id = tp.user_id
                             WHERE tp.id = $2::int`,
                            [finalTournamentId, refId, String(refId)]
                        );
                        const userId = srcPartRes.rows[0]?.user_id || null;
                        let participantId = null;
                        if (!userId) {
                            const name = srcPartRes.rows[0]?.name || ('Qualified #' + refId);
                            const insP = await pool.query(
                                `WITH ins AS (
                                   INSERT INTO tournament_participants (tournament_id, user_id, name, in_team)
                                   SELECT $1, NULL, $2, false
                                   WHERE NOT EXISTS (
                                     SELECT 1 FROM tournament_participants p WHERE p.tournament_id = $1 AND p.name = $2
                                   )
                                   RETURNING id
                                 )
                                 SELECT id FROM ins
                                 UNION ALL
                                 SELECT id FROM tournament_participants WHERE tournament_id = $1 AND name = $2 LIMIT 1`,
                                [finalTournamentId, name]
                            );
                            participantId = insP.rows[0]?.id || null;
                        }

                        await pool.query(
                            `INSERT INTO tournament_team_members (team_id, user_id, participant_id, is_captain, captain_rating)
                             SELECT $1::int, $2::int, $3::int, false, NULL
                             WHERE NOT EXISTS (
                               SELECT 1 FROM tournament_team_members ttm
                               WHERE ttm.team_id = $1::int AND (
                                 (ttm.user_id IS NOT DISTINCT FROM $2::int)
                                 OR ($3::int IS NOT NULL AND ttm.participant_id IS NOT DISTINCT FROM $3::int)
                               )
                             )`,
                            [finalTeamId, userId, participantId]
                        );
                        
                        // –ù–µ —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–ª–µ–Ω–æ–≤: —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    }
                } else {
                    // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–ª: –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    await pool.query(
                        `INSERT INTO tournament_participants (tournament_id, user_id, name, in_team)
                         SELECT $1, tp.user_id, COALESCE(tp.name, u.username, 'Qualified #' || $3), false
                         FROM tournament_participants tp
                         LEFT JOIN users u ON u.id = tp.user_id
                         WHERE tp.id = $2::int
                         AND NOT EXISTS (
                            SELECT 1 FROM tournament_participants p
                            WHERE p.tournament_id = $1 AND (p.user_id = tp.user_id OR p.name = COALESCE(tp.name, u.username))
                         )`,
                        [finalTournamentId, refId, String(refId)]
                    );
                }

                promotions.push({ qualifierId, refId, placed });
            }
        }

        // –õ–æ–≥ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è: –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –∫ –ø–∞–¥–µ–Ω–∏—é (–≤ –ë–î –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —Ç–∞–±–ª–∏—Ü—ã)
        try {
            await logAdvancement(finalTournamentId, userId, { type: 'manual_sync', promotions_count: promotions.length });
        } catch (e) {
            console.warn('‚ö†Ô∏è [TournamentLogService] –ü—Ä–æ–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:', e?.message || e);
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        try {
            const fullTournamentData = await this.getTournamentById(finalTournamentId);
            await broadcastTournamentUpdate(finalTournamentId, fullTournamentData, 'qualifiersSync');
        } catch (e) {
            console.warn('‚ö†Ô∏è [broadcastTournamentUpdate] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞', finalTournamentId, e?.message || e);
        }

        return { success: true, promotions };
    }

    /**
     * üÜï Live‚Äë–ø–æ–∏—Å–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
     */
    static async searchTournaments(q, status, limit = 20) {
        return TournamentRepository.searchTournaments(q, status, limit);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateTournament(tournamentId, updateData, userId) {
        console.log(`‚úèÔ∏è TournamentService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (tournament.status !== 'active') {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        }

        const updatedTournament = await TournamentRepository.update(tournamentId, updateData);

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateTournament');
        console.log(`üì° [updateTournament] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        console.log('‚úÖ TournamentService: –¢—É—Ä–Ω–∏—Ä –æ–±–Ω–æ–≤–ª–µ–Ω');
        return updatedTournament;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async deleteTournament(tournamentId, userId) {
        console.log(`üóëÔ∏è TournamentService: –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
        await this._checkTournamentDeletionAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // üóëÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        // –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –≤ –ª—é–±–æ–º —Å—Ç–∞—Ç—É—Å–µ
        console.log(`üóëÔ∏è [deleteTournament] –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}" (—Å—Ç–∞—Ç—É—Å: ${tournament.status})`);

        await TournamentRepository.delete(tournamentId);

        console.log('‚úÖ TournamentService: –¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª–µ–Ω');
    }

    /**
     * –ù–∞—á–∞–ª–æ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async startTournament(tournamentId, userId) {
        console.log(`üöÄ TournamentService: –ù–∞—á–∞–ª–æ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        
        // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–ê –¢–£–†–ù–ò–†–ê
        console.log(`üîç [startTournament] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, {
            id: tournament?.id,
            name: tournament?.name,
            status: tournament?.status,
            format: tournament?.format,
            created_by: tournament?.created_by,
            userId: userId,
            hasPermission: tournament?.created_by === userId
        });
        
        if (tournament.status !== 'active') {
            const errorMessage = `–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: "${tournament.status}"`;
            console.error(`‚ùå [startTournament] ${errorMessage}`);
            throw new Error(errorMessage);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
        const matchesCount = await MatchRepository.getCountByTournamentId(tournamentId);
        console.log(`üîç [startTournament] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ: ${matchesCount}`);
        
        if (matchesCount === 0) {
            const errorMessage = '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É';
            console.error(`‚ùå [startTournament] ${errorMessage}`);
            throw new Error(errorMessage);
        }

        // üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï BYE –ú–ê–¢–ß–ï–ô
        console.log(`üéØ [startTournament] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ BYE –º–∞—Ç—á–µ–π...`);
        const byeResults = await this._autoCompleteBYEMatches(tournamentId);
        console.log(`‚úÖ [startTournament] BYE –º–∞—Ç—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã:`, byeResults);

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        console.log(`üîÑ [startTournament] –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ —Å "${tournament.status}" –Ω–∞ "in_progress"`);
        await TournamentRepository.updateStatus(tournamentId, 'in_progress');

        // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ
        const updatedTournament = await this.getTournamentById(tournamentId);
        console.log(`‚úÖ [startTournament] –¢—É—Ä–Ω–∏—Ä –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: "${updatedTournament.status}"`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ endTournament)
        broadcastTournamentUpdate(tournamentId, updatedTournament, 'startTournament');
        console.log(`üì° [startTournament] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'tournament_started', {
            previous_status: tournament.status,
            new_status: 'in_progress'
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üöÄ –¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞—Ç! –£–¥–∞—á–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!`
        );

        console.log('‚úÖ TournamentService: –¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞—Ç');
        return { 
            success: true, 
            message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç' 
        };
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async endTournament(tournamentId, userId) {
        console.log(`üèÅ TournamentService: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        
        // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–ê –¢–£–†–ù–ò–†–ê
        console.log(`üîç [endTournament] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, {
            id: tournament?.id,
            name: tournament?.name,
            status: tournament?.status,
            format: tournament?.format,
            created_by: tournament?.created_by,
            userId: userId,
            hasPermission: tournament?.created_by === userId
        });
        
        if (tournament.status !== 'in_progress') {
            const errorMessage = `–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç—É—Ä–Ω–∏—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: "${tournament.status}"`;
            console.error(`‚ùå [endTournament] ${errorMessage}`);
            throw new Error(errorMessage);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
        const matchesCount = await MatchRepository.getCountByTournamentId(tournamentId);
        console.log(`üîç [endTournament] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ: ${matchesCount}`);
        
        if (matchesCount === 0) {
            const errorMessage = '–ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –±–µ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏';
            console.error(`‚ùå [endTournament] ${errorMessage}`);
            throw new Error(errorMessage);
        }

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        console.log(`üîÑ [endTournament] –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ —Å "${tournament.status}" –Ω–∞ "completed"`);
        await TournamentRepository.updateStatus(tournamentId, 'completed');

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournament = await this.getTournamentById(tournamentId);
        console.log(`‚úÖ [endTournament] –¢—É—Ä–Ω–∏—Ä –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: "${updatedTournament.status}"`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        broadcastTournamentUpdate(tournamentId, updatedTournament, 'endTournament');

        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        await logTournamentEvent(tournamentId, userId, 'tournament_ended', {
            participantCount: updatedTournament.participant_count,
            matchesCount: matchesCount,
            endedBy: userId
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await sendTournamentChatAnnouncement(
            tournamentId,
            `–¢—É—Ä–Ω–∏—Ä "${updatedTournament.name}" –∑–∞–≤–µ—Ä—à–µ–Ω`
        );

        // üÜï –ê–≤—Ç–æ‚Äë–ø—Ä–æ–º–æ: –µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–±–æ—Ä–æ—á–Ω—ã–º –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–Ω–∞–ª–æ–≤ ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        try {
            const finals = await TournamentRepository.getFinalsByQualifier(tournamentId);
            if (Array.isArray(finals) && finals.length > 0) {
                console.log(`üîÑ [endTournament] –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ‚Äë–ø—Ä–æ–º–æ: ${finals.length}`);
                for (const f of finals) {
                    if (!f.is_series_final) continue;
                    try {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ = –∞–≤—Ç–æ—Ä —Ñ–∏–Ω–∞–ª–∞ –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        await this.syncQualifiersToFinal(f.id, f.created_by || userId);
                        console.log(`‚úÖ [endTournament] –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ñ–∏–Ω–∞–ª ${f.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
                    } catch (e) {
                        console.warn(`‚ö†Ô∏è [endTournament] –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ñ–∏–Ω–∞–ª ${f.id} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, e.message);
                    }
                }
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è [endTournament] –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ‚Äë–ø—Ä–æ–º–æ:', e.message);
        }

        console.log('‚úÖ TournamentService: –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
        return updatedTournament;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
     */
    static async getGames() {
        console.log('üéÆ TournamentService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä');
        try {
            const games = await TournamentRepository.getGames();
            console.log(`‚úÖ TournamentService: –ü–æ–ª—É—á–µ–Ω–æ ${games.length} –∏–≥—Ä –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è`);
            return games;
        } catch (error) {
            console.error('‚ùå TournamentService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error);
            throw error;
        }
    }

    /**
     * –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async resetMatchResults(tournamentId, userId) {
        console.log(`üîÑ TournamentService: –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);

        const result = await TournamentRepository.resetMatchResults(tournamentId, userId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        const tournament = await TournamentRepository.getById(tournamentId);
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üîÑ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–±—Ä–æ—Å–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏. –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ê–∫—Ç–∏–≤–Ω—ã–π".`
        );

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'resetMatchResults');
        console.log(`üì° [resetMatchResults] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        console.log('‚úÖ TournamentService: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π —Å–±—Ä–æ—à–µ–Ω—ã');
        return result;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getTeams(tournamentId) {
        console.log(`üèÜ TournamentService: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return await TournamentRepository.getTeamsWithMembers(tournamentId);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateDescription(tournamentId, description, userId) {
        console.log(`üìù TournamentService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        await this._checkTournamentAccess(tournamentId, userId);
        const updatedTournament = await TournamentRepository.updateDescription(tournamentId, description);

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateDescription');
        console.log(`üì° [updateDescription] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        return updatedTournament;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateFullDescription(tournamentId, fullDescription, userId) {
        console.log(`üìú TournamentService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        await this._checkTournamentAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (tournament.status !== 'active') {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        }

        const updatedTournament = await TournamentRepository.updateFullDescription(tournamentId, fullDescription);

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateFullDescription');
        console.log(`üì° [updateFullDescription] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        return updatedTournament;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */

    static async updateRules(tournamentId, rules, userId) {
        console.log(`‚öñÔ∏è TournamentService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        await this._checkTournamentAccess(tournamentId, userId);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    // –†–µ–≥–ª–∞–º–µ–Ω—Ç –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–º —Å—Ç–∞—Ç—É—Å–µ —Ç—É—Ä–Ω–∏—Ä–∞ (active, completed, in_progress)
    
        const updatedTournament = await TournamentRepository.updateRules(tournamentId, rules);

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateRules');
        console.log(`üì° [updateRules] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        return updatedTournament;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updatePrizePool(tournamentId, prizePool, userId) {
        console.log(`üí∞ TournamentService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        await this._checkTournamentAccess(tournamentId, userId);
        const updatedTournament = await TournamentRepository.updatePrizePool(tournamentId, prizePool);

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updatePrizePool');
        console.log(`üì° [updatePrizePool] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        return updatedTournament;
    }

    /**
     * üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static async updateBracketType(tournamentId, bracketType, userId) {
        console.log(`üèÜ [TournamentService.updateBracketType] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${bracketType}"`);
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await this._checkTournamentCreatorAccess(tournamentId, userId);
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.status !== 'active') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
        const matchesCount = await TournamentRepository.getMatchesCount(tournamentId);
        if (matchesCount > 0) {
            throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Å–µ—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π');
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏
        const validBracketTypes = ['single_elimination', 'double_elimination'];
        if (!validBracketTypes.includes(bracketType)) {
            throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–µ—Ç–∫–∏: ${bracketType}`);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateBracketType(tournamentId, bracketType);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'bracket_type_changed', {
            old_bracket_type: tournament.bracket_type,
            new_bracket_type: bracketType
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        const bracketTypeNames = {
            'single_elimination': 'Single Elimination',
            'double_elimination': 'Double Elimination'
        };
        
        const message = `–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${bracketTypeNames[bracketType]}`;
        await sendTournamentChatAnnouncement(tournamentId, message);
        
        // Broadcast –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await broadcastTournamentUpdate(tournamentId, {
            type: 'bracket_type_updated',
            bracket_type: bracketType,
            message
        }, 'updateBracketType');
        
        console.log(`‚úÖ [TournamentService.updateBracketType] –¢–∏–ø —Å–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${bracketType}"`);
        return updatedTournament;
    }

    /**
     * üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
     */
    static async updateTeamSize(tournamentId, teamSize, userId) {
        console.log(`üë• [TournamentService.updateTeamSize] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ ${teamSize}`);
        
        // üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await this._checkTournamentCreatorAccess(tournamentId, userId);
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.format !== 'mix') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        if (tournament.status !== 'active') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        // üîß –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        const teamsCount = await TournamentRepository.getTeamsCount(tournamentId);
        let teamsDeleted = false;
        let matchesDeleted = false;
        
        if (teamsCount > 0) {
            console.log(`üóëÔ∏è [TournamentService.updateTeamSize] –ù–∞–π–¥–µ–Ω–æ ${teamsCount} –∫–æ–º–∞–Ω–¥, —É–¥–∞–ª—è–µ–º –∏—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞`);
            
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            const matchesCount = await TournamentRepository.getMatchesCount(tournamentId);
            if (matchesCount > 0) {
                console.log(`üóëÔ∏è [TournamentService.updateTeamSize] –£–¥–∞–ª—è–µ–º ${matchesCount} –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏`);
                await TournamentRepository.deleteMatches(tournamentId);
                matchesDeleted = true;
            }
            
            // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
            await TournamentRepository.deleteTeams(tournamentId);
            teamsDeleted = true;
            
            console.log(`‚úÖ [TournamentService.updateTeamSize] –£–¥–∞–ª–µ–Ω–æ ${teamsCount} –∫–æ–º–∞–Ω–¥ –∏ ${matchesCount} –º–∞—Ç—á–µ–π`);
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
        const validTeamSizes = [2, 3, 4, 5];
        if (!validTeamSizes.includes(teamSize)) {
            throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ${teamSize}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${validTeamSizes.join(', ')}`);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateTeamSize(tournamentId, teamSize);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'team_size_changed', {
            old_team_size: tournament.team_size,
            new_team_size: teamSize,
            teams_deleted: teamsDeleted,
            matches_deleted: matchesDeleted,
            teams_count: teamsDeleted ? teamsCount : 0
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        const sizeNames = {
            2: '2 –∏–≥—Ä–æ–∫–∞',
            3: '3 –∏–≥—Ä–æ–∫–∞',
            4: '4 –∏–≥—Ä–æ–∫–∞',
            5: '5 –∏–≥—Ä–æ–∫–æ–≤'
        };
        
        let message = `üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${sizeNames[teamSize]}`;
        
        if (teamsDeleted) {
            message += `\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${teamsCount} –∫–æ–º–∞–Ω–¥${matchesDeleted ? ' –∏ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞' : ''}`;
            message += `\nüîÑ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥`;
        }
        
        await sendTournamentChatAnnouncement(tournamentId, message);
        
        // Broadcast –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await broadcastTournamentUpdate(tournamentId, {
            type: 'team_size_updated',
            team_size: teamSize,
            message
        }, 'updateTeamSize');
        
        console.log(`‚úÖ [TournamentService.updateTeamSize] –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${teamSize}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É
        return {
            ...updatedTournament,
            teams_deleted: teamsDeleted,
            matches_deleted: matchesDeleted,
            deleted_teams_count: teamsDeleted ? teamsCount : 0
        };
    }

    /**
     * üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
     */
    static async updateRatingType(tournamentId, mixRatingType, userId) {
        console.log(`üéØ [TournamentService.updateRatingType] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ ${mixRatingType}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);
        
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.format !== 'mix') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        if (tournament.status !== 'active') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥)
        const teamsCount = await TournamentRepository.getTeamsCount(tournamentId);
        if (teamsCount > 0) {
            throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateMixRatingType(tournamentId, mixRatingType);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'rating_type_changed', {
            old_rating_type: tournament.mix_rating_type,
            new_rating_type: mixRatingType
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        const typeNames = {
            'faceit': 'FACEIT ELO',
            'premier': 'CS2 Premier Rank',
            'mixed': '–°–ª—É—á–∞–π–Ω—ã–π –º–∏–∫—Å'
        };
        
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üéØ –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${typeNames[mixRatingType]}`
        );

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateRatingType');
        console.log(`üì° [updateRatingType] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        
        console.log(`‚úÖ [updateRatingType] –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${mixRatingType}`);
        return updatedTournament;
    }

    /**
     * üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è MIX —Ç—É—Ä–Ω–∏—Ä–æ–≤
     */
    static async updateMixLinkRequirements(tournamentId, { require_faceit_linked, require_steam_linked }, userId) {
        console.log(`üîó [TournamentService.updateMixLinkRequirements] t=${tournamentId}, faceit=${require_faceit_linked}, steam=${require_steam_linked}`);

        await this._checkTournamentAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        if (tournament.format !== 'mix') throw new Error('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è MIX —Ç—É—Ä–Ω–∏—Ä–æ–≤');

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–ø—Ä–µ—â–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        let faceitReq = !!require_faceit_linked;
        let steamReq = !!require_steam_linked;
        if (tournament.mix_rating_type === 'faceit') steamReq = false;
        if (tournament.mix_rating_type === 'premier') faceitReq = false;
        if (tournament.mix_rating_type === 'mixed') { faceitReq = false; steamReq = false; }

        const updated = await TournamentRepository.updateMixLinkRequirements(tournamentId, faceitReq, steamReq);

        await logTournamentEvent(tournamentId, userId, 'mix_link_requirements_updated', {
            require_faceit_linked: faceitReq,
            require_steam_linked: steamReq
        });

        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateMixLinkRequirements');
        return updated;
    }

    /**
     * üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateGame(tournamentId, game, userId) {
        console.log(`üéÆ [TournamentService.updateGame] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${game}"`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);
        
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.status !== 'active') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ—Ç–∫—É (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏)
        const hasMatches = await this.hasMatches(tournamentId);
        if (hasMatches) {
            throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateGame(tournamentId, game);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'game_changed', {
            old_game: tournament.game,
            new_game: game
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üéÆ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${game}`
        );

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateGame');
        console.log(`üì° [updateGame] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        
        console.log(`‚úÖ [updateGame] –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${game}"`);
        return updatedTournament;
    }

    /**
     * üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateFormat(tournamentId, format, userId) {
        console.log(`üèÜ [TournamentService.updateFormat] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${format}"`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);
        
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.status !== 'active') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥—ã
        const participantsCount = await TournamentRepository.getParticipantsCount(tournamentId);
        const teamsCount = await TournamentRepository.getTeamsCount(tournamentId);
        
        if (participantsCount > 0 || teamsCount > 0) {
            throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateFormat(tournamentId, format);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'format_changed', {
            old_format: tournament.format,
            new_format: format
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        const formatNames = {
            'single_elimination': 'Single Elimination',
            'double_elimination': 'Double Elimination',
            'mix': '–ú–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä'
        };
        
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üèÜ –§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${formatNames[format]}`
        );

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateFormat');
        console.log(`üì° [updateFormat] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        
        console.log(`‚úÖ [updateFormat] –§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${format}"`);
        return updatedTournament;
    }

    /**
     * üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateStartDate(tournamentId, startDate, userId) {
        console.log(`üìÖ [TournamentService.updateStartDate] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${startDate}"`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);
        
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.status === 'completed') {
            throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º (—Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω–∏—Ü—ã –≤ 1 —á–∞—Å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –æ—à–∏–±–æ–∫)
        const now = new Date();
        const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
        
        if (startDate < oneHourAgo) {
            throw new Error('–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateStartDate(tournamentId, startDate);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'start_date_changed', {
            old_start_date: tournament.start_date,
            new_start_date: startDate
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üìÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${startDate.toLocaleString('ru-RU')}`
        );

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateStartDate');
        console.log(`üì° [updateStartDate] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        
        console.log(`‚úÖ [updateStartDate] –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${startDate}"`);
        return updatedTournament;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏
     */
    static async updateLobbyEnabled(tournamentId, lobbyEnabled, userId) {
        console.log(`üéÆ [TournamentService] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ ${lobbyEnabled}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏
        const updatedTournament = await TournamentRepository.update(tournamentId, {
            lobby_enabled: lobbyEnabled
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–æ–±–±–∏
        if (lobbyEnabled) {
            await MatchLobbyService.createLobbySettings(tournamentId, {
                enabled: true,
                matchFormat: null
            });
        }

        await logTournamentEvent(tournamentId, userId, 'lobby_settings_updated', {
            lobby_enabled: lobbyEnabled
        });

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateLobbyEnabled');
        console.log(`üì° [updateLobbyEnabled] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        console.log('‚úÖ [TournamentService] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        return updatedTournament;
    }

    /**
     * ‚úèÔ∏è –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async manualBracketEdit(tournamentId, bracketData, userId) {
        console.log(`‚úèÔ∏è TournamentService: –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await this._checkTournamentCreatorAccess(tournamentId, userId);
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.status === 'completed') {
            throw new Error('–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
        const matchesCount = await MatchRepository.getCountByTournamentId(tournamentId);
        if (matchesCount === 0) {
            throw new Error('–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Ç–∫—É. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–µ—Ç–∫—É —Ç—É—Ä–Ω–∏—Ä–∞');
        }

        console.log(`üìä [manualBracketEdit] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: –Ω–∞–π–¥–µ–Ω–æ ${matchesCount} –º–∞—Ç—á–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);

        const client = await pool.connect();
        let updatedMatches = 0;
        let clearedResults = 0;

        try {
            await client.query('BEGIN');

            // üîÑ –®–ê–ì 1: –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
            console.log(`üîÑ [manualBracketEdit] –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            
            const clearResultsQuery = `
                UPDATE matches SET 
                    winner_team_id = NULL,
                    score1 = NULL,
                    score2 = NULL,
                    status = 'pending'
                WHERE tournament_id = $1
                  AND (winner_team_id IS NOT NULL 
                       OR score1 IS NOT NULL 
                       OR score2 IS NOT NULL 
                       OR status != 'pending')
            `;
            
            const clearResult = await client.query(clearResultsQuery, [tournamentId]);
            clearedResults = clearResult.rowCount;
            
            console.log(`‚úÖ [manualBracketEdit] –û—á–∏—â–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${clearedResults}`);

            // ‚úèÔ∏è –®–ê–ì 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            console.log(`‚úèÔ∏è [manualBracketEdit] –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ ${bracketData.length} –º–∞—Ç—á–∞—Ö`);
            
            for (const matchUpdate of bracketData) {
                const { matchId, team1_id, team2_id } = matchUpdate;
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞
                if (!matchId || typeof matchId !== 'number') {
                    console.warn(`‚ö†Ô∏è [manualBracketEdit] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π matchId: ${matchId}`);
                    continue;
                }

                const updateQuery = `
                    UPDATE matches 
                    SET team1_id = $1,
                        team2_id = $2
                    WHERE id = $3 
                      AND tournament_id = $4
                      AND round = 1
                `;
                
                const result = await client.query(updateQuery, [
                    team1_id || null,
                    team2_id || null,
                    matchId,
                    tournamentId
                ]);
                
                if (result.rowCount > 0) {
                    updatedMatches++;
                    console.log(`‚úÖ [manualBracketEdit] –û–±–Ω–æ–≤–ª–µ–Ω –º–∞—Ç—á ${matchId}: team1=${team1_id}, team2=${team2_id}`);
                } else {
                    console.warn(`‚ö†Ô∏è [manualBracketEdit] –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ç—á ${matchId} –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
                }
            }

            // üîÑ –®–ê–ì 3: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            if (tournament.status === 'in_progress') {
                await client.query(
                    'UPDATE tournaments SET status = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
                    ['active', tournamentId]
                );
                console.log(`üîÑ [manualBracketEdit] –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω —Å "in_progress" –Ω–∞ "active"`);
            }

            await client.query('COMMIT');

            // üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            await logTournamentEvent(tournamentId, userId, 'manual_bracket_edit', {
                updatedMatches,
                clearedResults,
                previousStatus: tournament.status,
                bracketDataCount: bracketData.length
            });

            // üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
            await sendTournamentChatAnnouncement(
                tournamentId,
                `‚úèÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—Ä—É—á–Ω—É—é –∏–∑–º–µ–Ω–∏–ª —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. ` +
                `–û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞—Ç—á–µ–π: ${updatedMatches}, –æ—á–∏—â–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${clearedResults}. ` +
                `–¢—É—Ä–Ω–∏—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —Å –Ω–æ–≤–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–æ–π.`
            );

            // üÜï WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            const fullTournamentData = await this.getTournamentById(tournamentId);
            broadcastTournamentUpdate(tournamentId, fullTournamentData, 'manualBracketEdit');
            console.log(`üì° [manualBracketEdit] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

            console.log(`‚úÖ TournamentService: –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞—Ç—á–µ–π: ${updatedMatches}, –æ—á–∏—â–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${clearedResults}`);
            
            return {
                success: true,
                updatedMatches,
                clearedResults,
                message: '–†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
            };

        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [manualBracketEdit] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—É—Ä–Ω–∏—Ä—É
     * @private
     */
    static async _checkTournamentAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (!isAdmin) {
                throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ');
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)
     * @private
     */
    static async _checkTournamentDeletionAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
     * @private
     */
    static async _checkTournamentCreatorAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ');
        }
        
        return tournament;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ ID (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
     */
    static async getTournament(tournamentId) {
        console.log(`üîç [TournamentService] –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId}`);
        return await TournamentRepository.getById(tournamentId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    static async getTournamentDetails(tournamentId) {
        try {
            const tournament = await TournamentRepository.getByIdWithCreator(tournamentId);
            
            if (!tournament) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            let participants = [];
            let teams = [];
            // üÜï –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
            let admins = [];

            // üÜï –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ CS2 —Ç–∏–ø–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const isTeamTournament = ['team', 'cs2_classic_5v5', 'cs2_wingman_2v2'].includes(tournament.participant_type);
            const isSoloTournament = tournament.participant_type === 'solo';

            if (tournament.format === 'mix' || isSoloTournament) {
                participants = await ParticipantRepository.getByTournamentId(tournamentId);
                teams = await TeamRepository.getByTournamentId(tournamentId);
            } else if (isTeamTournament) {
                teams = await TournamentRepository.getTeamsWithMembers(tournamentId);
            }

            // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
            const matches = await MatchRepository.getByTournamentId(tournamentId);
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await TournamentRepository.getAdmins(tournamentId);

            // –î–æ–±–∞–≤–ª—è–µ–º CS2-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const enhancedTournament = this._enhanceWithCS2Info(tournament);

            return {
                ...enhancedTournament,
                participants,
                teams,
                matches,
                admins
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error.message);
            throw error;
        }
    }

    /**
     * üÜï –£–ª—É—á—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å CS2-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    static _enhanceWithCS2Info(tournament) {
        if (tournament.game === 'Counter-Strike 2' && tournament.format !== 'mix') {
            return {
                ...tournament,
                display_participant_type: this._getCS2DisplayName(tournament.participant_type),
                min_team_size: this._getCS2MinTeamSize(tournament.participant_type),
                is_cs2_tournament: true
            };
        }

        return {
            ...tournament,
            display_participant_type: this._getStandardDisplayName(tournament.participant_type),
            is_cs2_tournament: false
        };
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è CS2 —Ç–∏–ø–æ–≤
     */
    static _getCS2DisplayName(participantType) {
        const names = {
            'cs2_classic_5v5': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 5—Ö5',
            'cs2_wingman_2v2': 'Wingman 2—Ö2'
        };
        return names[participantType] || participantType;
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è CS2
     */
    static _getCS2MinTeamSize(participantType) {
        const sizes = {
            'cs2_classic_5v5': 5,
            'cs2_wingman_2v2': 2
        };
        return sizes[participantType] || 5;
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
     */
    static _getStandardDisplayName(participantType) {
        const names = {
            'team': '–ö–æ–º–∞–Ω–¥–Ω—ã–π',
            'solo': '–û–¥–∏–Ω–æ—á–Ω—ã–π'
        };
        return names[participantType] || participantType;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—É—Ä–Ω–∏—Ä–æ–º
     */
    static async checkUserPermission(tournamentId, userId, permission = 'general') {
        try {
            const tournament = await TournamentRepository.getById(tournamentId);
            if (!tournament) {
                return false;
            }

            // –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
            if (tournament.created_by === userId) {
                return true;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (isAdmin) {
                return true;
            }

            // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ CS2 —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∞
            if (['mix', 'cs2_classic_5v5', 'cs2_wingman_2v2'].includes(tournament.format) || 
                ['cs2_classic_5v5', 'cs2_wingman_2v2'].includes(tournament.participant_type)) {
                
                // –ü—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –º–∏–∫—Å –∏ CS2 —Ç—É—Ä–Ω–∏—Ä–æ–≤
                if (permission === 'manage_teams') {
                    return tournament.created_by === userId || isAdmin;
                }
            }

            return false;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error.message);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @returns {boolean} - –µ—Å—Ç—å –ª–∏ –º–∞—Ç—á–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
     */
    static async hasMatches(tournamentId) {
        console.log(`üîç [TournamentService] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId}`);
        
        try {
            const matchesCount = await MatchRepository.getCountByTournamentId(tournamentId);
            const hasMatches = matchesCount > 0;
            
            console.log(`üìä [hasMatches] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: ${matchesCount} –º–∞—Ç—á–µ–π, hasMatches: ${hasMatches}`);
            return hasMatches;
            
        } catch (error) {
            console.error(`‚ùå [hasMatches] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    static async getWinners(limit = 5) {
        try {
            const result = await pool.query(`
                WITH recent AS (
                    SELECT t.*
                    FROM tournaments t
                    WHERE t.status = 'completed'
                    ORDER BY COALESCE(t.completed_at, t.end_date, t.updated_at, t.created_at) DESC, t.id DESC
                    LIMIT $1
                ), winners AS (
                    SELECT 
                        r.id AS tournament_id,
                        r.name AS tournament_name,
                        r.game,
                        COALESCE(r.completed_at, r.end_date, r.updated_at, r.created_at) AS date,
                        COALESCE(
                            (
                                SELECT m.winner_team_id FROM matches m
                                WHERE m.tournament_id = r.id
                                  AND m.bracket_type = 'grand_final_reset'
                                  AND m.winner_team_id IS NOT NULL
                                ORDER BY m.id DESC LIMIT 1
                            ),
                            (
                                SELECT m.winner_team_id FROM matches m
                                WHERE m.tournament_id = r.id
                                  AND m.bracket_type IN ('grand_final','final')
                                  AND m.winner_team_id IS NOT NULL
                                ORDER BY m.id DESC LIMIT 1
                            ),
                            (
                                SELECT m.winner_team_id FROM matches m
                                WHERE m.tournament_id = r.id
                                  AND m.winner_team_id IS NOT NULL
                                ORDER BY m.id DESC LIMIT 1
                            )
                        ) AS winner_ref_id
                    FROM recent r
                )
                SELECT 
                    w.tournament_id AS id,
                    w.tournament_name,
                    w.game,
                    w.date,
                    COALESCE(tt.name, u.username, tp.name) AS winner_name,
                    CASE 
                        WHEN tt.id IS NOT NULL THEN tt.id
                        WHEN u.id IS NOT NULL THEN u.id
                        ELSE NULL
                    END AS winner_id,
                    ('$' || COALESCE(t.prize_pool, '50000')) AS prize
                FROM winners w
                JOIN tournaments t ON t.id = w.tournament_id
                LEFT JOIN tournament_teams tt ON tt.id = w.winner_ref_id
                LEFT JOIN tournament_participants tp ON tp.id = w.winner_ref_id
                LEFT JOIN users u ON u.id = tp.user_id
                ORDER BY w.date DESC NULLS LAST, w.tournament_id DESC
            `, [limit]);

            return result.rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', error);
            throw error;
        }
    }

    /**
     * üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï BYE –ú–ê–¢–ß–ï–ô
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –º–∞—Ç—á–∏ –≥–¥–µ –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ - BYE
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
     */
    static async _autoCompleteBYEMatches(tournamentId) {
        const pool = require('../../db');
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
            const matchesResult = await client.query(`
                SELECT id, round, match_number, team1_id, team2_id,
                       winner_team_id, next_match_id, loser_next_match_id,
                       bracket_type, status
                FROM matches
                WHERE tournament_id = $1
                  AND winner_team_id IS NULL
                  AND status = 'pending'
                  AND (team1_id IS NOT NULL OR team2_id IS NOT NULL) -- –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ç—á–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
                ORDER BY round, match_number
            `, [tournamentId]);
            
            const matches = matchesResult.rows;
            console.log(`üîç [_autoCompleteBYEMatches] –ù–∞–π–¥–µ–Ω–æ ${matches.length} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π`);
            
            const stats = {
                totalProcessed: 0,
                singleBYEMatches: 0,
                doubleBYEMatches: 0,
                regularMatches: 0,
                advancedParticipants: 0
            };
            
            for (const match of matches) {
                const { id, team1_id, team2_id, next_match_id, loser_next_match_id } = match;
                const isSingleBYE = (team1_id && !team2_id) || (!team1_id && team2_id);
                const isDoubleBYE = !team1_id && !team2_id;
                
                stats.totalProcessed++;
                
                if (isSingleBYE) {
                    // –ú–∞—Ç—á —Å –æ–¥–Ω–∏–º —Ä–µ–∞–ª—å–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ—Ç–∏–≤ BYE
                    const winnerId = team1_id || team2_id;
                    console.log(`üéØ [BYE] –ú–∞—Ç—á ${match.match_number}: –£—á–∞—Å—Ç–Ω–∏–∫ ${winnerId} –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
                    
                    // –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Ç—á –ø–æ–±–µ–¥–æ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    await client.query(`
                        UPDATE matches 
                        SET winner_team_id = $1, score1 = 1, score2 = 0, 
                            status = 'completed'
                        WHERE id = $2
                    `, [winnerId, id]);
                    
                    // –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
                    if (next_match_id) {
                        await this._advanceWinnerToNextMatch(client, winnerId, next_match_id);
                        stats.advancedParticipants++;
                    }
                    
                    stats.singleBYEMatches++;
                    
                } else if (isDoubleBYE) {
                    // –ë–æ–ª—å—à–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—É—Å—Ç—ã–µ placeholder-–º–∞—Ç—á–∏ (–æ–±–∞ —Å–ª–æ—Ç–∞ NULL)
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ö, —á—Ç–æ–±—ã –Ω–∏–∂–Ω—è—è —Å–µ—Ç–∫–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –æ–∂–∏–¥–∞—é—â–µ–π –≤—Ö–æ–¥—è—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    stats.doubleBYEMatches++;
                } else {
                    // –û–±—ã—á–Ω—ã–π –º–∞—Ç—á —Å –¥–≤—É–º—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
                    stats.regularMatches++;
                }
            }
            
            await client.query('COMMIT');
            console.log(`‚úÖ [_autoCompleteBYEMatches] –ó–∞–≤–µ—Ä—à–µ–Ω–æ:`, stats);
            
            // üÜï –≠—Ç–∞–ø 2: –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ BYE vs BYE –≤ –ª—É–∑–µ—Ä–∞—Ö, –∫–æ–≥–¥–∞ –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –º–∞—Ç—á–∏ –∑–∞–∫—Ä—ã—Ç—ã
            const secondStage = await this._autoCompleteLosersDoubleBYEPlaceholders(tournamentId);
            console.log(`‚úÖ [_autoCompleteBYEMatches] –≠—Ç–∞–ø 2 (–ª—É–∑–µ—Ä—ã BYE vs BYE):`, secondStage);
            
            return { ...stats, secondStage };
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [_autoCompleteBYEMatches] –û—à–∏–±–∫–∞:`, error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üÜï –≠–¢–ê–ü 2: –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ç—á–µ–π BYE vs BYE –≤ –Ω–∏–∂–Ω–µ–π —Å–µ—Ç–∫–µ,
     * –∫–æ–≥–¥–∞ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ (–≤—Ö–æ–¥—è—â–∏–µ) –º–∞—Ç—á–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
     */
    static async _autoCompleteLosersDoubleBYEPlaceholders(tournamentId) {
        const pool = require('../../db');
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            // –í—ã–±–∏—Ä–∞–µ–º –º–∞—Ç—á–∏ –ª—É–∑–µ—Ä–æ–≤ –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ–∂–∏–¥–∞—é—â–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π
            const selectRes = await client.query(`
                SELECT m.id
                FROM matches m
                WHERE m.tournament_id = $1
                  AND m.status = 'pending'
                  AND m.team1_id IS NULL AND m.team2_id IS NULL
                  AND m.bracket_type IN ('loser','loser_semifinal','loser_final')
                  AND NOT EXISTS (
                      SELECT 1 FROM matches u
                      WHERE u.tournament_id = m.tournament_id
                        AND (u.loser_next_match_id = m.id OR u.next_match_id = m.id)
                        AND u.status <> 'completed'
                  )
            `, [tournamentId]);

            const ids = selectRes.rows.map(r => r.id);
            let updated = 0;
            if (ids.length) {
                const updRes = await client.query(`
                    UPDATE matches
                    SET status = 'completed', score1 = 0, score2 = 0, maps_data = NULL
                    WHERE id = ANY($1)
                `, [ids]);
                updated = updRes.rowCount;
            }

            await client.query('COMMIT');
            return { placeholdersCompleted: updated, matchIds: ids };
        } catch (error) {
            await client.query('ROLLBACK');
            console.error('‚ùå [_autoCompleteLosersDoubleBYEPlaceholders] –û—à–∏–±–∫–∞:', error.message);
            return { placeholdersCompleted: 0, error: error.message };
        } finally {
            client.release();
        }
    }

    /**
     * üéØ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
     */
    static async _advanceWinnerToNextMatch(client, winnerId, nextMatchId) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ
        const nextMatchResult = await client.query(
            'SELECT team1_id, team2_id FROM matches WHERE id = $1',
            [nextMatchId]
        );
        
        if (nextMatchResult.rows.length === 0) {
            console.warn(`‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á ${nextMatchId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        
        const nextMatch = nextMatchResult.rows[0];
        
        if (!nextMatch.team1_id) {
            // –†–∞–∑–º–µ—â–∞–µ–º –≤ –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            await client.query(
                'UPDATE matches SET team1_id = $1 WHERE id = $2',
                [winnerId, nextMatchId]
            );
            console.log(`   ‚ÜóÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ ${winnerId} —Ä–∞–∑–º–µ—â–µ–Ω –≤ team1 –º–∞—Ç—á–∞ ${nextMatchId}`);
        } else if (!nextMatch.team2_id) {
            // –†–∞–∑–º–µ—â–∞–µ–º –≤–æ –≤—Ç–æ—Ä—É—é –ø–æ–∑–∏—Ü–∏—é
            await client.query(
                'UPDATE matches SET team2_id = $1 WHERE id = $2',
                [winnerId, nextMatchId]
            );
            console.log(`   ‚ÜóÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫ ${winnerId} —Ä–∞–∑–º–µ—â–µ–Ω –≤ team2 –º–∞—Ç—á–∞ ${nextMatchId}`);
        } else {
            console.warn(`‚ö†Ô∏è –ú–∞—Ç—á ${nextMatchId} —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω: team1=${nextMatch.team1_id}, team2=${nextMatch.team2_id}`);
        }
    }

    /**
     * üîÑ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ BYE –≤ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
     */
    static async _advanceBYEToNextMatch(client, nextMatchId) {
        // –î–ª—è BYE –º–∞—Ç—á–µ–π –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º - —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        console.log(`   ‚ÜóÔ∏è BYE –ø–µ—Ä–µ–¥–∞–Ω –≤ –º–∞—Ç—á ${nextMatchId} (–ø–æ–∑–∏—Ü–∏—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç–æ–π)`);
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ BYE –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á - –ø–æ–∑–∏—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è NULL
    }
}

module.exports = TournamentService; 