const pool = require('../../db');
const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const MatchRepository = require('../../repositories/tournament/MatchRepository');
const TeamRepository = require('../../repositories/tournament/TeamRepository');
const ChatService = require('../tournament/ChatService');
const MatchLobbyService = require('../matchLobby/MatchLobbyService');
const { logTournamentEvent, logAdvancement } = require('./TournamentLogService');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { broadcastTournamentUpdate } = require('../../notifications');

class TournamentService {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static async getAllTournaments() {
        console.log('üîç TournamentService: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        return await TournamentRepository.getAllWithParticipantCount();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ ID —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    static async getTournamentById(tournamentId) {
        const startTime = Date.now();
        console.log(`üîç [TournamentService] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
            const tournament = await TournamentRepository.getByIdWithCreator(tournamentId);
            if (!tournament) {
                return null;
            }
            console.log(`üèÜ [getTournamentById] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: ${tournament.name}, —Ñ–æ—Ä–º–∞—Ç: ${tournament.format}, —Å—Ç–∞—Ç—É—Å: ${tournament.status}`);

            // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            const admins = await TournamentRepository.getAdmins(tournamentId);
            console.log(`üë• [getTournamentById] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: –Ω–∞–π–¥–µ–Ω–æ ${admins.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`);

            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const participants = await ParticipantRepository.getByTournamentId(tournamentId);
            console.log(`üéØ [getTournamentById] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: –Ω–∞–π–¥–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);

            // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
            const matches = await MatchRepository.getByTournamentId(tournamentId);
            console.log(`‚öîÔ∏è [getTournamentById] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: –Ω–∞–π–¥–µ–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π`);
            
            // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø –ú–ò–ö–° –¢–£–†–ù–ò–†–û–í
            if (tournament.format === 'mix') {
                console.log(`üß© [getTournamentById] –ú–ò–ö–° –¢–£–†–ù–ò–† ${tournamentId} - –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:`);
                console.log(`   üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}`);
                console.log(`   ‚öîÔ∏è –ú–∞—Ç—á–µ–π –≤ –±–∞–∑–µ: ${matches.length}`);
                
                if (matches.length > 0) {
                    console.log(`   üéØ –ü–µ—Ä–≤—ã–π –º–∞—Ç—á:`, {
                        id: matches[0].id,
                        team1_id: matches[0].team1_id,
                        team2_id: matches[0].team2_id,
                        round: matches[0].round,
                        bracket_type: matches[0].bracket_type
                    });
                    console.log(`   üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á:`, {
                        id: matches[matches.length - 1].id,
                        team1_id: matches[matches.length - 1].team1_id,
                        team2_id: matches[matches.length - 1].team2_id,
                        round: matches[matches.length - 1].round,
                        bracket_type: matches[matches.length - 1].bracket_type
                    });
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            let teams = [];
            if (tournament.format === 'mix' || tournament.participant_type === 'team') {
                teams = await TournamentRepository.getTeamsWithMembers(tournamentId);
                console.log(`üèÜ [getTournamentById] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: –Ω–∞–π–¥–µ–Ω–æ ${teams.length} –∫–æ–º–∞–Ω–¥`);
                
                // üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø –ö–û–ú–ê–ù–î
                if (tournament.format === 'mix' && teams.length > 0) {
                    console.log(`   üß© –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞:`, {
                        id: teams[0].id,
                        name: teams[0].name,
                        members_count: teams[0].members ? teams[0].members.length : 0
                    });
                }
            }

            const result = {
                ...tournament,
                creator_name: tournament.creator_username,
                creator_avatar_url: tournament.creator_avatar_url,
                participants: participants,
                participant_count: participants.length,
                matches: matches,
                teams: teams,
                mixed_teams: teams,
                admins: admins
            };

            const endTime = Date.now();
            console.log(`‚úÖ [TournamentService] –¢—É—Ä–Ω–∏—Ä ${tournamentId} –ø–æ–ª—É—á–µ–Ω –∑–∞ ${endTime - startTime}ms`);
            console.log(`üìã [getTournamentById] –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, {
                name: result.name,
                format: result.format,
                status: result.status,
                participants_count: result.participants.length,
                matches_count: result.matches.length,
                teams_count: result.teams.length,
                admins_count: result.admins.length
            });
            
            // üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–û–ó–í–†–ê–©–ê–ï–ú–´–• –ú–ê–¢–ß–ï–ô
            console.log(`üîç [getTournamentById] –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ú–ê–¢–ß–ï–ô –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`);
            console.log(`   üìä result.matches is Array: ${Array.isArray(result.matches)}`);
            console.log(`   üìä result.matches length: ${result.matches ? result.matches.length : 'undefined'}`);
            if (result.matches && result.matches.length > 0) {
                console.log(`   üéØ –ü–µ—Ä–≤—ã–π –º–∞—Ç—á –≤ result:`, {
                    id: result.matches[0].id,
                    tournament_id: result.matches[0].tournament_id,
                    team1_id: result.matches[0].team1_id,
                    team2_id: result.matches[0].team2_id,
                    round: result.matches[0].round
                });
            } else {
                console.log(`   ‚ö†Ô∏è result.matches –ø—É—Å—Ç–æ–π –∏–ª–∏ undefined!`);
            }

            return result;

        } catch (error) {
            console.error(`‚ùå [TournamentService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async createTournament(tournamentData, userId) {
        console.log('‚ûï TournamentService: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞', tournamentData);

        const {
            name, game, format, participant_type, max_participants,
            start_date, description, bracket_type, team_size, mix_rating_type,
            lobby_enabled, lobby_match_format, selected_maps
        } = tournamentData;

        const tournament = await TournamentRepository.create({
            name,
            game,
            format,
            created_by: userId,
            status: 'active',
            participant_type,
            max_participants: max_participants || null,
            start_date: start_date || null,
            description: description || null,
            bracket_type: bracket_type || null,
            team_size: team_size || 1,
            mix_rating_type: (format === 'mix' && mix_rating_type) ? mix_rating_type : null,
            lobby_enabled: lobby_enabled || false
        });

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏, —Å–æ–∑–¥–∞–µ–º –∏—Ö
        if (lobby_enabled && selected_maps && selected_maps.length === 7) {
            await MatchLobbyService.createLobbySettings(tournament.id, {
                enabled: true,
                matchFormat: lobby_match_format
            });
            
            await MatchLobbyService.setTournamentMaps(tournament.id, selected_maps);
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        await logTournamentEvent(tournament.id, userId, 'tournament_created', {
            name: tournament.name,
            game: tournament.game,
            format: tournament.format,
            mix_rating_type: tournament.mix_rating_type,
            lobby_enabled: tournament.lobby_enabled
        });

        console.log('‚úÖ TournamentService: –¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω', tournament);
        return tournament;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateTournament(tournamentId, updateData, userId) {
        console.log(`‚úèÔ∏è TournamentService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (tournament.status !== 'active') {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        }

        const updatedTournament = await TournamentRepository.update(tournamentId, updateData);

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateTournament');
        console.log(`üì° [updateTournament] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        console.log('‚úÖ TournamentService: –¢—É—Ä–Ω–∏—Ä –æ–±–Ω–æ–≤–ª–µ–Ω');
        return updatedTournament;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async deleteTournament(tournamentId, userId) {
        console.log(`üóëÔ∏è TournamentService: –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
        await this._checkTournamentDeletionAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // üóëÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        // –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –≤ –ª—é–±–æ–º —Å—Ç–∞—Ç—É—Å–µ
        console.log(`üóëÔ∏è [deleteTournament] –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}" (—Å—Ç–∞—Ç—É—Å: ${tournament.status})`);

        await TournamentRepository.delete(tournamentId);

        console.log('‚úÖ TournamentService: –¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª–µ–Ω');
    }

    /**
     * –ù–∞—á–∞–ª–æ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async startTournament(tournamentId, userId) {
        console.log(`üöÄ TournamentService: –ù–∞—á–∞–ª–æ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        
        // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–ê –¢–£–†–ù–ò–†–ê
        console.log(`üîç [startTournament] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, {
            id: tournament?.id,
            name: tournament?.name,
            status: tournament?.status,
            format: tournament?.format,
            created_by: tournament?.created_by,
            userId: userId,
            hasPermission: tournament?.created_by === userId
        });
        
        if (tournament.status !== 'active') {
            const errorMessage = `–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: "${tournament.status}"`;
            console.error(`‚ùå [startTournament] ${errorMessage}`);
            throw new Error(errorMessage);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
        const matchesCount = await MatchRepository.getCountByTournamentId(tournamentId);
        console.log(`üîç [startTournament] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ: ${matchesCount}`);
        
        if (matchesCount === 0) {
            const errorMessage = '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É';
            console.error(`‚ùå [startTournament] ${errorMessage}`);
            throw new Error(errorMessage);
        }

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        console.log(`üîÑ [startTournament] –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ —Å "${tournament.status}" –Ω–∞ "in_progress"`);
        await TournamentRepository.updateStatus(tournamentId, 'in_progress');

        // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ
        const updatedTournament = await this.getTournamentById(tournamentId);
        console.log(`‚úÖ [startTournament] –¢—É—Ä–Ω–∏—Ä –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: "${updatedTournament.status}"`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ endTournament)
        broadcastTournamentUpdate(tournamentId, updatedTournament, 'startTournament');
        console.log(`üì° [startTournament] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'tournament_started', {
            previous_status: tournament.status,
            new_status: 'in_progress'
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üöÄ –¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞—Ç! –£–¥–∞—á–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!`
        );

        console.log('‚úÖ TournamentService: –¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞—Ç');
        return { 
            success: true, 
            message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç' 
        };
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async endTournament(tournamentId, userId) {
        console.log(`üèÅ TournamentService: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        
        // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–ê –¢–£–†–ù–ò–†–ê
        console.log(`üîç [endTournament] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, {
            id: tournament?.id,
            name: tournament?.name,
            status: tournament?.status,
            format: tournament?.format,
            created_by: tournament?.created_by,
            userId: userId,
            hasPermission: tournament?.created_by === userId
        });
        
        if (tournament.status !== 'in_progress') {
            const errorMessage = `–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç—É—Ä–Ω–∏—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: "${tournament.status}"`;
            console.error(`‚ùå [endTournament] ${errorMessage}`);
            throw new Error(errorMessage);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
        const matchesCount = await MatchRepository.getCountByTournamentId(tournamentId);
        console.log(`üîç [endTournament] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ: ${matchesCount}`);
        
        if (matchesCount === 0) {
            const errorMessage = '–ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä –±–µ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏';
            console.error(`‚ùå [endTournament] ${errorMessage}`);
            throw new Error(errorMessage);
        }

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        console.log(`üîÑ [endTournament] –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ —Å "${tournament.status}" –Ω–∞ "completed"`);
        await TournamentRepository.updateStatus(tournamentId, 'completed');

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournament = await this.getTournamentById(tournamentId);
        console.log(`‚úÖ [endTournament] –¢—É—Ä–Ω–∏—Ä –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: "${updatedTournament.status}"`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        broadcastTournamentUpdate(tournamentId, updatedTournament, 'endTournament');

        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        await logTournamentEvent(tournamentId, userId, 'tournament_ended', {
            participantCount: updatedTournament.participant_count,
            matchesCount: matchesCount,
            endedBy: userId
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await sendTournamentChatAnnouncement(
            tournamentId,
            `–¢—É—Ä–Ω–∏—Ä "${updatedTournament.name}" –∑–∞–≤–µ—Ä—à–µ–Ω`
        );

        console.log('‚úÖ TournamentService: –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
        return updatedTournament;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
     */
    static async getGames() {
        console.log('üéÆ TournamentService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä');
        try {
            const games = await TournamentRepository.getGames();
            console.log(`‚úÖ TournamentService: –ü–æ–ª—É—á–µ–Ω–æ ${games.length} –∏–≥—Ä –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è`);
            return games;
        } catch (error) {
            console.error('‚ùå TournamentService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error);
            throw error;
        }
    }

    /**
     * –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async resetMatchResults(tournamentId, userId) {
        console.log(`üîÑ TournamentService: –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);

        const result = await TournamentRepository.resetMatchResults(tournamentId, userId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        const tournament = await TournamentRepository.getById(tournamentId);
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üîÑ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–±—Ä–æ—Å–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏. –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ê–∫—Ç–∏–≤–Ω—ã–π".`
        );

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'resetMatchResults');
        console.log(`üì° [resetMatchResults] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        console.log('‚úÖ TournamentService: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π —Å–±—Ä–æ—à–µ–Ω—ã');
        return result;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getTeams(tournamentId) {
        console.log(`üèÜ TournamentService: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return await TournamentRepository.getTeamsWithMembers(tournamentId);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateDescription(tournamentId, description, userId) {
        console.log(`üìù TournamentService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        await this._checkTournamentAccess(tournamentId, userId);
        const updatedTournament = await TournamentRepository.updateDescription(tournamentId, description);

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateDescription');
        console.log(`üì° [updateDescription] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        return updatedTournament;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateFullDescription(tournamentId, fullDescription, userId) {
        console.log(`üìú TournamentService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        await this._checkTournamentAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (tournament.status !== 'active') {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        }

        const updatedTournament = await TournamentRepository.updateFullDescription(tournamentId, fullDescription);

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateFullDescription');
        console.log(`üì° [updateFullDescription] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        return updatedTournament;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */

    static async updateRules(tournamentId, rules, userId) {
        console.log(`‚öñÔ∏è TournamentService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        await this._checkTournamentAccess(tournamentId, userId);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    // –†–µ–≥–ª–∞–º–µ–Ω—Ç –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–º —Å—Ç–∞—Ç—É—Å–µ —Ç—É—Ä–Ω–∏—Ä–∞ (active, completed, in_progress)
    
        const updatedTournament = await TournamentRepository.updateRules(tournamentId, rules);

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateRules');
        console.log(`üì° [updateRules] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        return updatedTournament;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updatePrizePool(tournamentId, prizePool, userId) {
        console.log(`üí∞ TournamentService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        await this._checkTournamentAccess(tournamentId, userId);
        const updatedTournament = await TournamentRepository.updatePrizePool(tournamentId, prizePool);

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updatePrizePool');
        console.log(`üì° [updatePrizePool] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        return updatedTournament;
    }

    /**
     * üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static async updateBracketType(tournamentId, bracketType, userId) {
        console.log(`üèÜ [TournamentService.updateBracketType] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${bracketType}"`);
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await this._checkTournamentCreatorAccess(tournamentId, userId);
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.status !== 'active') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
        const matchesCount = await TournamentRepository.getMatchesCount(tournamentId);
        if (matchesCount > 0) {
            throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Å–µ—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π');
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏
        const validBracketTypes = ['single_elimination', 'double_elimination'];
        if (!validBracketTypes.includes(bracketType)) {
            throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–µ—Ç–∫–∏: ${bracketType}`);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateBracketType(tournamentId, bracketType);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'bracket_type_changed', {
            old_bracket_type: tournament.bracket_type,
            new_bracket_type: bracketType
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        const bracketTypeNames = {
            'single_elimination': 'Single Elimination',
            'double_elimination': 'Double Elimination'
        };
        
        const message = `–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${bracketTypeNames[bracketType]}`;
        await sendTournamentChatAnnouncement(tournamentId, message);
        
        // Broadcast –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await broadcastTournamentUpdate(tournamentId, {
            type: 'bracket_type_updated',
            bracket_type: bracketType,
            message
        }, 'updateBracketType');
        
        console.log(`‚úÖ [TournamentService.updateBracketType] –¢–∏–ø —Å–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${bracketType}"`);
        return updatedTournament;
    }

    /**
     * üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
     */
    static async updateTeamSize(tournamentId, teamSize, userId) {
        console.log(`üë• [TournamentService.updateTeamSize] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ ${teamSize}`);
        
        // üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await this._checkTournamentCreatorAccess(tournamentId, userId);
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.format !== 'mix') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        if (tournament.status !== 'active') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        // üîß –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        const teamsCount = await TournamentRepository.getTeamsCount(tournamentId);
        let teamsDeleted = false;
        let matchesDeleted = false;
        
        if (teamsCount > 0) {
            console.log(`üóëÔ∏è [TournamentService.updateTeamSize] –ù–∞–π–¥–µ–Ω–æ ${teamsCount} –∫–æ–º–∞–Ω–¥, —É–¥–∞–ª—è–µ–º –∏—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞`);
            
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            const matchesCount = await TournamentRepository.getMatchesCount(tournamentId);
            if (matchesCount > 0) {
                console.log(`üóëÔ∏è [TournamentService.updateTeamSize] –£–¥–∞–ª—è–µ–º ${matchesCount} –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏`);
                await TournamentRepository.deleteMatches(tournamentId);
                matchesDeleted = true;
            }
            
            // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
            await TournamentRepository.deleteTeams(tournamentId);
            teamsDeleted = true;
            
            console.log(`‚úÖ [TournamentService.updateTeamSize] –£–¥–∞–ª–µ–Ω–æ ${teamsCount} –∫–æ–º–∞–Ω–¥ –∏ ${matchesCount} –º–∞—Ç—á–µ–π`);
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
        const validTeamSizes = [2, 3, 4, 5];
        if (!validTeamSizes.includes(teamSize)) {
            throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ${teamSize}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${validTeamSizes.join(', ')}`);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateTeamSize(tournamentId, teamSize);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'team_size_changed', {
            old_team_size: tournament.team_size,
            new_team_size: teamSize,
            teams_deleted: teamsDeleted,
            matches_deleted: matchesDeleted,
            teams_count: teamsDeleted ? teamsCount : 0
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        const sizeNames = {
            2: '2 –∏–≥—Ä–æ–∫–∞',
            3: '3 –∏–≥—Ä–æ–∫–∞',
            4: '4 –∏–≥—Ä–æ–∫–∞',
            5: '5 –∏–≥—Ä–æ–∫–æ–≤'
        };
        
        let message = `üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${sizeNames[teamSize]}`;
        
        if (teamsDeleted) {
            message += `\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${teamsCount} –∫–æ–º–∞–Ω–¥${matchesDeleted ? ' –∏ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞' : ''}`;
            message += `\nüîÑ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥`;
        }
        
        await sendTournamentChatAnnouncement(tournamentId, message);
        
        // Broadcast –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await broadcastTournamentUpdate(tournamentId, {
            type: 'team_size_updated',
            team_size: teamSize,
            message
        }, 'updateTeamSize');
        
        console.log(`‚úÖ [TournamentService.updateTeamSize] –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${teamSize}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É
        return {
            ...updatedTournament,
            teams_deleted: teamsDeleted,
            matches_deleted: matchesDeleted,
            deleted_teams_count: teamsDeleted ? teamsCount : 0
        };
    }

    /**
     * üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
     */
    static async updateRatingType(tournamentId, mixRatingType, userId) {
        console.log(`üéØ [TournamentService.updateRatingType] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ ${mixRatingType}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);
        
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.format !== 'mix') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        if (tournament.status !== 'active') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥)
        const teamsCount = await TournamentRepository.getTeamsCount(tournamentId);
        if (teamsCount > 0) {
            throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateMixRatingType(tournamentId, mixRatingType);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'rating_type_changed', {
            old_rating_type: tournament.mix_rating_type,
            new_rating_type: mixRatingType
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        const typeNames = {
            'faceit': 'FACEIT ELO',
            'premier': 'CS2 Premier Rank',
            'mixed': '–°–ª—É—á–∞–π–Ω—ã–π –º–∏–∫—Å'
        };
        
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üéØ –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${typeNames[mixRatingType]}`
        );

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateRatingType');
        console.log(`üì° [updateRatingType] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        
        console.log(`‚úÖ [updateRatingType] –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${mixRatingType}`);
        return updatedTournament;
    }

    /**
     * üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateGame(tournamentId, game, userId) {
        console.log(`üéÆ [TournamentService.updateGame] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${game}"`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);
        
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.status !== 'active') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ—Ç–∫—É (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏)
        const hasMatches = await this.hasMatches(tournamentId);
        if (hasMatches) {
            throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateGame(tournamentId, game);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'game_changed', {
            old_game: tournament.game,
            new_game: game
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üéÆ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${game}`
        );

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateGame');
        console.log(`üì° [updateGame] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        
        console.log(`‚úÖ [updateGame] –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${game}"`);
        return updatedTournament;
    }

    /**
     * üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateFormat(tournamentId, format, userId) {
        console.log(`üèÜ [TournamentService.updateFormat] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${format}"`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);
        
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.status !== 'active') {
            throw new Error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥—ã
        const participantsCount = await TournamentRepository.getParticipantsCount(tournamentId);
        const teamsCount = await TournamentRepository.getTeamsCount(tournamentId);
        
        if (participantsCount > 0 || teamsCount > 0) {
            throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateFormat(tournamentId, format);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'format_changed', {
            old_format: tournament.format,
            new_format: format
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        const formatNames = {
            'single_elimination': 'Single Elimination',
            'double_elimination': 'Double Elimination',
            'mix': '–ú–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä'
        };
        
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üèÜ –§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${formatNames[format]}`
        );

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateFormat');
        console.log(`üì° [updateFormat] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        
        console.log(`‚úÖ [updateFormat] –§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${format}"`);
        return updatedTournament;
    }

    /**
     * üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateStartDate(tournamentId, startDate, userId) {
        console.log(`üìÖ [TournamentService.updateStartDate] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${startDate}"`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);
        
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–õ–û–í–ò–ô
        if (tournament.status === 'completed') {
            throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º (—Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω–∏—Ü—ã –≤ 1 —á–∞—Å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –æ—à–∏–±–æ–∫)
        const now = new Date();
        const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
        
        if (startDate < oneHourAgo) {
            throw new Error('–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updatedTournament = await TournamentRepository.updateStartDate(tournamentId, startDate);
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        await logTournamentEvent(tournamentId, userId, 'start_date_changed', {
            old_start_date: tournament.start_date,
            new_start_date: startDate
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await sendTournamentChatAnnouncement(
            tournamentId,
            `üìÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${startDate.toLocaleString('ru-RU')}`
        );

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateStartDate');
        console.log(`üì° [updateStartDate] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        
        console.log(`‚úÖ [updateStartDate] –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "${startDate}"`);
        return updatedTournament;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏
     */
    static async updateLobbyEnabled(tournamentId, lobbyEnabled, userId) {
        console.log(`üéÆ [TournamentService] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ ${lobbyEnabled}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkTournamentAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏
        const updatedTournament = await TournamentRepository.update(tournamentId, {
            lobby_enabled: lobbyEnabled
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–æ–±–±–∏
        if (lobbyEnabled) {
            await MatchLobbyService.createLobbySettings(tournamentId, {
                enabled: true,
                matchFormat: null
            });
        }

        await logTournamentEvent(tournamentId, userId, 'lobby_settings_updated', {
            lobby_enabled: lobbyEnabled
        });

        // üÜï –î–û–ë–ê–í–õ–ï–ù–û: WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏
        const fullTournamentData = await this.getTournamentById(tournamentId);
        broadcastTournamentUpdate(tournamentId, fullTournamentData, 'updateLobbyEnabled');
        console.log(`üì° [updateLobbyEnabled] WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);

        console.log('‚úÖ [TournamentService] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        return updatedTournament;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—É—Ä–Ω–∏—Ä—É
     * @private
     */
    static async _checkTournamentAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (!isAdmin) {
                throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ');
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)
     * @private
     */
    static async _checkTournamentDeletionAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
     * @private
     */
    static async _checkTournamentCreatorAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ');
        }
        
        return tournament;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ ID (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
     */
    static async getTournament(tournamentId) {
        console.log(`üîç [TournamentService] –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId}`);
        return await TournamentRepository.getById(tournamentId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    static async getTournamentDetails(tournamentId) {
        try {
            const tournament = await TournamentRepository.getByIdWithCreator(tournamentId);
            
            if (!tournament) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            let participants = [];
            let teams = [];

            // üÜï –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ CS2 —Ç–∏–ø–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const isTeamTournament = ['team', 'cs2_classic_5v5', 'cs2_wingman_2v2'].includes(tournament.participant_type);
            const isSoloTournament = tournament.participant_type === 'solo';

            if (tournament.format === 'mix' || isSoloTournament) {
                participants = await ParticipantRepository.getByTournamentId(tournamentId);
                teams = await TeamRepository.getByTournamentId(tournamentId);
            } else if (isTeamTournament) {
                teams = await TournamentRepository.getTeamsWithMembers(tournamentId);
            }

            // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
            const matches = await MatchRepository.getByTournamentId(tournamentId);

            // –î–æ–±–∞–≤–ª—è–µ–º CS2-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const enhancedTournament = this._enhanceWithCS2Info(tournament);

            return {
                ...enhancedTournament,
                participants,
                teams,
                matches
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error.message);
            throw error;
        }
    }

    /**
     * üÜï –£–ª—É—á—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å CS2-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    static _enhanceWithCS2Info(tournament) {
        if (tournament.game === 'Counter-Strike 2' && tournament.format !== 'mix') {
            return {
                ...tournament,
                display_participant_type: this._getCS2DisplayName(tournament.participant_type),
                min_team_size: this._getCS2MinTeamSize(tournament.participant_type),
                is_cs2_tournament: true
            };
        }

        return {
            ...tournament,
            display_participant_type: this._getStandardDisplayName(tournament.participant_type),
            is_cs2_tournament: false
        };
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è CS2 —Ç–∏–ø–æ–≤
     */
    static _getCS2DisplayName(participantType) {
        const names = {
            'cs2_classic_5v5': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 5—Ö5',
            'cs2_wingman_2v2': 'Wingman 2—Ö2'
        };
        return names[participantType] || participantType;
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è CS2
     */
    static _getCS2MinTeamSize(participantType) {
        const sizes = {
            'cs2_classic_5v5': 5,
            'cs2_wingman_2v2': 2
        };
        return sizes[participantType] || 5;
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
     */
    static _getStandardDisplayName(participantType) {
        const names = {
            'team': '–ö–æ–º–∞–Ω–¥–Ω—ã–π',
            'solo': '–û–¥–∏–Ω–æ—á–Ω—ã–π'
        };
        return names[participantType] || participantType;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—É—Ä–Ω–∏—Ä–æ–º
     */
    static async checkUserPermission(tournamentId, userId, permission = 'general') {
        try {
            const tournament = await TournamentRepository.getById(tournamentId);
            if (!tournament) {
                return false;
            }

            // –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
            if (tournament.created_by === userId) {
                return true;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (isAdmin) {
                return true;
            }

            // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ CS2 —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∞
            if (['mix', 'cs2_classic_5v5', 'cs2_wingman_2v2'].includes(tournament.format) || 
                ['cs2_classic_5v5', 'cs2_wingman_2v2'].includes(tournament.participant_type)) {
                
                // –ü—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –º–∏–∫—Å –∏ CS2 —Ç—É—Ä–Ω–∏—Ä–æ–≤
                if (permission === 'manage_teams') {
                    return tournament.created_by === userId || isAdmin;
                }
            }

            return false;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error.message);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @returns {boolean} - –µ—Å—Ç—å –ª–∏ –º–∞—Ç—á–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
     */
    static async hasMatches(tournamentId) {
        console.log(`üîç [TournamentService] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId}`);
        
        try {
            const matchesCount = await MatchRepository.getCountByTournamentId(tournamentId);
            const hasMatches = matchesCount > 0;
            
            console.log(`üìä [hasMatches] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: ${matchesCount} –º–∞—Ç—á–µ–π, hasMatches: ${hasMatches}`);
            return hasMatches;
            
        } catch (error) {
            console.error(`‚ùå [hasMatches] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    static async getWinners(limit = 5) {
        try {
            const result = await pool.query(`
                SELECT 
                    t.id,
                    t.name as tournament_name,
                    t.game,
                    t.completed_at as date,
                    CASE 
                        WHEN t.tournament_type = 'team' THEN tt.name
                        ELSE u.username
                    END as winner_name,
                    CASE 
                        WHEN t.tournament_type = 'team' THEN tt.id
                        ELSE tp.user_id
                    END as winner_id,
                    '$' || COALESCE(t.prize_pool, 50000) as prize
                FROM tournaments t
                LEFT JOIN tournament_participants tp ON tp.tournament_id = t.id AND tp.placement = 1
                LEFT JOIN users u ON u.id = tp.user_id
                LEFT JOIN tournament_teams tt ON tt.tournament_id = t.id 
                    AND EXISTS (
                        SELECT 1 FROM tournament_team_members ttm 
                        WHERE ttm.team_id = tt.id AND ttm.participant_id = tp.id
                    )
                WHERE t.status = 'completed' 
                    AND t.completed_at IS NOT NULL
                ORDER BY t.completed_at DESC
                LIMIT $1
            `, [limit]);

            return result.rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', error);
            throw error;
        }
    }
}

module.exports = TournamentService; 