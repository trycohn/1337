/**
 * üìä –£–ü–†–û–©–ï–ù–ù–´–ô –°–ï–†–í–ò–° –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–£–†–ù–ò–†–ê
 * –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏
 */

const pool = require('../../db');

class TournamentResultsService {
    static async getTournamentResults(tournamentId) {
        console.log(`üîç [SIMPLE] –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ID: ${tournamentId}`);

        try {
            // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Ç—É—Ä–Ω–∏—Ä–∞ –±–µ–∑ JOIN
            const tournamentResult = await pool.query(
                'SELECT * FROM tournaments WHERE id = $1', 
                [tournamentId]
            );
            
            if (tournamentResult.rows.length === 0) {
                throw new Error(`–¢—É—Ä–Ω–∏—Ä —Å ID ${tournamentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            const tournament = tournamentResult.rows[0];
            console.log(`‚úÖ –¢—É—Ä–Ω–∏—Ä –Ω–∞–π–¥–µ–Ω: ${tournament.name}`);

            // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const participantsResult = await pool.query(
                'SELECT * FROM tournament_participants WHERE tournament_id = $1', 
                [tournamentId]
            );
            const participants = participantsResult.rows;
            console.log(`üë• –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}`);

            // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π
            const matchesResult = await pool.query(
                'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY match_number', 
                [tournamentId]
            );
            const matches = matchesResult.rows;
            console.log(`üéÆ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: ${matches.length}`);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return {
                tournament,
                participants,
                matches,
                statistics: {},
                standings: [],
                matchHistory: []
            };

        } catch (error) {
            console.error('‚ùå [SIMPLE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            throw error;
        }
    }
}

module.exports = TournamentResultsService;