/**
 * üìä –°–ï–†–í–ò–° –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–£–†–ù–ò–†–ê
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –º–µ—Å—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
 */

const pool = require('../../db');

class TournamentResultsService {
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    static async getTournamentResults(tournamentId) {
        console.log(`üîç –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ID: ${tournamentId}`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
            const tournamentQuery = `
                SELECT * FROM tournaments WHERE id = $1
            `;
            
            const tournamentResult = await pool.query(tournamentQuery, [tournamentId]);
            
            if (tournamentResult.rows.length === 0) {
                throw new Error(`–¢—É—Ä–Ω–∏—Ä —Å ID ${tournamentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            const tournament = tournamentResult.rows[0];
            console.log(`‚úÖ –¢—É—Ä–Ω–∏—Ä –Ω–∞–π–¥–µ–Ω: ${tournament.name}, —Ñ–æ—Ä–º–∞—Ç: ${tournament.format}`);

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤
            if (tournament.format === 'mix') {
                const teamsQuery = `
                    SELECT 
                        id, name, avatar_url, captain_id, members
                    FROM tournament_teams 
                    WHERE tournament_id = $1
                    ORDER BY id
                `;
                const teamsResult = await pool.query(teamsQuery, [tournamentId]);
                tournament.teams = teamsResult.rows;
                console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${tournament.teams.length}`);
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
            const participantsQuery = `
                SELECT 
                    tp.id,
                    tp.user_id,
                    tp.name,
                    u.username,
                    u.avatar_url,
                    tp.in_team
                FROM tournament_participants tp
                LEFT JOIN users u ON tp.user_id = u.id
                WHERE tp.tournament_id = $1
                ORDER BY tp.id
            `;
            
            const participantsResult = await pool.query(participantsQuery, [tournamentId]);
            const participants = participantsResult.rows;
            console.log(`üë• –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}`);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
            const matchesQuery = `
                SELECT 
                    m.id,
                    m.match_number,
                    m.round,
                    m.bracket_type,
                    m.round_name,
                    m.match_title,
                    m.team1_id,
                    m.team2_id,
                    m.winner_team_id,
                    m.status,
                    m.score1,
                    m.score2,
                    m.maps_data,
                    m.created_at,
                    m.updated_at
                FROM matches m
                WHERE m.tournament_id = $1
                ORDER BY m.match_number
            `;
            
            const matchesResult = await pool.query(matchesQuery, [tournamentId]);
            const matches = matchesResult.rows;
            console.log(`üéÆ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: ${matches.length}, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${matches.filter(m => m.status === 'completed').length}`);

            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const statisticsMap = this.calculateStatistics(tournament, participants, matches);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–∞
            const standings = this.calculateStandings(tournament, statisticsMap, matches);
            
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
            const matchHistory = this.getMatchHistory(tournament, matches, statisticsMap);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            const statistics = {};
            for (const [key, value] of statisticsMap) {
                statistics[key] = value;
            }

            return {
                tournament,
                participants,
                matches,
                statistics,
                standings,
                matchHistory
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            throw error;
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static calculateStatistics(tournament, participants, matches) {
        console.log('üìä –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        const stats = new Map();
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (tournament.format === 'mix' && tournament.teams && tournament.teams.length > 0) {
                // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
                console.log(`üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ${tournament.teams.length} –∫–æ–º–∞–Ω–¥`);
                tournament.teams.forEach(team => {
                    stats.set(team.id, {
                        id: team.id,
                        name: team.name,
                        avatar_url: team.avatar_url,
                        type: 'team',
                        members: team.members || [],
                        wins: 0,
                        losses: 0,
                        elimination_round: null,
                        last_match_round: 0
                    });
                });
            } else {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ–º —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
                console.log(`üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
                participants.forEach(participant => {
                    stats.set(participant.id, {
                        id: participant.id,
                        name: participant.name || participant.username,
                        avatar_url: participant.avatar_url,
                        user_id: participant.user_id,
                        type: 'individual',
                        wins: 0,
                        losses: 0,
                        elimination_round: null,
                        last_match_round: 0
                    });
                });
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
            const completedMatches = matches.filter(m => m.status === 'completed' && m.winner_team_id);
            console.log(`üéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${completedMatches.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π`);
            
            completedMatches.forEach(match => {
                const winnerId = match.winner_team_id;
                const loserId = match.team1_id === winnerId ? match.team2_id : match.team1_id;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                if (stats.has(winnerId)) {
                    const winner = stats.get(winnerId);
                    winner.wins++;
                    winner.last_match_round = Math.max(winner.last_match_round, match.round);
                    stats.set(winnerId, winner);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ BYE)
                if (loserId && stats.has(loserId)) {
                    const loser = stats.get(loserId);
                    loser.losses++;
                    loser.last_match_round = Math.max(loser.last_match_round, match.round);
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—É–Ω–¥ –≤—ã–±—ã–≤–∞–Ω–∏—è
                    if (!loser.elimination_round || match.round > loser.elimination_round) {
                        loser.elimination_round = match.round;
                    }
                    
                    stats.set(loserId, loser);
                }
            });

            console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∞ –¥–ª—è ${stats.size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            return stats;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return stats; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Å—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static calculateStandings(tournament, statistics, matches) {
        console.log('üèÜ –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Å—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
        
        try {
            const participants = Array.from(statistics.values());
            console.log(`üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            
            // –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–±–µ–¥–∞–º –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è–º
            const standings = participants
                .sort((a, b) => {
                    // –°–Ω–∞—á–∞–ª–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥ (–±–æ–ª—å—à–µ –ª—É—á—à–µ)
                    if (b.wins !== a.wins) return b.wins - a.wins;
                    // –ü–æ—Ç–æ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Ä–∞–∂–µ–Ω–∏–π (–º–µ–Ω—å—à–µ –ª—É—á—à–µ)
                    if (a.losses !== b.losses) return a.losses - b.losses;
                    // –ü–æ—Ç–æ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ä–∞—É–Ω–¥—É (–¥–∞–ª—å—à–µ –ª—É—á—à–µ)
                    return b.last_match_round - a.last_match_round;
                })
                .map((participant, index) => ({
                    ...participant,
                    place: index + 1
                }));
            
            console.log(`‚úÖ –ú–µ—Å—Ç–∞ –≤—ã—á–∏—Å–ª–µ–Ω—ã –¥–ª—è ${standings.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            return standings;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –º–µ—Å—Ç:', error);
            return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è Single Elimination
     */
    static calculateSingleEliminationStandings(participants, matches) {
        const standings = [...participants];
        
        // –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á
        const finalMatch = matches.find(m => 
            m.status === 'completed' && 
            m.bracket_type === 'winner' && 
            m.round === Math.max(...matches.filter(m2 => m2.bracket_type === 'winner').map(m2 => m2.round))
        );
        
        if (finalMatch) {
            // 1 –º–µ—Å—Ç–æ - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ñ–∏–Ω–∞–ª–∞
            const winner = standings.find(p => p.id === finalMatch.winner_team_id);
            if (winner) winner.place = 1;
            
            // 2 –º–µ—Å—Ç–æ - –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π —Ñ–∏–Ω–∞–ª–∞
            const finalist = standings.find(p => p.id === (
                finalMatch.team1_id === finalMatch.winner_team_id ? finalMatch.team2_id : finalMatch.team1_id
            ));
            if (finalist) finalist.place = 2;
        }
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ —Ä–∞—É–Ω–¥—É –≤—ã–±—ã–≤–∞–Ω–∏—è
        const withoutTopTwo = standings.filter(p => !p.place);
        const groupedByElimination = this.groupByEliminationRound(withoutTopTwo);
        
        let currentPlace = 3;
        Object.keys(groupedByElimination)
            .sort((a, b) => parseInt(b) - parseInt(a)) // –û—Ç –±–æ–ª—å—à–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –∫ –º–µ–Ω—å—à–µ–º—É
            .forEach(round => {
                const group = groupedByElimination[round];
                group.forEach(participant => {
                    participant.place = currentPlace;
                });
                currentPlace += group.length;
            });
        
        return standings.sort((a, b) => a.place - b.place);
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è Double Elimination
     */
    static calculateDoubleEliminationStandings(participants, matches) {
        const standings = [...participants];
        
        // –ù–∞—Ö–æ–¥–∏–º Grand Final
        const grandFinal = matches.find(m => 
            m.status === 'completed' && 
            m.bracket_type === 'grand_final'
        );
        
        if (grandFinal) {
            // 1 –º–µ—Å—Ç–æ - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å Grand Final
            const champion = standings.find(p => p.id === grandFinal.winner_team_id);
            if (champion) champion.place = 1;
            
            // 2 –º–µ—Å—Ç–æ - –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π Grand Final
            const runnerUp = standings.find(p => p.id === (
                grandFinal.team1_id === grandFinal.winner_team_id ? grandFinal.team2_id : grandFinal.team1_id
            ));
            if (runnerUp) runnerUp.place = 2;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Ñ–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤ –¥–ª—è 3 –º–µ—Å—Ç–∞
        const loserFinal = matches.find(m => 
            m.status === 'completed' && 
            m.bracket_type === 'loser_final'
        );
        
        if (loserFinal) {
            // 3 –º–µ—Å—Ç–æ - –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π —Ñ–∏–Ω–∞–ª–∞ –ª—É–∑–µ—Ä–æ–≤
            const thirdPlace = standings.find(p => p.id === (
                loserFinal.team1_id === loserFinal.winner_team_id ? loserFinal.team2_id : loserFinal.team1_id
            ));
            if (thirdPlace) thirdPlace.place = 3;
        }
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ —Ä–∞—É–Ω–¥—É –≤—ã–±—ã–≤–∞–Ω–∏—è
        const withoutTopThree = standings.filter(p => !p.place);
        const groupedByElimination = this.groupByEliminationRound(withoutTopThree);
        
        let currentPlace = 4;
        Object.keys(groupedByElimination)
            .sort((a, b) => parseInt(b) - parseInt(a))
            .forEach(round => {
                const group = groupedByElimination[round];
                group.forEach(participant => {
                    participant.place = currentPlace;
                });
                currentPlace += group.length;
            });
        
        return standings.sort((a, b) => a.place - b.place);
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ä–∞—É–Ω–¥—É –≤—ã–±—ã–≤–∞–Ω–∏—è
     */
    static groupByEliminationRound(participants) {
        return participants.reduce((groups, participant) => {
            const round = participant.elimination_round || 0;
            if (!groups[round]) groups[round] = [];
            groups[round].push(participant);
            return groups;
        }, {});
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π
     */
    static getMatchHistory(tournament, matches, statistics) {
        console.log('üìã –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π...');
        
        try {
            const completedMatches = matches.filter(m => m.status === 'completed' && m.winner_team_id);
            console.log(`üéÆ –ù–∞–π–¥–µ–Ω–æ ${completedMatches.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π`);
            
            return completedMatches
                .sort((a, b) => new Date(b.updated_at || b.created_at) - new Date(a.updated_at || a.created_at))
                .map(match => {
                    const winner = statistics.get(match.winner_team_id);
                    const loserId = match.team1_id === match.winner_team_id ? match.team2_id : match.team1_id;
                    const loser = statistics.get(loserId);
                    
                    return {
                        id: match.id,
                        match_number: match.match_number,
                        round: match.round,
                        round_name: match.round_name || `–†–∞—É–Ω–¥ ${match.round}`,
                        bracket_type: match.bracket_type || 'winner',
                        winner,
                        loser,
                        score1: match.score1,
                        score2: match.score2,
                        maps_data: match.maps_data,
                        created_at: match.created_at,
                        updated_at: match.updated_at
                    };
                });
                
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ç—á–µ–π:', error);
            return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        }
    }
}

module.exports = TournamentResultsService;