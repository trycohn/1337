// backend/services/tournament/BracketService.js

const { generateBracket } = require('../../bracketGenerator');
const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const MatchRepository = require('../../repositories/tournament/MatchRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { broadcastTournamentUpdate } = require('../../notifications');
const pool = require('../../db');

// üîí –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è debounce –∑–∞—â–∏—Ç—ã
const lastRegenerationTimes = new Map();
const REGENERATION_DEBOUNCE_MS = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

class BracketService {
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ debounce –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @returns {boolean} - –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
     */
    static _checkRegenerationDebounce(tournamentId) {
        const now = Date.now();
        const lastTime = lastRegenerationTimes.get(tournamentId) || 0;
        const timePassed = now - lastTime;
        
        if (timePassed < REGENERATION_DEBOUNCE_MS) {
            const timeLeft = Math.ceil((REGENERATION_DEBOUNCE_MS - timePassed) / 1000);
            throw new Error(`–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${timeLeft} —Å–µ–∫—É–Ω–¥.`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        lastRegenerationTimes.set(tournamentId, now);
        
        console.log(`‚úÖ [BracketService] Debounce –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return true;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static async generateBracket(tournamentId, userId, thirdPlaceMatch = false) {
        console.log(`ü•ä BracketService: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkBracketAccess(tournamentId, userId);

        // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.status !== 'active') {
            throw new Error('–ú–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }

        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        let participantsForBracket;
        let participantCount;
        
        if (tournament.format === 'mix') {
            // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            console.log(`üéØ [generateBracket] –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            const teams = await this._getMixTeams(tournamentId);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç undefined
            if (!teams) {
                console.error(`‚ùå [generateBracket] –ú–µ—Ç–æ–¥ _getMixTeams –≤–µ—Ä–Ω—É–ª undefined –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.');
            }
            
            if (!Array.isArray(teams)) {
                console.error(`‚ùå [generateBracket] _getMixTeams –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤:`, typeof teams, teams);
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞');
            }
            
            console.log(`üìä [generateBracket] –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${teams.length}`);
            
            if (teams.length < 2) {
                throw new Error('–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 –∫–æ–º–∞–Ω–¥—ã. –°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.');
            }
            participantsForBracket = teams;
            participantCount = teams.length;
            console.log(`üìä –ö–æ–º–∞–Ω–¥ –≤ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–µ: ${teams.length}`);
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const participants = await ParticipantRepository.getByTournamentId(tournamentId);
            if (participants.length < 2) {
                throw new Error('–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            }
            participantsForBracket = participants;
            participantCount = participants.length;
            console.log(`üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: ${participants.length}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∞—Ç—á–∏
        const existingMatchCount = await MatchRepository.getCountByTournamentId(tournamentId);
        if (existingMatchCount > 0) {
            console.log(`üîç [generateBracket] –°–µ—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} (${existingMatchCount} –º–∞—Ç—á–µ–π). –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Ç–∫—É.`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏
            const existingMatches = await MatchRepository.getByTournamentId(tournamentId);
            const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);
            
            return {
                success: true,
                matches: existingMatches,
                totalMatches: existingMatches.length,
                message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${existingMatches.length} –º–∞—Ç—á–µ–π`,
                tournament: updatedTournament,
                existing: true // –§–ª–∞–≥ —á—Ç–æ —Å–µ—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞
            };
        }

        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É —Å –ø–æ–º–æ—â—å—é bracketGenerator
            const bracketData = await generateBracket(
                tournament.format,
                tournamentId,
                participantsForBracket,
                thirdPlaceMatch
            );

            console.log(`üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ—Ç–∫–∞: ${bracketData.matches.length} –º–∞—Ç—á–µ–π`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ç–∫–∞ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if (!bracketData.matches || bracketData.matches.length === 0) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ 0 –º–∞—Ç—á–µ–π');
            }

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏
            await logTournamentEvent(tournamentId, userId, 'bracket_generated', {
                matchesCount: bracketData.matches.length,
                format: tournament.format,
                thirdPlaceMatch
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const savedMatches = [];
            for (const match of bracketData.matches) {
                const matchResult = await client.query(`
                    INSERT INTO matches (
                        tournament_id, round, match_number,
                        team1_id, team2_id, next_match_id, loser_next_match_id,
                        is_third_place_match, bracket_type, target_slot
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                    RETURNING *
                `, [
                    tournamentId,
                    match.round,
                    match.match_number,
                    match.team1_id || null,
                    match.team2_id || null,
                    match.next_match_id || null,
                    match.loser_next_match_id || null,
                    match.is_third_place_match || false,
                    match.bracket_type || 'main',
                    match.target_slot || null
                ]);

                savedMatches.push(matchResult.rows[0]);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
            await this._updateMatchLinks(client, savedMatches, bracketData.matches);

            await client.query('COMMIT');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            try {
                await broadcastTournamentUpdate(tournamentId);
                await sendTournamentChatAnnouncement(
                    tournamentId, 
                    `ü•ä –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! –°–æ–∑–¥–∞–Ω–æ ${bracketData.matches.length} –º–∞—Ç—á–µ–π.`,
                    'system',
                    userId
                );
            } catch (notificationError) {
                console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationError.message);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);

            console.log(`‚úÖ BracketService: –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

            return {
                success: true,
                matches: bracketData.matches,
                totalMatches: bracketData.matches.length,
                message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${bracketData.matches.length} –º–∞—Ç—á–µ–π`,
                tournament: updatedTournament
            };

        } catch (error) {
            await client.query('ROLLBACK');
            console.error('‚ùå BracketService: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (—Å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º)
     */
    static async regenerateBracket(tournamentId, userId, shuffle = false, thirdPlaceMatch = false) {
        console.log(`üîÑ BracketService: –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} (shuffle: ${shuffle})`);

        // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ debounce –∑–∞—â–∏—Ç—ã –æ—Ç —á–∞—Å—Ç—ã—Ö —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        this._checkRegenerationDebounce(tournamentId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkBracketAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.status !== 'active') {
            throw new Error('–ú–æ–∂–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }

        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');

            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏
            const deletedMatches = await client.query(
                'DELETE FROM matches WHERE tournament_id = $1 RETURNING id',
                [tournamentId]
            );

            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deletedMatches.rows.length} —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π`);

            await client.query('COMMIT');

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É
            const result = await this.generateBracket(tournamentId, userId, thirdPlaceMatch);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            await sendTournamentChatAnnouncement(
                tournamentId,
                `üîÑ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! ${shuffle ? '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã. ' : ''}–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ç–∫—É: /tournaments/${tournamentId}`,
                'system',
                userId
            );

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'bracket_regenerated', {
                shuffle: shuffle,
                deleted_matches: deletedMatches.rows.length,
                new_matches: result.matches.length
            });

            console.log('‚úÖ BracketService: –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
            return {
                ...result,
                message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞${shuffle ? ' —Å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' : ''}`
            };

        } catch (error) {
            await client.query('ROLLBACK');
            console.error('‚ùå BracketService: –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π (—Å–±—Ä–æ—Å —Ç—É—Ä–Ω–∏—Ä–∞)
     */
    static async clearMatchResults(tournamentId, userId) {
        console.log(`üßπ BracketService: –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkBracketAccess(tournamentId, userId);

        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
            const resetResult = await client.query(`
                UPDATE matches 
                SET winner_team_id = NULL, score1 = NULL, score2 = NULL, maps_data = NULL 
                WHERE tournament_id = $1
                RETURNING id
            `, [tournamentId]);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            await this._resetMatchParticipants(client, tournamentId);

            await client.query('COMMIT');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            await sendTournamentChatAnnouncement(
                tournamentId,
                `üßπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π —Å–±—Ä–æ—à–µ–Ω—ã. –¢—É—Ä–Ω–∏—Ä –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é. –°—Å—ã–ª–∫–∞: /tournaments/${tournamentId}`,
                'system',
                userId
            );

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'match_results_cleared', {
                cleared_matches: resetResult.rows.length
            });

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);
            broadcastTournamentUpdate(tournamentId, updatedTournament);

            console.log('‚úÖ BracketService: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –æ—á–∏—â–µ–Ω—ã');
            return {
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã',
                tournament: updatedTournament,
                cleared_matches: resetResult.rows.length
            };

        } catch (error) {
            await client.query('ROLLBACK');
            console.error('‚ùå BracketService: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static async getBracket(tournamentId) {
        console.log(`üìã BracketService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ ${tournamentId}`);

        const matches = await MatchRepository.getByTournamentId(tournamentId);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        const bracket = matches.reduce((acc, match) => {
            if (!acc[match.round]) {
                acc[match.round] = [];
            }
            acc[match.round].push(match);
            return acc;
        }, {});

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –ø–æ match_number
        Object.keys(bracket).forEach(round => {
            bracket[round].sort((a, b) => (a.match_number || 0) - (b.match_number || 0));
        });

        return bracket;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @private
     */
    static async _updateMatchLinks(client, savedMatches, originalMatches) {
        console.log('üîó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏...');

        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö ID –Ω–∞ –Ω–æ–≤—ã–µ
        const idMapping = {};
        originalMatches.forEach((original, index) => {
            if (original.temp_id) {
                idMapping[original.temp_id] = savedMatches[index].id;
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏
        for (let i = 0; i < savedMatches.length; i++) {
            const match = savedMatches[i];
            const original = originalMatches[i];

            let nextMatchId = null;
            let loserNextMatchId = null;

            if (original.next_match_temp_id && idMapping[original.next_match_temp_id]) {
                nextMatchId = idMapping[original.next_match_temp_id];
            }

            if (original.loser_next_match_temp_id && idMapping[original.loser_next_match_temp_id]) {
                loserNextMatchId = idMapping[original.loser_next_match_temp_id];
            }

            if (nextMatchId || loserNextMatchId) {
                await client.query(
                    'UPDATE matches SET next_match_id = $1, loser_next_match_id = $2 WHERE id = $3',
                    [nextMatchId, loserNextMatchId, match.id]
                );
            }
        }
    }

    /**
     * –°–±—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–µ–π –≤ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     * @private
     */
    static async _resetMatchParticipants(client, tournamentId) {
        console.log('üîÑ –°–±—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏...');

        // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        const tournament = await TournamentRepository.getById(tournamentId);
        
        let participants;
        if (tournament.format === 'mix') {
            // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            participants = await this._getMixTeams(tournamentId);
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = await ParticipantRepository.getByTournamentId(tournamentId);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        const firstRoundMatches = await client.query(
            'SELECT * FROM matches WHERE tournament_id = $1 AND round = 1 ORDER BY position',
            [tournamentId]
        );

        // –û—á–∏—â–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        await client.query(
            'UPDATE matches SET team1_id = NULL, team2_id = NULL WHERE tournament_id = $1 AND round > 1',
            [tournamentId]
        );

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        for (let i = 0; i < firstRoundMatches.rows.length && i * 2 < participants.length; i++) {
            const match = firstRoundMatches.rows[i];
            const participant1 = participants[i * 2];
            const participant2 = participants[i * 2 + 1] || null;

            await client.query(
                'UPDATE matches SET team1_id = $1, team2_id = $2 WHERE id = $3',
                [participant1.id, participant2?.id, match.id]
            );
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–µ—Ç–∫–∏
     * @private
     */
    static async _getMixTeams(tournamentId) {
        console.log(`üèÜ [_getMixTeams] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            const teamsQuery = await pool.query(`
                SELECT 
                    tt.id,
                    tt.name,
                    COUNT(ttm.user_id) as members_count,
                    ARRAY_AGG(
                        JSON_BUILD_OBJECT(
                            'id', u.id,
                            'username', u.username,
                            'avatar_url', u.avatar_url
                        ) ORDER BY ttm.id
                    ) as members
                FROM tournament_teams tt
                LEFT JOIN tournament_team_members ttm ON tt.id = ttm.team_id
                LEFT JOIN users u ON ttm.user_id = u.id
                WHERE tt.tournament_id = $1
                GROUP BY tt.id, tt.name
                ORDER BY tt.id
            `, [tournamentId]);

            console.log(`üîç [_getMixTeams] SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${teamsQuery.rows.length}`);
            
            if (teamsQuery.rows.length === 0) {
                console.warn(`‚ö†Ô∏è [_getMixTeams] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
                return [];
            }

            const teams = teamsQuery.rows.map(team => ({
                id: team.id,
                name: team.name,
                members: team.members.filter(member => member.id !== null)
            }));

            console.log(`‚úÖ [_getMixTeams] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${teams.length}`);
            teams.forEach((team, index) => {
                console.log(`   üìã –ö–æ–º–∞–Ω–¥–∞ ${index + 1}: "${team.name}" (ID: ${team.id}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${team.members.length})`);
            });

            return teams;

        } catch (error) {
            console.error(`‚ùå [_getMixTeams] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Ç–∫–æ–π
     * @private
     */
    static async _checkBracketAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (!isAdmin) {
                throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π');
            }
        }
    }
}

module.exports = BracketService; 