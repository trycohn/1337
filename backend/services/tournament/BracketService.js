// backend/services/tournament/BracketService.js
//
// üîÑ –£–ü–†–û–©–ï–ù–ù–´–ô –ò –ù–ê–î–ï–ñ–ù–´–ô BRACKET SERVICE V2.0
// ================================================
// 
// ‚úÖ –ü—Ä–∏–Ω—Ü–∏–ø—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
// ‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
// ‚Ä¢ –û–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ 
// ‚Ä¢ –ú–∏–Ω–∏–º—É–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –º—å—é—Ç–µ–∫—Å–æ–≤
// ‚Ä¢ –ü–æ–Ω—è—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ overengineering
// ‚Ä¢ –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤—Å–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ)
// ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
//

const pool = require('../../db');
const { generateBracket } = require('../../bracketGenerator');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { broadcastTournamentUpdate } = require('../../notifications');

class BracketService {
    /**
     * üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    static async generateBracket(tournamentId, userId, thirdPlaceMatch = false) {
        const startTime = Date.now();
        console.log(`üîÑ [BracketService v2.0] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // 1. –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å –ø—Ä–æ—Å—Ç–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            const tournamentResult = await client.query(
                'SELECT * FROM tournaments WHERE id = $1 FOR UPDATE',
                [tournamentId]
            );
            
            if (tournamentResult.rows.length === 0) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const tournament = tournamentResult.rows[0];
            console.log(`‚úÖ –¢—É—Ä–Ω–∏—Ä –Ω–∞–π–¥–µ–Ω: "${tournament.name}" (${tournament.format})`);
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ç–∫–∞ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞
            const existingMatches = await client.query(
                'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
                [tournamentId]
            );
            
            const matchCount = parseInt(existingMatches.rows[0].count);
            if (matchCount > 0) {
                throw new Error(`–°–µ—Ç–∫–∞ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (${matchCount} –º–∞—Ç—á–µ–π). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é.`);
            }
            
            // 3. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            let participants;
            if (tournament.format === 'mix') {
                participants = await this._getMixTeams(tournamentId, client);
            } else if (tournament.participant_type === 'solo') {
                participants = await this._getSoloParticipants(tournamentId, client);
            } else {
                participants = await this._getTeamParticipants(tournamentId, client);
            }
            
            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}`);
            
            if (participants.length < 2) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ (–º–∏–Ω–∏–º—É–º 2)');
            }
            
            // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É
            console.log(`‚öôÔ∏è –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∫–∏...`);
            const matches = await generateBracket(
                tournament.format, 
                tournamentId, 
                participants, 
                thirdPlaceMatch
            );
            
            console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç—á–µ–π: ${matches.length}`);
            
            // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (tournament.status === 'pending') {
                await client.query(
                    'UPDATE tournaments SET status = $1 WHERE id = $2',
                    ['active', tournamentId]
                );
                console.log(`üìä –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'active'`);
            }
            
            await client.query('COMMIT');
            
            // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await this._sendNotifications(tournamentId, tournament.name, 'generated');
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [BracketService v2.0] –°–µ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${duration}ms`);
            
            return {
                success: true,
                matchesCount: matches.length,
                participantsCount: participants.length,
                duration
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [BracketService v2.0] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`, error.message);
            throw error;
        } finally {
            client.release();
        }
    }
    
    /**
     * üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    static async regenerateBracket(tournamentId, userId, shuffle = false, thirdPlaceMatch = false) {
        const startTime = Date.now();
        console.log(`üîÑ [BracketService v2.0] –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} (shuffle: ${shuffle})`);
        
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // 1. –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            const tournamentResult = await client.query(
                'SELECT * FROM tournaments WHERE id = $1 FOR UPDATE',
                [tournamentId]
            );
            
            if (tournamentResult.rows.length === 0) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const tournament = tournamentResult.rows[0];
            console.log(`‚úÖ –¢—É—Ä–Ω–∏—Ä –Ω–∞–π–¥–µ–Ω: "${tournament.name}"`);
            
            // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏
            const deleteResult = await client.query(
                'DELETE FROM matches WHERE tournament_id = $1',
                [tournamentId]
            );
            
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –º–∞—Ç—á–µ–π: ${deleteResult.rowCount}`);
            
            // 3. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            let participants;
            if (tournament.format === 'mix') {
                participants = await this._getMixTeams(tournamentId, client);
            } else if (tournament.participant_type === 'solo') {
                participants = await this._getSoloParticipants(tournamentId, client);
            } else {
                participants = await this._getTeamParticipants(tournamentId, client);
            }
            
            // 4. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (shuffle && participants.length > 1) {
                for (let i = participants.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [participants[i], participants[j]] = [participants[j], participants[i]];
                }
                console.log(`üîÄ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã`);
            }
            
            console.log(`üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${participants.length}`);
            
            if (participants.length < 2) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏');
            }
            
            // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É
            console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É...`);
            const matches = await generateBracket(
                tournament.format, 
                tournamentId, 
                participants, 
                thirdPlaceMatch
            );
            
            console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π: ${matches.length}`);
            
            await client.query('COMMIT');
            
            // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await this._sendNotifications(tournamentId, tournament.name, 'regenerated');
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [BracketService v2.0] –°–µ—Ç–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${duration}ms`);
            
            return {
                success: true,
                matchesCount: matches.length,
                participantsCount: participants.length,
                shuffled: shuffle,
                duration
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [BracketService v2.0] –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`, error.message);
            throw error;
        } finally {
            client.release();
        }
    }
    
    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
     */
    static async clearMatchResults(tournamentId, userId) {
        const startTime = Date.now();
        console.log(`üóëÔ∏è [BracketService v2.0] –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ä–Ω–∏—Ä
            const tournamentResult = await client.query(
                'SELECT * FROM tournaments WHERE id = $1 FOR UPDATE',
                [tournamentId]
            );
            
            if (tournamentResult.rows.length === 0) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const tournament = tournamentResult.rows[0];
            
            // 2. –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
            const updateResult = await client.query(`
                UPDATE matches 
                SET winner_team_id = NULL, 
                    score1 = NULL, 
                    score2 = NULL, 
                    maps_data = NULL,
                    status = 'pending'
                WHERE tournament_id = $1 
                AND (winner_team_id IS NOT NULL OR score1 IS NOT NULL OR score2 IS NOT NULL)
            `, [tournamentId]);
            
            console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${updateResult.rowCount}`);
            
            // 3. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ active
            await client.query(
                'UPDATE tournaments SET status = $1 WHERE id = $2 AND status != $1',
                ['active', tournamentId]
            );
            
            await client.query('COMMIT');
            
            // 4. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'match_results_cleared', {
                clearedCount: updateResult.rowCount
            });
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [BracketService v2.0] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã –∑–∞ ${duration}ms`);
            
            return {
                success: true,
                clearedCount: updateResult.rowCount,
                duration
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [BracketService v2.0] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:`, error.message);
            throw error;
        } finally {
            client.release();
        }
    }
    
    // ==========================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ==========================================
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async _getMixTeams(tournamentId, client) {
        const result = await client.query(`
            SELECT tt.id, tt.name, 
                   JSON_AGG(
                       CASE WHEN ttm.user_id IS NOT NULL THEN
                           JSON_BUILD_OBJECT(
                               'id', u.id,
                               'username', u.username,
                               'avatar_url', u.avatar_url
                           )
                       END
                   ) FILTER (WHERE ttm.user_id IS NOT NULL) as members
            FROM tournament_teams tt
            LEFT JOIN tournament_team_members ttm ON tt.id = ttm.team_id
            LEFT JOIN users u ON ttm.user_id = u.id
            WHERE tt.tournament_id = $1
            GROUP BY tt.id
            ORDER BY tt.id
        `, [tournamentId]);
        
        return result.rows.map(team => ({
            id: team.id,
            name: team.name,
            members: team.members || []
        }));
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è solo —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async _getSoloParticipants(tournamentId, client) {
        const result = await client.query(`
            SELECT tp.id, tp.name, u.avatar_url
            FROM tournament_participants tp
            LEFT JOIN users u ON tp.user_id = u.id
            WHERE tp.tournament_id = $1
            ORDER BY tp.created_at ASC
        `, [tournamentId]);
        
        return result.rows;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è team —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async _getTeamParticipants(tournamentId, client) {
        const result = await client.query(`
            SELECT tt.id, tt.name
            FROM tournament_teams tt
            WHERE tt.tournament_id = $1
            ORDER BY tt.id
        `, [tournamentId]);
        
        return result.rows;
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    static async _sendNotifications(tournamentId, tournamentName, action) {
        try {
            const actionText = action === 'generated' ? '—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞' : '–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞';
            const message = `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ ${actionText} –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournamentName}"`;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
            await sendTournamentChatAnnouncement(tournamentId, message);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            const tournament = await this._getTournamentData(tournamentId);
            broadcastTournamentUpdate(tournamentId, tournament);
            
            console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`, error.message);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è WebSocket
     */
    static async _getTournamentData(tournamentId) {
        const result = await pool.query(`
            SELECT t.*,
                   (SELECT COUNT(*) FROM tournament_participants WHERE tournament_id = t.id) as participant_count,
                   (SELECT JSON_AGG(m.*) FROM matches m WHERE m.tournament_id = t.id) as matches
            FROM tournaments t 
            WHERE t.id = $1
        `, [tournamentId]);
        
        return result.rows[0] || null;
    }
}

module.exports = BracketService; 