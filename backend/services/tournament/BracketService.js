const pool = require('../../db');
const { generateBracket } = require('../../bracketGenerator');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { broadcastTournamentUpdate } = require('../../notifications');
const ParticipantService = require('./ParticipantService');

/**
 * üéØ BracketService v3.0 - –£–ü–†–û–©–ï–ù–ù–ê–Ø –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã V3.0:
 * - –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫  
 * - –ü—Ä–æ—Å—Ç–æ—Ç–∞: —É–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –∏ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
 * - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –æ–≤–µ—Ä—Ö–µ–¥–∞
 * - –û—Ç–ª–∞–¥–∫–∞: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
 */

class BracketService {
    
    /**
     * üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ V3.1
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {boolean} thirdPlaceMatch - –î–æ–±–∞–≤–∏—Ç—å –ª–∏ –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    static async generateBracket(tournamentId, thirdPlaceMatch = false) {
        console.log(`üéØ [BracketService v3.1] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // 1. –ê—Ç–æ–º–∞—Ä–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            const lockResult = await client.query(`
                UPDATE tournaments 
                SET status = CASE 
                    WHEN status = 'active' THEN 'generating'
                    ELSE status 
                END
                WHERE id = $1 
                RETURNING status, name, format, participant_type, created_by
            `, [tournamentId]);
            
            if (lockResult.rows.length === 0) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const tournament = lockResult.rows[0];
            console.log(`‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${tournament.name}`);
            
            if (tournament.status !== 'generating') {
                throw new Error(`–¢—É—Ä–Ω–∏—Ä —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (—Å—Ç–∞—Ç—É—Å: ${tournament.status})`);
            }
            
            // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏
            const existingMatches = await client.query(
                'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
                [tournamentId]
            );
            
            if (parseInt(existingMatches.rows[0].count) > 0) {
                console.log(`üîß –ù–∞–π–¥–µ–Ω–æ ${existingMatches.rows[0].count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π, –Ω–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É...`);
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ç—á–∏, —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º foreign keys
                console.log('üîß –û—á–∏—Å—Ç–∫–∞ foreign key —Å—Å—ã–ª–æ–∫ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏...');
                
                await client.query(`
                    UPDATE matches 
                    SET 
                        next_match_id = NULL,
                        loser_next_match_id = NULL,
                        source_match1_id = NULL,
                        source_match2_id = NULL
                    WHERE tournament_id = $1
                `, [tournamentId]);
                
                console.log('‚úÖ Foreign key —Å—Å—ã–ª–∫–∏ –æ—á–∏—â–µ–Ω—ã');
                
                // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –º–∞—Ç—á–∏
                const deleteResult = await client.query(
                    'DELETE FROM matches WHERE tournament_id = $1',
                    [tournamentId]
                );
                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π`);
                
                // üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –º–∞—Ç—á–∏ —É–¥–∞–ª–µ–Ω—ã
                const checkResult = await client.query(
                    'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
                    [tournamentId]
                );
                
                const remainingMatches = parseInt(checkResult.rows[0].count);
                if (remainingMatches > 0) {
                    console.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å ${remainingMatches} –º–∞—Ç—á–µ–π!`);
                    
                    // üîß –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –µ—â–µ —Ä–∞–∑ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    console.log('üö® –ü—Ä–æ–±—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
                    await pool.query('DELETE FROM matches WHERE tournament_id = $1', [tournamentId]);
                    
                    const finalCheck = await pool.query(
                        'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
                        [tournamentId]
                    );
                    
                    if (parseInt(finalCheck.rows[0].count) > 0) {
                        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
                    }
                } else {
                    console.log('‚úÖ –í—Å–µ –º–∞—Ç—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
                }
            }
            
            // 2. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            let participants;
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∞ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (tournament.format === 'mix') {
                console.log('üéØ –¢—É—Ä–Ω–∏—Ä —Ñ–æ—Ä–º–∞—Ç–∞ MIX - –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã');
                participants = await this._getMixTeams(tournamentId, client);
                console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${participants.length} –∫–æ–º–∞–Ω–¥`);
            } else {
                participants = await ParticipantService.getByTournamentId(tournamentId);
                console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            }
            
            if (participants.length < 2) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏');
            }
            
            // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É
            const bracketResult = await generateBracket(
                tournament.format,
                tournamentId,
                participants,
                thirdPlaceMatch
            );
            
            // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
            await client.query(
                `UPDATE tournaments 
                 SET third_place_match = $1 
                 WHERE id = $2`,
                [thirdPlaceMatch, tournamentId]
            );
            
            // 5. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
            await client.query(
                'UPDATE tournaments SET status = $1 WHERE id = $2',
                ['active', tournamentId]
            );
            
            await client.query('COMMIT');
            
            console.log(`‚úÖ –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            return bracketResult;
            
        } catch (error) {
            await client.query('ROLLBACK');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await pool.query(
                'UPDATE tournaments SET status = $1 WHERE id = $2',
                ['active', tournamentId]
            );
            
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
            throw error;
        } finally {
            client.release();
        }
    }
    
    /**
     * üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ V3.1
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {boolean} shuffle - –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {boolean} thirdPlaceMatch - –î–æ–±–∞–≤–∏—Ç—å –ª–∏ –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    static async regenerateBracket(tournamentId, shuffle = true, thirdPlaceMatch = false) {
        console.log(`üîÑ [BracketService v3.1] –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // 1. –ê—Ç–æ–º–∞—Ä–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            const lockResult = await client.query(`
                UPDATE tournaments 
                SET status = CASE 
                    WHEN status = 'active' THEN 'generating'
                    ELSE status 
                END
                WHERE id = $1 
                RETURNING status, name, format, participant_type, created_by
            `, [tournamentId]);
            
            if (lockResult.rows.length === 0) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const tournament = lockResult.rows[0];
            console.log(`‚úÖ –¢—É—Ä–Ω–∏—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${tournament.name}`);
            
            if (tournament.status !== 'generating') {
                throw new Error(`–¢—É—Ä–Ω–∏—Ä —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (—Å—Ç–∞—Ç—É—Å: ${tournament.status})`);
            }
            
            // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º foreign key —Å—Å—ã–ª–∫–∏
            console.log('üîß –û—á–∏—Å—Ç–∫–∞ foreign key —Å—Å—ã–ª–æ–∫ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏...');
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ self-referencing foreign keys
            await client.query(`
                UPDATE matches 
                SET 
                    next_match_id = NULL,
                    loser_next_match_id = NULL,
                    source_match1_id = NULL,
                    source_match2_id = NULL
                WHERE tournament_id = $1
            `, [tournamentId]);
            
            console.log('‚úÖ Foreign key —Å—Å—ã–ª–∫–∏ –æ—á–∏—â–µ–Ω—ã');
            
            // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –º–∞—Ç—á–∏
            const deleteResult = await client.query(
                'DELETE FROM matches WHERE tournament_id = $1',
                [tournamentId]
            );
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} –º–∞—Ç—á–µ–π`);
            
            // üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –º–∞—Ç—á–∏ —É–¥–∞–ª–µ–Ω—ã
            const checkResult = await client.query(
                'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
                [tournamentId]
            );
            
            const remainingMatches = parseInt(checkResult.rows[0].count);
            if (remainingMatches > 0) {
                console.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å ${remainingMatches} –º–∞—Ç—á–µ–π!`);
                
                // üîß –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –µ—â–µ —Ä–∞–∑ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                console.log('üö® –ü—Ä–æ–±—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
                await pool.query('DELETE FROM matches WHERE tournament_id = $1', [tournamentId]);
                
                const finalCheck = await pool.query(
                    'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
                    [tournamentId]
                );
                
                if (parseInt(finalCheck.rows[0].count) > 0) {
                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
                }
            } else {
                console.log('‚úÖ –í—Å–µ –º–∞—Ç—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
            }
            
            // 2. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            let participants;
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∞ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (tournament.format === 'mix') {
                console.log('üéØ –¢—É—Ä–Ω–∏—Ä —Ñ–æ—Ä–º–∞—Ç–∞ MIX - –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã');
                participants = await this._getMixTeams(tournamentId, client);
                console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${participants.length} –∫–æ–º–∞–Ω–¥`);
            } else {
                participants = await ParticipantService.getByTournamentId(tournamentId);
                console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            }
            
            if (participants.length < 2) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏');
            }
            
            // 3. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (shuffle) {
                console.log('üîÄ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
                for (let i = participants.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [participants[i], participants[j]] = [participants[j], participants[i]];
                }
            }
            
            // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É
            const bracketResult = await generateBracket(
                tournament.format,
                tournamentId,
                participants,
                thirdPlaceMatch
            );
            
            // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
            await client.query(
                `UPDATE tournaments 
                 SET third_place_match = $1 
                 WHERE id = $2`,
                [thirdPlaceMatch, tournamentId]
            );
            
            // 6. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
            await client.query(
                'UPDATE tournaments SET status = $1 WHERE id = $2',
                ['active', tournamentId]
            );
            
            await client.query('COMMIT');
            
            console.log(`‚úÖ –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            return bracketResult;
            
        } catch (error) {
            await client.query('ROLLBACK');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await pool.query(
                'UPDATE tournaments SET status = $1 WHERE id = $2',
                ['active', tournamentId]
            );
            
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏:', error);
            throw error;
        } finally {
            client.release();
        }
    }
    
    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
     */
    static async clearMatchResults(tournamentId, userId) {
        const startTime = Date.now();
        console.log(`üóëÔ∏è [BracketService v2.0] –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ä–Ω–∏—Ä
            const tournamentResult = await client.query(
                'SELECT * FROM tournaments WHERE id = $1 FOR UPDATE',
                [tournamentId]
            );
            
            if (tournamentResult.rows.length === 0) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const tournament = tournamentResult.rows[0];
            
            // 2. –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
            const updateResult = await client.query(`
                UPDATE matches 
                SET winner_team_id = NULL, 
                    score1 = NULL, 
                    score2 = NULL, 
                    maps_data = NULL,
                    status = 'pending'
                WHERE tournament_id = $1 
                AND (winner_team_id IS NOT NULL OR score1 IS NOT NULL OR score2 IS NOT NULL)
            `, [tournamentId]);
            
            console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${updateResult.rowCount}`);
            
            // 3. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ active
            await client.query(
                'UPDATE tournaments SET status = $1 WHERE id = $2 AND status != $1',
                ['active', tournamentId]
            );
            
            await client.query('COMMIT');
            
            // 4. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'match_results_cleared', {
                clearedCount: updateResult.rowCount
            });
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [BracketService v2.0] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã –∑–∞ ${duration}ms`);
            
            return {
                success: true,
                clearedCount: updateResult.rowCount,
                duration
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [BracketService v2.0] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:`, error.message);
            throw error;
        } finally {
            client.release();
        }
    }
    
    // ==========================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ==========================================
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async _getMixTeams(tournamentId, client) {
        const result = await client.query(`
            SELECT tt.id, tt.name, 
                   JSON_AGG(
                       CASE WHEN ttm.user_id IS NOT NULL THEN
                           JSON_BUILD_OBJECT(
                               'id', u.id,
                               'username', u.username,
                               'avatar_url', u.avatar_url
                           )
                       END
                   ) FILTER (WHERE ttm.user_id IS NOT NULL) as members
            FROM tournament_teams tt
            LEFT JOIN tournament_team_members ttm ON tt.id = ttm.team_id
            LEFT JOIN users u ON ttm.user_id = u.id
            WHERE tt.tournament_id = $1
            GROUP BY tt.id
            ORDER BY tt.id
        `, [tournamentId]);
        
        return result.rows.map(team => ({
            id: team.id,
            name: team.name,
            members: team.members || []
        }));
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è solo —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async _getSoloParticipants(tournamentId, client) {
        const result = await client.query(`
            SELECT tp.id, tp.name, u.avatar_url
            FROM tournament_participants tp
            LEFT JOIN users u ON tp.user_id = u.id
            WHERE tp.tournament_id = $1
            ORDER BY tp.created_at ASC
        `, [tournamentId]);
        
        return result.rows;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è team —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async _getTeamParticipants(tournamentId, client) {
        const result = await client.query(`
            SELECT tt.id, tt.name
            FROM tournament_teams tt
            WHERE tt.tournament_id = $1
            ORDER BY tt.id
        `, [tournamentId]);
        
        return result.rows;
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    static async _sendNotifications(tournamentId, tournamentName, action) {
        try {
            const actionText = action === 'generated' ? '—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞' : '–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞';
            const message = `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ ${actionText} –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournamentName}"`;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
            await sendTournamentChatAnnouncement(tournamentId, message);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            const tournament = await this._getTournamentData(tournamentId);
            broadcastTournamentUpdate(tournamentId, tournament);
            
            console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`, error.message);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è WebSocket
     */
    static async _getTournamentData(tournamentId) {
        const result = await pool.query(`
            SELECT t.*,
                   (SELECT COUNT(*) FROM tournament_participants WHERE tournament_id = t.id) as participant_count,
                   (SELECT JSON_AGG(m.*) FROM matches m WHERE m.tournament_id = t.id) as matches
            FROM tournaments t 
            WHERE t.id = $1
        `, [tournamentId]);
        
        return result.rows[0] || null;
    }
}

module.exports = BracketService; 