// backend/services/tournament/BracketService.js

const { generateBracket } = require('../../bracketGenerator');
const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const MatchRepository = require('../../repositories/tournament/MatchRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { broadcastTournamentUpdate } = require('../../notifications');
const pool = require('../../db');

// üîí –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è debounce –∑–∞—â–∏—Ç—ã
const lastRegenerationTimes = new Map();
const REGENERATION_DEBOUNCE_MS = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

class BracketService {
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ debounce –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @returns {boolean} - –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
     */
    static _checkRegenerationDebounce(tournamentId) {
        const now = Date.now();
        const lastTime = lastRegenerationTimes.get(tournamentId) || 0;
        const timePassed = now - lastTime;
        
        if (timePassed < REGENERATION_DEBOUNCE_MS) {
            const timeLeft = Math.ceil((REGENERATION_DEBOUNCE_MS - timePassed) / 1000);
            throw new Error(`–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${timeLeft} —Å–µ–∫—É–Ω–¥.`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        lastRegenerationTimes.set(tournamentId, now);
        
        console.log(`‚úÖ [BracketService] Debounce –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return true;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static async generateBracket(tournamentId, userId, thirdPlaceMatch = false) {
        console.log(`ü•ä BracketService: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkBracketAccess(tournamentId, userId);

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–Ω–µ –±–ª–æ–∫–æ–≤ try-catch
        let bracketData = null;
        let savedMatches = [];
        let totalMatches = 0;
        
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
            console.log(`üîí [generateBracket] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏`);
            await client.query('SET statement_timeout = 10000'); // 10 —Å–µ–∫—É–Ω–¥
            
            // üîí –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            console.log(`üîí [generateBracket] –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä ${tournamentId} –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`);
            
            let tournamentResult;
            try {
                tournamentResult = await client.query(
                    'SELECT * FROM tournaments WHERE id = $1 FOR UPDATE NOWAIT',
                    [parseInt(tournamentId)] // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
                );
                console.log(`‚úÖ [generateBracket] –¢—É—Ä–Ω–∏—Ä ${tournamentId} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
            } catch (lockError) {
                if (lockError.code === '55P03') {
                    // Lock not available immediately
                    console.log(`‚ö†Ô∏è [generateBracket] –¢—É—Ä–Ω–∏—Ä ${tournamentId} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –ø—Ä–æ–±—É–µ–º —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º...`);
                    
                    // –ü—Ä–æ–±—É–µ–º —Å –æ–±—ã—á–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, –Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    tournamentResult = await client.query(
                        'SELECT * FROM tournaments WHERE id = $1 FOR UPDATE',
                        [parseInt(tournamentId)] // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
                    );
                    console.log(`‚úÖ [generateBracket] –¢—É—Ä–Ω–∏—Ä ${tournamentId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è`);
                } else {
                    throw lockError;
                }
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await client.query('SET statement_timeout = 0');
            console.log(`üîì [generateBracket] –¢–∞–π–º–∞—É—Ç —Å–±—Ä–æ—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é`);
            
            if (tournamentResult.rows.length === 0) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const tournament = tournamentResult.rows[0];
            
            if (tournament.status !== 'active') {
                throw new Error('–ú–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
            }

            // üîí –ü–†–û–í–ï–†–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ê–¢–ß–ò –í –†–ê–ú–ö–ê–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
            console.log(`üîç [generateBracket] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            const existingMatchesResult = await client.query(
                'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
                [parseInt(tournamentId)] // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
            );
            
            const existingMatchCount = parseInt(existingMatchesResult.rows[0].count);
            
            if (existingMatchCount > 0) {
                console.log(`üîç [generateBracket] –°–µ—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} (${existingMatchCount} –º–∞—Ç—á–µ–π). –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Ç–∫—É.`);
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏
                const existingMatches = await MatchRepository.getByTournamentId(tournamentId);
                const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);
                
                await client.query('COMMIT');
                
                return {
                    success: true,
                    matches: existingMatches,
                    totalMatches: existingMatches.length,
                    message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${existingMatches.length} –º–∞—Ç—á–µ–π`,
                    tournament: updatedTournament,
                    existing: true // –§–ª–∞–≥ —á—Ç–æ —Å–µ—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞
                };
            }

            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            let participantsForBracket;
            let participantCount;
            
            console.log(`üìä [generateBracket] –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}, —Ñ–æ—Ä–º–∞—Ç: ${tournament.format}`);
            
            if (tournament.format === 'mix') {
                // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                console.log(`üéØ [generateBracket] –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
                const teams = await this._getMixTeams(tournamentId);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç undefined
                if (!teams) {
                    console.error(`‚ùå [generateBracket] –ú–µ—Ç–æ–¥ _getMixTeams –≤–µ—Ä–Ω—É–ª undefined –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.');
                }
                
                if (!Array.isArray(teams)) {
                    console.error(`‚ùå [generateBracket] _getMixTeams –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤:`, typeof teams, teams);
                    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞');
                }
                
                console.log(`üìä [generateBracket] –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${teams.length}`);
                
                if (teams.length < 2) {
                    throw new Error('–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 –∫–æ–º–∞–Ω–¥—ã. –°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.');
                }
                participantsForBracket = teams;
                participantCount = teams.length;
                console.log(`üìä –ö–æ–º–∞–Ω–¥ –≤ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–µ: ${teams.length}`);
            } else {
                // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                console.log(`üë• [generateBracket] –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
                const participants = await ParticipantRepository.getByTournamentId(tournamentId);
                if (participants.length < 2) {
                    throw new Error('–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                }
                participantsForBracket = participants;
                participantCount = participants.length;
                console.log(`üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: ${participants.length}`);
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É —Å –ø–æ–º–æ—â—å—é bracketGenerator
            console.log(`‚öôÔ∏è [generateBracket] –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            bracketData = await generateBracket(
                tournament.format,
                tournamentId,
                participantsForBracket,
                thirdPlaceMatch
            );

            console.log(`üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ—Ç–∫–∞: ${bracketData.matches.length} –º–∞—Ç—á–µ–π`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ç–∫–∞ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if (!bracketData.matches || bracketData.matches.length === 0) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ 0 –º–∞—Ç—á–µ–π');
            }

            // üîí –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ —Å–æ–∑–¥–∞–ª –º–∞—Ç—á–∏ –ø–æ–∫–∞ –º—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏
            const doubleCheckResult = await client.query(
                'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
                [parseInt(tournamentId)] // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
            );
            
            if (parseInt(doubleCheckResult.rows[0].count) > 0) {
                console.log(`‚ö†Ô∏è [generateBracket] –ú–∞—Ç—á–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
                
                // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
                const existingMatches = await MatchRepository.getByTournamentId(tournamentId);
                const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);
                
                await client.query('COMMIT');
                
                return {
                    success: true,
                    matches: existingMatches,
                    totalMatches: existingMatches.length,
                    message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º: ${existingMatches.length} –º–∞—Ç—á–µ–π`,
                    tournament: updatedTournament,
                    existing: true,
                    concurrent: true // –§–ª–∞–≥ —á—Ç–æ –±—ã–ª–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
                };
            }

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏
            console.log(`üìù [generateBracket] –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏`);
            await logTournamentEvent(tournamentId, userId, 'bracket_generated', {
                matchesCount: bracketData.matches.length,
                format: tournament.format,
                thirdPlaceMatch
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            console.log(`üíæ [generateBracket] –°–æ—Ö—Ä–∞–Ω—è–µ–º ${bracketData.matches.length} –º–∞—Ç—á–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
            for (const match of bracketData.matches) {
                const matchResult = await client.query(`
                    INSERT INTO matches (
                        tournament_id, round, match_number,
                        team1_id, team2_id, next_match_id, loser_next_match_id,
                        is_third_place_match, bracket_type, target_slot
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                    RETURNING *
                `, [
                    parseInt(tournamentId), // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
                    match.round,
                    match.match_number,
                    match.team1_id || null,
                    match.team2_id || null,
                    match.next_match_id || null,
                    match.loser_next_match_id || null,
                    match.is_third_place_match || false,
                    match.bracket_type || 'main',
                    match.target_slot || null
                ]);

                savedMatches.push(matchResult.rows[0]);
            }

            totalMatches = savedMatches.length;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
            console.log(`üîó [generateBracket] –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏`);
            await this._updateMatchLinks(client, savedMatches, bracketData.matches);

            await client.query('COMMIT');
            
            console.log(`‚úÖ [generateBracket] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå BracketService: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            console.error(`‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}, –∫–æ–¥: ${error.code}`);
            console.error(`‚ùå Stack trace:`, error.stack);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
            if (error.code === '57014') {
                throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—É—Ä–Ω–∏—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
            }
            
            throw error;
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            try {
                if (client && !client._ended) {
                    await client.query('SET statement_timeout = 0');
                }
            } catch (resetError) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å statement_timeout:', resetError.message);
            }
            client.release();
            console.log(`üîì [generateBracket] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        }

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ü–û–°–õ–ï –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (!bracketData || !bracketData.matches) {
                console.warn('‚ö†Ô∏è [generateBracket] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö bracketData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏');
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            console.log(`üì° [generateBracket] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
            await broadcastTournamentUpdate(tournamentId);
            await sendTournamentChatAnnouncement(
                tournamentId, 
                `ü•ä –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! –°–æ–∑–¥–∞–Ω–æ ${totalMatches} –º–∞—Ç—á–µ–π.`,
                'system',
                userId
            );
        } catch (notificationError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationError.message);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);

        console.log(`‚úÖ BracketService: –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        return {
            success: true,
            matches: bracketData.matches,
            totalMatches: totalMatches,
            message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${totalMatches} –º–∞—Ç—á–µ–π`,
            tournament: updatedTournament
        };
    }

    /**
     * –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (—Å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º)
     */
    static async regenerateBracket(tournamentId, userId, shuffle = false, thirdPlaceMatch = false) {
        console.log(`üîÑ BracketService: –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} (shuffle: ${shuffle})`);

        // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ debounce –∑–∞—â–∏—Ç—ã –æ—Ç —á–∞—Å—Ç—ã—Ö —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        this._checkRegenerationDebounce(tournamentId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkBracketAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.status !== 'active') {
            throw new Error('–ú–æ–∂–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–Ω–µ –±–ª–æ–∫–æ–≤ try-catch
        let deletedMatchesCount = 0;
        const client = await pool.connect();

        try {
            // üîß –§–ê–ó–ê 1: –£–î–ê–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ú–ê–¢–ß–ï–ô –í –û–¢–î–ï–õ–¨–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
            console.log(`üóëÔ∏è [regenerateBracket] –§–ê–ó–ê 1: –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            
            await client.query('BEGIN');
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
            console.log(`üîí [regenerateBracket] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏`);
            await client.query('SET statement_timeout = 10000'); // 10 —Å–µ–∫—É–Ω–¥
            
            // üîí –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            console.log(`üîí [regenerateBracket] –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä ${tournamentId} –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`);
            
            let tournamentCheck;
            try {
                tournamentCheck = await client.query(
                    'SELECT id FROM tournaments WHERE id = $1 FOR UPDATE NOWAIT',
                    [parseInt(tournamentId)] // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
                );
                console.log(`‚úÖ [regenerateBracket] –¢—É—Ä–Ω–∏—Ä ${tournamentId} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
            } catch (lockError) {
                if (lockError.code === '55P03') {
                    // Lock not available immediately
                    console.log(`‚ö†Ô∏è [regenerateBracket] –¢—É—Ä–Ω–∏—Ä ${tournamentId} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –ø—Ä–æ–±—É–µ–º —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º...`);
                    
                    // –ü—Ä–æ–±—É–µ–º —Å –æ–±—ã—á–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, –Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    tournamentCheck = await client.query(
                        'SELECT id FROM tournaments WHERE id = $1 FOR UPDATE',
                        [parseInt(tournamentId)] // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
                    );
                    console.log(`‚úÖ [regenerateBracket] –¢—É—Ä–Ω–∏—Ä ${tournamentId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è`);
                } else {
                    throw lockError;
                }
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await client.query('SET statement_timeout = 0');
            console.log(`üîì [regenerateBracket] –¢–∞–π–º–∞—É—Ç —Å–±—Ä–æ—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é`);

            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏
            console.log(`üóëÔ∏è [regenerateBracket] –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            const deletedMatches = await client.query(
                'DELETE FROM matches WHERE tournament_id = $1 RETURNING id',
                [parseInt(tournamentId)] // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
            );

            deletedMatchesCount = deletedMatches.rows.length;
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deletedMatchesCount} —Å—Ç–∞—Ä—ã—Ö –º–∞—Ç—á–µ–π`);

            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: COMMIT –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
            await client.query('COMMIT');
            console.log(`‚úÖ [regenerateBracket] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            
        } catch (deleteError) {
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ–ª–∞–µ–º ROLLBACK —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
            try {
                await client.query('ROLLBACK');
                console.log(`üîÑ [regenerateBracket] ROLLBACK –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è`);
            } catch (rollbackError) {
                console.warn(`‚ö†Ô∏è [regenerateBracket] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å ROLLBACK:`, rollbackError.message);
            }
            console.error(`‚ùå [regenerateBracket] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, deleteError);
            throw deleteError;
        } finally {
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–∞–∑—ã —É–¥–∞–ª–µ–Ω–∏—è
            try {
                if (client && !client._ended) {
                    await client.query('SET statement_timeout = 0');
                    console.log(`üîì [regenerateBracket] statement_timeout —Å–±—Ä–æ—à–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è`);
                }
            } catch (resetError) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å statement_timeout –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', resetError.message);
            }
            client.release();
            console.log(`üîì [regenerateBracket] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è`);
        }
        
        try {
            // üîß –§–ê–ó–ê 2: –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–û–í–û–ô –°–ï–¢–ö–ò (–ë–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ò, —Ç–∞–∫ –∫–∞–∫ generateBracket —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏)
            console.log(`‚öôÔ∏è [regenerateBracket] –§–ê–ó–ê 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            const result = await this.generateBracket(parseInt(tournamentId), userId, thirdPlaceMatch);

            // üîß –§–ê–ó–ê 3: –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï (–ë–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ò)
            console.log(`üì° [regenerateBracket] –§–ê–ó–ê 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            await sendTournamentChatAnnouncement(
                tournamentId,
                `üîÑ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! ${shuffle ? '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã. ' : ''}–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ç–∫—É: /tournaments/${tournamentId}`,
                'system',
                userId
            );

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            console.log(`üìù [regenerateBracket] –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            await logTournamentEvent(tournamentId, userId, 'bracket_regenerated', {
                shuffle: shuffle,
                deleted_matches: deletedMatchesCount,
                new_matches: result.matches.length
            });

            console.log(`‚úÖ BracketService: –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            return {
                ...result,
                message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞${shuffle ? ' —Å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' : ''}`
            };

        } catch (error) {
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í —ç—Ç–æ–º –±–ª–æ–∫–µ –ù–ï –Ω—É–∂–µ–Ω ROLLBACK, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–¥–µ—Å—å
            console.error(`‚ùå BracketService: –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            console.error(`‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}, –∫–æ–¥: ${error.code}`);
            console.error(`‚ùå Stack trace:`, error.stack);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
            if (error.code === '57014') {
                throw new Error('–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—É—Ä–Ω–∏—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
            }
            
            throw error;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π (—Å–±—Ä–æ—Å —Ç—É—Ä–Ω–∏—Ä–∞)
     */
    static async clearMatchResults(tournamentId, userId) {
        console.log(`üßπ BracketService: –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkBracketAccess(tournamentId, userId);

        const client = await pool.connect();
        let resetResult; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤–Ω–µ try –±–ª–æ–∫–æ–≤
        
        try {
            await client.query('BEGIN');
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
            console.log(`üîí [clearMatchResults] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏`);
            await client.query('SET statement_timeout = 10000'); // 10 —Å–µ–∫—É–Ω–¥
            
            // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            console.log(`üîí [clearMatchResults] –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä ${tournamentId} –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏`);
            
            let tournamentCheck;
            try {
                tournamentCheck = await client.query(
                    'SELECT id FROM tournaments WHERE id = $1 FOR UPDATE NOWAIT',
                    [tournamentId]
                );
                console.log(`‚úÖ [clearMatchResults] –¢—É—Ä–Ω–∏—Ä ${tournamentId} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
            } catch (lockError) {
                if (lockError.code === '55P03') {
                    // Lock not available immediately
                    console.log(`‚ö†Ô∏è [clearMatchResults] –¢—É—Ä–Ω–∏—Ä ${tournamentId} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –ø—Ä–æ–±—É–µ–º —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º...`);
                    
                    // –ü—Ä–æ–±—É–µ–º —Å –æ–±—ã—á–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, –Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    tournamentCheck = await client.query(
                        'SELECT id FROM tournaments WHERE id = $1 FOR UPDATE',
                        [tournamentId]
                    );
                    console.log(`‚úÖ [clearMatchResults] –¢—É—Ä–Ω–∏—Ä ${tournamentId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è`);
                } else {
                    throw lockError;
                }
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await client.query('SET statement_timeout = 0');
            console.log(`üîì [clearMatchResults] –¢–∞–π–º–∞—É—Ç —Å–±—Ä–æ—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—á–∏—Å—Ç–∫—É`);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
            console.log(`üßπ [clearMatchResults] –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            resetResult = await client.query(`
                UPDATE matches 
                SET winner_team_id = NULL, score1 = NULL, score2 = NULL, maps_data = NULL 
                WHERE tournament_id = $1
                RETURNING id
            `, [tournamentId]);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            console.log(`üîÑ [clearMatchResults] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏`);
            await this._resetMatchParticipants(client, tournamentId);

            await client.query('COMMIT');
            console.log(`‚úÖ [clearMatchResults] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå BracketService: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            console.error(`‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}, –∫–æ–¥: ${error.code}`);
            console.error(`‚ùå Stack trace:`, error.stack);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
            if (error.code === '57014') {
                throw new Error('–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—É—Ä–Ω–∏—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
            }
            
            throw error;
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            try {
                if (client && !client._ended) {
                    await client.query('SET statement_timeout = 0');
                }
            } catch (resetError) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å statement_timeout:', resetError.message);
            }
            client.release();
            console.log(`üîì [clearMatchResults] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        }

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            console.log(`üì° [clearMatchResults] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            await sendTournamentChatAnnouncement(
                tournamentId,
                `üßπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π —Å–±—Ä–æ—à–µ–Ω—ã. –¢—É—Ä–Ω–∏—Ä –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é. –°—Å—ã–ª–∫–∞: /tournaments/${tournamentId}`,
                'system',
                userId
            );

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            console.log(`üìù [clearMatchResults] –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            await logTournamentEvent(tournamentId, userId, 'match_results_cleared', {
                cleared_matches: resetResult.rows.length
            });

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            console.log(`üìä [clearMatchResults] –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);
            broadcastTournamentUpdate(tournamentId, updatedTournament);

            console.log(`‚úÖ BracketService: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –æ—á–∏—â–µ–Ω—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            return {
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã',
                tournament: updatedTournament,
                cleared_matches: resetResult.rows.length
            };
        } catch (postError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', postError.message);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Å—Ç-–æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
            return {
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã',
                cleared_matches: resetResult.rows.length
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static async getBracket(tournamentId) {
        console.log(`üìã BracketService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ ${tournamentId}`);

        const matches = await MatchRepository.getByTournamentId(tournamentId);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        const bracket = matches.reduce((acc, match) => {
            if (!acc[match.round]) {
                acc[match.round] = [];
            }
            acc[match.round].push(match);
            return acc;
        }, {});

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –ø–æ match_number
        Object.keys(bracket).forEach(round => {
            bracket[round].sort((a, b) => (a.match_number || 0) - (b.match_number || 0));
        });

        return bracket;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @private
     */
    static async _updateMatchLinks(client, savedMatches, originalMatches) {
        console.log('üîó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏...');

        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö ID –Ω–∞ –Ω–æ–≤—ã–µ
        const idMapping = {};
        originalMatches.forEach((original, index) => {
            if (original.temp_id) {
                idMapping[original.temp_id] = savedMatches[index].id;
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏
        for (let i = 0; i < savedMatches.length; i++) {
            const match = savedMatches[i];
            const original = originalMatches[i];

            let nextMatchId = null;
            let loserNextMatchId = null;

            if (original.next_match_temp_id && idMapping[original.next_match_temp_id]) {
                nextMatchId = idMapping[original.next_match_temp_id];
            }

            if (original.loser_next_match_temp_id && idMapping[original.loser_next_match_temp_id]) {
                loserNextMatchId = idMapping[original.loser_next_match_temp_id];
            }

            if (nextMatchId || loserNextMatchId) {
                await client.query(
                    'UPDATE matches SET next_match_id = $1, loser_next_match_id = $2 WHERE id = $3',
                    [nextMatchId, loserNextMatchId, match.id]
                );
            }
        }
    }

    /**
     * –°–±—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–µ–π –≤ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     * @private
     */
    static async _resetMatchParticipants(client, tournamentId) {
        console.log('üîÑ –°–±—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏...');

        // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        const tournament = await TournamentRepository.getById(tournamentId);
        
        let participants;
        if (tournament.format === 'mix') {
            // –î–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            participants = await this._getMixTeams(tournamentId);
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = await ParticipantRepository.getByTournamentId(tournamentId);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        const firstRoundMatches = await client.query(
            'SELECT * FROM matches WHERE tournament_id = $1 AND round = 1 ORDER BY position',
            [tournamentId]
        );

        // –û—á–∏—â–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        await client.query(
            'UPDATE matches SET team1_id = NULL, team2_id = NULL WHERE tournament_id = $1 AND round > 1',
            [tournamentId]
        );

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        for (let i = 0; i < firstRoundMatches.rows.length && i * 2 < participants.length; i++) {
            const match = firstRoundMatches.rows[i];
            const participant1 = participants[i * 2];
            const participant2 = participants[i * 2 + 1] || null;

            await client.query(
                'UPDATE matches SET team1_id = $1, team2_id = $2 WHERE id = $3',
                [participant1.id, participant2?.id, match.id]
            );
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–µ—Ç–∫–∏
     * @private
     */
    static async _getMixTeams(tournamentId) {
        console.log(`üèÜ [_getMixTeams] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            const teamsQuery = await pool.query(`
                SELECT 
                    tt.id,
                    tt.name,
                    COUNT(ttm.user_id) as members_count,
                    ARRAY_AGG(
                        JSON_BUILD_OBJECT(
                            'id', u.id,
                            'username', u.username,
                            'avatar_url', u.avatar_url
                        ) ORDER BY ttm.id
                    ) as members
                FROM tournament_teams tt
                LEFT JOIN tournament_team_members ttm ON tt.id = ttm.team_id
                LEFT JOIN users u ON ttm.user_id = u.id
                WHERE tt.tournament_id = $1
                GROUP BY tt.id, tt.name
                ORDER BY tt.id
            `, [tournamentId]);

            console.log(`üîç [_getMixTeams] SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${teamsQuery.rows.length}`);
            
            if (teamsQuery.rows.length === 0) {
                console.warn(`‚ö†Ô∏è [_getMixTeams] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
                return [];
            }

            const teams = teamsQuery.rows.map(team => ({
                id: team.id,
                name: team.name,
                members: team.members.filter(member => member.id !== null)
            }));

            console.log(`‚úÖ [_getMixTeams] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${teams.length}`);
            teams.forEach((team, index) => {
                console.log(`   üìã –ö–æ–º–∞–Ω–¥–∞ ${index + 1}: "${team.name}" (ID: ${team.id}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${team.members.length})`);
            });

            return teams;

        } catch (error) {
            console.error(`‚ùå [_getMixTeams] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Ç–∫–æ–π
     * @private
     */
    static async _checkBracketAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (!isAdmin) {
                throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π');
            }
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async cleanupDuplicateMatches(tournamentId, userId) {
        console.log(`üßπ BracketService: –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkBracketAccess(tournamentId, userId);

        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –º–∞—Ç—á–∏ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ tournament_id, match_number, round, team1_id, team2_id)
            const duplicatesQuery = `
                SELECT 
                    array_agg(id ORDER BY id DESC) as ids,
                    COUNT(*) as count,
                    tournament_id, 
                    match_number, 
                    round, 
                    COALESCE(team1_id, -1) as team1_id, 
                    COALESCE(team2_id, -1) as team2_id
                FROM matches 
                WHERE tournament_id = $1
                GROUP BY tournament_id, match_number, round, COALESCE(team1_id, -1), COALESCE(team2_id, -1)
                HAVING COUNT(*) > 1
                ORDER BY match_number, round
            `;
            
            const duplicatesResult = await client.query(duplicatesQuery, [tournamentId]);
            
            if (duplicatesResult.rows.length === 0) {
                console.log(`‚úÖ [cleanupDuplicateMatches] –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
                await client.query('COMMIT');
                return {
                    success: true,
                    removed: 0,
                    message: '–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –º–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                };
            }
            
            let totalRemoved = 0;
            
            for (const duplicate of duplicatesResult.rows) {
                const matchIds = duplicate.ids;
                const keepId = matchIds[0]; // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π (–ø–µ—Ä–≤—ã–π –≤ –º–∞—Å—Å–∏–≤–µ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ id DESC)
                const removeIds = matchIds.slice(1); // –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                
                console.log(`üóëÔ∏è [cleanupDuplicateMatches] –ú–∞—Ç—á ${duplicate.match_number} (—Ä–∞—É–Ω–¥ ${duplicate.round}): –æ—Å—Ç–∞–≤–ª—è–µ–º ID ${keepId}, —É–¥–∞–ª—è–µ–º [${removeIds.join(', ')}]`);
                
                // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –º–∞—Ç—á–∏
                if (removeIds.length > 0) {
                    const deleteResult = await client.query(
                        'DELETE FROM matches WHERE id = ANY($1::int[])',
                        [removeIds]
                    );
                    totalRemoved += deleteResult.rowCount;
                }
            }
            
            await client.query('COMMIT');
            
            console.log(`‚úÖ [cleanupDuplicateMatches] –£–¥–∞–ª–µ–Ω–æ ${totalRemoved} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'duplicate_matches_cleaned', {
                removedCount: totalRemoved,
                duplicateGroups: duplicatesResult.rows.length
            });
            
            return {
                success: true,
                removed: totalRemoved,
                duplicateGroups: duplicatesResult.rows.length,
                message: `–£–¥–∞–ª–µ–Ω–æ ${totalRemoved} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ç—á–µ–π –∏–∑ ${duplicatesResult.rows.length} –≥—Ä—É–ø–ø`
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error('‚ùå BracketService: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π:', error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async checkForDuplicateMatches(tournamentId) {
        console.log(`üîç BracketService: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const duplicatesQuery = `
            SELECT 
                COUNT(*) as total_duplicates,
                array_agg(DISTINCT match_number ORDER BY match_number) as duplicate_match_numbers
            FROM (
                SELECT 
                    match_number,
                    COUNT(*) as count
                FROM matches 
                WHERE tournament_id = $1
                GROUP BY tournament_id, match_number, round, COALESCE(team1_id, -1), COALESCE(team2_id, -1)
                HAVING COUNT(*) > 1
            ) duplicates
        `;
        
        const result = await pool.query(duplicatesQuery, [tournamentId]);
        const duplicateInfo = result.rows[0];
        
        const hasDuplicates = parseInt(duplicateInfo.total_duplicates) > 0;
        
        if (hasDuplicates) {
            console.log(`‚ö†Ô∏è [checkForDuplicateMatches] –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId}: ${duplicateInfo.total_duplicates} –≥—Ä—É–ø–ø –¥—É–±–ª–µ–π –≤ –º–∞—Ç—á–∞—Ö ${duplicateInfo.duplicate_match_numbers.join(', ')}`);
        } else {
            console.log(`‚úÖ [checkForDuplicateMatches] –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId}`);
        }
        
        return {
            hasDuplicates,
            duplicateCount: parseInt(duplicateInfo.total_duplicates),
            duplicateMatchNumbers: duplicateInfo.duplicate_match_numbers || []
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π)
     * üÜï –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
     */
    static async clearBracket(tournamentId, userId) {
        console.log(`üóëÔ∏è BracketService: –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkBracketAccess(tournamentId, userId);

        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.status !== 'active') {
            throw new Error('–ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤');
        }

        const client = await pool.connect();
        let deletedMatches; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤–Ω–µ try –±–ª–æ–∫–æ–≤
        
        try {
            await client.query('BEGIN');
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
            console.log(`üîí [clearBracket] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏`);
            await client.query('SET statement_timeout = 10000'); // 10 —Å–µ–∫—É–Ω–¥
            
            // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            console.log(`üîí [clearBracket] –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä ${tournamentId} –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏`);
            
            let tournamentCheck;
            try {
                tournamentCheck = await client.query(
                    'SELECT id FROM tournaments WHERE id = $1 FOR UPDATE NOWAIT',
                    [tournamentId]
                );
                console.log(`‚úÖ [clearBracket] –¢—É—Ä–Ω–∏—Ä ${tournamentId} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
            } catch (lockError) {
                if (lockError.code === '55P03') {
                    // Lock not available immediately
                    console.log(`‚ö†Ô∏è [clearBracket] –¢—É—Ä–Ω–∏—Ä ${tournamentId} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –ø—Ä–æ–±—É–µ–º —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º...`);
                    
                    // –ü—Ä–æ–±—É–µ–º —Å –æ–±—ã—á–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, –Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    tournamentCheck = await client.query(
                        'SELECT id FROM tournaments WHERE id = $1 FOR UPDATE',
                        [tournamentId]
                    );
                    console.log(`‚úÖ [clearBracket] –¢—É—Ä–Ω–∏—Ä ${tournamentId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è`);
                } else {
                    throw lockError;
                }
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await client.query('SET statement_timeout = 0');
            console.log(`üîì [clearBracket] –¢–∞–π–º–∞—É—Ç —Å–±—Ä–æ—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—á–∏—Å—Ç–∫—É`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–∞—Ç—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            console.log(`üîç [clearBracket] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            const existingMatchesResult = await client.query(
                'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
                [tournamentId]
            );
            
            const existingMatchCount = parseInt(existingMatchesResult.rows[0].count);
            
            if (existingMatchCount === 0) {
                await client.query('COMMIT');
                console.log(`‚ÑπÔ∏è [clearBracket] –¢—É—Ä–Ω–∏—Ä ${tournamentId} –Ω–µ –∏–º–µ–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
                return {
                    success: true,
                    message: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                    deletedMatches: 0
                };
            }

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
            console.log(`üóëÔ∏è [clearBracket] –£–¥–∞–ª—è–µ–º ${existingMatchCount} –º–∞—Ç—á–µ–π –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            deletedMatches = await client.query(
                'DELETE FROM matches WHERE tournament_id = $1 RETURNING id',
                [tournamentId]
            );

            console.log(`üóëÔ∏è [clearBracket] –£–¥–∞–ª–µ–Ω–æ ${deletedMatches.rows.length} –º–∞—Ç—á–µ–π –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

            await client.query('COMMIT');
            console.log(`‚úÖ [clearBracket] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [clearBracket] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            console.error(`‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}, –∫–æ–¥: ${error.code}`);
            console.error(`‚ùå Stack trace:`, error.stack);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
            if (error.code === '57014') {
                throw new Error('–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—É—Ä–Ω–∏—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
            }
            
            throw error;
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            try {
                if (client && !client._ended) {
                    await client.query('SET statement_timeout = 0');
                }
            } catch (resetError) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å statement_timeout:', resetError.message);
            }
            client.release();
            console.log(`üîì [clearBracket] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        }

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            console.log(`üìù [clearBracket] –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            await logTournamentEvent(tournamentId, userId, 'bracket_cleared', {
                deletedMatches: deletedMatches.rows.length,
                reason: 'team_regeneration'
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è)
            console.log(`üì° [clearBracket] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            await sendTournamentChatAnnouncement(
                tournamentId,
                `üóëÔ∏è –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥`,
                'system',
                userId
            );

            console.log(`‚úÖ [clearBracket] –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

            return {
                success: true,
                message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ${deletedMatches.rows.length} –º–∞—Ç—á–µ–π`,
                deletedMatches: deletedMatches.rows.length
            };
        } catch (postError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ç–∫–∏:', postError.message);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Å—Ç-–æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
            return {
                success: true,
                message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ${deletedMatches.rows.length} –º–∞—Ç—á–µ–π`,
                deletedMatches: deletedMatches.rows.length
            };
        }
    }
}

module.exports = BracketService; 