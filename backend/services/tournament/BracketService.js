// backend/services/tournament/BracketService.js
//
// üîÑ –£–ü–†–û–©–ï–ù–ù–´–ô –ò –ù–ê–î–ï–ñ–ù–´–ô BRACKET SERVICE V2.0
// ================================================
// 
// ‚úÖ –ü—Ä–∏–Ω—Ü–∏–ø—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
// ‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
// ‚Ä¢ –û–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ 
// ‚Ä¢ –ú–∏–Ω–∏–º—É–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –º—å—é—Ç–µ–∫—Å–æ–≤
// ‚Ä¢ –ü–æ–Ω—è—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ overengineering
// ‚Ä¢ –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤—Å–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ)
// ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
//

const pool = require('../../db');
const { generateBracket: bracketGenerator } = require('../../bracketGenerator');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { broadcastTournamentUpdate } = require('../../notifications');

class BracketService {
    /**
     * üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è v2.0)
     */
    static async generateBracket(tournamentId, userId, thirdPlaceMatch = false) {
        const startTime = Date.now();
        console.log(`üîÑ [BracketService v2.0] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} (thirdPlaceMatch: ${thirdPlaceMatch})`);
        
        const client = await pool.connect();
        try {
            console.log(`üîê [generateBracket] –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...`);
            await client.query('BEGIN');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
            console.log(`‚è∞ [generateBracket] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥...`);
            await client.query('SET statement_timeout = 30000'); // 30 —Å–µ–∫—É–Ω–¥
            
            console.log(`üîç [generateBracket] –ò—â–µ–º —Ç—É—Ä–Ω–∏—Ä ${tournamentId}...`);
            console.time(`find-tournament-${tournamentId}`);
            
            // 1. –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
            const tournamentResult = await client.query(
                'SELECT id, name, status, format, participant_type, created_by FROM tournaments WHERE id = $1',
                [tournamentId]
            );
            
            console.timeEnd(`find-tournament-${tournamentId}`);
            console.log(`‚úÖ [generateBracket] –¢—É—Ä–Ω–∏—Ä –Ω–∞–π–¥–µ–Ω: ${tournamentResult.rows.length} –∑–∞–ø–∏—Å–µ–π`);
            
            if (tournamentResult.rows.length === 0) {
                throw new Error(`–¢—É—Ä–Ω–∏—Ä ${tournamentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            const tournament = tournamentResult.rows[0];
            console.log(`üìä [generateBracket] –¢—É—Ä–Ω–∏—Ä: ${tournament.name}, —Å—Ç–∞—Ç—É—Å: ${tournament.status}, —Ñ–æ—Ä–º–∞—Ç: ${tournament.format}`);
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            console.log(`üîê [generateBracket] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
            if (tournament.created_by !== userId) {
                console.log(`üîç [generateBracket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞...`);
                const adminCheck = await client.query(
                    'SELECT id FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                    [tournamentId, userId]
                );
                if (adminCheck.rows.length === 0) {
                    throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞');
                }
                console.log(`‚úÖ [generateBracket] –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã`);
            } else {
                console.log(`‚úÖ [generateBracket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç—É—Ä–Ω–∏—Ä–∞`);
            }
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∞—Ç—á–∏
            console.log(`üîç [generateBracket] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏...`);
            const existingMatches = await client.query(
                'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
                [tournamentId]
            );
            
            const matchCount = parseInt(existingMatches.rows[0].count);
            console.log(`üìä [generateBracket] –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π: ${matchCount}`);
            
            if (matchCount > 0) {
                throw new Error('–°–µ—Ç–∫–∞ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è.');
            }
            
            console.log(`üë• [generateBracket] –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞...`);
            console.time(`get-participants-${tournamentId}`);
            
            // 4. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            let participants = [];
            if (tournament.participant_type === 'team') {
                const teamsResult = await client.query(
                    'SELECT id, name FROM tournament_teams WHERE tournament_id = $1',
                    [tournamentId]
                );
                participants = teamsResult.rows;
                console.log(`üë• [generateBracket] –ù–∞–π–¥–µ–Ω–æ ${participants.length} –∫–æ–º–∞–Ω–¥`);
            } else {
                const participantsResult = await client.query(
                    'SELECT id, name FROM tournament_participants WHERE tournament_id = $1',
                    [tournamentId]
                );
                participants = participantsResult.rows;
                console.log(`üë• [generateBracket] –ù–∞–π–¥–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            }
            
            console.timeEnd(`get-participants-${tournamentId}`);
            
            if (participants.length < 2) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ (–º–∏–Ω–∏–º—É–º 2)');
            }
            
            console.log(`‚öôÔ∏è [generateBracket] –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∫–∏...`);
            console.log(`‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: format="${tournament.format}", tournamentId=${tournamentId}, participants=${participants.length}, thirdPlaceMatch=${thirdPlaceMatch}`);
            console.time(`generate-bracket-${tournamentId}`);
            
            // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É
            const bracketResult = await bracketGenerator(
                tournament.format, 
                tournamentId, 
                participants, 
                thirdPlaceMatch
            );
            
            console.timeEnd(`generate-bracket-${tournamentId}`);
            console.log(`‚úÖ [generateBracket] generateBracket –∑–∞–≤–µ—Ä—à–µ–Ω`);
            console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`, typeof bracketResult, bracketResult?.success);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –º–∞—Ç—á–µ–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const matches = bracketResult?.matches || bracketResult || [];
            console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç—á–µ–π: ${matches.length}`);
            
            if (!Array.isArray(matches) || matches.length === 0) {
                throw new Error('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–ª –º–∞—Ç—á–∏');
            }
            
            console.log(`üíæ [generateBracket] –°–æ—Ö—Ä–∞–Ω—è–µ–º ${matches.length} –º–∞—Ç—á–µ–π –≤ –ë–î...`);
            console.time(`save-matches-${tournamentId}`);
            
            // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            for (const match of matches) {
                await client.query(
                    `INSERT INTO matches (
                        tournament_id, round, match_number, team1_id, team2_id,
                        next_match_id, is_third_place_match, position, parent_match1_id, parent_match2_id
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`,
                    [
                        tournamentId,
                        match.round,
                        match.match_number,
                        match.team1_id || null,
                        match.team2_id || null,
                        match.next_match_id || null,
                        match.is_third_place_match || false,
                        match.position || null,
                        match.parent_match1_id || null,
                        match.parent_match2_id || null
                    ]
                );
            }
            
            console.timeEnd(`save-matches-${tournamentId}`);
            console.log(`‚úÖ [generateBracket] –í—Å–µ –º–∞—Ç—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
            
            console.log(`üíæ [generateBracket] –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...`);
            await client.query('COMMIT');
            console.log(`‚úÖ [generateBracket] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            
            const duration = Date.now() - startTime;
            console.log(`üéâ [generateBracket] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}ms`);
            
            return { success: true, matchesCount: matches.length, duration };
            
        } catch (error) {
            console.error(`‚ùå [generateBracket] –û—à–∏–±–∫–∞:`, error.message);
            console.error(`‚ùå Stack trace:`, error.stack);
            
            try {
                await client.query('ROLLBACK');
                console.log(`üîô [generateBracket] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`);
            } catch (rollbackError) {
                console.error(`‚ùå [generateBracket] –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:`, rollbackError.message);
            }
            
            throw error;
        } finally {
            client.release();
            console.log(`üîì [generateBracket] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ`);
        }
    }
    
    /**
     * üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    static async regenerateBracket(tournamentId, userId, shuffle = false, thirdPlaceMatch = false) {
        const startTime = Date.now();
        console.log(`üîÑ [BracketService v2.0] –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} (shuffle: ${shuffle})`);
        
        const client = await pool.connect();
        try {
            console.log(`üîê [regenerateBracket] –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...`);
            await client.query('BEGIN');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
            console.log(`‚è∞ [regenerateBracket] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥...`);
            await client.query('SET statement_timeout = 30000'); // 30 —Å–µ–∫—É–Ω–¥
            
            console.log(`üîç [regenerateBracket] –ò—â–µ–º —Ç—É—Ä–Ω–∏—Ä ${tournamentId}...`);
            console.time(`find-tournament-${tournamentId}`);
            
            // 1. –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –ë–ï–ó –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
            const tournamentResult = await client.query(
                'SELECT id, name, status, format, participant_type, created_by FROM tournaments WHERE id = $1',
                [tournamentId]
            );
            
            console.timeEnd(`find-tournament-${tournamentId}`);
            console.log(`‚úÖ [regenerateBracket] –¢—É—Ä–Ω–∏—Ä –Ω–∞–π–¥–µ–Ω: ${tournamentResult.rows.length} –∑–∞–ø–∏—Å–µ–π`);
            
            if (tournamentResult.rows.length === 0) {
                throw new Error(`–¢—É—Ä–Ω–∏—Ä ${tournamentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            const tournament = tournamentResult.rows[0];
            console.log(`üìä [regenerateBracket] –¢—É—Ä–Ω–∏—Ä: ${tournament.name}, —Å—Ç–∞—Ç—É—Å: ${tournament.status}, —Ñ–æ—Ä–º–∞—Ç: ${tournament.format}`);
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            console.log(`üîê [regenerateBracket] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
            if (tournament.created_by !== userId) {
                console.log(`üîç [regenerateBracket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞...`);
                const adminCheck = await client.query(
                    'SELECT id FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                    [tournamentId, userId]
                );
                if (adminCheck.rows.length === 0) {
                    throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞');
                }
                console.log(`‚úÖ [regenerateBracket] –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã`);
            } else {
                console.log(`‚úÖ [regenerateBracket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç—É—Ä–Ω–∏—Ä–∞`);
            }
            
            console.log(`üóëÔ∏è [regenerateBracket] –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏...`);
            console.time(`delete-matches-${tournamentId}`);
            
            // 3. –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏
            const deleteResult = await client.query(
                'DELETE FROM matches WHERE tournament_id = $1',
                [tournamentId]
            );
            
            console.timeEnd(`delete-matches-${tournamentId}`);
            console.log(`‚úÖ [regenerateBracket] –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} –º–∞—Ç—á–µ–π`);
            
            console.log(`üë• [regenerateBracket] –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞...`);
            console.time(`get-participants-${tournamentId}`);
            
            // 4. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            let participants = [];
            if (tournament.participant_type === 'team') {
                const teamsResult = await client.query(
                    'SELECT id, name FROM tournament_teams WHERE tournament_id = $1',
                    [tournamentId]
                );
                participants = teamsResult.rows;
                console.log(`üë• [regenerateBracket] –ù–∞–π–¥–µ–Ω–æ ${participants.length} –∫–æ–º–∞–Ω–¥`);
            } else {
                const participantsResult = await client.query(
                    'SELECT id, name FROM tournament_participants WHERE tournament_id = $1',
                    [tournamentId]
                );
                participants = participantsResult.rows;
                console.log(`üë• [regenerateBracket] –ù–∞–π–¥–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            }
            
            console.timeEnd(`get-participants-${tournamentId}`);
            
            if (participants.length < 2) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏');
            }
            
            // 5. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (shuffle) {
                console.log(`üîÄ [regenerateBracket] –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...`);
                for (let i = participants.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [participants[i], participants[j]] = [participants[j], participants[i]];
                }
            }
            
            console.log(`‚öôÔ∏è [regenerateBracket] –í—ã–∑—ã–≤–∞–µ–º generateBracket...`);
            console.log(`‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: format="${tournament.format}", tournamentId=${tournamentId}, participants=${participants.length}, thirdPlaceMatch=${thirdPlaceMatch}`);
            console.time(`generate-bracket-${tournamentId}`);
            
            // 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É
            const bracketResult = await bracketGenerator(
                tournament.format, 
                tournamentId, 
                participants, 
                thirdPlaceMatch
            );
            
            console.timeEnd(`generate-bracket-${tournamentId}`);
            console.log(`‚úÖ [regenerateBracket] generateBracket –∑–∞–≤–µ—Ä—à–µ–Ω`);
            console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`, typeof bracketResult, bracketResult?.success);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –º–∞—Ç—á–µ–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const matches = bracketResult?.matches || bracketResult || [];
            console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç—á–µ–π: ${matches.length}`);
            
            if (!Array.isArray(matches) || matches.length === 0) {
                throw new Error('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–ª –º–∞—Ç—á–∏');
            }
            
            console.log(`üíæ [regenerateBracket] –°–æ—Ö—Ä–∞–Ω—è–µ–º ${matches.length} –º–∞—Ç—á–µ–π –≤ –ë–î...`);
            console.time(`save-matches-${tournamentId}`);
            
            // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            for (const match of matches) {
                await client.query(
                    `INSERT INTO matches (
                        tournament_id, round, match_number, team1_id, team2_id,
                        next_match_id, is_third_place_match, position, parent_match1_id, parent_match2_id
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`,
                    [
                        tournamentId,
                        match.round,
                        match.match_number,
                        match.team1_id || null,
                        match.team2_id || null,
                        match.next_match_id || null,
                        match.is_third_place_match || false,
                        match.position || null,
                        match.parent_match1_id || null,
                        match.parent_match2_id || null
                    ]
                );
            }
            
            console.timeEnd(`save-matches-${tournamentId}`);
            console.log(`‚úÖ [regenerateBracket] –í—Å–µ –º–∞—Ç—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
            
            console.log(`üíæ [regenerateBracket] –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...`);
            await client.query('COMMIT');
            console.log(`‚úÖ [regenerateBracket] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            
            const duration = Date.now() - startTime;
            console.log(`üéâ [regenerateBracket] –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}ms`);
            
            return { success: true, matchesCount: matches.length, duration };
            
        } catch (error) {
            console.error(`‚ùå [regenerateBracket] –û—à–∏–±–∫–∞:`, error.message);
            console.error(`‚ùå Stack trace:`, error.stack);
            
            try {
                await client.query('ROLLBACK');
                console.log(`üîô [regenerateBracket] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`);
            } catch (rollbackError) {
                console.error(`‚ùå [regenerateBracket] –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:`, rollbackError.message);
            }
            
            throw error;
        } finally {
            client.release();
            console.log(`üîì [regenerateBracket] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ`);
        }
    }
    
    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
     */
    static async clearMatchResults(tournamentId, userId) {
        const startTime = Date.now();
        console.log(`üóëÔ∏è [BracketService v2.0] –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ä–Ω–∏—Ä
            const tournamentResult = await client.query(
                'SELECT * FROM tournaments WHERE id = $1 FOR UPDATE',
                [tournamentId]
            );
            
            if (tournamentResult.rows.length === 0) {
                throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const tournament = tournamentResult.rows[0];
            
            // 2. –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
            const updateResult = await client.query(`
                UPDATE matches 
                SET winner_team_id = NULL, 
                    score1 = NULL, 
                    score2 = NULL, 
                    maps_data = NULL,
                    status = 'pending'
                WHERE tournament_id = $1 
                AND (winner_team_id IS NOT NULL OR score1 IS NOT NULL OR score2 IS NOT NULL)
            `, [tournamentId]);
            
            console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${updateResult.rowCount}`);
            
            // 3. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ active
            await client.query(
                'UPDATE tournaments SET status = $1 WHERE id = $2 AND status != $1',
                ['active', tournamentId]
            );
            
            await client.query('COMMIT');
            
            // 4. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'match_results_cleared', {
                clearedCount: updateResult.rowCount
            });
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [BracketService v2.0] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã –∑–∞ ${duration}ms`);
            
            return {
                success: true,
                clearedCount: updateResult.rowCount,
                duration
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [BracketService v2.0] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:`, error.message);
            throw error;
        } finally {
            client.release();
        }
    }
    
    // ==========================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ==========================================
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async _getMixTeams(tournamentId, client) {
        const result = await client.query(`
            SELECT tt.id, tt.name, 
                   JSON_AGG(
                       CASE WHEN ttm.user_id IS NOT NULL THEN
                           JSON_BUILD_OBJECT(
                               'id', u.id,
                               'username', u.username,
                               'avatar_url', u.avatar_url
                           )
                       END
                   ) FILTER (WHERE ttm.user_id IS NOT NULL) as members
            FROM tournament_teams tt
            LEFT JOIN tournament_team_members ttm ON tt.id = ttm.team_id
            LEFT JOIN users u ON ttm.user_id = u.id
            WHERE tt.tournament_id = $1
            GROUP BY tt.id
            ORDER BY tt.id
        `, [tournamentId]);
        
        return result.rows.map(team => ({
            id: team.id,
            name: team.name,
            members: team.members || []
        }));
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è solo —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async _getSoloParticipants(tournamentId, client) {
        const result = await client.query(`
            SELECT tp.id, tp.name, u.avatar_url
            FROM tournament_participants tp
            LEFT JOIN users u ON tp.user_id = u.id
            WHERE tp.tournament_id = $1
            ORDER BY tp.created_at ASC
        `, [tournamentId]);
        
        return result.rows;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è team —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async _getTeamParticipants(tournamentId, client) {
        const result = await client.query(`
            SELECT tt.id, tt.name
            FROM tournament_teams tt
            WHERE tt.tournament_id = $1
            ORDER BY tt.id
        `, [tournamentId]);
        
        return result.rows;
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    static async _sendNotifications(tournamentId, tournamentName, action) {
        try {
            const actionText = action === 'generated' ? '—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞' : '–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞';
            const message = `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ ${actionText} –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournamentName}"`;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
            await sendTournamentChatAnnouncement(tournamentId, message);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            const tournament = await this._getTournamentData(tournamentId);
            broadcastTournamentUpdate(tournamentId, tournament);
            
            console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`, error.message);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è WebSocket
     */
    static async _getTournamentData(tournamentId) {
        const result = await pool.query(`
            SELECT t.*,
                   (SELECT COUNT(*) FROM tournament_participants WHERE tournament_id = t.id) as participant_count,
                   (SELECT JSON_AGG(m.*) FROM matches m WHERE m.tournament_id = t.id) as matches
            FROM tournaments t 
            WHERE t.id = $1
        `, [tournamentId]);
        
        return result.rows[0] || null;
    }
}

module.exports = BracketService; 