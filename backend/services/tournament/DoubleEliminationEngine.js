/**
 * ‚ö° –î–í–ò–ñ–û–ö DOUBLE ELIMINATION V3.0 - –¢–ê–ë–õ–ò–ß–ù–´–ô –ü–û–î–•–û–î
 * 
 * –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Double Elimination
 * —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥—Ä–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v3.0:
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥—Ä–∞—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤: 4, 8, 16, 32, 64, 128 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Losers Bracket
 * - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ Winners ‚Üí Losers —Å –º–∞–ø–ø–∏–Ω–≥–æ–º
 * - –í–∫–ª—é—á–∞–µ—Ç "–ú–∞–ª—ã–π —Ñ–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤"
 */

const { SeedingFactory, SEEDING_TYPES } = require('../../utils/tournament/seedingAlgorithms');
const { 
    getDoubleEliminationStructure, 
    validateStructure, 
    calculateTargetLosersRound,
    getLosersRoundDescription,
    getSupportedSizes 
} = require('../../utils/tournament/doubleEliminationStructures');
const pool = require('../../db');

/**
 * üèÜ –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–≤–∏–∂–∫–∞ Double Elimination
 */
class DoubleEliminationEngine {
    
    /**
     * üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Double Elimination
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥
     * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç—á–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
     */
    static async generateBracket(tournamentId, participants, options = {}) {
        const startTime = Date.now();
        console.log(`‚ö° [DoubleEliminationEngine] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ double elimination —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this._validateInput(tournamentId, participants, options);
            
            // 2. –†–∞—Å—á–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è double elimination
            const bracketMath = this._calculateDoubleEliminationParams(participants.length);
            
            console.log(`üìä Double Elimination –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, {
                participants: bracketMath.participants,
                actualParticipants: bracketMath.actualParticipants,
                winnersRounds: bracketMath.winnersRounds,
                losersRounds: bracketMath.losersRounds,
                totalMatches: bracketMath.totalMatches,
                hasGrandFinalReset: bracketMath.hasGrandFinalReset
            });
            
            // 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            const seedingType = options.seedingType || SEEDING_TYPES.RANDOM;
            const seededParticipants = SeedingFactory.createSeeding(
                seedingType,
                participants,
                bracketMath.participants, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏
                options.seedingOptions || {}
            );
            
            console.log(`üé≤ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —Ç–∏–ø ${seedingType}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${seededParticipants.length}`);
            
            // 4. –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥ Full Double Elimination
            const isFullDE = options.fullDoubleElimination === true;
            if (!isFullDE && bracketMath.hasGrandFinalReset) {
                // –ï—Å–ª–∏ reset-–º–∞—Ç—á –∑–∞–ª–æ–∂–µ–Ω –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –æ–ø—Ü–∏—è—Ö, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
                const adjustedGrandFinalMatches = Math.max(1, (bracketMath.grandFinalMatches || 2) - 1);
                const adjustedTotalMatches = Math.max(0, (bracketMath.totalMatches || 0) - 1);
                bracketMath = {
                    ...bracketMath,
                    hasGrandFinalReset: false,
                    grandFinalMatches: adjustedGrandFinalMatches,
                    totalMatches: adjustedTotalMatches
                };
                console.log(`üõ†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥ FullDE=false: GF=${bracketMath.grandFinalMatches}, total=${bracketMath.totalMatches}`);
            }

            // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞—Ç—á–µ–π
            const matches = await this._generateMatches(
                tournamentId,
                seededParticipants,
                bracketMath,
                options
            );
            
            // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            const validationResult = this._validateGeneratedBracket(matches, bracketMath);
            if (!validationResult.isValid) {
                throw new Error(`–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∞: ${validationResult.errors.join(', ')}`);
            }
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [DoubleEliminationEngine] –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${duration}ms`);
            
            return {
                success: true,
                matches,
                bracketMath,
                seedingInfo: {
                    type: seedingType,
                    participantsUsed: seededParticipants.length,
                    participantsExcluded: bracketMath.participants - participants.length
                },
                generationTime: duration,
                generatedAt: new Date().toISOString()
            };
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [DoubleEliminationEngine] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${duration}ms):`, error.message);
            
            return {
                success: false,
                error: error.message,
                generationTime: duration,
                generatedAt: new Date().toISOString()
            };
        }
    }
    
    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Double Elimination –∏–∑ —Ç–∞–±–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä  
     * @param {number} participantCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @returns {Object} - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã double elimination
     */
    static _calculateDoubleEliminationParams(participantCount) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—Ä–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            const structure = getDoubleEliminationStructure(participantCount);
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            const validation = validateStructure(structure);
            if (!validation.isValid) {
                throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞: ${validation.errors.join(', ')}`);
            }
            
            console.log(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è ${structure.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
            console.log(`   - Winners: ${structure.winnersRounds} —Ä–∞—É–Ω–¥–æ–≤, ${structure.winnersStructure.join('+')} = ${validation.statistics.winnersMatches} –º–∞—Ç—á–µ–π`);
            console.log(`   - Losers: ${structure.losersRounds} —Ä–∞—É–Ω–¥–æ–≤, ${structure.losersStructure.join('+')} = ${validation.statistics.losersMatches} –º–∞—Ç—á–µ–π`);
            console.log(`   - Grand Final: ${validation.statistics.grandFinalMatches} –º–∞—Ç—á–∞`);
            console.log(`   - –û–±—â–∏–π –∏—Ç–æ–≥: ${validation.statistics.totalMatches} –º–∞—Ç—á–µ–π`);
            
            return {
                // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                participants: structure.participants,
                actualParticipants: structure.actualParticipants,
                byesNeeded: structure.byesNeeded,
                
                // –°—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—É–Ω–¥–æ–≤
                winnersRounds: structure.winnersRounds,
                losersRounds: structure.losersRounds,
                winnersStructure: structure.winnersStructure,
                losersStructure: structure.losersStructure,
                
                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
                winnersMatches: validation.statistics.winnersMatches,
                losersMatches: validation.statistics.losersMatches,
                grandFinalMatches: validation.statistics.grandFinalMatches,
                totalMatches: validation.statistics.totalMatches,
                
                // –ú–∞–ø–ø–∏–Ω–≥ —Å–≤—è–∑–µ–π Winners ‚Üí Losers
                winnersToLosersMapping: structure.winnersToLosersMapping,
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                description: structure.description,
                hasGrandFinalReset: true,
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è
                validation: validation
            };
            
        } catch (error) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            const supportedSizes = getSupportedSizes();
            const maxSupported = Math.max(...supportedSizes);
            
            if (participantCount > maxSupported) {
                throw new Error(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è Double Elimination: ${participantCount}. –ú–∞–∫—Å–∏–º—É–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: ${maxSupported}`);
            } else {
                throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Double Elimination: ${error.message}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${supportedSizes.join(', ')}`);
            }
        }
    }
    
    /**
     * üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—á–µ–π –¥–ª—è double elimination
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {Object} bracketMath - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
     * @param {Object} options - –û–ø—Ü–∏–∏
     * @returns {Array} - –ú–∞—Ç—á–∏
     */
    static async _generateMatches(tournamentId, participants, bracketMath, options) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            console.log(`üèóÔ∏è [DoubleEliminationEngine] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${bracketMath.totalMatches} –º–∞—Ç—á–µ–π`);
            
            // üÜï –õ–û–ö–ê–õ–¨–ù–ê–Ø –ù–£–ú–ï–†–ê–¶–ò–Ø –ú–ê–¢–ß–ï–ô –í–ù–£–¢–†–ò –¢–£–†–ù–ò–†–ê
            let currentMatchNumber = 1;
            let currentTournamentMatchNumber = 1;
            console.log(`üî¢ [DoubleEliminationEngine] –ò—Å–ø–æ–ª—å–∑—É–µ–º tournament_match_number –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            
            // 1. –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ Winners Bracket
            const winnersResult = await this._createWinnersMatches(
                client, 
                tournamentId, 
                bracketMath.winnersRounds,
                bracketMath.winnersMatches,
                currentMatchNumber,
                currentTournamentMatchNumber
            );
            const winnersMatches = winnersResult.matches;
            currentMatchNumber = winnersResult.nextMatchNumber;
            currentTournamentMatchNumber = winnersResult.nextTournamentMatchNumber;
            
            console.log(`‚úÖ [DoubleEliminationEngine] Winners Bracket —Å–æ–∑–¥–∞–Ω: ${winnersMatches.length} –º–∞—Ç—á–µ–π`);
            
            // 2. –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ Losers Bracket
            const losersResult = await this._createLosersMatches(
                client, 
                tournamentId, 
                bracketMath,
                currentMatchNumber,
                currentTournamentMatchNumber
            );
            const losersMatches = losersResult.matches;
            currentMatchNumber = losersResult.nextMatchNumber;
            currentTournamentMatchNumber = losersResult.nextTournamentMatchNumber;
            
            console.log(`‚úÖ [DoubleEliminationEngine] Losers Bracket —Å–æ–∑–¥–∞–Ω: ${losersMatches.length} –º–∞—Ç—á–µ–π`);
            
            // 3. –°–æ–∑–¥–∞–µ–º Grand Final –º–∞—Ç—á–∏
            const grandFinalResult = await this._createGrandFinalMatches(
                client, 
                tournamentId,
                bracketMath,
                currentMatchNumber,
                currentTournamentMatchNumber,
                options // üÜï –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ fullDoubleElimination
            );
            const grandFinalMatches = grandFinalResult.matches;
            
            console.log(`‚úÖ [DoubleEliminationEngine] Grand Final –º–∞—Ç—á–∏ —Å–æ–∑–¥–∞–Ω—ã: ${grandFinalMatches.length} –º–∞—Ç—á–µ–π`);
            
            // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
            await this._establishDoubleEliminationConnections(
                client,
                winnersMatches,
                losersMatches,
                grandFinalMatches,
                bracketMath
            );
            
            // 5. –†–∞–∑–º–µ—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ Winners Bracket
            await this._placeParticipantsInWinnersBracket(
                client,
                winnersMatches,
                participants,
                bracketMath
            );
            
            await client.query('COMMIT');
            
            return [...winnersMatches, ...losersMatches, ...grandFinalMatches];
            
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    /**
     * üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–µ–π Winners Bracket
     */
    static async _createWinnersMatches(client, tournamentId, rounds, totalMatches, startMatchNumber, startTournamentMatchNumber) {
        const matches = [];
        let matchNumber = startMatchNumber;
        let tournamentMatchNumber = startTournamentMatchNumber;
        
        console.log(`üèÜ –°–æ–∑–¥–∞–Ω–∏–µ Winners Bracket: ${rounds} —Ä–∞—É–Ω–¥–æ–≤, ${totalMatches} –º–∞—Ç—á–µ–π, —Å—Ç–∞—Ä—Ç —Å –Ω–æ–º–µ—Ä–∞ ${startMatchNumber}`);
        
        for (let round = 1; round <= rounds; round++) {
            const matchesInRound = Math.pow(2, rounds - round);
            
            console.log(`   üî¢ –†–∞—É–Ω–¥ ${round}: ${matchesInRound} –º–∞—Ç—á–µ–π (–Ω–æ–º–µ—Ä–∞ ${matchNumber}-${matchNumber + matchesInRound - 1}, –ª–æ–∫–∞–ª—å–Ω—ã–µ ${tournamentMatchNumber}-${tournamentMatchNumber + matchesInRound - 1})`);
            
            for (let i = 0; i < matchesInRound; i++) {
                const result = await client.query(`
                    INSERT INTO matches (
                        tournament_id, 
                        round, 
                        match_number,
                        tournament_match_number,
                        bracket_type,
                        status
                    ) VALUES ($1, $2, $3, $4, 'winner', 'pending')
                    RETURNING *
                `, [tournamentId, round, matchNumber, tournamentMatchNumber]);
                
                matches.push(result.rows[0]);
                console.log(`     ‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ç—á ID ${result.rows[0].id} —Å –Ω–æ–º–µ—Ä–æ–º ${matchNumber} (–ª–æ–∫–∞–ª—å–Ω—ã–π ${tournamentMatchNumber}) (WB R${round})`);
                matchNumber++;
                tournamentMatchNumber++;
            }
        }
        
        console.log(`üèÜ Winners Bracket –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–æ–º–µ—Ä–∞ ${startMatchNumber}-${matchNumber-1}, —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä: ${matchNumber}`);
        return { 
            matches, 
            nextMatchNumber: matchNumber,
            nextTournamentMatchNumber: tournamentMatchNumber
        };
    }
    
    /**
     * üíî –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–µ–π Losers Bracket –ø–æ —Ç–∞–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
     * üÜï –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–∞—Ç—á–µ–π
     */
    static async _createLosersMatches(client, tournamentId, bracketMath, startMatchNumber, startTournamentMatchNumber) {
        const matches = [];
        let matchNumber = startMatchNumber;
        let tournamentMatchNumber = startTournamentMatchNumber;
        
        const { losersStructure, losersRounds } = bracketMath;
        
        console.log(`üíî –°–æ–∑–¥–∞–Ω–∏–µ Losers Bracket –ø–æ —Ç–∞–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: ${losersRounds} —Ä–∞—É–Ω–¥–æ–≤, —Å—Ç–∞—Ä—Ç —Å –Ω–æ–º–µ—Ä–∞ ${startMatchNumber}`);
        console.log(`   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: [${losersStructure.join(', ')}] = ${bracketMath.losersMatches} –º–∞—Ç—á–µ–π`);
        
        for (let round = 1; round <= losersRounds; round++) {
            const matchesInRound = losersStructure[round - 1];
            const roundDescription = getLosersRoundDescription(round, bracketMath);
            
            console.log(`   üî¢ Losers –†–∞—É–Ω–¥ ${round}: ${matchesInRound} –º–∞—Ç—á–µ–π (${roundDescription}) –Ω–æ–º–µ—Ä–∞ ${matchNumber}-${matchNumber + matchesInRound - 1}, –ª–æ–∫–∞–ª—å–Ω—ã–µ ${tournamentMatchNumber}-${tournamentMatchNumber + matchesInRound - 1}`);
            
            for (let i = 0; i < matchesInRound; i++) {
                // üÜï –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç—á–∞
                const matchInfo = this._determineLoserMatchInfo(round, i, matchesInRound, losersRounds);
                
                const result = await client.query(`
                    INSERT INTO matches (
                        tournament_id, 
                        round, 
                        match_number,
                        tournament_match_number,
                        bracket_type,
                        round_name,
                        match_title,
                        status
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, 'pending')
                    RETURNING *
                `, [
                    tournamentId, 
                    round, 
                    matchNumber, 
                    tournamentMatchNumber,
                    matchInfo.bracketType,
                    matchInfo.roundName, 
                    matchInfo.matchTitle
                ]);
                
                matches.push(result.rows[0]);
                console.log(`     ‚úÖ –°–æ–∑–¥–∞–Ω ${matchInfo.description} ID ${result.rows[0].id} —Å –Ω–æ–º–µ—Ä–æ–º ${matchNumber} (–ª–æ–∫–∞–ª—å–Ω—ã–π ${tournamentMatchNumber}) (LB R${round})`);
                matchNumber++;
                tournamentMatchNumber++;
            }
        }
        
        console.log(`üíî Losers Bracket –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–æ–º–µ—Ä–∞ ${startMatchNumber}-${matchNumber-1}, —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä: ${matchNumber}`);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π Losers Bracket (–æ–∂–∏–¥–∞–ª–æ—Å—å ${bracketMath.losersMatches})`);
        
        return { 
            matches, 
            nextMatchNumber: matchNumber,
            nextTournamentMatchNumber: tournamentMatchNumber
        };
    }
    
    /**
     * üèÅ –°–æ–∑–¥–∞–Ω–∏–µ Grand Final –º–∞—Ç—á–µ–π
     */
    static async _createGrandFinalMatches(client, tournamentId, bracketMath, startMatchNumber, startTournamentMatchNumber, options = {}) {
        const matches = [];
        let matchNumber = startMatchNumber;
        let tournamentMatchNumber = startTournamentMatchNumber;
        
        // üÜï –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏—é Full Double Elimination
        const fullDoubleElimination = options.fullDoubleElimination || false;
        
        console.log(`üèÅ –°–æ–∑–¥–∞–Ω–∏–µ Grand Final –º–∞—Ç—á–µ–π, —Å—Ç–∞—Ä—Ç —Å –Ω–æ–º–µ—Ä–∞ ${startMatchNumber} (–ª–æ–∫–∞–ª—å–Ω—ã–π ${startTournamentMatchNumber})`);
        console.log(`üéØ Full Double Elimination: ${fullDoubleElimination ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù'}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ –¥–ª—è Grand Final
        const grandFinalRound = Math.max(bracketMath.winnersRounds, bracketMath.losersRounds) + 1;
        
        // Grand Final (–æ—Å–Ω–æ–≤–Ω–æ–π) - —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞
        const grandFinalResult = await client.query(`
            INSERT INTO matches (
                tournament_id, 
                round, 
                match_number,
                tournament_match_number,
                bracket_type,
                status
            ) VALUES ($1, $2, $3, $4, 'grand_final', 'pending')
            RETURNING *
        `, [tournamentId, grandFinalRound, matchNumber, tournamentMatchNumber]);
        
        matches.push(grandFinalResult.rows[0]);
        console.log(`     ‚úÖ –°–æ–∑–¥–∞–Ω Grand Final ID ${grandFinalResult.rows[0].id} —Å –Ω–æ–º–µ—Ä–æ–º ${matchNumber} (–ª–æ–∫–∞–ª—å–Ω—ã–π ${tournamentMatchNumber}) (GF R${grandFinalRound})`);
        matchNumber++;
        tournamentMatchNumber++;
        
        // üÜï –£–°–õ–û–í–ù–û–ï –°–û–ó–î–ê–ù–ò–ï: Grand Final Triumph —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω Full Double Elimination
        if (fullDoubleElimination) {
            const grandFinalResetResult = await client.query(`
                INSERT INTO matches (
                    tournament_id, 
                    round, 
                    match_number,
                    tournament_match_number,
                    bracket_type,
                    status
                ) VALUES ($1, $2, $3, $4, 'grand_final_reset', 'pending')
                RETURNING *
            `, [tournamentId, grandFinalRound, matchNumber, tournamentMatchNumber]);
            
            matches.push(grandFinalResetResult.rows[0]);
            console.log(`     ‚úÖ –°–æ–∑–¥–∞–Ω Grand Final Triumph ID ${grandFinalResetResult.rows[0].id} —Å –Ω–æ–º–µ—Ä–æ–º ${matchNumber} (–ª–æ–∫–∞–ª—å–Ω—ã–π ${tournamentMatchNumber}) (GF Triumph R${grandFinalRound})`);
            matchNumber++;
            tournamentMatchNumber++;
        } else {
            console.log(`     ‚è≠Ô∏è Grand Final Triumph –ü–†–û–ü–£–©–ï–ù (Full Double Elimination –≤—ã–∫–ª—é—á–µ–Ω)`);
        }
        
        console.log(`üèÅ Grand Final –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–æ–º–µ—Ä–∞ ${startMatchNumber}-${matchNumber-1}, —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä: ${matchNumber}`);
        return { 
            matches, 
            nextMatchNumber: matchNumber,
            nextTournamentMatchNumber: tournamentMatchNumber
        };
    }
    
    /**
     * üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏ –≤ Double Elimination
     */
    static async _establishDoubleEliminationConnections(client, winnersMatches, losersMatches, grandFinalMatches, bracketMath) {
        console.log(`üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π Double Elimination`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: Winners: ${winnersMatches.length}, Losers: ${losersMatches.length}, Grand Final: ${grandFinalMatches.length}`);
        
        // 1. –°–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ Winners Bracket
        console.log(`\n1Ô∏è‚É£ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Winners Bracket...`);
        await this._linkWinnersBracket(client, winnersMatches);
        
        // 2. –°–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ Losers Bracket
        console.log(`\n2Ô∏è‚É£ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Losers Bracket...`);
        await this._linkLosersBracket(client, losersMatches);
        
        // 3. –°–≤—è–∑–∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –∏–∑ Winners –≤ Losers
        console.log(`\n3Ô∏è‚É£ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Winners ‚Üí Losers (–ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ)...`);
        await this._linkWinnersToLosers(client, winnersMatches, losersMatches, bracketMath);
        
        // 4. –°–≤—è–∑–∏ —Å Grand Final
        console.log(`\n4Ô∏è‚É£ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å Grand Final...`);
        await this._linkToGrandFinal(client, winnersMatches, losersMatches, grandFinalMatches);
        
        console.log(`‚úÖ –í—Å–µ —Å–≤—è–∑–∏ Double Elimination —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`);
    }
    
    /**
     * üèÜ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Winners Bracket
     */
    static async _linkWinnersBracket(client, winnersMatches) {
        console.log(`üèÜ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Winners Bracket (${winnersMatches.length} –º–∞—Ç—á–µ–π)`);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        const winnersByRound = {};
        winnersMatches.forEach(match => {
            if (!winnersByRound[match.round]) {
                winnersByRound[match.round] = [];
            }
            winnersByRound[match.round].push(match);
        });
        
        // –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ä–∞—É–Ω–¥—ã
        const rounds = Object.keys(winnersByRound).map(Number).sort((a, b) => a - b);
        console.log(`üèÜ Winners —Ä–∞—É–Ω–¥—ã: ${rounds.join(', ')}`);
        
        for (let i = 0; i < rounds.length - 1; i++) {
            const currentRound = rounds[i];
            const nextRound = rounds[i + 1];
            
            const currentMatches = winnersByRound[currentRound];
            const nextMatches = winnersByRound[nextRound];
            
            console.log(`üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Winners R${currentRound} (${currentMatches.length} –º–∞—Ç—á–µ–π) ‚Üí R${nextRound} (${nextMatches.length} –º–∞—Ç—á–µ–π)`);
            
            // –ö–∞–∂–¥—ã–µ 2 –º–∞—Ç—á–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤–µ–¥—É—Ç –∫ 1 –º–∞—Ç—á—É —Å–ª–µ–¥—É—é—â–µ–≥–æ
            for (let j = 0; j < currentMatches.length; j++) {
                const nextMatchIndex = Math.floor(j / 2);
                if (nextMatches[nextMatchIndex]) {
                    await client.query(`
                        UPDATE matches SET next_match_id = $1 WHERE id = $2
                    `, [nextMatches[nextMatchIndex].id, currentMatches[j].id]);
                    
                    console.log(`  üîó Winners –º–∞—Ç—á ${currentMatches[j].id} ‚Üí –º–∞—Ç—á ${nextMatches[nextMatchIndex].id}`);
                }
            }
        }
    }
    
    /**
     * üíî –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Losers Bracket
     */
    static async _linkLosersBracket(client, losersMatches) {
        console.log(`üíî –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Losers Bracket (${losersMatches.length} –º–∞—Ç—á–µ–π)`);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        const losersByRound = {};
        losersMatches.forEach(match => {
            if (!losersByRound[match.round]) {
                losersByRound[match.round] = [];
            }
            losersByRound[match.round].push(match);
        });
        
        // –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ä–∞—É–Ω–¥—ã –≤ Losers Bracket
        const rounds = Object.keys(losersByRound).map(Number).sort((a, b) => a - b);
        console.log(`üíî Losers —Ä–∞—É–Ω–¥—ã: ${rounds.join(', ')}`);
        
        for (let i = 0; i < rounds.length - 1; i++) {
            const currentRound = rounds[i];
            const nextRound = rounds[i + 1];
            
            const currentMatches = losersByRound[currentRound];
            const nextMatches = losersByRound[nextRound];
            
            console.log(`üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Losers R${currentRound} (${currentMatches.length} –º–∞—Ç—á–µ–π) ‚Üí R${nextRound} (${nextMatches.length} –º–∞—Ç—á–µ–π)`);
            
            // –õ–æ–≥–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–µ—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—É–Ω–¥–∞
            if (currentRound % 2 === 0) {
                // –ß–µ—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã: 1 –∫ 1 –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
                console.log(`  üìã –ß–µ—Ç–Ω—ã–π —Ä–∞—É–Ω–¥ R${currentRound}: —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ 1 –∫ 1`);
                for (let j = 0; j < currentMatches.length && j < nextMatches.length; j++) {
                    await client.query(`
                        UPDATE matches SET next_match_id = $1 WHERE id = $2
                    `, [nextMatches[j].id, currentMatches[j].id]);
                    
                    console.log(`  üîó Losers –º–∞—Ç—á ${currentMatches[j].id} ‚Üí –º–∞—Ç—á ${nextMatches[j].id}`);
                }
            } else {
                // –ù–µ—á–µ—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã: 2 –∫ 1 –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
                console.log(`  üìã –ù–µ—á–µ—Ç–Ω—ã–π —Ä–∞—É–Ω–¥ R${currentRound}: —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ 2 –∫ 1`);
                for (let j = 0; j < currentMatches.length; j++) {
                    const nextMatchIndex = Math.floor(j / 2);
                    if (nextMatches[nextMatchIndex]) {
                        await client.query(`
                            UPDATE matches SET next_match_id = $1 WHERE id = $2
                        `, [nextMatches[nextMatchIndex].id, currentMatches[j].id]);
                        
                        console.log(`  üîó Losers –º–∞—Ç—á ${currentMatches[j].id} ‚Üí –º–∞—Ç—á ${nextMatches[nextMatchIndex].id}`);
                    }
                }
            }
        }
    }
    
    /**
     * üîÑ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –∏–∑ Winners –≤ Losers
     */
    static async _linkWinnersToLosers(client, winnersMatches, losersMatches, bracketMath) {
        console.log(`üîÑ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö Winners ‚Üí Losers`);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        const winnersByRound = {};
        winnersMatches.forEach(match => {
            if (!winnersByRound[match.round]) {
                winnersByRound[match.round] = [];
            }
            winnersByRound[match.round].push(match);
        });
        
        const losersByRound = {};
        losersMatches.forEach(match => {
            if (!losersByRound[match.round]) {
                losersByRound[match.round] = [];
            }
            losersByRound[match.round].push(match);
        });
        
        console.log(`üìä Winners —Ä–∞—É–Ω–¥—ã: ${Object.keys(winnersByRound).join(', ')}`);
        console.log(`üìä Losers —Ä–∞—É–Ω–¥—ã: ${Object.keys(losersByRound).join(', ')}`);
        
        // –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –∏–∑ Winners –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—É–Ω–¥—ã Losers
        const winnersRounds = Object.keys(winnersByRound).map(Number).sort((a, b) => a - b);
        
        for (const winnersRound of winnersRounds) {
            const winnersMatches = winnersByRound[winnersRound];
            
            // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ Winners –∏–¥—É—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–∞—É–Ω–¥ Losers
            const targetLosersRound = this._calculateTargetLosersRound(winnersRound, bracketMath);
            const targetLosersMatches = losersByRound[targetLosersRound];
            
            console.log(`üéØ Winners R${winnersRound} (${winnersMatches.length} –º–∞—Ç—á–µ–π) ‚Üí Losers R${targetLosersRound} (${targetLosersMatches?.length || 0} –º–∞—Ç—á–µ–π)`);
            
            if (targetLosersMatches) {
                for (let index = 0; index < winnersMatches.length; index++) {
                    const winnerMatch = winnersMatches[index];
                    const targetLoserMatch = targetLosersMatches[index] || targetLosersMatches[0];
                    
                    await client.query(`
                        UPDATE matches SET loser_next_match_id = $1 WHERE id = $2
                    `, [targetLoserMatch.id, winnerMatch.id]);
                    
                    console.log(`üîó Winners R${winnersRound} –º–∞—Ç—á ${winnerMatch.id} (–ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π) ‚Üí Losers R${targetLosersRound} –º–∞—Ç—á ${targetLoserMatch.id}`);
                }
            } else {
                console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ç—á–∏ –≤ Losers R${targetLosersRound} –¥–ª—è Winners R${winnersRound}`);
            }
        }
    }
    
    /**
     * üéØ –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ Losers —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
     */
    static _calculateTargetLosersRound(winnersRound, bracketMath) {
        const targetRound = calculateTargetLosersRound(winnersRound, bracketMath);
        
        if (!targetRound) {
            console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π —Ä–∞—É–Ω–¥ Losers –¥–ª—è Winners R${winnersRound}`);
            return null;
        }
        
        console.log(`üéØ Winners R${winnersRound} ‚Üí Losers R${targetRound} (–ø–æ —Ç–∞–±–ª–∏—á–Ω–æ–º—É –º–∞–ø–ø–∏–Ω–≥—É)`);
        return targetRound;
    }
    
    /**
     * üèÅ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å Grand Final
     */
    static async _linkToGrandFinal(client, winnersMatches, losersMatches, grandFinalMatches) {
        console.log(`üèÅ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å Grand Final`);
        
        // –§–∏–Ω–∞–ª–∏—Å—Ç Winners Bracket –∏–¥–µ—Ç –≤ Grand Final
        const winnersFinal = winnersMatches.find(m => m.round === Math.max(...winnersMatches.map(m => m.round)));
        
        // –§–∏–Ω–∞–ª–∏—Å—Ç Losers Bracket –∏–¥–µ—Ç –≤ Grand Final
        const losersFinal = losersMatches.find(m => m.round === Math.max(...losersMatches.map(m => m.round)));
        
        const grandFinal = grandFinalMatches.find(m => m.bracket_type === 'grand_final');
        
        if (winnersFinal && grandFinal) {
            await client.query(`
                UPDATE matches SET next_match_id = $1 WHERE id = $2
            `, [grandFinal.id, winnersFinal.id]);
            
            console.log(`üîó Winners Final –º–∞—Ç—á ${winnersFinal.id} ‚Üí Grand Final ${grandFinal.id}`);
        }
        
        if (losersFinal && grandFinal) {
            await client.query(`
                UPDATE matches SET next_match_id = $1 WHERE id = $2
            `, [grandFinal.id, losersFinal.id]);
            
            console.log(`üîó Losers Final –º–∞—Ç—á ${losersFinal.id} ‚Üí Grand Final ${grandFinal.id}`);
        }
    }
    
    /**
     * üë• –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ Winners Bracket
     * üÜï –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ BYE vs BYE –º–∞—Ç—á–µ–π
     */
    static async _placeParticipantsInWinnersBracket(client, winnersMatches, participants, bracketMath) {
        console.log(`üë• –†–∞–∑–º–µ—â–µ–Ω–∏–µ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ Winners Bracket`);
        console.log(`üìä –°–µ—Ç–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ ${bracketMath.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (bye-—Ä–∞—É–Ω–¥—ã: ${bracketMath.byesNeeded})`);
        
        const firstRoundMatches = winnersMatches.filter(m => m.round === 1);
        console.log(`ü•ä –ú–∞—Ç—á–µ–π –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ: ${firstRoundMatches.length}`);
        
        // üÜï –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const optimizedPlacement = this._calculateOptimizedPlacement(participants, firstRoundMatches.length);
        
        console.log(`üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ (–∏—Å–∫–ª—é—á–∞–µ–º BYE vs BYE):`);
        for (let i = 0; i < optimizedPlacement.length; i++) {
            const placement = optimizedPlacement[i];
            console.log(`   –ú–∞—Ç—á ${i + 1}: ${placement.team1?.name || placement.team1?.id || 'BYE'} vs ${placement.team2?.name || placement.team2?.id || 'BYE'}`);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
        for (let i = 0; i < firstRoundMatches.length; i++) {
            const match = firstRoundMatches[i];
            const placement = optimizedPlacement[i];
            
            await client.query(`
                UPDATE matches 
                SET team1_id = $1, team2_id = $2 
                WHERE id = $3
            `, [placement.team1?.id || null, placement.team2?.id || null, match.id]);
            
            const team1Name = placement.team1?.name || placement.team1?.id || 'BYE';
            const team2Name = placement.team2?.name || placement.team2?.id || 'BYE';
            
            console.log(`‚úÖ Winners Bracket –º–∞—Ç—á ${match.match_number}: ${team1Name} vs ${team2Name}`);
        }
    }
    
    /**
     * üßÆ –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * –ò—Å–∫–ª—é—á–∞–µ—Ç BYE vs BYE –º–∞—Ç—á–∏ –ø—É—Ç–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} totalMatches - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {team1, team2} –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
     */
    static _calculateOptimizedPlacement(participants, totalMatches) {
        const placement = [];
        const totalSlots = totalMatches * 2; // –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ –º–∞—Ç—á–∞—Ö
        const byesNeeded = totalSlots - participants.length;
        
        console.log(`üßÆ –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, ${totalMatches} –º–∞—Ç—á–µ–π (${totalSlots} –ø–æ–∑–∏—Ü–∏–π), ${byesNeeded} bye-—Ä–∞—É–Ω–¥–æ–≤`);
        
        if (byesNeeded === 0) {
            // –ò–¥–µ–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π
            console.log(`‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: –±–µ–∑ bye-—Ä–∞—É–Ω–¥–æ–≤`);
            for (let i = 0; i < totalMatches; i++) {
                placement.push({
                    team1: participants[i * 2],
                    team2: participants[i * 2 + 1]
                });
            }
        } else if (byesNeeded >= totalMatches) {
            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–ª—É—á–∞–π: bye-—Ä–∞—É–Ω–¥–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –º–∞—Ç—á–µ–π
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –º–∞—Ç—á, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ - BYE vs BYE
            console.log(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: ${byesNeeded} bye-—Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è ${totalMatches} –º–∞—Ç—á–µ–π`);
            for (let i = 0; i < totalMatches; i++) {
                if (i < participants.length) {
                    placement.push({
                        team1: participants[i],
                        team2: null // BYE
                    });
                } else {
                    placement.push({
                        team1: null, // BYE
                        team2: null  // BYE
                    });
                }
            }
        } else {
            // üéØ –û–°–ù–û–í–ù–û–ô –ê–õ–ì–û–†–ò–¢–ú: —É–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ bye-—Ä–∞—É–Ω–¥–æ–≤
            console.log(`üéØ –£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${byesNeeded} bye-—Ä–∞—É–Ω–¥–æ–≤ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ ${totalMatches} –º–∞—Ç—á–∞–º`);
            
            // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π –±—É–¥–µ—Ç —Å –æ–¥–Ω–∏–º bye, –∞ —Å–∫–æ–ª—å–∫–æ –±–µ–∑ bye
            const matchesWithBye = byesNeeded;
            const matchesWithoutBye = totalMatches - byesNeeded;
            
            console.log(`   - –ú–∞—Ç—á–µ–π –±–µ–∑ bye: ${matchesWithoutBye}`);
            console.log(`   - –ú–∞—Ç—á–µ–π —Å –æ–¥–Ω–∏–º bye: ${matchesWithBye}`);
            
            // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è bye
            const byePositions = this._calculateEvenByeDistribution(totalMatches, byesNeeded);
            console.log(`   - –ü–æ–∑–∏—Ü–∏–∏ bye-—Ä–∞—É–Ω–¥–æ–≤: [${byePositions.join(', ')}]`);
            
            let participantIndex = 0;
            
            for (let matchIndex = 0; matchIndex < totalMatches; matchIndex++) {
                const hasByeInThisMatch = byePositions.includes(matchIndex);
                
                if (hasByeInThisMatch) {
                    // –ú–∞—Ç—á —Å –æ–¥–Ω–∏–º bye
                    placement.push({
                        team1: participants[participantIndex++],
                        team2: null // BYE
                    });
                } else {
                    // –ú–∞—Ç—á –±–µ–∑ bye (–¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞)
                    placement.push({
                        team1: participants[participantIndex++],
                        team2: participants[participantIndex++]
                    });
                }
            }
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const actualParticipants = placement.reduce((count, match) => {
            return count + (match.team1 ? 1 : 0) + (match.team2 ? 1 : 0);
        }, 0);
        
        const byeVsByeMatches = placement.filter(match => !match.team1 && !match.team2).length;
        
        console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:`);
        console.log(`   - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–æ: ${actualParticipants} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${participants.length})`);
        console.log(`   - BYE vs BYE –º–∞—Ç—á–µ–π: ${byeVsByeMatches}`);
        
        if (actualParticipants !== participants.length) {
            console.error(`‚ùå –û–®–ò–ë–ö–ê: –ø–æ—Ç–µ—Ä—è–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏!`);
        }
        
        return placement;
    }
    
    /**
     * üìê –†–∞—Å—á–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è bye-—Ä–∞—É–Ω–¥–æ–≤ –ø–æ –º–∞—Ç—á–∞–º
     * @param {number} totalMatches - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
     * @param {number} byesNeeded - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ bye-—Ä–∞—É–Ω–¥–æ–≤
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –º–∞—Ç—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—Ç bye
     */
    static _calculateEvenByeDistribution(totalMatches, byesNeeded) {
        if (byesNeeded === 0) return [];
        if (byesNeeded >= totalMatches) return Array.from({length: totalMatches}, (_, i) => i);
        
        // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ bye –ø–æ –º–∞—Ç—á–∞–º
        const step = totalMatches / byesNeeded;
        const byePositions = [];
        
        for (let i = 0; i < byesNeeded; i++) {
            const position = Math.floor(i * step);
            byePositions.push(position);
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
        const uniquePositions = [...new Set(byePositions)];
        if (uniquePositions.length < byesNeeded) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            const remaining = byesNeeded - uniquePositions.length;
            for (let i = 0; i < remaining; i++) {
                let position = (uniquePositions[uniquePositions.length - 1] + 1 + i) % totalMatches;
                while (uniquePositions.includes(position)) {
                    position = (position + 1) % totalMatches;
                }
                uniquePositions.push(position);
            }
        }
        
        return uniquePositions.slice(0, byesNeeded).sort((a, b) => a - b);
    }
    
    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    static _validateInput(tournamentId, participants, options) {
        if (!Number.isInteger(tournamentId) || tournamentId <= 0) {
            throw new Error('ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º');
        }
        
        if (!Array.isArray(participants)) {
            throw new Error('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞');
        }
        
        if (participants.length < 2) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–º–∏–Ω–∏–º—É–º 2)');
        }
        
        if (participants.length > 128) {
            throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è double elimination (–º–∞–∫—Å–∏–º—É–º 128)');
        }
        
        participants.forEach((participant, index) => {
            if (!participant || typeof participant !== 'object') {
                throw new Error(`–£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
            }
            
            if (!participant.id) {
                throw new Error(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${index + 1} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID`);
            }
        });
        
        if (options.seedingType && !Object.values(SEEDING_TYPES).includes(options.seedingType)) {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${options.seedingType}`);
        }
    }
    
    /**
     * üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—á–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    static _validateGeneratedBracket(matches, bracketMath) {
        const errors = [];
        
        if (!Array.isArray(matches)) {
            errors.push('–ú–∞—Ç—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
            return {
                isValid: false,
                errors,
                statistics: { totalMatches: 0 }
            };
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–∑ —Ç–∞–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const structureValidation = bracketMath.validation;
        if (!structureValidation.isValid) {
            errors.push(`–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: ${structureValidation.errors.join(', ')}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –æ–∂–∏–¥–∞–µ–º–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        if (matches.length !== bracketMath.totalMatches) {
            errors.push(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${bracketMath.totalMatches}, –ø–æ–ª—É—á–µ–Ω–æ ${matches.length}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ bracket (üÜï –≤–∫–ª—é—á–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã)
        const requiredBracketTypes = bracketMath.hasGrandFinalReset
            ? ['winner', 'loser', 'grand_final', 'grand_final_reset']
            : ['winner', 'loser', 'grand_final'];
        requiredBracketTypes.forEach(type => {
            const matchesOfType = matches.filter(m => m.bracket_type === type);
            if (matchesOfType.length === 0) {
                errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞—Ç—á–∏ —Ç–∏–ø–∞ ${type}`);
            }
        });
        
        // –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–∏–ø–∞–º –º–∞—Ç—á–µ–π (üÜï –≤–∫–ª—é—á–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –ª—É–∑–µ—Ä–æ–≤)
        const winnersMatches = matches.filter(m => m.bracket_type === 'winner');
        const losersMatches = matches.filter(m => 
            m.bracket_type === 'loser' || 
            m.bracket_type === 'loser_semifinal' || 
            m.bracket_type === 'loser_final'
        );
        const grandFinalMatches = matches.filter(m => m.bracket_type.includes('grand_final'));
        
        if (winnersMatches.length !== bracketMath.winnersMatches) {
            errors.push(`Winners Bracket: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${bracketMath.winnersMatches} –º–∞—Ç—á–µ–π, –ø–æ–ª—É—á–µ–Ω–æ ${winnersMatches.length}`);
        }
        
        if (losersMatches.length !== bracketMath.losersMatches) {
            errors.push(`Losers Bracket: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${bracketMath.losersMatches} –º–∞—Ç—á–µ–π, –ø–æ–ª—É—á–µ–Ω–æ ${losersMatches.length}`);
        }
        
        if (grandFinalMatches.length !== bracketMath.grandFinalMatches) {
            errors.push(`Grand Final: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${bracketMath.grandFinalMatches} –º–∞—Ç—á–µ–π, –ø–æ–ª—É—á–µ–Ω–æ ${grandFinalMatches.length}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—É–Ω–¥–æ–≤
        console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: —Å–æ–∑–¥–∞–Ω–æ –º–∞—Ç—á–µ–π Winners=${winnersMatches.length}, Losers=${losersMatches.length}, GF=${grandFinalMatches.length}`);
        console.log(`üîç –û–∂–∏–¥–∞–ª–æ—Å—å: Winners=${bracketMath.winnersMatches}, Losers=${bracketMath.losersMatches}, GF=${bracketMath.grandFinalMatches}`);
        
        return {
            isValid: errors.length === 0,
            errors,
            statistics: {
                totalMatches: matches.length,
                winnersMatches: winnersMatches.length,
                losersMatches: losersMatches.length,
                grandFinalMatches: grandFinalMatches.length,
                description: bracketMath.description || '–¢–∞–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Double Elimination'
            }
        };
    }
    
    /**
     * üéØ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ Double Elimination
     * @param {number} matchId - ID –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
     * @param {number} winnerId - ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
     * @param {number} loserId - ID –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
     */
    static async advanceParticipant(matchId, winnerId, loserId) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
            const matchResult = await client.query(`
                SELECT * FROM matches WHERE id = $1
            `, [matchId]);
            
            const match = matchResult.rows[0];
            if (!match) {
                throw new Error('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
            await client.query(`
                UPDATE matches 
                SET winner_team_id = $1, status = 'completed'
                WHERE id = $2
            `, [winnerId, matchId]);
            
            // –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if (match.next_match_id) {
                await this._advanceWinner(client, winnerId, match.next_match_id);
            }
            
            // –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫—É–¥–∞)
            if (match.loser_next_match_id) {
                await this._advanceLoser(client, loserId, match.loser_next_match_id);
            }
            
            await client.query('COMMIT');
            
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    /**
     * üèÜ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
     */
    static async _advanceWinner(client, winnerId, nextMatchId) {
        const nextMatch = await client.query(`
            SELECT * FROM matches WHERE id = $1
        `, [nextMatchId]);
        
        if (nextMatch.rows.length === 0) {
            throw new Error('–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const match = nextMatch.rows[0];
        
        // –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if (!match.team1_id) {
            await client.query(`
                UPDATE matches SET team1_id = $1 WHERE id = $2
            `, [winnerId, nextMatchId]);
        } else if (!match.team2_id) {
            await client.query(`
                UPDATE matches SET team2_id = $1 WHERE id = $2
            `, [winnerId, nextMatchId]);
        } else {
            throw new Error('–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω');
        }
    }
    
    /**
     * üíî –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –≤ Losers Bracket
     */
    static async _advanceLoser(client, loserId, loserNextMatchId) {
        const nextMatch = await client.query(`
            SELECT * FROM matches WHERE id = $1
        `, [loserNextMatchId]);
        
        if (nextMatch.rows.length === 0) {
            throw new Error('–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –≤ Losers Bracket –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const match = nextMatch.rows[0];
        
        // –†–∞–∑–º–µ—â–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ Losers Bracket
        if (!match.team1_id) {
            await client.query(`
                UPDATE matches SET team1_id = $1 WHERE id = $2
            `, [loserId, loserNextMatchId]);
        } else if (!match.team2_id) {
            await client.query(`
                UPDATE matches SET team2_id = $1 WHERE id = $2
            `, [loserId, loserNextMatchId]);
        } else {
            throw new Error('–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –≤ Losers Bracket —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω');
        }
    }
    
    /**
     * üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –º–∞—Ç—á–∞ –≤ Losers Bracket
     * üÜï –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
     * 
     * @param {number} round - –ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
     * @param {number} matchIndex - –ò–Ω–¥–µ–∫—Å –º–∞—Ç—á–∞ –≤ —Ä–∞—É–Ω–¥–µ  
     * @param {number} matchesInRound - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ —Ä–∞—É–Ω–¥–µ
     * @param {number} totalLosersRounds - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ Losers
     * @returns {Object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
     */
    static _determineLoserMatchInfo(round, matchIndex, matchesInRound, totalLosersRounds) {
        // ü•â –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥, –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ç—á = –ú–∞–ª—ã–π —Ñ–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤
        if (round === totalLosersRounds - 1 && matchesInRound === 1) {
            return {
                bracketType: 'loser_semifinal',
                roundName: '–ú–∞–ª—ã–π —Ñ–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤',
                matchTitle: '–ú–∞–ª—ã–π —Ñ–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤',
                description: '–ú–∞–ª—ã–π —Ñ–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤'
            };
        }
        
        // ü•à –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥ = –§–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤
        if (round === totalLosersRounds && matchesInRound === 1) {
            return {
                bracketType: 'loser_final',
                roundName: '–§–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤',
                matchTitle: '–§–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤',
                description: '–§–∏–Ω–∞–ª –ª—É–∑–µ—Ä–æ–≤'
            };
        }
        
        // üíî –û–±—ã—á–Ω—ã–π –º–∞—Ç—á –ª—É–∑–µ—Ä–æ–≤
        return {
            bracketType: 'loser',
            roundName: `–†–∞—É–Ω–¥ ${round} (Losers)`,
            matchTitle: `Losers R${round} –ú–∞—Ç—á ${matchIndex + 1}`,
            description: '–æ–±—ã—á–Ω—ã–π –º–∞—Ç—á –ª—É–∑–µ—Ä–æ–≤'
        };
    }
}

module.exports = { DoubleEliminationEngine }; 