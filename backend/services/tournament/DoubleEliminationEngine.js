/**
 * ‚ö° –î–í–ò–ñ–û–ö DOUBLE ELIMINATION V2.0
 * 
 * –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Double Elimination
 * —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –î–≤–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö bracket: Winners –∏ Losers
 * - –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ 2-—Ö –ø–æ—Ä–∞–∂–µ–Ω–∏–π
 * - Grand Final –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 1 –∏–ª–∏ 2 –º–∞—Ç—á–µ–π
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ bye-–ø—Ä–æ—Ö–æ–¥–æ–≤ –¥–ª—è —Å—Ç–µ–ø–µ–Ω–µ–π –¥–≤–æ–π–∫–∏
 */

const { SeedingFactory, SEEDING_TYPES } = require('../../utils/tournament/seedingAlgorithms');
const pool = require('../../db');

/**
 * üèÜ –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–≤–∏–∂–∫–∞ Double Elimination
 */
class DoubleEliminationEngine {
    
    /**
     * üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Double Elimination
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥
     * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç—á–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
     */
    static async generateBracket(tournamentId, participants, options = {}) {
        const startTime = Date.now();
        console.log(`‚ö° [DoubleEliminationEngine] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ double elimination —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this._validateInput(tournamentId, participants, options);
            
            // 2. –†–∞—Å—á–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è double elimination
            const bracketMath = this._calculateDoubleEliminationParams(participants.length);
            
            console.log(`üìä Double Elimination –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, {
                participants: bracketMath.participants,
                actualParticipants: bracketMath.actualParticipants,
                winnersRounds: bracketMath.winnersRounds,
                losersRounds: bracketMath.losersRounds,
                totalMatches: bracketMath.totalMatches,
                hasGrandFinalReset: bracketMath.hasGrandFinalReset
            });
            
            // 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            const seedingType = options.seedingType || SEEDING_TYPES.RANDOM;
            const seededParticipants = SeedingFactory.createSeeding(
                seedingType,
                participants,
                bracketMath.participants, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏
                options.seedingOptions || {}
            );
            
            console.log(`üé≤ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —Ç–∏–ø ${seedingType}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${seededParticipants.length}`);
            
            // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞—Ç—á–µ–π
            const matches = await this._generateMatches(
                tournamentId,
                seededParticipants,
                bracketMath,
                options
            );
            
            // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            const validationResult = this._validateGeneratedBracket(matches, bracketMath);
            if (!validationResult.isValid) {
                throw new Error(`–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∞: ${validationResult.errors.join(', ')}`);
            }
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [DoubleEliminationEngine] –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${duration}ms`);
            
            return {
                success: true,
                matches,
                bracketMath,
                seedingInfo: {
                    type: seedingType,
                    participantsUsed: seededParticipants.length,
                    participantsExcluded: bracketMath.participants - participants.length
                },
                generationTime: duration,
                generatedAt: new Date().toISOString()
            };
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [DoubleEliminationEngine] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${duration}ms):`, error.message);
            
            return {
                success: false,
                error: error.message,
                generationTime: duration,
                generatedAt: new Date().toISOString()
            };
        }
    }
    
    /**
     * üìä –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Double Elimination —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
     * @param {number} participantCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @returns {Object} - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã double elimination
     */
    static _calculateDoubleEliminationParams(participantCount) {
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏ (–≤–≤–µ—Ä—Ö)
        const powerOfTwo = Math.pow(2, Math.ceil(Math.log2(participantCount)));
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const winnersRounds = Math.log2(powerOfTwo);
        const losersRounds = (winnersRounds - 1) * 2;
        
        // –†–∞—Å—á–µ—Ç –º–∞—Ç—á–µ–π –≤ –∫–∞–∂–¥–æ–π —Å–µ—Ç–∫–µ
        const winnersMatches = powerOfTwo - 1;
        const losersMatches = powerOfTwo - 2;
        const grandFinalMatches = 2; // –ú–∞–∫—Å–∏–º—É–º 2 –º–∞—Ç—á–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π + reset)
        
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
        const totalMatches = winnersMatches + losersMatches + grandFinalMatches;
        
        // Bye-–ø—Ä–æ—Ö–æ–¥—ã (–µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏)
        const byesNeeded = powerOfTwo - participantCount;
        
        return {
            participants: powerOfTwo,
            actualParticipants: participantCount,
            winnersRounds,
            losersRounds,
            totalRounds: winnersRounds + losersRounds + 1, // +1 –¥–ª—è –≥—Ä–∞–Ω–¥ —Ñ–∏–Ω–∞–ª–∞
            winnersMatches,
            losersMatches,
            grandFinalMatches,
            totalMatches,
            byesNeeded,
            hasGrandFinalReset: true // –í—Å–µ–≥–¥–∞ –≤–æ–∑–º–æ–∂–µ–Ω reset –≤ DE
        };
    }
    
    /**
     * üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—á–µ–π –¥–ª—è double elimination
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {Object} bracketMath - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
     * @param {Object} options - –û–ø—Ü–∏–∏
     * @returns {Array} - –ú–∞—Ç—á–∏
     */
    static async _generateMatches(tournamentId, participants, bracketMath, options) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            console.log(`üèóÔ∏è [DoubleEliminationEngine] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${bracketMath.totalMatches} –º–∞—Ç—á–µ–π`);
            
            // 1. –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ Winners Bracket
            const winnersMatches = await this._createWinnersMatches(
                client, 
                tournamentId, 
                bracketMath.winnersRounds,
                bracketMath.winnersMatches
            );
            
            // 2. –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ Losers Bracket
            const losersMatches = await this._createLosersMatches(
                client, 
                tournamentId, 
                bracketMath.losersRounds,
                bracketMath.losersMatches
            );
            
            // 3. –°–æ–∑–¥–∞–µ–º Grand Final –º–∞—Ç—á–∏
            const grandFinalMatches = await this._createGrandFinalMatches(
                client, 
                tournamentId
            );
            
            // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
            await this._establishDoubleEliminationConnections(
                client,
                winnersMatches,
                losersMatches,
                grandFinalMatches,
                bracketMath
            );
            
            // 5. –†–∞–∑–º–µ—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ Winners Bracket
            await this._placeParticipantsInWinnersBracket(
                client,
                winnersMatches,
                participants,
                bracketMath
            );
            
            await client.query('COMMIT');
            
            return [...winnersMatches, ...losersMatches, ...grandFinalMatches];
            
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    /**
     * üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–µ–π Winners Bracket
     */
    static async _createWinnersMatches(client, tournamentId, rounds, totalMatches) {
        const matches = [];
        let matchNumber = 1;
        
        console.log(`üèÜ –°–æ–∑–¥–∞–Ω–∏–µ Winners Bracket: ${rounds} —Ä–∞—É–Ω–¥–æ–≤, ${totalMatches} –º–∞—Ç—á–µ–π`);
        
        for (let round = 1; round <= rounds; round++) {
            const matchesInRound = Math.pow(2, rounds - round);
            
            console.log(`   –†–∞—É–Ω–¥ ${round}: ${matchesInRound} –º–∞—Ç—á–µ–π`);
            
            for (let i = 0; i < matchesInRound; i++) {
                const result = await client.query(`
                    INSERT INTO matches (
                        tournament_id, 
                        round, 
                        match_number, 
                        bracket_type,
                        status,
                        bracket_position
                    ) VALUES ($1, $2, $3, 'winner', 'pending', $4)
                    RETURNING *
                `, [tournamentId, round, matchNumber, `WB_R${round}_M${i+1}`]);
                
                matches.push(result.rows[0]);
                matchNumber++;
            }
        }
        
        return matches;
    }
    
    /**
     * üíî –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–µ–π Losers Bracket —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
     */
    static async _createLosersMatches(client, tournamentId, rounds, totalMatches) {
        const matches = [];
        let matchNumber = 1000; // –ù–∞—á–∏–Ω–∞–µ–º —Å 1000 –¥–ª—è losers bracket
        
        console.log(`üíî –°–æ–∑–¥–∞–Ω–∏–µ Losers Bracket: ${rounds} —Ä–∞—É–Ω–¥–æ–≤, ${totalMatches} –º–∞—Ç—á–µ–π`);
        
        for (let round = 1; round <= rounds; round++) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –≤ Losers Bracket
            const matchesInRound = this._calculateLosersRoundMatches(round, rounds);
            
            console.log(`   Losers –†–∞—É–Ω–¥ ${round}: ${matchesInRound} –º–∞—Ç—á–µ–π`);
            
            for (let i = 0; i < matchesInRound; i++) {
                const result = await client.query(`
                    INSERT INTO matches (
                        tournament_id, 
                        round, 
                        match_number, 
                        bracket_type,
                        status,
                        bracket_position
                    ) VALUES ($1, $2, $3, 'loser', 'pending', $4)
                    RETURNING *
                `, [tournamentId, round, matchNumber, `LB_R${round}_M${i+1}`]);
                
                matches.push(result.rows[0]);
                matchNumber++;
            }
        }
        
        return matches;
    }
    
    /**
     * üìä –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –≤ —Ä–∞—É–Ω–¥–µ Losers Bracket
     */
    static _calculateLosersRoundMatches(round, totalRounds) {
        // –í Double Elimination —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Losers Bracket —Å–ª–µ–¥—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–µ:
        // - –ù–µ—á–µ—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã (1, 3, 5...): —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –∏–∑ Winners
        // - –ß–µ—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã (2, 4, 6...): –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –∏–∑ Winners + –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ Losers
        
        const winnersRounds = Math.log2(Math.pow(2, Math.ceil(totalRounds / 2)));
        const initialParticipants = Math.pow(2, winnersRounds);
        
        if (round % 2 === 1) {
            // –ù–µ—á–µ—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã: –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –∏–∑ Winners Bracket
            const winnersRoundFeeding = Math.floor((round + 1) / 2) + 1;
            return Math.pow(2, winnersRounds - winnersRoundFeeding);
        } else {
            // –ß–µ—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã: —Å–º–µ—à–∞–Ω–Ω—ã–π
            const winnersRoundFeeding = Math.floor(round / 2) + 1;
            return Math.pow(2, winnersRounds - winnersRoundFeeding);
        }
    }
    
    /**
     * üèÅ –°–æ–∑–¥–∞–Ω–∏–µ Grand Final –º–∞—Ç—á–µ–π
     */
    static async _createGrandFinalMatches(client, tournamentId) {
        const matches = [];
        
        console.log(`üèÅ –°–æ–∑–¥–∞–Ω–∏–µ Grand Final –º–∞—Ç—á–µ–π`);
        
        // Grand Final (–æ—Å–Ω–æ–≤–Ω–æ–π)
        const grandFinalResult = await client.query(`
            INSERT INTO matches (
                tournament_id, 
                round, 
                match_number, 
                bracket_type,
                status,
                bracket_position
            ) VALUES ($1, 999, 9999, 'grand_final', 'pending', 'GF_MAIN')
            RETURNING *
        `, [tournamentId]);
        
        matches.push(grandFinalResult.rows[0]);
        
        // Grand Final Reset (–µ—Å–ª–∏ winner losers bracket –≤—ã–∏–≥—Ä–∞–µ—Ç)
        const grandFinalResetResult = await client.query(`
            INSERT INTO matches (
                tournament_id, 
                round, 
                match_number, 
                bracket_type,
                status,
                bracket_position
            ) VALUES ($1, 999, 9998, 'grand_final_reset', 'pending', 'GF_RESET')
            RETURNING *
        `, [tournamentId]);
        
        matches.push(grandFinalResetResult.rows[0]);
        
        return matches;
    }
    
    /**
     * üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏ –≤ Double Elimination
     */
    static async _establishDoubleEliminationConnections(client, winnersMatches, losersMatches, grandFinalMatches, bracketMath) {
        console.log(`üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π Double Elimination`);
        
        // 1. –°–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ Winners Bracket
        await this._linkWinnersBracket(client, winnersMatches);
        
        // 2. –°–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ Losers Bracket
        await this._linkLosersBracket(client, losersMatches);
        
        // 3. –°–≤—è–∑–∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –∏–∑ Winners –≤ Losers
        await this._linkWinnersToLosers(client, winnersMatches, losersMatches, bracketMath);
        
        // 4. –°–≤—è–∑–∏ —Å Grand Final
        await this._linkToGrandFinal(client, winnersMatches, losersMatches, grandFinalMatches);
    }
    
    /**
     * üèÜ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Winners Bracket
     */
    static async _linkWinnersBracket(client, winnersMatches) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        const winnersByRound = {};
        winnersMatches.forEach(match => {
            if (!winnersByRound[match.round]) {
                winnersByRound[match.round] = [];
            }
            winnersByRound[match.round].push(match);
        });
        
        // –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ä–∞—É–Ω–¥—ã
        const rounds = Object.keys(winnersByRound).map(Number).sort((a, b) => a - b);
        
        for (let i = 0; i < rounds.length - 1; i++) {
            const currentRound = rounds[i];
            const nextRound = rounds[i + 1];
            
            const currentMatches = winnersByRound[currentRound];
            const nextMatches = winnersByRound[nextRound];
            
            // –ö–∞–∂–¥—ã–µ 2 –º–∞—Ç—á–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤–µ–¥—É—Ç –∫ 1 –º–∞—Ç—á—É —Å–ª–µ–¥—É—é—â–µ–≥–æ
            for (let j = 0; j < currentMatches.length; j++) {
                const nextMatchIndex = Math.floor(j / 2);
                if (nextMatches[nextMatchIndex]) {
                    await client.query(`
                        UPDATE matches SET next_match_id = $1 WHERE id = $2
                    `, [nextMatches[nextMatchIndex].id, currentMatches[j].id]);
                }
            }
        }
    }
    
    /**
     * üíî –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Losers Bracket
     */
    static async _linkLosersBracket(client, losersMatches) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        const losersByRound = {};
        losersMatches.forEach(match => {
            if (!losersByRound[match.round]) {
                losersByRound[match.round] = [];
            }
            losersByRound[match.round].push(match);
        });
        
        // –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ä–∞—É–Ω–¥—ã –≤ Losers Bracket
        const rounds = Object.keys(losersByRound).map(Number).sort((a, b) => a - b);
        
        for (let i = 0; i < rounds.length - 1; i++) {
            const currentRound = rounds[i];
            const nextRound = rounds[i + 1];
            
            const currentMatches = losersByRound[currentRound];
            const nextMatches = losersByRound[nextRound];
            
            // –õ–æ–≥–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–µ—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—É–Ω–¥–∞
            if (currentRound % 2 === 0) {
                // –ß–µ—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã: 1 –∫ 1 –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
                for (let j = 0; j < currentMatches.length && j < nextMatches.length; j++) {
                    await client.query(`
                        UPDATE matches SET next_match_id = $1 WHERE id = $2
                    `, [nextMatches[j].id, currentMatches[j].id]);
                }
            } else {
                // –ù–µ—á–µ—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã: 2 –∫ 1 –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
                for (let j = 0; j < currentMatches.length; j++) {
                    const nextMatchIndex = Math.floor(j / 2);
                    if (nextMatches[nextMatchIndex]) {
                        await client.query(`
                            UPDATE matches SET next_match_id = $1 WHERE id = $2
                        `, [nextMatches[nextMatchIndex].id, currentMatches[j].id]);
                    }
                }
            }
        }
    }
    
    /**
     * üîÑ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –∏–∑ Winners –≤ Losers
     */
    static async _linkWinnersToLosers(client, winnersMatches, losersMatches, bracketMath) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        const winnersByRound = {};
        winnersMatches.forEach(match => {
            if (!winnersByRound[match.round]) {
                winnersByRound[match.round] = [];
            }
            winnersByRound[match.round].push(match);
        });
        
        const losersByRound = {};
        losersMatches.forEach(match => {
            if (!losersByRound[match.round]) {
                losersByRound[match.round] = [];
            }
            losersByRound[match.round].push(match);
        });
        
        // –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –∏–∑ Winners –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—É–Ω–¥—ã Losers
        const winnersRounds = Object.keys(winnersByRound).map(Number).sort((a, b) => a - b);
        
        winnersRounds.forEach(winnersRound => {
            const winnersMatches = winnersByRound[winnersRound];
            
            // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ Winners –∏–¥—É—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–∞—É–Ω–¥ Losers
            const targetLosersRound = this._calculateTargetLosersRound(winnersRound, bracketMath);
            const targetLosersMatches = losersByRound[targetLosersRound];
            
            if (targetLosersMatches) {
                winnersMatches.forEach(async (winnerMatch, index) => {
                    const targetLoserMatch = targetLosersMatches[index] || targetLosersMatches[0];
                    
                    await client.query(`
                        UPDATE matches SET loser_next_match_id = $1 WHERE id = $2
                    `, [targetLoserMatch.id, winnerMatch.id]);
                });
            }
        });
    }
    
    /**
     * üéØ –†–∞—Å—á–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ Losers –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –∏–∑ Winners
     */
    static _calculateTargetLosersRound(winnersRound, bracketMath) {
        // –í Double Elimination –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –∏–∑ Winners Bracket –ø–æ–ø–∞–¥–∞—é—Ç –≤ Losers Bracket
        // –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ, –∑–∞–≤–∏—Å—è—â–µ–π –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
        
        const totalWinnersRounds = bracketMath.winnersRounds;
        
        // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –∏–∑ —Ä–∞—É–Ω–¥–∞ 1 Winners –∏–¥—É—Ç –≤ —Ä–∞—É–Ω–¥ 1 Losers
        // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ –∏–∑ —Ä–∞—É–Ω–¥–∞ 2 Winners –∏–¥—É—Ç –≤ —Ä–∞—É–Ω–¥ 3 Losers
        // –ò —Ç–∞–∫ –¥–∞–ª–µ–µ...
        
        if (winnersRound === 1) {
            return 1;
        } else {
            return (winnersRound - 1) * 2 + 1;
        }
    }
    
    /**
     * üèÅ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å Grand Final
     */
    static async _linkToGrandFinal(client, winnersMatches, losersMatches, grandFinalMatches) {
        // –§–∏–Ω–∞–ª–∏—Å—Ç Winners Bracket –∏–¥–µ—Ç –≤ Grand Final
        const winnersFinal = winnersMatches.find(m => m.round === Math.max(...winnersMatches.map(m => m.round)));
        
        // –§–∏–Ω–∞–ª–∏—Å—Ç Losers Bracket –∏–¥–µ—Ç –≤ Grand Final
        const losersFinal = losersMatches.find(m => m.round === Math.max(...losersMatches.map(m => m.round)));
        
        const grandFinal = grandFinalMatches.find(m => m.bracket_type === 'grand_final');
        
        if (winnersFinal && grandFinal) {
            await client.query(`
                UPDATE matches SET next_match_id = $1 WHERE id = $2
            `, [grandFinal.id, winnersFinal.id]);
        }
        
        if (losersFinal && grandFinal) {
            await client.query(`
                UPDATE matches SET next_match_id = $1 WHERE id = $2
            `, [grandFinal.id, losersFinal.id]);
        }
    }
    
    /**
     * üë• –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ Winners Bracket
     */
    static async _placeParticipantsInWinnersBracket(client, winnersMatches, participants, bracketMath) {
        console.log(`üë• –†–∞–∑–º–µ—â–µ–Ω–∏–µ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ Winners Bracket`);
        
        const firstRoundMatches = winnersMatches.filter(m => m.round === 1);
        
        for (let i = 0; i < firstRoundMatches.length && i * 2 < participants.length; i++) {
            const match = firstRoundMatches[i];
            const team1 = participants[i * 2];
            const team2 = participants[i * 2 + 1] || null;
            
            await client.query(`
                UPDATE matches 
                SET team1_id = $1, team2_id = $2 
                WHERE id = $3
            `, [team1.id, team2?.id || null, match.id]);
            
            console.log(`‚úÖ Winners Bracket –º–∞—Ç—á ${match.match_number}: ${team1.name || team1.id} vs ${team2?.name || team2?.id || 'BYE'}`);
        }
    }
    
    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    static _validateInput(tournamentId, participants, options) {
        if (!Number.isInteger(tournamentId) || tournamentId <= 0) {
            throw new Error('ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º');
        }
        
        if (!Array.isArray(participants)) {
            throw new Error('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞');
        }
        
        if (participants.length < 2) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–º–∏–Ω–∏–º—É–º 2)');
        }
        
        if (participants.length > 128) {
            throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è double elimination (–º–∞–∫—Å–∏–º—É–º 128)');
        }
        
        participants.forEach((participant, index) => {
            if (!participant || typeof participant !== 'object') {
                throw new Error(`–£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
            }
            
            if (!participant.id) {
                throw new Error(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${index + 1} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID`);
            }
        });
        
        if (options.seedingType && !Object.values(SEEDING_TYPES).includes(options.seedingType)) {
            throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${options.seedingType}`);
        }
    }
    
    /**
     * üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static _validateGeneratedBracket(matches, bracketMath) {
        const errors = [];
        
        if (!Array.isArray(matches)) {
            errors.push('–ú–∞—Ç—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
        }
        
        if (matches.length !== bracketMath.totalMatches) {
            errors.push(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${bracketMath.totalMatches}, –ø–æ–ª—É—á–µ–Ω–æ ${matches.length}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ bracket
        const requiredBracketTypes = ['winner', 'loser', 'grand_final', 'grand_final_reset'];
        requiredBracketTypes.forEach(type => {
            if (!matches.some(m => m.bracket_type === type)) {
                errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞—Ç—á–∏ —Ç–∏–ø–∞ ${type}`);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Winners Bracket
        const winnersMatches = matches.filter(m => m.bracket_type === 'winner');
        if (winnersMatches.length !== bracketMath.winnersMatches) {
            errors.push(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π Winners Bracket: ${winnersMatches.length}, –æ–∂–∏–¥–∞–µ—Ç—Å—è ${bracketMath.winnersMatches}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Losers Bracket
        const losersMatches = matches.filter(m => m.bracket_type === 'loser');
        if (losersMatches.length !== bracketMath.losersMatches) {
            errors.push(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π Losers Bracket: ${losersMatches.length}, –æ–∂–∏–¥–∞–µ—Ç—Å—è ${bracketMath.losersMatches}`);
        }
        
        return {
            isValid: errors.length === 0,
            errors,
            statistics: {
                totalMatches: matches.length,
                winnersMatches: winnersMatches.length,
                losersMatches: losersMatches.length,
                grandFinalMatches: matches.filter(m => m.bracket_type.includes('grand_final')).length
            }
        };
    }
    
    /**
     * üéØ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ Double Elimination
     * @param {number} matchId - ID –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
     * @param {number} winnerId - ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
     * @param {number} loserId - ID –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
     */
    static async advanceParticipant(matchId, winnerId, loserId) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
            const matchResult = await client.query(`
                SELECT * FROM matches WHERE id = $1
            `, [matchId]);
            
            const match = matchResult.rows[0];
            if (!match) {
                throw new Error('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
            await client.query(`
                UPDATE matches 
                SET winner_team_id = $1, status = 'completed'
                WHERE id = $2
            `, [winnerId, matchId]);
            
            // –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if (match.next_match_id) {
                await this._advanceWinner(client, winnerId, match.next_match_id);
            }
            
            // –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫—É–¥–∞)
            if (match.loser_next_match_id) {
                await this._advanceLoser(client, loserId, match.loser_next_match_id);
            }
            
            await client.query('COMMIT');
            
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    /**
     * üèÜ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
     */
    static async _advanceWinner(client, winnerId, nextMatchId) {
        const nextMatch = await client.query(`
            SELECT * FROM matches WHERE id = $1
        `, [nextMatchId]);
        
        if (nextMatch.rows.length === 0) {
            throw new Error('–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const match = nextMatch.rows[0];
        
        // –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if (!match.team1_id) {
            await client.query(`
                UPDATE matches SET team1_id = $1 WHERE id = $2
            `, [winnerId, nextMatchId]);
        } else if (!match.team2_id) {
            await client.query(`
                UPDATE matches SET team2_id = $1 WHERE id = $2
            `, [winnerId, nextMatchId]);
        } else {
            throw new Error('–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω');
        }
    }
    
    /**
     * üíî –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –≤ Losers Bracket
     */
    static async _advanceLoser(client, loserId, loserNextMatchId) {
        const nextMatch = await client.query(`
            SELECT * FROM matches WHERE id = $1
        `, [loserNextMatchId]);
        
        if (nextMatch.rows.length === 0) {
            throw new Error('–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –≤ Losers Bracket –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const match = nextMatch.rows[0];
        
        // –†–∞–∑–º–µ—â–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ Losers Bracket
        if (!match.team1_id) {
            await client.query(`
                UPDATE matches SET team1_id = $1 WHERE id = $2
            `, [loserId, loserNextMatchId]);
        } else if (!match.team2_id) {
            await client.query(`
                UPDATE matches SET team2_id = $1 WHERE id = $2
            `, [loserId, loserNextMatchId]);
        } else {
            throw new Error('–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –≤ Losers Bracket —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω');
        }
    }
}

module.exports = { DoubleEliminationEngine }; 