/**
 * ‚ö° –î–í–ò–ñ–û–ö DOUBLE ELIMINATION
 * 
 * –î–≤–∏–∂–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Double Elimination
 * —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π winners –∏ losers bracket
 */

const { BracketMath } = require('../../utils/tournament/bracketMath');
const { SeedingFactory, SEEDING_TYPES } = require('../../utils/tournament/seedingAlgorithms');
const pool = require('../../db');

/**
 * üèÜ –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–≤–∏–∂–∫–∞ Double Elimination
 */
class DoubleEliminationEngine {
    
    /**
     * üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Double Elimination
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥
     * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Ç—á–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
     */
    static async generateBracket(tournamentId, participants, options = {}) {
        const startTime = Date.now();
        console.log(`‚ö° [DoubleEliminationEngine] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ double elimination —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this._validateInput(tournamentId, participants, options);
            
            // 2. –†–∞—Å—á–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è double elimination
            const bracketMath = this._calculateDoubleEliminationParams(participants.length);
            
            console.log(`üìä Double Elimination –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, {
                participants: bracketMath.participants,
                winnersRounds: bracketMath.winnersRounds,
                losersRounds: bracketMath.losersRounds,
                totalMatches: bracketMath.totalMatches
            });
            
            // 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            const seedingType = options.seedingType || SEEDING_TYPES.RANDOM;
            const seededParticipants = SeedingFactory.createSeeding(
                seedingType,
                participants,
                participants.length,
                options.seedingOptions || {}
            );
            
            console.log(`üé≤ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —Ç–∏–ø ${seedingType}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${seededParticipants.length}`);
            
            // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞—Ç—á–µ–π
            const matches = await this._generateMatches(
                tournamentId,
                seededParticipants,
                bracketMath,
                options
            );
            
            // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            const validationResult = this._validateGeneratedBracket(matches, bracketMath);
            if (!validationResult.isValid) {
                throw new Error(`–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∞: ${validationResult.errors.join(', ')}`);
            }
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [DoubleEliminationEngine] –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${duration}ms`);
            
            return {
                success: true,
                matches,
                bracketMath,
                seedingInfo: {
                    type: seedingType,
                    participantsUsed: seededParticipants.length,
                    participantsExcluded: 0
                },
                generationTime: duration,
                generatedAt: new Date().toISOString()
            };
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [DoubleEliminationEngine] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${duration}ms):`, error.message);
            
            return {
                success: false,
                error: error.message,
                generationTime: duration,
                generatedAt: new Date().toISOString()
            };
        }
    }
    
    /**
     * üìä –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Double Elimination
     * @param {number} participantCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @returns {Object} - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã double elimination
     */
    static _calculateDoubleEliminationParams(participantCount) {
        // –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ –±–ª–∏–∂–∞–π—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏
        const powerOfTwo = Math.pow(2, Math.ceil(Math.log2(participantCount)));
        
        // –†–∞—Å—á–µ—Ç —Ä–∞—É–Ω–¥–æ–≤
        const winnersRounds = Math.log2(powerOfTwo);
        const losersRounds = (winnersRounds - 1) * 2;
        
        // –†–∞—Å—á–µ—Ç –º–∞—Ç—á–µ–π
        const winnersMatches = powerOfTwo - 1;
        const losersMatches = powerOfTwo - 2;
        const grandFinalMatches = 2; // –ú–æ–∂–µ—Ç –±—ã—Ç—å 1 –∏–ª–∏ 2 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        
        const totalMatches = winnersMatches + losersMatches + grandFinalMatches;
        
        return {
            participants: powerOfTwo,
            actualParticipants: participantCount,
            winnersRounds,
            losersRounds,
            totalRounds: winnersRounds + losersRounds + 1, // +1 –¥–ª—è –≥—Ä–∞–Ω–¥ —Ñ–∏–Ω–∞–ª–∞
            winnersMatches,
            losersMatches,
            grandFinalMatches,
            totalMatches,
            byesNeeded: powerOfTwo - participantCount
        };
    }
    
    /**
     * üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—á–µ–π –¥–ª—è double elimination
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {Object} bracketMath - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
     * @param {Object} options - –û–ø—Ü–∏–∏
     * @returns {Array} - –ú–∞—Ç—á–∏
     */
    static async _generateMatches(tournamentId, participants, bracketMath, options) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            console.log(`üèóÔ∏è [DoubleEliminationEngine] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${bracketMath.totalMatches} –º–∞—Ç—á–µ–π`);
            
            // 1. –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ Winners Bracket
            const winnersMatches = await this._createWinnersMatches(
                client, 
                tournamentId, 
                bracketMath.winnersRounds,
                bracketMath.winnersMatches
            );
            
            // 2. –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ Losers Bracket
            const losersMatches = await this._createLosersMatches(
                client, 
                tournamentId, 
                bracketMath.losersRounds,
                bracketMath.losersMatches
            );
            
            // 3. –°–æ–∑–¥–∞–µ–º Grand Final
            const grandFinalMatches = await this._createGrandFinalMatches(
                client, 
                tournamentId
            );
            
            // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
            await this._establishDoubleEliminationConnections(
                client,
                winnersMatches,
                losersMatches,
                grandFinalMatches
            );
            
            // 5. –†–∞–∑–º–µ—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ Winners Bracket
            await this._placeParticipantsInWinnersBracket(
                client,
                winnersMatches,
                participants
            );
            
            await client.query('COMMIT');
            
            return [...winnersMatches, ...losersMatches, ...grandFinalMatches];
            
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }
    
    /**
     * üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–µ–π Winners Bracket
     */
    static async _createWinnersMatches(client, tournamentId, rounds, totalMatches) {
        const matches = [];
        let matchNumber = 1;
        
        for (let round = 1; round <= rounds; round++) {
            const matchesInRound = Math.pow(2, rounds - round);
            
            for (let i = 0; i < matchesInRound; i++) {
                const result = await client.query(`
                    INSERT INTO matches (
                        tournament_id, 
                        round, 
                        match_number, 
                        bracket_type,
                        status
                    ) VALUES ($1, $2, $3, 'winner', 'pending')
                    RETURNING *
                `, [tournamentId, round, matchNumber]);
                
                matches.push(result.rows[0]);
                matchNumber++;
            }
        }
        
        return matches;
    }
    
    /**
     * üíî –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–µ–π Losers Bracket
     */
    static async _createLosersMatches(client, tournamentId, rounds, totalMatches) {
        const matches = [];
        let matchNumber = 1000; // –ù–∞—á–∏–Ω–∞–µ–º —Å 1000 –¥–ª—è losers bracket
        
        for (let round = 1; round <= rounds; round++) {
            // –õ–æ–≥–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –≤ –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ losers bracket
            const matchesInRound = this._calculateLosersRoundMatches(round, rounds);
            
            for (let i = 0; i < matchesInRound; i++) {
                const result = await client.query(`
                    INSERT INTO matches (
                        tournament_id, 
                        round, 
                        match_number, 
                        bracket_type,
                        status
                    ) VALUES ($1, $2, $3, 'loser', 'pending')
                    RETURNING *
                `, [tournamentId, round, matchNumber]);
                
                matches.push(result.rows[0]);
                matchNumber++;
            }
        }
        
        return matches;
    }
    
    /**
     * üèÅ –°–æ–∑–¥–∞–Ω–∏–µ Grand Final –º–∞—Ç—á–µ–π
     */
    static async _createGrandFinalMatches(client, tournamentId) {
        const matches = [];
        
        // Grand Final
        const grandFinalResult = await client.query(`
            INSERT INTO matches (
                tournament_id, 
                round, 
                match_number, 
                bracket_type,
                status
            ) VALUES ($1, 999, 9999, 'grand_final', 'pending')
            RETURNING *
        `, [tournamentId]);
        
        matches.push(grandFinalResult.rows[0]);
        
        // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—Ç–æ—Ä–æ–π Grand Final (–µ—Å–ª–∏ winner losers bracket –≤—ã–∏–≥—Ä–∞–µ—Ç)
        const grandFinalResetResult = await client.query(`
            INSERT INTO matches (
                tournament_id, 
                round, 
                match_number, 
                bracket_type,
                status
            ) VALUES ($1, 999, 9998, 'grand_final_reset', 'pending')
            RETURNING *
        `, [tournamentId]);
        
        matches.push(grandFinalResetResult.rows[0]);
        
        return matches;
    }
    
    /**
     * üìä –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –≤ —Ä–∞—É–Ω–¥–µ losers bracket
     */
    static _calculateLosersRoundMatches(round, totalRounds) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        return Math.ceil(Math.pow(2, totalRounds - round));
    }
    
    /**
     * üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
     */
    static async _establishDoubleEliminationConnections(client, winnersMatches, losersMatches, grandFinalMatches) {
        // –°–≤—è–∑–∏ –≤ Winners Bracket
        for (let i = 0; i < winnersMatches.length - 1; i++) {
            const currentMatch = winnersMatches[i];
            const nextMatch = winnersMatches[i + 1];
            
            if (currentMatch.round === nextMatch.round - 1) {
                await client.query(`
                    UPDATE matches SET next_match_id = $1 WHERE id = $2
                `, [nextMatch.id, currentMatch.id]);
            }
        }
        
        // –°–≤—è–∑–∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –∏–∑ Winners –≤ Losers
        for (const winnerMatch of winnersMatches) {
            const appropriateLoserMatch = losersMatches.find(lm => 
                lm.round === winnerMatch.round
            );
            
            if (appropriateLoserMatch) {
                await client.query(`
                    UPDATE matches SET loser_next_match_id = $1 WHERE id = $2
                `, [appropriateLoserMatch.id, winnerMatch.id]);
            }
        }
        
        // –°–≤—è–∑–∏ –≤ Losers Bracket
        for (let i = 0; i < losersMatches.length - 1; i++) {
            const currentMatch = losersMatches[i];
            const nextMatch = losersMatches[i + 1];
            
            if (currentMatch.round === nextMatch.round - 1) {
                await client.query(`
                    UPDATE matches SET next_match_id = $1 WHERE id = $2
                `, [nextMatch.id, currentMatch.id]);
            }
        }
        
        // –°–≤—è–∑–∏ —Å Grand Final
        if (winnersMatches.length > 0 && grandFinalMatches.length > 0) {
            const winnersFinal = winnersMatches[winnersMatches.length - 1];
            const grandFinal = grandFinalMatches[0];
            
            await client.query(`
                UPDATE matches SET next_match_id = $1 WHERE id = $2
            `, [grandFinal.id, winnersFinal.id]);
        }
        
        if (losersMatches.length > 0 && grandFinalMatches.length > 0) {
            const losersFinal = losersMatches[losersMatches.length - 1];
            const grandFinal = grandFinalMatches[0];
            
            await client.query(`
                UPDATE matches SET next_match_id = $1 WHERE id = $2
            `, [grandFinal.id, losersFinal.id]);
        }
    }
    
    /**
     * üë• –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ Winners Bracket
     */
    static async _placeParticipantsInWinnersBracket(client, winnersMatches, participants) {
        const firstRoundMatches = winnersMatches.filter(m => m.round === 1);
        
        for (let i = 0; i < firstRoundMatches.length && i * 2 < participants.length; i++) {
            const match = firstRoundMatches[i];
            const team1 = participants[i * 2];
            const team2 = participants[i * 2 + 1] || null;
            
            await client.query(`
                UPDATE matches 
                SET team1_id = $1, team2_id = $2 
                WHERE id = $3
            `, [team1.id, team2?.id || null, match.id]);
            
            console.log(`‚úÖ Winners Bracket –º–∞—Ç—á ${match.match_number}: ${team1.id} vs ${team2?.id || 'BYE'}`);
        }
    }
    
    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    static _validateInput(tournamentId, participants, options) {
        if (!Number.isInteger(tournamentId) || tournamentId <= 0) {
            throw new Error('ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º');
        }
        
        if (!Array.isArray(participants)) {
            throw new Error('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞');
        }
        
        if (participants.length < 2) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–º–∏–Ω–∏–º—É–º 2)');
        }
        
        if (participants.length > 64) {
            throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è double elimination (–º–∞–∫—Å–∏–º—É–º 64)');
        }
        
        participants.forEach((participant, index) => {
            if (!participant || typeof participant !== 'object') {
                throw new Error(`–£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
            }
            
            if (!participant.id) {
                throw new Error(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${index + 1} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID`);
            }
        });
    }
    
    /**
     * üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static _validateGeneratedBracket(matches, bracketMath) {
        const errors = [];
        
        if (!Array.isArray(matches)) {
            errors.push('–ú–∞—Ç—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
        }
        
        if (matches.length !== bracketMath.totalMatches) {
            errors.push(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${bracketMath.totalMatches}, –ø–æ–ª—É—á–µ–Ω–æ ${matches.length}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ bracket
        const bracketTypes = ['winner', 'loser', 'grand_final'];
        bracketTypes.forEach(type => {
            if (!matches.some(m => m.bracket_type === type)) {
                errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞—Ç—á–∏ —Ç–∏–ø–∞ ${type}`);
            }
        });
        
        return {
            isValid: errors.length === 0,
            errors
        };
    }
}

module.exports = { DoubleEliminationEngine }; 