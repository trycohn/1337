const TeamJoinRequestRepository = require('../../repositories/tournament/TeamJoinRequestRepository');
const TeamRepository = require('../../repositories/tournament/TeamRepository');
const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendSystemNotification } = require('../../utils/systemNotifications');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—ã
 */
class TeamJoinRequestService {
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
     */
    static async createJoinRequest(teamId, tournamentId, userId, username, message = null) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        const team = await TeamRepository.getById(teamId);
        if (!team) {
            throw new Error('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        if (team.tournament_id !== tournamentId) {
            throw new Error('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.status !== 'active') {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã
        const isMember = await this._isTeamMember(teamId, userId);
        if (isMember) {
            throw new Error('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ pending –∑–∞–ø—Ä–æ—Å–∞
        const hasPending = await TeamJoinRequestRepository.hasPendingRequest(teamId, userId);
        if (hasPending) {
            throw new Error('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        const request = await TeamJoinRequestRepository.create({
            team_id: teamId,
            tournament_id: tournamentId,
            user_id: userId,
            message
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã
        await this._notifyCaptain(team, userId, username, request.id, message);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(tournamentId, userId, 'team_join_request_created', {
            team_id: teamId,
            team_name: team.name,
            request_id: request.id
        });

        return request;
    }

    /**
     * –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
     */
    static async acceptJoinRequest(requestId, captainId, captainUsername) {
        const request = await TeamJoinRequestRepository.getById(requestId);
        
        if (!request) {
            throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (request.status !== 'pending') {
            throw new Error('–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞
        const hasAccess = await this._checkCaptainAccess(request.team_id, captainId);
        if (!hasAccess) {
            throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ
        const isMember = await this._isTeamMember(request.team_id, request.user_id);
        if (isMember) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥—ã
        const canJoin = await this._checkTeamLimit(request.team_id, request.tournament_id);
        if (!canJoin) {
            throw new Error('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
        }

        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å
        const accepted = await TeamJoinRequestRepository.accept(requestId, captainId);

        if (!accepted) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É
        await this._addUserToTeam(
            request.team_id, 
            request.tournament_id, 
            request.user_id, 
            request.user_username
        );

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏
        await sendSystemNotification(
            request.user_id,
            `‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É "${request.team_name}" –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∫–∞–ø–∏—Ç–∞–Ω–æ–º!`,
            'team_join_accepted',
            {
                team_id: request.team_id,
                team_name: request.team_name,
                tournament_id: request.tournament_id,
                tournament_name: request.tournament_name,
                accepted_by: captainUsername
            }
        );

        // –ê–Ω–æ–Ω—Å –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await sendTournamentChatAnnouncement(
            request.tournament_id,
            `üë• ${request.user_username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ "${request.team_name}"!`
        );

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(request.tournament_id, captainId, 'team_join_request_accepted', {
            request_id: requestId,
            team_id: request.team_id,
            user_id: request.user_id,
            user_username: request.user_username
        });

        return accepted;
    }

    /**
     * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
     */
    static async rejectJoinRequest(requestId, captainId, captainUsername) {
        const request = await TeamJoinRequestRepository.getById(requestId);
        
        if (!request) {
            throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (request.status !== 'pending') {
            throw new Error('–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞
        const hasAccess = await this._checkCaptainAccess(request.team_id, captainId);
        if (!hasAccess) {
            throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π');
        }

        // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        const rejected = await TeamJoinRequestRepository.reject(requestId, captainId);

        if (!rejected) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å');
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        await sendSystemNotification(
            request.user_id,
            `‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É "${request.team_name}" –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.`,
            'team_join_rejected',
            {
                team_id: request.team_id,
                team_name: request.team_name,
                tournament_id: request.tournament_id,
                rejected_by: captainUsername
            }
        );

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(request.tournament_id, captainId, 'team_join_request_rejected', {
            request_id: requestId,
            team_id: request.team_id,
            user_id: request.user_id
        });

        return rejected;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ pending –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
     */
    static async getTeamPendingRequests(teamId, captainId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞
        const hasAccess = await this._checkCaptainAccess(teamId, captainId);
        if (!hasAccess) {
            throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        }

        return await TeamJoinRequestRepository.getPendingByTeam(teamId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getUserRequestsForTournament(userId, tournamentId) {
        return await TeamJoinRequestRepository.getByUserAndTournament(userId, tournamentId);
    }

    /**
     * –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    static async cancelJoinRequest(requestId, userId) {
        const cancelled = await TeamJoinRequestRepository.cancel(requestId, userId);

        if (!cancelled) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å');
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(cancelled.tournament_id, userId, 'team_join_request_cancelled', {
            request_id: requestId,
            team_id: cancelled.team_id
        });

        return cancelled;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã
     */
    static async _checkCaptainAccess(teamId, userId) {
        const team = await TeamRepository.getById(teamId);
        if (!team) return false;

        // –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
        if (team.creator_id === userId) return true;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(team.tournament_id);
        if (tournament.created_by === userId) return true;

        const admins = await TournamentRepository.getAdmins(team.tournament_id);
        return admins.some(admin => admin.user_id === userId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–ª–µ–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã
     */
    static async _isTeamMember(teamId, userId) {
        const pool = require('../../db');
        const result = await pool.query(
            'SELECT id FROM tournament_team_members WHERE team_id = $1 AND user_id = $2',
            [teamId, userId]
        );
        return result.rows.length > 0;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
     */
    static async _checkTeamLimit(teamId, tournamentId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        const pool = require('../../db');
        
        const result = await pool.query(
            'SELECT COUNT(*) as count FROM tournament_team_members WHERE team_id = $1',
            [teamId]
        );

        const currentCount = parseInt(result.rows[0].count);
        const maxSize = this._getMaxTeamSize(tournament.participant_type);

        return currentCount < maxSize;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
     */
    static _getMaxTeamSize(participantType) {
        const maxSizes = {
            'solo': 1,
            '2x2': 2,
            '3x3': 3,
            '5x5': 5
        };
        return maxSizes[participantType] || 10;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É
     */
    static async _addUserToTeam(teamId, tournamentId, userId, username) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        let participant = await ParticipantRepository.getUserParticipation(tournamentId, userId);
        
        if (!participant) {
            participant = await ParticipantRepository.create({
                tournament_id: tournamentId,
                user_id: userId,
                name: username
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
        await TeamRepository.addMember(teamId, userId, participant.id);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω—É –∫–æ–º–∞–Ω–¥—ã
     */
    static async _notifyCaptain(team, requesterId, requesterUsername, requestId, message) {
        if (!team.creator_id) return;

        const baseUrl = process.env.PUBLIC_WEB_URL || process.env.SERVER_URL || 'https://1337community.com';
        
        let notificationMessage = `üë• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É "${team.name}"!\n\n`;
        notificationMessage += `**–ò–≥—Ä–æ–∫:** ${requesterUsername}\n`;
        
        if (message) {
            notificationMessage += `**–°–æ–æ–±—â–µ–Ω–∏–µ:** ${message}\n`;
        }

        const metadata = {
            type: 'team_join_request',
            team_id: team.id,
            team_name: team.name,
            tournament_id: team.tournament_id,
            requester_id: requesterId,
            requester_username: requesterUsername,
            request_id: requestId,
            actions: [
                {
                    type: 'accept',
                    label: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
                    action: 'accept_team_join_request',
                    style: 'success',
                    endpoint: `/api/tournaments/${team.tournament_id}/teams/${team.id}/join-requests/${requestId}/accept`
                },
                {
                    type: 'reject',
                    label: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                    action: 'reject_team_join_request',
                    style: 'danger',
                    endpoint: `/api/tournaments/${team.tournament_id}/teams/${team.id}/join-requests/${requestId}/reject`
                }
            ]
        };

        await sendSystemNotification(
            team.creator_id,
            notificationMessage,
            'team_join_request',
            metadata
        );
    }
}

module.exports = TeamJoinRequestService;

