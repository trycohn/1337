/**
 * üìä TOURNAMENT STATS SERVICE
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ç—É—Ä–Ω–∏—Ä–æ–≤
 * @version 1.0.0
 * @date 13 –æ–∫—Ç—è–±—Ä—è 2025
 */

const TournamentStatsRepository = require('../../repositories/tournament/TournamentStatsRepository');
const pool = require('../../db');

class TournamentStatsService {
    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞
     * @param {number} matchId - ID –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     */
    async updateStatsAfterMatch(matchId, tournamentId) {
        console.log(`üìä [TournamentStats] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –ø–æ—Å–ª–µ –º–∞—Ç—á–∞ ${matchId}`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ player_match_stats
            const statsQuery = `
                SELECT 
                    pms.*,
                    m.winner_team_id,
                    m.team1_id,
                    m.team2_id
                FROM player_match_stats pms
                JOIN matches m ON pms.match_id = m.id
                WHERE pms.match_id = $1;
            `;

            const statsResult = await pool.query(statsQuery, [matchId]);
            const playerStats = statsResult.rows;

            if (playerStats.length === 0) {
                console.log(`‚ö†Ô∏è [TournamentStats] –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–∞—Ç—á–∞ ${matchId}`);
                return null;
            }

            console.log(`üìà [TournamentStats] –ù–∞–π–¥–µ–Ω–æ ${playerStats.length} –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            for (const stats of playerStats) {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ team1_players / team2_players
                const isWinner = this._isPlayerWinner(stats);

                // –ü–æ–ª—É—á–∞–µ–º rounds_played –∏–∑ –º–∞—Ç—á–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É —Ä–∞—É–Ω–¥–æ–≤
                const roundsPlayed = await this._getMatchRounds(matchId);

                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è upsert
                const updateData = {
                    tournament_id: tournamentId,
                    user_id: stats.user_id,
                    steam_id: stats.steam_id,
                    kills: stats.kills || 0,
                    deaths: stats.deaths || 0,
                    assists: stats.assists || 0,
                    headshot_kills: stats.head_shot_kills || 0,
                    damage_dealt: stats.damage_dealt || 0,
                    shots_fired: stats.shots_fired_total || 0,
                    shots_on_target: stats.shots_on_target_total || 0,
                    clutch_1v1_attempts: (stats.v1_count || 0),
                    clutch_1v1_won: (stats.v1_wins || 0),
                    clutch_1v2_attempts: (stats.v2_count || 0),
                    clutch_1v2_won: (stats.v2_wins || 0),
                    entry_attempts: (stats.entry_count || 0),
                    entry_wins: (stats.entry_wins || 0),
                    utility_damage: stats.utility_damage || 0,
                    enemies_flashed: stats.enemies_flashed || 0,
                    flash_assists: stats.flash_assists || 0,
                    enemy_5ks: stats.enemy_5ks || 0,
                    enemy_4ks: stats.enemy_4ks || 0,
                    enemy_3ks: stats.enemy_3ks || 0,
                    enemy_2ks: stats.enemy_2ks || 0,
                    rating: stats.rating || 0,
                    kast: stats.kast || 0,
                    impact: stats.impact || 0,
                    rounds_played: roundsPlayed,
                    cash_earned: stats.cash_earned || 0,
                    equipment_value: stats.equipment_value || 0,
                    is_winner: isWinner
                };

                // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                await TournamentStatsRepository.upsertPlayerStats(updateData);

                // –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                await TournamentStatsRepository.recalculatePlayerMetrics(tournamentId, stats.user_id);
            }

            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            await this._recalculateAverageRatings(tournamentId);

            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º MVP —Ä–µ–π—Ç–∏–Ω–≥–∏
            await TournamentStatsRepository.calculateMVPRatings(tournamentId);

            console.log(`‚úÖ [TournamentStats] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);

            return { success: true, playersUpdated: playerStats.length };

        } catch (error) {
            console.error(`‚ùå [TournamentStats] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error);
            throw error;
        }
    }

    /**
     * üèÜ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MVP –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     * @param {number} tournamentId 
     */
    async finalizeTournament(tournamentId) {
        console.log(`üèÜ [TournamentStats] –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            // 1. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            await this._recalculateAverageRatings(tournamentId);

            // 2. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º MVP —Ä–µ–π—Ç–∏–Ω–≥–∏
            await TournamentStatsRepository.calculateMVPRatings(tournamentId);

            // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º MVP —Ç—É—Ä–Ω–∏—Ä–∞
            const mvp = await TournamentStatsRepository.determineMVP(tournamentId);

            // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (—Ç–æ–ø-3 –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
            const achievements = await TournamentStatsRepository.generateAchievements(tournamentId);

            console.log(`‚úÖ [TournamentStats] –¢—É—Ä–Ω–∏—Ä ${tournamentId} —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. MVP: ${mvp?.username || mvp?.user_id}`);

            return {
                success: true,
                mvp,
                achievements: achievements.length,
                message: 'Tournament statistics finalized successfully'
            };

        } catch (error) {
            console.error(`‚ùå [TournamentStats] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:`, error);
            throw error;
        }
    }

    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} tournamentId 
     */
    async getTournamentStats(tournamentId) {
        console.log(`üìä [TournamentStats] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
            const allStats = await TournamentStatsRepository.getAllTournamentStats(tournamentId);

            if (allStats.length === 0) {
                return {
                    hasStats: false,
                    message: 'No statistics available for this tournament'
                };
            }

            // –ù–∞—Ö–æ–¥–∏–º MVP
            const mvp = allStats.find(s => s.is_tournament_mvp) || allStats[0];

            // –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const leaders = {
                mvp: mvp,
                most_kills: allStats[0], // —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ mvp_points, –Ω–æ –º–æ–∂–µ–º –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                highest_adr: [...allStats].sort((a, b) => b.avg_adr - a.avg_adr)[0],
                best_hs: [...allStats].sort((a, b) => b.hs_percentage - a.hs_percentage)[0],
                clutch_king: [...allStats].sort((a, b) => b.clutch_1v1_won - a.clutch_1v1_won)[0],
                eco_master: [...allStats].sort((a, b) => b.total_money_earned - a.total_money_earned)[0],
                most_assists: [...allStats].sort((a, b) => b.total_assists - a.total_assists)[0],
                best_accuracy: [...allStats].sort((a, b) => b.accuracy - a.accuracy)[0]
            };

            // –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è most_kills
            leaders.most_kills = [...allStats].sort((a, b) => b.total_kills - a.total_kills)[0];

            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const summary = await TournamentStatsRepository.getTournamentSummary(tournamentId);

            return {
                hasStats: true,
                mvp,
                leaders,
                allStats,
                summary,
                totalPlayers: allStats.length
            };

        } catch (error) {
            console.error(`‚ùå [TournamentStats] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error);
            throw error;
        }
    }

    /**
     * üîÑ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
     * @param {number} tournamentId 
     */
    async recalculateTournamentStats(tournamentId) {
        console.log(`üîÑ [TournamentStats] –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            // 1. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await TournamentStatsRepository.clearTournamentStats(tournamentId);

            // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
            const matchesQuery = `
                SELECT DISTINCT id
                FROM matches
                WHERE tournament_id = $1
                AND (state = 'DONE' OR state = 'SCORE_DONE' OR status = 'completed')
                AND winner_team_id IS NOT NULL
                ORDER BY id ASC;
            `;

            const matchesResult = await pool.query(matchesQuery, [tournamentId]);
            const matches = matchesResult.rows;

            console.log(`üîÑ [TournamentStats] –ù–∞–π–¥–µ–Ω–æ ${matches.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π`);

            // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
            for (const match of matches) {
                await this.updateStatsAfterMatch(match.id, tournamentId);
            }

            // 4. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è (MVP –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
            await this.finalizeTournament(tournamentId);

            console.log(`‚úÖ [TournamentStats] –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

            return {
                success: true,
                matchesProcessed: matches.length,
                message: 'Tournament statistics recalculated successfully'
            };

        } catch (error) {
            console.error(`‚ùå [TournamentStats] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error);
            throw error;
        }
    }

    /**
     * üîç –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
     * @private
     */
    _isPlayerWinner(stats) {
        // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–∞—Ç—á–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —á—Ç–æ –≤ stats –µ—Å—Ç—å winner_team_id, team1_id, team2_id
        // –ò –º—ã –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ team1_players / team2_players
        // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        
        // TODO: –£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
        // –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ team –≤ player_match_stats
        
        return false; // –í—Ä–µ–º–µ–Ω–Ω–æ, –±—É–¥–µ—Ç —É–ª—É—á—à–µ–Ω–æ
    }

    /**
     * üî¢ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤ –≤ –º–∞—Ç—á–µ
     * @private
     */
    async _getMatchRounds(matchId) {
        try {
            const query = `
                SELECT 
                    COALESCE(
                        (SELECT SUM(score1 + score2) FROM UNNEST(maps_data) as m),
                        score1 + score2,
                        0
                    ) as total_rounds
                FROM matches
                WHERE id = $1;
            `;

            const result = await pool.query(query, [matchId]);
            return result.rows[0]?.total_rounds || 0;

        } catch (error) {
            console.error(`‚ùå [TournamentStats] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è rounds:`, error);
            return 0;
        }
    }

    /**
     * üìä –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
     * @private
     */
    async _recalculateAverageRatings(tournamentId) {
        try {
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π rating –∏ kast –∏–∑ player_match_stats
            const query = `
                UPDATE tournament_player_stats tps
                SET 
                    avg_rating = COALESCE((
                        SELECT AVG(pms.rating)
                        FROM player_match_stats pms
                        JOIN matches m ON pms.match_id = m.id
                        WHERE m.tournament_id = $1
                        AND pms.user_id = tps.user_id
                        AND pms.rating IS NOT NULL
                    ), 0),
                    avg_kast = COALESCE((
                        SELECT AVG(pms.kast)
                        FROM player_match_stats pms
                        JOIN matches m ON pms.match_id = m.id
                        WHERE m.tournament_id = $1
                        AND pms.user_id = tps.user_id
                        AND pms.kast IS NOT NULL
                    ), 0) * 100,  -- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    impact_rating = COALESCE((
                        SELECT AVG(pms.impact)
                        FROM player_match_stats pms
                        JOIN matches m ON pms.match_id = m.id
                        WHERE m.tournament_id = $1
                        AND pms.user_id = tps.user_id
                        AND pms.impact IS NOT NULL
                    ), 0),
                    updated_at = NOW()
                WHERE tps.tournament_id = $1;
            `;

            await pool.query(query, [tournamentId]);

            console.log(`‚úÖ [TournamentStats] –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        } catch (error) {
            console.error(`‚ùå [TournamentStats] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Å—Ä–µ–¥–Ω–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:`, error);
        }
    }
}

module.exports = new TournamentStatsService();

