// backend/services/tournament/AdminService.js

const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { sendNotification } = require('../../notifications');
const pool = require('../../db');
const { sendAdminInviteNotification, sendAdminInviteAcceptedNotification, sendAdminInviteRejectedNotification } = require('../../utils/systemNotifications');

class AdminService {
    /**
     * –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async requestAdmin(tournamentId, userId, username) {
        console.log(`üõ°Ô∏è AdminService: –ó–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
        if (tournament.created_by === userId) {
            throw new Error('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç—É—Ä–Ω–∏—Ä–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
        if (isAdmin) {
            throw new Error('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const existingRequest = await pool.query(
            'SELECT id, status FROM admin_requests WHERE tournament_id = $1 AND user_id = $2',
            [tournamentId, userId]
        );

        if (existingRequest.rows.length > 0 && existingRequest.rows[0].status === 'pending') {
            throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        if (existingRequest.rows.length > 0) {
            await pool.query(
                'UPDATE admin_requests SET status = $1, created_at = NOW(), updated_at = NOW() WHERE tournament_id = $2 AND user_id = $3',
                ['pending', tournamentId, userId]
            );
        } else {
            await pool.query(
                'INSERT INTO admin_requests (tournament_id, user_id, status) VALUES ($1, $2, $3)',
                [tournamentId, userId, 'pending']
            );
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ç—É—Ä–Ω–∏—Ä–∞
        const notificationMessage = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"`;
        await pool.query(
            'INSERT INTO notifications (user_id, message, type, tournament_id, requester_id) VALUES ($1, $2, $3, $4, $5)',
            [tournament.created_by, notificationMessage, 'admin_request', tournamentId, userId]
        );

        sendNotification(tournament.created_by, {
            user_id: tournament.created_by,
            message: notificationMessage,
            type: 'admin_request',
            tournament_id: tournamentId,
            requester_id: userId,
            created_at: new Date().toISOString()
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(tournamentId, userId, 'admin_request_sent', {
            requester_username: username
        });

        console.log('‚úÖ AdminService: –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }

    /**
     * –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
     */
    static async respondToAdminRequest(tournamentId, userId, username, { requesterId, action }) {
        console.log(`üõ°Ô∏è AdminService: –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}, –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ä–Ω–∏—Ä
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞)
        if (tournament.created_by !== userId) {
            throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        const requestResult = await pool.query(
            'SELECT * FROM admin_requests WHERE tournament_id = $1 AND user_id = $2 AND status = $3',
            [tournamentId, requesterId, 'pending']
        );

        if (requestResult.rows.length === 0) {
            throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ
        const requesterResult = await pool.query('SELECT username FROM users WHERE id = $1', [requesterId]);
        const requesterUsername = requesterResult.rows[0]?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

        if (action === 'accept') {
            // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å
            await pool.query(
                'INSERT INTO tournament_admins (tournament_id, user_id, assigned_by, assigned_at) VALUES ($1, $2, $3, NOW()) ON CONFLICT DO NOTHING',
                [tournamentId, requesterId, userId]
            );

            await pool.query(
                'UPDATE admin_requests SET status = $1, updated_at = NOW() WHERE tournament_id = $2 AND user_id = $3',
                ['accepted', tournamentId, requesterId]
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ
            const notificationMessage = `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}" –ø—Ä–∏–Ω—è—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º ${username}`;
            await pool.query(
                'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4)',
                [requesterId, notificationMessage, 'admin_request_accepted', tournamentId]
            );

            sendNotification(requesterId, {
                user_id: requesterId,
                message: notificationMessage,
                type: 'admin_request_accepted',
                tournament_id: tournamentId,
                created_at: new Date().toISOString()
            });

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'admin_request_accepted', {
                new_admin_id: requesterId,
                new_admin_username: requesterUsername
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
            await sendTournamentChatAnnouncement(
                tournamentId,
                `${requesterUsername} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"`
            );

        } else if (action === 'reject') {
            // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            await pool.query(
                'UPDATE admin_requests SET status = $1, updated_at = NOW() WHERE tournament_id = $2 AND user_id = $3',
                ['rejected', tournamentId, requesterId]
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ
            const notificationMessage = `–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}" –æ—Ç–∫–ª–æ–Ω—ë–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º ${username}`;
            await pool.query(
                'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4)',
                [requesterId, notificationMessage, 'admin_request_rejected', tournamentId]
            );

            sendNotification(requesterId, {
                user_id: requesterId,
                message: notificationMessage,
                type: 'admin_request_rejected',
                tournament_id: tournamentId,
                created_at: new Date().toISOString()
            });

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'admin_request_rejected', {
                rejected_user_id: requesterId,
                rejected_username: requesterUsername
            });
        }

        console.log(`‚úÖ AdminService: –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ ${action === 'accept' ? '–ø—Ä–∏–Ω—è—Ç' : '–æ—Ç–∫–ª–æ–Ω—ë–Ω'}`);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    static async removeAdmin(tournamentId, adminUserId, requesterId) {
        console.log(`üóëÔ∏è AdminService: –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${adminUserId} –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        await this._checkRemoveAdminAccess(tournamentId, requesterId, adminUserId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const adminCheck = await pool.query(
            'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
            [tournamentId, adminUserId]
        );

        if (adminCheck.rows.length === 0) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞');
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await pool.query(
            'DELETE FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
            [tournamentId, adminUserId]
        );

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const tournament = await TournamentRepository.getById(tournamentId);
        const removedAdmin = await pool.query('SELECT username FROM users WHERE id = $1', [adminUserId]);
        const removedUsername = removedAdmin.rows[0]?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        const notificationMessage = `–í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"`;
        await pool.query(
            'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4)',
            [adminUserId, notificationMessage, 'admin_removed', tournamentId]
        );

        sendNotification(adminUserId, {
            user_id: adminUserId,
            message: notificationMessage,
            type: 'admin_removed',
            tournament_id: tournamentId,
            created_at: new Date().toISOString()
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(tournamentId, requesterId, 'admin_removed', {
            removed_user_id: adminUserId,
            removed_username: removedUsername
        });

        console.log('‚úÖ AdminService: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    }

    /**
     * –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async inviteAdmin(tournamentId, inviterId, inviteeId) {
        console.log(`üõ°Ô∏è AdminService: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${inviteeId} –≤ —Ç—É—Ä–Ω–∏—Ä ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–≥–æ
        await this._checkInviteAdminAccess(tournamentId, inviterId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await pool.query(
            'SELECT id, username FROM users WHERE id = $1',
            [inviteeId]
        );

        if (userResult.rows.length === 0) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const invitee = userResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const existingAdmin = await pool.query(
            'SELECT id FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
            [tournamentId, inviteeId]
        );

        if (existingAdmin.rows.length > 0) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞');
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–≥–æ
        const tournament = await TournamentRepository.getById(tournamentId);
        const inviterResult = await pool.query('SELECT username FROM users WHERE id = $1', [inviterId]);
        const inviterUsername = inviterResult.rows[0]?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

        // üÜï –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${inviteeId} –≤ —Ç—É—Ä–Ω–∏—Ä ${tournamentId}...`);
        
        const existingInvitations = await pool.query(
            'SELECT id, status FROM admin_invitations WHERE tournament_id = $1 AND invitee_id = $2',
            [tournamentId, inviteeId]
        );

        if (existingInvitations.rows.length > 0) {
            console.log(`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ ${existingInvitations.rows.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, —É–¥–∞–ª—è–µ–º –∏—Ö...`);
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
            await pool.query(
                'DELETE FROM admin_invitations WHERE tournament_id = $1 AND invitee_id = $2',
                [tournamentId, inviteeId]
            );
            
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ`);
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const invitationResult = await pool.query(`
            INSERT INTO admin_invitations 
            (tournament_id, inviter_id, invitee_id, permissions, expires_at) 
            VALUES ($1, $2, $3, $4, NOW() + INTERVAL '7 days')
            RETURNING id
        `, [
            tournamentId,
            inviterId,
            inviteeId,
            JSON.stringify({
                manage_matches: true,
                manage_participants: true,
                invite_admins: false
            })
        ]);

        const invitationId = invitationResult.rows[0].id;

        // üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —á–∞—Ç –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            console.log(`üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${inviteeId}...`);
            await sendAdminInviteNotification(
                inviteeId, 
                tournament.name, 
                inviterUsername, 
                tournamentId, 
                invitationId
            );
            console.log(`‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —á–∞—Ç`);
        } catch (chatError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —á–∞—Ç:`, chatError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        const notificationMessage = `–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}". –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ 7 –¥–Ω–µ–π.`;
        await pool.query(
            'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4)',
            [inviteeId, notificationMessage, 'admin_invitation', tournamentId]
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        sendNotification(inviteeId, {
            user_id: inviteeId,
            message: notificationMessage,
            type: 'admin_invitation',
            tournament_id: tournamentId,
            created_at: new Date().toISOString()
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(tournamentId, inviterId, 'admin_invited', {
            invitee_id: inviteeId,
            invitee_username: invitee.username,
            invitation_id: invitationId,
            is_repeat_invitation: existingInvitations.rows.length > 0
        });

        console.log('‚úÖ AdminService: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return {
            message: `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${invitee.username}`,
            invitationId,
            isRepeatInvitation: existingInvitations.rows.length > 0
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getAdmins(tournamentId) {
        console.log(`üìã AdminService: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        const adminResult = await pool.query(`
            SELECT 
                ta.user_id,
                ta.permissions,
                ta.assigned_at,
                u.username,
                u.avatar_url,
                u.email
            FROM tournament_admins ta
            JOIN users u ON ta.user_id = u.id
            WHERE ta.tournament_id = $1
            ORDER BY ta.assigned_at ASC
        `, [tournamentId]);

        return adminResult.rows;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
     */
    static async getAdminInvitations(tournamentId) {
        console.log(`üìß AdminService: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        const invitationsResult = await pool.query(`
            SELECT 
                ai.*,
                u_inviter.username as inviter_username,
                u_invitee.username as invitee_username,
                u_invitee.avatar_url as invitee_avatar
            FROM admin_invitations ai
            JOIN users u_inviter ON ai.inviter_id = u_inviter.id
            JOIN users u_invitee ON ai.invitee_id = u_invitee.id
            WHERE ai.tournament_id = $1
            ORDER BY ai.created_at DESC
        `, [tournamentId]);

        return invitationsResult.rows;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
     * @private
     */
    static async _checkInviteAdminAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if (tournament.created_by !== userId) {
            throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @private
     */
    static async _checkRemoveAdminAccess(tournamentId, requesterId, adminUserId) {
        if (requesterId === adminUserId) {
            throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
        }

        await this._checkInviteAdminAccess(tournamentId, requesterId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    static async getAdminRequestStatus(tournamentId, userId) {
        console.log(`üìä AdminService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
        if (isAdmin) {
            return 'accepted';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        const requestResult = await pool.query(
            'SELECT status FROM admin_requests WHERE tournament_id = $1 AND user_id = $2 ORDER BY created_at DESC LIMIT 1',
            [tournamentId, userId]
        );
        
        if (requestResult.rows.length > 0) {
            return requestResult.rows[0].status;
        }
        
        return null;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
     */
    static async cleanupExpiredInvitations() {
        console.log(`üßπ AdminService: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`);
        
        const result = await pool.query(
            'UPDATE admin_invitations SET status = $1 WHERE status = $2 AND expires_at <= NOW()',
            ['expired', 'pending']
        );
        
        const expiredCount = result.rowCount;
        console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${expiredCount} –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π`);
        
        return {
            success: true,
            message: `–û—á–∏—â–µ–Ω–æ ${expiredCount} –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π`,
            expiredCount: expiredCount
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
     */
    static async getInvitationStats() {
        console.log(`üìà AdminService: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        const statsResult = await pool.query(`
            SELECT 
                status,
                COUNT(*) as count,
                COUNT(CASE WHEN expires_at <= NOW() THEN 1 END) as expired_count
            FROM admin_invitations 
            GROUP BY status
            ORDER BY status
        `);
        
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalResult = await pool.query('SELECT COUNT(*) as total FROM admin_invitations');
        const activeResult = await pool.query(`
            SELECT COUNT(*) as active 
            FROM admin_invitations 
            WHERE status = 'pending' AND expires_at > NOW()
        `);
        
        return {
            success: true,
            stats: {
                total: parseInt(totalResult.rows[0].total),
                active: parseInt(activeResult.rows[0].active),
                by_status: statsResult.rows.map(row => ({
                    status: row.status,
                    count: parseInt(row.count),
                    expired_count: parseInt(row.expired_count)
                }))
            }
        };
    }

    /**
     * –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    static async acceptAdminInvitation(tournamentId, userId) {
        console.log(`ü§ù AdminService: –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${userId} –≤ —Ç—É—Ä–Ω–∏—Ä ${tournamentId}`);

        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');

            // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            const invitationResult = await client.query(`
                SELECT ai.*, t.name as tournament_name, t.created_by, u.username as inviter_username
                FROM admin_invitations ai
                JOIN tournaments t ON ai.tournament_id = t.id
                JOIN users u ON ai.inviter_id = u.id
                WHERE ai.tournament_id = $1 
                AND ai.invitee_id = $2 
                AND ai.status = 'pending' 
                AND ai.expires_at > NOW()
            `, [tournamentId, userId]);

            if (invitationResult.rows.length === 0) {
                throw new Error('–ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ');
            }

            const invitation = invitationResult.rows[0];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            const existingAdmin = await client.query(
                'SELECT id FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [tournamentId, userId]
            );

            if (existingAdmin.rows.length === 0) {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
                await client.query(
                    'INSERT INTO tournament_admins (tournament_id, user_id, permissions, assigned_by, assigned_at) VALUES ($1, $2, $3, $4, NOW())',
                    [
                        tournamentId, 
                        userId, 
                        invitation.permissions || JSON.stringify({manage_matches: true, manage_participants: true, invite_admins: false}),
                        invitation.inviter_id
                    ]
                );
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            await client.query(
                'UPDATE admin_invitations SET status = $1, responded_at = NOW() WHERE id = $2',
                ['accepted', invitation.id]
            );

            await client.query('COMMIT');

            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await pool.query('SELECT username FROM users WHERE id = $1', [userId]);
            const username = user.rows[0]?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

            // üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç
            try {
                await sendAdminInviteAcceptedNotification(
                    invitation.inviter_id, 
                    username, 
                    invitation.tournament_name
                );
            } catch (chatError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤ —á–∞—Ç:`, chatError);
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ç—É—Ä–Ω–∏—Ä–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            const creatorNotification = `${username} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ "${invitation.tournament_name}"`;
            await pool.query(
                'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4)',
                [invitation.created_by, creatorNotification, 'admin_accepted', tournamentId]
            );

            sendNotification(invitation.created_by, {
                user_id: invitation.created_by,
                message: creatorNotification,
                type: 'admin_accepted',
                tournament_id: tournamentId,
                created_at: new Date().toISOString()
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
            await sendTournamentChatAnnouncement(
                tournamentId,
                `${username} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ "${invitation.tournament_name}"`
            );

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'admin_invitation_accepted', {
                admin_username: username,
                inviter_id: invitation.inviter_id,
                invitation_id: invitation.id
            });

            console.log('‚úÖ AdminService: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç–æ');
            return {
                message: '–í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞',
                tournament_name: invitation.tournament_name
            };

        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    static async declineAdminInvitation(tournamentId, userId) {
        console.log(`‚ùå AdminService: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${userId} –≤ —Ç—É—Ä–Ω–∏—Ä ${tournamentId}`);

        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const invitationResult = await pool.query(`
            SELECT ai.*, t.name as tournament_name, t.created_by, u.username as inviter_username
            FROM admin_invitations ai
            JOIN tournaments t ON ai.tournament_id = t.id
            JOIN users u ON ai.inviter_id = u.id
            WHERE ai.tournament_id = $1 
            AND ai.invitee_id = $2 
            AND ai.status = 'pending' 
            AND ai.expires_at > NOW()
        `, [tournamentId, userId]);

        if (invitationResult.rows.length === 0) {
            throw new Error('–ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ');
        }

        const invitation = invitationResult.rows[0];

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        await pool.query(
            'UPDATE admin_invitations SET status = $1, responded_at = NOW() WHERE id = $2',
            ['declined', invitation.id]
        );

        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–∫–ª–æ–Ω–∏–≤—à–µ–≥–æ
        const user = await pool.query('SELECT username FROM users WHERE id = $1', [userId]);
        const username = user.rows[0]?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

        // üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç
        try {
            await sendAdminInviteRejectedNotification(
                invitation.inviter_id, 
                username, 
                invitation.tournament_name
            );
        } catch (chatError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤ —á–∞—Ç:`, chatError);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ç—É—Ä–Ω–∏—Ä–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        const creatorNotification = `${username} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞ "${invitation.tournament_name}"`;
        await pool.query(
            'INSERT INTO notifications (user_id, message, type, tournament_id) VALUES ($1, $2, $3, $4)',
            [invitation.created_by, creatorNotification, 'admin_declined', tournamentId]
        );

        sendNotification(invitation.created_by, {
            user_id: invitation.created_by,
            message: creatorNotification,
            type: 'admin_declined',
            tournament_id: tournamentId,
            created_at: new Date().toISOString()
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(tournamentId, userId, 'admin_invitation_declined', {
            declined_username: username,
            invitation_id: invitation.id,
            inviter_id: invitation.inviter_id
        });

        console.log('‚úÖ AdminService: –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
        return {
            message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
            tournament_name: invitation.tournament_name
        };
    }
}

module.exports = AdminService; 