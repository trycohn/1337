// backend/services/tournament/MatchService.js

const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const MatchRepository = require('../../repositories/tournament/MatchRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { broadcastTournamentUpdate } = require('../../notifications');
const pool = require('../../db');
const FullMixService = require('./FullMixService');
const { sendSystemNotification } = require('../../utils/systemNotifications');

class MatchService {
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateMatchResult(tournamentId, resultData, userId) {
        console.log(`üèÜ MatchService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId}`);
        
        const { matchId, winner_team_id, score1, score2, maps } = resultData;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkMatchAccess(tournamentId, userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞
        const match = await MatchRepository.getById(matchId);
        if (!match || match.tournament_id !== tournamentId) {
            throw new Error('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç—É—Ä–Ω–∏—Ä—É');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
        const scoreChanged = match.score1 !== score1 || match.score2 !== score2;
        const mapsChanged = maps && Array.isArray(maps) && maps.length > 0;
        
        if (match.winner_team_id === winner_team_id && !scoreChanged && !mapsChanged) {
            throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–∞—Ö
        let mapsData = null;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥—Ä—ã
        const tournament = await TournamentRepository.getById(tournamentId);
        const isGameSupportingMaps = this._isGameSupportingMaps(tournament.game);
        
        if (Array.isArray(maps) && maps.length > 0 && isGameSupportingMaps) {
            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö –¥–ª—è –∏–≥—Ä—ã: ${tournament.game}`);
            mapsData = maps;
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
            if (maps.length > 1) {
                let team1Wins = 0;
                let team2Wins = 0;
                
                maps.forEach(map => {
                    if (parseInt(map.score1) > parseInt(map.score2)) {
                        team1Wins++;
                    } else if (parseInt(map.score2) > parseInt(map.score1)) {
                        team2Wins++;
                    }
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä—Ç
                resultData.score1 = team1Wins;
                resultData.score2 = team2Wins;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
                if (team1Wins > team2Wins) {
                    resultData.winner_team_id = match.team1_id;
                } else if (team2Wins > team1Wins) {
                    resultData.winner_team_id = match.team2_id;
                }
            }
        }

        // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
        const updateResult = await this._safeUpdateMatchResult(
            matchId, 
            resultData.winner_team_id, 
            resultData.score1, 
            resultData.score2, 
            mapsData, 
            userId
        );

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        try {
            const { broadcastToTournament } = require('../../socketio-server');
            broadcastToTournament(tournamentId, 'fullmix_match_updated', { tournamentId, matchId, round: match.round });
        } catch (_) {}
        broadcastTournamentUpdate(tournamentId, updatedTournament, 'updateMatchResult');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await this._sendMatchResultAnnouncement(match, resultData, tournament);

        // üÜï –î–õ–Ø FULL MIX SE/DE: –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–´–í–ê–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í
        await this._handleFullMixElimination(tournament, match, resultData.winner_team_id);

        // üÜï –î–õ–Ø FULL MIX SE/DE: –°–û–ó–î–ê–ù–ò–ï –°–ù–ê–ü–®–û–¢–ê –°–õ–ï–î–£–Æ–©–ï–ì–û –†–ê–£–ù–î–ê
        await this._createNextRoundSnapshotIfNeeded(tournament, match.round);

        console.log('‚úÖ MatchService: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
        return { 
            tournament: updatedTournament,
            ...updateResult
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)
     */
    static async updateSpecificMatchResult(matchId, resultData, userId) {
        console.log(`üéØ MatchService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ ${matchId}`);
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`, {
            winner_team_id: resultData.winner_team_id,
            winner: resultData.winner,
            score1: resultData.score1,
            score2: resultData.score2,
            maps_data: resultData.maps_data
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á –∏ –µ–≥–æ —Ç—É—Ä–Ω–∏—Ä
        const match = await MatchRepository.getById(matchId);
        if (!match) {
            throw new Error('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const tournamentId = match.tournament_id;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkMatchAccess(tournamentId, userId);

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º winner_team_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
        let finalWinnerTeamId = resultData.winner_team_id;
        
        if (!finalWinnerTeamId && resultData.winner && match.team1_id && match.team2_id) {
            if (resultData.winner === 'team1') {
                finalWinnerTeamId = match.team1_id;
            } else if (resultData.winner === 'team2') {
                finalWinnerTeamId = match.team2_id;
            }
            console.log(`üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω winner "${resultData.winner}" –≤ winner_team_id: ${finalWinnerTeamId}`);
        }

        console.log(`üèÜ –ò—Ç–æ–≥–æ–≤—ã–π winner_team_id: ${finalWinnerTeamId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
        const scoreChanged = match.score1 !== resultData.score1 || match.score2 !== resultData.score2;
        const mapsChanged = resultData.maps_data && Array.isArray(resultData.maps_data) && resultData.maps_data.length > 0;
        
        if (match.winner_team_id === finalWinnerTeamId && !scoreChanged && !mapsChanged) {
            throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
        }

        // üõ°Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò (–±—ã—Å—Ç—Ä–∞—è, –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
        const client = await pool.connect();
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            const matchWithLinks = await client.query(
                `SELECT m.*, t.format as tournament_format 
                 FROM matches m 
                 JOIN tournaments t ON m.tournament_id = t.id 
                 WHERE m.id = $1`,
                [matchId]
            );
            
            if (matchWithLinks.rows.length > 0) {
                await this._validateTournamentIntegrity(client, matchWithLinks.rows[0], finalWinnerTeamId, resultData.score1, resultData.score2);
            }
        } finally {
            client.release();
        }

        // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
        const updateResult = await this._safeUpdateMatchResult(
            matchId, 
            finalWinnerTeamId,  // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π winner_team_id
            resultData.score1, 
            resultData.score2, 
            resultData.maps_data, 
            userId
        );

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        try {
            const { broadcastToTournament } = require('../../socketio-server');
            broadcastToTournament(tournamentId, 'fullmix_match_updated', { tournamentId, matchId, round: match.round });
        } catch (_) {}
        broadcastTournamentUpdate(tournamentId, updatedTournament, 'updateSpecificMatchResult');

        // üìä –ù–û–í–û–ï v4.28.0: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞
        try {
            console.log(`üìä [MatchService] –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            const TournamentStatsService = require('./TournamentStatsService');
            await TournamentStatsService.updateStatsAfterMatch(matchId, tournamentId);
            console.log(`‚úÖ [MatchService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        } catch (statsError) {
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            console.error(`‚ö†Ô∏è [MatchService] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:`, statsError);
        }

        console.log('‚úÖ MatchService: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
        return { 
            tournament: updatedTournament,
            ...updateResult
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getMatches(tournamentId) {
        console.log(`üìã MatchService: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return await MatchRepository.getByTournamentId(tournamentId);
    }

    /**
     * üîÑ –ê–ª–∏–∞—Å –¥–ª—è getMatches (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
     */
    static async getMatchesByTournament(tournamentId) {
        console.log(`üîÑ MatchService: –ê–ª–∏–∞—Å getMatchesByTournament –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ getMatches –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return await this.getMatches(tournamentId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
     */
    static async getMatchById(matchId) {
        console.log(`üîç MatchService: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${matchId}`);
        return await MatchRepository.getById(matchId);
    }

    /**
     * üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
     * @param {number} matchId - ID –º–∞—Ç—á–∞
     * @param {Object} editData - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    static async editCompletedMatch(matchId, editData, userId) {
        console.log(`‚úèÔ∏è [MatchService] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞ ${matchId}`);
        console.log(`üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`, {
            maps_data: editData.maps_data?.length || 0,
            userId
        });

        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
            const matchResult = await client.query(
                `SELECT m.*, t.format as tournament_format, t.id as tournament_id
                 FROM matches m 
                 JOIN tournaments t ON m.tournament_id = t.id 
                 WHERE m.id = $1`,
                [matchId]
            );
            
            if (matchResult.rows.length === 0) {
                throw new Error('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            const match = matchResult.rows[0];
            console.log(`‚úÖ –ú–∞—Ç—á –Ω–∞–π–¥–µ–Ω: ${match.team1_id} vs ${match.team2_id}, —Å—Ç–∞—Ç—É—Å: ${match.status}`);
            
            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            await this._checkMatchAccess(match.tournament_id, userId);
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω
            if (match.status !== 'completed') {
                throw new Error('–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏');
            }
            
            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (!match.team1_id || !match.team2_id) {
                throw new Error('–ù–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–∞—Ç—á–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.');
            }
            
            // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å—ã–≥—Ä–∞–Ω—ã
            const hasPlayedNextMatches = await this._checkPlayedNextMatches(client, match);
            
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–µ–π:`, {
                hasPlayedNextMatches,
                next_match_id: match.next_match_id,
                loser_next_match_id: match.loser_next_match_id
            });
            
            // 6. –ï—Å–ª–∏ –µ—Å—Ç—å —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç
            if (hasPlayedNextMatches) {
                console.log(`‚ö†Ô∏è –ï—Å—Ç—å —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏. –†–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö.`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—ã—Ç–∞—é—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç
                if (editData.winner_team_id && editData.winner_team_id !== match.winner_team_id) {
                    throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–∞—Ç—á–∞, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ —Å—ã–≥—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏ —Å —É—á–∞—Å—Ç–∏–µ–º –∫–æ–º–∞–Ω–¥ –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç
                if (editData.maps_data && Array.isArray(editData.maps_data)) {
                    await client.query(
                        `UPDATE matches SET maps_data = $1 WHERE id = $2`,
                        [JSON.stringify(editData.maps_data), matchId]
                    );
                    
                    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç –¥–ª—è –º–∞—Ç—á–∞ ${matchId}`);
                }
            } else {
                // 7. –ï—Å–ª–∏ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–µ–π, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                console.log(`‚úÖ –ù–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–µ–π. –†–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.`);
                
                let finalWinnerId = editData.winner_team_id || match.winner_team_id;
                let finalScore1 = editData.score1 !== undefined ? editData.score1 : match.score1;
                let finalScore2 = editData.score2 !== undefined ? editData.score2 : match.score2;
                let mapsData = editData.maps_data || match.maps_data;
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç
                if (Array.isArray(mapsData) && mapsData.length > 1) {
                    let team1Wins = 0;
                    let team2Wins = 0;
                    
                    mapsData.forEach(map => {
                        const m1 = parseInt(map.score1 || map.team1_score || 0);
                        const m2 = parseInt(map.score2 || map.team2_score || 0);
                        if (m1 > m2) team1Wins++;
                        else if (m2 > m1) team2Wins++;
                    });
                    
                    finalScore1 = team1Wins;
                    finalScore2 = team2Wins;
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    if (team1Wins > team2Wins) finalWinnerId = match.team1_id;
                    else if (team2Wins > team1Wins) finalWinnerId = match.team2_id;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
                await client.query(
                    `UPDATE matches 
                     SET winner_team_id = $1, score1 = $2, score2 = $3, maps_data = $4
                     WHERE id = $5`,
                    [finalWinnerId, finalScore1, finalScore2, JSON.stringify(mapsData), matchId]
                );
                
                console.log(`‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω –º–∞—Ç—á ${matchId}: winner=${finalWinnerId}, score=${finalScore1}:${finalScore2}`);
                
                // 8. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
                if (finalWinnerId !== match.winner_team_id) {
                    await this._updateNextMatches(client, match, finalWinnerId);
                }
            }
            
            // 9. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(match.tournament_id, userId, 'match_edited', { 
                matchId, 
                hasPlayedNextMatches,
                editedFields: hasPlayedNextMatches ? ['maps_data'] : ['winner', 'score', 'maps_data']
            });
            
            await client.query('COMMIT');
            
            // 10. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç—á
            const updatedMatch = await MatchRepository.getById(matchId);
            
            // 11. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            broadcastTournamentUpdate(match.tournament_id, { matchId, updated: true }, 'matchEdited');
            
            console.log(`‚úÖ –ú–∞—Ç—á ${matchId} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω`);
            
            return {
                success: true,
                match: updatedMatch,
                limitedEdit: hasPlayedNextMatches,
                message: hasPlayedNextMatches 
                    ? '–ò–∑–º–µ–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ —Å—ã–≥—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏'
                    : '–ú–∞—Ç—á –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω'
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞ ${matchId}:`, error.message);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–µ–π
     * @private
     */
    static async _checkPlayedNextMatches(client, match) {
        const nextMatchIds = [];
        
        if (match.next_match_id) nextMatchIds.push(match.next_match_id);
        if (match.loser_next_match_id) nextMatchIds.push(match.loser_next_match_id);
        
        if (nextMatchIds.length === 0) {
            return false;
        }
        
        const result = await client.query(
            `SELECT id, status, winner_team_id 
             FROM matches 
             WHERE id = ANY($1::int[]) 
             AND status = 'completed' 
             AND winner_team_id IS NOT NULL`,
            [nextMatchIds]
        );
        
        return result.rows.length > 0;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
     * @private
     */
    static async _updateNextMatches(client, match, newWinnerId) {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è –º–∞—Ç—á–∞ ${match.id}, –Ω–æ–≤—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${newWinnerId}`);
        
        const oldWinnerId = match.winner_team_id;
        const loserId = oldWinnerId === match.team1_id ? match.team2_id : match.team1_id;
        const newLoserId = newWinnerId === match.team1_id ? match.team2_id : match.team1_id;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if (match.next_match_id) {
            await client.query(
                `UPDATE matches 
                 SET team1_id = CASE WHEN team1_id = $1 THEN $2 ELSE team1_id END,
                     team2_id = CASE WHEN team2_id = $1 THEN $2 ELSE team2_id END
                 WHERE id = $3 AND status != 'completed'`,
                [oldWinnerId, newWinnerId, match.next_match_id]
            );
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –º–∞—Ç—á –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: ${match.next_match_id}`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (–¥–ª—è Double Elimination)
        if (match.loser_next_match_id) {
            await client.query(
                `UPDATE matches 
                 SET team1_id = CASE WHEN team1_id = $1 THEN $2 ELSE team1_id END,
                     team2_id = CASE WHEN team2_id = $1 THEN $2 ELSE team2_id END
                 WHERE id = $3 AND status != 'completed'`,
                [loserId, newLoserId, match.loser_next_match_id]
            );
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –º–∞—Ç—á –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ: ${match.loser_next_match_id}`);
        }
    }

    /**
     * üî• –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ú–ê–¢–ß–ê (–ë–ï–ó –¢–ê–ô–ú–ê–£–¢–û–í)
     * @private
     */
    static async _safeUpdateMatchResult(matchId, winnerId, score1, score2, mapsData, userId) {
        console.log(`üîí [safeUpdateMatchResult] –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò –¥–ª—è –º–∞—Ç—á–∞ ${matchId}`);
        console.log(`   - Winner ID: ${winnerId}`);
        console.log(`   - Score: ${score1}:${score2}`);
        console.log(`   - User ID: ${userId}`);
        console.log(`   - Maps data:`, mapsData);
        
        const startTime = Date.now();
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            console.log(`üîÑ [safeUpdateMatchResult] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞`);
            
            // 1. –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            console.log(`üîç [safeUpdateMatchResult] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ ${matchId}...`);
            const matchResult = await client.query(
                `SELECT m.*, t.format as tournament_format 
                 FROM matches m 
                 JOIN tournaments t ON m.tournament_id = t.id 
                 WHERE m.id = $1`,
                [matchId]
            );
            
            if (matchResult.rows.length === 0) {
                throw new Error(`–ú–∞—Ç—á ${matchId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            const matchData = matchResult.rows[0];
            console.log(`‚úÖ [safeUpdateMatchResult] –ú–∞—Ç—á –ø–æ–ª—É—á–µ–Ω: ${matchData.team1_id} vs ${matchData.team2_id}`);
            console.log(`üîç [safeUpdateMatchResult] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–≤—è–∑–µ–π: next_match_id=${matchData.next_match_id}, loser_next_match_id=${matchData.loser_next_match_id}, round=${matchData.round}, match_number=${matchData.match_number}`);
            
            // üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ next_match_id null, –ø—Ä–æ–≤–µ—Ä–∏–º –≤ –±–∞–∑–µ –µ—â–µ —Ä–∞–∑
            if (!matchData.next_match_id) {
                console.log(`üîç [safeUpdateMatchResult] next_match_id = null, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –≤ –±–∞–∑–µ...`);
                const linkCheckResult = await client.query(
                    `SELECT m1.id, m1.round, m1.match_number, m1.next_match_id,
                            m2.id as target_match_id, m2.round as target_round, m2.match_number as target_match_number
                     FROM matches m1
                     LEFT JOIN matches m2 ON m1.next_match_id = m2.id
                     WHERE m1.id = $1`,
                    [matchId]
                );
                
                if (linkCheckResult.rows.length > 0) {
                    const linkInfo = linkCheckResult.rows[0];
                    console.log(`üîç [safeUpdateMatchResult] –°–≤—è–∑–∏ –º–∞—Ç—á–∞:`, {
                        match_id: linkInfo.id,
                        round: linkInfo.round,
                        match_number: linkInfo.match_number,
                        next_match_id: linkInfo.next_match_id,
                        target_exists: !!linkInfo.target_match_id,
                        target_round: linkInfo.target_round,
                        target_match_number: linkInfo.target_match_number
                    });
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º matchData –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω next_match_id
                    if (linkInfo.next_match_id && !matchData.next_match_id) {
                        matchData.next_match_id = linkInfo.next_match_id;
                        console.log(`üîÑ [safeUpdateMatchResult] –û–±–Ω–æ–≤–ª–µ–Ω next_match_id –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${linkInfo.next_match_id}`);
                    }
                }
            }

            // üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –¢–£–†–ù–ò–†–ù–û–ô –°–ï–¢–ö–ò
            await this._validateTournamentIntegrity(client, matchData, winnerId, score1, score2);
            
            // 2. –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
            console.log(`üíæ [safeUpdateMatchResult] –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ ${matchId}...`);
            const updateResult = await client.query(
                `UPDATE matches 
                 SET winner_team_id = $1, score1 = $2, score2 = $3, maps_data = $4
                 WHERE id = $5 AND (winner_team_id IS NULL OR winner_team_id != $1 OR score1 != $2 OR score2 != $3)
                 RETURNING *`,
                [winnerId, score1, score2, JSON.stringify(mapsData), matchId]
            );
            
            let matchWasUpdated = false;
            if (updateResult.rows.length === 0) {
                console.log(`‚ö†Ô∏è [safeUpdateMatchResult] –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥...`);
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ
                const currentMatchResult = await client.query(
                    'SELECT * FROM matches WHERE id = $1',
                    [matchId]
                );
                if (currentMatchResult.rows.length === 0) {
                    throw new Error(`–ú–∞—Ç—á ${matchId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
                }
                matchWasUpdated = false;
            } else {
                console.log(`‚úÖ [safeUpdateMatchResult] –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω`);
                matchWasUpdated = true;
            }
            
            // üéÆ FEEDBACK: –°–æ–∑–¥–∞—Ç—å pending feedback –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
            try {
                if (winnerId && matchData.team1_id && matchData.team2_id) {
                    const participantsResult = await client.query(`
                        SELECT DISTINCT ttm.user_id
                        FROM tournament_team_members ttm
                        WHERE ttm.team_id IN ($1, $2)
                    `, [matchData.team1_id, matchData.team2_id]);
                    
                    for (const participant of participantsResult.rows) {
                        await client.query(`
                            INSERT INTO match_feedback_pending (match_id, user_id)
                            VALUES ($1, $2)
                            ON CONFLICT (match_id, user_id) DO NOTHING
                        `, [matchId, participant.user_id]);
                    }
                    
                    console.log(`üìù [Match Feedback] –°–æ–∑–¥–∞–Ω–æ ${participantsResult.rows.length} pending feedback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–∞—Ç—á–∞ ${matchId}`);
                }
            } catch (feedbackError) {
                console.error('‚ö†Ô∏è [Match Feedback] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pending:', feedbackError);
                // –ù–µ –ø–∞–¥–∞–µ–º, —ç—Ç–æ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ
            }

            // 2.1. üÜï –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ BYE vs BYE –∏ –º–∞—Ç—á–µ–π –±–µ–∑ winner: —Å—Ç–∞—Ç—É—Å -> completed
            const shouldSoftComplete = (!winnerId) && (!matchData.team1_id && !matchData.team2_id);
            if ((winnerId || shouldSoftComplete) && matchData.status !== 'completed') {
                console.log(`üìù [safeUpdateMatchResult] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'completed' (winnerId=${winnerId || 'null'}, BYEvsBYE=${shouldSoftComplete})`);
                await client.query('UPDATE matches SET status = $1 WHERE id = $2', ['completed', matchId]);
                matchWasUpdated = true;
            }

            // 3. –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–°–ï–ì–î–ê –µ—Å–ª–∏ –µ—Å—Ç—å winner_team_id)
            let advancementResults = [];
            
            if (winnerId && matchData.next_match_id) {
                console.log(`üèÜ [safeUpdateMatchResult] –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ${winnerId} –≤ –º–∞—Ç—á ${matchData.next_match_id}...`);
                const advanceResult = await this._simpleAdvanceTeam(
                    winnerId, 
                    matchData.next_match_id, 
                    'winner',
                    client
                );
                advancementResults.push(advanceResult);
                
                if (advanceResult.advanced) {
                    console.log(`‚úÖ [safeUpdateMatchResult] –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç –≤ ${advanceResult.position} –º–∞—Ç—á–∞ ${advanceResult.targetMatchId}`);
                    if (advanceResult.isMatchReady) {
                        console.log(`üèÅ [safeUpdateMatchResult] –ú–∞—Ç—á ${advanceResult.targetMatchId} –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ! –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${advanceResult.matchDetails.team1_id} vs ${advanceResult.matchDetails.team2_id}`);
                    }
                } else {
                    console.log(`‚ùå [safeUpdateMatchResult] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: ${advanceResult.reason}`);
                }
            } else {
                if (!winnerId) {
                    console.log(`‚ö†Ô∏è [safeUpdateMatchResult] –ù–µ—Ç winner_team_id –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è`);
                } else if (!matchData.next_match_id) {
                    console.log(`‚ö†Ô∏è [safeUpdateMatchResult] –£ –º–∞—Ç—á–∞ ${matchId} –Ω–µ—Ç next_match_id (–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á)`);
                    // –ü—Ä–æ–≤–µ—Ä–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    const matchCheckResult = await client.query(
                        'SELECT next_match_id, round, match_number FROM matches WHERE id = $1',
                        [matchId]
                    );
                    if (matchCheckResult.rows.length > 0) {
                        const matchInfo = matchCheckResult.rows[0];
                        console.log(`üîç [safeUpdateMatchResult] –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞: —Ä–∞—É–Ω–¥ ${matchInfo.round}, –º–∞—Ç—á ‚Ññ${matchInfo.match_number}, next_match_id=${matchInfo.next_match_id}`);
                    }
                }
            }

            // 4. –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (–¥–ª—è double elimination)
            if (matchData.loser_next_match_id && winnerId) {
                const loserId = matchData.team1_id === winnerId ? matchData.team2_id : matchData.team1_id;
                console.log(`üíî [safeUpdateMatchResult] –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ ${loserId} –≤ –º–∞—Ç—á ${matchData.loser_next_match_id}...`);
                const loserAdvanceResult = await this._simpleAdvanceTeam(
                    loserId, 
                    matchData.loser_next_match_id, 
                    'loser',
                    client
                );
                advancementResults.push(loserAdvanceResult);
                
                if (loserAdvanceResult.advanced) {
                    console.log(`‚úÖ [safeUpdateMatchResult] –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç –≤ ${loserAdvanceResult.position} –º–∞—Ç—á–∞ ${loserAdvanceResult.targetMatchId}`);
                    if (loserAdvanceResult.isMatchReady) {
                        console.log(`üèÅ [safeUpdateMatchResult] –ú–∞—Ç—á ${loserAdvanceResult.targetMatchId} –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ! –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${loserAdvanceResult.matchDetails.team1_id} vs ${loserAdvanceResult.matchDetails.team2_id}`);
                    }
                } else {
                    console.log(`‚ùå [safeUpdateMatchResult] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ: ${loserAdvanceResult.reason}`);
                }
            }

            // 5. –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            console.log(`üìù [safeUpdateMatchResult] –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ...`);
            await logTournamentEvent(matchData.tournament_id, userId, 'match_completed', {
                match_id: matchId,
                winner_team_id: winnerId,
                score: `${score1}:${score2}`,
                maps_count: mapsData?.length || 0,
                match_updated: matchWasUpdated
            }, client);

            // 6. –ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await client.query('COMMIT');
            
            const duration = Date.now() - startTime;
            console.log(`üéâ [safeUpdateMatchResult] –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û –∑–∞ ${duration}ms`);
            
            // üõéÔ∏è –ü–û–°–õ–ï –ö–û–ú–ú–ò–¢–ê: –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—É–Ω–¥–∞ –≤ FULL MIX
            try {
                const roundNumber = matchData.round;
                const tournamentId = matchData.tournament_id;
                if (matchData.tournament_format === 'full_mix' && roundNumber) {
                    const isCompleted = await FullMixService.isRoundCompleted(tournamentId, roundNumber);
                    if (isCompleted) {
                        // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
                        const admins = await TournamentRepository.getAdmins(tournamentId);
                        const tInfo = await TournamentRepository.getById(tournamentId);
                        const recipients = new Set();
                        if (tInfo?.created_by) recipients.add(tInfo.created_by);
                        (admins || []).forEach(a => a?.user_id && recipients.add(a.user_id));

                        const message = `‚úÖ –†–∞—É–Ω–¥ ${roundNumber} –∑–∞–≤–µ—Ä—à–µ–Ω. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥.`;
                        const metadata = {
                            type: 'fullmix_round_completed',
                            round_number: roundNumber,
                            tournament_id: tournamentId,
                            action: 'generate_next_round'
                        };

                        // –õ–∏—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        for (const userId of recipients) {
                            await sendSystemNotification(userId, message, 'fullmix_round_completed', metadata);
                        }

                        // –ê–Ω–æ–Ω—Å –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
                        await sendTournamentChatAnnouncement(
                            tournamentId,
                            `‚úÖ –í—Å–µ –º–∞—Ç—á–∏ —Ä–∞—É–Ω–¥–∞ ${roundNumber} —Å—ã–≥—Ä–∞–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥.`
                        );

                        // –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        await broadcastTournamentUpdate(tournamentId, { event: 'fullmix_round_completed', round: roundNumber }, 'fullmix');
                    }
                }
            } catch (notifErr) {
                console.warn('‚ö†Ô∏è [safeUpdateMatchResult] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—É–Ω–¥–∞:', notifErr?.message || notifErr);
            }

            return {
                success: true,
                message: matchWasUpdated ? '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' : '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                duration: duration,
                updated: matchWasUpdated,
                advancementResults,
                advancementCount: advancementResults.filter(r => r.advanced).length
            };

        } catch (error) {
            console.log(`‚ùå [safeUpdateMatchResult] –û–®–ò–ë–ö–ê:`, error.message);
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üöÄ –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø –ö–û–ú–ê–ù–î–´ (–¥–ª—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
     * @private
     */
    static async _simpleAdvanceTeam(teamId, targetMatchId, advanceType, client) {
        console.log(`üöÄ [simpleAdvanceTeam] –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${teamId} –≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç—á ${targetMatchId} (${advanceType})`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –º–∞—Ç—á
            const targetMatchResult = await client.query(
                'SELECT id, team1_id, team2_id, round, match_number FROM matches WHERE id = $1',
                [targetMatchId]
            );
            
            if (targetMatchResult.rows.length === 0) {
                console.log(`‚ö†Ô∏è [simpleAdvanceTeam] –¶–µ–ª–µ–≤–æ–π –º–∞—Ç—á ${targetMatchId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return { advanced: false, reason: 'target_match_not_found' };
            }
            
            const targetMatch = targetMatchResult.rows[0];
            console.log(`üéØ [simpleAdvanceTeam] –¶–µ–ª–µ–≤–æ–π –º–∞—Ç—á: —Ä–∞—É–Ω–¥ ${targetMatch.round}, –º–∞—Ç—á ‚Ññ${targetMatch.match_number}`);
            console.log(`üéØ [simpleAdvanceTeam] –¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: team1_id=${targetMatch.team1_id}, team2_id=${targetMatch.team2_id}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤ –º–∞—Ç—á–µ
            if (targetMatch.team1_id === teamId || targetMatch.team2_id === teamId) {
                console.log(`‚úÖ [simpleAdvanceTeam] –ö–æ–º–∞–Ω–¥–∞ ${teamId} —É–∂–µ –≤ –º–∞—Ç—á–µ ${targetMatchId}`);
                return { advanced: false, reason: 'already_in_match' };
            }
            
            // üÜï –ù–û–í–ê–Ø –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            let updateField = null;
            let updateValue = teamId;
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            if (!targetMatch.team1_id) {
                updateField = 'team1_id';
                console.log(`üéØ [simpleAdvanceTeam] –°—Ç–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É ${teamId} –≤ –ø–æ–∑–∏—Ü–∏—é team1_id`);
            } else if (!targetMatch.team2_id) {
                updateField = 'team2_id';
                console.log(`üéØ [simpleAdvanceTeam] –°—Ç–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É ${teamId} –≤ –ø–æ–∑–∏—Ü–∏—é team2_id`);
            } else {
                console.log(`‚ö†Ô∏è [simpleAdvanceTeam] –û–±–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Ç—á–µ ${targetMatchId} —É–∂–µ –∑–∞–Ω—è—Ç—ã (team1: ${targetMatch.team1_id}, team2: ${targetMatch.team2_id})`);
                console.log(`ü§î [simpleAdvanceTeam] –≠—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ - –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`);
                return { advanced: false, reason: 'unexpected_match_full' };
            }
            
            // üîß –ê–¢–û–ú–ê–†–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
            const updateResult = await client.query(
                `UPDATE matches 
                 SET ${updateField} = $1
                 WHERE id = $2 AND ${updateField} IS NULL
                 RETURNING id, team1_id, team2_id, round, match_number`,
                [updateValue, targetMatchId]
            );
            
            if (updateResult.rows.length === 0) {
                console.log(`‚ö†Ô∏è [simpleAdvanceTeam] –ü–æ–∑–∏—Ü–∏—è ${updateField} —É–∂–µ –∑–∞–Ω—è—Ç–∞ –≤ –º–∞—Ç—á–µ ${targetMatchId} (race condition)`);
                return { advanced: false, reason: 'position_taken_race_condition' };
            }
            
            const updatedMatch = updateResult.rows[0];
            console.log(`‚úÖ [simpleAdvanceTeam] –ö–æ–º–∞–Ω–¥–∞ ${teamId} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏—é ${updateField} –º–∞—Ç—á–∞ ${targetMatchId}`);
            console.log(`‚úÖ [simpleAdvanceTeam] –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç—á: team1_id=${updatedMatch.team1_id}, team2_id=${updatedMatch.team2_id}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞
            const isMatchReady = updatedMatch.team1_id && updatedMatch.team2_id;
            if (isMatchReady) {
                console.log(`üèÅ [simpleAdvanceTeam] –ú–∞—Ç—á ${targetMatchId} —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ!`);
            } else {
                console.log(`‚è≥ [simpleAdvanceTeam] –ú–∞—Ç—á ${targetMatchId} –æ–∂–∏–¥–∞–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞`);
            }
            
            return {
                advanced: true,
                targetMatchId: targetMatchId,
                position: updateField,
                advanceType: advanceType,
                isMatchReady: isMatchReady,
                matchDetails: {
                    round: updatedMatch.round,
                    matchNumber: updatedMatch.match_number,
                    team1_id: updatedMatch.team1_id,
                    team2_id: updatedMatch.team2_id
                }
            };
            
        } catch (error) {
            console.error(`‚ùå [simpleAdvanceTeam] –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ${teamId}:`, error.message);
            return { advanced: false, reason: 'database_error', error: error.message };
        }
    }

    /**
     * üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –¢–£–†–ù–ò–†–ù–û–ô –°–ï–¢–ö–ò
     * –ó–∞–ø—Ä–µ—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞, –µ—Å–ª–∏ –ª—é–±–æ–π –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∂–µ —Å—ã–≥—Ä–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
     * @private
     */
    static async _validateTournamentIntegrity(client, matchData, winnerId, score1, score2) {
        console.log(`üõ°Ô∏è [validateTournamentIntegrity] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞—Ç—á–∞ ${matchData.id}`);
        
        const team1_id = matchData.team1_id;
        const team2_id = matchData.team2_id;
        const matchesToCheck = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (winner bracket)
        if (matchData.next_match_id) {
            matchesToCheck.push({
                match_id: matchData.next_match_id,
                type: 'winner_bracket',
                description: '—Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è'
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (loser bracket –≤ double elimination)
        if (matchData.loser_next_match_id) {
            matchesToCheck.push({
                match_id: matchData.loser_next_match_id,
                type: 'loser_bracket',
                description: '–º–∞—Ç—á –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (loser bracket)'
            });
        }
        
        if (matchesToCheck.length === 0) {
            console.log(`‚úÖ [validateTournamentIntegrity] –ù–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
            return;
        }
        
        for (const checkMatch of matchesToCheck) {
            console.log(`üîç [validateTournamentIntegrity] –ü—Ä–æ–≤–µ—Ä—è–µ–º ${checkMatch.description} (ID: ${checkMatch.match_id})`);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞
            const nextMatchResult = await client.query(
                `SELECT id, team1_id, team2_id, winner_team_id, score1, score2, 
                        round, match_number, status, maps_data
                 FROM matches 
                 WHERE id = $1`,
                [checkMatch.match_id]
            );
            
            if (nextMatchResult.rows.length === 0) {
                console.log(`‚ö†Ô∏è [validateTournamentIntegrity] –°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á ${checkMatch.match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                continue;
            }
            
            const nextMatch = nextMatchResult.rows[0];
            console.log(`üîç [validateTournamentIntegrity] –°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á: ${nextMatch.team1_id} vs ${nextMatch.team2_id}, —Å—Ç–∞—Ç—É—Å: ${nextMatch.status}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –Ω–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ
            const ourTeamsInNextMatch = [];
            if (nextMatch.team1_id === team1_id || nextMatch.team1_id === team2_id) {
                ourTeamsInNextMatch.push({ team_id: nextMatch.team1_id, position: 'team1' });
            }
            if (nextMatch.team2_id === team1_id || nextMatch.team2_id === team2_id) {
                ourTeamsInNextMatch.push({ team_id: nextMatch.team2_id, position: 'team2' });
            }
            
            if (ourTeamsInNextMatch.length === 0) {
                console.log(`‚úÖ [validateTournamentIntegrity] –ù–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –º–∞—Ç—á–µ ${checkMatch.match_id}`);
                continue;
            }
            
            console.log(`üéØ [validateTournamentIntegrity] –ù–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ:`, ourTeamsInNextMatch);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
            const isNextMatchCompleted = this._isMatchCompleted(nextMatch);
            
            if (isNextMatchCompleted) {
                // –°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω - –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
                const participantsInfo = ourTeamsInNextMatch.map(p => `–∫–æ–º–∞–Ω–¥–∞ ${p.team_id} (${p.position})`).join(', ');
                
                const errorMessage = `üö´ –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ ${matchData.id} (—Ä–∞—É–Ω–¥ ${matchData.round}, –º–∞—Ç—á ‚Ññ${matchData.match_number}), ` +
                    `—Ç–∞–∫ –∫–∞–∫ ${participantsInfo} —É–∂–µ —Å—ã–≥—Ä–∞–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ ${nextMatch.id} ` +
                    `(—Ä–∞—É–Ω–¥ ${nextMatch.round}, –º–∞—Ç—á ‚Ññ${nextMatch.match_number}). ` +
                    `–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—á–µ—Ç–æ–º ${nextMatch.score1}:${nextMatch.score2}`;
                
                console.log(`‚ùå [validateTournamentIntegrity] ${errorMessage}`);
                throw new Error(errorMessage);
            } else {
                console.log(`‚úÖ [validateTournamentIntegrity] –°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á ${checkMatch.match_id} –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ`);
            }
        }
        
        console.log(`‚úÖ [validateTournamentIntegrity] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ`);
    }
    
    /**
     * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—Ç—á–∞
     * @private
     */
    static _isMatchCompleted(match) {
        // –ú–∞—Ç—á —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –µ—Å–ª–∏:
        // 1. –ï—Å—Ç—å winner_team_id –ò–õ–ò
        // 2. –ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (score1 –∏ score2 –Ω–µ null –∏ –Ω–µ —Ä–∞–≤–Ω—ã 0:0) –ò–õ–ò
        // 3. –°—Ç–∞—Ç—É—Å completed/finished –ò–õ–ò
        // 4. –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        
        if (match.winner_team_id) {
            return true;
        }
        
        if (match.status === 'completed' || match.status === 'finished') {
            return true;
        }
        
        if (match.score1 !== null && match.score2 !== null && 
            !(match.score1 === 0 && match.score2 === 0)) {
            return true;
        }
        
        if (match.maps_data && Array.isArray(match.maps_data) && match.maps_data.length > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–∞—Ä—Ç–∞—Ö
            const hasMapResults = match.maps_data.some(map => 
                (parseInt(map.score1) || 0) > 0 || (parseInt(map.score2) || 0) > 0
            );
            if (hasMapResults) {
                return true;
            }
        }
        
        return false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∏–≥—Ä–∞ –∫–∞—Ä—Ç—ã
     * @private
     */
    static _isGameSupportingMaps(gameName) {
        if (!gameName) return false;
        
        return gameName === 'Counter-Strike 2' ||
               gameName === 'Counter Strike 2' ||
               gameName === 'CS2' ||
               gameName === 'cs2' ||
               gameName.toLowerCase().includes('counter') ||
               gameName.toLowerCase().includes('cs') ||
               gameName === 'Valorant' ||
               gameName === 'VALORANT' ||
               gameName.toLowerCase().includes('valorant') ||
               gameName.toLowerCase().includes('overwatch') ||
               gameName.toLowerCase().includes('dota') ||
               gameName.toLowerCase().includes('league');
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–∞—Ç—á–∞ –≤ —á–∞—Ç
     * @private
     */
    static async _sendMatchResultAnnouncement(match, resultData, tournament) {
        try {
            // üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥/—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            let team1Name, team2Name, winnerName;
            
            console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ —Ç–∏–ø–∞ "${tournament.participant_type}"`);
            
            if (tournament.participant_type === 'solo') {
                // –î–ª—è —Å–æ–ª–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–∑ tournament_participants
                const p1 = await pool.query('SELECT name, username FROM tournament_participants WHERE id = $1', [match.team1_id]);
                const p2 = await pool.query('SELECT name, username FROM tournament_participants WHERE id = $1', [match.team2_id]);
                
                team1Name = p1.rows[0]?.name || p1.rows[0]?.username || `–£—á–∞—Å—Ç–Ω–∏–∫ ${match.team1_id}`;
                team2Name = p2.rows[0]?.name || p2.rows[0]?.username || `–£—á–∞—Å—Ç–Ω–∏–∫ ${match.team2_id}`;
                
                console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: "${team1Name}" vs "${team2Name}"`);
            } else {
                // –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏–∑ tournament_teams
                const t1 = await pool.query('SELECT name FROM tournament_teams WHERE id = $1', [match.team1_id]);
                const t2 = await pool.query('SELECT name FROM tournament_teams WHERE id = $1', [match.team2_id]);
                
                team1Name = t1.rows[0]?.name || `–ö–æ–º–∞–Ω–¥–∞ ${match.team1_id}`;
                team2Name = t2.rows[0]?.name || `–ö–æ–º–∞–Ω–¥–∞ ${match.team2_id}`;
                
                console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: "${team1Name}" vs "${team2Name}"`);
            }
            
            // üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û–ë–ï–î–ò–¢–ï–õ–Ø
            if (resultData.winner_team_id) {
                if (resultData.winner_team_id === match.team1_id) {
                    winnerName = team1Name;
                } else if (resultData.winner_team_id === match.team2_id) {
                    winnerName = team2Name;
                } else {
                    console.warn('‚ö†Ô∏è winner_team_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–∏ —Å team1_id, –Ω–∏ —Å team2_id');
                    winnerName = null;
                }
            }
            
            // üÜï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
            const entityType = tournament.participant_type === 'solo' ? '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' : '–∫–æ–º–∞–Ω–¥';
            const matchType = tournament.participant_type === 'solo' ? '–ü–æ–µ–¥–∏–Ω–æ–∫' : '–ú–∞—Ç—á';
            
            const announcement = `${matchType} ${match.match_number || '‚Ññ' + match.id} –º–µ–∂–¥—É ${entityType} ${team1Name} –∏ ${team2Name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—á–µ—Ç–æ–º ${resultData.score1}:${resultData.score2}${winnerName ? `. –ü–æ–±–µ–¥–∏–ª: ${winnerName}` : ''}. –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ç–∫—É: /tournaments/${tournament.id}`;
            
            console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: "${announcement}"`);
            
            await sendTournamentChatAnnouncement(tournament.id, announcement);
            
            console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–∞—Ç—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–∞—Ç—á–∞:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–∞—Ç—á–∞–º–∏
     * @private
     */
    static async _checkMatchAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (!isAdmin) {
                throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π');
            }
        }
    }

    /**
     * üîÑ –ê–õ–ò–ê–°–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° MatchController
     */
    
    // –ê–ª–∏–∞—Å –¥–ª—è saveMatchResult (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MatchController)
    static async saveResult(matchId, resultData, userId) {
        console.log(`üíæ MatchService: –ê–ª–∏–∞—Å saveResult -> updateSpecificMatchResult –¥–ª—è –º–∞—Ç—á–∞ ${matchId}`);
        return await this.updateSpecificMatchResult(matchId, resultData, userId);
    }
    
    // –ê–ª–∏–∞—Å –¥–ª—è getMatches (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MatchController)
    static async getByTournamentId(tournamentId) {
        console.log(`üìã MatchService: –ê–ª–∏–∞—Å getByTournamentId -> getMatches –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return await this.getMatches(tournamentId);
    }
    
    // –ê–ª–∏–∞—Å –¥–ª—è getMatchById (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MatchController)
    static async getById(matchId) {
        console.log(`üîç MatchService: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${matchId} —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö`);
        return await MatchRepository.getByIdWithParticipants(matchId);
    }

    /**
     * üÜï –°–û–ó–î–ê–ù–ò–ï –°–ù–ê–ü–®–û–¢–ê –°–õ–ï–î–£–Æ–©–ï–ì–û –†–ê–£–ù–î–ê (FULL MIX SE/DE)
     * –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π —Ä–∞—É–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–Ω–∞–ø—à–æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
     * @private
     */
    static async _createNextRoundSnapshotIfNeeded(tournament, currentRound) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Full Mix SE/DE —Ç—É—Ä–Ω–∏—Ä–æ–º
            const isFullMix = tournament.format === 'full_mix' || 
                             (tournament.format === 'mix' && tournament.mix_type === 'full');
            const isSEorDE = tournament.bracket_type === 'single_elimination' || 
                            tournament.bracket_type === 'double_elimination';
            
            if (!isFullMix || !isSEorDE) {
                return; // –ù–µ Full Mix SE/DE - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            }
            
            console.log(`üîç [createNextRoundSnapshot] –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞ –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${currentRound + 1}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –í–°–ï –º–∞—Ç—á–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            const roundCheckResult = await pool.query(
                `SELECT COUNT(*)::int as total, 
                        COUNT(*) FILTER (WHERE winner_team_id IS NOT NULL)::int as completed
                 FROM matches 
                 WHERE tournament_id = $1 AND round = $2`,
                [tournament.id, currentRound]
            );
            
            const total = roundCheckResult.rows[0]?.total || 0;
            const completed = roundCheckResult.rows[0]?.completed || 0;
            
            if (total === 0 || completed < total) {
                console.log(`‚è≥ –†–∞—É–Ω–¥ ${currentRound} –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω (${completed}/${total})`);
                return; // –†–∞—É–Ω–¥ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
            }
            
            console.log(`‚úÖ –†–∞—É–Ω–¥ ${currentRound} –∑–∞–≤–µ—Ä—à–µ–Ω (${completed}/${total})`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–Ω–∞–ø—à–æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            const nextRound = currentRound + 1;
            const FullMixService = require('./FullMixService');
            const existingSnapshot = await FullMixService.getSnapshot(tournament.id, nextRound);
            
            if (existingSnapshot) {
                console.log(`‚ÑπÔ∏è –°–Ω–∞–ø—à–æ—Ç —Ä–∞—É–Ω–¥–∞ ${nextRound} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                return; // –°–Ω–∞–ø—à–æ—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Ç—á–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–µ—Ç–∫–µ)
            const nextRoundMatchesResult = await pool.query(
                `SELECT COUNT(*)::int as count FROM matches WHERE tournament_id = $1 AND round = $2`,
                [tournament.id, nextRound]
            );
            
            if (nextRoundMatchesResult.rows[0]?.count === 0) {
                console.log(`üèÅ –†–∞—É–Ω–¥ ${currentRound} –±—ã–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–º - –Ω–µ—Ç –º–∞—Ç—á–µ–π —Ä–∞—É–Ω–¥–∞ ${nextRound}`);
                return; // –≠—Ç–æ –±—ã–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–Ω–∞–ø—à–æ—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            const eliminated = await FullMixService.getEliminatedParticipants(tournament.id);
            
            const nextRoundSnapshot = {
                round: nextRound,
                teams: [], // –ü—É—Å—Ç—ã–µ —Å–æ—Å—Ç–∞–≤—ã - –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∏ —Ä–µ–¥—Ä–∞—Ñ—Ç–µ
                matches: [],
                standings: [],
                meta: {
                    is_se_de_bracket: true,
                    rosters_confirmed: false,
                    rosters_drafted: false,
                    eliminated: eliminated,
                    created_automatically: true,
                    previous_round_completed: currentRound
                }
            };
            
            await FullMixService.saveSnapshot(tournament.id, nextRound, nextRoundSnapshot);
            
            console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω —Å–Ω–∞–ø—à–æ—Ç –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${nextRound}`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∞–ø—à–æ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞:`, error);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        }
    }

    /**
     * üÜï –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–´–í–ê–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í –î–õ–Ø FULL MIX SE/DE
     * –ü—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –≤—Å–µ –µ—ë —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—ã–±—ã–≤–∞—é—Ç –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
     * @private
     */
    static async _handleFullMixElimination(tournament, match, winnerTeamId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Full Mix —Ç—É—Ä–Ω–∏—Ä–æ–º
            const isFullMix = tournament.format === 'full_mix' || 
                             (tournament.format === 'mix' && tournament.mix_type === 'full');
            
            if (!isFullMix) {
                return; // –ù–µ Full Mix - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–µ—Ç–∫–∏
            const isSEorDE = tournament.bracket_type === 'single_elimination' || 
                            tournament.bracket_type === 'double_elimination';
            
            if (!isSEorDE) {
                return; // –ù–µ SE/DE - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (Swiss –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ—é –ª–æ–≥–∏–∫—É)
            }
            
            console.log(`üè¥ [handleFullMixElimination] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—ã–≤–∞–Ω–∏—è –¥–ª—è Full Mix ${tournament.bracket_type}`);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à—É—é –∫–æ–º–∞–Ω–¥—É
            const loserTeamId = winnerTeamId === match.team1_id ? match.team2_id : match.team1_id;
            
            console.log(`üìä –ú–∞—Ç—á: ${match.id}, –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerTeamId}, –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: ${loserTeamId}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –º–∞—Ç—á –∏–∑ –≤–µ—Ä—Ö–Ω–µ–π –∏–ª–∏ –Ω–∏–∂–Ω–µ–π —Å–µ—Ç–∫–∏ (–¥–ª—è DE)
            let shouldEliminate = true;
            
            if (tournament.bracket_type === 'double_elimination') {
                // –í DE –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–∞—Ç—á–∞ loser_next_match_id
                // –ï—Å–ª–∏ –µ—Å—Ç—å - –∫–æ–º–∞–Ω–¥–∞ –∏–¥–µ—Ç –≤ –Ω–∏–∂–Ω—é—é —Å–µ—Ç–∫—É, –Ω–µ –≤—ã–±—ã–≤–∞–µ—Ç
                if (match.loser_next_match_id) {
                    console.log(`‚¨áÔ∏è –ö–æ–º–∞–Ω–¥–∞ ${loserTeamId} –∏–¥–µ—Ç –≤ –Ω–∏–∂–Ω—é—é —Å–µ—Ç–∫—É (–º–∞—Ç—á ${match.loser_next_match_id})`);
                    shouldEliminate = false;
                } else {
                    console.log(`üè¥ –ö–æ–º–∞–Ω–¥–∞ ${loserTeamId} –≤—ã–±—ã–≤–∞–µ—Ç (–º–∞—Ç—á –∏–∑ –Ω–∏–∂–Ω–µ–π —Å–µ—Ç–∫–∏ –∏–ª–∏ —Ñ–∏–Ω–∞–ª)`);
                }
            }
            
            if (!shouldEliminate) {
                return; // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–±—ã–≤–∞–µ—Ç, –∏–¥–µ—Ç –≤ –Ω–∏–∂–Ω—é—é —Å–µ—Ç–∫—É
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–π –∫–æ–º–∞–Ω–¥—ã
            const membersResult = await pool.query(
                `SELECT ttm.participant_id, ttm.user_id, tp.name
                 FROM tournament_team_members ttm
                 LEFT JOIN tournament_participants tp ON tp.id = ttm.participant_id
                 WHERE ttm.team_id = $1`,
                [loserTeamId]
            );
            
            const eliminatedMembers = membersResult.rows;
            
            console.log(`üë• –í—ã–±—ã–≤–∞–µ—Ç ${eliminatedMembers.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã ${loserTeamId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—ã–≤—à–∏—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞
            const snapshotResult = await pool.query(
                `SELECT id, snapshot FROM full_mix_snapshots 
                 WHERE tournament_id = $1 
                 ORDER BY round_number DESC 
                 LIMIT 1`,
                [tournament.id]
            );
            
            if (snapshotResult.rows.length > 0) {
                const currentSnapshot = snapshotResult.rows[0].snapshot;
                const currentEliminated = currentSnapshot?.meta?.eliminated || [];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –≤—ã–±—ã–≤—à–∏—Ö
                const newEliminated = eliminatedMembers.map(m => ({
                    participant_id: m.participant_id,
                    user_id: m.user_id,
                    name: m.name,
                    eliminated_in_round: match.round,
                    eliminated_in_match: match.id,
                    team_id: loserTeamId
                }));
                
                const updatedEliminated = [...currentEliminated, ...newEliminated];
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–Ω–∞–ø—à–æ—Ç
                const updatedSnapshot = {
                    ...currentSnapshot,
                    meta: {
                        ...currentSnapshot.meta,
                        eliminated: updatedEliminated
                    }
                };
                
                await pool.query(
                    `UPDATE full_mix_snapshots SET snapshot = $1 WHERE id = $2`,
                    [JSON.stringify(updatedSnapshot), snapshotResult.rows[0].id]
                );
                
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—ã–±—ã–≤—à–∏—Ö: –±—ã–ª–æ ${currentEliminated.length}, —Å—Ç–∞–ª–æ ${updatedEliminated.length}`);
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±—ã–≤–∞–Ω–∏—è:`, error);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        }
    }
}

module.exports = MatchService; 