// backend/services/tournament/MatchService.js

const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const MatchRepository = require('../../repositories/tournament/MatchRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { broadcastTournamentUpdate } = require('../../notifications');
const pool = require('../../db');

class MatchService {
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateMatchResult(tournamentId, resultData, userId) {
        console.log(`üèÜ MatchService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId}`);
        
        const { matchId, winner_team_id, score1, score2, maps } = resultData;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkMatchAccess(tournamentId, userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞
        const match = await MatchRepository.getById(matchId);
        if (!match || match.tournament_id !== tournamentId) {
            throw new Error('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç—É—Ä–Ω–∏—Ä—É');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
        const scoreChanged = match.score1 !== score1 || match.score2 !== score2;
        const mapsChanged = maps && Array.isArray(maps) && maps.length > 0;
        
        if (match.winner_team_id === winner_team_id && !scoreChanged && !mapsChanged) {
            throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–∞—Ö
        let mapsData = null;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥—Ä—ã
        const tournament = await TournamentRepository.getById(tournamentId);
        const isGameSupportingMaps = this._isGameSupportingMaps(tournament.game);
        
        if (Array.isArray(maps) && maps.length > 0 && isGameSupportingMaps) {
            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö –¥–ª—è –∏–≥—Ä—ã: ${tournament.game}`);
            mapsData = maps;
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
            if (maps.length > 1) {
                let team1Wins = 0;
                let team2Wins = 0;
                
                maps.forEach(map => {
                    if (parseInt(map.score1) > parseInt(map.score2)) {
                        team1Wins++;
                    } else if (parseInt(map.score2) > parseInt(map.score1)) {
                        team2Wins++;
                    }
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä—Ç
                resultData.score1 = team1Wins;
                resultData.score2 = team2Wins;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
                if (team1Wins > team2Wins) {
                    resultData.winner_team_id = match.team1_id;
                } else if (team2Wins > team1Wins) {
                    resultData.winner_team_id = match.team2_id;
                }
            }
        }

        // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
        const updateResult = await this._safeUpdateMatchResult(
            matchId, 
            resultData.winner_team_id, 
            resultData.score1, 
            resultData.score2, 
            mapsData, 
            userId
        );

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        broadcastTournamentUpdate(tournamentId, updatedTournament);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await this._sendMatchResultAnnouncement(match, resultData, tournament);

        console.log('‚úÖ MatchService: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
        return { 
            tournament: updatedTournament,
            ...updateResult
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)
     */
    static async updateSpecificMatchResult(matchId, resultData, userId) {
        console.log(`üéØ MatchService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ ${matchId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á –∏ –µ–≥–æ —Ç—É—Ä–Ω–∏—Ä
        const match = await MatchRepository.getById(matchId);
        if (!match) {
            throw new Error('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const tournamentId = match.tournament_id;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkMatchAccess(tournamentId, userId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
        const scoreChanged = match.score1 !== resultData.score1 || match.score2 !== resultData.score2;
        const mapsChanged = resultData.maps_data && Array.isArray(resultData.maps_data) && resultData.maps_data.length > 0;
        
        if (match.winner_team_id === resultData.winner_team_id && !scoreChanged && !mapsChanged) {
            throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
        }

        // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
        const updateResult = await this._safeUpdateMatchResult(
            matchId, 
            resultData.winner_team_id, 
            resultData.score1, 
            resultData.score2, 
            resultData.maps_data, 
            userId
        );

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        broadcastTournamentUpdate(tournamentId, updatedTournament);

        console.log('‚úÖ MatchService: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
        return { 
            tournament: updatedTournament,
            ...updateResult
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getMatches(tournamentId) {
        console.log(`üìã MatchService: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return await MatchRepository.getByTournamentId(tournamentId);
    }

    /**
     * üîÑ –ê–ª–∏–∞—Å –¥–ª—è getMatches (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
     */
    static async getMatchesByTournament(tournamentId) {
        console.log(`üîÑ MatchService: –ê–ª–∏–∞—Å getMatchesByTournament –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ getMatches –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return await this.getMatches(tournamentId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
     */
    static async getMatchById(matchId) {
        console.log(`üîç MatchService: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${matchId}`);
        return await MatchRepository.getById(matchId);
    }

    /**
     * üî• –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ú–ê–¢–ß–ê (–ë–ï–ó –¢–ê–ô–ú–ê–£–¢–û–í)
     * @private
     */
    static async _safeUpdateMatchResult(matchId, winnerId, score1, score2, mapsData, userId) {
        console.log(`üîí [safeUpdateMatchResult] –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò –¥–ª—è –º–∞—Ç—á–∞ ${matchId}`);
        console.log(`   - Winner ID: ${winnerId}`);
        console.log(`   - Score: ${score1}:${score2}`);
        console.log(`   - User ID: ${userId}`);
        console.log(`   - Maps data:`, mapsData);
        
        const startTime = Date.now();
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            console.log(`üîÑ [safeUpdateMatchResult] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞`);
            
            // 1. –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            console.log(`üîç [safeUpdateMatchResult] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ ${matchId}...`);
            const matchResult = await client.query(
                `SELECT m.*, t.format as tournament_format 
                 FROM matches m 
                 JOIN tournaments t ON m.tournament_id = t.id 
                 WHERE m.id = $1`,
                [matchId]
            );
            
            if (matchResult.rows.length === 0) {
                throw new Error(`–ú–∞—Ç—á ${matchId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            const matchData = matchResult.rows[0];
            console.log(`‚úÖ [safeUpdateMatchResult] –ú–∞—Ç—á –ø–æ–ª—É—á–µ–Ω: ${matchData.team1_id} vs ${matchData.team2_id}`);

            // 2. –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
            console.log(`üíæ [safeUpdateMatchResult] –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ ${matchId}...`);
            const updateResult = await client.query(
                `UPDATE matches 
                 SET winner_team_id = $1, score1 = $2, score2 = $3, maps_data = $4
                 WHERE id = $5 AND (winner_team_id IS NULL OR winner_team_id != $1 OR score1 != $2 OR score2 != $3)
                 RETURNING *`,
                [winnerId, score1, score2, JSON.stringify(mapsData), matchId]
            );
            
            if (updateResult.rows.length === 0) {
                console.log(`‚ö†Ô∏è [safeUpdateMatchResult] –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –º–∞—Ç—á —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω`);
                await client.query('ROLLBACK');
                return {
                    success: true,
                    message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è',
                    duration: Date.now() - startTime,
                    updated: false
                };
            }
            
            console.log(`‚úÖ [safeUpdateMatchResult] –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω`);

            // 3. –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
            let advancementResults = [];
            
            if (matchData.next_match_id && winnerId) {
                console.log(`üèÜ [safeUpdateMatchResult] –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ${winnerId}...`);
                const advanceResult = await this._simpleAdvanceTeam(
                    winnerId, 
                    matchData.next_match_id, 
                    'winner',
                    client
                );
                advancementResults.push(advanceResult);
            }

            // 4. –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (–¥–ª—è double elimination)
            if (matchData.loser_next_match_id && winnerId) {
                const loserId = matchData.team1_id === winnerId ? matchData.team2_id : matchData.team1_id;
                console.log(`üíî [safeUpdateMatchResult] –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ ${loserId}...`);
                const loserAdvanceResult = await this._simpleAdvanceTeam(
                    loserId, 
                    matchData.loser_next_match_id, 
                    'loser',
                    client
                );
                advancementResults.push(loserAdvanceResult);
            }

            // 5. –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            await client.query(
                `INSERT INTO tournament_events (tournament_id, user_id, event_type, event_data, created_at)
                 VALUES ($1, $2, $3, $4, NOW())`,
                [
                    matchData.tournament_id, 
                    userId, 
                    'match_completed',
                    JSON.stringify({
                        match_id: matchId,
                        winner_team_id: winnerId,
                        score: `${score1}:${score2}`,
                        maps_count: mapsData?.length || 0
                    })
                ]
            );

            // 6. –ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await client.query('COMMIT');
            
            const duration = Date.now() - startTime;
            console.log(`üéâ [safeUpdateMatchResult] –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û –∑–∞ ${duration}ms`);
            
            return {
                success: true,
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                duration: duration,
                updated: true,
                advancementResults
            };

        } catch (error) {
            console.log(`‚ùå [safeUpdateMatchResult] –û–®–ò–ë–ö–ê:`, error.message);
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üöÄ –£–ü–†–û–©–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø –ö–û–ú–ê–ù–î–´
     * @private
     */
    static async _simpleAdvanceTeam(teamId, targetMatchId, advanceType, client) {
        console.log(`üöÄ [simpleAdvanceTeam] –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –∫–æ–º–∞–Ω–¥—É ${teamId} –≤ –º–∞—Ç—á ${targetMatchId} (${advanceType})`);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –º–∞—Ç—á–∞
            const targetMatchResult = await client.query(
                'SELECT id, team1_id, team2_id FROM matches WHERE id = $1',
                [targetMatchId]
            );
            
            if (targetMatchResult.rows.length === 0) {
                console.log(`‚ö†Ô∏è [simpleAdvanceTeam] –¶–µ–ª–µ–≤–æ–π –º–∞—Ç—á ${targetMatchId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return { advanced: false, reason: 'target_match_not_found' };
            }
            
            const targetMatch = targetMatchResult.rows[0];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤ –º–∞—Ç—á–µ
            if (targetMatch.team1_id === teamId || targetMatch.team2_id === teamId) {
                console.log(`‚úÖ [simpleAdvanceTeam] –ö–æ–º–∞–Ω–¥–∞ ${teamId} —É–∂–µ –≤ –º–∞—Ç—á–µ ${targetMatchId}`);
                return { advanced: false, reason: 'already_in_match' };
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            let updateField = null;
            if (!targetMatch.team1_id) {
                updateField = 'team1_id';
            } else if (!targetMatch.team2_id) {
                updateField = 'team2_id';
            } else {
                console.log(`‚ö†Ô∏è [simpleAdvanceTeam] –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Ç—á–µ ${targetMatchId} –∑–∞–Ω—è—Ç—ã`);
                return { advanced: false, reason: 'match_full' };
            }
            
            // –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            const updateResult = await client.query(
                `UPDATE matches 
                 SET ${updateField} = $1
                 WHERE id = $2 AND ${updateField} IS NULL
                 RETURNING *`,
                [teamId, targetMatchId]
            );
            
            if (updateResult.rows.length === 0) {
                console.log(`‚ö†Ô∏è [simpleAdvanceTeam] –ü–æ–∑–∏—Ü–∏—è ${updateField} —É–∂–µ –∑–∞–Ω—è—Ç–∞ –≤ –º–∞—Ç—á–µ ${targetMatchId}`);
                return { advanced: false, reason: 'position_taken' };
            }
            
            console.log(`‚úÖ [simpleAdvanceTeam] –ö–æ–º–∞–Ω–¥–∞ ${teamId} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏—é ${updateField} –º–∞—Ç—á–∞ ${targetMatchId}`);
            
            return {
                advanced: true,
                targetMatchId: targetMatchId,
                position: updateField,
                advanceType: advanceType
            };
            
        } catch (error) {
            console.error(`‚ùå [simpleAdvanceTeam] –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ${teamId}:`, error.message);
            return { advanced: false, reason: 'error', error: error.message };
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∏–≥—Ä–∞ –∫–∞—Ä—Ç—ã
     * @private
     */
    static _isGameSupportingMaps(gameName) {
        if (!gameName) return false;
        
        return gameName === 'Counter-Strike 2' ||
               gameName === 'Counter Strike 2' ||
               gameName === 'CS2' ||
               gameName === 'cs2' ||
               gameName.toLowerCase().includes('counter') ||
               gameName.toLowerCase().includes('cs') ||
               gameName === 'Valorant' ||
               gameName === 'VALORANT' ||
               gameName.toLowerCase().includes('valorant') ||
               gameName.toLowerCase().includes('overwatch') ||
               gameName.toLowerCase().includes('dota') ||
               gameName.toLowerCase().includes('league');
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–∞—Ç—á–∞ –≤ —á–∞—Ç
     * @private
     */
    static async _sendMatchResultAnnouncement(match, resultData, tournament) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥/—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            let team1Name, team2Name;
            
            if (tournament.participant_type === 'solo') {
                const p1 = await pool.query('SELECT name FROM tournament_participants WHERE id=$1', [match.team1_id]);
                team1Name = p1.rows[0]?.name;
                const p2 = await pool.query('SELECT name FROM tournament_participants WHERE id=$1', [match.team2_id]);
                team2Name = p2.rows[0]?.name;
            } else {
                const t1 = await pool.query('SELECT name FROM tournament_teams WHERE id=$1', [match.team1_id]);
                team1Name = t1.rows[0]?.name;
                const t2 = await pool.query('SELECT name FROM tournament_teams WHERE id=$1', [match.team2_id]);
                team2Name = t2.rows[0]?.name;
            }
            
            const winName = resultData.winner_team_id ? 
                (resultData.winner_team_id === match.team1_id ? team1Name : team2Name) : '';
            
            const announcement = `–ú–∞—Ç—á ${match.match_number} ${team1Name} vs ${team2Name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—á–µ—Ç–æ–º ${resultData.score1}:${resultData.score2}${winName ? `, –ø–æ–±–µ–¥–∏–ª ${winName}` : ''}. –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ç–∫—É: /tournaments/${tournament.id}`;
            
            await sendTournamentChatAnnouncement(tournament.id, announcement);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–∞—Ç—á–∞:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–∞—Ç—á–∞–º–∏
     * @private
     */
    static async _checkMatchAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (!isAdmin) {
                throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π');
            }
        }
    }

    /**
     * üîÑ –ê–õ–ò–ê–°–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° MatchController
     */
    
    // –ê–ª–∏–∞—Å –¥–ª—è saveMatchResult (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MatchController)
    static async saveResult(matchId, resultData, userId) {
        console.log(`üíæ MatchService: –ê–ª–∏–∞—Å saveResult -> updateSpecificMatchResult –¥–ª—è –º–∞—Ç—á–∞ ${matchId}`);
        return await this.updateSpecificMatchResult(matchId, resultData, userId);
    }
    
    // –ê–ª–∏–∞—Å –¥–ª—è getMatches (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MatchController)
    static async getByTournamentId(tournamentId) {
        console.log(`üìã MatchService: –ê–ª–∏–∞—Å getByTournamentId -> getMatches –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return await this.getMatches(tournamentId);
    }
    
    // –ê–ª–∏–∞—Å –¥–ª—è getMatchById (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MatchController)
    static async getById(matchId) {
        console.log(`üîç MatchService: –ê–ª–∏–∞—Å getById -> getMatchById –¥–ª—è –º–∞—Ç—á–∞ ${matchId}`);
        return await this.getMatchById(matchId);
    }
}

module.exports = MatchService; 