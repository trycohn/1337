// backend/services/tournament/MatchService.js

const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const MatchRepository = require('../../repositories/tournament/MatchRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { broadcastTournamentUpdate } = require('../../notifications');
const pool = require('../../db');

class MatchService {
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateMatchResult(tournamentId, resultData, userId) {
        console.log(`üèÜ MatchService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId}`);
        
        const { matchId, winner_team_id, score1, score2, maps } = resultData;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkMatchAccess(tournamentId, userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞
        const match = await MatchRepository.getById(matchId);
        if (!match || match.tournament_id !== tournamentId) {
            throw new Error('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç—É—Ä–Ω–∏—Ä—É');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
        const scoreChanged = match.score1 !== score1 || match.score2 !== score2;
        const mapsChanged = maps && Array.isArray(maps) && maps.length > 0;
        
        if (match.winner_team_id === winner_team_id && !scoreChanged && !mapsChanged) {
            throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–∞—Ö
        let mapsData = null;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥—Ä—ã
        const tournament = await TournamentRepository.getById(tournamentId);
        const isGameSupportingMaps = this._isGameSupportingMaps(tournament.game);
        
        if (Array.isArray(maps) && maps.length > 0 && isGameSupportingMaps) {
            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∞—Ö –¥–ª—è –∏–≥—Ä—ã: ${tournament.game}`);
            mapsData = maps;
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
            if (maps.length > 1) {
                let team1Wins = 0;
                let team2Wins = 0;
                
                maps.forEach(map => {
                    if (parseInt(map.score1) > parseInt(map.score2)) {
                        team1Wins++;
                    } else if (parseInt(map.score2) > parseInt(map.score1)) {
                        team2Wins++;
                    }
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ä—Ç
                resultData.score1 = team1Wins;
                resultData.score2 = team2Wins;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
                if (team1Wins > team2Wins) {
                    resultData.winner_team_id = match.team1_id;
                } else if (team2Wins > team1Wins) {
                    resultData.winner_team_id = match.team2_id;
                }
            }
        }

        // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
        const updateResult = await this._safeUpdateMatchResult(
            matchId, 
            resultData.winner_team_id, 
            resultData.score1, 
            resultData.score2, 
            mapsData, 
            userId
        );

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        broadcastTournamentUpdate(tournamentId, updatedTournament);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
        await this._sendMatchResultAnnouncement(match, resultData, tournament);

        console.log('‚úÖ MatchService: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
        return { 
            tournament: updatedTournament,
            ...updateResult
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)
     */
    static async updateSpecificMatchResult(matchId, resultData, userId) {
        console.log(`üéØ MatchService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ ${matchId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á –∏ –µ–≥–æ —Ç—É—Ä–Ω–∏—Ä
        const match = await MatchRepository.getById(matchId);
        if (!match) {
            throw new Error('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const tournamentId = match.tournament_id;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        await this._checkMatchAccess(tournamentId, userId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
        const scoreChanged = match.score1 !== resultData.score1 || match.score2 !== resultData.score2;
        const mapsChanged = resultData.maps_data && Array.isArray(resultData.maps_data) && resultData.maps_data.length > 0;
        
        if (match.winner_team_id === resultData.winner_team_id && !scoreChanged && !mapsChanged) {
            throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
        }

        // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
        const updateResult = await this._safeUpdateMatchResult(
            matchId, 
            resultData.winner_team_id, 
            resultData.score1, 
            resultData.score2, 
            resultData.maps_data, 
            userId
        );

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
        const updatedTournament = await TournamentRepository.getByIdWithCreator(tournamentId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        broadcastTournamentUpdate(tournamentId, updatedTournament);

        console.log('‚úÖ MatchService: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
        return { 
            tournament: updatedTournament,
            ...updateResult
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getMatches(tournamentId) {
        console.log(`üìã MatchService: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return await MatchRepository.getByTournamentId(tournamentId);
    }

    /**
     * üîÑ –ê–ª–∏–∞—Å –¥–ª—è getMatches (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
     */
    static async getMatchesByTournament(tournamentId) {
        console.log(`üîÑ MatchService: –ê–ª–∏–∞—Å getMatchesByTournament –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ getMatches –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return await this.getMatches(tournamentId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
     */
    static async getMatchById(matchId) {
        console.log(`üîç MatchService: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${matchId}`);
        return await MatchRepository.getById(matchId);
    }

    /**
     * üî• –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ú–ê–¢–ß–ê –° –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò
     * @private
     */
    static async _safeUpdateMatchResult(matchId, winnerId, score1, score2, mapsData, userId) {
        console.log(`üîí [safeUpdateMatchResult] –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò –¥–ª—è –º–∞—Ç—á–∞ ${matchId}`);
        console.log(`   - Winner ID: ${winnerId}`);
        console.log(`   - Score: ${score1}:${score2}`);
        console.log(`   - User ID: ${userId}`);
        console.log(`   - Maps data:`, mapsData);
        
        const startTime = Date.now();
        const client = await pool.connect();
        
        try {
            console.log(`üîÑ [safeUpdateMatchResult] –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...`);
            await client.query('BEGIN');
            
            // 1. –ü–æ–ª—É—á–∞–µ–º –∏ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ç—á —Å –¢–ê–ô–ú–ê–£–¢–û–ú
            console.log(`üîç [safeUpdateMatchResult] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ ${matchId} —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π...`);
            
            let matchData;
            try {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (5 —Å–µ–∫—É–Ω–¥)
                await client.query('SET statement_timeout = 5000');
                
                const matchResult = await client.query(
                    'SELECT m.*, t.format as tournament_format FROM matches m JOIN tournaments t ON m.tournament_id = t.id WHERE m.id = $1 FOR UPDATE',
                    [matchId]
                );
                
                if (matchResult.rows.length === 0) {
                    throw new Error(`–ú–∞—Ç—á ${matchId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
                
                matchData = matchResult.rows[0];
                console.log(`‚úÖ [safeUpdateMatchResult] –ú–∞—Ç—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
                
            } catch (lockError) {
                console.log(`‚ö†Ô∏è [safeUpdateMatchResult] –û–®–ò–ë–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò: ${lockError.message}`);
                
                // –ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –±–µ–∑ FOR UPDATE
                const matchResult = await client.query(
                    'SELECT m.*, t.format as tournament_format FROM matches m JOIN tournaments t ON m.tournament_id = t.id WHERE m.id = $1',
                    [matchId]
                );
                
                if (matchResult.rows.length === 0) {
                    throw new Error(`–ú–∞—Ç—á ${matchId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
                
                matchData = matchResult.rows[0];
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            await client.query('SET statement_timeout = 0');

            // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
            console.log(`üíæ [safeUpdateMatchResult] –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ ${matchId}...`);
            
            await client.query(
                'UPDATE matches SET winner_team_id = $1, score1 = $2, score2 = $3, maps_data = $4 WHERE id = $5',
                [winnerId, score1, score2, JSON.stringify(mapsData), matchId]
            );
            
            console.log(`‚úÖ [safeUpdateMatchResult] –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω`);

            // 3. –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
            let advancementResult = null;
            if (matchData.next_match_id) {
                console.log(`üèÜ [safeUpdateMatchResult] –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ${winnerId} –≤ –º–∞—Ç—á ${matchData.next_match_id}...`);
                advancementResult = await this._safeAdvanceWinner(matchId, winnerId, client);
                console.log(`‚úÖ [safeUpdateMatchResult] –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç`);
            }

            // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (–¥–ª—è double elimination)
            let loserAdvancementResult = null;
            const loserId = matchData.team1_id === winnerId ? matchData.team2_id : matchData.team1_id;
            if (matchData.loser_next_match_id) {
                console.log(`üíî [safeUpdateMatchResult] –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ ${loserId} –≤ –º–∞—Ç—á ${matchData.loser_next_match_id}...`);
                loserAdvancementResult = await this._safeAdvanceLoser(matchId, loserId, client);
                console.log(`‚úÖ [safeUpdateMatchResult] –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç`);
            }

            // 5. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            console.log(`üìù [safeUpdateMatchResult] –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ...`);
            await logTournamentEvent(matchData.tournament_id, userId, 'match_completed', {
                match_id: matchId,
                winner_team_id: winnerId,
                score: `${score1}:${score2}`,
                maps_count: mapsData?.length || 0
            }, client);

            // 6. –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            console.log(`‚úÖ [safeUpdateMatchResult] –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...`);
            await client.query('COMMIT');
            
            const duration = Date.now() - startTime;
            console.log(`üéâ [safeUpdateMatchResult] –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û –∑–∞ ${duration}ms`);
            
            return {
                success: true,
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                duration: duration,
                advancementResult,
                loserAdvancementResult
            };

        } catch (error) {
            console.log(`‚ùå [safeUpdateMatchResult] –û–®–ò–ë–ö–ê:`, error.message);
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üî• –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï –ü–û–ë–ï–î–ò–¢–ï–õ–Ø
     * @private
     */
    static async _safeAdvanceWinner(matchId, winnerId, client = pool) {
        const startTime = Date.now();
        console.log(`üîß [safeAdvanceWinner] –ù–ê–ß–ê–õ–û: –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ${winnerId} –∏–∑ –º–∞—Ç—á–∞ ${matchId}`);
        
        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            const matchResult = await client.query(
                'SELECT * FROM matches WHERE id = $1 FOR UPDATE',
                [matchId]
            );
            
            if (matchResult.rows.length === 0) {
                throw new Error(`–ú–∞—Ç—á ${matchId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            const match = matchResult.rows[0];
            console.log(`‚úÖ [safeAdvanceWinner] –ú–∞—Ç—á –ø–æ–ª—É—á–µ–Ω, next_match_id: ${match.next_match_id}`);
            
            // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –º–∞—Ç—á–∞
            if (![match.team1_id, match.team2_id].includes(winnerId)) {
                throw new Error(`–ö–æ–º–∞–Ω–¥–∞ ${winnerId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –º–∞—Ç—á–∞ ${matchId}`);
            }
            
            // 3. –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞ - –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if (!match.next_match_id) {
                console.log(`‚úÖ [safeAdvanceWinner] –ú–∞—Ç—á ${matchId} –Ω–µ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞ (—Ñ–∏–Ω–∞–ª?)`);
                return { advanced: false, reason: 'no_next_match' };
            }
            
            // 4. –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            console.log(`üîç [safeAdvanceWinner] –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á ${match.next_match_id}...`);
            const nextMatchResult = await client.query(
                'SELECT * FROM matches WHERE id = $1 FOR UPDATE',
                [match.next_match_id]
            );
            
            if (nextMatchResult.rows.length === 0) {
                throw new Error(`–°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á ${match.next_match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            const nextMatch = nextMatchResult.rows[0];
            console.log(`üîß [safeAdvanceWinner] –°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á ${nextMatch.id}: team1=${nextMatch.team1_id}, team2=${nextMatch.team2_id}`);
            
            // 5. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ
            let updateField = null;
            
            if (!nextMatch.team1_id) {
                updateField = 'team1_id';
                console.log(`üìç [safeAdvanceWinner] –ù–∞–π–¥–µ–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: team1_id`);
            } else if (!nextMatch.team2_id) {
                updateField = 'team2_id';
                console.log(`üìç [safeAdvanceWinner] –ù–∞–π–¥–µ–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: team2_id`);
            } else {
                // 6. –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–Ω—è—Ç—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —É–∂–µ –Ω–∞—à –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç–∞–º
                if (nextMatch.team1_id === winnerId || nextMatch.team2_id === winnerId) {
                    console.log(`‚úÖ [safeAdvanceWinner] –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ${winnerId} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–∞—Ç—á–µ ${nextMatch.id} (team1=${nextMatch.team1_id}, team2=${nextMatch.team2_id})`);
                    return { advanced: false, reason: 'already_advanced' };
                } else {
                    // üÜï –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ç–∫–∏
                    console.log(`‚ùå [safeAdvanceWinner] –ö–û–ù–§–õ–ò–ö–¢ –°–¢–†–£–ö–¢–£–†–´ –°–ï–¢–ö–ò: –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–Ω—è—Ç—ã (team1=${nextMatch.team1_id}, team2=${nextMatch.team2_id}), –Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ${winnerId} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–∞—Ç—á–µ ${nextMatch.id}`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π –≤–µ–¥—É—Ç –≤ —ç—Ç–æ—Ç –º–∞—Ç—á
                    const incomingMatchesResult = await client.query(
                        'SELECT COUNT(*) as count FROM matches WHERE next_match_id = $1 AND tournament_id = $2',
                        [nextMatch.id, match.tournament_id]
                    );
                    
                    const incomingCount = parseInt(incomingMatchesResult.rows[0].count);
                    console.log(`üîç [safeAdvanceWinner] –í –º–∞—Ç—á ${nextMatch.id} –≤–µ–¥—É—Ç ${incomingCount} –º–∞—Ç—á–µ–π`);
                    
                    if (incomingCount > 2) {
                        // –ü—Ä–æ–±–ª–µ–º–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ç–∫–∏ - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π
                        throw new Error(
                            `–ü–†–û–ë–õ–ï–ú–ê –°–¢–†–£–ö–¢–£–†–´ –°–ï–¢–ö–ò: –í –º–∞—Ç—á ${nextMatch.id} –≤–µ–¥—É—Ç ${incomingCount} –º–∞—Ç—á–µ–π, –Ω–æ –º–∞–∫—Å–∏–º—É–º –º–æ–∂–µ—Ç –±—ã—Ç—å 2. ` +
                            `–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏. ` +
                            `–ö–æ–º–∞–Ω–¥—ã –≤ –º–∞—Ç—á–µ: team1=${nextMatch.team1_id}, team2=${nextMatch.team2_id}. ` +
                            `–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: ${winnerId}. ` +
                            `–†–ï–®–ï–ù–ò–ï: –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç 'quick_fix_tournament_${match.tournament_id}.sql' –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`
                        );
                    } else {
                        // –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                        throw new Error(`–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ ${nextMatch.id} —É–∂–µ –∑–∞–Ω—è—Ç—ã: team1=${nextMatch.team1_id}, team2=${nextMatch.team2_id}`);
                    }
                }
            }
            
            console.log(`üíæ [safeAdvanceWinner] –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é ${updateField} –≤ –º–∞—Ç—á–µ ${nextMatch.id}...`);
            
            // 7. –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
            const updateResult = await client.query(
                `UPDATE matches SET ${updateField} = $1 WHERE id = $2 AND ${updateField} IS NULL RETURNING *`,
                [winnerId, nextMatch.id]
            );
            
            if (updateResult.rows.length === 0) {
                // –ö—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π —É–∂–µ –∑–∞–Ω—è–ª —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é
                throw new Error(`–ü–æ–∑–∏—Ü–∏—è ${updateField} –≤ –º–∞—Ç—á–µ ${nextMatch.id} –±—ã–ª–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º`);
            }
            
            const endTime = Date.now();
            console.log(`‚úÖ [safeAdvanceWinner] –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ${winnerId} –≤ –ø–æ–∑–∏—Ü–∏—é ${updateField} –º–∞—Ç—á–∞ ${nextMatch.id} –∑–∞ ${endTime - startTime}ms`);
            
            return {
                advanced: true,
                nextMatchId: nextMatch.id,
                position: updateField,
                previousTeam1: nextMatch.team1_id,
                previousTeam2: nextMatch.team2_id,
                newTeam1: updateField === 'team1_id' ? winnerId : nextMatch.team1_id,
                newTeam2: updateField === 'team2_id' ? winnerId : nextMatch.team2_id
            };
            
        } catch (error) {
            const endTime = Date.now();
            console.error(`‚ùå [safeAdvanceWinner] –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ${winnerId} –∏–∑ –º–∞—Ç—á–∞ ${matchId} –∑–∞ ${endTime - startTime}ms:`, error.message);
            throw error;
        }
    }

    /**
     * üî• –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï –ü–†–û–ò–ì–†–ê–í–®–ï–ì–û (–¥–ª—è –º–∞—Ç—á–µ–π –∑–∞ 3-–µ –º–µ—Å—Ç–æ)
     * @private
     */
    static async _safeAdvanceLoser(matchId, loserId, client = pool) {
        console.log(`üîß [safeAdvanceLoser] –ù–ê–ß–ê–õ–û: –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ ${loserId} –∏–∑ –º–∞—Ç—á–∞ ${matchId}`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
            const matchResult = await client.query(
                'SELECT * FROM matches WHERE id = $1 FOR UPDATE',
                [matchId]
            );
            
            if (matchResult.rows.length === 0) {
                throw new Error(`–ú–∞—Ç—á ${matchId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            const match = matchResult.rows[0];
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—Ç—á–∞ –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ - –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if (!match.loser_next_match_id) {
                console.log(`‚úÖ [safeAdvanceLoser] –ú–∞—Ç—á ${matchId} –Ω–µ –∏–º–µ–µ—Ç –º–∞—Ç—á–∞ –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ`);
                return { advanced: false, reason: 'no_loser_match' };
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (–æ–±—ã—á–Ω–æ –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ)
            const loserMatchResult = await client.query(
                'SELECT * FROM matches WHERE id = $1 FOR UPDATE',
                [match.loser_next_match_id]
            );
            
            if (loserMatchResult.rows.length === 0) {
                throw new Error(`–ú–∞—Ç—á –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ ${match.loser_next_match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            const loserMatch = loserMatchResult.rows[0];
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            let updateField = null;
            
            if (!loserMatch.team1_id) {
                updateField = 'team1_id';
            } else if (!loserMatch.team2_id) {
                updateField = 'team2_id';
            } else {
                console.log(`‚ö†Ô∏è [safeAdvanceLoser] –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Ç—á–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö ${loserMatch.id} —É–∂–µ –∑–∞–Ω—è—Ç—ã`);
                return { advanced: false, reason: 'match_full' };
            }
            
            // –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
            const updateResult = await client.query(
                `UPDATE matches SET ${updateField} = $1 WHERE id = $2 AND ${updateField} IS NULL RETURNING *`,
                [loserId, loserMatch.id]
            );
            
            if (updateResult.rows.length === 0) {
                throw new Error(`–ü–æ–∑–∏—Ü–∏—è ${updateField} –≤ –º–∞—Ç—á–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö ${loserMatch.id} –±—ã–ª–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º`);
            }
            
            console.log(`‚úÖ [safeAdvanceLoser] –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π ${loserId} –≤ –ø–æ–∑–∏—Ü–∏—é ${updateField} –º–∞—Ç—á–∞ ${loserMatch.id}`);
            
            return {
                advanced: true,
                loserMatchId: loserMatch.id,
                position: updateField
            };
            
        } catch (error) {
            console.error(`‚ùå [safeAdvanceLoser] –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ ${loserId} –∏–∑ –º–∞—Ç—á–∞ ${matchId}:`, error.message);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∏–≥—Ä–∞ –∫–∞—Ä—Ç—ã
     * @private
     */
    static _isGameSupportingMaps(gameName) {
        if (!gameName) return false;
        
        return gameName === 'Counter-Strike 2' ||
               gameName === 'Counter Strike 2' ||
               gameName === 'CS2' ||
               gameName === 'cs2' ||
               gameName.toLowerCase().includes('counter') ||
               gameName.toLowerCase().includes('cs') ||
               gameName === 'Valorant' ||
               gameName === 'VALORANT' ||
               gameName.toLowerCase().includes('valorant') ||
               gameName.toLowerCase().includes('overwatch') ||
               gameName.toLowerCase().includes('dota') ||
               gameName.toLowerCase().includes('league');
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–∞—Ç—á–∞ –≤ —á–∞—Ç
     * @private
     */
    static async _sendMatchResultAnnouncement(match, resultData, tournament) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥/—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            let team1Name, team2Name;
            
            if (tournament.participant_type === 'solo') {
                const p1 = await pool.query('SELECT name FROM tournament_participants WHERE id=$1', [match.team1_id]);
                team1Name = p1.rows[0]?.name;
                const p2 = await pool.query('SELECT name FROM tournament_participants WHERE id=$1', [match.team2_id]);
                team2Name = p2.rows[0]?.name;
            } else {
                const t1 = await pool.query('SELECT name FROM tournament_teams WHERE id=$1', [match.team1_id]);
                team1Name = t1.rows[0]?.name;
                const t2 = await pool.query('SELECT name FROM tournament_teams WHERE id=$1', [match.team2_id]);
                team2Name = t2.rows[0]?.name;
            }
            
            const winName = resultData.winner_team_id ? 
                (resultData.winner_team_id === match.team1_id ? team1Name : team2Name) : '';
            
            const announcement = `–ú–∞—Ç—á ${match.match_number} ${team1Name} vs ${team2Name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—á–µ—Ç–æ–º ${resultData.score1}:${resultData.score2}${winName ? `, –ø–æ–±–µ–¥–∏–ª ${winName}` : ''}. –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ç–∫—É: /tournaments/${tournament.id}`;
            
            await sendTournamentChatAnnouncement(tournament.id, announcement);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–∞—Ç—á–∞:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–∞—Ç—á–∞–º–∏
     * @private
     */
    static async _checkMatchAccess(tournamentId, userId) {
        const tournament = await TournamentRepository.getById(tournamentId);
        if (!tournament) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (tournament.created_by !== userId) {
            const isAdmin = await TournamentRepository.isAdmin(tournamentId, userId);
            if (!isAdmin) {
                throw new Error('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π');
            }
        }
    }

    /**
     * üîÑ –ê–õ–ò–ê–°–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° MatchController
     */
    
    // –ê–ª–∏–∞—Å –¥–ª—è saveMatchResult (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MatchController)
    static async saveResult(matchId, resultData, userId) {
        console.log(`üíæ MatchService: –ê–ª–∏–∞—Å saveResult -> updateSpecificMatchResult –¥–ª—è –º–∞—Ç—á–∞ ${matchId}`);
        return await this.updateSpecificMatchResult(matchId, resultData, userId);
    }
    
    // –ê–ª–∏–∞—Å –¥–ª—è getMatches (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MatchController)
    static async getByTournamentId(tournamentId) {
        console.log(`üìã MatchService: –ê–ª–∏–∞—Å getByTournamentId -> getMatches –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        return await this.getMatches(tournamentId);
    }
    
    // –ê–ª–∏–∞—Å –¥–ª—è getMatchById (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ MatchController)
    static async getById(matchId) {
        console.log(`üîç MatchService: –ê–ª–∏–∞—Å getById -> getMatchById –¥–ª—è –º–∞—Ç—á–∞ ${matchId}`);
        return await this.getMatchById(matchId);
    }
}

module.exports = MatchService; 