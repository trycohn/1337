/**
 * üîç ANOMALY DETECTOR
 * –î–µ—Ç–µ–∫—Ü–∏—è —á–∏—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Trust Score –∏ Reputation —Å–∏—Å—Ç–µ–º–∞–º–∏
 * 
 * @version 2.0.0
 * @date 2025-10-02
 */

const pool = require('../../db');

class AnomalyDetector {
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏ –ø–æ—Å–ª–µ –º–∞—Ç—á–∞
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} matchId - ID –º–∞—Ç—á–∞
     */
    static async detectAnomalies(userId, matchId) {
        console.log(`üîç [AnomalyDetector] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è user ${userId} –≤ –º–∞—Ç—á–µ ${matchId}`);
        
        try {
            // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
            const currentMatch = await pool.query(
                'SELECT * FROM player_match_stats WHERE match_id = $1 AND user_id = $2',
                [matchId, userId]
            );
            
            if (currentMatch.rows.length === 0) {
                return { anomalies: [], risk_level: 'UNKNOWN' };
            }
            
            const stats = currentMatch.rows[0];
            
            // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const historical = await pool.query(
                'SELECT * FROM player_aggregated_stats WHERE user_id = $1',
                [userId]
            );
            
            const historicalStats = historical.rows[0] || null;
            
            // –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
            const anomalies = [];
            let riskScore = 0;
            
            // ================================================================
            // 1. HEADSHOT PERCENTAGE
            // ================================================================
            if (stats.hs_percentage > 85 && stats.kills >= 10) {
                anomalies.push({
                    type: 'high_hs_percentage',
                    severity: 'CRITICAL',
                    value: stats.hs_percentage,
                    expected: 55,
                    description: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–π HS%: ${stats.hs_percentage.toFixed(1)}% (–æ–∂–∏–¥–∞–µ—Ç—Å—è ~55%)`,
                    evidence: {
                        kills: stats.kills,
                        headshots: stats.headshots,
                        match_id: matchId
                    }
                });
                riskScore += 35;
            } else if (stats.hs_percentage > 75 && stats.kills >= 15) {
                anomalies.push({
                    type: 'high_hs_percentage',
                    severity: 'HIGH',
                    value: stats.hs_percentage,
                    expected: 55,
                    description: `–í—ã—Å–æ–∫–∏–π HS%: ${stats.hs_percentage.toFixed(1)}%`
                });
                riskScore += 20;
            }
            
            // ================================================================
            // 2. –í–ù–ï–ó–ê–ü–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï
            // ================================================================
            if (historicalStats && historicalStats.total_matches >= 10) {
                const currentKD = stats.deaths > 0 ? stats.kills / stats.deaths : stats.kills;
                const historicalKD = historicalStats.kd_ratio;
                
                if (currentKD > historicalKD * 2 && currentKD > 2.0) {
                    anomalies.push({
                        type: 'sudden_improvement',
                        severity: 'HIGH',
                        value: currentKD,
                        expected: historicalKD,
                        deviation_percentage: ((currentKD - historicalKD) / historicalKD * 100),
                        description: `–†–µ–∑–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ K/D: ${currentKD.toFixed(2)} (–æ–±—ã—á–Ω–æ ${historicalKD.toFixed(2)})`
                    });
                    riskScore += 25;
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ HS%
                if (stats.hs_percentage > historicalStats.avg_hs_percentage * 1.3 && 
                    historicalStats.avg_hs_percentage > 0) {
                    anomalies.push({
                        type: 'sudden_improvement',
                        severity: 'MEDIUM',
                        value: stats.hs_percentage,
                        expected: historicalStats.avg_hs_percentage,
                        description: `–†–µ–∑–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ HS%: ${stats.hs_percentage.toFixed(1)}% (–æ–±—ã—á–Ω–æ ${historicalStats.avg_hs_percentage.toFixed(1)}%)`
                    });
                    riskScore += 15;
                }
            }
            
            // ================================================================
            // 3. –ù–ò–ó–ö–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï UTILITY + –í–´–°–û–ö–ò–ô K/D
            // ================================================================
            const utilityPerRound = stats.rounds_played > 0 
                ? stats.utility_damage / stats.rounds_played 
                : 0;
            
            if (utilityPerRound < 10 && stats.kills > stats.deaths * 1.5) {
                // –ú–Ω–æ–≥–æ –∫–∏–ª–ª–æ–≤, –º–∞–ª–æ utility = –≤–æ–∑–º–æ–∂–Ω–æ wallhack
                anomalies.push({
                    type: 'low_utility_high_kills',
                    severity: 'MEDIUM',
                    value: utilityPerRound,
                    expected: 20,
                    description: `–ù–∏–∑–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ utility (${utilityPerRound.toFixed(1)} —É—Ä–æ–Ω–∞/—Ä–∞—É–Ω–¥) –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º K/D`,
                    evidence: {
                        kills: stats.kills,
                        deaths: stats.deaths,
                        utility_damage: stats.utility_damage
                    }
                });
                riskScore += 20;
            }
            
            // ================================================================
            // 4. –ò–î–ï–ê–õ–¨–ù–´–ï CLUTCHES
            // ================================================================
            const totalClutches = stats.clutch_1v1_total + stats.clutch_1v2_total + 
                                 stats.clutch_1v3_total + stats.clutch_1v4_total;
            const wonClutches = stats.clutch_1v1_won + stats.clutch_1v2_won + 
                               stats.clutch_1v3_won + stats.clutch_1v4_won;
            
            if (totalClutches >= 3 && wonClutches === totalClutches) {
                // –í—ã–∏–≥—Ä–∞–ª –í–°–ï clutches = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
                anomalies.push({
                    type: 'perfect_clutches',
                    severity: 'MEDIUM',
                    value: 100,
                    description: `–ò–¥–µ–∞–ª—å–Ω—ã–π clutch success: ${wonClutches}/${totalClutches} (100%)`,
                    evidence: {
                        clutches: { won: wonClutches, total: totalClutches }
                    }
                });
                riskScore += 15;
            }
            
            // ================================================================
            // 5. OPENING DUELS (–ø—Ä–µ—Ñ–∞–π—Ä—ã)
            // ================================================================
            const openingTotal = stats.opening_kills + stats.opening_deaths;
            const openingSuccessRate = openingTotal > 0 
                ? (stats.opening_kills / openingTotal * 100) 
                : 0;
            
            if (openingSuccessRate > 80 && openingTotal >= 8) {
                anomalies.push({
                    type: 'prefiring_pattern',
                    severity: 'MEDIUM',
                    value: openingSuccessRate,
                    expected: 55,
                    description: `–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π success rate –≤ opening duels: ${openingSuccessRate.toFixed(0)}%`
                });
                riskScore += 18;
            }
            
            // ================================================================
            // –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–†–û–í–ù–Ø –†–ò–°–ö–ê
            // ================================================================
            let riskLevel, action;
            
            if (riskScore >= 80) {
                riskLevel = 'CRITICAL';
                action = 'IMMEDIATE_REVIEW';
            } else if (riskScore >= 60) {
                riskLevel = 'HIGH';
                action = 'FLAG_FOR_REVIEW';
            } else if (riskScore >= 40) {
                riskLevel = 'MEDIUM';
                action = 'WATCH_LIST';
            } else {
                riskLevel = 'LOW';
                action = 'NONE';
            }
            
            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –ë–î
            if (anomalies.length > 0) {
                await this._saveAnomalies(userId, matchId, anomalies, riskLevel);
            }
            
            console.log(`üìä [AnomalyDetector] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${anomalies.length} –∞–Ω–æ–º–∞–ª–∏–π, —Ä–∏—Å–∫: ${riskLevel}`);
            
            return {
                anomalies,
                risk_level: riskLevel,
                risk_score: riskScore,
                action
            };
            
        } catch (error) {
            console.error('‚ùå [AnomalyDetector] –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏:', error);
            return { anomalies: [], risk_level: 'ERROR' };
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –ë–î
     */
    static async _saveAnomalies(userId, matchId, anomalies, riskLevel) {
        const client = await pool.connect();
        
        try {
            for (const anomaly of anomalies) {
                await client.query(`
                    INSERT INTO player_stats_anomalies (
                        user_id,
                        match_id,
                        anomaly_type,
                        severity,
                        value,
                        expected_value,
                        deviation_percentage,
                        description,
                        evidence
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                `, [
                    userId,
                    matchId,
                    anomaly_type,
                    anomaly.severity,
                    anomaly.value || null,
                    anomaly.expected || null,
                    anomaly.deviation_percentage || null,
                    anomaly.description,
                    JSON.stringify(anomaly.evidence || {})
                ]);
            }
            
            console.log(`‚úÖ [AnomalyDetector] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${anomalies.length} –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è user ${userId}`);
            
        } catch (error) {
            console.error('‚ùå [AnomalyDetector] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π:', error);
        } finally {
            client.release();
        }
    }
    
    /**
     * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Trust Score
     * –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ - —Å–Ω–∏–∑–∏—Ç—å Trust Score
     */
    static async adjustTrustScoreOnAnomalies(userId, anomalies) {
        try {
            const criticalAnomalies = anomalies.filter(a => a.severity === 'CRITICAL');
            
            if (criticalAnomalies.length > 0) {
                // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π Trust Score
                const trustResult = await pool.query(
                    'SELECT trust_score FROM user_trust_scores WHERE user_id = $1',
                    [userId]
                );
                
                if (trustResult.rows.length > 0) {
                    const currentScore = trustResult.rows[0].trust_score;
                    const penalty = criticalAnomalies.length * 10;  // -10 –∑–∞ –∫–∞–∂–¥—É—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –∞–Ω–æ–º–∞–ª–∏—é
                    const newScore = Math.max(0, currentScore - penalty);
                    
                    await pool.query(`
                        UPDATE user_trust_scores 
                        SET trust_score = $1 
                        WHERE user_id = $2
                    `, [newScore, userId]);
                    
                    // –ó–∞–ø–∏—Å–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                    await pool.query(`
                        INSERT INTO user_trust_history (
                            user_id, old_score, new_score, old_action, new_action, reason
                        ) VALUES ($1, $2, $3, $4, $5, $6)
                    `, [
                        userId,
                        currentScore,
                        newScore,
                        'NORMAL',
                        newScore < 40 ? 'WATCH_LIST' : 'NORMAL',
                        `Stats anomalies detected: ${criticalAnomalies.map(a => a.type).join(', ')}`
                    ]);
                    
                    console.log(`‚ö†Ô∏è [AnomalyDetector] Trust Score —Å–Ω–∏–∂–µ–Ω: ${currentScore} ‚Üí ${newScore} –¥–ª—è user ${userId}`);
                }
            }
        } catch (error) {
            console.error('‚ùå [AnomalyDetector] –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ Trust Score:', error);
        }
    }
}

module.exports = AnomalyDetector;

