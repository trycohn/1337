require('dotenv').config({ path: __dirname + '/.env' });

console.log("üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π JWT_SECRET:", process.env.JWT_SECRET);
console.log("üîç NODE_ENV:", process.env.NODE_ENV);

const express = require('express');
const pool = require('./db');
const http = require('http');
const { Server } = require('socket.io');
const passport = require('passport');
const SteamStrategy = require('passport-steam').Strategy;
const session = require('express-session');
const tournamentsRouter = require('./routes/tournaments');

const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.use(session({
    secret: process.env.JWT_SECRET || 'your_session_secret',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: process.env.NODE_ENV === 'production' }
}));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Passport
app.use(passport.initialize());
app.use(passport.session());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Steam Strategy
passport.use(new SteamStrategy({
  returnURL: process.env.NODE_ENV === 'production'
      ? 'https://1337community.com/api/users/steam-callback'
      : 'http://localhost:3000/api/users/steam-callback',
  realm: process.env.NODE_ENV === 'production'
      ? 'https://1337community.com/'
      : 'http://localhost:3000/',
  apiKey: process.env.STEAM_API_KEY || 'YOUR_STEAM_API_KEY'
}, async (identifier, profile, done) => {
  console.log('SteamStrategy identifier:', identifier);
  console.log('SteamStrategy profile:', profile);
  const steamId = profile.id;
  try {
      const user = await pool.query('SELECT * FROM users WHERE steam_id = $1', [steamId]);
      console.log('SteamStrategy user check:', user.rows);
      if (user.rows.length > 0) {
          return done(null, user.rows[0]);
      }
      return done(null, { steamId });
  } catch (err) {
      console.error('SteamStrategy error:', err);
      return done(err);
  }
}));

passport.serializeUser((user, done) => {
    done(null, user.id || user.steamId);
});

passport.deserializeUser(async (id, done) => {
    try {
        const user = await pool.query('SELECT * FROM users WHERE id = $1 OR steam_id = $2', [id, id]);
        done(null, user.rows[0] || { steamId: id });
    } catch (err) {
        done(err);
    }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è socket.io
const io = new Server(server, {
    cors: {
        origin: process.env.NODE_ENV === 'production'
            ? ['https://1337community.com', 'https://www.1337community.com'] // –î–æ–±–∞–≤–ª–µ–Ω www
            : ['http://localhost:3001', 'http://127.0.0.1:5500', 'http://localhost:3000'],
        methods: ['GET', 'POST'],
        credentials: true,
        allowedHeaders: ['Content-Type', 'Authorization'],
    },
    path: '/socket.io',
    transports: ['websocket', 'polling'],
    allowEIO3: true,
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CORS –≤—Ä—É—á–Ω—É—é
app.use((req, res, next) => {
    const allowedOrigins = process.env.NODE_ENV === 'production'
        ? ['https://1337community.com', 'https://www.1337community.com'] // –î–æ–±–∞–≤–ª–µ–Ω www
        : ['http://localhost:3001', 'http://127.0.0.1:5500', 'http://localhost:3000'];
    const origin = req.headers.origin || 'https://1337community.com'; // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${req.method} ${req.path} –æ—Ç ${origin}`);
    console.log(`üîç –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:`, req.headers); // –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    console.log(`üîç NODE_ENV –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${process.env.NODE_ENV}`); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log(`üîç –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ origins: ${allowedOrigins}`); // –û—Ç–ª–∞–¥–∫–∞ —Å–ø–∏—Å–∫–∞ origins
    if (allowedOrigins.includes(origin)) {
        res.setHeader('Access-Control-Allow-Origin', origin);
        console.log(`‚úÖ Origin ${origin} —Ä–∞–∑—Ä–µ—à—ë–Ω`);
    } else {
        console.log(`üö´ Origin ${origin} –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω`);
        return res.status(403).json({ error: 'Origin not allowed' });
    }
    res.setHeader('Access-Control-Allow-Methods', 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    if (req.method === 'OPTIONS') {
        console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight-–∑–∞–ø—Ä–æ—Å–∞ (OPTIONS) –¥–ª—è ${req.path}`);
        return res.status(200).end();
    }
    next();
});

app.use((req, res, next) => {
    console.log(`üîç –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.originalUrl}`);
    next();
});

app.use(express.json());

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/testdb', async (req, res) => {
    try {
        const result = await pool.query('SELECT NOW()');
        res.json({ status: 'success', time: result.rows[0].now });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', err);
        res.status(500).json({ status: 'error', message: err.message });
    }
});

app.get('/favicon.ico', (req, res) => res.status(204).end());
app.get('/favicon.png', (req, res) => res.status(204).end());

// API-–º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/users', require('./routes/users'));
app.use('/api/tournaments', tournamentsRouter);
app.use('/api/teams', require('./routes/teams'));
app.use('/api/tournamentPlayers', require('./routes/tournamentPlayers'));
app.use('/api/matches', require('./routes/matches'));
app.use('/api/statistics', require('./routes/statistics'));
app.use('/api/notifications', require('./routes/notifications'));

app.use('/api', (req, res) => {
    console.log(`404 –¥–ª—è –ø—É—Ç–∏: ${req.path}`);
    res.status(404).json({ error: 'API –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

app.use((req, res) => {
    console.log(`404 –¥–ª—è –ø—É—Ç–∏: ${req.path}`);
    res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

io.on('connection', (socket) => {
    console.log('üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    socket.on('register', (userId) => {
        socket.join(userId);
        console.log(`–ö–ª–∏–µ–Ω—Ç ${socket.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    });
    socket.on('disconnect', () => {
        console.log('üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    });
});

app.set('io', io);

const PORT = process.env.PORT || 3000;
server.listen(PORT, async () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    try {
        await pool.query('SELECT NOW()');
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    }
});