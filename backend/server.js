const dotenv = require('dotenv');
const result = dotenv.config({ path: __dirname + '/.env' });

if (result.error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞:', result.error);
} else {
  console.log('‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
}

console.log("üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π JWT_SECRET:", process.env.JWT_SECRET ? '[–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω]' : '[–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]');
console.log("üîç NODE_ENV:", process.env.NODE_ENV || '[–ù–µ —É–∫–∞–∑–∞–Ω–æ]');
console.log("üîç FACEIT_CLIENT_ID:", process.env.FACEIT_CLIENT_ID ? '[–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω]' : '[–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]');
console.log("üîç FACEIT_CLIENT_SECRET:", process.env.FACEIT_CLIENT_SECRET ? '[–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω]' : '[–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]');
console.log("üîç FACEIT_REDIRECT_URI:", process.env.FACEIT_REDIRECT_URI ? '[–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω]' : '[–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]');

const express = require('express');
const pool = require('./db');
const http = require('http');
const puppeteer = require('puppeteer');
const cookieParser = require('cookie-parser');
const { Server } = require('socket.io');
const tournamentsRouter = require('./routes/tournaments');
const nodemailer = require('nodemailer');

const app = express();
const server = http.createServer(app);

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CORS –≤—Ä—É—á–Ω—É—é
app.use((req, res, next) => {
  const allowedOrigins = process.env.NODE_ENV === 'production'
      ? ['https://1337community.com', 'https://www.1337community.com']
      : ['http://localhost:3001', 'http://127.0.0.1:5500', 'http://localhost:3000'];
  const origin = req.headers.origin || 'https://1337community.com';
  console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${req.method} ${req.path} –æ—Ç ${origin}`);
  console.log(`üîç –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:`, req.headers);
  console.log(`üîç NODE_ENV –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${process.env.NODE_ENV}`);
  console.log(`üîç –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ origins: ${allowedOrigins}`);
  // –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±–æ–π origin –¥–ª—è —Ç–µ—Å—Ç–∞
  res.setHeader('Access-Control-Allow-Origin', origin || '*');
  console.log(`‚úÖ Origin ${origin} —Ä–∞–∑—Ä–µ—à—ë–Ω (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)`);
  res.setHeader('Access-Control-Allow-Methods', 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  res.setHeader('Access-Control-Allow-Credentials', 'true');
  if (req.method === 'OPTIONS') {
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight-–∑–∞–ø—Ä–æ—Å–∞ (OPTIONS) –¥–ª—è ${req.path}`);
      return res.status(200).end();
  }
  next();
});

app.use((req, res, next) => {
    console.log(`üîç –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.originalUrl}`);
    next();
});

app.use(express.json());
app.use(cookieParser());

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/testdb', async (req, res) => {
    try {
        const result = await pool.query('SELECT NOW()');
        res.json({ status: 'success', time: result.rows[0].now });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', err);
        res.status(500).json({ status: 'error', message: err.message });
    }
});

app.get('/favicon.ico', (req, res) => res.status(204).end());
app.get('/favicon.png', (req, res) => res.status(204).end());

// API-–º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/users', require('./routes/users'));
app.use('/api/tournaments', tournamentsRouter);
app.use('/api/teams', require('./routes/teams'));
app.use('/api/tournamentPlayers', require('./routes/tournamentPlayers'));
app.use('/api/matches', require('./routes/matches'));
app.use('/api/statistics', require('./routes/statistics'));
app.use('/api/notifications', require('./routes/notifications'));
app.use('/api/playerStats', require('./routes/playerStats'));

app.use('/api', (req, res) => {
    console.log(`404 –¥–ª—è –ø—É—Ç–∏: ${req.path}`);
    res.status(404).json({ error: 'API –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

app.use((req, res) => {
    console.log(`404 –¥–ª—è –ø—É—Ç–∏: ${req.path}`);
    res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
const io = new Server(server, {
    cors: {
        origin: process.env.NODE_ENV === 'production'
            ? ['https://1337community.com', 'https://www.1337community.com']
            : ['http://localhost:3001', 'http://127.0.0.1:5500', 'http://localhost:3000'],
        methods: ['GET', 'POST'],
        credentials: true,
        allowedHeaders: ['Content-Type', 'Authorization'],
    },
    path: '/socket.io',
    transports: ['websocket', 'polling'],
    allowEIO3: true,
});

io.on('connection', (socket) => {
    console.log('üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    socket.on('register', (userId) => {
        socket.join(userId);
        console.log(`–ö–ª–∏–µ–Ω—Ç ${socket.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    });
    socket.on('disconnect', () => {
        console.log('üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    });
});

app.set('io', io);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const mailTransporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    secure: process.env.SMTP_PORT === '465',
    auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SMTP-—Å–µ—Ä–≤–µ—Ä–æ–º
if (process.env.NODE_ENV !== 'test') {
    mailTransporter.verify((error, success) => {
        if (error) {
            console.warn('–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SMTP-—Å–µ—Ä–≤–µ—Ä—É:', error);
        } else {
            console.log('SMTP-—Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
    });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, async () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    try {
        await pool.query('SELECT NOW()');
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    }
});