const dotenv = require('dotenv');
const result = dotenv.config({ path: __dirname + '/.env' });

if (result.error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞:', result.error);
} else {
  console.log('‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
}

console.log("üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π JWT_SECRET:", process.env.JWT_SECRET ? '[–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω]' : '[–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]');
console.log("üîç NODE_ENV:", process.env.NODE_ENV || '[–ù–µ —É–∫–∞–∑–∞–Ω–æ]');
console.log("üîç FACEIT_CLIENT_ID:", process.env.FACEIT_CLIENT_ID ? '[–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω]' : '[–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]');
console.log("üîç FACEIT_CLIENT_SECRET:", process.env.FACEIT_CLIENT_SECRET ? '[–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω]' : '[–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]');
console.log("üîç FACEIT_REDIRECT_URI:", process.env.FACEIT_REDIRECT_URI ? '[–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω]' : '[–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]');

const express = require('express');
const morgan = require('morgan');
const cors = require('cors');
const helmet = require('helmet');
const path = require('path');
const rateLimiter = require('express-rate-limit');
const pool = require('./db');
const { authenticateSocket } = require('./notifications');
const { authenticateToken } = require('./middleware/auth');
const { updateActivity } = require('./middleware/activity');
const http = require('http');
const puppeteer = require('puppeteer');
const cookieParser = require('cookie-parser');
const WebSocket = require('ws');
const tournamentsRouter = require('./routes/tournaments');
const nodemailer = require('nodemailer');
const notifications = require('./notifications');
const { Server: SocketIOServer } = require('socket.io');
const { setupChatSocketIO } = require('./chat-socketio');

const app = express();
// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
global.app = app;

const server = http.createServer(app);

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CORS –≤—Ä—É—á–Ω—É—é
app.use((req, res, next) => {
  const allowedOrigins = process.env.NODE_ENV === 'production'
      ? ['https://1337community.com', 'https://www.1337community.com']
      : ['http://localhost:3001', 'http://127.0.0.1:5500', 'http://localhost:3000'];
  const origin = req.headers.origin || 'https://1337community.com';
  console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${req.method} ${req.path} –æ—Ç ${origin}`);
  console.log(`üîç –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:`, req.headers);
  console.log(`üîç NODE_ENV –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${process.env.NODE_ENV}`);
  console.log(`üîç –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ origins: ${allowedOrigins}`);
  // –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±–æ–π origin –¥–ª—è —Ç–µ—Å—Ç–∞
  res.setHeader('Access-Control-Allow-Origin', origin || '*');
  console.log(`‚úÖ Origin ${origin} —Ä–∞–∑—Ä–µ—à—ë–Ω (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)`);
  res.setHeader('Access-Control-Allow-Methods', 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  res.setHeader('Access-Control-Allow-Credentials', 'true');
  if (req.method === 'OPTIONS') {
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight-–∑–∞–ø—Ä–æ—Å–∞ (OPTIONS) –¥–ª—è ${req.path}`);
      return res.status(200).end();
  }
  next();
});

app.use((req, res, next) => {
    console.log(`üîç –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.originalUrl}`);
    next();
});

app.use(express.json());
app.use(cookieParser());

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.use((req, res, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (token) {
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å, –≤—ã–∑—ã–≤–∞–µ–º middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    return authenticateToken(req, res, () => {
      if (req.user) {
        updateActivity(req, res, next);
      } else {
        next();
      }
    });
  }
  next();
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/testdb', async (req, res) => {
    try {
        const result = await pool.query('SELECT NOW()');
        res.json({ status: 'success', time: result.rows[0].now });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', err);
        res.status(500).json({ status: 'error', message: err.message });
    }
});

app.get('/favicon.ico', (req, res) => res.status(204).end());
app.get('/favicon.png', (req, res) => res.status(204).end());

// API-–º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/users', require('./routes/users'));
app.use('/api/tournaments', tournamentsRouter);
app.use('/api/teams', require('./routes/teams'));
app.use('/api/tournamentPlayers', require('./routes/tournamentPlayers'));
app.use('/api/matches', require('./routes/matches'));
app.use('/api/statistics', require('./routes/statistics'));
app.use('/api/notifications', require('./routes/notifications'));
app.use('/api/playerStats', require('./routes/playerStats'));
app.use('/api/friends', require('./routes/friends'));
app.use('/api/chats', require('./routes/chats'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º noServer)
const wss = new WebSocket.Server({
  noServer: true
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Socket.IO —Å–µ—Ä–≤–µ—Ä –¥–ª—è —á–∞—Ç–∞
const io = new SocketIOServer(server, {
  cors: { origin: true, methods: ['GET', 'POST'], credentials: true }
});
setupChatSocketIO(io);

// –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const connectedClients = new Map();
// –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä—ã (tournamentId -> [clients])
const tournamentClients = new Map();

wss.on('connection', (ws) => {
    console.log('üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (data.type === 'register' && data.userId) {
                connectedClients.set(data.userId, ws);
                console.log(`–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.userId}`);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            if (data.type === 'watch_tournament' && data.tournamentId) {
                ws.tournamentId = data.tournamentId;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∑–∞ —Ç—É—Ä–Ω–∏—Ä–æ–º
                if (!tournamentClients.has(data.tournamentId)) {
                    tournamentClients.set(data.tournamentId, new Set());
                }
                tournamentClients.get(data.tournamentId).add(ws);
                
                console.log(`–ö–ª–∏–µ–Ω—Ç –Ω–∞—á–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–∞ ${data.tournamentId}`);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∞
            if (data.type === 'unwatch_tournament' && data.tournamentId) {
                if (tournamentClients.has(data.tournamentId)) {
                    tournamentClients.get(data.tournamentId).delete(ws);
                    
                    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                    if (tournamentClients.get(data.tournamentId).size === 0) {
                        tournamentClients.delete(data.tournamentId);
                    }
                }
                
                delete ws.tournamentId;
                console.log(`–ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–∞ ${data.tournamentId}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    ws.on('close', () => {
        console.log('üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
        // –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–∏–≤—à–µ–≥–æ—Å—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–∞—Ä—Ç—ã
        for (const [userId, client] of connectedClients.entries()) {
            if (client === ws) {
                connectedClients.delete(userId);
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
                break;
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∑–∞ —Ç—É—Ä–Ω–∏—Ä–æ–º
        if (ws.tournamentId && tournamentClients.has(ws.tournamentId)) {
            tournamentClients.get(ws.tournamentId).delete(ws);
            
            // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
            if (tournamentClients.get(ws.tournamentId).size === 0) {
                tournamentClients.delete(ws.tournamentId);
            }
            
            console.log(`–ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–∞ ${ws.tournamentId} (–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ)`);
        }
    });
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
app.set('wss', wss);
app.set('connectedClients', connectedClients);
app.set('tournamentClients', tournamentClients);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –¥–ª—è —á–∞—Ç–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤—ã—à–µ (chatWss)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const mailTransporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    secure: process.env.SMTP_PORT === '465',
    auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SMTP-—Å–µ—Ä–≤–µ—Ä–æ–º
if (process.env.NODE_ENV !== 'test') {
    mailTransporter.verify((error, success) => {
        if (error) {
            console.warn('–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SMTP-—Å–µ—Ä–≤–µ—Ä—É:', error);
        } else {
            console.log('SMTP-—Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
    });
}

// Middleware
app.use(cors({
    origin: ['http://localhost:3000', 'https://1337community.com'], // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è CORS
    credentials: true,
}));
app.use(express.json()); // –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤ body
app.use(express.urlencoded({ extended: true })); // –ü–∞—Ä—Å–∏–Ω–≥ URL-encoded –≤ body

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ uploads
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API
app.get('/', (req, res) => {
    res.json({ message: '–°–µ—Ä–≤–µ—Ä 1337 Community API —Ä–∞–±–æ—Ç–∞–µ—Ç!' });
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
app.use(helmet());
app.use(morgan('dev'));
app.use(cors());
app.use(express.json());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, 'public')));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
const limiter = rateLimiter({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 100 // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ IP
});
app.use(limiter);

// –ú–∞—Ä—à—Ä—É—Ç—ã API
app.use('/api', (req, res) => {
    console.log(`404 –¥–ª—è –ø—É—Ç–∏: ${req.path}`);
    res.status(404).json({ error: 'API –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
    console.log(`404 –¥–ª—è –ø—É—Ç–∏: ${req.path}`);
    res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ message: "Internal Server Error" });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, async () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    try {
        await pool.query('SELECT NOW()');
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket upgrade —Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
server.on('upgrade', (request, socket, head) => {
  try {
    const { pathname } = new URL(request.url, `http://${request.headers.host}`);

    if (pathname === '/ws') {
      wss.handleUpgrade(request, socket, head, ws => {
        wss.emit('connection', ws, request);
      });
      return;
    }

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è WebSocket
    socket.destroy();
  } catch (err) {
    socket.destroy();
  }
});