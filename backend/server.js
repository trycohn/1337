require('dotenv').config({ path: __dirname + '/.env' });

console.log("üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π JWT_SECRET:", process.env.JWT_SECRET); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É

const express = require('express');
const path = require('path');
const cors = require('cors');
const pool = require('./db');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express
const app = express();

app.use(express.json());
app.use(cors({
    origin: 'http://localhost:3000', // –£–∫–∞–∂–∏ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å frontend
    credentials: true
}));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (Frontend)
app.use(express.static(path.join(__dirname, '../frontend'), { cacheControl: false })); // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
app.use(express.urlencoded({ extended: true }));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
app.get('/testdb', async (req, res) => {
    try {
        const result = await pool.query('SELECT NOW()');
        res.json({ status: 'success', time: result.rows[0].now });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', err);
        res.status(500).json({ status: 'error', message: err.message });
    }
});

app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../frontend/index.html'));
});

/* ==========================
   üîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ú–ê–†–®–†–£–¢–û–í
   ========================== */

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
const authRoutes = require('./routes/auth');
app.use('/api/auth', authRoutes);

// –¢—É—Ä–Ω–∏—Ä—ã
const tournamentRoutes = require('./routes/tournaments');
app.use('/api/tournaments', tournamentRoutes);

// –ö–æ–º–∞–Ω–¥—ã
const teamRoutes = require('./routes/teams');
app.use('/api/teams', teamRoutes);

// –ò–≥—Ä–æ–∫–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
const tournamentPlayersRoutes = require('./routes/tournamentPlayers');
app.use('/api/tournamentPlayers', tournamentPlayersRoutes);

// –ú–∞—Ç—á–∏
const matchRoutes = require('./routes/matches');
app.use('/api/matches', matchRoutes);

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
const bracketRoutes = require('./routes/brackets');
app.use('/api/brackets', bracketRoutes);

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
const statisticsRoutes = require('./routes/statistics');
app.use('/api/statistics', statisticsRoutes);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use((req, res) => {
    res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

/* ==========================
   üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
   ========================== */
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
    console.log(`Server running on port ${PORT}`);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try {
        await pool.query('SELECT NOW()');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    }
});