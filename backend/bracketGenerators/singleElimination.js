// backend/bracketGenerators/singleElimination.js
const pool = require('../db');

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ Single Elimination
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ [{ id, name }]
 * @param {boolean} thirdPlaceMatch - –ù—É–∂–µ–Ω –ª–∏ –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
 * @returns {Array} - –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
 */
const generateSingleEliminationBracket = async (tournamentId, participants, thirdPlaceMatch) => {
    const matches = [];
    let matchNumber = 1;

    // –†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const shuffledParticipants = [...participants].sort(() => Math.random() - 0.5);
    const participantCount = shuffledParticipants.length;
    
    console.log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è ${participantCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –í–ù–ò–ó
    // –î–ª—è 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ –±—É–¥–µ—Ç 4 (2^2)
    const pow = Math.floor(Math.log2(participantCount));
    const closestPowerOfTwo = Math.pow(2, pow);
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ —Ä–∞–≤–Ω–æ logBase2(closestPowerOfTwo)
    // –î–ª—è 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏ 4): log2(4) = 2 —Ä–∞—É–Ω–¥–∞
    const totalRounds = Math.log2(closestPowerOfTwo);
    
    console.log(`–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏: ${closestPowerOfTwo}, –≤—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: ${totalRounds}`);

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–• –ú–ê–¢–ß–ï–ô
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ –ø–µ—Ä–≤–æ–º –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—É–Ω–¥–µ = closestPowerOfTwo / 2
    const round0MatchCount = closestPowerOfTwo / 2;
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ = closestPowerOfTwo
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º = –º–∏–Ω–∏–º—É–º –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–æ–≤–∏–Ω—ã —Å–ª–æ—Ç–æ–≤
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–¥—É—Ç –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:
    // - –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏ –æ–¥–Ω–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º
    // - –û—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
    const minByeParticipants = Math.min(round0MatchCount, participantCount);
    const preliminaryParticipants = participantCount - minByeParticipants;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ
    // –ö–∞–∂–¥—ã–π –º–∞—Ç—á –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º—É–º 1 —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç (–≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫)
    let prelimMatchesCount = Math.min(preliminaryParticipants, round0MatchCount);
    let actualPrelimParticipants = prelimMatchesCount * 2; // –ø–æ 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–∞–∂–¥–æ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –º–∞—Ç—á–µ
    let byeParticipantsCount = participantCount - actualPrelimParticipants;
    
    console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢:`);
    console.log(`–ú–∞—Ç—á–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—É–Ω–¥–µ (0): ${round0MatchCount}`);
    console.log(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${prelimMatchesCount}`);
    console.log(`–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º —Ä–∞—É–Ω–¥–µ: ${actualPrelimParticipants}`);
    console.log(`–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Ö–æ–¥–æ–º: ${byeParticipantsCount}`);
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞: ${actualPrelimParticipants} + ${byeParticipantsCount} = ${actualPrelimParticipants + byeParticipantsCount} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ${participantCount})`);
    
    // –ï—Å–ª–∏ —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ª–æ–≥–∏–∫—É
    if (actualPrelimParticipants + byeParticipantsCount !== participantCount) {
        console.warn(`‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö! –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ª–æ–≥–∏–∫—É...`);
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º, –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
        const safeByeCount = 1;
        const safePrelimParticipants = participantCount - safeByeCount;
        const safePrelimMatches = Math.floor(safePrelimParticipants / 2);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        prelimMatchesCount = safePrelimMatches;
        actualPrelimParticipants = safePrelimMatches * 2;
        byeParticipantsCount = participantCount - actualPrelimParticipants;
        
        console.log(`üîß –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –õ–û–ì–ò–ö–ê:`);
        console.log(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${prelimMatchesCount}`);
        console.log(`–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º —Ä–∞—É–Ω–¥–µ: ${actualPrelimParticipants}`);
        console.log(`–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º: ${byeParticipantsCount}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤)
    const prelimParticipants = shuffledParticipants.slice(0, actualPrelimParticipants);
    const byeParticipants = shuffledParticipants.slice(actualPrelimParticipants);
    
    console.log(`–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞:`, prelimParticipants.map(p => `${p.id}:${p.name}`));
    console.log(`–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º:`, byeParticipants.map(p => `${p.id}:${p.name}`));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (participantCount === 5) {
        console.log(`=== –ü–†–û–í–ï–†–ö–ê –î–õ–Ø 5 –£–ß–ê–°–¢–ù–ò–ö–û–í ===`);
        console.log(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥: ${prelimParticipantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (${prelimParticipants.map(p => p.name).join(', ')})`);
        console.log(`–ê–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥: ${byeParticipantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (${byeParticipants.map(p => p.name).join(', ')})`);
        console.log(`–ú–∞—Ç—á–µ–π –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º —Ä–∞—É–Ω–¥–µ: ${prelimMatchesCount}`);
        console.log(`–ú–∞—Ç—á–µ–π –≤ –ø–µ—Ä–≤–æ–º –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—É–Ω–¥–µ: ${closestPowerOfTwo / 2}`);
        console.log(`–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞: ${byeParticipantsCount + prelimMatchesCount} = ${closestPowerOfTwo}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç—á–µ–π –ø–æ —Ä–∞—É–Ω–¥–∞–º
    const roundMatches = {};
    
    for (let round = 0; round < totalRounds; round++) {
        roundMatches[round] = [];
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (prelimMatchesCount > 0) {
        roundMatches[-1] = [];
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    if (prelimMatchesCount > 0) {
        for (let i = 0; i < prelimMatchesCount; i++) {
            const team1Index = i * 2;
            const team2Index = i * 2 + 1;
            
            if (team1Index < prelimParticipants.length && team2Index < prelimParticipants.length) {
                const team1 = prelimParticipants[team1Index];
                const team2 = prelimParticipants[team2Index];
                
                const match = await pool.query(
                    'INSERT INTO matches (tournament_id, round, team1_id, team2_id, match_number, bracket_type) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *',
                    [tournamentId, -1, team1.id, team2.id, matchNumber++, 'winner']
                );
                
                roundMatches[-1].push(match.rows[0]);
                matches.push(match.rows[0]);
                
                console.log(`–°–æ–∑–¥–∞–Ω –º–∞—Ç—á –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ #${match.rows[0].id}: ${team1.name} vs ${team2.name}`);
            }
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ –ø–µ—Ä–≤–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (round 0)
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ –ø–µ—Ä–≤–æ–º –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—É–Ω–¥–µ = closestPowerOfTwo / 2
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—É–Ω–¥–µ (0): ${round0MatchCount}`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    let byeParticipantIndex = 0;
    
    for (let i = 0; i < round0MatchCount; i++) {
        let team1 = null;
        let team2 = null;
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –º–∞—Ç—á–∞–º
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Ç—á–∏ –ø–∞—Ä–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º
        if (byeParticipantIndex < byeParticipantsCount) {
            team1 = byeParticipants[byeParticipantIndex];
            byeParticipantIndex++;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if (byeParticipantIndex < byeParticipantsCount) {
                team2 = byeParticipants[byeParticipantIndex];
                byeParticipantIndex++;
                console.log(`–ú–∞—Ç—á ${i} –≤ —Ä–∞—É–Ω–¥–µ 0: ${team1.name} vs ${team2.name} (–æ–±–∞ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º)`);
            } else {
                // –í—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –±—É–¥–µ—Ç –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
                console.log(`–ú–∞—Ç—á ${i} –≤ —Ä–∞—É–Ω–¥–µ 0: ${team1.name} vs [TBD –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞]`);
            }
        } else {
            // –û–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±—É–¥—É—Ç –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
            console.log(`–ú–∞—Ç—á ${i} –≤ —Ä–∞—É–Ω–¥–µ 0: [TBD] vs [TBD] (–æ–±–∞ –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞)`);
        }
        
        const match = await pool.query(
            'INSERT INTO matches (tournament_id, round, team1_id, team2_id, match_number, bracket_type) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *',
            [tournamentId, 0, team1 ? team1.id : null, team2 ? team2.id : null, matchNumber++, 'winner']
        );
        
        roundMatches[0].push(match.rows[0]);
        matches.push(match.rows[0]);
        
        console.log(`–°–æ–∑–¥–∞–Ω –º–∞—Ç—á —Ä–∞—É–Ω–¥–∞ 0 #${match.rows[0].id}: ${team1 ? team1.name : 'TBD'} vs ${team2 ? team2.name : 'TBD'}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤ (1 –∏ –¥–∞–ª–µ–µ)
    for (let round = 1; round < totalRounds; round++) {
        const matchCount = Math.pow(2, totalRounds - round - 1);
        console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ —Ä–∞—É–Ω–¥–µ ${round}: ${matchCount}`);
        
        for (let i = 0; i < matchCount; i++) {
            const match = await pool.query(
                'INSERT INTO matches (tournament_id, round, team1_id, team2_id, match_number, bracket_type) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *',
                [tournamentId, round, null, null, matchNumber++, 'winner']
            );
            
            roundMatches[round].push(match.rows[0]);
            matches.push(match.rows[0]);
            
            console.log(`–°–æ–∑–¥–∞–Ω –º–∞—Ç—á —Ä–∞—É–Ω–¥–∞ ${round} #${match.rows[0].id}`);
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
    let thirdPlaceMatchObj = null;
    if (thirdPlaceMatch && totalRounds >= 2) {
        // –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –±—É–¥–µ—Ç –≤ —Ç–æ–º –∂–µ —Ä–∞—É–Ω–¥–µ, —á—Ç–æ –∏ —Ñ–∏–Ω–∞–ª (–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–∞—É–Ω–¥–µ)
        const finalRound = totalRounds - 1;
        
        const match = await pool.query(
            'INSERT INTO matches (tournament_id, round, team1_id, team2_id, match_number, is_third_place_match, bracket_type) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *',
            [tournamentId, finalRound, null, null, matchNumber++, true, 'placement']
        );
        
        thirdPlaceMatchObj = match.rows[0];
        matches.push(thirdPlaceMatchObj);
        
        console.log(`–°–æ–∑–¥–∞–Ω –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ #${thirdPlaceMatchObj.id}`);
    }
    
    // –°–≤—è–∑—ã–≤–∞–µ–º –º–∞—Ç—á–∏
    
    // 1. –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ —Å –ø–µ—Ä–≤—ã–º —Ä–∞—É–Ω–¥–æ–º
    if (prelimMatchesCount > 0) {
        console.log(`\n=== –°–í–Ø–ó–´–í–ê–ù–ò–ï –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –†–ê–£–ù–î–ê ===`);
        console.log(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${prelimMatchesCount}`);
        console.log(`–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º: ${byeParticipantsCount}`);
        console.log(`–ú–∞—Ç—á–µ–π –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ: ${round0MatchCount}`);
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–ª–æ—Ç–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ
        const round0Slots = [];
        for (let matchIndex = 0; matchIndex < round0MatchCount; matchIndex++) {
            const match = roundMatches[0][matchIndex];
            round0Slots.push({
                matchIndex,
                matchId: match.id,
                team1_occupied: match.team1_id !== null,
                team2_occupied: match.team2_id !== null,
                team1_id: match.team1_id,
                team2_id: match.team2_id
            });
        }
        
        console.log('–°–ª–æ—Ç—ã –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ:', round0Slots);
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –ø–æ —Å–≤–æ–±–æ–¥–Ω—ã–º —Å–ª–æ—Ç–∞–º
        let slotIndex = 0;
        
        for (let i = 0; i < prelimMatchesCount; i++) {
            const prelimMatch = roundMatches[-1][i];
            
            // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
            while (slotIndex < round0Slots.length) {
                const slot = round0Slots[slotIndex];
                
                // –ï—Å–ª–∏ –≤ –º–∞—Ç—á–µ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
                if (!slot.team1_occupied || !slot.team2_occupied) {
                    // –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á —Å —ç—Ç–∏–º —Å–ª–æ—Ç–æ–º
                    await pool.query(
                        'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                        [slot.matchId, prelimMatch.id]
                    );
                    
                    console.log(`–°–≤—è–∑–∞–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á #${prelimMatch.id} -> –º–∞—Ç—á #${slot.matchId} (—Å–ª–æ—Ç ${slotIndex})`);
                    
                    // –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ—Ç –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π
                    if (!slot.team1_occupied) {
                        slot.team1_occupied = true;
                    } else {
                        slot.team2_occupied = true;
                    }
                    
                    slotIndex++;
                    break;
                }
                slotIndex++;
            }
        }
        
        console.log(`=== –°–í–Ø–ó–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===\n`);
    }
    
    // 2. –°–≤—è–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—É–Ω–¥—ã
    for (let round = 0; round < totalRounds - 1; round++) {
        const currentRoundMatches = roundMatches[round];
        const nextRoundMatches = roundMatches[round + 1];
        
        for (let i = 0; i < currentRoundMatches.length; i++) {
            const currentMatch = currentRoundMatches[i];
            const nextMatchIndex = Math.floor(i / 2);
            
            if (nextMatchIndex < nextRoundMatches.length) {
                const nextMatch = nextRoundMatches[nextMatchIndex];
                
                await pool.query(
                    'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                    [nextMatch.id, currentMatch.id]
                );
                
                console.log(`–°–≤—è–∑–∞–Ω –º–∞—Ç—á #${currentMatch.id} (—Ä–∞—É–Ω–¥ ${round}) -> –º–∞—Ç—á #${nextMatch.id} (—Ä–∞—É–Ω–¥ ${round+1})`);
            }
        }
    }
    
    // 3. –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–æ–≤ —Å –º–∞—Ç—á–µ–º –∑–∞ 3-–µ –º–µ—Å—Ç–æ
    if (thirdPlaceMatch && totalRounds >= 2) {
        const semifinalRound = totalRounds - 2; // –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥
        const semifinalMatches = roundMatches[semifinalRound];
        
        for (let i = 0; i < semifinalMatches.length; i++) {
            const semifinalMatch = semifinalMatches[i];
            
            await pool.query(
                'UPDATE matches SET loser_next_match_id = $1 WHERE id = $2',
                [thirdPlaceMatchObj.id, semifinalMatch.id]
            );
            
            console.log(`–°–≤—è–∑–∞–Ω –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∞ #${semifinalMatch.id} -> –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ #${thirdPlaceMatchObj.id}`);
        }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log("–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∫–∏:", matches.map(m => ({
        id: m.id,
        round: m.round,
        team1_id: m.team1_id,
        team2_id: m.team2_id,
        next_match_id: m.next_match_id,
        loser_next_match_id: m.loser_next_match_id
    })));
    
    return matches;
};

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É Single Elimination
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
 */
const validateSingleEliminationBracket = async (tournamentId) => {
    console.log(`\n=== –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ï–¢–ö–ò –¢–£–†–ù–ò–†–ê ${tournamentId} ===`);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
        const result = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, match_number',
            [tournamentId]
        );
        
        const matches = result.rows;
        const issues = [];
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        const roundMatches = {};
        matches.forEach(match => {
            if (!roundMatches[match.round]) {
                roundMatches[match.round] = [];
            }
            roundMatches[match.round].push(match);
        });
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π –≤ ${Object.keys(roundMatches).length} —Ä–∞—É–Ω–¥–∞—Ö`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
        for (const match of matches) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ú–∞—Ç—á–∏ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
            if (match.team1_id && match.team2_id && match.team1_id === match.team2_id) {
                issues.push({
                    type: 'DUPLICATE_TEAMS',
                    matchId: match.id,
                    round: match.round,
                    teamId: match.team1_id,
                    message: `–ú–∞—Ç—á ${match.id}: –∫–æ–º–∞–Ω–¥–∞ ${match.team1_id} –∏–≥—Ä–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è`
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ú–∞—Ç—á–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –±–µ–∑ next_match_id
            if (match.round === -1 && !match.next_match_id) {
                issues.push({
                    type: 'MISSING_NEXT_MATCH',
                    matchId: match.id,
                    round: match.round,
                    message: `–ú–∞—Ç—á –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ ${match.id} –Ω–µ —Å–≤—è–∑–∞–Ω —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –º–∞—Ç—á–µ–º`
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ú–∞—Ç—á–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ next_match_id
            if (match.next_match_id) {
                const nextMatch = matches.find(m => m.id === match.next_match_id);
                if (!nextMatch) {
                    issues.push({
                        type: 'INVALID_NEXT_MATCH',
                        matchId: match.id,
                        nextMatchId: match.next_match_id,
                        message: `–ú–∞—Ç—á ${match.id} —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç—á ${match.next_match_id}`
                    });
                } else if (nextMatch.round !== match.round + 1) {
                    issues.push({
                        type: 'WRONG_ROUND_SEQUENCE',
                        matchId: match.id,
                        nextMatchId: match.next_match_id,
                        currentRound: match.round,
                        nextRound: nextMatch.round,
                        message: `–ú–∞—Ç—á ${match.id} (—Ä–∞—É–Ω–¥ ${match.round}) —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –º–∞—Ç—á ${match.next_match_id} (—Ä–∞—É–Ω–¥ ${nextMatch.round}), –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—É–Ω–¥ ${match.round + 1}`
                    });
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ü—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–º–∞–Ω–¥
        const round0Matches = roundMatches[0] || [];
        const prelimMatches = roundMatches[-1] || [];
        
        if (prelimMatches.length > 0) {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ
            let emptySlots = 0;
            round0Matches.forEach(match => {
                if (!match.team1_id) emptySlots++;
                if (!match.team2_id) emptySlots++;
            });
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –±–µ–∑ —Å–≤—è–∑–µ–π
            const unlinkedPrelimMatches = prelimMatches.filter(match => !match.next_match_id);
            
            if (unlinkedPrelimMatches.length > 0 && emptySlots === 0) {
                issues.push({
                    type: 'BRACKET_STRUCTURE_ERROR',
                    message: `–ï—Å—Ç—å ${unlinkedPrelimMatches.length} –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π, –Ω–æ –Ω–µ—Ç –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ`
                });
            }
        }
        
        console.log(`–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issues.length}`);
        
        if (issues.length > 0) {
            console.log('\n=== –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ===');
            issues.forEach((issue, index) => {
                console.log(`${index + 1}. [${issue.type}] ${issue.message}`);
            });
        } else {
            console.log('‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–∞');
        }
        
        return {
            valid: issues.length === 0,
            issues,
            matchesCount: matches.length,
            roundsCount: Object.keys(roundMatches).length
        };
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
        return {
            valid: false,
            error: error.message,
            issues: [{
                type: 'VALIDATION_ERROR',
                message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`
            }]
        };
    }
};

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–µ Single Elimination
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
const fixSingleEliminationBracket = async (tournamentId) => {
    console.log(`\n=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–¢–ö–ò –¢–£–†–ù–ò–†–ê ${tournamentId} ===`);
    
    try {
        // –°–Ω–∞—á–∞–ª–∞ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Ç–∫—É
        const validation = await validateSingleEliminationBracket(tournamentId);
        
        if (validation.valid) {
            console.log('‚úÖ –°–µ—Ç–∫–∞ —É–∂–µ –≤–∞–ª–∏–¥–Ω–∞, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
            return { success: true, message: '–°–µ—Ç–∫–∞ —É–∂–µ –≤–∞–ª–∏–¥–Ω–∞' };
        }
        
        const fixes = [];
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
        const result = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, match_number',
            [tournamentId]
        );
        
        const matches = result.rows;
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º
        const roundMatches = {};
        matches.forEach(match => {
            if (!roundMatches[match.round]) {
                roundMatches[match.round] = [];
            }
            roundMatches[match.round].push(match);
        });
        
        const prelimMatches = roundMatches[-1] || [];
        const round0Matches = roundMatches[0] || [];
        
        console.log(`–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏: ${prelimMatches.length}`);
        console.log(`–ú–∞—Ç—á–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞: ${round0Matches.length}`);
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await pool.query('BEGIN');
        
        try {
            // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            
            // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ
            for (const match of round0Matches) {
                if (match.team1_id && match.team2_id && match.team1_id === match.team2_id) {
                    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ –º–∞—Ç—á–µ ${match.id}`);
                    
                    // –ò—â–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å–ª–æ—Ç
                    const unlinkedPrelimMatch = prelimMatches.find(pm => 
                        !pm.next_match_id && pm.winner_team_id
                    );
                    
                    if (unlinkedPrelimMatch) {
                        // –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á
                        await pool.query(
                            'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                            [match.id, unlinkedPrelimMatch.id]
                        );
                        
                        // –ó–∞–º–µ–Ω—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞
                        await pool.query(
                            'UPDATE matches SET team2_id = $1 WHERE id = $2',
                            [unlinkedPrelimMatch.winner_team_id, match.id]
                        );
                        
                        fixes.push({
                            type: 'FIXED_DUPLICATE_AND_LINKED',
                            prelimMatchId: unlinkedPrelimMatch.id,
                            targetMatchId: match.id,
                            newTeamId: unlinkedPrelimMatch.winner_team_id,
                            message: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –º–∞—Ç—á–µ ${match.id} –∏ —Å–≤—è–∑–∞–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á ${unlinkedPrelimMatch.id}`
                        });
                        
                        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–≤—è–∑–∞–Ω –º–∞—Ç—á ${unlinkedPrelimMatch.id} -> ${match.id}, –∑–∞–º–µ–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ${match.team1_id} –Ω–∞ ${unlinkedPrelimMatch.winner_team_id}`);
                    }
                }
            }
            
            // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
            for (const prelimMatch of prelimMatches) {
                if (!prelimMatch.next_match_id && prelimMatch.winner_team_id) {
                    console.log(`üîß –ò—â–µ–º —Å–ª–æ—Ç –¥–ª—è –Ω–µ—Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞ ${prelimMatch.id}`);
                    
                    // –ò—â–µ–º –º–∞—Ç—á –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Å –ø—É—Å—Ç—ã–º —Å–ª–æ—Ç–æ–º
                    const targetMatch = round0Matches.find(m => !m.team1_id || !m.team2_id);
                    
                    if (targetMatch) {
                        // –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á
                        await pool.query(
                            'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                            [targetMatch.id, prelimMatch.id]
                        );
                        
                        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
                        const updateField = !targetMatch.team1_id ? 'team1_id' : 'team2_id';
                        await pool.query(
                            `UPDATE matches SET ${updateField} = $1 WHERE id = $2`,
                            [prelimMatch.winner_team_id, targetMatch.id]
                        );
                        
                        fixes.push({
                            type: 'LINKED_PRELIMINARY_MATCH',
                            prelimMatchId: prelimMatch.id,
                            targetMatchId: targetMatch.id,
                            field: updateField,
                            teamId: prelimMatch.winner_team_id,
                            message: `–°–≤—è–∑–∞–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á ${prelimMatch.id} —Å –º–∞—Ç—á–µ–º ${targetMatch.id}`
                        });
                        
                        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å–≤—è–∑–∞–Ω –º–∞—Ç—á ${prelimMatch.id} -> ${targetMatch.id}, –∑–∞–ø–æ–ª–Ω–µ–Ω —Å–ª–æ—Ç ${updateField}`);
                    } else {
                        console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç –¥–ª—è –º–∞—Ç—á–∞ ${prelimMatch.id}`);
                    }
                }
            }
            
            // 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–∫–∞–∫ —Ç—É—Ä–Ω–∏—Ä 59)
            if (tournamentId === 59) {
                console.log('üéØ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ 59');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –º–∞—Ç—á–∏
                const match1541 = matches.find(m => m.id === 1541);
                const match1543 = matches.find(m => m.id === 1543);
                
                if (match1541 && !match1541.next_match_id && match1541.winner_team_id) {
                    await pool.query(
                        'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                        [1543, 1541]
                    );
                    console.log('‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å–≤—è–∑–∞–Ω –º–∞—Ç—á 1541 -> 1543');
                    fixes.push({
                        type: 'SPECIAL_FIX_59',
                        message: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ 59: —Å–≤—è–∑–∞–Ω –º–∞—Ç—á 1541 -> 1543'
                    });
                }
                
                if (match1543 && match1543.team1_id === match1543.team2_id && match1541) {
                    await pool.query(
                        'UPDATE matches SET team2_id = $1 WHERE id = $2',
                        [match1541.winner_team_id, 1543]
                    );
                    console.log('‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∑–∞–º–µ–Ω–µ–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –º–∞—Ç—á–µ 1543');
                    fixes.push({
                        type: 'SPECIAL_FIX_59_DUPLICATE',
                        message: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ 59: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –º–∞—Ç—á–µ 1543'
                    });
                }
            }
            
            // –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await pool.query('COMMIT');
            
            console.log(`\n=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===`);
            console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${fixes.length}`);
            
            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Ç–∫—É
            const revalidation = await validateSingleEliminationBracket(tournamentId);
            
            return {
                success: true,
                fixesApplied: fixes.length,
                fixes,
                stillHasIssues: !revalidation.valid,
                remainingIssues: revalidation.issues || []
            };
            
        } catch (fixError) {
            await pool.query('ROLLBACK');
            throw fixError;
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
        return {
            success: false,
            error: error.message
        };
    }
};

module.exports = {
    generateSingleEliminationBracket,
    validateSingleEliminationBracket,
    fixSingleEliminationBracket
};