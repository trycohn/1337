// =====================================================
// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô SINGLE ELIMINATION –ì–ï–ù–ï–†–ê–¢–û–† V3.0
// –í–µ—Ä—Å–∏—è: 3.0 - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ê–¢–ï–ú–ê–¢–ò–ö–ò
// =====================================================

const pool = require('../db');

/**
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è Single Elimination —Ç—É—Ä–Ω–∏—Ä–æ–≤
 * @param {number} participantsCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * @returns {Object} - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
 */
const calculateTournamentMath = (participantsCount) => {
    if (participantsCount < 2) {
        throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 2');
    }

    console.log(`üßÆ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê –¢–£–†–ù–ò–†–ê –¥–ª—è ${participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
    
    // üîß –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê SINGLE ELIMINATION:
    // –í Single Elimination –¥–ª—è N —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω—É–∂–Ω–æ —Ä–æ–≤–Ω–æ N-1 –º–∞—Ç—á–µ–π
    const totalMatches = participantsCount - 1;
    
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏ –ë–û–õ–¨–®–ï –ò–õ–ò –†–ê–í–ù–£–Æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const nextPowerExponent = Math.ceil(Math.log2(participantsCount));
    const nextPowerOfTwo = Math.pow(2, nextPowerExponent);
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏
    const mainRounds = nextPowerExponent;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ –ø–µ—Ä–≤–æ–º –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—É–Ω–¥–µ
    const firstRoundMatches = nextPowerOfTwo / 2;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å bye (–∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º) –≤ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
    const byeParticipants = nextPowerOfTwo - participantsCount;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–≥—Ä–∞—Ç—å –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º —Ä–∞—É–Ω–¥–µ
    const preliminaryParticipants = participantsCount - byeParticipants;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
    const preliminaryMatches = preliminaryParticipants / 2;
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π = –æ–±—â–∏–µ –º–∞—Ç—á–∏ - –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ
    const mainMatches = totalMatches - preliminaryMatches;

    console.log(`   ‚Ä¢ –ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏ (–≤–≤–µ—Ä—Ö): 2^${nextPowerExponent} = ${nextPowerOfTwo}`);
    console.log(`   ‚Ä¢ –û–±—â–∏—Ö –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ: ${totalMatches}`);
    console.log(`   ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º (bye): ${byeParticipants}`);
    console.log(`   ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º —Ä–∞—É–Ω–¥–µ: ${preliminaryParticipants}`);
    console.log(`   ‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${preliminaryMatches}`);
    console.log(`   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤: ${mainRounds}`);
    console.log(`   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${mainMatches}`);
    console.log(`   ‚Ä¢ –ú–∞—Ç—á–µ–π –≤ –ø–µ—Ä–≤–æ–º –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—É–Ω–¥–µ: ${firstRoundMatches}`);

    return {
        participantsCount,
        nextPowerOfTwo,
        nextPowerExponent,
        totalMatches,
        preliminaryMatches,
        preliminaryParticipants,
        byeParticipants,
        mainRounds,
        mainMatches,
        firstRoundMatches
    };
};

/**
 * üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ú–ê–¢–ß–ï–ô (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø)
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 */
const clearExistingMatches = async (tournamentId) => {
    console.log(`üóëÔ∏è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
    
    // üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
    const countResult = await pool.query(
        'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
        [tournamentId]
    );
    const matchCount = parseInt(countResult.rows[0].count);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${matchCount} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π`);
    
    if (matchCount === 0) {
        console.log(`‚ÑπÔ∏è –ú–∞—Ç—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç, –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞`);
        return;
    }
    
    if (matchCount > 1000) {
        // üîß –î–ª—è –±–æ–ª—å—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–µ–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        console.log(`‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ç—É—Ä–Ω–∏—Ä (${matchCount} –º–∞—Ç—á–µ–π), –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–µ–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ`);
        let deletedTotal = 0;
        let batchNumber = 1;
        
        while (deletedTotal < matchCount) {
            console.log(`üóëÔ∏è –ë–∞—Ç—á ${batchNumber}: —É–¥–∞–ª—è–µ–º –¥–æ 500 –º–∞—Ç—á–µ–π...`);
            const batchResult = await pool.query(`
                DELETE FROM matches 
                WHERE id IN (
                    SELECT id FROM matches 
                    WHERE tournament_id = $1 
                    LIMIT 500
                )
            `, [tournamentId]);
            
            deletedTotal += batchResult.rowCount;
            console.log(`   ‚úÖ –ë–∞—Ç—á ${batchNumber}: —É–¥–∞–ª–µ–Ω–æ ${batchResult.rowCount} –º–∞—Ç—á–µ–π (–≤—Å–µ–≥–æ: ${deletedTotal}/${matchCount})`);
            
            if (batchResult.rowCount === 0) {
                break; // –ë–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å
            }
            batchNumber++;
        }
        console.log(`‚úÖ –ë–∞—Ç—á–µ–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${deletedTotal} –º–∞—Ç—á–µ–π`);
    } else {
        // üîß –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        const deleteResult = await pool.query(
            'DELETE FROM matches WHERE tournament_id = $1',
            [tournamentId]
        );
        console.log(`‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: ${deleteResult.rowCount} –º–∞—Ç—á–µ–π`);
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const checkResult = await pool.query(
        'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
        [tournamentId]
    );
    
    const remainingMatches = parseInt(checkResult.rows[0].count);
    if (remainingMatches > 0) {
        console.warn(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—Å—Ç–∞–ª–∏—Å—å ${remainingMatches} –º–∞—Ç—á–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏!`);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏. –û—Å—Ç–∞–ª–æ—Å—å: ${remainingMatches}`);
    }
    
    console.log(`‚úÖ –í—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã`);
};

/**
 * –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ä–∞—É–Ω–¥–∞–º (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
 * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * @param {Object} tournamentMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Object} - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
 */
const distributeParticipants = (participants, tournamentMath) => {
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const shuffled = [...participants].sort(() => Math.random() - 0.5);
    
    const { preliminaryParticipants, byeParticipants } = tournamentMath;
    
    // –†–∞–∑–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const preliminaryRoundParticipants = shuffled.slice(0, preliminaryParticipants);
    const byeRoundParticipants = shuffled.slice(preliminaryParticipants);
    
    console.log(`üë• –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í:`);
    console.log(`   ‚Ä¢ –í –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º —Ä–∞—É–Ω–¥–µ: ${preliminaryRoundParticipants.length}`);
    console.log(`   ‚Ä¢ –° –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º: ${byeRoundParticipants.length}`);
    
    return {
        preliminaryRoundParticipants,
        byeRoundParticipants,
        allParticipants: shuffled
    };
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞—É–Ω–¥–æ–≤
 * @param {number} round - –ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
 * @param {number} totalRounds - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
 * @param {boolean} isPreliminary - –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
 * @param {boolean} isThirdPlace - –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
 * @returns {Object} - –ù–∞–∑–≤–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞
 */
const generateRoundNames = (round, totalRounds, isPreliminary = false, isThirdPlace = false) => {
    if (isThirdPlace) {
        return {
            roundName: '–ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ',
            roundTitle: '–ú–∞—Ç—á –∑–∞ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ',
            shortName: '3-–µ –º–µ—Å—Ç–æ'
        };
    }
    
    if (isPreliminary) {
        return {
            roundName: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥',
            roundTitle: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ –æ—Ç—Å–µ–≤–∞',
            shortName: '–ü—Ä–µ–¥–≤.'
        };
    }
    
    // –°—á–∏—Ç–∞–µ–º —Å –∫–æ–Ω—Ü–∞: —Ñ–∏–Ω–∞–ª = –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥
    const roundsFromEnd = totalRounds - round - 1;
    
    switch (roundsFromEnd) {
        case 0:
            return { roundName: '–§–∏–Ω–∞–ª', roundTitle: '–§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á', shortName: '–§' };
        case 1:
            return { roundName: '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª', roundTitle: '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏', shortName: '1/2' };
        case 2:
            return { roundName: '1/4 —Ñ–∏–Ω–∞–ª–∞', roundTitle: '–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏', shortName: '1/4' };
        case 3:
            return { roundName: '1/8 —Ñ–∏–Ω–∞–ª–∞', roundTitle: '–ú–∞—Ç—á–∏ 1/8 —Ñ–∏–Ω–∞–ª–∞', shortName: '1/8' };
        case 4:
            return { roundName: '1/16 —Ñ–∏–Ω–∞–ª–∞', roundTitle: '–ú–∞—Ç—á–∏ 1/16 —Ñ–∏–Ω–∞–ª–∞', shortName: '1/16' };
        case 5:
            return { roundName: '1/32 —Ñ–∏–Ω–∞–ª–∞', roundTitle: '–ú–∞—Ç—á–∏ 1/32 —Ñ–∏–Ω–∞–ª–∞', shortName: '1/32' };
        default:
            const fraction = Math.pow(2, roundsFromEnd + 1);
            return { 
                roundName: `1/${fraction} —Ñ–∏–Ω–∞–ª–∞`, 
                roundTitle: `–ú–∞—Ç—á–∏ 1/${fraction} —Ñ–∏–Ω–∞–ª–∞`,
                shortName: `1/${fraction}`
            };
    }
};

/**
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç—á–µ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Array} preliminaryParticipants - –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
 * @param {Object} tournamentMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Array} - –ú–∞—Ç—á–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
 */
const generatePreliminaryMatches = async (tournamentId, preliminaryParticipants, tournamentMath) => {
    const matches = [];
    const { preliminaryMatches } = tournamentMath;
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ preliminaryMatches = 0 –ò–õ–ò –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
    const actualPreliminaryMatches = Math.floor(preliminaryMatches);
    
    if (actualPreliminaryMatches === 0) {
        console.log('üéØ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        return matches;
    }
    
    console.log(`ü•ä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –†–ê–£–ù–î–ê: ${actualPreliminaryMatches} –º–∞—Ç—á–µ–π`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—ã –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    for (let i = 0; i < actualPreliminaryMatches; i++) {
        const team1Index = i * 2;
        const team2Index = i * 2 + 1;
        
        if (team1Index < preliminaryParticipants.length && team2Index < preliminaryParticipants.length) {
            const team1 = preliminaryParticipants[team1Index];
            const team2 = preliminaryParticipants[team2Index];
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (typeof team1.id !== 'number' || isNaN(team1.id)) {
                throw new Error(`TEAM1 –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: ${team1.id} (${typeof team1.id})`);
            }
            if (typeof team2.id !== 'number' || isNaN(team2.id)) {
                throw new Error(`TEAM2 –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: ${team2.id} (${typeof team2.id})`);
            }
            
            const roundNames = generateRoundNames(0, 0, true, false);
            
            const match = await pool.query(`
                INSERT INTO matches (
                    tournament_id, round, team1_id, team2_id, match_number,
                    bracket_type, is_preliminary_round, round_name, match_title,
                    position_in_round
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) 
                RETURNING *
            `, [
                tournamentId, 
                -1, // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ = -1
                team1.id, 
                team2.id, 
                i + 1,
                'winner',
                true,
                roundNames.roundName,
                `${roundNames.roundName} - –ú–∞—Ç—á ${i + 1}`,
                i + 1
            ]);
            
            matches.push(match.rows[0]);
            
            console.log(`   ‚úÖ –ú–∞—Ç—á ${i + 1}: ${team1.name} vs ${team2.name} (ID ${match.rows[0].id})`);
        }
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${matches.length} –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π`);
    return matches;
};

/**
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Array} byeParticipants - –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º
 * @param {Object} tournamentMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @param {number} preliminaryMatchesCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
 * @returns {Array} - –ú–∞—Ç—á–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤
 */
const generateMainRounds = async (tournamentId, byeParticipants, tournamentMath, preliminaryMatchesCount) => {
    const matches = [];
    const { mainRounds, firstRoundMatches } = tournamentMath;
    let matchNumber = preliminaryMatchesCount + 1;
    
    console.log(`üèÜ –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–°–ù–û–í–ù–´–• –†–ê–£–ù–î–û–í: ${mainRounds} —Ä–∞—É–Ω–¥–æ–≤`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥
    for (let round = 0; round < mainRounds; round++) {
        const matchesInRound = Math.pow(2, mainRounds - round - 1);
        const roundNames = generateRoundNames(round, mainRounds, false, false);
        
        console.log(`   üéØ –†–∞—É–Ω–¥ ${round} (${roundNames.roundName}): ${matchesInRound} –º–∞—Ç—á–µ–π`);
        
        for (let matchInRound = 0; matchInRound < matchesInRound; matchInRound++) {
            let team1Id = null;
            let team2Id = null;
            
            // –í –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ —Ä–∞–∑–º–µ—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–ø—Ä–æ—Ö–æ–¥–æ–º
            if (round === 0) {
                const byeIndex1 = matchInRound * 2;
                const byeIndex2 = matchInRound * 2 + 1;
                
                if (byeIndex1 < byeParticipants.length) {
                    team1Id = byeParticipants[byeIndex1].id;
                }
                if (byeIndex2 < byeParticipants.length) {
                    team2Id = byeParticipants[byeIndex2].id;
                }
            }
            
            const match = await pool.query(`
                INSERT INTO matches (
                    tournament_id, round, team1_id, team2_id, match_number,
                    bracket_type, is_preliminary_round, round_name, match_title,
                    position_in_round
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) 
                RETURNING *
            `, [
                tournamentId,
                round,
                team1Id,
                team2Id,
                matchNumber++,
                'winner',
                false,
                roundNames.roundName,
                `${roundNames.roundName} - –ú–∞—Ç—á ${matchInRound + 1}`,
                matchInRound + 1
            ]);
            
            matches.push(match.rows[0]);
            
            const team1Name = byeParticipants.find(p => p.id === team1Id)?.name || 'TBD';
            const team2Name = byeParticipants.find(p => p.id === team2Id)?.name || 'TBD';
            
            console.log(`     ‚úÖ –ú–∞—Ç—á ${matchInRound + 1}: ${team1Name} vs ${team2Name}`);
        }
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${matches.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π`);
    return matches;
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Object} tournamentMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @param {number} currentMatchNumber - –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –º–∞—Ç—á–∞
 * @returns {Object|null} - –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –∏–ª–∏ null
 */
const generateThirdPlaceMatch = async (tournamentId, tournamentMath, currentMatchNumber) => {
    const { mainRounds } = tournamentMath;
    
    if (mainRounds < 2) {
        console.log('üö´ –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞—É–Ω–¥–æ–≤)');
        return null;
    }
    
    console.log('ü•â –ì–ï–ù–ï–†–ê–¶–ò–Ø –ú–ê–¢–ß–ê –ó–ê 3-–ï –ú–ï–°–¢–û');
    
    const roundNames = generateRoundNames(0, 0, false, true);
    const finalRound = mainRounds - 1;
    
    const match = await pool.query(`
        INSERT INTO matches (
            tournament_id, round, team1_id, team2_id, match_number,
            bracket_type, is_third_place_match, round_name, match_title,
            position_in_round
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) 
        RETURNING *
    `, [
        tournamentId,
        finalRound, // –¢–æ—Ç –∂–µ —Ä–∞—É–Ω–¥ —á—Ç–æ –∏ —Ñ–∏–Ω–∞–ª
        null, // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∞
        null,
        currentMatchNumber,
        'placement',
        true,
        roundNames.roundName,
        roundNames.roundTitle,
        999 // –í—ã—Å–æ–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    ]);
    
    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ (ID: ${match.rows[0].id})`);
    
    return match.rows[0];
};

/**
 * –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
 * @param {Array} allMatches - –í—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Object} tournamentMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @param {Object} thirdPlaceMatch - –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
 */
const linkMatches = async (allMatches, tournamentMath, thirdPlaceMatch = null) => {
    console.log('üîó –°–í–Ø–ó–´–í–ê–ù–ò–ï –ú–ê–¢–ß–ï–ô –í –¢–£–†–ù–ò–†–ù–û–ï –î–ï–†–ï–í–û');
    
    const preliminaryMatches = allMatches.filter(m => m.is_preliminary_round);
    const mainMatches = allMatches.filter(m => !m.is_preliminary_round && !m.is_third_place_match);
    const { mainRounds } = tournamentMath;
    
    // 1. –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ —Å –ø–µ—Ä–≤—ã–º –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞—É–Ω–¥–æ–º
    if (preliminaryMatches.length > 0) {
        const firstRoundMatches = mainMatches.filter(m => m.round === 0);
        
        console.log(`üîó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–≤—è–∑—ã–≤–∞–µ–º ${preliminaryMatches.length} –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å ${firstRoundMatches.length} –æ—Å–Ω–æ–≤–Ω—ã–º–∏`);
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
        for (let i = 0; i < preliminaryMatches.length; i++) {
            const prelimMatch = preliminaryMatches[i];
            
            // –ö–∞–∂–¥—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –æ—Å–Ω–æ–≤–Ω—ã–º –º–∞—Ç—á–µ–º
            // –ü–µ—Ä–≤—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ‚Üí –ø–µ—Ä–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç—á (–≥–¥–µ team1_id –∏–ª–∏ team2_id –ø—É—Å—Ç—ã–µ)
            // –í—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ‚Üí –ø–µ—Ä–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç—á (–≤ –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Å–ª–æ—Ç)
            // –¢—Ä–µ—Ç–∏–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π ‚Üí –≤—Ç–æ—Ä–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç—á, –∏ —Ç.–¥.
            
            const targetMatchIndex = Math.floor(i / 2); // –ö–∞–∂–¥—ã–µ 2 –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö ‚Üí 1 –æ—Å–Ω–æ–≤–Ω–æ–π
            
            if (targetMatchIndex < firstRoundMatches.length) {
                const targetMainMatch = firstRoundMatches[targetMatchIndex];
                
                await pool.query(
                    'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                    [targetMainMatch.id, prelimMatch.id]
                );
                
                console.log(`   üîó –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á ${prelimMatch.id} ‚Üí –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç—á ${targetMainMatch.id} (—Å–ª–æ—Ç ${i % 2 + 1})`);
            }
        }
    }
    
    // 2. –°–≤—è–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–±–æ–π
    for (let round = 0; round < mainRounds - 1; round++) {
        const currentRoundMatches = mainMatches.filter(m => m.round === round);
        const nextRoundMatches = mainMatches.filter(m => m.round === round + 1);
        
        for (let i = 0; i < currentRoundMatches.length; i++) {
            const currentMatch = currentRoundMatches[i];
            const nextMatchIndex = Math.floor(i / 2);
            
            if (nextMatchIndex < nextRoundMatches.length) {
                const nextMatch = nextRoundMatches[nextMatchIndex];
                
                await pool.query(
                    'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                    [nextMatch.id, currentMatch.id]
                );
                
                console.log(`   üîó –†–∞—É–Ω–¥ ${round} –º–∞—Ç—á ${currentMatch.id} ‚Üí –†–∞—É–Ω–¥ ${round + 1} –º–∞—Ç—á ${nextMatch.id}`);
            }
        }
    }
    
    // 3. –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∞ —Å –º–∞—Ç—á–µ–º –∑–∞ 3-–µ –º–µ—Å—Ç–æ
    if (thirdPlaceMatch && mainRounds >= 2) {
        const semifinalRound = mainRounds - 2;
        const semifinalMatches = mainMatches.filter(m => m.round === semifinalRound);
        
        for (const semifinalMatch of semifinalMatches) {
            await pool.query(
                'UPDATE matches SET loser_next_match_id = $1 WHERE id = $2',
                [thirdPlaceMatch.id, semifinalMatch.id]
            );
            
            console.log(`   ü•â –ü–æ–ª—É—Ñ–∏–Ω–∞–ª ${semifinalMatch.id} (–ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π) ‚Üí –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ ${thirdPlaceMatch.id}`);
        }
    }
    
    console.log('‚úÖ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
};

/**
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∫–∏
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Object} tournamentMath - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
const validateGeneratedBracket = async (tournamentId, tournamentMath) => {
    console.log('üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ô –°–ï–¢–ö–ò');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
    const matchesResult = await pool.query(
        'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, position_in_round',
        [tournamentId]
    );
    
    const matches = matchesResult.rows;
    const preliminaryMatches = matches.filter(m => m.is_preliminary_round);
    const mainMatches = matches.filter(m => !m.is_preliminary_round && !m.is_third_place_match);
    const thirdPlaceMatches = matches.filter(m => m.is_third_place_match);
    
    const { 
        preliminaryMatches: expectedPreliminaryFloat,
        mainMatches: expectedMain,
        totalMatches: expectedTotal
    } = tournamentMath;
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º Math.floor
    const expectedPreliminary = Math.floor(expectedPreliminaryFloat);
    
    const validation = {
        isValid: true,
        errors: [],
        warnings: [],
        stats: {
            totalMatches: matches.length,
            preliminaryMatches: preliminaryMatches.length,
            mainMatches: mainMatches.length,
            thirdPlaceMatches: thirdPlaceMatches.length
        }
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
    if (preliminaryMatches.length !== expectedPreliminary) {
        validation.errors.push(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${preliminaryMatches.length}, –æ–∂–∏–¥–∞–ª–æ—Å—å: ${expectedPreliminary}`);
        validation.isValid = false;
    }
    
    if (mainMatches.length !== expectedMain) {
        validation.errors.push(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${mainMatches.length}, –æ–∂–∏–¥–∞–ª–æ—Å—å: ${expectedMain}`);
        validation.isValid = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
    for (const match of matches) {
        if (match.next_match_id) {
            const nextMatch = matches.find(m => m.id === match.next_match_id);
            if (!nextMatch) {
                validation.errors.push(`–ú–∞—Ç—á ${match.id} —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á ${match.next_match_id}`);
                validation.isValid = false;
            }
        }
    }
    
    console.log(`   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${validation.stats.totalMatches} –º–∞—Ç—á–µ–π (${validation.stats.preliminaryMatches} –ø—Ä–µ–¥–≤. + ${validation.stats.mainMatches} –æ—Å–Ω–æ–≤–Ω—ã—Ö + ${validation.stats.thirdPlaceMatches} –∑–∞ 3-–µ –º–µ—Å—Ç–æ)`);
    
    if (validation.isValid) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ - —Å–µ—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
    } else {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:');
        validation.errors.forEach(error => console.log(`   ‚Ä¢ ${error}`));
    }
    
    return validation;
};

/**
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Single Elimination
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ [{ id, name }]
 * @param {boolean} thirdPlaceMatch - –ù—É–∂–µ–Ω –ª–∏ –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
 * @returns {Array} - –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
 */
const generateSingleEliminationBracket = async (tournamentId, participants, thirdPlaceMatch = false) => {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ì–ï–ù–ï–†–ê–¢–û–†–ê SINGLE ELIMINATION V3.0');
    console.log('='.repeat(60));
    
    // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–•–û–î–Ø–©–ò–• –î–ê–ù–ù–´–•
    console.log(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–•–û–î–Ø–©–ò–• –î–ê–ù–ù–´–•:`);
    console.log(`   - Tournament ID: ${tournamentId} (—Ç–∏–ø: ${typeof tournamentId})`);
    console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}`);
    console.log(`   - –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ: ${thirdPlaceMatch}`);
    
    // –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const invalidParticipants = participants.filter(p => typeof p.id !== 'number' || isNaN(p.id));
    if (invalidParticipants.length > 0) {
        console.log(`‚ùå –ù–ê–ô–î–ï–ù–û ${invalidParticipants.length} –£–ß–ê–°–¢–ù–ò–ö–û–í –° –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ú–ò ID:`);
        invalidParticipants.forEach((p, index) => {
            console.log(`   ${index + 1}. ID: ${p.id} (${typeof p.id}), Name: ${p.name}`);
        });
        throw new Error(`–ë–õ–û–ö–ò–†–û–í–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò: ${invalidParticipants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–º–µ—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID. –¢—Ä–µ–±—É—é—Ç—Å—è —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.`);
    }
    
    console.log(`‚úÖ –í–°–ï ${participants.length} –£–ß–ê–°–¢–ù–ò–ö–û–í –ü–†–û–®–õ–ò –í–ê–õ–ò–î–ê–¶–ò–Æ ID`);
    
    try {
        // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏
        await clearExistingMatches(tournamentId);
        
        // 1. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
        const tournamentMath = calculateTournamentMath(participants.length);
        
        // 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const distribution = distributeParticipants(participants, tournamentMath);
        
        // 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
        const preliminaryMatches = await generatePreliminaryMatches(
            tournamentId,
            distribution.preliminaryRoundParticipants,
            tournamentMath
        );
        
        // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤
        const mainMatches = await generateMainRounds(
            tournamentId,
            distribution.byeRoundParticipants,
            tournamentMath,
            preliminaryMatches.length
        );
        
        // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        let thirdPlaceMatchObj = null;
        if (thirdPlaceMatch) {
            thirdPlaceMatchObj = await generateThirdPlaceMatch(
                tournamentId,
                tournamentMath,
                preliminaryMatches.length + mainMatches.length + 1
            );
        }
        
        // 6. –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–∞—Ç—á–∏
        const allMatches = [
            ...preliminaryMatches,
            ...mainMatches,
            ...(thirdPlaceMatchObj ? [thirdPlaceMatchObj] : [])
        ];
        
        // 7. –°–≤—è–∑—ã–≤–∞–µ–º –º–∞—Ç—á–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
        await linkMatches(allMatches, tournamentMath, thirdPlaceMatchObj);
        
        // 8. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const validation = await validateGeneratedBracket(tournamentId, tournamentMath);
        
        if (!validation.isValid) {
            throw new Error(`–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: ${validation.errors.join(', ')}`);
        }
        
        console.log('='.repeat(60));
        console.log('üéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
        console.log(`   üìä –°–æ–∑–¥–∞–Ω–æ –º–∞—Ç—á–µ–π: ${allMatches.length}`);
        console.log(`   ü•ä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: ${preliminaryMatches.length}`);
        console.log(`   üèÜ –û—Å–Ω–æ–≤–Ω—ã—Ö: ${mainMatches.length}`);
        console.log(`   ü•â –ó–∞ 3-–µ –º–µ—Å—Ç–æ: ${thirdPlaceMatchObj ? 1 : 0}`);
        
        return allMatches;
        
    } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò:', error.message);
        console.error('‚ùå Stack trace:', error.stack);
        throw error;
    }
};

module.exports = {
    generateSingleEliminationBracket,
    calculateTournamentMath,
    distributeParticipants,
    generateRoundNames,
    validateGeneratedBracket,
    clearExistingMatches
}; 