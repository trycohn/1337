// backend/diagnose_tournament_59.js
// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ 59 –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–µ—Ç–∫–∏

const pool = require('./db');

async function diagnoseTournament59() {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–£–†–ù–ò–†–ê 59');
    console.log('='*50);
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        console.log('üìã 1. –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–£–†–ù–ò–†–ï');
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [59]);
        
        if (tournamentResult.rows.length === 0) {
            console.log('‚ùå –¢–£–†–ù–ò–† 59 –ù–ï –ù–ê–ô–î–ï–ù!');
            return;
        }
        
        const tournament = tournamentResult.rows[0];
        console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${tournament.name}`);
        console.log(`   - –°—Ç–∞—Ç—É—Å: ${tournament.status}`);
        console.log(`   - –¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${tournament.participant_type}`);
        console.log(`   - –§–æ—Ä–º–∞—Ç: ${tournament.format}`);
        console.log(`   - –°–æ–∑–¥–∞—Ç–µ–ª—å: ${tournament.created_by}`);
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        console.log('\nüë• 2. –£–ß–ê–°–¢–ù–ò–ö–ò –¢–£–†–ù–ò–†–ê');
        let participants = [];
        
        if (tournament.participant_type === 'solo') {
            const participantsResult = await pool.query(
                'SELECT id, user_id, name, in_team FROM tournament_participants WHERE tournament_id = $1 ORDER BY id',
                [59]
            );
            participants = participantsResult.rows;
        } else {
            const participantsResult = await pool.query(
                'SELECT id, name, creator_id FROM tournament_teams WHERE tournament_id = $1 ORDER BY id',
                [59]
            );
            participants = participantsResult.rows;
        }
        
        console.log(`   - –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}`);
        console.log(`   - –ü–µ—Ä–≤—ã–µ 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
        participants.slice(0, 5).forEach((p, index) => {
            console.log(`     ${index + 1}. ID: ${p.id}, Name: "${p.name}"`);
        });
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—á–∏
        console.log('\n‚öîÔ∏è 3. –ú–ê–¢–ß–ò –¢–£–†–ù–ò–†–ê');
        const matchesResult = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, match_number',
            [59]
        );
        
        console.log(`   - –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: ${matchesResult.rows.length}`);
        
        if (matchesResult.rows.length === 0) {
            console.log('‚ùå –ú–ê–¢–ß–ò –ù–ï –ù–ê–ô–î–ï–ù–´! –°–µ—Ç–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.');
        } else {
            console.log(`   - –ú–∞—Ç—á–∏ –ø–æ —Ä–∞—É–Ω–¥–∞–º:`);
            const matchesByRound = {};
            matchesResult.rows.forEach(match => {
                if (!matchesByRound[match.round]) {
                    matchesByRound[match.round] = [];
                }
                matchesByRound[match.round].push(match);
            });
            
            Object.keys(matchesByRound).sort((a, b) => a - b).forEach(round => {
                const roundMatches = matchesByRound[round];
                console.log(`     –†–∞—É–Ω–¥ ${round}: ${roundMatches.length} –º–∞—Ç—á–µ–π`);
                roundMatches.forEach(match => {
                    const team1 = match.team1_id || 'TBD';
                    const team2 = match.team2_id || 'TBD';
                    const winner = match.winner_team_id || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
                    console.log(`       –ú–∞—Ç—á ${match.id}: ${team1} vs ${team2} (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner})`);
                });
            });
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä)
        if (tournament.participant_type === 'team') {
            console.log('\nüèÜ 4. –ö–û–ú–ê–ù–î–´ –¢–£–†–ù–ò–†–ê');
            const teamsResult = await pool.query(
                'SELECT id, name, creator_id FROM tournament_teams WHERE tournament_id = $1',
                [59]
            );
            
            console.log(`   - –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: ${teamsResult.rows.length}`);
            
            for (const team of teamsResult.rows) {
                const membersResult = await pool.query(
                    'SELECT * FROM tournament_team_members WHERE team_id = $1',
                    [team.id]
                );
                console.log(`     –ö–æ–º–∞–Ω–¥–∞ ${team.name} (ID: ${team.id}): ${membersResult.rows.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            }
        }
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
        console.log('\nüéØ 5. –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ï–¢–ö–ò');
        
        if (participants.length < 2) {
            console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏');
        } else {
            console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: ${participants.length}`);
        }
        
        if (matchesResult.rows.length > 0) {
            console.log('‚ö†Ô∏è –°–µ—Ç–∫–∞ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è');
        } else {
            console.log('‚úÖ –ú–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É');
        }
        
        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        console.log('\nüîç 6. –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í');
        const invalidParticipants = participants.filter(p => 
            typeof p.id !== 'number' || isNaN(p.id) || !p.name
        );
        
        if (invalidParticipants.length > 0) {
            console.log(`‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: ${invalidParticipants.length}`);
            invalidParticipants.forEach((p, index) => {
                console.log(`   ${index + 1}. ID: ${p.id} (${typeof p.id}), Name: "${p.name}"`);
            });
        } else {
            console.log('‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö');
        }
        
        // 7. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüí° 7. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
        
        if (matchesResult.rows.length === 0) {
            console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É —Ç—É—Ä–Ω–∏—Ä–∞');
            console.log('   –ö–æ–º–∞–Ω–¥–∞: POST /api/tournaments/59/generate-bracket');
        } else if (invalidParticipants.length > 0) {
            console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π');
        } else {
            console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É');
            console.log('   –ö–æ–º–∞–Ω–¥–∞: POST /api/tournaments/59/regenerate-bracket');
        }
        
    } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:', error);
        console.error('Stack trace:', error.stack);
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Å–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
async function testBracketGeneration() {
    console.log('\nüß™ –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ï–¢–ö–ò');
    console.log('='*30);
    
    try {
        const { generateBracket } = require('./bracketGenerator');
        
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [59]);
        const tournament = tournamentResult.rows[0];
        
        let participants;
        if (tournament.participant_type === 'solo') {
            const participantsResult = await pool.query(
                'SELECT id, name FROM tournament_participants WHERE tournament_id = $1',
                [59]
            );
            participants = participantsResult.rows;
        } else {
            const participantsResult = await pool.query(
                'SELECT id, name FROM tournament_teams WHERE tournament_id = $1',
                [59]
            );
            participants = participantsResult.rows;
        }
        
        console.log(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants.forEach((p, index) => {
            if (typeof p.id !== 'number' || isNaN(p.id)) {
                throw new Error(`–£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1} –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: ${p.id} (${typeof p.id})`);
            }
        });
        
        console.log('‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ID');
        console.log('üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (—Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö)');
        
        return true;
    } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê –ì–ï–ù–ï–†–ê–¶–ò–ò:', error.message);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
    (async () => {
        await diagnoseTournament59();
        await testBracketGeneration();
        process.exit(0);
    })();
}

module.exports = { diagnoseTournament59, testBracketGeneration }; 