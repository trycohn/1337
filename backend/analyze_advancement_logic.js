// backend/analyze_advancement_logic.js
// –ê–Ω–∞–ª–∏–∑ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ

const pool = require('./db');

class AdvancementLogicAnalyzer {
    /**
     * üß† –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
     */
    async analyzeAdvancementLogic() {
        console.log('üß† –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø –í –ú–û–î–£–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–ï');
        console.log('=' * 70);

        // 1. –ê–Ω–∞–ª–∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ MatchService
        await this.analyzeMatchServiceLogic();

        // 2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        await this.diagnoseExistingTournaments();

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await this.analyzeTransactionSafety();

        // 4. –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        await this.analyzeErrorHandling();

        // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        this.provideTechnicalRecommendations();
    }

    /**
     * üîç –ê–Ω–∞–ª–∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ MatchService._safeAdvanceWinner
     */
    async analyzeMatchServiceLogic() {
        console.log('\nüîç 1. –ê–ù–ê–õ–ò–ó –ê–õ–ì–û–†–ò–¢–ú–ê –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø –í MatchService');
        console.log('-' * 50);

        console.log('üìã –ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞:');
        console.log('‚úÖ 1. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–∞—Ç—á–µ–π —Å FOR UPDATE');
        console.log('‚úÖ 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞');
        console.log('‚úÖ 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞');
        console.log('‚úÖ 4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π');
        console.log('‚úÖ 5. –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å–ª–æ–≤–∏–π');
        console.log('‚úÖ 6. –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');

        console.log('\nüîß –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:');
        console.log('1. if (!nextMatch.team1_id) ‚Üí –ó–∞–Ω–∏–º–∞–µ–º team1_id');
        console.log('2. else if (!nextMatch.team2_id) ‚Üí –ó–∞–Ω–∏–º–∞–µ–º team2_id');
        console.log('3. else ‚Üí –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —É–∂–µ –Ω–∞—à–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º');
        console.log('4. –û—à–∏–±–∫–∞ –µ—Å–ª–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏');

        console.log('\n‚ö° –£–ª—É—á—à–µ–Ω–∏—è –≤ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏:');
        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏');
        console.log('‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ç–∫–∏ –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ');
        console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º');
        console.log('‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');

        // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ
        try {
            const MatchService = require('./services/tournament/MatchService');
            console.log('‚úÖ MatchService —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
            console.log('‚úÖ –ú–µ—Ç–æ–¥—ã: updateSpecificMatchResult, _safeAdvanceWinner, _safeAdvanceLoser');
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MatchService:', error.message);
        }
    }

    /**
     * üè• –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async diagnoseExistingTournaments() {
        console.log('\nüè• 2. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–£–†–ù–ò–†–û–í');
        console.log('-' * 50);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã
            const tournamentsResult = await pool.query(`
                SELECT id, name, status, format, created_at 
                FROM tournaments 
                ORDER BY created_at DESC
            `);

            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${tournamentsResult.rows.length}`);

            let healthyTournaments = 0;
            let problematicTournaments = 0;
            const problems = [];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç—É—Ä–Ω–∏—Ä
            for (const tournament of tournamentsResult.rows) {
                const diagnosis = await this.diagnoseTournamentStructure(tournament.id);
                
                if (diagnosis.issues.length === 0) {
                    healthyTournaments++;
                } else {
                    problematicTournaments++;
                    problems.push({
                        tournamentId: tournament.id,
                        name: tournament.name,
                        status: tournament.status,
                        issues: diagnosis.issues
                    });
                }
            }

            console.log(`‚úÖ –ó–¥–æ—Ä–æ–≤—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã: ${healthyTournaments}`);
            console.log(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã: ${problematicTournaments}`);

            // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            if (problems.length > 0) {
                console.log('\nüö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–£–†–ù–ò–†–´:');
                problems.forEach((problem, index) => {
                    console.log(`\n${index + 1}. –¢—É—Ä–Ω–∏—Ä ${problem.tournamentId}: "${problem.name}" (${problem.status})`);
                    problem.issues.forEach(issue => {
                        console.log(`   ‚ùå ${issue.type}: ${issue.description}`);
                        if (issue.sqlFix) {
                            console.log(`   üîß SQL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${issue.sqlFix}`);
                        }
                    });
                });
            } else {
                console.log('üéâ –í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É!');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error);
        }
    }

    /**
     * üèóÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    async diagnoseTournamentStructure(tournamentId) {
        const issues = [];

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
            const matchesResult = await pool.query(`
                SELECT * FROM matches 
                WHERE tournament_id = $1 
                ORDER BY round, match_number
            `, [tournamentId]);

            const matches = matchesResult.rows;

            if (matches.length === 0) {
                return { issues: [] }; // –ù–µ—Ç –º–∞—Ç—á–µ–π = –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º
            }

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–µ–π
            const nextMatchCounts = {};
            matches.forEach(match => {
                if (match.next_match_id) {
                    nextMatchCounts[match.next_match_id] = (nextMatchCounts[match.next_match_id] || 0) + 1;
                }
            });

            Object.entries(nextMatchCounts).forEach(([nextMatchId, count]) => {
                if (count > 2) {
                    issues.push({
                        type: 'overflow',
                        nextMatchId: parseInt(nextMatchId),
                        incomingMatches: count,
                        description: `–ú–∞—Ç—á ${nextMatchId}: ${count} –≤—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π (–º–∞–∫—Å–∏–º—É–º 2)`,
                        sqlFix: `UPDATE matches SET next_match_id = NULL WHERE next_match_id = ${nextMatchId} AND id = (SELECT id FROM matches WHERE next_match_id = ${nextMatchId} LIMIT 1);`
                    });
                }
            });

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏
            for (const match of matches) {
                if (match.next_match_id) {
                    const nextMatchExists = matches.find(m => m.id === match.next_match_id);
                    if (!nextMatchExists) {
                        issues.push({
                            type: 'broken_link',
                            matchId: match.id,
                            nextMatchId: match.next_match_id,
                            description: `–ú–∞—Ç—á ${match.id} —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç—á ${match.next_match_id}`,
                            sqlFix: `UPDATE matches SET next_match_id = NULL WHERE id = ${match.id};`
                        });
                    }
                }
            }

            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            for (const match of matches) {
                if (match.winner_team_id && match.next_match_id) {
                    const nextMatch = matches.find(m => m.id === match.next_match_id);
                    if (nextMatch) {
                        const winnerInNextMatch = nextMatch.team1_id === match.winner_team_id || 
                                                nextMatch.team2_id === match.winner_team_id;
                        if (!winnerInNextMatch) {
                            issues.push({
                                type: 'advancement_mismatch',
                                matchId: match.id,
                                winnerId: match.winner_team_id,
                                nextMatchId: match.next_match_id,
                                description: `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å ${match.winner_team_id} –∏–∑ –º–∞—Ç—á–∞ ${match.id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ ${match.next_match_id}`,
                                sqlFix: `-- –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ`
                            });
                        }
                    }
                }
            }

            return { issues };

        } catch (error) {
            return { 
                issues: [{
                    type: 'diagnostic_error',
                    description: `–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`
                }]
            };
        }
    }

    /**
     * üîí –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    async analyzeTransactionSafety() {
        console.log('\nüîí 3. –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò');
        console.log('-' * 50);

        console.log('‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏:');
        console.log('  1. FOR UPDATE –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—á–∞—Å—Ç–∫–∞—Ö');
        console.log('  2. BEGIN/COMMIT/ROLLBACK —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        console.log('  3. –¢–∞–π–º–∞—É—Ç—ã –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (5 —Å–µ–∫—É–Ω–¥)');
        console.log('  4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö');
        console.log('  5. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ finally –±–ª–æ–∫–∞—Ö');

        console.log('\nüõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç race conditions:');
        console.log('  ‚úÖ –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏');
        console.log('  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π');
        console.log('  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');

        console.log('\n‚ö° Performance –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
        console.log('  ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫');
        console.log('  ‚úÖ –†–∞–Ω–Ω–µ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤');
        console.log('  ‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    }

    /**
     * üö® –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
     */
    async analyzeErrorHandling() {
        console.log('\nüö® 4. –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö');
        console.log('-' * 50);

        console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫:');
        console.log('  1. –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('  2. –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫');
        console.log('  3. –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞');
        console.log('  4. –ü—Ä–æ–±–ª–µ–º—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ç–∫–∏');
        console.log('  5. –û—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç—ã');
        console.log('  6. –ù–∞—Ä—É—à–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î');

        console.log('\nüîß –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
        console.log('  ‚úÖ –ü–æ–¥—Å—á–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
        console.log('  ‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö');
        console.log('  ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è SQL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
        console.log('  ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
    }

    /**
     * üí° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    provideTechnicalRecommendations() {
        console.log('\nüí° 5. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
        console.log('-' * 50);

        console.log('üöÄ –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:');
        console.log('  ‚úÖ –û–¢–õ–ò–ß–ù–û: –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞');
        console.log('  ‚úÖ –û–¢–õ–ò–ß–ù–û: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
        console.log('  ‚úÖ –û–¢–õ–ò–ß–ù–û: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
        console.log('  ‚úÖ –û–¢–õ–ò–ß–ù–û: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');

        console.log('\nüéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:');
        console.log('  1. üèóÔ∏è –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å: –ö–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–µ–µ—Ç —á–µ—Ç–∫—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å');
        console.log('  2. üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞—â–∏—â–∞—é—Ç –æ—Ç race conditions');
        console.log('  3. üêõ –û—Ç–ª–∞–¥–∫–∞: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–∞–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º');
        console.log('  4. üîß –†–µ–º–æ–Ω—Ç–æ–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å: –õ–µ–≥–∫–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å');
        console.log('  5. üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å: –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤');

        console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('  1. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: node test_advancement_logic.js');
        console.log('  2. üè• –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: node analyze_advancement_logic.js');
        console.log('  3. üöÄ –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º');
        console.log('  4. üìä –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏');

        console.log('\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
        console.log('–õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ');
        console.log('—Å –ø–æ–ª–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –ø—Ä–æ–±–ª–µ–º.');
        console.log('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏! üöÄ');
    }

    /**
     * üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
     */
    async fixProblematicTournaments() {
        console.log('\nüîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–´–• –¢–£–†–ù–ò–†–û–í');
        console.log('-' * 50);

        try {
            const tournamentsResult = await pool.query('SELECT id, name FROM tournaments ORDER BY id');
            let fixedCount = 0;

            for (const tournament of tournamentsResult.rows) {
                const diagnosis = await this.diagnoseTournamentStructure(tournament.id);
                
                if (diagnosis.issues.length > 0) {
                    console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä ${tournament.id}: "${tournament.name}"`);
                    
                    for (const issue of diagnosis.issues) {
                        if (issue.sqlFix && issue.sqlFix !== '-- –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') {
                            try {
                                await pool.query(issue.sqlFix);
                                console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${issue.description}`);
                                fixedCount++;
                            } catch (error) {
                                console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${error.message}`);
                            }
                        }
                    }
                }
            }

            console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${fixedCount}`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function runAnalysis() {
    const analyzer = new AdvancementLogicAnalyzer();
    await analyzer.analyzeAdvancementLogic();
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    // await analyzer.fixProblematicTournaments();
    
    process.exit(0);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = { AdvancementLogicAnalyzer };

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runAnalysis().catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
        process.exit(1);
    });
} 