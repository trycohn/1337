/**
 * –ò–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ CS2 —Å–µ—Ä–≤–µ—Ä–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node reimport_last_match.js [server_id]
 * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: server_id = 1
 */

const pool = require('./db');
const { withMySql, importMatchFromMySql, materializePlayerStatsFromMatchzy } = require('./services/matchzyPollingService');

async function reimportLastMatch() {
  const serverId = parseInt(process.argv[2]) || 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä–≤–µ—Ä ID 1
  
  console.log(`üîÑ –ò–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ ID ${serverId}...\n`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
    const serverResult = await pool.query(
      'SELECT id, name, db_host, db_port, db_user, db_name FROM cs2_servers WHERE id = $1',
      [serverId]
    );
    
    if (!serverResult.rows[0]) {
      console.error(`‚ùå –°–µ—Ä–≤–µ—Ä —Å ID ${serverId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      process.exit(1);
    }
    
    const server = serverResult.rows[0];
    console.log(`üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: ${server.name}`);
    console.log(`üìç –ë–î: ${server.db_host}:${server.db_port || 3306}/${server.db_name}\n`);
    
    if (!server.db_host) {
      console.error(`‚ùå –£ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ MySQL –ë–î (db_host –ø—É—Å—Ç–æ–π)`);
      process.exit(1);
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MySQL –ë–î —Å–µ—Ä–≤–µ—Ä–∞
    await withMySql(async (conn) => {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –º–∞—Ç—á
      const [rows] = await conn.execute(
        `SELECT * FROM matchzy_stats_matches WHERE end_time IS NOT NULL ORDER BY end_time DESC LIMIT 1`
      );
      
      if (rows.length === 0) {
        console.log('‚ö†Ô∏è –í –ë–î —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π');
        process.exit(0);
      }
      
      const matchRow = rows[0];
      const matchid = Number(matchRow.matchid);
      
      console.log(`üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á:`);
      console.log(`   Match ID: ${matchid}`);
      console.log(`   –ö–æ–º–∞–Ω–¥—ã: ${matchRow.team1_name} ${matchRow.team1_score}:${matchRow.team2_score} ${matchRow.team2_name}`);
      console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω: ${matchRow.end_time}\n`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –Ω–∞—à–µ–π –ë–î
      const exists = await pool.query('SELECT matchid FROM matchzy_matches WHERE matchid = $1', [matchid]);
      
      if (exists.rows[0]) {
        console.log('‚ö†Ô∏è –≠—Ç–æ—Ç –º–∞—Ç—á —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
        await pool.query('DELETE FROM matchzy_players WHERE matchid = $1', [matchid]);
        await pool.query('DELETE FROM matchzy_maps WHERE matchid = $1', [matchid]);
        await pool.query('DELETE FROM matchzy_matches WHERE matchid = $1', [matchid]);
        console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã\n');
      }
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ç—á
      console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é –º–∞—Ç—á...');
      const imported = await importMatchFromMySql(matchRow, conn);
      
      if (!imported) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á');
        process.exit(1);
      }
      
      console.log('‚úÖ –ú–∞—Ç—á –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω\n');
      
      // –°–≤—è–∑—ã–≤–∞–µ–º —Å –Ω–∞—à–∏–º–∏ –º–∞—Ç—á–∞–º–∏
      console.log('üîó –°–≤—è–∑—ã–≤–∞—é —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –º–∞—Ç—á–∞–º–∏...');
      await linkOurRefs(matchid);
      
      // –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      console.log('üìä –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤...');
      try {
        const materialized = await materializePlayerStatsFromMatchzy(matchid);
        if (materialized) {
          console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–∞\n');
        } else {
          console.log('‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –º–∞—Ç—á –Ω–µ —Å–≤—è–∑–∞–Ω —Å –Ω–∞—à–∏–º match_id)\n');
        }
      } catch (matErr) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', matErr.message, '\n');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const playersCheck = await pool.query(
        'SELECT steamid64, name, kills, deaths FROM matchzy_players WHERE matchid = $1 LIMIT 5',
        [matchid]
      );
      
      if (playersCheck.rows.length > 0) {
        console.log('üéÆ –ü—Ä–∏–º–µ—Ä—ã –∏–≥—Ä–æ–∫–æ–≤:');
        playersCheck.rows.forEach(p => {
          console.log(`   ${p.name} | Steam64: ${p.steamid64} | K/D: ${p.kills}/${p.deaths}`);
        });
      }
      
    }, serverId);
    
    console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –º–∞—Ç—á–∞–º–∏
async function linkOurRefs(matchid) {
  const client = await pool.connect();
  try {
    const adminLobbyId = deriveLobbyIdFromMatchId(matchid);
    if (adminLobbyId) {
      const admin = await client.query('SELECT match_id FROM admin_match_lobbies WHERE id = $1', [adminLobbyId]);
      const ourMatchId = admin.rows[0]?.match_id;
      if (ourMatchId) {
        await client.query(
          'UPDATE matchzy_matches SET our_match_id = $1, lobby_id = $2 WHERE matchid = $3',
          [ourMatchId, adminLobbyId, matchid]
        );
        console.log(`   ‚úÖ –°–≤—è–∑–∞–ª —Å admin –ª–æ–±–±–∏ ${adminLobbyId}, match_id=${ourMatchId}`);
      }
    }
  } catch (e) {
    console.warn('   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –º–∞—Ç—á–µ–º');
  } finally {
    client.release();
  }
}

function deriveLobbyIdFromMatchId(matchid) {
  try {
    const s = String(matchid);
    if (s.length <= 8) return null;
    const lobbyId = Number(s.slice(0, -8));
    return Number.isInteger(lobbyId) && lobbyId > 0 ? lobbyId : null;
  } catch (_) {
    return null;
  }
}

reimportLastMatch();

