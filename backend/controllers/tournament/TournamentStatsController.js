/**
 * üìä TOURNAMENT STATS CONTROLLER
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
 * @version 1.0.0
 * @date 13 –æ–∫—Ç—è–±—Ä—è 2025
 */

const TournamentStatsService = require('../../services/tournament/TournamentStatsService');
const TournamentStatsRepository = require('../../repositories/tournament/TournamentStatsRepository');

class TournamentStatsController {
    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
     * GET /api/tournaments/:id/stats
     */
    async getTournamentStats(req, res) {
        try {
            const { id } = req.params;

            console.log(`üìä [StatsController] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${id}`);

            const stats = await TournamentStatsService.getTournamentStats(parseInt(id));

            if (!stats.hasStats) {
                return res.json({
                    success: true,
                    hasStats: false,
                    message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—ã–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞.'
                });
            }

            return res.json({
                success: true,
                hasStats: true,
                ...stats
            });

        } catch (error) {
            console.error(`‚ùå [StatsController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error);
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞',
                message: error.message
            });
        }
    }

    /**
     * üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ MVP —Ç—É—Ä–Ω–∏—Ä–∞
     * GET /api/tournaments/:id/stats/mvp
     */
    async getMVP(req, res) {
        try {
            const { id } = req.params;

            console.log(`üèÜ [StatsController] –ó–∞–ø—Ä–æ—Å MVP —Ç—É—Ä–Ω–∏—Ä–∞ ${id}`);

            const allStats = await TournamentStatsRepository.getAllTournamentStats(parseInt(id));

            if (allStats.length === 0) {
                return res.json({
                    success: true,
                    hasMVP: false,
                    message: 'MVP –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
                });
            }

            const mvp = allStats.find(s => s.is_tournament_mvp) || allStats[0];

            return res.json({
                success: true,
                hasMVP: true,
                mvp
            });

        } catch (error) {
            console.error(`‚ùå [StatsController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MVP:`, error);
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MVP —Ç—É—Ä–Ω–∏—Ä–∞',
                message: error.message
            });
        }
    }

    /**
     * üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * GET /api/tournaments/:id/stats/leaderboard?category=most_kills&limit=10
     */
    async getLeaderboard(req, res) {
        try {
            const { id } = req.params;
            const { category = 'most_kills', limit = 10 } = req.query;

            console.log(`üìà [StatsController] –ó–∞–ø—Ä–æ—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${id}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`);

            const leaderboard = await TournamentStatsRepository.getLeaderboard(
                parseInt(id),
                category,
                parseInt(limit)
            );

            return res.json({
                success: true,
                category,
                leaderboard
            });

        } catch (error) {
            console.error(`‚ùå [StatsController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:`, error);
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞',
                message: error.message
            });
        }
    }

    /**
     * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
     * GET /api/tournaments/:id/stats/player/:userId
     */
    async getPlayerStats(req, res) {
        try {
            const { id, userId } = req.params;

            console.log(`üë§ [StatsController] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ ${userId} –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${id}`);

            const stats = await TournamentStatsRepository.getPlayerStats(
                parseInt(id),
                parseInt(userId)
            );

            if (!stats) {
                return res.status(404).json({
                    success: false,
                    error: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }

            return res.json({
                success: true,
                stats
            });

        } catch (error) {
            console.error(`‚ùå [StatsController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞:`, error);
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞',
                message: error.message
            });
        }
    }

    /**
     * üîÑ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
     * POST /api/tournaments/:id/stats/recalculate
     */
    async recalculateStats(req, res) {
        try {
            const { id } = req.params;
            const userId = req.user?.id;

            console.log(`üîÑ [StatsController] –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (–∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞)
            const tournament = await this._getTournament(id);
            
            if (!tournament) {
                return res.status(404).json({
                    success: false,
                    error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }

            const isAdmin = req.user?.role === 'admin' || req.user?.roles?.includes('platform_admin');
            const isCreator = tournament.created_by === userId;

            if (!isAdmin && !isCreator) {
                return res.status(403).json({
                    success: false,
                    error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
                });
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç
            const result = await TournamentStatsService.recalculateTournamentStats(parseInt(id));

            return res.json({
                success: true,
                ...result,
                message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞'
            });

        } catch (error) {
            console.error(`‚ùå [StatsController] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error);
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
                message: error.message
            });
        }
    }

    /**
     * üèÜ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MVP –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
     * POST /api/tournaments/:id/stats/finalize
     */
    async finalizeTournament(req, res) {
        try {
            const { id } = req.params;
            const userId = req.user?.id;

            console.log(`üèÜ [StatsController] –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
            const tournament = await this._getTournament(id);
            
            if (!tournament) {
                return res.status(404).json({
                    success: false,
                    error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }

            const isAdmin = req.user?.role === 'admin' || req.user?.roles?.includes('platform_admin');
            const isCreator = tournament.created_by === userId;

            if (!isAdmin && !isCreator) {
                return res.status(403).json({
                    success: false,
                    error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞'
                });
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            const result = await TournamentStatsService.finalizeTournament(parseInt(id));

            return res.json({
                success: true,
                ...result,
                message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
            });

        } catch (error) {
            console.error(`‚ùå [StatsController] –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:`, error);
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞',
                message: error.message
            });
        }
    }

    /**
     * üîç –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
     * @private
     */
    async _getTournament(id) {
        const pool = require('../../db');
        
        try {
            const result = await pool.query(
                'SELECT id, created_by, status FROM tournaments WHERE id = $1',
                [id]
            );
            return result.rows[0];
        } catch (error) {
            console.error(`‚ùå [StatsController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:`, error);
            return null;
        }
    }
}

module.exports = new TournamentStatsController();

