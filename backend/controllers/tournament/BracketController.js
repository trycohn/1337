/**
 * üèóÔ∏è –ö–û–ù–¢–†–û–õ–õ–ï–† –¢–£–†–ù–ò–†–ù–´–• –°–ï–¢–û–ö
 * 
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π, —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
 * —Ç—É—Ä–Ω–∏—Ä–Ω—ã–º–∏ —Å–µ—Ç–∫–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤
 */

const { BracketGenerationService, SEEDING_TYPES } = require('../../services/tournament/BracketGenerationService');
const { asyncHandler } = require('../../utils/asyncHandler');
const { logTournamentEvent } = require('../../utils/tournament/logger');

/**
 * üéØ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —Å–µ—Ç–æ–∫
 */
class BracketController {
    
    /**
     * üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static generateBracket = asyncHandler(async (req, res) => {
        const startTime = Date.now();
        const tournamentId = parseInt(req.params.id);
        const userId = req.user.id;
        
        console.log(`üöÄ [BracketController] –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            const options = {
                seedingType: req.body.seedingType || 'random',
                thirdPlaceMatch: req.body.thirdPlaceMatch || false,
                seedingOptions: req.body.seedingOptions || {}
            };
            
            console.log(`üéØ –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`, options);
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            if (!Object.values(SEEDING_TYPES).includes(options.seedingType)) {
                return res.status(400).json({
                    success: false,
                    error: `–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${options.seedingType}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${Object.values(SEEDING_TYPES).join(', ')}`
                });
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É
            const result = await BracketGenerationService.generateBracket(
                tournamentId,
                userId,
                options
            );
            
            const duration = Date.now() - startTime;
            
            if (!result.success) {
                console.error(`‚ùå [BracketController] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${duration}ms): ${result.error}`);
                return res.status(400).json({
                    success: false,
                    error: result.error,
                    generationTime: duration
                });
            }
            
            console.log(`‚úÖ [BracketController] –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (${duration}ms)`);
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${result.matches.length} –º–∞—Ç—á–µ–π, ${result.seedingInfo.participantsUsed} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            
            res.status(200).json({
                success: true,
                message: result.message,
                data: {
                    tournament: result.tournament,
                    matchesCount: result.matches.length,
                    excludedParticipantsCount: result.excludedParticipants.length,
                    seedingInfo: result.seedingInfo,
                    bracketMath: result.bracketMath
                },
                generationTime: duration
            });
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [BracketController] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (${duration}ms):`, error);
            
            res.status(500).json({
                success: false,
                error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined,
                generationTime: duration
            });
        }
    });
    
    /**
     * üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static regenerateBracket = asyncHandler(async (req, res) => {
        const startTime = Date.now();
        const tournamentId = parseInt(req.params.id);
        const userId = req.user.id;
        
        console.log(`üîÑ [BracketController] –ó–∞–ø—Ä–æ—Å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            const options = {
                seedingType: req.body.seedingType || 'random',
                thirdPlaceMatch: req.body.thirdPlaceMatch || false,
                seedingOptions: req.body.seedingOptions || {},
                forceRegenerate: true // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            };
            
            console.log(`üéØ –û–ø—Ü–∏–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`, options);
            
            // –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É
            const result = await BracketGenerationService.regenerateBracket(
                tournamentId,
                userId,
                options
            );
            
            const duration = Date.now() - startTime;
            
            if (!result.success) {
                console.error(`‚ùå [BracketController] –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${duration}ms): ${result.error}`);
                return res.status(400).json({
                    success: false,
                    error: result.error,
                    generationTime: duration
                });
            }
            
            console.log(`‚úÖ [BracketController] –°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (${duration}ms)`);
            
            res.status(200).json({
                success: true,
                message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. –°–æ–∑–¥–∞–Ω–æ –º–∞—Ç—á–µ–π: ${result.matches.length}`,
                data: {
                    tournament: result.tournament,
                    matchesCount: result.matches.length,
                    excludedParticipantsCount: result.excludedParticipants.length,
                    seedingInfo: result.seedingInfo,
                    bracketMath: result.bracketMath
                },
                generationTime: duration
            });
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [BracketController] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${duration}ms):`, error);
            
            res.status(500).json({
                success: false,
                error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined,
                generationTime: duration
            });
        }
    });
    
    /**
     * üé≤ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static previewSeeding = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        
        console.log(`üé≤ [BracketController] –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            const options = {
                seedingType: req.query.seedingType || 'random',
                thirdPlaceMatch: req.query.thirdPlaceMatch === 'true',
                seedingOptions: req.query.seedingOptions ? JSON.parse(req.query.seedingOptions) : {}
            };
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            const result = await BracketGenerationService.previewSeeding(
                tournamentId,
                options
            );
            
            if (!result.success) {
                return res.status(400).json({
                    success: false,
                    error: result.error
                });
            }
            
            res.status(200).json({
                success: true,
                message: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω',
                data: {
                    participants: result.participants,
                    excludedParticipants: result.excludedParticipants,
                    seedingInfo: result.seedingInfo,
                    bracketMath: result.bracketMath
                }
            });
            
        } catch (error) {
            console.error(`‚ùå [BracketController] –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`, error);
            
            res.status(500).json({
                success: false,
                error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    });
    
    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static getBracketStatistics = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        
        console.log(`üìä [BracketController] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∫–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            const result = await BracketGenerationService.getBracketStatistics(tournamentId);
            
            if (!result.success) {
                return res.status(400).json({
                    success: false,
                    error: result.error
                });
            }
            
            res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞',
                data: result.statistics
            });
            
        } catch (error) {
            console.error(`‚ùå [BracketController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error);
            
            res.status(500).json({
                success: false,
                error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    });
    
    /**
     * üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     */
    static getSeedingTypes = asyncHandler(async (req, res) => {
        console.log(`üéØ [BracketController] –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è`);
        
        try {
            const seedingTypes = Object.entries(SEEDING_TYPES).map(([key, value]) => ({
                key,
                value,
                displayName: this._getSeedingTypeDisplayName(value),
                description: this._getSeedingTypeDescription(value)
            }));
            
            res.status(200).json({
                success: true,
                message: '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã',
                data: {
                    seedingTypes,
                    defaultType: SEEDING_TYPES.RANDOM
                }
            });
            
        } catch (error) {
            console.error(`‚ùå [BracketController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:`, error);
            
            res.status(500).json({
                success: false,
                error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è'
            });
        }
    });
    
    /**
     * üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ç–∏–ø–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @param {string} seedingType - –¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @returns {string} - –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
     */
    static _getSeedingTypeDisplayName(seedingType) {
        const displayNames = {
            [SEEDING_TYPES.RANDOM]: '–°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
            [SEEDING_TYPES.RANKING]: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É',
            [SEEDING_TYPES.BALANCED]: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
            [SEEDING_TYPES.MANUAL]: '–†—É—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
            [SEEDING_TYPES.SNAKE_DRAFT]: '–ó–º–µ–π–∫–∞ (–¥–ª—è –∫–æ–º–∞–Ω–¥)'
        };
        
        return displayNames[seedingType] || seedingType;
    }
    
    /**
     * üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @param {string} seedingType - –¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @returns {string} - –û–ø–∏—Å–∞–Ω–∏–µ
     */
    static _getSeedingTypeDescription(seedingType) {
        const descriptions = {
            [SEEDING_TYPES.RANDOM]: '–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞',
            [SEEDING_TYPES.RANKING]: '–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É: —Å–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤ —Å–ª–∞–±—ã—Ö –≤ –ø–µ—Ä–≤—ã—Ö —Ä–∞—É–Ω–¥–∞—Ö',
            [SEEDING_TYPES.BALANCED]: '–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π',
            [SEEDING_TYPES.MANUAL]: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏',
            [SEEDING_TYPES.SNAKE_DRAFT]: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –¥—Ä–∞—Ñ—Ç–æ–º'
        };
        
        return descriptions[seedingType] || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
    }
    
    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    static clearBracketResults = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const userId = req.user.id;
        
        console.log(`üóëÔ∏è [BracketController] –ó–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(
                tournamentId,
                userId,
                'bracket_results_cleared',
                { clearedBy: userId }
            );
            
            res.status(200).json({
                success: true,
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã'
            });
            
        } catch (error) {
            console.error(`‚ùå [BracketController] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`, error);
            
            res.status(500).json({
                success: false,
                error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏'
            });
        }
    });
}

module.exports = {
    BracketController,
    SEEDING_TYPES
}; 