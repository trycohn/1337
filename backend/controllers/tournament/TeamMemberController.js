const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const TeamRepository = require('../../repositories/tournament/TeamRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { asyncHandler } = require('../../utils/asyncHandler');
const pool = require('../../db');

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–æ–º –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
 */
class TeamMemberController {
    /**
     * –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
     */
    static addTeamMember = asyncHandler(async (req, res) => {
        const { id: tournamentId, teamId } = req.params;
        const { participantId, userId, nickname } = req.body;

        console.log('‚ûï [TeamMemberController] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É:', {
            tournamentId,
            teamId,
            participantId,
            userId,
            nickname
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(parseInt(tournamentId));
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const isCreator = tournament.created_by === req.user.id;
        const isAdmin = req.user.role === 'admin';
        
        if (!isCreator && !isAdmin) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [tournamentId, req.user.id]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Å—Ç–∞–≤–æ–º –∫–æ–º–∞–Ω–¥' });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        const team = await TeamRepository.getById(parseInt(teamId));
        if (!team || team.tournament_id !== parseInt(tournamentId)) {
            return res.status(404).json({ error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–∞–≤ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        const currentMembers = await pool.query(
            'SELECT COUNT(*) as count FROM tournament_team_members WHERE team_id = $1',
            [teamId]
        );
        const membersCount = parseInt(currentMembers.rows[0].count);
        const maxTeamSize = tournament.team_size || 5;

        if (membersCount >= maxTeamSize) {
            return res.status(400).json({ error: `–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º ${maxTeamSize} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)` });
        }

        let participant;

        // –í–∞—Ä–∏–∞–Ω—Ç 1: –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        if (participantId) {
            participant = await ParticipantRepository.getById(parseInt(participantId));
            if (!participant || participant.tournament_id !== parseInt(tournamentId)) {
                return res.status(404).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ' });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
            if (participant.in_team) {
                return res.status(400).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ' });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
            await pool.query(
                'INSERT INTO tournament_team_members (team_id, user_id, participant_id) VALUES ($1, $2, $3)',
                [teamId, participant.user_id, participantId]
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team
            await ParticipantRepository.updateInTeamStatus([participantId], true);
            
            // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è - —É–±–∏—Ä–∞–µ–º –æ—Ç—Ç—É–¥–∞
            if (participant.in_waiting_list) {
                await pool.query(
                    'UPDATE tournament_participants SET in_waiting_list = FALSE WHERE id = $1',
                    [participantId]
                );
            }
        }
        // –í–∞—Ä–∏–∞–Ω—Ç 2: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else if (userId) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const userCheck = await pool.query('SELECT * FROM users WHERE id = $1', [userId]);
            if (userCheck.rows.length === 0) {
                return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            participant = await ParticipantRepository.create({
                tournament_id: parseInt(tournamentId),
                user_id: userId,
                name: userCheck.rows[0].username
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
            await pool.query(
                'INSERT INTO tournament_team_members (team_id, user_id, participant_id) VALUES ($1, $2, $3)',
                [teamId, userId, participant.id]
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team
            await ParticipantRepository.updateInTeamStatus([participant.id], true);
        }
        // –í–∞—Ä–∏–∞–Ω—Ç 3: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        else if (nickname && nickname.trim()) {
            // –°–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            participant = await ParticipantRepository.create({
                tournament_id: parseInt(tournamentId),
                user_id: null,
                name: nickname.trim()
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É (–±–µ–∑ user_id –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
            await pool.query(
                'INSERT INTO tournament_team_members (team_id, user_id, participant_id) VALUES ($1, $2, $3)',
                [teamId, null, participant.id]
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team
            await ParticipantRepository.updateInTeamStatus([participant.id], true);
        } else {
            return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è' });
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(parseInt(tournamentId), req.user.id, 'team_member_added', {
            teamId: parseInt(teamId),
            teamName: team.name,
            participantId: participant.id,
            participantName: participant.name
        });

        res.json({ 
            success: true,
            message: '–£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É',
            participant
        });
    });

    /**
     * –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
     */
    static removeTeamMember = asyncHandler(async (req, res) => {
        const { id: tournamentId, teamId, participantId } = req.params;

        console.log('üóëÔ∏è [TeamMemberController] –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã:', {
            tournamentId,
            teamId,
            participantId
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(parseInt(tournamentId));
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const isCreator = tournament.created_by === req.user.id;
        const isAdmin = req.user.role === 'admin';
        
        if (!isCreator && !isAdmin) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [tournamentId, req.user.id]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Å—Ç–∞–≤–æ–º –∫–æ–º–∞–Ω–¥' });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–∞–≤ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞' });
        }

        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const participant = await ParticipantRepository.getById(parseInt(participantId));
        if (!participant) {
            return res.status(404).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        await pool.query(
            'DELETE FROM tournament_team_members WHERE team_id = $1 AND participant_id = $2',
            [teamId, participantId]
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team
        await ParticipantRepository.updateInTeamStatus([participantId], false);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(parseInt(tournamentId), req.user.id, 'team_member_removed', {
            teamId: parseInt(teamId),
            participantId: parseInt(participantId),
            participantName: participant.name
        });

        res.json({ 
            success: true,
            message: '–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã'
        });
    });

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
     */
    static getTeamMembers = asyncHandler(async (req, res) => {
        const { id: tournamentId, teamId } = req.params;

        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        const result = await pool.query(`
            SELECT 
                tp.id,
                tp.name,
                tp.user_id,
                tp.faceit_elo,
                tp.cs2_premier_rank,
                u.username,
                u.avatar_url,
                u.faceit_elo as user_faceit_elo,
                u.cs2_premier_rank as user_cs2_premier_rank,
                ttm.is_captain
            FROM tournament_team_members ttm
            JOIN tournament_participants tp ON ttm.participant_id = tp.id
            LEFT JOIN users u ON tp.user_id = u.id
            WHERE ttm.team_id = $1
            ORDER BY ttm.is_captain DESC, tp.name ASC
        `, [teamId]);

        res.json({ 
            success: true,
            members: result.rows
        });
    });
}

module.exports = TeamMemberController;
