const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const TeamRepository = require('../../repositories/tournament/TeamRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { asyncHandler } = require('../../utils/asyncHandler');
const pool = require('../../db');

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–æ–º –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
 */
class TeamMemberController {
    /**
     * –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
     */
    static addTeamMember = asyncHandler(async (req, res) => {
        const { id: tournamentId, teamId } = req.params;
        const { participantId, userId, nickname } = req.body;

        console.log('‚ûï [TeamMemberController] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É:', {
            tournamentId,
            teamId,
            participantId,
            userId,
            nickname
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(parseInt(tournamentId));
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const isCreator = tournament.created_by === req.user.id;
        const isAdmin = req.user.role === 'admin';
        
        if (!isCreator && !isAdmin) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [tournamentId, req.user.id]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Å—Ç–∞–≤–æ–º –∫–æ–º–∞–Ω–¥' });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        const team = await TeamRepository.getById(parseInt(teamId));
        if (!team || team.tournament_id !== parseInt(tournamentId)) {
            return res.status(404).json({ error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–∞–≤ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        const currentMembers = await pool.query(
            'SELECT COUNT(*) as count FROM tournament_team_members WHERE team_id = $1',
            [teamId]
        );
        const membersCount = parseInt(currentMembers.rows[0].count);
        const maxTeamSize = tournament.team_size || 5;

        if (membersCount >= maxTeamSize) {
            return res.status(400).json({ error: `–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º ${maxTeamSize} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)` });
        }

        let participant;

        // –í–∞—Ä–∏–∞–Ω—Ç 1: –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        if (participantId) {
            participant = await ParticipantRepository.getById(parseInt(participantId));
            if (!participant || participant.tournament_id !== parseInt(tournamentId)) {
                return res.status(404).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ' });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
            if (participant.in_team) {
                return res.status(400).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ' });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
            await pool.query(
                'INSERT INTO tournament_team_members (team_id, user_id, participant_id) VALUES ($1, $2, $3)',
                [teamId, participant.user_id, participantId]
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team
            await ParticipantRepository.updateInTeamStatus([participantId], true);
            
            // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è - —É–±–∏—Ä–∞–µ–º –æ—Ç—Ç—É–¥–∞
            if (participant.in_waiting_list) {
                await pool.query(
                    'UPDATE tournament_participants SET in_waiting_list = FALSE WHERE id = $1',
                    [participantId]
                );
            }
        }
        // –í–∞—Ä–∏–∞–Ω—Ç 2: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else if (userId) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const userCheck = await pool.query('SELECT * FROM users WHERE id = $1', [userId]);
            if (userCheck.rows.length === 0) {
                return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            participant = await ParticipantRepository.create({
                tournament_id: parseInt(tournamentId),
                user_id: userId,
                name: userCheck.rows[0].username
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
            await pool.query(
                'INSERT INTO tournament_team_members (team_id, user_id, participant_id) VALUES ($1, $2, $3)',
                [teamId, userId, participant.id]
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team
            await ParticipantRepository.updateInTeamStatus([participant.id], true);
        }
        // –í–∞—Ä–∏–∞–Ω—Ç 3: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        else if (nickname && nickname.trim()) {
            // –°–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            participant = await ParticipantRepository.create({
                tournament_id: parseInt(tournamentId),
                user_id: null,
                name: nickname.trim()
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É (–±–µ–∑ user_id –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
            await pool.query(
                'INSERT INTO tournament_team_members (team_id, user_id, participant_id) VALUES ($1, $2, $3)',
                [teamId, null, participant.id]
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team
            await ParticipantRepository.updateInTeamStatus([participant.id], true);
        } else {
            return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è' });
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(parseInt(tournamentId), req.user.id, 'team_member_added', {
            teamId: parseInt(teamId),
            teamName: team.name,
            participantId: participant.id,
            participantName: participant.name
        });

        res.json({ 
            success: true,
            message: '–£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É',
            participant
        });
    });

    /**
     * –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
     */
    static removeTeamMember = asyncHandler(async (req, res) => {
        const { id: tournamentId, teamId, participantId } = req.params;

        console.log('üóëÔ∏è [TeamMemberController] –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã:', {
            tournamentId,
            teamId,
            participantId
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(parseInt(tournamentId));
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const isCreator = tournament.created_by === req.user.id;
        const isAdmin = req.user.role === 'admin';
        
        if (!isCreator && !isAdmin) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [tournamentId, req.user.id]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Å—Ç–∞–≤–æ–º –∫–æ–º–∞–Ω–¥' });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–∞–≤ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞' });
        }

        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const participant = await ParticipantRepository.getById(parseInt(participantId));
        if (!participant) {
            return res.status(404).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        await pool.query(
            'DELETE FROM tournament_team_members WHERE team_id = $1 AND participant_id = $2',
            [teamId, participantId]
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team
        await ParticipantRepository.updateInTeamStatus([participantId], false);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(parseInt(tournamentId), req.user.id, 'team_member_removed', {
            teamId: parseInt(teamId),
            participantId: parseInt(participantId),
            participantName: participant.name
        });

        res.json({ 
            success: true,
            message: '–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã'
        });
    });

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
     */
    static getTeamMembers = asyncHandler(async (req, res) => {
        const { id: tournamentId, teamId } = req.params;

        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        const result = await pool.query(`
            SELECT 
                tp.id,
                tp.name,
                tp.user_id,
                tp.faceit_elo,
                tp.cs2_premier_rank,
                u.username,
                u.avatar_url,
                u.faceit_elo as user_faceit_elo,
                u.cs2_premier_rank as user_cs2_premier_rank,
                ttm.is_captain
            FROM tournament_team_members ttm
            JOIN tournament_participants tp ON ttm.participant_id = tp.id
            LEFT JOIN users u ON tp.user_id = u.id
            WHERE ttm.team_id = $1
            ORDER BY ttm.is_captain DESC, tp.name ASC
        `, [teamId]);

        res.json({ 
            success: true,
            members: result.rows
        });
    });

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∫–∞–ø–∏—Ç–∞–Ω–∞
     */
    static getGlobalTeamRoster = asyncHandler(async (req, res) => {
        const { id: tournamentId, teamId } = req.params;
        const userId = req.user.id;

        console.log('üîç [TeamMemberController] –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–µ—Ä–∞:', {
            tournamentId,
            teamId,
            userId
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(parseInt(tournamentId));
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        const tournamentTeam = await pool.query(
            'SELECT * FROM tournament_teams WHERE id = $1 AND tournament_id = $2',
            [teamId, tournamentId]
        );

        if (tournamentTeam.rows.length === 0) {
            return res.status(404).json({ error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã
        const captainCheck = await pool.query(
            'SELECT * FROM tournament_team_members WHERE team_id = $1 AND user_id = $2 AND is_captain = true',
            [teamId, userId]
        );

        if (captainCheck.rows.length === 0) {
            return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã' });
        }

        // –ò—â–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–∞–ø–∏—Ç–∞–Ω
        const globalTeam = await pool.query(
            'SELECT * FROM user_teams WHERE captain_id = $1 ORDER BY created_at DESC LIMIT 1',
            [userId]
        );

        if (globalTeam.rows.length === 0) {
            return res.json({ 
                success: true,
                globalTeam: null,
                availablePlayers: [],
                message: '–£ –≤–∞—Å –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã'
            });
        }

        const globalTeamId = globalTeam.rows[0].id;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        const globalMembers = await pool.query(`
            SELECT 
                u.id as user_id,
                u.username,
                u.avatar_url,
                u.faceit_elo,
                u.cs2_premier_rank,
                utm.role,
                (utm.role = 'captain') as is_captain
            FROM user_team_members utm
            JOIN users u ON u.id = utm.user_id
            WHERE utm.team_id = $1
            ORDER BY (utm.role = 'captain') DESC, u.username ASC
        `, [globalTeamId]);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤
        const tournamentRoster = await pool.query(`
            SELECT tp.user_id
            FROM tournament_team_members ttm
            JOIN tournament_participants tp ON ttm.participant_id = tp.id
            WHERE ttm.team_id = $1 AND tp.user_id IS NOT NULL
        `, [teamId]);

        const tournamentUserIds = new Set(tournamentRoster.rows.map(r => r.user_id));

        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Ç–µ, –∫–æ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ)
        const availablePlayers = globalMembers.rows.filter(player => !tournamentUserIds.has(player.user_id));

        console.log('‚úÖ [TeamMemberController] –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤:', {
            globalTeamId,
            totalInGlobal: globalMembers.rows.length,
            alreadyInTournament: tournamentUserIds.size,
            available: availablePlayers.length
        });

        res.json({ 
            success: true,
            globalTeam: {
                id: globalTeamId,
                name: globalTeam.rows[0].name,
                avatar_url: globalTeam.rows[0].avatar_url
            },
            availablePlayers,
            currentRosterCount: tournamentUserIds.size,
            maxTeamSize: tournament.team_size || 5
        });
    });

    /**
     * üÜï –û–±–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞)
     */
    static updateTeamRoster = asyncHandler(async (req, res) => {
        const { id: tournamentId, teamId } = req.params;
        const { memberUserIds } = req.body; // –ú–∞—Å—Å–∏–≤ user_id –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ
        const userId = req.user.id;

        console.log('üîÑ [TeamMemberController] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞:', {
            tournamentId,
            teamId,
            userId,
            newRoster: memberUserIds
        });

        if (!Array.isArray(memberUserIds)) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–∞–≤–∞' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(parseInt(tournamentId));
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ team_size
        const maxTeamSize = tournament.team_size || 5;
        if (memberUserIds.length > maxTeamSize) {
            return res.status(400).json({ error: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ${maxTeamSize}` });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã
        const captainCheck = await pool.query(
            'SELECT * FROM tournament_team_members WHERE team_id = $1 AND user_id = $2 AND is_captain = true',
            [teamId, userId]
        );

        if (captainCheck.rows.length === 0) {
            return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã' });
        }

        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const client = await pool.connect();
        try {
            await client.query('BEGIN');

            // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ (–∫—Ä–æ–º–µ –∫–∞–ø–∏—Ç–∞–Ω–∞)
            const currentRoster = await client.query(`
                SELECT ttm.participant_id, tp.user_id, tp.name
                FROM tournament_team_members ttm
                JOIN tournament_participants tp ON ttm.participant_id = tp.id
                WHERE ttm.team_id = $1 AND ttm.is_captain = false
            `, [teamId]);

            const currentUserIds = currentRoster.rows.map(r => r.user_id).filter(Boolean);

            // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–µ—Å—Ç—å —Å–µ–π—á–∞—Å, –Ω–æ –Ω–µ—Ç –≤ –Ω–æ–≤–æ–º —Å–æ—Å—Ç–∞–≤–µ)
            const toRemove = currentRoster.rows.filter(r => r.user_id && !memberUserIds.includes(r.user_id));

            // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å (–µ—Å—Ç—å –≤ –Ω–æ–≤–æ–º —Å–æ—Å—Ç–∞–≤–µ, –Ω–æ –Ω–µ—Ç —Å–µ–π—á–∞—Å)
            const toAdd = memberUserIds.filter(uid => !currentUserIds.includes(uid));

            console.log('üîÑ [TeamMemberController] –û–ø–µ—Ä–∞—Ü–∏–∏:', {
                toRemove: toRemove.length,
                toAdd: toAdd.length
            });

            // 4. –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for (const member of toRemove) {
                await client.query(
                    'DELETE FROM tournament_team_members WHERE team_id = $1 AND participant_id = $2',
                    [teamId, member.participant_id]
                );
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team
                await client.query(
                    'UPDATE tournament_participants SET in_team = false WHERE id = $1',
                    [member.participant_id]
                );

                console.log(`‚ûñ –£–¥–∞–ª–µ–Ω: ${member.name}`);
            }

            // 5. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for (const newUserId of toAdd) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                const userCheck = await client.query('SELECT * FROM users WHERE id = $1', [newUserId]);
                if (userCheck.rows.length === 0) {
                    console.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let participant = await client.query(
                    'SELECT * FROM tournament_participants WHERE tournament_id = $1 AND user_id = $2',
                    [tournamentId, newUserId]
                );

                let participantId;

                if (participant.rows.length > 0) {
                    // –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    participantId = participant.rows[0].id;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –Ω–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
                    if (participant.rows[0].in_team) {
                        console.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userCheck.rows[0].username} —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ`);
                        continue;
                    }
                } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
                    const newParticipant = await client.query(
                        'INSERT INTO tournament_participants (tournament_id, user_id, name) VALUES ($1, $2, $3) RETURNING id',
                        [tournamentId, newUserId, userCheck.rows[0].username]
                    );
                    participantId = newParticipant.rows[0].id;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—É—Ä–Ω–∏—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                await client.query(
                    'INSERT INTO tournament_team_members (team_id, user_id, participant_id, is_captain) VALUES ($1, $2, $3, false)',
                    [teamId, newUserId, participantId]
                );

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team
                await client.query(
                    'UPDATE tournament_participants SET in_team = true WHERE id = $1',
                    [participantId]
                );

                console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω: ${userCheck.rows[0].username}`);
            }

            await client.query('COMMIT');

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(parseInt(tournamentId), userId, 'team_roster_updated', {
                teamId: parseInt(teamId),
                removed: toRemove.length,
                added: toAdd.length
            });

            res.json({ 
                success: true,
                message: '–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω',
                changes: {
                    added: toAdd.length,
                    removed: toRemove.length
                }
            });

        } catch (error) {
            await client.query('ROLLBACK');
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞:', error);
            throw error;
        } finally {
            client.release();
        }
    });
}

module.exports = TeamMemberController;
