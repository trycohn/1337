const pool = require('../../db');
const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { asyncHandler } = require('../../utils/asyncHandler');

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
 */
class TeamInvitationController {
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
     */
    static sendInvitation = asyncHandler(async (req, res) => {
        const { tournamentId, teamId } = req.params;
        const { userId: invitedUserId, message } = req.body;
        const inviterId = req.user.id;

        console.log('üìß [TeamInvitation] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', {
            tournamentId,
            teamId,
            inviterId,
            invitedUserId
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(parseInt(tournamentId));
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã
        const captainCheck = await pool.query(
            'SELECT * FROM tournament_team_members WHERE team_id = $1 AND user_id = $2 AND is_captain = true',
            [teamId, inviterId]
        );

        if (captainCheck.rows.length === 0) {
            return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—É' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const invitedUser = await pool.query(
            'SELECT id, username, email FROM users WHERE id = $1',
            [invitedUserId]
        );

        if (invitedUser.rows.length === 0) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ
        const participantCheck = await pool.query(`
            SELECT tp.id, tp.in_team
            FROM tournament_participants tp
            WHERE tp.tournament_id = $1 AND tp.user_id = $2
        `, [tournamentId, invitedUserId]);

        if (participantCheck.rows.length > 0 && participantCheck.rows[0].in_team) {
            return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const existingInvitation = await pool.query(
            'SELECT * FROM tournament_team_invitations WHERE team_id = $1 AND invited_user_id = $2 AND status = $3',
            [teamId, invitedUserId, 'pending']
        );

        if (existingInvitation.rows.length > 0) {
            return res.status(400).json({ error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É' });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        const teamInfo = await pool.query(
            'SELECT name FROM tournament_teams WHERE id = $1',
            [teamId]
        );

        const teamName = teamInfo.rows[0]?.name || '–ö–æ–º–∞–Ω–¥–∞';

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const invitation = await pool.query(`
            INSERT INTO tournament_team_invitations 
                (tournament_id, team_id, inviter_id, invited_user_id, message, status)
            VALUES ($1, $2, $3, $4, $5, 'pending')
            RETURNING *
        `, [tournamentId, teamId, inviterId, invitedUserId, message]);

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await pool.query(`
            INSERT INTO notifications (user_id, message, type, created_at)
            VALUES ($1, $2, $3, NOW())
        `, [
            invitedUserId,
            `–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É "${teamName}" —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}"`,
            'tournament_team_invitation'
        ]);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(parseInt(tournamentId), inviterId, 'team_invitation_sent', {
            teamId: parseInt(teamId),
            invitedUserId: invitedUserId,
            teamName: teamName
        });

        res.status(201).json({ 
            success: true,
            message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            invitation: invitation.rows[0]
        });
    });

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static getMyInvitations = asyncHandler(async (req, res) => {
        const userId = req.user.id;

        const invitations = await pool.query(`
            SELECT 
                tti.*,
                t.name as tournament_name,
                t.game,
                t.start_date,
                tt.name as team_name,
                u.username as inviter_username,
                u.avatar_url as inviter_avatar
            FROM tournament_team_invitations tti
            JOIN tournaments t ON t.id = tti.tournament_id
            JOIN tournament_teams tt ON tt.id = tti.team_id
            JOIN users u ON u.id = tti.inviter_id
            WHERE tti.invited_user_id = $1 AND tti.status = 'pending'
            ORDER BY tti.created_at DESC
        `, [userId]);

        res.json({ 
            success: true,
            invitations: invitations.rows
        });
    });

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
     */
    static getTeamInvitations = asyncHandler(async (req, res) => {
        const { tournamentId, teamId } = req.params;
        const userId = req.user.id;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã
        const captainCheck = await pool.query(
            'SELECT * FROM tournament_team_members WHERE team_id = $1 AND user_id = $2 AND is_captain = true',
            [teamId, userId]
        );

        if (captainCheck.rows.length === 0) {
            return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è' });
        }

        const invitations = await pool.query(`
            SELECT 
                tti.*,
                u.username as invited_username,
                u.avatar_url as invited_avatar,
                u.faceit_elo,
                u.cs2_premier_rank
            FROM tournament_team_invitations tti
            JOIN users u ON u.id = tti.invited_user_id
            WHERE tti.team_id = $1
            ORDER BY 
                CASE tti.status 
                    WHEN 'pending' THEN 1
                    WHEN 'accepted' THEN 2
                    WHEN 'rejected' THEN 3
                    WHEN 'cancelled' THEN 4
                END,
                tti.created_at DESC
        `, [teamId]);

        res.json({ 
            success: true,
            invitations: invitations.rows
        });
    });

    /**
     * –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
     */
    static acceptInvitation = asyncHandler(async (req, res) => {
        const { invitationId } = req.params;
        const userId = req.user.id;

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const invitation = await pool.query(
            'SELECT * FROM tournament_team_invitations WHERE id = $1 AND invited_user_id = $2',
            [invitationId, userId]
        );

        if (invitation.rows.length === 0) {
            return res.status(404).json({ error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }

        const inv = invitation.rows[0];

        if (inv.status !== 'pending') {
            return res.status(400).json({ error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(inv.tournament_id);
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–¢—É—Ä–Ω–∏—Ä —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' });
        }

        const client = await pool.connect();
        try {
            await client.query('BEGIN');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ
            const memberCheck = await client.query(
                'SELECT * FROM tournament_team_members ttm JOIN tournament_participants tp ON ttm.participant_id = tp.id WHERE ttm.team_id = $1 AND tp.user_id = $2',
                [inv.team_id, userId]
            );

            if (memberCheck.rows.length > 0) {
                await client.query('ROLLBACK');
                return res.status(400).json({ error: '–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ' });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥—ã
            const teamSize = await client.query(
                'SELECT COUNT(*) as count FROM tournament_team_members WHERE team_id = $1',
                [inv.team_id]
            );

            const maxSize = tournament.team_size || 5;
            if (parseInt(teamSize.rows[0].count) >= maxSize) {
                await client.query('ROLLBACK');
                return res.status(400).json({ error: '–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
            }

            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
            let participant = await client.query(
                'SELECT * FROM tournament_participants WHERE tournament_id = $1 AND user_id = $2',
                [inv.tournament_id, userId]
            );

            let participantId;

            if (participant.rows.length > 0) {
                participantId = participant.rows[0].id;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
                if (participant.rows[0].in_team) {
                    await client.query('ROLLBACK');
                    return res.status(400).json({ error: '–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞' });
                }
            } else {
                // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                const newParticipant = await client.query(
                    'INSERT INTO tournament_participants (tournament_id, user_id, name) VALUES ($1, $2, $3) RETURNING id',
                    [inv.tournament_id, userId, req.user.username]
                );
                participantId = newParticipant.rows[0].id;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
            await client.query(
                'INSERT INTO tournament_team_members (team_id, user_id, participant_id, is_captain) VALUES ($1, $2, $3, false)',
                [inv.team_id, userId, participantId]
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ in_team
            await client.query(
                'UPDATE tournament_participants SET in_team = true WHERE id = $1',
                [participantId]
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            await client.query(
                'UPDATE tournament_team_invitations SET status = $1, responded_at = NOW(), updated_at = NOW() WHERE id = $2',
                ['accepted', invitationId]
            );

            await client.query('COMMIT');

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(inv.tournament_id, userId, 'team_invitation_accepted', {
                teamId: inv.team_id,
                invitationId: invitationId
            });

            res.json({ 
                success: true,
                message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!'
            });

        } catch (error) {
            await client.query('ROLLBACK');
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
            throw error;
        } finally {
            client.release();
        }
    });

    /**
     * –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
     */
    static rejectInvitation = asyncHandler(async (req, res) => {
        const { invitationId } = req.params;
        const userId = req.user.id;

        const invitation = await pool.query(
            'SELECT * FROM tournament_team_invitations WHERE id = $1 AND invited_user_id = $2',
            [invitationId, userId]
        );

        if (invitation.rows.length === 0) {
            return res.status(404).json({ error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }

        if (invitation.rows[0].status !== 'pending') {
            return res.status(400).json({ error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' });
        }

        await pool.query(
            'UPDATE tournament_team_invitations SET status = $1, responded_at = NOW(), updated_at = NOW() WHERE id = $2',
            ['rejected', invitationId]
        );

        res.json({ 
            success: true,
            message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        });
    });

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–∫–∞–ø–∏—Ç–∞–Ω)
     */
    static cancelInvitation = asyncHandler(async (req, res) => {
        const { invitationId } = req.params;
        const userId = req.user.id;

        const invitation = await pool.query(
            'SELECT * FROM tournament_team_invitations WHERE id = $1 AND inviter_id = $2',
            [invitationId, userId]
        );

        if (invitation.rows.length === 0) {
            return res.status(404).json({ error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }

        if (invitation.rows[0].status !== 'pending') {
            return res.status(400).json({ error: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' });
        }

        await pool.query(
            'UPDATE tournament_team_invitations SET status = $1, updated_at = NOW() WHERE id = $2',
            ['cancelled', invitationId]
        );

        res.json({ 
            success: true,
            message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        });
    });
}

module.exports = TeamInvitationController;

