const MixTeamService = require('../../services/tournament/MixTeamService');
const TournamentService = require('../../services/tournament/TournamentService');
const BracketService = require('../../services/tournament/BracketService');
const { asyncHandler } = require('../../utils/tournament/asyncHandler');
const { broadcastTournamentUpdate } = require('../../notifications');
const { TournamentValidator } = require('../../utils/tournament/TournamentValidator');
const MatchService = require('../../services/tournament/MatchService');
const TeamRepository = require('../../repositories/tournament/TeamRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const { migrateExistingTeamsCaptainsSafe } = require('../../migrate_existing_teams_captains_safe');
const poolModule = require('../../db');
const pool = poolModule.pool || poolModule;

class MixTeamController {
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–∫—Å –∫–æ–º–∞–Ω–¥
     * POST /api/tournaments/:id/mix-generate-teams
     */
    static generateMixTeams = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const { ratingType = 'faceit', shuffle = false } = req.body;
        const userId = req.user.id;

        console.log(`üéØ [MixTeamController] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–∫—Å –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasPermission = await TournamentService.checkUserPermission(tournamentId, userId, 'manage_teams');
        if (!hasPermission) {
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∏–∫—Å –∫–æ–º–∞–Ω–¥
        const tournament = await TournamentService.getTournament(tournamentId);
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (tournament.format !== 'mix') {
            return res.status(400).json({ 
                error: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
            });
        }

        if (tournament.status !== 'active') {
            return res.status(400).json({ 
                error: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ —Å–µ—Ç–∫–∞
        const hasMatches = await TournamentService.hasMatches(tournamentId);
        if (hasMatches) {
            return res.status(400).json({ 
                error: '–ù–µ–ª—å–∑—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏' 
            });
        }

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
            const result = await MixTeamService.generateTeams(
                tournamentId
            );

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            const updatedTournament = await TournamentService.getTournamentDetails(tournamentId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            broadcastTournamentUpdate(tournamentId, updatedTournament);

            console.log(`‚úÖ [MixTeamController] –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${result.teams.length} –∫–æ–º–∞–Ω–¥`);

            res.status(200).json({
                success: true,
                message: `–£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–º–∞–Ω–¥—ã`,
                teams: result.teams,
                summary: result.summary,
                tournament: updatedTournament
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥' 
            });
        }
    });

    /**
     * –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Å –∫–æ–º–∞–Ω–¥ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–µ—Ç–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
     * POST /api/tournaments/:id/mix-regenerate-teams
     */
    static regenerateMixTeams = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const { ratingType = 'faceit', shuffle = true } = req.body;
        const userId = req.user.id;

        console.log(`üîÑ [MixTeamController] –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasPermission = await TournamentService.checkUserPermission(tournamentId, userId, 'manage_teams');
        if (!hasPermission) {
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ä–Ω–∏—Ä
        const tournament = await TournamentService.getTournament(tournamentId);
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (tournament.format !== 'mix') {
            return res.status(400).json({ 
                error: '–ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
            });
        }

        // üÜï –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        if (tournament.status !== 'active') {
            return res.status(400).json({ 
                error: '–ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
            });
        }

        try {
            // üÜï –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –°–ï–¢–ö–ê –ò –£–î–ê–õ–Ø–ï–ú –ï–Å –ü–ï–†–ï–î –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–ï–ú
            const hasMatches = await TournamentService.hasMatches(tournamentId);
            if (hasMatches) {
                console.log(`üóëÔ∏è [MixTeamController] –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Ç–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥`);
                
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞
                await BracketService.clearBracket(tournamentId, userId);
                
                console.log(`‚úÖ [MixTeamController] –°–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥`);
            }

            // –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º
            const result = await MixTeamService.generateTeams(
                tournamentId
            );

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            const updatedTournament = await TournamentService.getTournamentDetails(tournamentId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            broadcastTournamentUpdate(tournamentId, updatedTournament);

            console.log(`‚úÖ [MixTeamController] –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã: ${result.teams.length} –∫–æ–º–∞–Ω–¥`);

            res.status(200).json({
                success: true,
                message: hasMatches ? 
                    `–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã. –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ.` :
                    `–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã`,
                teams: result.teams,
                summary: result.summary,
                tournament: updatedTournament,
                isRegeneration: true,
                bracketDeleted: hasMatches
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥' 
            });
        }
    });

    /**
     * üéØ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ú–ê–ù–î (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞)
     */
    static formTeams = asyncHandler(async (req, res) => {
        console.log(`üöÄ [MixTeamController.formTeams] –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${req.params.id}`);
        console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:`, req.body);
        
        const tournamentId = parseInt(req.params.id);
        const userId = req.user.id;
        const { ratingType = 'faceit', teamSize } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        const validationResult = TournamentValidator.validateFormTeamsRequest({
            tournamentId,
            userId,
            ratingType,
            teamSize
        });
        
        if (!validationResult.isValid) {
            console.log(`‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:`, validationResult.errors);
            return res.status(400).json({ 
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                details: validationResult.errors 
            });
        }
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const hasPermission = await TournamentService.checkUserPermission(tournamentId, userId, 'manage_teams');
            if (!hasPermission) {
                return res.status(403).json({ 
                    error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥' 
                });
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä
            const tournament = await TournamentService.getTournament(tournamentId);
            if (!tournament) {
                return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
            
            if (tournament.format !== 'mix') {
                return res.status(400).json({ 
                    error: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }
            
            if (tournament.status !== 'active') {
                return res.status(400).json({ 
                    error: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ç–∫–∞ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞
            const matches = await MatchService.getMatchesByTournament(tournamentId);
            if (matches && matches.length > 0) {
                return res.status(400).json({ 
                    error: '–ù–µ–ª—å–∑—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏' 
                });
            }
            
            console.log(`‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥`);
            
            // üÜï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú (–±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ ratingType)
            const result = await MixTeamService.generateTeams(tournamentId);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, userId, 'mix_teams_generated', {
                teamsCount: result.teams.length,
                participantsCount: result.summary.participantsInTeams,
                ratingType: result.summary.ratingType,
                algorithm: result.summary.algorithm,
                balance: result.summary.balance,
                duration: result.summary.duration
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            await sendTournamentChatAnnouncement(
                tournamentId,
                `üèÜ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –º–∏–∫—Å –∫–æ–º–∞–Ω–¥—ã —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º! –°–æ–∑–¥–∞–Ω–æ ${result.teams.length} –∫–æ–º–∞–Ω–¥ –∏–∑ ${result.summary.participantsInTeams} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ë–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥: ${result.summary.balance.percentage}% (${result.summary.balance.isGood ? '–æ—Ç–ª–∏—á–Ω—ã–π' : '—Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'})`
            );
            
            console.log(`üéâ [MixTeamController.formTeams] –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ ${result.summary.duration}ms`);
            
            res.status(200).json({
                success: true,
                message: `–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ${result.summary.algorithm === 'optimal_pairs' ? '–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–ø–∞—Ä–Ω–æ–≥–æ' : '—É–º–Ω–æ–π –∑–º–µ–π–∫–∏'} –∞–ª–≥–æ—Ä–∏—Ç–º–∞`,
                teams: result.teams,
                summary: result.summary
            });
            
        } catch (error) {
            console.error(`‚ùå [MixTeamController.formTeams] –û—à–∏–±–∫–∞:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥',
                details: process.env.NODE_ENV === 'development' ? error.stack : undefined
            });
        }
    });

    /**
     * üîÑ –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞)
     */
    static regenerateTeams = asyncHandler(async (req, res) => {
        console.log(`üîÑ [MixTeamController.regenerateTeams] –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${req.params.id}`);
        
        const tournamentId = parseInt(req.params.id);
        const { shuffle = true } = req.body;
        const userId = req.user.id;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const hasPermission = await TournamentService.checkUserPermission(tournamentId, userId, 'manage_teams');
            if (!hasPermission) {
                return res.status(403).json({ 
                    error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥' 
                });
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
            const tournament = await TournamentService.getTournament(tournamentId);
            if (!tournament) {
                return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }
            
            if (tournament.format !== 'mix') {
                return res.status(400).json({ 
                    error: '–ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }
            
            if (tournament.status !== 'active') {
                return res.status(400).json({ 
                    error: '–ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
            const existingTeams = await TeamRepository.getByTournamentId(tournamentId);
            if (!existingTeams || existingTeams.length === 0) {
                return res.status(400).json({ 
                    error: '–ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.' 
                });
            }
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingTeams.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            let bracketDeleted = false;
            const matches = await MatchService.getMatchesByTournament(tournamentId);
            if (matches && matches.length > 0) {
                console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É (${matches.length} –º–∞—Ç—á–µ–π)`);
                await BracketService.clearBracket(tournamentId);
                bracketDeleted = true;
            }
            
            // üÜï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú –î–õ–Ø –ü–ï–†–ï–§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø (–±–µ–∑ ratingType)
            console.log(`üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º (shuffle: ${shuffle})`);
            const result = await MixTeamService.generateTeams(tournamentId);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
            await logTournamentEvent(tournamentId, userId, 'mix_teams_regenerated', {
                previousTeamsCount: existingTeams.length,
                newTeamsCount: result.teams.length,
                participantsCount: result.summary.participantsInTeams,
                ratingType: result.summary.ratingType,
                algorithm: result.summary.algorithm,
                balance: result.summary.balance,
                bracketDeleted: bracketDeleted,
                shuffle: shuffle,
                duration: result.summary.duration
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            let chatMessage = `üîÑ –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º! –°–æ–∑–¥–∞–Ω–æ ${result.teams.length} –∫–æ–º–∞–Ω–¥ –∏–∑ ${result.summary.participantsInTeams} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ë–∞–ª–∞–Ω—Å: ${result.summary.balance.percentage}%`;
            if (bracketDeleted) {
                chatMessage += '. ‚ö†Ô∏è –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.';
            }
            
            await sendTournamentChatAnnouncement(tournamentId, chatMessage);
            
            console.log(`üéâ [MixTeamController.regenerateTeams] –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ ${result.summary.duration}ms`);
            
            res.status(200).json({
                success: true,
                message: bracketDeleted 
                    ? '–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã, —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É.'
                    : '–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã',
                teams: result.teams,
                summary: result.summary,
                bracketDeleted: bracketDeleted
            });
            
        } catch (error) {
            console.error(`‚ùå [MixTeamController.regenerateTeams] –û—à–∏–±–∫–∞:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥',
                details: process.env.NODE_ENV === 'development' ? error.stack : undefined
            });
        }
    });

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –≥—Ä—É–ø–ø—ã)
     * GET /api/tournaments/:id/original-participants
     */
    static getOriginalParticipants = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);

        console.log(`üîç [MixTeamController] –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            const participantsData = await MixTeamService.getOriginalParticipants(tournamentId);

            console.log(`‚úÖ [MixTeamController] –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantsData.total} (–≤ –∫–æ–º–∞–Ω–¥–∞—Ö: ${participantsData.inTeamCount}, –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: ${participantsData.notInTeamCount})`);

            res.json(participantsData);

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' 
            });
        }
    });

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞
     * PATCH /api/tournaments/:id/team-size
     */
    static updateTeamSize = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const { teamSize } = req.body;
        const userId = req.user.id;

        console.log(`‚öôÔ∏è [MixTeamController] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ ${teamSize}`);

        if (!teamSize || ![2, 3, 4, 5].includes(parseInt(teamSize, 10))) {
            return res.status(400).json({ 
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 2, 3, 4, 5' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasPermission = await TournamentService.checkUserPermission(tournamentId, userId, 'manage_settings');
        if (!hasPermission) {
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—É—Ä–Ω–∏—Ä–∞' 
            });
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
            const tournament = await TournamentService.getTournament(tournamentId);
            if (!tournament) {
                return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            if (tournament.format !== 'mix') {
                return res.status(400).json({ 
                    error: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }

            if (!['active', 'pending'].includes(tournament.status)) {
                return res.status(400).json({ 
                    error: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ active –∏–ª–∏ pending' 
                });
            }

            // üîß –£–î–ê–õ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê: –¢–µ–ø–µ—Ä—å —Å–µ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
            // –†–∞–Ω–µ–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ hasMatches –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
            // –¢–µ–ø–µ—Ä—å: TournamentService.updateTeamSize –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —Å–µ—Ç–∫—É

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
            const updatedTournament = await TournamentService.updateTeamSize(tournamentId, teamSize, userId);

            console.log(`‚úÖ [MixTeamController] –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${teamSize}`);

            res.status(200).json({
                success: true,
                message: `–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${teamSize}`,
                tournament: updatedTournament
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã' 
            });
        }
    });

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
     * GET /api/tournaments/:id/teams
     */
    static getTeams = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);

        console.log(`üèÜ [MixTeamController] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            // üîí Backend‚Äëgate –¥–ª—è Full Mix: –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–Ω–∞–ø—à–æ—Ç –∏–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫
            // –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–Ω–∞–ø—à–æ—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –Ω–µ–∞–¥–º–∏–Ω-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
            // (—ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—É–±–ª–∏—á–Ω—ã–π, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º)
            const snapRes = await pool.query(
                `SELECT approved_teams
                 FROM full_mix_snapshots
                 WHERE tournament_id = $1
                 ORDER BY round_number DESC
                 LIMIT 1`,
                [tournamentId]
            );
            const lastApproved = snapRes.rows.length ? !!snapRes.rows[0].approved_teams : null;
            const previewRes = await pool.query(
                `SELECT 1 FROM full_mix_previews WHERE tournament_id = $1 LIMIT 1`,
                [tournamentId]
            );
            const hasPreview = previewRes.rows.length > 0;
            const hasFullMixFlow = snapRes.rows.length > 0 || hasPreview;
            if (hasFullMixFlow && lastApproved !== true) {
                console.log(`üõ°Ô∏è [MixTeamController] Full Mix flow detected, not approved ‚Üí —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã`);
                return res.json([]);
            }

            const teams = await TournamentService.getTeams(tournamentId);

            console.log(`‚úÖ [MixTeamController] –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${teams.length}`);

            res.json(teams);

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞' 
            });
        }
    });

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–∞–Ω–¥
     * POST /api/tournaments/:id/mix-balance-check
     */
    static checkTeamBalance = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const { ratingType = 'faceit' } = req.body;

        console.log(`‚öñÔ∏è [MixTeamController] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            const teams = await TournamentService.getTeams(tournamentId);
            
            if (teams.length === 0) {
                return res.status(400).json({ 
                    error: '–í —Ç—É—Ä–Ω–∏—Ä–µ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞' 
                });
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ MixTeamService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
            const balanceCheck = MixTeamService.checkTeamBalance(teams, ratingType);

            console.log(`‚úÖ [MixTeamController] –ë–∞–ª–∞–Ω—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω: ${Math.round(balanceCheck.percentageDiff)}%`);

            res.json({
                success: true,
                balanceCheck,
                teams: teams.length,
                message: balanceCheck.isBalanced ? 
                    `–ö–æ–º–∞–Ω–¥—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã (—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${Math.round(balanceCheck.percentageDiff)}%)` :
                    `–ö–æ–º–∞–Ω–¥—ã –Ω–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã (—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${Math.round(balanceCheck.percentageDiff)}%)`
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–∞–Ω–¥' 
            });
        }
    });

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
     * POST /api/tournaments/:id/mix-clear-teams
     */
    static clearMixTeams = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const userId = req.user.id;

        console.log(`üóëÔ∏è [MixTeamController] –û—á–∏—Å—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasPermission = await TournamentService.checkUserPermission(tournamentId, userId, 'manage_teams');
        if (!hasPermission) {
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–∞–Ω–¥' 
            });
        }

        try {
            const tournament = await TournamentService.getTournament(tournamentId);
            if (!tournament) {
                return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            if (tournament.format !== 'mix') {
                return res.status(400).json({ 
                    error: '–û—á–∏—Å—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }

            if (tournament.status !== 'active') {
                return res.status(400).json({ 
                    error: '–û—á–∏—Å—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ —Å–µ—Ç–∫–∞
            const hasMatches = await TournamentService.hasMatches(tournamentId);
            if (hasMatches) {
                return res.status(400).json({ 
                    error: '–ù–µ–ª—å–∑—è –æ—á–∏—â–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏' 
                });
            }

            // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            await MixTeamService.clearTeams(tournamentId, userId);

            console.log(`‚úÖ [MixTeamController] –ö–æ–º–∞–Ω–¥—ã –æ—á–∏—â–µ–Ω—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

            res.status(200).json({
                success: true,
                message: '–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã'
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–∞–Ω–¥:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–º–∞–Ω–¥' 
            });
        }
    });

    /**
     * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–∫—Å –∫–æ–º–∞–Ω–¥
     * GET /api/tournaments/:id/mix-stats
     */
    static getMixStats = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        
        try {
            const stats = await MixTeamService.getMixStats(tournamentId);
            res.json(stats);
        } catch (error) {
            console.error(`‚ùå [getMixStats] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:`, error);
            res.status(500).json({ 
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏–∫—Å –∫–æ–º–∞–Ω–¥',
                details: error.message 
            });
        }
    });

    /**
     * üÜï –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ö–ê–ü–ò–¢–ê–ù–ê –ö–û–ú–ê–ù–î–´
     * POST /api/tournaments/:id/teams/:teamId/set-captain
     */
    static setCaptain = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const teamId = parseInt(req.params.teamId);
        const { userId: targetUserId } = req.body;
        const currentUserId = req.user.id;

        console.log(`üëë [MixTeamController] –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã ${teamId} –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasPermission = await TournamentService.checkUserPermission(tournamentId, currentUserId, 'manage_teams');
        if (!hasPermission) {
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏' 
            });
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
            const tournament = await TournamentService.getTournament(tournamentId);
            if (!tournament) {
                return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            if (tournament.format !== 'mix') {
                return res.status(400).json({ 
                    error: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            const team = await TeamRepository.getById(teamId);
            if (!team || team.tournament_id !== tournamentId) {
                return res.status(404).json({ error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞
            const members = await TeamRepository.getMembers(teamId);
            const targetMember = members.find(m => m.user_id === targetUserId);
            
            if (!targetMember) {
                return res.status(400).json({ 
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã' 
                });
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞–ø–∏—Ç–∞–Ω–∞
            const ratingType = tournament.mix_rating_type || 'faceit';
            const captainRating = MixTeamService.normalizeParticipantRating(targetMember, ratingType);

            // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
            const captain = await TeamRepository.setCaptain(teamId, targetUserId, captainRating);

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, currentUserId, 'captain_assigned', {
                team_id: teamId,
                captain_user_id: targetUserId,
                captain_rating: captainRating,
                rating_type: ratingType
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            await sendTournamentChatAnnouncement(
                tournamentId,
                `üëë –ù–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã "${team.name}": ${targetMember.username || targetMember.participant_name} (—Ä–µ–π—Ç–∏–Ω–≥: ${captainRating})`
            );

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ø–∏—Ç–∞–Ω–µ
            const captainInfo = await TeamRepository.getTeamCaptain(teamId);

            console.log(`‚úÖ [MixTeamController] –ö–∞–ø–∏—Ç–∞–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω: ${targetMember.username} (—Ä–µ–π—Ç–∏–Ω–≥: ${captainRating})`);

            res.status(200).json({
                success: true,
                message: `–ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω`,
                captain: captainInfo,
                team_id: teamId,
                captain_rating: captainRating
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω–∞' 
            });
        }
    });

    /**
     * üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ö–ê–ü–ò–¢–ê–ù–ï –ö–û–ú–ê–ù–î–´
     * GET /api/tournaments/:id/teams/:teamId/captain
     */
    static getTeamCaptain = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const teamId = parseInt(req.params.teamId);

        console.log(`üîç [MixTeamController] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ø–∏—Ç–∞–Ω–µ –∫–æ–º–∞–Ω–¥—ã ${teamId}`);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            const team = await TeamRepository.getById(teamId);
            if (!team || team.tournament_id !== tournamentId) {
                return res.status(404).json({ error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ø–∏—Ç–∞–Ω–µ
            const captain = await TeamRepository.getTeamCaptain(teamId);

            if (!captain) {
                return res.status(404).json({ 
                    error: '–£ –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞' 
                });
            }

            console.log(`‚úÖ [MixTeamController] –ö–∞–ø–∏—Ç–∞–Ω –Ω–∞–π–¥–µ–Ω: ${captain.username}`);

            res.status(200).json({
                success: true,
                captain: captain,
                team_id: teamId
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ø–∏—Ç–∞–Ω–µ' 
            });
        }
    });

    /**
     * üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ö–ê–ü–ò–¢–ê–ù–ê –ü–û –†–ï–ô–¢–ò–ù–ì–£
     * POST /api/tournaments/:id/teams/:teamId/auto-assign-captain
     */
    static autoAssignCaptain = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const teamId = parseInt(req.params.teamId);
        const { ratingType } = req.body;
        const currentUserId = req.user.id;

        console.log(`üéØ [MixTeamController] –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã ${teamId} –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasPermission = await TournamentService.checkUserPermission(tournamentId, currentUserId, 'manage_teams');
        if (!hasPermission) {
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏' 
            });
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
            const tournament = await TournamentService.getTournament(tournamentId);
            if (!tournament) {
                return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            if (tournament.format !== 'mix') {
                return res.status(400).json({ 
                    error: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            const team = await TeamRepository.getById(teamId);
            if (!team || team.tournament_id !== tournamentId) {
                return res.status(404).json({ error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞
            const finalRatingType = ratingType || tournament.mix_rating_type || 'faceit';

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
            const captain = await TeamRepository.autoAssignCaptain(teamId, finalRatingType);

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, currentUserId, 'captain_auto_assigned', {
                team_id: teamId,
                captain_user_id: captain.user_id,
                captain_rating: captain.captain_rating,
                rating_type: finalRatingType
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            await sendTournamentChatAnnouncement(
                tournamentId,
                `üéØ –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã "${team.name}": ${captain.username || captain.participant_name} (—Ä–µ–π—Ç–∏–Ω–≥: ${captain.captain_rating})`
            );

            console.log(`‚úÖ [MixTeamController] –ö–∞–ø–∏—Ç–∞–Ω –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω: ${captain.username} (—Ä–µ–π—Ç–∏–Ω–≥: ${captain.captain_rating})`);

            res.status(200).json({
                success: true,
                message: `–ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω`,
                captain: captain,
                team_id: teamId,
                rating_type: finalRatingType
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω–∞' 
            });
        }
    });

    /**
     * üÜï –ú–ê–°–°–û–í–û–ï –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ö–ê–ü–ò–¢–ê–ù–û–í –î–õ–Ø –í–°–ï–• –ö–û–ú–ê–ù–î –¢–£–†–ù–ò–†–ê
     * POST /api/tournaments/:id/assign-all-captains
     */
    static assignAllCaptains = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const { ratingType } = req.body;
        const currentUserId = req.user.id;

        console.log(`üëë [MixTeamController] –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasPermission = await TournamentService.checkUserPermission(tournamentId, currentUserId, 'manage_teams');
        if (!hasPermission) {
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏' 
            });
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
            const tournament = await TournamentService.getTournament(tournamentId);
            if (!tournament) {
                return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            if (tournament.format !== 'mix') {
                return res.status(400).json({ 
                    error: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞
            const finalRatingType = ratingType || tournament.mix_rating_type || 'faceit';

            // –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
            const result = await TeamRepository.assignCaptainsForExistingTeams(tournamentId, finalRatingType);

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, currentUserId, 'captains_mass_assigned', {
                total_teams: result.total_teams,
                assigned_captains: result.assigned_captains,
                rating_type: finalRatingType
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            await sendTournamentChatAnnouncement(
                tournamentId,
                `üëë –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${result.assigned_captains} –∏–∑ ${result.total_teams} –∫–æ–º–∞–Ω–¥ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤`
            );

            console.log(`‚úÖ [MixTeamController] –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${result.assigned_captains}/${result.total_teams}`);

            res.status(200).json({
                success: true,
                message: `–ù–∞–∑–Ω–∞—á–µ–Ω–æ ${result.assigned_captains} –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∏–∑ ${result.total_teams} –∫–æ–º–∞–Ω–¥`,
                result: result,
                rating_type: finalRatingType
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–≤:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤' 
            });
        }
    });

    /**
     * üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –ö–ê–ü–ò–¢–ê–ù–ê–ú –¢–£–†–ù–ò–†–ê
     * GET /api/tournaments/:id/captains-stats
     */
    static getCaptainsStats = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);

        console.log(`üìä [MixTeamController] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = await TeamRepository.getCaptainStats(tournamentId);

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            const teams = await TeamRepository.getByTournamentId(tournamentId);
            const teamsWithCaptains = teams.filter(team => team.captain_user_id);

            const enhancedStats = {
                ...stats,
                total_teams: teams.length,
                teams_with_captains: teamsWithCaptains.length,
                teams_without_captains: teams.length - teamsWithCaptains.length,
                captains_coverage: teams.length > 0 ? Math.round((teamsWithCaptains.length / teams.length) * 100) : 0
            };

            console.log(`‚úÖ [MixTeamController] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${enhancedStats.teams_with_captains}/${enhancedStats.total_teams} –∫–æ–º–∞–Ω–¥ –∏–º–µ—é—Ç –∫–∞–ø–∏—Ç–∞–Ω–æ–≤`);

            res.status(200).json({
                success: true,
                stats: enhancedStats,
                tournament_id: tournamentId
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤' 
            });
        }
    });

    /**
     * üÜï –ü–†–û–í–ï–†–ö–ê –Ø–í–õ–Ø–ï–¢–°–Ø –õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ö–ê–ü–ò–¢–ê–ù–û–ú –ö–û–ú–ê–ù–î–´
     * GET /api/tournaments/:id/teams/:teamId/is-captain/:userId
     */
    static isUserCaptain = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const teamId = parseInt(req.params.teamId);
        const userId = parseInt(req.params.userId);

        console.log(`üîç [MixTeamController] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ –∫–æ–º–∞–Ω–¥–µ ${teamId}`);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            const team = await TeamRepository.getById(teamId);
            if (!team || team.tournament_id !== tournamentId) {
                return res.status(404).json({ error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º
            const isCaptain = await TeamRepository.isUserCaptain(teamId, userId);

            console.log(`‚úÖ [MixTeamController] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${isCaptain ? '—è–≤–ª—è–µ—Ç—Å—è' : '–Ω–µ —è–≤–ª—è–µ—Ç—Å—è'} –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã ${teamId}`);

            res.status(200).json({
                success: true,
                is_captain: isCaptain,
                user_id: userId,
                team_id: teamId
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞' 
            });
        }
    });

    /**
     * üÜï –ú–ò–ì–†–ê–¶–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ö–û–ú–ê–ù–î (–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ö–ê–ü–ò–¢–ê–ù–û–í)
     * POST /api/tournaments/:id/migrate-captains
     */
    static migrateCaptains = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const { ratingType } = req.body;
        const currentUserId = req.user.id;

        console.log(`üîÑ [MixTeamController] –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasPermission = await TournamentService.checkUserPermission(tournamentId, currentUserId, 'manage_teams');
        if (!hasPermission) {
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤' 
            });
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
            const tournament = await TournamentService.getTournament(tournamentId);
            if (!tournament) {
                return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            if (tournament.format !== 'mix') {
                return res.status(400).json({ 
                    error: '–ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞
            const finalRatingType = ratingType || tournament.mix_rating_type || 'faceit';

            // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            await migrateExistingTeamsCaptainsSafe();

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            const stats = await TeamRepository.getCaptainStats(tournamentId);

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await logTournamentEvent(tournamentId, currentUserId, 'captains_migrated', {
                rating_type: finalRatingType,
                migration_completed: true
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            await sendTournamentChatAnnouncement(
                tournamentId,
                `üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`
            );

            console.log(`‚úÖ [MixTeamController] –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

            res.status(200).json({
                success: true,
                message: `–ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`,
                stats: stats,
                rating_type: finalRatingType
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤' 
            });
        }
    });

    /**
     * üîÑ –ê–õ–ò–ê–° –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° –§–†–û–ù–¢–ï–ù–î–û–ú
     */
    
    /**
     * üÜï –ê–ª–∏–∞—Å –¥–ª—è formTeams (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)
     * POST /api/tournaments/:id/form-teams
     */
    static formTeamsAlias = asyncHandler(async (req, res) => {
        console.log(`üîÑ [MixTeamController] –ê–ª–∏–∞—Å form-teams –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π formTeams`);
        return MixTeamController.formTeams(req, res);
    });

    /**
     * –ê–ª–∏–∞—Å –¥–ª—è generateMixTeams (—Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
     */
    static generateMixTeams = asyncHandler(async (req, res) => {
        console.log(`üîÑ [MixTeamController] –ê–ª–∏–∞—Å generateMixTeams –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π formTeams`);
        return MixTeamController.formTeams(req, res);
    });

    /**
     * –ê–ª–∏–∞—Å –¥–ª—è getOriginalParticipants
     */
    static getOriginalParticipantsAlias = asyncHandler(async (req, res) => {
        console.log(`üîÑ [MixTeamController] –ê–ª–∏–∞—Å getOriginalParticipantsAlias –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ getOriginalParticipants`);
        return MixTeamController.getOriginalParticipants(req, res);
    });
}

module.exports = MixTeamController; 