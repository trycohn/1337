const MixTeamService = require('../../services/tournament/MixTeamService');
const TournamentService = require('../../services/tournament/TournamentService');
const { asyncHandler } = require('../../utils/tournament/asyncHandler');
const { broadcastTournamentUpdate } = require('../../notifications');

class MixTeamController {
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–∫—Å –∫–æ–º–∞–Ω–¥
     * POST /api/tournaments/:id/mix-generate-teams
     */
    static generateMixTeams = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const { ratingType = 'faceit', shuffle = false } = req.body;
        const userId = req.user.id;

        console.log(`üéØ [MixTeamController] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–∫—Å –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasPermission = await TournamentService.checkUserPermission(tournamentId, userId, 'manage_teams');
        if (!hasPermission) {
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∏–∫—Å –∫–æ–º–∞–Ω–¥
        const tournament = await TournamentService.getTournament(tournamentId);
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (tournament.format !== 'mix') {
            return res.status(400).json({ 
                error: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
            });
        }

        if (tournament.status !== 'active') {
            return res.status(400).json({ 
                error: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ —Å–µ—Ç–∫–∞
        const hasMatches = await TournamentService.hasMatches(tournamentId);
        if (hasMatches) {
            return res.status(400).json({ 
                error: '–ù–µ–ª—å–∑—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏' 
            });
        }

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
            const result = await MixTeamService.generateMixTeams(
                tournamentId, 
                userId, 
                ratingType, 
                shuffle
            );

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            const updatedTournament = await TournamentService.getTournamentDetails(tournamentId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            broadcastTournamentUpdate(tournamentId, updatedTournament);

            console.log(`‚úÖ [MixTeamController] –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${result.teams.length} –∫–æ–º–∞–Ω–¥`);

            res.status(200).json({
                success: true,
                message: `–£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–º–∞–Ω–¥—ã`,
                teams: result.teams,
                summary: result.summary,
                tournament: updatedTournament
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥' 
            });
        }
    });

    /**
     * –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Å –∫–æ–º–∞–Ω–¥ (—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç–µ–º–∏ –∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏)
     * POST /api/tournaments/:id/mix-regenerate-teams
     */
    static regenerateMixTeams = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const { ratingType = 'faceit', shuffle = true } = req.body;
        const userId = req.user.id;

        console.log(`üîÑ [MixTeamController] –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasPermission = await TournamentService.checkUserPermission(tournamentId, userId, 'manage_teams');
        if (!hasPermission) {
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥' 
            });
        }

        try {
            // –ü–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º
            const result = await MixTeamService.generateMixTeams(
                tournamentId, 
                userId, 
                ratingType, 
                shuffle
            );

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
            const updatedTournament = await TournamentService.getTournamentDetails(tournamentId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            broadcastTournamentUpdate(tournamentId, updatedTournament);

            console.log(`‚úÖ [MixTeamController] –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã: ${result.teams.length} –∫–æ–º–∞–Ω–¥`);

            res.status(200).json({
                success: true,
                message: `–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã`,
                teams: result.teams,
                summary: result.summary,
                tournament: updatedTournament,
                isRegeneration: true
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥' 
            });
        }
    });

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –≥—Ä—É–ø–ø—ã)
     * GET /api/tournaments/:id/original-participants
     */
    static getOriginalParticipants = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);

        console.log(`üîç [MixTeamController] –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            const participantsData = await MixTeamService.getOriginalParticipants(tournamentId);

            console.log(`‚úÖ [MixTeamController] –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantsData.total} (–≤ –∫–æ–º–∞–Ω–¥–∞—Ö: ${participantsData.inTeamCount}, –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: ${participantsData.notInTeamCount})`);

            res.json(participantsData);

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' 
            });
        }
    });

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞
     * PATCH /api/tournaments/:id/team-size
     */
    static updateTeamSize = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        const { teamSize } = req.body;
        const userId = req.user.id;

        console.log(`‚öôÔ∏è [MixTeamController] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ ${teamSize}`);

        if (!teamSize || ![2, 3, 4, 5].includes(parseInt(teamSize, 10))) {
            return res.status(400).json({ 
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 2, 3, 4, 5' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const hasPermission = await TournamentService.checkUserPermission(tournamentId, userId, 'manage_settings');
        if (!hasPermission) {
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—É—Ä–Ω–∏—Ä–∞' 
            });
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
            const tournament = await TournamentService.getTournament(tournamentId);
            if (!tournament) {
                return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            if (tournament.format !== 'mix') {
                return res.status(400).json({ 
                    error: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤' 
                });
            }

            if (!['active', 'pending'].includes(tournament.status)) {
                return res.status(400).json({ 
                    error: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ active –∏–ª–∏ pending' 
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ —Å–µ—Ç–∫–∞
            const hasMatches = await TournamentService.hasMatches(tournamentId);
            if (hasMatches) {
                return res.status(400).json({ 
                    error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏' 
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
            const updatedTournament = await TournamentService.updateTournament(tournamentId, {
                team_size: parseInt(teamSize, 10)
            }, userId);

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã, —É–¥–∞–ª—è–µ–º –∏—Ö (—Ç–∞–∫ –∫–∞–∫ —Ä–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è)
            const hasTeams = await TournamentService.hasTeams(tournamentId);
            if (hasTeams) {
                console.log(`üóëÔ∏è [MixTeamController] –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞`);
                // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ TeamService –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
            }

            console.log(`‚úÖ [MixTeamController] –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${teamSize}`);

            res.status(200).json({
                success: true,
                message: `–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${teamSize}`,
                tournament: updatedTournament
            });

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã' 
            });
        }
    });

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
     * GET /api/tournaments/:id/teams
     */
    static getTeams = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);

        console.log(`üèÜ [MixTeamController] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);

        try {
            const teams = await TournamentService.getTeamsWithMembers(tournamentId);

            console.log(`‚úÖ [MixTeamController] –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${teams.length}`);

            res.json(teams);

        } catch (error) {
            console.error(`‚ùå [MixTeamController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:`, error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞' 
            });
        }
    });
}

module.exports = MixTeamController; 