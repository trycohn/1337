const { asyncHandler } = require('../../utils/asyncHandler');
const MatchService = require('../../services/tournament/MatchService');
const TournamentService = require('../../services/tournament/TournamentService');
const fs = require('fs');
const path = require('path');

// –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å canvas, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º SVG
let Canvas;
try {
    Canvas = require('canvas');
} catch (error) {
    console.log('‚ö†Ô∏è Canvas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º SVG –≥–µ–Ω–µ—Ä–∞—Ü–∏—é');
    Canvas = null;
}

/**
 * üîó ShareController - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —à–µ–π—Ä–∏–Ω–≥–∞
 * –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Open Graph –ø—Ä–µ–≤—å—é –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
 * 
 * @version 2.0
 * @features –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PNG (canvas) –∏–ª–∏ SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
 */
class ShareController {
    
    /**
     * üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è –º–∞—Ç—á–∞
     * GET /api/tournaments/:id/match/:matchId/share-image
     */
    static generateMatchShareImage = asyncHandler(async (req, res) => {
        const { id: tournamentId, matchId } = req.params;
        
        console.log(`üñºÔ∏è [ShareController] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–∞—Ç—á–∞ ${matchId} —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –∏ —Ç—É—Ä–Ω–∏—Ä–∞
            const [match, tournament] = await Promise.all([
                MatchService.getById(parseInt(matchId)),
                TournamentService.getTournamentById(parseInt(tournamentId))
            ]);
            
            if (!match) {
                return res.status(404).json({
                    success: false,
                    message: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }
            
            if (!tournament) {
                return res.status(404).json({
                    success: false,
                    message: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }
            
            // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ canvas
            let imageBuffer, contentType;
            
            if (Canvas) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º canvas –¥–ª—è PNG
                imageBuffer = await ShareController._createMatchImagePNG(match, tournament);
                contentType = 'image/png';
                console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Canvas (PNG)');
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º SVG –∫–∞–∫ fallback
                imageBuffer = ShareController._createMatchSVG(match, tournament);
                contentType = 'image/svg+xml';
                console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∫–∞–∫ SVG (fallback)');
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            res.set({
                'Content-Type': contentType,
                'Cache-Control': 'public, max-age=3600', // –ö–µ—à –Ω–∞ 1 —á–∞—Å
                'ETag': `"match-${matchId}-${match.updated_at || match.created_at}"`
            });
            
            res.send(imageBuffer);
            
        } catch (error) {
            console.error(`‚ùå [ShareController] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, error.message);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const placeholderData = Canvas 
                ? await ShareController._createPlaceholderImagePNG()
                : ShareController._createPlaceholderSVG();
            
            res.set({
                'Content-Type': Canvas ? 'image/png' : 'image/svg+xml',
                'Cache-Control': 'public, max-age=300' // –ö–µ—à –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç
            });
            
            res.send(placeholderData);
        }
    });
    
    /**
     * üé® –°–æ–∑–¥–∞–µ—Ç PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–∞—Ç—á–∞ —Å –ø–æ–º–æ—â—å—é Canvas
     * @private
     */
    static async _createMatchImagePNG(match, tournament) {
        const { createCanvas, registerFont } = Canvas;
        
        const width = 1200;
        const height = 630;
        const canvas = createCanvas(width, height);
        const ctx = canvas.getContext('2d');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try {
            const fontPath = path.join(__dirname, '../../assets/fonts/Roboto-Bold.ttf');
            if (fs.existsSync(fontPath)) {
                registerFont(fontPath, { family: 'Roboto' });
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –ö–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π');
        }
        
        // –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const gradient = ctx.createLinearGradient(0, 0, width, height);
        gradient.addColorStop(0, '#000000');
        gradient.addColorStop(0.5, '#111111');
        gradient.addColorStop(1, '#000000');
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, width, height);
        
        // –ö—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞
        ctx.strokeStyle = '#ff0000';
        ctx.lineWidth = 8;
        ctx.strokeRect(4, 4, width - 8, height - 8);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å—á–µ—Ç
        const team1 = match.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1';
        const team2 = match.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2';
        const winner = match.winner_team_id === match.team1_id ? team1 : team2;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—á–µ—Ç
        let score = `${match.score1 || 0}:${match.score2 || 0}`;
        if (match.maps_data && Array.isArray(match.maps_data) && match.maps_data.length === 1) {
            const mapData = match.maps_data[0];
            if (mapData.team1_score !== undefined && mapData.team2_score !== undefined) {
                score = match.winner_team_id === match.team1_id 
                    ? `${mapData.team1_score}:${mapData.team2_score}`
                    : `${mapData.team2_score}:${mapData.team1_score}`;
            }
        }
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—É—Ä–Ω–∏—Ä–∞
        ctx.fillStyle = '#ffffff';
        ctx.font = 'bold 36px Roboto, Arial, sans-serif';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        
        // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
        const tournamentName = tournament.name.length > 50 
            ? tournament.name.substring(0, 47) + '...'
            : tournament.name;
        ctx.fillText(tournamentName, width / 2, 80);
        
        // –ù–æ–º–µ—Ä –º–∞—Ç—á–∞
        ctx.fillStyle = '#cccccc';
        ctx.font = '28px Roboto, Arial, sans-serif';
        ctx.fillText(`–ú–∞—Ç—á #${match.match_number || match.id}`, width / 2, 120);
        
        // –ö–æ–º–∞–Ω–¥–∞ 1
        ctx.fillStyle = match.winner_team_id === match.team1_id ? '#ffd700' : '#ffffff';
        ctx.font = 'bold 48px Roboto, Arial, sans-serif';
        
        // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        const team1Name = team1.length > 20 ? team1.substring(0, 17) + '...' : team1;
        ctx.fillText(team1Name, width / 4, 250);
        
        // VS
        ctx.fillStyle = '#ff0000';
        ctx.font = 'bold 36px Roboto, Arial, sans-serif';
        ctx.fillText('VS', width / 2, 250);
        
        // –ö–æ–º–∞–Ω–¥–∞ 2
        ctx.fillStyle = match.winner_team_id === match.team2_id ? '#ffd700' : '#ffffff';
        ctx.font = 'bold 48px Roboto, Arial, sans-serif';
        
        const team2Name = team2.length > 20 ? team2.substring(0, 17) + '...' : team2;
        ctx.fillText(team2Name, (width * 3) / 4, 250);
        
        // –°—á–µ—Ç
        ctx.fillStyle = '#ff0000';
        ctx.font = 'bold 72px Roboto, Arial, sans-serif';
        ctx.fillText(score, width / 2, 350);
        
        // –ü–æ–±–µ–¥–∏—Ç–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (match.winner_team_id) {
            ctx.fillStyle = '#ffd700';
            ctx.font = 'bold 32px Roboto, Arial, sans-serif';
            const winnerText = winner.length > 30 ? winner.substring(0, 27) + '...' : winner;
            ctx.fillText(`üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerText}`, width / 2, 420);
        }
        
        // –†–∞—É–Ω–¥
        const roundName = match.round_name || `–†–∞—É–Ω–¥ ${match.round}`;
        ctx.fillStyle = '#999999';
        ctx.font = '24px Roboto, Arial, sans-serif';
        ctx.fillText(roundName, width / 2, 480);
        
        // –ë—Ä–µ–Ω–¥–∏–Ω–≥
        ctx.fillStyle = '#ffffff';
        ctx.font = 'bold 28px Roboto, Arial, sans-serif';
        ctx.fillText('1337 Community', width / 2, 560);
        
        // –î–∞—Ç–∞
        if (match.match_date || match.created_at) {
            const date = new Date(match.match_date || match.created_at);
            const dateStr = date.toLocaleDateString('ru-RU');
            ctx.fillStyle = '#666666';
            ctx.font = '20px Roboto, Arial, sans-serif';
            ctx.fillText(dateStr, width / 2, 590);
        }
        
        return canvas.toBuffer('image/png');
    }
    
    /**
     * üé® –°–æ–∑–¥–∞–µ—Ç SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–∞—Ç—á–∞ (fallback)
     * @private
     */
    static _createMatchSVG(match, tournament) {
        const width = 1200;
        const height = 630;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å—á–µ—Ç
        const team1 = match.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1';
        const team2 = match.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2';
        const winner = match.winner_team_id === match.team1_id ? team1 : team2;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—á–µ—Ç
        let score = `${match.score1 || 0}:${match.score2 || 0}`;
        if (match.maps_data && Array.isArray(match.maps_data) && match.maps_data.length === 1) {
            const mapData = match.maps_data[0];
            if (mapData.team1_score !== undefined && mapData.team2_score !== undefined) {
                score = match.winner_team_id === match.team1_id 
                    ? `${mapData.team1_score}:${mapData.team2_score}`
                    : `${mapData.team2_score}:${mapData.team1_score}`;
            }
        }
        
        const roundName = match.round_name || `–†–∞—É–Ω–¥ ${match.round}`;
        const dateStr = match.match_date || match.created_at 
            ? new Date(match.match_date || match.created_at).toLocaleDateString('ru-RU')
            : '';
        
        // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        const tournamentName = tournament.name.length > 50 
            ? tournament.name.substring(0, 47) + '...'
            : tournament.name;
        const team1Name = team1.length > 20 ? team1.substring(0, 17) + '...' : team1;
        const team2Name = team2.length > 20 ? team2.substring(0, 17) + '...' : team2;
        const winnerName = winner.length > 30 ? winner.substring(0, 27) + '...' : winner;
        
        return `
<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
    <!-- –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º -->
    <defs>
        <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#000000;stop-opacity:1" />
            <stop offset="50%" style="stop-color:#111111;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#000000;stop-opacity:1" />
        </linearGradient>
    </defs>
    
    <!-- –§–æ–Ω -->
    <rect width="${width}" height="${height}" fill="url(#bgGradient)" />
    
    <!-- –ö—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞ -->
    <rect x="4" y="4" width="${width - 8}" height="${height - 8}" 
          fill="none" stroke="#ff0000" stroke-width="8" />
    
    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—É—Ä–Ω–∏—Ä–∞ -->
    <text x="${width / 2}" y="80" text-anchor="middle" 
          fill="#ffffff" font-size="36" font-weight="bold" font-family="Arial">
        ${ShareController._escapeXML(tournamentName)}
    </text>
    
    <!-- –ù–æ–º–µ—Ä –º–∞—Ç—á–∞ -->
    <text x="${width / 2}" y="120" text-anchor="middle" 
          fill="#cccccc" font-size="28" font-family="Arial">
        –ú–∞—Ç—á #${match.match_number || match.id}
    </text>
    
    <!-- –ö–æ–º–∞–Ω–¥–∞ 1 -->
    <text x="${width / 4}" y="250" text-anchor="middle" 
          fill="${match.winner_team_id === match.team1_id ? '#ffd700' : '#ffffff'}" 
          font-size="48" font-weight="bold" font-family="Arial">
        ${ShareController._escapeXML(team1Name)}
    </text>
    
    <!-- VS -->
    <text x="${width / 2}" y="250" text-anchor="middle" 
          fill="#ff0000" font-size="36" font-weight="bold" font-family="Arial">
        VS
    </text>
    
    <!-- –ö–æ–º–∞–Ω–¥–∞ 2 -->
    <text x="${(width * 3) / 4}" y="250" text-anchor="middle" 
          fill="${match.winner_team_id === match.team2_id ? '#ffd700' : '#ffffff'}" 
          font-size="48" font-weight="bold" font-family="Arial">
        ${ShareController._escapeXML(team2Name)}
    </text>
    
    <!-- –°—á–µ—Ç -->
    <text x="${width / 2}" y="350" text-anchor="middle" 
          fill="#ff0000" font-size="72" font-weight="bold" font-family="Arial">
        ${score}
    </text>
    
    ${match.winner_team_id ? `
    <!-- –ü–æ–±–µ–¥–∏—Ç–µ–ª—å -->
    <text x="${width / 2}" y="420" text-anchor="middle" 
          fill="#ffd700" font-size="32" font-weight="bold" font-family="Arial">
        üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${ShareController._escapeXML(winnerName)}
    </text>
    ` : ''}
    
    <!-- –†–∞—É–Ω–¥ -->
    <text x="${width / 2}" y="480" text-anchor="middle" 
          fill="#999999" font-size="24" font-family="Arial">
        ${ShareController._escapeXML(roundName)}
    </text>
    
    <!-- –ë—Ä–µ–Ω–¥–∏–Ω–≥ -->
    <text x="${width / 2}" y="560" text-anchor="middle" 
          fill="#ffffff" font-size="28" font-weight="bold" font-family="Arial">
        1337 Community
    </text>
    
    ${dateStr ? `
    <!-- –î–∞—Ç–∞ -->
    <text x="${width / 2}" y="590" text-anchor="middle" 
          fill="#666666" font-size="20" font-family="Arial">
        ${dateStr}
    </text>
    ` : ''}
</svg>`.trim();
    }
    
    /**
     * üö´ –°–æ–∑–¥–∞–µ—Ç PNG –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
     * @private
     */
    static async _createPlaceholderImagePNG() {
        const { createCanvas } = Canvas;
        
        const width = 1200;
        const height = 630;
        const canvas = createCanvas(width, height);
        const ctx = canvas.getContext('2d');
        
        // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω
        ctx.fillStyle = '#111111';
        ctx.fillRect(0, 0, width, height);
        
        // –†–∞–º–∫–∞
        ctx.strokeStyle = '#333333';
        ctx.lineWidth = 4;
        ctx.strokeRect(2, 2, width - 4, height - 4);
        
        // –¢–µ–∫—Å—Ç
        ctx.fillStyle = '#ffffff';
        ctx.font = 'bold 48px Arial';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText('1337 Community', width / 2, height / 2 - 40);
        
        ctx.fillStyle = '#cccccc';
        ctx.font = '32px Arial';
        ctx.fillText('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞', width / 2, height / 2 + 20);
        
        ctx.fillStyle = '#666666';
        ctx.font = '24px Arial';
        ctx.fillText('–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', width / 2, height / 2 + 60);
        
        return canvas.toBuffer('image/png');
    }
    
    /**
     * üö´ –°–æ–∑–¥–∞–µ—Ç SVG –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
     * @private
     */
    static _createPlaceholderSVG() {
        const width = 1200;
        const height = 630;
        
        return `
<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
    <!-- –¢–µ–º–Ω—ã–π —Ñ–æ–Ω -->
    <rect width="${width}" height="${height}" fill="#111111" />
    
    <!-- –†–∞–º–∫–∞ -->
    <rect x="2" y="2" width="${width - 4}" height="${height - 4}" 
          fill="none" stroke="#333333" stroke-width="4" />
    
    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
    <text x="${width / 2}" y="${height / 2 - 40}" text-anchor="middle" 
          fill="#ffffff" font-size="48" font-weight="bold" font-family="Arial">
        1337 Community
    </text>
    
    <!-- –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ -->
    <text x="${width / 2}" y="${height / 2 + 20}" text-anchor="middle" 
          fill="#cccccc" font-size="32" font-family="Arial">
        –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
    </text>
    
    <!-- –°—Ç–∞—Ç—É—Å -->
    <text x="${width / 2}" y="${height / 2 + 60}" text-anchor="middle" 
          fill="#666666" font-size="24" font-family="Arial">
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...
    </text>
</svg>`.trim();
    }
    
    /**
     * üõ°Ô∏è –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç XML —Å–∏–º–≤–æ–ª—ã
     * @private
     */
    static _escapeXML(str) {
        if (!str) return '';
        return str
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;');
    }
}

module.exports = ShareController;