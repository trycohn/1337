const TournamentService = require('../../services/tournament/TournamentService');
const ParticipantService = require('../../services/tournament/ParticipantService');
const BracketService = require('../../services/tournament/BracketService');
const ChatService = require('../../services/tournament/ChatService');
const TournamentValidator = require('../../validators/tournament/TournamentValidator');
const { asyncHandler } = require('../../utils/asyncHandler');

class TournamentController {
    // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    static getAllTournaments = asyncHandler(async (req, res) => {
        const tournaments = await TournamentService.getAllTournaments();
        res.json(tournaments);
    });

    // üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    static getTournamentById = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const tournament = await TournamentService.getTournamentById(parseInt(id));
        
        if (!tournament) {
            return res.status(404).json({ message: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(tournament);
    });

    // ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    static createTournament = asyncHandler(async (req, res) => {
        const validationResult = TournamentValidator.validateCreate(req.body);
        if (!validationResult.isValid) {
            return res.status(400).json({ error: validationResult.errors });
        }
        
        const tournament = await TournamentService.createTournament(req.body, req.user.id, req.user.username);
        
        res.status(201).json({
            message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            tournament
        });
    });

    // üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    static getTournament = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        const tournament = await TournamentService.getTournament(parseInt(id));
        
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(tournament);
    });

    // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    static getTournaments = asyncHandler(async (req, res) => {
        const { page, limit, status, game, participant_type } = req.query;
        
        const filters = { status, game, participant_type };
        const tournaments = await TournamentService.getTournaments(filters, parseInt(page), parseInt(limit));
        
        res.json(tournaments);
    });

    // ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    static updateTournament = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        const validationResult = TournamentValidator.validateUpdate(req.body);
        if (!validationResult.isValid) {
            return res.status(400).json({ error: validationResult.errors });
        }
        
        const tournament = await TournamentService.updateTournament(
            parseInt(id), 
            req.body, 
            req.user.id
        );
        
        res.json({
            message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            tournament
        });
    });

    // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    static deleteTournament = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        await TournamentService.deleteTournament(parseInt(id), req.user.id);
        
        res.json({ message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
    });

    // üöÄ –ó–∞–ø—É—Å–∫ —Ç—É—Ä–Ω–∏—Ä–∞
    static startTournament = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        const result = await TournamentService.startTournament(parseInt(id), req.user.id);
        
        res.json(result);
    });

    // üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    static endTournament = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        const result = await TournamentService.endTournament(parseInt(id), req.user.id);
        
        res.json(result);
    });

    // üéÆ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
    static getGames = asyncHandler(async (req, res) => {
        const games = await TournamentService.getGames();
        res.json(games);
    });

    // ü•ä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static generateBracket = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { thirdPlaceMatch = false } = req.body;
        
        const result = await BracketService.generateBracket(
            parseInt(id), 
            req.user.id, 
            thirdPlaceMatch
        );
        
        res.json(result);
    });

    // üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static regenerateBracket = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { shuffle = false, thirdPlaceMatch = false } = req.body;
        
        const result = await BracketService.regenerateBracket(
            parseInt(id), 
            req.user.id, 
            shuffle, 
            thirdPlaceMatch
        );
        
        res.json(result);
    });

    // üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
    static clearMatchResults = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        const result = await BracketService.clearMatchResults(parseInt(id), req.user.id);
        
        res.json(result);
    });

    // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static getBracket = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        const bracket = await BracketService.getBracket(parseInt(id));
        
        res.json(bracket);
    });

    // üîÑ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static validateBracket = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const validation = await BracketService.validateTournamentBracket(parseInt(id));
        
        res.json({
            message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            tournamentId: parseInt(id),
            validation
        });
    });

    // üîß –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
    static resetMatchResults = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const result = await TournamentService.resetMatchResults(parseInt(id), req.user.id);
        
        res.json(result);
    });

    // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    static getOriginalParticipants = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const participants = await ParticipantService.getOriginalParticipants(parseInt(id));
        
        res.json(participants);
    });

    // üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
    static getTeams = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const teams = await TournamentService.getTeams(parseInt(id));
        
        res.json(teams);
    });

    // üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    static updateDescription = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { description } = req.body;
        
        const tournament = await TournamentService.updateDescription(
            parseInt(id), 
            description, 
            req.user.id
        );
        
        res.json({ 
            message: '–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', 
            tournament 
        });
    });

    // üìú –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    static updateFullDescription = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { full_description } = req.body;
        
        const tournament = await TournamentService.updateFullDescription(
            parseInt(id), 
            full_description, 
            req.user.id
        );
        
        res.json({ 
            message: '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', 
            tournament 
        });
    });

    // ‚öñÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
    static updateRules = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { rules } = req.body;
        
        const tournament = await TournamentService.updateRules(
            parseInt(id), 
            rules, 
            req.user.id
        );
        
        res.json({ 
            message: '–†–µ–≥–ª–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 
            tournament 
        });
    });

    // üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞
    static updatePrizePool = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { prize_pool } = req.body;
        
        const tournament = await TournamentService.updatePrizePool(
            parseInt(id), 
            prize_pool, 
            req.user.id
        );
        
        res.json({ 
            message: '–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 
            tournament 
        });
    });

    // üìè –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
    static updateTeamSize = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { teamSize } = req.body;
        
        const tournament = await TournamentService.updateTeamSize(
            parseInt(id), 
            teamSize, 
            req.user.id
        );
        
        res.json({
            message: `–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${teamSize}`,
            tournament
        });
    });
}

module.exports = TournamentController; 