const TournamentService = require('../../services/tournament/TournamentService');
const ParticipantService = require('../../services/tournament/ParticipantService');
const BracketService = require('../../services/tournament/BracketService');
const ChatService = require('../../services/tournament/ChatService');
const TournamentValidator = require('../../validators/tournament/TournamentValidator');
const { asyncHandler } = require('../../utils/asyncHandler');

class TournamentController {
    // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    static getAllTournaments = asyncHandler(async (req, res) => {
        const tournaments = await TournamentService.getAllTournaments();
        res.json(tournaments);
    });

    // üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    static getTournamentById = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        console.log(`üîç [getTournamentById] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å ID: "${id}", —Ç–∏–ø: ${typeof id}`);
        
        if (!id || id === 'undefined' || id === 'null') {
            console.log(`‚ùå [getTournamentById] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞: "${id}"`);
            return res.status(400).json({ 
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞',
                received_id: id 
            });
        }
        
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            console.log(`‚ùå [getTournamentById] ID —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º: "${id}" -> ${tournamentId}`);
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id,
                parsed_id: tournamentId
            });
        }
        
        console.log(`‚úÖ [getTournamentById] –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –∏—â–µ–º —Ç—É—Ä–Ω–∏—Ä —Å ID: ${tournamentId}`);
        
        const tournament = await TournamentService.getTournamentById(tournamentId);
        
        if (!tournament) {
            console.log(`‚ùå [getTournamentById] –¢—É—Ä–Ω–∏—Ä —Å ID ${tournamentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return res.status(404).json({ message: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        console.log(`‚úÖ [getTournamentById] –¢—É—Ä–Ω–∏—Ä ${tournamentId} –Ω–∞–π–¥–µ–Ω: "${tournament.name}"`);
        res.json(tournament);
    });

    // ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    static createTournament = asyncHandler(async (req, res) => {
        const validationResult = TournamentValidator.validateCreate(req.body);
        if (!validationResult.isValid) {
            return res.status(400).json({ error: validationResult.errors });
        }
        
        const tournament = await TournamentService.createTournament(req.body, req.user.id, req.user.username);
        
        res.status(201).json({
            message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            tournament
        });
    });

    // üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    static getTournament = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const tournament = await TournamentService.getTournament(tournamentId);
        
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(tournament);
    });

    // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    static getTournaments = asyncHandler(async (req, res) => {
        const { page, limit, status, game, participant_type } = req.query;
        
        const filters = { status, game, participant_type };
        const tournaments = await TournamentService.getTournaments(filters, parseInt(page, 10), parseInt(limit, 10));
        
        res.json(tournaments);
    });

    // ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    static updateTournament = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const validationResult = TournamentValidator.validateUpdate(req.body);
        if (!validationResult.isValid) {
            return res.status(400).json({ error: validationResult.errors });
        }
        
        const tournament = await TournamentService.updateTournament(
            tournamentId, 
            req.body, 
            req.user.id
        );
        
        res.json({
            message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            tournament
        });
    });

    // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    static deleteTournament = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        await TournamentService.deleteTournament(tournamentId, req.user.id);
        
        res.json({ message: '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
    });

    // üöÄ –ó–∞–ø—É—Å–∫ —Ç—É—Ä–Ω–∏—Ä–∞
    static startTournament = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const result = await TournamentService.startTournament(tournamentId, req.user.id);
        
        res.json(result);
    });

    // üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    static endTournament = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const result = await TournamentService.endTournament(tournamentId, req.user.id);
        
        res.json(result);
    });

    // üéÆ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
    static getGames = asyncHandler(async (req, res) => {
        console.log('üéÆ [TournamentController.getGames] –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä');
        console.log('üìä [getGames] Request params:', req.params);
        console.log('üìä [getGames] Request query:', req.query);
        console.log('üìä [getGames] Request body:', req.body);
        
        try {
        const games = await TournamentService.getGames();
            console.log(`‚úÖ [getGames] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${games.length} –∏–≥—Ä`);
        res.json(games);
        } catch (error) {
            console.error('‚ùå [getGames] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error);
            throw error; // asyncHandler –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—à–∏–±–∫—É
        }
    });

    // ü•ä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static generateBracket = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { thirdPlaceMatch = false } = req.body;
        
        const result = await BracketService.generateBracket(
            tournamentId, 
            req.user.id, 
            thirdPlaceMatch
        );
        
        res.json(result);
    });

    // üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static regenerateBracket = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { shuffle = false, thirdPlaceMatch = false } = req.body;
        
        const result = await BracketService.regenerateBracket(
            tournamentId, 
            req.user.id, 
            shuffle, 
            thirdPlaceMatch
        );
        
        res.json(result);
    });

    // üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
    static clearMatchResults = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const result = await BracketService.clearMatchResults(tournamentId, req.user.id);
        
        res.json(result);
    });

    // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static getBracket = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const bracket = await BracketService.getBracket(tournamentId);
        
        res.json(bracket);
    });

    // üîÑ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static validateBracket = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const validation = await BracketService.validateTournamentBracket(tournamentId);
        
        res.json({
            message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            tournamentId: tournamentId,
            validation
        });
    });

    // üîß –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
    static resetMatchResults = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const result = await TournamentService.resetMatchResults(tournamentId, req.user.id);
        
        res.json(result);
    });

    // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    static getOriginalParticipants = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const participants = await ParticipantService.getOriginalParticipants(tournamentId);
        
        res.json(participants);
    });

    // üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
    static getTeams = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const teams = await TournamentService.getTeams(tournamentId);
        
        res.json(teams);
    });

    // üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    static updateDescription = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { description } = req.body;
        
        const tournament = await TournamentService.updateDescription(
            tournamentId, 
            description, 
            req.user.id
        );
        
        res.json({ 
            message: '–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', 
            tournament 
        });
    });

    // üìú –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    static updateFullDescription = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { full_description } = req.body;
        
        const tournament = await TournamentService.updateFullDescription(
            tournamentId, 
            full_description, 
            req.user.id
        );
        
        res.json({ 
            message: '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', 
            tournament 
        });
    });

    // ‚öñÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
    static updateRules = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { rules } = req.body;
        
        const tournament = await TournamentService.updateRules(
            tournamentId, 
            rules, 
            req.user.id
        );
        
        res.json({ 
            message: '–†–µ–≥–ª–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 
            tournament 
        });
    });

    // üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞
    static updatePrizePool = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { prize_pool } = req.body;
        
        const tournament = await TournamentService.updatePrizePool(
            tournamentId, 
            prize_pool, 
            req.user.id
        );
        
        res.json({ 
            message: '–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 
            tournament 
        });
    });

    // üìè –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
    static updateTeamSize = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { teamSize } = req.body;
        
        const tournament = await TournamentService.updateTeamSize(
            tournamentId, 
            teamSize, 
            req.user.id
        );
        
        res.json({
            message: `–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${teamSize}`,
            tournament
        });
    });

    // üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
    static updateRatingType = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { mix_rating_type } = req.body;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ò–ü–ê –†–ï–ô–¢–ò–ù–ì–ê
        const validRatingTypes = ['faceit', 'premier', 'mixed'];
        if (!validRatingTypes.includes(mix_rating_type)) {
            return res.status(400).json({ 
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞',
                received_type: mix_rating_type,
                valid_types: validRatingTypes
            });
        }
        
        console.log(`üéØ [updateRatingType] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ ${mix_rating_type}`);
        
        const tournament = await TournamentService.updateRatingType(
            tournamentId, 
            mix_rating_type, 
            req.user.id
        );
        
        const typeNames = {
            'faceit': 'FACEIT ELO',
            'premier': 'CS2 Premier Rank', 
            'mixed': '–°–ª—É—á–∞–π–Ω—ã–π –º–∏–∫—Å'
        };
        
        res.json({
            message: `–¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${typeNames[mix_rating_type]}`,
            tournament,
            rating_type: mix_rating_type
        });
    });

    // üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Ç—É—Ä–Ω–∏—Ä–∞
    static updateGame = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { game } = req.body;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–ì–†–´
        if (!game || typeof game !== 'string' || game.trim().length === 0) {
            return res.status(400).json({ 
                message: '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π',
                received_game: game
            });
        }
        
        console.log(`üéÆ [updateGame] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${game}"`);
        
        const tournament = await TournamentService.updateGame(
            tournamentId, 
            game.trim(), 
            req.user.id
        );
        
        res.json({
            message: `–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${game}`,
            tournament,
            game: game
        });
    });

    // üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    static updateFormat = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { format } = req.body;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú–ê–¢–ê
        const validFormats = ['single_elimination', 'double_elimination', 'mix'];
        if (!validFormats.includes(format)) {
            return res.status(400).json({ 
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞',
                received_format: format,
                valid_formats: validFormats
            });
        }
        
        console.log(`üèÜ [updateFormat] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${format}"`);
        
        const tournament = await TournamentService.updateFormat(
            tournamentId, 
            format, 
            req.user.id
        );
        
        const formatNames = {
            'single_elimination': '–û–¥–∏–Ω–æ—á–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ',
            'double_elimination': '–î–≤–æ–π–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ',
            'mix': '–ú–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä'
        };
        
        res.json({
            message: `–§–æ—Ä–º–∞—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${formatNames[format]}`,
            tournament,
            format: format
        });
    });

    // üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    static updateStartDate = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { start_date } = req.body;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–¢–´
        if (!start_date) {
            return res.status(400).json({ 
                message: '–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π',
                received_date: start_date
            });
        }
        
        const startDate = new Date(start_date);
        if (isNaN(startDate.getTime())) {
            return res.status(400).json({ 
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã',
                received_date: start_date
            });
        }
        
        console.log(`üìÖ [updateStartDate] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${start_date}"`);
        
        const tournament = await TournamentService.updateStartDate(
            tournamentId, 
            startDate, 
            req.user.id
        );
        
        res.json({
            message: `–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${startDate.toLocaleString('ru-RU')}`,
            tournament,
            start_date: startDate
        });
    });

    // üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏
    static updateLobbyEnabled = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { lobby_enabled } = req.body;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ù–ê–ß–ï–ù–ò–Ø
        if (typeof lobby_enabled !== 'boolean') {
            return res.status(400).json({ 
                message: 'lobby_enabled –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º',
                received_value: lobby_enabled
            });
        }
        
        console.log(`üéÆ [updateLobbyEnabled] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${lobby_enabled}"`);
        
        const tournament = await TournamentService.updateLobbyEnabled(
            tournamentId, 
            lobby_enabled, 
            req.user.id
        );
        
        res.json({
            message: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏ —É—Å–ø–µ—à–Ω–æ ${lobby_enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`,
            tournament,
            lobby_enabled: lobby_enabled
        });
    });

    // üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static updateBracketType = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø ID –¢–£–†–ù–ò–†–ê
        const tournamentId = parseInt(id, 10);
        if (isNaN(tournamentId) || tournamentId <= 0) {
            return res.status(400).json({ 
                message: 'ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
                received_id: id
            });
        }
        
        const { bracket_type } = req.body;
        
        // üîß –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ò–ü–ê –°–ï–¢–ö–ò
        const validBracketTypes = ['single_elimination', 'double_elimination'];
        if (!validBracketTypes.includes(bracket_type)) {
            return res.status(400).json({ 
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏',
                received_bracket_type: bracket_type,
                valid_bracket_types: validBracketTypes
            });
        }
        
        console.log(`üèÜ [updateBracketType] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${bracket_type}"`);
        
        // üîß –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ TournamentService._checkTournamentCreatorAccess
        const tournament = await TournamentService.updateBracketType(
            tournamentId, 
            bracket_type, 
            req.user.id
        );
        
        const bracketTypeNames = {
            'single_elimination': '–û–¥–∏–Ω–æ—á–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ',
            'double_elimination': '–î–≤–æ–π–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ'
        };
        
        res.json({
            message: `–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${bracketTypeNames[bracket_type]}`,
            tournament,
            bracket_type: bracket_type
        });
    });
}

module.exports = TournamentController; 