const MatchService = require('../../services/tournament/MatchService');
const BracketService = require('../../services/tournament/BracketService');
const TournamentValidator = require('../../validators/tournament/TournamentValidator');
const { asyncHandler } = require('../../utils/asyncHandler');

class MatchController {
    // ü•ä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static generateBracket = asyncHandler(async (req, res) => {
        console.log('üöÄ [MatchController.generateBracket] –ú–û–î–£–õ–¨–ù–´–ô –†–û–£–¢–ï–† –ü–û–õ–£–ß–ò–õ –ó–ê–ü–†–û–°!');
        console.log('üöÄ [MatchController.generateBracket] Tournament ID:', req.params.id);
        console.log('üöÄ [MatchController.generateBracket] User ID:', req.user.id);
        console.log('üöÄ [MatchController.generateBracket] Request body:', req.body);
        
        const { id } = req.params;
        const { thirdPlaceMatch } = req.body;
        
        console.log('üöÄ [MatchController.generateBracket] –í—ã–∑—ã–≤–∞–µ–º BracketService.generateBracket...');
        
        const result = await BracketService.generateBracket(
            parseInt(id),
            req.user.id,
            thirdPlaceMatch
        );
        
        console.log('üöÄ [MatchController.generateBracket] BracketService –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ');
        
        res.json({
            message: '–°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞',
            tournament: result.tournament
        });
    });

    // üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static regenerateBracket = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { thirdPlaceMatch } = req.body;
        
        const result = await BracketService.regenerateBracket(
            parseInt(id),
            req.user.id,
            thirdPlaceMatch
        );
        
        res.json({
            success: true,
            message: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞',
            tournament: result.tournament
        });
    });

    // üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
    static updateMatchResult = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { matchId, winner_team_id, score1, score2, maps } = req.body;
        
        const validationResult = TournamentValidator.validateMatchResult(req.body);
        if (!validationResult.isValid) {
            return res.status(400).json({ error: validationResult.errors });
        }
        
        const result = await MatchService.updateMatchResult(
            parseInt(id), 
            { matchId, winner_team_id, score1, score2, maps }, 
            req.user.id
        );
        
        res.json(result);
    });

    // üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)
    static updateSpecificMatchResult = asyncHandler(async (req, res) => {
        const { matchId } = req.params;
        const { winner_team_id, score1, score2, maps_data } = req.body;
        
        // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        console.log(`üéØ [updateSpecificMatchResult] –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–ê:`);
        console.log(`   - Match ID (params): ${matchId}`);
        console.log(`   - User ID: ${req.user.id}`);
        console.log(`   - Username: ${req.user.username}`);
        console.log(`   - Request Body:`, JSON.stringify(req.body, null, 2));
        console.log(`   - Winner Team ID: ${winner_team_id}`);
        console.log(`   - Score1: ${score1}`);
        console.log(`   - Score2: ${score2}`);
        console.log(`   - Maps data:`, maps_data);
        
        // üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –° –î–ï–¢–ê–õ–¨–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
        console.log(`üìù [updateSpecificMatchResult] –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏:`, {
            winner_team_id,
            score1, 
            score2,
            maps_data,
            matchId
        });
        
        const validationResult = TournamentValidator.validateMatchResult(req.body);
        
        console.log(`üìù [updateSpecificMatchResult] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`, {
            isValid: validationResult.isValid,
            errors: validationResult.errors
        });
        
        if (!validationResult.isValid) {
            console.log(`‚ùå [updateSpecificMatchResult] –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–®–õ–ê:`);
            validationResult.errors.forEach((error, index) => {
                console.log(`   ${index + 1}. ${error}`);
            });
            return res.status(400).json({ 
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
                message: validationResult.errors 
            });
        }
        
        console.log(`‚úÖ [updateSpecificMatchResult] –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º MatchService...`);
        
        try {
            const result = await MatchService.updateSpecificMatchResult(
                parseInt(matchId),
                { winner_team_id, score1, score2, maps_data },
                req.user.id
            );
            
            console.log(`üéâ [updateSpecificMatchResult] –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï`);
            res.json(result);
        } catch (serviceError) {
            console.error(`‚ùå [updateSpecificMatchResult] –û–®–ò–ë–ö–ê –í –°–ï–†–í–ò–°–ï:`, serviceError.message);
            console.error(`‚ùå [updateSpecificMatchResult] Stack trace:`, serviceError.stack);
            throw serviceError; // Re-throw –¥–ª—è asyncHandler
        }
    });

    // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
    static getMatches = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        const matches = await MatchService.getMatches(parseInt(id));
        
        res.json(matches);
    });

    // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
    static getMatchById = asyncHandler(async (req, res) => {
        const { matchId } = req.params;
        
        const match = await MatchService.getMatchById(parseInt(matchId));
        
        if (!match) {
            return res.status(404).json({ error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(match);
    });
}

module.exports = MatchController; 