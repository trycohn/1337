const MatchService = require('../../services/tournament/MatchService');
const BracketService = require('../../services/tournament/BracketService');
const TournamentValidator = require('../../validators/tournament/TournamentValidator');
const { asyncHandler } = require('../../utils/asyncHandler');

class MatchController {
    // ü•ä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static generateBracket = asyncHandler(async (req, res) => {
        const startTime = Date.now();
        console.log('üöÄ [MatchController.generateBracket] –ú–û–î–£–õ–¨–ù–´–ô –†–û–£–¢–ï–† –ü–û–õ–£–ß–ò–õ –ó–ê–ü–†–û–°!');
        console.log('üöÄ [MatchController.generateBracket] Tournament ID:', req.params.id);
        console.log('üöÄ [MatchController.generateBracket] User ID:', req.user.id);
        console.log('üöÄ [MatchController.generateBracket] Username:', req.user.username);
        console.log('üöÄ [MatchController.generateBracket] Request body:', req.body);
        
        const { id: tournamentId } = req.params;
        const { thirdPlaceMatch } = req.body;
        const userId = req.user.id;
        
        console.log('üöÄ [MatchController.generateBracket] thirdPlaceMatch:', thirdPlaceMatch);
        console.log('üöÄ [MatchController.generateBracket] –í—ã–∑—ã–≤–∞–µ–º BracketService.generateBracket...');
        
        try {
            const result = await BracketService.generateBracket(
                parseInt(tournamentId), 
                userId, 
                thirdPlaceMatch || false
            );
            
            const endTime = Date.now();
            console.log(`‚úÖ [MatchController.generateBracket] –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${endTime - startTime}ms`);
            
            res.status(200).json({
                success: true,
                message: result.message,
                tournament: result.tournament,
                matches: result.matches,
                totalMatches: result.totalMatches,
                existing: result.existing || false
            });
            
        } catch (error) {
            const endTime = Date.now();
            console.error(`‚ùå [MatchController.generateBracket] –û–®–ò–ë–ö–ê –ø–æ—Å–ª–µ ${endTime - startTime}ms: ${error.message}`);
            console.error(`‚ùå [MatchController.generateBracket] –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}`);
            console.error(`‚ùå [MatchController.generateBracket] –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
            console.error(`‚ùå [MatchController.generateBracket] Stack trace: ${error.stack}`);
            
            // üÜï –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –ë–õ–û–ö–ò–†–û–í–û–ö
            if (error.message.includes('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º')) {
                console.log(`üîç [MatchController.generateBracket] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É`);
                
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
                BracketService.checkDatabaseLocks(parseInt(tournamentId)).catch(diagError => {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', diagError.message);
                });
                
                return res.status(423).json({
                    error: '–¢—É—Ä–Ω–∏—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                    message: '–¢—É—Ä–Ω–∏—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10-15 —Å–µ–∫—É–Ω–¥.',
                    details: '–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                    tournamentId: parseInt(tournamentId),
                    retryAfter: 15,
                    diagnosticAvailable: true
                });
            }
            
            // üÜï –û–ë–†–ê–ë–û–¢–ö–ê –î–†–£–ì–ò–• –û–®–ò–ë–û–ö –ë–õ–û–ö–ò–†–û–í–û–ö –ò –¢–ê–ô–ú–ê–£–¢–û–í
            if (error.code === '57014' || error.message.includes('timeout') || error.message.includes('—Ç–∞–π–º–∞—É—Ç')) {
                return res.status(408).json({
                    error: '–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É',
                    message: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    tournamentId: parseInt(tournamentId),
                    retryAfter: 10
                });
            }
            
            if (error.code === '25P02') {
                return res.status(409).json({
                    error: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
                    message: '–ü—Ä–æ–∏–∑–æ—à–µ–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    tournamentId: parseInt(tournamentId),
                    retryAfter: 5
                });
            }
            
            console.error(`‚ùå [MatchController.generateBracket] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å 500: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏`);
            res.status(500).json({
                error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏',
                message: error.message,
                tournamentId: parseInt(tournamentId),
                timestamp: new Date().toISOString()
            });
        }
    });

    // üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static regenerateBracket = asyncHandler(async (req, res) => {
        const { id: tournamentId } = req.params;
        const { shuffle, thirdPlaceMatch } = req.body;
        const userId = req.user.id;
        
        console.log(`üîÑ [MatchController.regenerateBracket] –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}, shuffle: ${shuffle}`);
        
        const result = await BracketService.regenerateBracket(
            parseInt(tournamentId), 
            userId, 
            shuffle || false, 
            thirdPlaceMatch || false
        );
        
        res.status(200).json({
            success: true,
            message: result.message,
            tournament: result.tournament,
            matches: result.matches,
            deletedMatches: result.deleted_matches
        });
    });

    // üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
    static updateMatchResult = asyncHandler(async (req, res) => {
        const { id: tournamentId, matchId } = req.params;
        const { winner_team_id, score1, score2, maps } = req.body;
        const userId = req.user.id;
        
        console.log(`‚öîÔ∏è [MatchController.updateMatchResult] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${matchId} –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournamentId}`);
        
        const result = await MatchService.updateMatchResult(
            parseInt(tournamentId),
            {
                matchId: parseInt(matchId),
                winner_team_id: parseInt(winner_team_id),
                score1,
                score2,
                maps
            },
            userId
        );
        
        res.status(200).json({
            success: true,
            message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω',
            tournament: result.tournament,
            advancementResult: result.advancementResult
        });
    });

    // üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)
    static updateSpecificMatchResult = asyncHandler(async (req, res) => {
        const { matchId } = req.params;
        const { winner_team_id, score1, score2, maps_data } = req.body;
        
        // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        console.log(`üéØ [updateSpecificMatchResult] –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–ê:`);
        console.log(`   - Match ID (params): ${matchId}`);
        console.log(`   - User ID: ${req.user.id}`);
        console.log(`   - Username: ${req.user.username}`);
        console.log(`   - Request Body:`, JSON.stringify(req.body, null, 2));
        console.log(`   - Winner Team ID: ${winner_team_id}`);
        console.log(`   - Score1: ${score1}`);
        console.log(`   - Score2: ${score2}`);
        console.log(`   - Maps data:`, maps_data);
        
        // üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –° –î–ï–¢–ê–õ–¨–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
        console.log(`üìù [updateSpecificMatchResult] –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏:`, {
            winner_team_id,
            score1, 
            score2,
            maps_data,
            matchId
        });
        
        const validationResult = TournamentValidator.validateMatchResult(req.body);
        
        console.log(`üìù [updateSpecificMatchResult] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`, {
            isValid: validationResult.isValid,
            errors: validationResult.errors
        });
        
        if (!validationResult.isValid) {
            console.log(`‚ùå [updateSpecificMatchResult] –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–®–õ–ê:`);
            validationResult.errors.forEach((error, index) => {
                console.log(`   ${index + 1}. ${error}`);
            });
            return res.status(400).json({ 
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
                message: validationResult.errors 
            });
        }
        
        console.log(`‚úÖ [updateSpecificMatchResult] –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º MatchService...`);
        
        try {
            const result = await MatchService.updateSpecificMatchResult(
                parseInt(matchId),
                { winner_team_id, score1, score2, maps_data },
                req.user.id
            );
            
            console.log(`üéâ [updateSpecificMatchResult] –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï`);
            res.json(result);
        } catch (serviceError) {
            console.error(`‚ùå [updateSpecificMatchResult] –û–®–ò–ë–ö–ê –í –°–ï–†–í–ò–°–ï:`, serviceError.message);
            console.error(`‚ùå [updateSpecificMatchResult] Stack trace:`, serviceError.stack);
            throw serviceError; // Re-throw –¥–ª—è asyncHandler
        }
    });

    // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
    static getMatches = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        const matches = await MatchService.getMatches(parseInt(id));
        
        res.json(matches);
    });

    // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
    static getMatchById = asyncHandler(async (req, res) => {
        const { matchId } = req.params;
        
        const match = await MatchService.getMatchById(parseInt(matchId));
        
        if (!match) {
            return res.status(404).json({ error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(match);
    });

    // üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ç—á–µ–π
    static cleanupDuplicateMatches = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        console.log(`üßπ [MatchController.cleanupDuplicateMatches] Tournament ID: ${id}`);
        console.log(`üßπ [MatchController.cleanupDuplicateMatches] User ID: ${req.user.id}`);
        
        const result = await BracketService.cleanupDuplicateMatches(
            parseInt(id),
            req.user.id
        );
        
        res.status(200).json({
            success: true,
            message: result.message,
            data: {
                removed: result.removed,
                duplicateGroups: result.duplicateGroups
            }
        });
    });

    // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ç—á–µ–π
    static checkDuplicateMatches = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        console.log(`üîç [MatchController.checkDuplicateMatches] Tournament ID: ${id}`);
        
        const result = await BracketService.checkForDuplicateMatches(parseInt(id));
        
        res.status(200).json({
            success: true,
            data: result
        });
    });

    // üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ PostgreSQL (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    static checkDatabaseLocks = asyncHandler(async (req, res) => {
        console.log('üîç [MatchController.checkDatabaseLocks] –ó–∞–ø—Ä–æ—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫');
        
        const { id: tournamentId } = req.params;
        const userId = req.user.id;
        
        try {
            const diagnostic = await BracketService.checkDatabaseLocks(
                tournamentId ? parseInt(tournamentId) : null
            );
            
            console.log(`‚úÖ [MatchController.checkDatabaseLocks] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            
            res.status(200).json({
                success: true,
                message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                tournamentId: tournamentId ? parseInt(tournamentId) : null,
                diagnostic: diagnostic,
                timestamp: new Date().toISOString(),
                recommendations: {
                    hasBlocks: diagnostic.tournamentLocks > 0,
                    suggestion: diagnostic.tournamentLocks > 0 
                        ? '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Ö –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π.'
                        : '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.'
                }
            });
            
        } catch (error) {
            console.error(`‚ùå [MatchController.checkDatabaseLocks] –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`);
            
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫',
                message: error.message,
                tournamentId: tournamentId ? parseInt(tournamentId) : null,
                timestamp: new Date().toISOString()
            });
        }
    });

    /**
     * üÜï –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
     */
    static clearStuckLocks = asyncHandler(async (req, res) => {
        console.log('üßπ [MatchController.clearStuckLocks] –ó–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫');
        
        const { id: tournamentId } = req.params;
        const userId = req.user.id;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω —Ç—É—Ä–Ω–∏—Ä–∞)
            // –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ BracketService.clearStuckLocks
            
            const result = await BracketService.clearStuckLocks(
                parseInt(tournamentId), 
                userId
            );
            
            console.log(`‚úÖ [MatchController.clearStuckLocks] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            
            res.status(200).json({
                success: true,
                message: result.message,
                tournamentId: parseInt(tournamentId),
                result: result,
                timestamp: new Date().toISOString(),
                nextSteps: result.oldDatabaseLocks > 0 
                    ? ['–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ë–î']
                    : ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É']
            });
            
        } catch (error) {
            console.error(`‚ùå [MatchController.clearStuckLocks] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
            
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫',
                message: error.message,
                tournamentId: parseInt(tournamentId),
                timestamp: new Date().toISOString()
            });
        }
    });

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
     */
    static clearMatchResults = asyncHandler(async (req, res) => {
        const { id: tournamentId } = req.params;
        const userId = req.user.id;
        
        console.log(`üßπ [MatchController.clearMatchResults] –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const result = await BracketService.clearMatchResults(
            parseInt(tournamentId), 
            userId
        );
        
        res.status(200).json({
            success: true,
            message: result.message,
            matchesReset: result.matches_reset
        });
    });
}

module.exports = MatchController; 