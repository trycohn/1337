const BracketService = require('../../services/tournament/BracketService');
const MatchService = require('../../services/tournament/MatchService');
const { asyncHandler } = require('../../utils/asyncHandler');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { broadcastTournamentUpdate } = require('../../notifications');
const pool = require('../../db');
const { generateBracket } = require('../../bracketGenerator');

class MatchController {
    /**
     * üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    static generateBracket = asyncHandler(async (req, res) => {
        const startTime = Date.now();
        const tournamentId = parseInt(req.params.id);
        const userId = req.user.id;
        const { thirdPlaceMatch = false } = req.body;
        
        console.log(`üîÑ [MatchController v2.0] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${req.user.username} (ID: ${userId})`);
        console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: thirdPlaceMatch=${thirdPlaceMatch}`);
        
        try {
            const result = await BracketService.generateBracket(tournamentId, userId, thirdPlaceMatch);
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [MatchController v2.0] –°–µ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${duration}ms`);
            
            res.json({
                success: true,
                message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${result.matchesCount} –º–∞—Ç—á–µ–π`,
                data: result
            });
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [MatchController v2.0] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${duration}ms):`, error.message);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏';
            let statusCode = 500;
            
            if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
                userMessage = '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω';
                statusCode = 404;
            } else if (error.message.includes('—É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞')) {
                userMessage = error.message;
                statusCode = 409; // Conflict
            } else if (error.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')) {
                userMessage = error.message;
                statusCode = 400; // Bad Request
            } else if (error.message.includes('–ø—Ä–∞–≤–∞')) {
                userMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏';
                statusCode = 403; // Forbidden
            }
            
            res.status(statusCode).json({
                success: false,
                message: userMessage,
                error: error.message,
                duration
            });
        }
    });
    
    /**
     * üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    static regenerateBracket = asyncHandler(async (req, res) => {
        const startTime = Date.now();
        const tournamentId = parseInt(req.params.id);
        const userId = req.user.id;
        const { shuffle = false, thirdPlaceMatch = false } = req.body;
        
        console.log(`üîÑ [MatchController v2.0] –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${req.user.username} (ID: ${userId})`);
        console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: shuffle=${shuffle}, thirdPlaceMatch=${thirdPlaceMatch}`);
        
        try {
            const result = await BracketService.regenerateBracket(tournamentId, userId, shuffle, thirdPlaceMatch);
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [MatchController v2.0] –°–µ—Ç–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${duration}ms`);
            
            res.json({
                success: true,
                message: `–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${result.matchesCount} –º–∞—Ç—á–µ–π${shuffle ? ' (—Å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º)' : ''}`,
                data: result
            });
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [MatchController v2.0] –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (${duration}ms):`, error.message);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏';
            let statusCode = 500;
            
            if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
                userMessage = '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω';
                statusCode = 404;
            } else if (error.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')) {
                userMessage = error.message;
                statusCode = 400;
            } else if (error.message.includes('–ø—Ä–∞–≤–∞')) {
                userMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏';
                statusCode = 403;
            }
            
            res.status(statusCode).json({
                success: false,
                message: userMessage,
                error: error.message,
                duration
            });
        }
    });
    
    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
     */
    static clearMatchResults = asyncHandler(async (req, res) => {
        const startTime = Date.now();
        const tournamentId = parseInt(req.params.id);
        const userId = req.user.id;
        
        console.log(`üóëÔ∏è [MatchController v2.0] –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${req.user.username} (ID: ${userId})`);
        
        try {
            const result = await BracketService.clearMatchResults(tournamentId, userId);
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [MatchController v2.0] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã –∑–∞ ${duration}ms`);
            
            res.json({
                success: true,
                message: `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã: ${result.clearedCount} –º–∞—Ç—á–µ–π`,
                data: result
            });
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [MatchController v2.0] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (${duration}ms):`, error.message);
            
            let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤';
            let statusCode = 500;
            
            if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
                userMessage = '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω';
                statusCode = 404;
            } else if (error.message.includes('–ø—Ä–∞–≤–∞')) {
                userMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤';
                statusCode = 403;
            }
            
            res.status(statusCode).json({
                success: false,
                message: userMessage,
                error: error.message,
                duration
            });
        }
    });
    
    /**
     * üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    static saveMatchResult = asyncHandler(async (req, res) => {
        const startTime = Date.now();
        const matchId = parseInt(req.params.matchId);
        const userId = req.user.id;
        
        console.log(`üìä [MatchController v2.0] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ ${matchId}`);
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${req.user.username} (ID: ${userId})`);
        
        try {
            const result = await MatchService.saveResult(matchId, req.body, userId);
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [MatchController v2.0] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∑–∞ ${duration}ms`);
            
            res.json({
                success: true,
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
                data: result
            });
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [MatchController v2.0] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (${duration}ms):`, error.message);
            
            let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞';
            let statusCode = 500;
            
            if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
                userMessage = '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω';
                statusCode = 404;
            } else if (error.message.includes('–ø—Ä–∞–≤–∞')) {
                userMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞';
                statusCode = 403;
            } else if (error.message.includes('–∑–∞–≤–µ—Ä—à–µ–Ω')) {
                userMessage = '–ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω';
                statusCode = 409;
            }
            
            res.status(statusCode).json({
                success: false,
                message: userMessage,
                error: error.message,
                duration
            });
        }
    });
    
    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static getMatches = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        
        console.log(`üìã [MatchController v2.0] –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            const matches = await MatchService.getByTournamentId(tournamentId);
            
            res.json({
                success: true,
                data: matches
            });
            
        } catch (error) {
            console.error(`‚ùå [MatchController v2.0] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π:`, error.message);
            
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π',
                error: error.message
            });
        }
    });
    
    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
     */
    static getMatch = asyncHandler(async (req, res) => {
        const matchId = parseInt(req.params.matchId);
        
        console.log(`üìã [MatchController v2.0] –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${matchId}`);
        
        try {
            const match = await MatchService.getById(matchId);
            
            if (!match) {
                return res.status(404).json({
                    success: false,
                    message: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }
            
            res.json({
                success: true,
                data: match
            });
            
        } catch (error) {
            console.error(`‚ùå [MatchController v2.0] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–∞:`, error.message);
            
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–∞',
                error: error.message
            });
        }
    });

    /**
     * üö® QA FIX: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async killGeneration(req, res) {
        try {
            const { id: tournamentId } = req.params;
            const user = req.user;
            
            console.log(`üö® [MatchController] –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username} (ID: ${user.id})`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (user.role !== 'admin') {
                return res.status(403).json({
                    error: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É'
                });
            }
            
            // 1. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
            await pool.query(
                'UPDATE tournaments SET status = $1 WHERE id = $2 AND status = $3',
                ['active', tournamentId, 'generating']
            );
            
            // 2. –£–±–∏–≤–∞–µ–º –≤—Å–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ PostgreSQL
            await pool.query(`
                SELECT pg_cancel_backend(pid) 
                FROM pg_stat_activity 
                WHERE state != 'idle' 
                AND query LIKE '%matches%' 
                AND query LIKE '%${tournamentId}%'
                AND query_start < NOW() - INTERVAL '60 seconds'
            `);
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const statusCheck = await pool.query(
                'SELECT status FROM tournaments WHERE id = $1',
                [tournamentId]
            );
            
            const matchesCheck = await pool.query(
                'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
                [tournamentId]
            );
            
            console.log(`‚úÖ [MatchController] –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:`);
            console.log(`   ‚Ä¢ –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞: ${statusCheck.rows[0]?.status}`);
            console.log(`   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π: ${matchesCheck.rows[0]?.count}`);
            
            res.json({
                success: true,
                message: '–ó–∞–≤–∏—Å—à–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
                tournamentStatus: statusCheck.rows[0]?.status,
                matchesCount: parseInt(matchesCheck.rows[0]?.count)
            });
            
        } catch (error) {
            console.error(`‚ùå [MatchController] –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:`, error.message);
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
                details: error.message
            });
        }
    }
}

module.exports = MatchController; 