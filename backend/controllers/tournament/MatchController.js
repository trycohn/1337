const BracketService = require('../../services/tournament/BracketService');
const MatchService = require('../../services/tournament/MatchService');
const { asyncHandler } = require('../../utils/asyncHandler');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { broadcastTournamentUpdate } = require('../../notifications');
const pool = require('../../db');

class MatchController {
    /**
     * üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
     */
    static clearMatchResults = asyncHandler(async (req, res) => {
        const startTime = Date.now();
        const tournamentId = parseInt(req.params.id);
        const userId = req.user.id;
        
        console.log(`üóëÔ∏è [MatchController v4.0] –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${req.user.username} (ID: ${userId})`);
        
        try {
            const result = await BracketService.clearMatchResults(tournamentId, userId);
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [MatchController v4.0] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã –∑–∞ ${duration}ms`);
            
            res.json({
                success: true,
                message: `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã: ${result.clearedCount} –º–∞—Ç—á–µ–π`,
                data: result
            });
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [MatchController v4.0] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (${duration}ms):`, error.message);
            
            let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤';
            let statusCode = 500;
            
            if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
                userMessage = '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω';
                statusCode = 404;
            } else if (error.message.includes('–ø—Ä–∞–≤–∞')) {
                userMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤';
                statusCode = 403;
            }
            
            res.status(statusCode).json({
                success: false,
                message: userMessage,
                error: error.message,
                duration
            });
        }
    });
    
    /**
     * üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    static saveMatchResult = asyncHandler(async (req, res) => {
        const startTime = Date.now();
        const matchId = parseInt(req.params.matchId);
        const userId = req.user.id;
        
        console.log(`üìä [MatchController v4.0] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ ${matchId}`);
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${req.user.username} (ID: ${userId})`);
        
        try {
            const result = await MatchService.saveResult(matchId, req.body, userId);
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [MatchController v4.0] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∑–∞ ${duration}ms`);
            
            res.json({
                success: true,
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
                data: result
            });
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [MatchController v4.0] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (${duration}ms):`, error.message);
            
            let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞';
            let statusCode = 500;
            
            if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
                userMessage = '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω';
                statusCode = 404;
            } else if (error.message.includes('–ø—Ä–∞–≤–∞')) {
                userMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞';
                statusCode = 403;
            } else if (error.message.includes('–∑–∞–≤–µ—Ä—à–µ–Ω')) {
                userMessage = '–ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω';
                statusCode = 409;
            }
            
            res.status(statusCode).json({
                success: false,
                message: userMessage,
                error: error.message,
                duration
            });
        }
    });
    
    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static getMatches = asyncHandler(async (req, res) => {
        const tournamentId = parseInt(req.params.id);
        
        console.log(`üìã [MatchController v4.0] –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            const start = Date.now();
            const matches = await MatchService.getByTournamentId(tournamentId);

            // –ö–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫—ç—à –∏ ETag –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞—Ö–æ–¥–∞—Ö
            try {
                const crypto = require('crypto');
                const hash = crypto.createHash('md5').update(JSON.stringify(matches)).digest('hex');
                res.set('Cache-Control', 'private, max-age=15, stale-while-revalidate=30');
                res.set('Vary', 'Authorization');
                res.set('ETag', `W/"matches-${tournamentId}-${matches?.length || 0}-${hash.substring(0, 12)}"`);
                res.set('X-Response-Time', `${Date.now() - start}ms`);
            } catch (_) {}

            res.json({
                success: true,
                data: matches
            });
            
        } catch (error) {
            console.error(`‚ùå [MatchController v4.0] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π:`, error.message);
            
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π',
                error: error.message
            });
        }
    });
    
    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
     */
    static getMatch = asyncHandler(async (req, res) => {
        const matchId = parseInt(req.params.matchId);
        
        console.log(`üìã [MatchController v4.0] –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${matchId}`);
        
        try {
            const match = await MatchService.getById(matchId);
            
            if (!match) {
                return res.status(404).json({
                    success: false,
                    message: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }
            
            res.json({
                success: true,
                data: match
            });
            
        } catch (error) {
            console.error(`‚ùå [MatchController v4.0] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–∞:`, error.message);
            
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–∞',
                error: error.message
            });
        }
    });
}

module.exports = MatchController; 