const MatchService = require('../../services/tournament/MatchService');
const BracketService = require('../../services/tournament/BracketService');
const TournamentValidator = require('../../validators/tournament/TournamentValidator');
const { asyncHandler } = require('../../utils/asyncHandler');

class MatchController {
    // ü•ä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static generateBracket = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { thirdPlaceMatch } = req.body;
        
        const result = await BracketService.generateBracket(
            parseInt(id),
            req.user.id,
            thirdPlaceMatch
        );
        
        res.json({
            message: '–°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞',
            tournament: result.tournament
        });
    });

    // üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static regenerateBracket = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { thirdPlaceMatch } = req.body;
        
        const result = await BracketService.regenerateBracket(
            parseInt(id),
            req.user.id,
            thirdPlaceMatch
        );
        
        res.json({
            success: true,
            message: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞',
            tournament: result.tournament
        });
    });

    // üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
    static updateMatchResult = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { matchId, winner_team_id, score1, score2, maps } = req.body;
        
        const validationResult = TournamentValidator.validateMatchResult(req.body);
        if (!validationResult.isValid) {
            return res.status(400).json({ error: validationResult.errors });
        }
        
        const result = await MatchService.updateMatchResult(
            parseInt(id), 
            { matchId, winner_team_id, score1, score2, maps }, 
            req.user.id
        );
        
        res.json(result);
    });

    // üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)
    static updateSpecificMatchResult = asyncHandler(async (req, res) => {
        const { matchId } = req.params;
        const { winner_team_id, score1, score2, maps_data } = req.body;
        
        const validationResult = TournamentValidator.validateMatchResult(req.body);
        if (!validationResult.isValid) {
            return res.status(400).json({ error: validationResult.errors });
        }
        
        const result = await MatchService.updateSpecificMatchResult(
            parseInt(matchId),
            { winner_team_id, score1, score2, maps_data },
            req.user.id
        );
        
        res.json(result);
    });

    // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
    static getMatches = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        const matches = await MatchService.getMatches(parseInt(id));
        
        res.json(matches);
    });

    // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
    static getMatchById = asyncHandler(async (req, res) => {
        const { matchId } = req.params;
        
        const match = await MatchService.getMatchById(parseInt(matchId));
        
        if (!match) {
            return res.status(404).json({ error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(match);
    });
}

module.exports = MatchController; 