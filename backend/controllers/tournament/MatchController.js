const MatchService = require('../../services/tournament/MatchService');
const BracketService = require('../../services/tournament/BracketService');
const TournamentValidator = require('../../validators/tournament/TournamentValidator');
const { asyncHandler } = require('../../utils/asyncHandler');

class MatchController {
    // ü•ä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static generateBracket = asyncHandler(async (req, res) => {
        const startTime = Date.now();
        const { id } = req.params;
        const { thirdPlaceMatch } = req.body;
        
        console.log('üöÄ [MatchController.generateBracket] –ú–û–î–£–õ–¨–ù–´–ô –†–û–£–¢–ï–† –ü–û–õ–£–ß–ò–õ –ó–ê–ü–†–û–°!');
        console.log('üöÄ [MatchController.generateBracket] Tournament ID:', id);
        console.log('üöÄ [MatchController.generateBracket] User ID:', req.user.id);
        console.log('üöÄ [MatchController.generateBracket] Username:', req.user.username);
        console.log('üöÄ [MatchController.generateBracket] Request body:', req.body);
        console.log('üöÄ [MatchController.generateBracket] thirdPlaceMatch:', thirdPlaceMatch);
        
        try {
            console.log('üöÄ [MatchController.generateBracket] –í—ã–∑—ã–≤–∞–µ–º BracketService.generateBracket...');
            
            const result = await BracketService.generateBracket(
                parseInt(id),
                req.user.id,
                thirdPlaceMatch
            );
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [MatchController.generateBracket] BracketService –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}ms`);
            console.log(`‚úÖ [MatchController.generateBracket] –†–µ–∑—É–ª—å—Ç–∞—Ç:`, {
                success: result.success,
                totalMatches: result.totalMatches,
                existing: result.existing || false,
                concurrent: result.concurrent || false
            });
            
            res.json({
                success: true,
                message: result.message || '–°–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞',
                tournament: result.tournament,
                matches: result.matches,
                totalMatches: result.totalMatches,
                existing: result.existing || false,
                duration: duration
            });
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [MatchController.generateBracket] –û–®–ò–ë–ö–ê –ø–æ—Å–ª–µ ${duration}ms:`, error.message);
            console.error(`‚ùå [MatchController.generateBracket] –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}`);
            console.error(`‚ùå [MatchController.generateBracket] –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
            console.error(`‚ùå [MatchController.generateBracket] Stack trace:`, error.stack);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π HTTP —Å—Ç–∞—Ç—É—Å
            let statusCode = 500;
            let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏';
            
            if (error.message.includes('—Ç–∞–π–º–∞—É—Ç')) {
                statusCode = 408; // Request Timeout
                userMessage = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.';
            } else if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
                statusCode = 404; // Not Found
                userMessage = error.message;
            } else if (error.message.includes('–ø—Ä–∞–≤–∞') || error.message.includes('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')) {
                statusCode = 403; // Forbidden
                userMessage = error.message;
            } else if (error.message.includes('–∫–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã') || 
                       error.message.includes('–º–∏–Ω–∏–º—É–º') || 
                       error.message.includes('—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')) {
                statusCode = 400; // Bad Request
                userMessage = error.message;
            } else if (error.message.includes('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º')) {
                statusCode = 423; // Locked
                userMessage = '–¢—É—Ä–Ω–∏—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.';
            }
            
            console.error(`‚ùå [MatchController.generateBracket] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å ${statusCode}: ${userMessage}`);
            
            return res.status(statusCode).json({
                success: false,
                error: userMessage,
                code: error.code || 'GENERATION_ERROR',
                duration: duration,
                timestamp: new Date().toISOString(),
                tournamentId: id,
                userId: req.user.id,
                // –í development —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                ...(process.env.NODE_ENV === 'development' && {
                    technical: {
                        originalError: error.message,
                        errorType: error.name,
                        errorCode: error.code
                    }
                })
            });
        }
    });

    // üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    static regenerateBracket = asyncHandler(async (req, res) => {
        const startTime = Date.now();
        const { id } = req.params;
        const { shuffleParticipants, thirdPlaceMatch } = req.body;
        
        console.log(`üîÑ [MatchController.regenerateBracket] –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–ê`);
        console.log(`üîÑ [MatchController.regenerateBracket] Tournament ID: ${id}`);
        console.log(`üîÑ [MatchController.regenerateBracket] User ID: ${req.user.id}`);
        console.log(`üîÑ [MatchController.regenerateBracket] Username: ${req.user.username}`);
        console.log(`üîÑ [MatchController.regenerateBracket] shuffleParticipants: ${shuffleParticipants}`);
        console.log(`üîÑ [MatchController.regenerateBracket] thirdPlaceMatch: ${thirdPlaceMatch}`);
        console.log(`üîÑ [MatchController.regenerateBracket] Request body:`, req.body);
        
        try {
            console.log(`üöÄ [MatchController.regenerateBracket] –í—ã–∑—ã–≤–∞–µ–º BracketService.regenerateBracket...`);
            
            const result = await BracketService.regenerateBracket(
                parseInt(id),
                req.user.id,
                shuffleParticipants || false,  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä - shuffle
                thirdPlaceMatch || false       // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - thirdPlaceMatch
            );
            
            const duration = Date.now() - startTime;
            console.log(`‚úÖ [MatchController.regenerateBracket] BracketService –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}ms`);
            console.log(`‚úÖ [MatchController.regenerateBracket] –†–µ–∑—É–ª—å—Ç–∞—Ç:`, {
                success: result.success,
                totalMatches: result.totalMatches,
                shuffled: shuffleParticipants || false
            });
            
            res.json({
                success: true,
                message: result.message || '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞',
                tournament: result.tournament,
                matches: result.matches,
                totalMatches: result.totalMatches,
                shuffled: shuffleParticipants || false,
                duration: duration
            });
            
        } catch (error) {
            const duration = Date.now() - startTime;
            console.error(`‚ùå [MatchController.regenerateBracket] –û–®–ò–ë–ö–ê –ø–æ—Å–ª–µ ${duration}ms:`, error.message);
            console.error(`‚ùå [MatchController.regenerateBracket] –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}`);
            console.error(`‚ùå [MatchController.regenerateBracket] –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
            console.error(`‚ùå [MatchController.regenerateBracket] Stack trace:`, error.stack);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π HTTP —Å—Ç–∞—Ç—É—Å
            let statusCode = 500;
            let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏';
            
            if (error.message.includes('—Ç–∞–π–º–∞—É—Ç')) {
                statusCode = 408; // Request Timeout
                userMessage = '–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.';
            } else if (error.message.includes('—á–∞—Å—Ç–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è')) {
                statusCode = 429; // Too Many Requests
                userMessage = error.message;
            } else if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
                statusCode = 404; // Not Found
                userMessage = error.message;
            } else if (error.message.includes('–ø—Ä–∞–≤–∞') || error.message.includes('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')) {
                statusCode = 403; // Forbidden
                userMessage = error.message;
            } else if (error.message.includes('–∫–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã') || 
                       error.message.includes('–º–∏–Ω–∏–º—É–º') || 
                       error.message.includes('—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')) {
                statusCode = 400; // Bad Request
                userMessage = error.message;
            } else if (error.message.includes('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º')) {
                statusCode = 423; // Locked
                userMessage = '–¢—É—Ä–Ω–∏—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.';
            }
            
            console.error(`‚ùå [MatchController.regenerateBracket] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å ${statusCode}: ${userMessage}`);
            
            return res.status(statusCode).json({
                success: false,
                error: userMessage,
                code: error.code || 'REGENERATION_ERROR',
                duration: duration,
                timestamp: new Date().toISOString(),
                tournamentId: id,
                userId: req.user.id,
                // –í development —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                ...(process.env.NODE_ENV === 'development' && {
                    technical: {
                        originalError: error.message,
                        errorType: error.name,
                        errorCode: error.code
                    }
                })
            });
        }
    });

    // üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞
    static updateMatchResult = asyncHandler(async (req, res) => {
        const { id } = req.params;
        const { matchId, winner_team_id, score1, score2, maps } = req.body;
        
        const validationResult = TournamentValidator.validateMatchResult(req.body);
        if (!validationResult.isValid) {
            return res.status(400).json({ error: validationResult.errors });
        }
        
        const result = await MatchService.updateMatchResult(
            parseInt(id), 
            { matchId, winner_team_id, score1, score2, maps }, 
            req.user.id
        );
        
        res.json(result);
    });

    // üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)
    static updateSpecificMatchResult = asyncHandler(async (req, res) => {
        const { matchId } = req.params;
        const { winner_team_id, score1, score2, maps_data } = req.body;
        
        // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        console.log(`üéØ [updateSpecificMatchResult] –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–ê:`);
        console.log(`   - Match ID (params): ${matchId}`);
        console.log(`   - User ID: ${req.user.id}`);
        console.log(`   - Username: ${req.user.username}`);
        console.log(`   - Request Body:`, JSON.stringify(req.body, null, 2));
        console.log(`   - Winner Team ID: ${winner_team_id}`);
        console.log(`   - Score1: ${score1}`);
        console.log(`   - Score2: ${score2}`);
        console.log(`   - Maps data:`, maps_data);
        
        // üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –° –î–ï–¢–ê–õ–¨–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
        console.log(`üìù [updateSpecificMatchResult] –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏:`, {
            winner_team_id,
            score1, 
            score2,
            maps_data,
            matchId
        });
        
        const validationResult = TournamentValidator.validateMatchResult(req.body);
        
        console.log(`üìù [updateSpecificMatchResult] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`, {
            isValid: validationResult.isValid,
            errors: validationResult.errors
        });
        
        if (!validationResult.isValid) {
            console.log(`‚ùå [updateSpecificMatchResult] –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–®–õ–ê:`);
            validationResult.errors.forEach((error, index) => {
                console.log(`   ${index + 1}. ${error}`);
            });
            return res.status(400).json({ 
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
                message: validationResult.errors 
            });
        }
        
        console.log(`‚úÖ [updateSpecificMatchResult] –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º MatchService...`);
        
        try {
            const result = await MatchService.updateSpecificMatchResult(
                parseInt(matchId),
                { winner_team_id, score1, score2, maps_data },
                req.user.id
            );
            
            console.log(`üéâ [updateSpecificMatchResult] –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï`);
            res.json(result);
        } catch (serviceError) {
            console.error(`‚ùå [updateSpecificMatchResult] –û–®–ò–ë–ö–ê –í –°–ï–†–í–ò–°–ï:`, serviceError.message);
            console.error(`‚ùå [updateSpecificMatchResult] Stack trace:`, serviceError.stack);
            throw serviceError; // Re-throw –¥–ª—è asyncHandler
        }
    });

    // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
    static getMatches = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        const matches = await MatchService.getMatches(parseInt(id));
        
        res.json(matches);
    });

    // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
    static getMatchById = asyncHandler(async (req, res) => {
        const { matchId } = req.params;
        
        const match = await MatchService.getMatchById(parseInt(matchId));
        
        if (!match) {
            return res.status(404).json({ error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(match);
    });

    // üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ç—á–µ–π
    static cleanupDuplicateMatches = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        console.log(`üßπ [MatchController.cleanupDuplicateMatches] Tournament ID: ${id}`);
        console.log(`üßπ [MatchController.cleanupDuplicateMatches] User ID: ${req.user.id}`);
        
        const result = await BracketService.cleanupDuplicateMatches(
            parseInt(id),
            req.user.id
        );
        
        res.status(200).json({
            success: true,
            message: result.message,
            data: {
                removed: result.removed,
                duplicateGroups: result.duplicateGroups
            }
        });
    });

    // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ç—á–µ–π
    static checkDuplicateMatches = asyncHandler(async (req, res) => {
        const { id } = req.params;
        
        console.log(`üîç [MatchController.checkDuplicateMatches] Tournament ID: ${id}`);
        
        const result = await BracketService.checkForDuplicateMatches(parseInt(id));
        
        res.status(200).json({
            success: true,
            data: result
        });
    });

    // üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ PostgreSQL (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    static checkDatabaseLocks = asyncHandler(async (req, res) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (req.user.role !== 'admin') {
            return res.status(403).json({
                success: false,
                error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
            });
        }
        
        const { id } = req.params;
        console.log(`üîß [MatchController.checkDatabaseLocks] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${id}, –∞–¥–º–∏–Ω: ${req.user.username}`);
        
        try {
            const pool = require('../../db');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ
            const locksQuery = `
                SELECT 
                    pg_locks.locktype,
                    pg_locks.mode,
                    pg_locks.granted,
                    pg_locks.pid,
                    pg_stat_activity.query,
                    pg_stat_activity.state,
                    pg_stat_activity.query_start,
                    EXTRACT(EPOCH FROM (now() - pg_stat_activity.query_start)) as duration_seconds
                FROM pg_locks
                LEFT JOIN pg_stat_activity ON pg_locks.pid = pg_stat_activity.pid
                WHERE pg_locks.relation = (
                    SELECT oid FROM pg_class WHERE relname = 'tournaments'
                )
                AND pg_stat_activity.query LIKE '%tournaments%'
                AND pg_stat_activity.state != 'idle'
                ORDER BY pg_stat_activity.query_start;
            `;
            
            const locksResult = await pool.query(locksQuery);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            const connectionsQuery = `
                SELECT 
                    COUNT(*) as total_connections,
                    COUNT(CASE WHEN state = 'active' THEN 1 END) as active_connections,
                    COUNT(CASE WHEN state = 'idle in transaction' THEN 1 END) as idle_in_transaction
                FROM pg_stat_activity
                WHERE datname = current_database();
            `;
            
            const connectionsResult = await pool.query(connectionsQuery);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã
            const longQueriesQuery = `
                SELECT 
                    pid,
                    state,
                    query,
                    query_start,
                    EXTRACT(EPOCH FROM (now() - query_start)) as duration_seconds
                FROM pg_stat_activity
                WHERE datname = current_database()
                AND state != 'idle'
                AND EXTRACT(EPOCH FROM (now() - query_start)) > 5
                ORDER BY query_start;
            `;
            
            const longQueriesResult = await pool.query(longQueriesQuery);
            
            console.log(`‚úÖ [MatchController.checkDatabaseLocks] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
                locks: locksResult.rows.length,
                longQueries: longQueriesResult.rows.length,
                totalConnections: connectionsResult.rows[0].total_connections
            });
            
            res.json({
                success: true,
                tournamentId: parseInt(id),
                timestamp: new Date().toISOString(),
                locks: {
                    count: locksResult.rows.length,
                    details: locksResult.rows
                },
                connections: connectionsResult.rows[0],
                longRunningQueries: {
                    count: longQueriesResult.rows.length,
                    queries: longQueriesResult.rows
                },
                recommendations: generateLockRecommendations(locksResult.rows, longQueriesResult.rows)
            });
            
        } catch (error) {
            console.error(`‚ùå [MatchController.checkDatabaseLocks] –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:`, error);
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                details: error.message
            });
        }
    });
}

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º
function generateLockRecommendations(locks, longQueries) {
    const recommendations = [];
    
    if (locks.length > 0) {
        recommendations.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ tournaments');
        
        const unGrantedLocks = locks.filter(lock => !lock.granted);
        if (unGrantedLocks.length > 0) {
            recommendations.push(`${unGrantedLocks.length} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –æ–∂–∏–¥–∞—é—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è - –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞`);
        }
        
        const oldLocks = locks.filter(lock => lock.duration_seconds > 10);
        if (oldLocks.length > 0) {
            recommendations.push(`${oldLocks.length} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ`);
        }
    }
    
    if (longQueries.length > 0) {
        recommendations.push(`–ù–∞–π–¥–µ–Ω–æ ${longQueries.length} –¥–æ–ª–≥–æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤`);
        
        const veryLongQueries = longQueries.filter(query => query.duration_seconds > 30);
        if (veryLongQueries.length > 0) {
            recommendations.push(`${veryLongQueries.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥ - –∫—Ä–∏—Ç–∏—á–Ω–æ`);
        }
    }
    
    if (locks.length === 0 && longQueries.length === 0) {
        recommendations.push('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –¥–æ–ª–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    }
    
    return recommendations;
}

module.exports = MatchController; 