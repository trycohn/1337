const TournamentRepository = require('../../repositories/tournament/TournamentRepository');
const ParticipantRepository = require('../../repositories/tournament/ParticipantRepository');
const { logTournamentEvent } = require('../../utils/tournament/logger');
const { asyncHandler } = require('../../utils/asyncHandler');
const pool = require('../../db');

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
 */
class WaitingListController {
    /**
     * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–∏—Å—Ç—É –æ–∂–∏–¥–∞–Ω–∏—è
     */
    static joinWaitingList = asyncHandler(async (req, res) => {
        const { id: tournamentId } = req.params;
        const userId = req.user.id;
        const username = req.user.username;

        console.log('üìã [WaitingListController] –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –ª–∏—Å—Ç—É –æ–∂–∏–¥–∞–Ω–∏—è:', {
            tournamentId,
            userId,
            username
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(parseInt(tournamentId));
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∫–æ–º–∞–Ω–¥–Ω—ã–π
        if (tournament.participant_type !== 'team') {
            return res.status(400).json({ error: '–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω
        if (!tournament.waiting_list_enabled) {
            return res.status(400).json({ error: '–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—É—Ä–Ω–∏—Ä –∞–∫—Ç–∏–≤–µ–Ω
        if (tournament.status !== 'active') {
            return res.status(400).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—è–∑–æ–∫
        const userCheck = await pool.query(
            'SELECT id, steam_id, faceit_id FROM users WHERE id = $1',
            [userId]
        );
        const user = userCheck.rows[0];

        if (tournament.waiting_list_require_faceit && !user.faceit_id) {
            return res.status(400).json({ 
                error: '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å FACEIT –∞–∫–∫–∞—É–Ω—Ç',
                code: 'FACEIT_LINK_REQUIRED'
            });
        }

        if (tournament.waiting_list_require_steam && !user.steam_id) {
            return res.status(400).json({ 
                error: '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å Steam –∞–∫–∫–∞—É–Ω—Ç',
                code: 'STEAM_LINK_REQUIRED'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç
        const existingParticipant = await ParticipantRepository.getUserParticipation(
            parseInt(tournamentId),
            userId
        );

        if (existingParticipant) {
            if (existingParticipant.in_waiting_list) {
                return res.status(400).json({ error: '–í—ã —É–∂–µ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è' });
            }
            if (existingParticipant.in_team) {
                return res.status(400).json({ error: '–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞' });
            }
            return res.status(400).json({ error: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ' });
        }

        // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
        const participant = await ParticipantRepository.create({
            tournament_id: parseInt(tournamentId),
            user_id: userId,
            name: username
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
        await pool.query(
            'UPDATE tournament_participants SET in_waiting_list = TRUE WHERE id = $1',
            [participant.id]
        );

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(parseInt(tournamentId), userId, 'joined_waiting_list', {
            participantId: participant.id,
            participantName: username
        });

        res.json({ 
            success: true,
            message: '–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è',
            participant
        });
    });

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
     */
    static getWaitingList = asyncHandler(async (req, res) => {
        const { id: tournamentId } = req.params;

        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
        const result = await pool.query(`
            SELECT 
                tp.id,
                tp.name,
                tp.user_id,
                tp.faceit_elo,
                tp.cs2_premier_rank,
                tp.created_at,
                u.username,
                u.avatar_url,
                u.faceit_elo as user_faceit_elo,
                u.cs2_premier_rank as user_cs2_premier_rank
            FROM tournament_participants tp
            LEFT JOIN users u ON tp.user_id = u.id
            WHERE tp.tournament_id = $1 
                AND tp.in_waiting_list = TRUE
                AND tp.in_team = FALSE
            ORDER BY tp.created_at ASC
        `, [tournamentId]);

        res.json({ 
            success: true,
            waitingList: result.rows,
            count: result.rows.length
        });
    });

    /**
     * –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É
     */
    static assignToTeam = asyncHandler(async (req, res) => {
        const { id: tournamentId, participantId } = req.params;
        const { teamId } = req.body;

        if (!teamId) {
            return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É' });
        }

        console.log('üéØ [WaitingListController] –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ª–∏—Å—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥—É:', {
            tournamentId,
            participantId,
            teamId
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        const tournament = await TournamentRepository.getById(parseInt(tournamentId));
        if (!tournament) {
            return res.status(404).json({ error: '–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        const isCreator = tournament.created_by === req.user.id;
        const isAdmin = req.user.role === 'admin';
        
        if (!isCreator && !isAdmin) {
            const adminCheck = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [tournamentId, req.user.id]
            );
            if (adminCheck.rows.length === 0) {
                return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤' });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const participant = await ParticipantRepository.getById(parseInt(participantId));
        if (!participant || participant.tournament_id !== parseInt(tournamentId)) {
            return res.status(404).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ' });
        }

        if (!participant.in_waiting_list) {
            return res.status(400).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        const team = await TeamRepository.getById(parseInt(teamId));
        if (!team || team.tournament_id !== parseInt(tournamentId)) {
            return res.status(404).json({ error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ' });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
        await pool.query(
            'INSERT INTO tournament_team_members (team_id, user_id, participant_id) VALUES ($1, $2, $3)',
            [teamId, participant.user_id, participantId]
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏
        await pool.query(
            'UPDATE tournament_participants SET in_waiting_list = FALSE, in_team = TRUE WHERE id = $1',
            [participantId]
        );

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await logTournamentEvent(parseInt(tournamentId), req.user.id, 'assigned_from_waiting_list', {
            participantId: parseInt(participantId),
            participantName: participant.name,
            teamId: parseInt(teamId),
            teamName: team.name
        });

        res.json({ 
            success: true,
            message: `${participant.name} –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É ${team.name}`
        });
    });
}

module.exports = WaitingListController;
