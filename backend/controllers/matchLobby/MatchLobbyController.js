// üéÆ MatchLobbyController - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–±–±–∏ –º–∞—Ç—á–µ–π
const MatchLobbyService = require('../../services/matchLobby/MatchLobbyService');
const { sendSystemNotification, ensureSystemUser } = require('../../utils/systemNotifications');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');

class MatchLobbyController {
    // üîß –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
    static async updateLobbySettings(req, res) {
        try {
            const { id } = req.params;
            const { enabled, matchFormat, maps } = req.body;
            const userId = req.user.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const isAdmin = await req.checkTournamentAccess(id, userId);
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ª–æ–±–±–∏' 
                });
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 7)
            if (enabled && maps && maps.length !== 7) {
                return res.status(400).json({ 
                    error: '–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ª–æ–±–±–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 7 –∫–∞—Ä—Ç' 
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settings = await MatchLobbyService.createLobbySettings(id, {
                enabled,
                matchFormat
            });
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞—Ä—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
            if (maps && maps.length === 7) {
                await MatchLobbyService.setTournamentMaps(id, maps);
            }
            
            res.json({
                success: true,
                settings,
                message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏' 
            });
        }
    }
    
    // üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏ –ø–æ –º–∞—Ç—á—É
    static async getActiveLobbyByMatch(req, res) {
        try {
            const { tournamentId, matchId } = req.params;
            const userId = req.user.id;

            const lobby = await MatchLobbyService.getActiveLobbyByMatch(matchId, tournamentId, userId);
            if (!lobby) {
                return res.json({ success: true, lobby: null });
            }
            return res.json({ success: true, lobby });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏ –ø–æ –º–∞—Ç—á—É:', error);
            res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏' });
        }
    }

    // üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static async getActiveLobbiesForUser(req, res) {
        try {
            const userId = req.user.id;
            const lobbies = await MatchLobbyService.getActiveLobbiesForUser(userId);
            res.json({ success: true, lobbies });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏' });
        }
    }

    // üèÅ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –¥–ª—è –º–∞—Ç—á–∞
    static async createMatchLobby(req, res) {
        try {
            const { tournamentId, matchId } = req.params;
            const { matchFormat } = req.body || {};
            const userId = req.user.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const isAdmin = await req.checkTournamentAccess(tournamentId, userId);
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏ –º–∞—Ç—á–∞' 
                });
            }
            
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ª–æ–±–±–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è UI
            const existing = await MatchLobbyService.findLobbyByMatch(matchId, tournamentId);
            if (existing) {
                return res.status(200).json({
                    success: true,
                    alreadyExists: true,
                    lobby: existing,
                    message: '–õ–æ–±–±–∏ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ —Ä–∞–Ω–µ–µ'
                });
            }

            const result = await MatchLobbyService.createMatchLobby(matchId, tournamentId, matchFormat);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
            const io = req.app.get('io');
            if (io) {
                result.invitations.forEach(invitation => {
                    io.to(`user_${invitation.user_id}`).emit('match_lobby_invite', {
                        lobbyId: result.lobby.id,
                        matchId,
                        tournamentId
                    });
                });
            }

            // üì® –î—É–±–ª–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const baseUrl = process.env.NODE_ENV === 'production'
                    ? 'https://1337community.com'
                    : 'http://localhost:3000';
                const lobbyUrl = `${baseUrl}/lobby/${result.lobby.id}`;
                const matchUrl = `${baseUrl}/tournaments/${tournamentId}/match/${matchId}`;

                const message = `üéÆ –°–æ–∑–¥–∞–Ω–æ –ª–æ–±–±–∏ –º–∞—Ç—á–∞. –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–æ–±–±–∏: ${lobbyUrl}`;
                const metadata = {
                    type: 'match_lobby_invite',
                    tournament_id: Number(tournamentId),
                    match_id: Number(matchId),
                    lobby_id: Number(result.lobby.id),
                    actions: [
                        { type: 'open_lobby', label: '‚û° –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–æ–±–±–∏', action: 'open_lobby', style: 'primary', url: lobbyUrl, target: '_blank' },
                        { type: 'open_match', label: 'üóÇ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ç—á–∞', action: 'open_match', style: 'ghost', url: matchUrl, target: '_blank' }
                    ]
                };

                await Promise.all(
                    result.invitations.map(inv => sendSystemNotification(inv.user_id, message, 'match_lobby_invite', metadata))
                );
            } catch (e) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–æ–±–±–∏:', e.message);
            }

            // üí¨ –ê–Ω–æ–Ω—Å –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const systemUserId = await ensureSystemUser();
                const baseUrl = process.env.NODE_ENV === 'production'
                    ? 'https://1337community.com'
                    : 'http://localhost:3000';
                const lobbyUrl = `${baseUrl}/lobby/${result.lobby.id}`;
                const announcement = `üì¢ –°–æ–∑–¥–∞–Ω–æ –ª–æ–±–±–∏ –¥–ª—è –º–∞—Ç—á–∞ ID ${matchId}. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: ${lobbyUrl}`;
                await sendTournamentChatAnnouncement(Number(tournamentId), announcement, 'system', systemUserId);
            } catch (e) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω—Å –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞:', e.message);
            }
            
            res.json({
                success: true,
                lobby: result.lobby,
                invitations: result.invitations,
                message: '–õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏' 
            });
        }
    }

    // üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    static async recreateMatchLobby(req, res) {
        try {
            const { tournamentId, matchId } = req.params;
            const { matchFormat } = req.body || {};
            const userId = req.user.id;

            const isAdmin = await req.checkTournamentAccess(tournamentId, userId);
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏ –º–∞—Ç—á–∞' 
                });
            }

            const result = await MatchLobbyService.recreateLobby(matchId, tournamentId, matchFormat);

            const io = req.app.get('io');
            if (io) {
                result.invitations.forEach(invitation => {
                    io.to(`user_${invitation.user_id}`).emit('match_lobby_invite', {
                        lobbyId: result.lobby.id,
                        matchId,
                        tournamentId
                    });
                });
            }

            // üì® –î—É–±–ª–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const baseUrl = process.env.NODE_ENV === 'production'
                    ? 'https://1337community.com'
                    : 'http://localhost:3000';
                const lobbyUrl = `${baseUrl}/lobby/${result.lobby.id}`;
                const matchUrl = `${baseUrl}/tournaments/${tournamentId}/match/${matchId}`;

                const message = `üîÅ –õ–æ–±–±–∏ –º–∞—Ç—á–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ. –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–æ–±–±–∏: ${lobbyUrl}`;
                const metadata = {
                    type: 'match_lobby_invite',
                    tournament_id: Number(tournamentId),
                    match_id: Number(matchId),
                    lobby_id: Number(result.lobby.id),
                    actions: [
                        { type: 'open_lobby', label: '‚û° –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–æ–±–±–∏', action: 'open_lobby', style: 'primary', url: lobbyUrl, target: '_blank' },
                        { type: 'open_match', label: 'üóÇ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ç—á–∞', action: 'open_match', style: 'ghost', url: matchUrl, target: '_blank' }
                    ]
                };

                await Promise.all(
                    result.invitations.map(inv => sendSystemNotification(inv.user_id, message, 'match_lobby_invite', metadata))
                );
            } catch (e) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏:', e.message);
            }

            // üí¨ –ê–Ω–æ–Ω—Å –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const systemUserId = await ensureSystemUser();
                const baseUrl = process.env.NODE_ENV === 'production'
                    ? 'https://1337community.com'
                    : 'http://localhost:3000';
                const lobbyUrl = `${baseUrl}/lobby/${result.lobby.id}`;
                const announcement = `üì¢ –õ–æ–±–±–∏ –¥–ª—è –º–∞—Ç—á–∞ ID ${matchId} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: ${lobbyUrl}`;
                await sendTournamentChatAnnouncement(Number(tournamentId), announcement, 'system', systemUserId);
            } catch (e) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω—Å –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ (–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ):', e.message);
            }

            res.json({
                success: true,
                lobby: result.lobby,
                invitations: result.invitations,
                message: '–õ–æ–±–±–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã'
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏:', error);
            res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏' });
        }
    }
    
    // üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏
    static async getLobbyInfo(req, res) {
        try {
            const { lobbyId } = req.params;
            const userId = req.user.id;
            
            const lobby = await MatchLobbyService.getLobbyInfo(lobbyId, userId);
            
            res.json({
                success: true,
                lobby
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏' 
            });
        }
    }
    
    // ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    static async setReadyStatus(req, res) {
        try {
            const { lobbyId } = req.params;
            const { ready } = req.body;
            const userId = req.user.id;
            
            const lobby = await MatchLobbyService.setReadyStatus(
                lobbyId, 
                userId, 
                ready
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            const io = req.app.get('io');
            if (io) {
                await MatchLobbyService.broadcastLobbyUpdate(io, lobbyId);
            }
            
            res.json({
                success: true,
                lobby,
                message: ready ? '–í—ã –≥–æ—Ç–æ–≤—ã' : '–í—ã –Ω–µ –≥–æ—Ç–æ–≤—ã'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏' 
            });
        }
    }
    
    // üé≤ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ
    static async setFirstPicker(req, res) {
        try {
            const { lobbyId } = req.params;
            const { teamId } = req.body;
            const userId = req.user.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const lobbyInfo = await MatchLobbyService.getLobbyInfo(lobbyId, userId);

            // üõ°Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–æ–ª–µ–π: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ –ª–æ–±–±–∏ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫, –æ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ –∫–∞–ø–∏—Ç–∞–Ω (–±–µ–∑ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π)
            if (lobbyInfo.user_invited) {
                return res.status(403).json({ 
                    error: '–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ª–æ–±–±–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏—è –≤ –ª–æ–±–±–∏' 
                });
            }

            const isAdmin = await req.checkTournamentAccess(lobbyInfo.tournament_id, userId);
            
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ' 
                });
            }
            
            const lobby = await MatchLobbyService.setFirstPicker(
                lobbyId, 
                teamId, 
                userId
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            const io = req.app.get('io');
            if (io) {
                await MatchLobbyService.broadcastLobbyUpdate(io, lobbyId);
            }
            
            res.json({
                success: true,
                lobby,
                message: '–ü–µ—Ä–≤—ã–π –≤—ã–±–∏—Ä–∞—é—â–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ' 
            });
        }
    }
    
    // üó∫Ô∏è –í—ã–±–æ—Ä –∏–ª–∏ –±–∞–Ω –∫–∞—Ä—Ç—ã
    static async selectMap(req, res) {
        try {
            const { lobbyId } = req.params;
            const { mapName, action } = req.body;
            const userId = req.user.id;
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            if (!['pick', 'ban'].includes(action)) {
                return res.status(400).json({ 
                    error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "pick" –∏–ª–∏ "ban"' 
                });
            }
            
            const result = await MatchLobbyService.selectMap(
                lobbyId, 
                userId, 
                mapName, 
                action
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            const io = req.app.get('io');
            if (io) {
                await MatchLobbyService.broadcastLobbyUpdate(io, lobbyId);
                
                if (result.completed) {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–¥–∞—ë–º tournamentId –∏ matchId, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–π—Ç–∏
                    try {
                        const lobbyInfo = await MatchLobbyService.getLobbyInfo(lobbyId, req.user.id);
                        io.to(`lobby_${lobbyId}`).emit('lobby_completed', {
                            lobbyId,
                            tournamentId: lobbyInfo.tournament_id,
                            matchId: lobbyInfo.match_id,
                            message: '–í—ã–±–æ—Ä –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'
                        });
                    } catch (_) {
                        io.to(`lobby_${lobbyId}`).emit('lobby_completed', {
                            lobbyId,
                            message: '–í—ã–±–æ—Ä –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'
                        });
                    }
                }
            }
            
            res.json({
                success: true,
                completed: result.completed,
                nextTurn: result.nextTurn,
                message: `–ö–∞—Ä—Ç–∞ ${mapName} ${action === 'pick' ? '–≤—ã–±—Ä–∞–Ω–∞' : '–∑–∞–±–∞–Ω–µ–Ω–∞'}`
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã' 
            });
        }
    }
    
    // üì° WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏
    static async handleSocketConnection(io, socket) {
        socket.on('join_lobby', async (data) => {
            try {
                const { lobbyId, userId } = data;
                
                if (!lobbyId || !userId) {
                    socket.emit('error', { 
                        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å lobbyId –∏ userId' 
                    });
                    return;
                }
                
                await MatchLobbyService.subscribeToLobby(io, socket, lobbyId, userId);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–±–±–∏:', error);
                socket.emit('error', { 
                    message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–±–±–∏' 
                });
            }
        });
        
        socket.on('leave_lobby', (data) => {
            const { lobbyId } = data;
            if (lobbyId) {
                socket.leave(`lobby_${lobbyId}`);
                console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –ª–æ–±–±–∏ ${lobbyId}`);
            }
        });
    }
}

module.exports = MatchLobbyController; 