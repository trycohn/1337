// üéÆ MatchLobbyController - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–±–±–∏ –º–∞—Ç—á–µ–π
const MatchLobbyService = require('../../services/matchLobby/MatchLobbyService');

class MatchLobbyController {
    // üîß –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
    static async updateLobbySettings(req, res) {
        try {
            const { id } = req.params;
            const { enabled, matchFormat, maps } = req.body;
            const userId = req.user.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const isAdmin = await req.checkTournamentAccess(id, userId);
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ª–æ–±–±–∏' 
                });
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 7)
            if (enabled && maps && maps.length !== 7) {
                return res.status(400).json({ 
                    error: '–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ª–æ–±–±–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 7 –∫–∞—Ä—Ç' 
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settings = await MatchLobbyService.createLobbySettings(id, {
                enabled,
                matchFormat
            });
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞—Ä—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
            if (maps && maps.length === 7) {
                await MatchLobbyService.setTournamentMaps(id, maps);
            }
            
            res.json({
                success: true,
                settings,
                message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏' 
            });
        }
    }
    
    // üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏ –ø–æ –º–∞—Ç—á—É
    static async getActiveLobbyByMatch(req, res) {
        try {
            const { tournamentId, matchId } = req.params;
            const userId = req.user.id;

            const lobby = await MatchLobbyService.getActiveLobbyByMatch(matchId, tournamentId, userId);
            if (!lobby) {
                return res.json({ success: true, lobby: null });
            }
            return res.json({ success: true, lobby });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏ –ø–æ –º–∞—Ç—á—É:', error);
            res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏' });
        }
    }

    // üèÅ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –¥–ª—è –º–∞—Ç—á–∞
    static async createMatchLobby(req, res) {
        try {
            const { tournamentId, matchId } = req.params;
            const userId = req.user.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const isAdmin = await req.checkTournamentAccess(tournamentId, userId);
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏ –º–∞—Ç—á–∞' 
                });
            }
            
            const result = await MatchLobbyService.createMatchLobby(
                matchId, 
                tournamentId
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
            const io = req.app.get('io');
            if (io) {
                result.invitations.forEach(invitation => {
                    io.to(`user_${invitation.user_id}`).emit('match_lobby_invite', {
                        lobbyId: result.lobby.id,
                        matchId,
                        tournamentId
                    });
                });
            }
            
            res.json({
                success: true,
                lobby: result.lobby,
                invitations: result.invitations,
                message: '–õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏' 
            });
        }
    }
    
    // üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏
    static async getLobbyInfo(req, res) {
        try {
            const { lobbyId } = req.params;
            const userId = req.user.id;
            
            const lobby = await MatchLobbyService.getLobbyInfo(lobbyId, userId);
            
            res.json({
                success: true,
                lobby
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏' 
            });
        }
    }
    
    // ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    static async setReadyStatus(req, res) {
        try {
            const { lobbyId } = req.params;
            const { ready } = req.body;
            const userId = req.user.id;
            
            const lobby = await MatchLobbyService.setReadyStatus(
                lobbyId, 
                userId, 
                ready
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            const io = req.app.get('io');
            if (io) {
                await MatchLobbyService.broadcastLobbyUpdate(io, lobbyId);
            }
            
            res.json({
                success: true,
                lobby,
                message: ready ? '–í—ã –≥–æ—Ç–æ–≤—ã' : '–í—ã –Ω–µ –≥–æ—Ç–æ–≤—ã'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏' 
            });
        }
    }
    
    // üé≤ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ
    static async setFirstPicker(req, res) {
        try {
            const { lobbyId } = req.params;
            const { teamId } = req.body;
            const userId = req.user.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const lobbyInfo = await MatchLobbyService.getLobbyInfo(lobbyId, userId);
            const isAdmin = await req.checkTournamentAccess(
                lobbyInfo.tournament_id, 
                userId
            );
            
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ' 
                });
            }
            
            const lobby = await MatchLobbyService.setFirstPicker(
                lobbyId, 
                teamId, 
                userId
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            const io = req.app.get('io');
            if (io) {
                await MatchLobbyService.broadcastLobbyUpdate(io, lobbyId);
            }
            
            res.json({
                success: true,
                lobby,
                message: '–ü–µ—Ä–≤—ã–π –≤—ã–±–∏—Ä–∞—é—â–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ' 
            });
        }
    }
    
    // üó∫Ô∏è –í—ã–±–æ—Ä –∏–ª–∏ –±–∞–Ω –∫–∞—Ä—Ç—ã
    static async selectMap(req, res) {
        try {
            const { lobbyId } = req.params;
            const { mapName, action } = req.body;
            const userId = req.user.id;
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            if (!['pick', 'ban'].includes(action)) {
                return res.status(400).json({ 
                    error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "pick" –∏–ª–∏ "ban"' 
                });
            }
            
            const result = await MatchLobbyService.selectMap(
                lobbyId, 
                userId, 
                mapName, 
                action
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            const io = req.app.get('io');
            if (io) {
                await MatchLobbyService.broadcastLobbyUpdate(io, lobbyId);
                
                if (result.completed) {
                    io.to(`lobby_${lobbyId}`).emit('lobby_completed', {
                        lobbyId,
                        message: '–í—ã–±–æ—Ä –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'
                    });
                }
            }
            
            res.json({
                success: true,
                completed: result.completed,
                nextTurn: result.nextTurn,
                message: `–ö–∞—Ä—Ç–∞ ${mapName} ${action === 'pick' ? '–≤—ã–±—Ä–∞–Ω–∞' : '–∑–∞–±–∞–Ω–µ–Ω–∞'}`
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã' 
            });
        }
    }
    
    // üì° WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏
    static async handleSocketConnection(io, socket) {
        socket.on('join_lobby', async (data) => {
            try {
                const { lobbyId, userId } = data;
                
                if (!lobbyId || !userId) {
                    socket.emit('error', { 
                        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å lobbyId –∏ userId' 
                    });
                    return;
                }
                
                await MatchLobbyService.subscribeToLobby(io, socket, lobbyId, userId);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–±–±–∏:', error);
                socket.emit('error', { 
                    message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–±–±–∏' 
                });
            }
        });
        
        socket.on('leave_lobby', (data) => {
            const { lobbyId } = data;
            if (lobbyId) {
                socket.leave(`lobby_${lobbyId}`);
                console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –ª–æ–±–±–∏ ${lobbyId}`);
            }
        });
    }
}

module.exports = MatchLobbyController; 