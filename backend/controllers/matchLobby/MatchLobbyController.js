// üéÆ MatchLobbyController - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–±–±–∏ –º–∞—Ç—á–µ–π
const MatchLobbyService = require('../../services/matchLobby/MatchLobbyService');
const { sendSystemNotification, ensureSystemUser } = require('../../utils/systemNotifications');
const { sendTournamentChatAnnouncement } = require('../../utils/tournament/chatHelpers');
const pool = require('../../db');

class MatchLobbyController {
    // üîß –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
    static async updateLobbySettings(req, res) {
        try {
            const { id } = req.params;
            const { enabled, matchFormat, maps } = req.body;
            const userId = req.user.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const isAdmin = await req.checkTournamentAccess(id, userId);
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ª–æ–±–±–∏' 
                });
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 7)
            if (enabled && maps && maps.length !== 7) {
                return res.status(400).json({ 
                    error: '–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ª–æ–±–±–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 7 –∫–∞—Ä—Ç' 
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settings = await MatchLobbyService.createLobbySettings(id, {
                enabled,
                matchFormat
            });
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞—Ä—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
            if (maps && maps.length === 7) {
                await MatchLobbyService.setTournamentMaps(id, maps);
            }
            
            res.json({
                success: true,
                settings,
                message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–±–±–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–±–±–∏' 
            });
        }
    }
    
    // üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏ –ø–æ –º–∞—Ç—á—É
    static async getActiveLobbyByMatch(req, res) {
        try {
            const { tournamentId, matchId } = req.params;
            const userId = req.user.id;

            const lobby = await MatchLobbyService.getActiveLobbyByMatch(matchId, tournamentId, userId);
            if (!lobby) {
                return res.json({ success: true, lobby: null });
            }
            return res.json({ success: true, lobby });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏ –ø–æ –º–∞—Ç—á—É:', error);
            res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏' });
        }
    }

    // üîé –ë–∞—Ç—á: –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–±–±–∏ –ø–æ —Å–ø–∏—Å–∫—É –º–∞—Ç—á–µ–π
    static async getActiveLobbiesBatch(req, res) {
        try {
            const { tournamentId } = req.params;
            const userId = req.user.id;
            const ids = Array.isArray(req.body?.ids) ? req.body.ids : [];

            if (!ids || ids.length === 0) {
                return res.json({ success: true, byMatchId: {} });
            }

            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã
            const MAX_IDS = 300;
            const matchIds = ids
                .map((v) => parseInt(v))
                .filter((v) => Number.isInteger(v) && v > 0)
                .slice(0, MAX_IDS);

            if (matchIds.length === 0) {
                return res.json({ success: true, byMatchId: {} });
            }

            const start = Date.now();
            const byMatchId = await MatchLobbyService.getActiveLobbiesByMatchesBatch(
                tournamentId,
                matchIds,
                userId
            );

            // –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫—ç—à–∞
            res.set('Cache-Control', 'private, max-age=15, stale-while-revalidate=30');
            res.set('Vary', 'Authorization');

            const duration = Date.now() - start;
            try {
                res.set('X-Batch-Size', String(matchIds.length));
                res.set('X-Response-Time', `${duration}ms`);
            } catch (_) {}
            console.log(`[active-lobbies batch] user=${userId} t=${tournamentId} size=${matchIds.length} duration=${duration}ms`);

            return res.json({ success: true, byMatchId });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á-–ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏:', error);
            res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏' });
        }
    }

    // üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static async getActiveLobbiesForUser(req, res) {
        try {
            const userId = req.user.id;
            const start = Date.now();
            const lobbies = await MatchLobbyService.getActiveLobbiesForUser(userId);
            // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫—ç—à –∏ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞
            res.set('Cache-Control', 'private, max-age=15, stale-while-revalidate=30');
            res.set('Vary', 'Authorization');
            try { res.set('X-Response-Time', `${Date.now() - start}ms`); } catch (_) {}
            res.json({ success: true, lobbies });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏' });
        }
    }

    // üèÅ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –¥–ª—è –º–∞—Ç—á–∞
    static async createMatchLobby(req, res) {
        try {
            const { tournamentId, matchId } = req.params;
            const { matchFormat } = req.body || {};
            const userId = req.user.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const isAdmin = await req.checkTournamentAccess(tournamentId, userId);
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏ –º–∞—Ç—á–∞' 
                });
            }
            
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ª–æ–±–±–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è UI
            const existing = await MatchLobbyService.findLobbyByMatch(matchId, tournamentId);
            if (existing) {
                return res.status(200).json({
                    success: true,
                    alreadyExists: true,
                    lobby: existing,
                    message: '–õ–æ–±–±–∏ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ —Ä–∞–Ω–µ–µ'
                });
            }

            const result = await MatchLobbyService.createMatchLobby(matchId, tournamentId, matchFormat);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
            const io = req.app.get('io');
            if (io) {
                result.invitations.forEach(invitation => {
                    io.to(`user_${invitation.user_id}`).emit('match_lobby_invite', {
                        lobbyId: result.lobby.id,
                        matchId,
                        tournamentId
                    });
                });
            }

            // üì® –î—É–±–ª–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç (–±–µ–∑ –∏–∫–æ–Ω–æ–∫, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
            try {
                const baseUrl = process.env.PUBLIC_WEB_URL || 'https://1337community.com';
                const lobbyUrl = `${baseUrl}/match-lobby/${result.lobby.id}`;
                const matchUrl = `${baseUrl}/tournaments/${tournamentId}/match/${matchId}`;
                const tournamentUrl = `${baseUrl}/tournaments/${tournamentId}`;

                // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
                const tRes = await pool.query('SELECT name FROM tournaments WHERE id = $1', [tournamentId]);
                const tournamentName = tRes.rows[0]?.name || `–¢—É—Ä–Ω–∏—Ä #${tournamentId}`;

                const team1Name = result.match?.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1';
                const team2Name = result.match?.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2';
                const team1Id = result.match?.team1_id;
                const team2Id = result.match?.team2_id;

                const metadataBase = {
                    type: 'lobby_invite',
                    tournament_id: Number(tournamentId),
                    match_id: Number(matchId),
                    lobby_id: Number(result.lobby.id),
                    actions: [
                        { type: 'open_lobby', label: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–æ–±–±–∏', action: 'open_lobby', style: 'primary', url: lobbyUrl, target: '_blank' }
                    ]
                };

                await Promise.all(result.invitations.map(async (inv) => {
                    // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const uRes = await pool.query('SELECT username FROM users WHERE id = $1', [inv.user_id]);
                    const username = uRes.rows[0]?.username || '—É—á–∞—Å—Ç–Ω–∏–∫';
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                    const opponentName = inv.team_id && team1Id && team2Id
                        ? (Number(inv.team_id) === Number(team1Id) ? team2Name : team1Name)
                        : (team1Name && team2Name ? `${team1Name} / ${team2Name}` : '—Å–æ–ø–µ—Ä–Ω–∏–∫');

                    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown-—Å—Å—ã–ª–∫–æ–π
                    const message = `–ü—Ä–∏–≤–µ—Ç, ${username}! –¢—É—Ä–Ω–∏—Ä [${tournamentName}](${tournamentUrl}), –≤–∞—à –º–∞—Ç—á –ø—Ä–æ—Ç–∏–≤ "${opponentName}" –æ–∂–∏–¥–∞–µ—Ç. [–õ–æ–±–±–∏ –º–∞—Ç—á–∞](${lobbyUrl}).`;

                    await sendSystemNotification(inv.user_id, message, 'lobby_invite', metadataBase);
                }));
            } catch (e) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–æ–±–±–∏:', e.message);
            }

            // üí¨ –ê–Ω–æ–Ω—Å –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const systemUserId = await ensureSystemUser();
                const baseUrl = process.env.PUBLIC_WEB_URL || 'https://1337community.com';
                const lobbyUrl = `${baseUrl}/match-lobby/${result.lobby.id}`;
                const announcement = `üì¢ –°–æ–∑–¥–∞–Ω–æ –ª–æ–±–±–∏ –¥–ª—è –º–∞—Ç—á–∞ ID ${matchId}. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: ${lobbyUrl}`;
                await sendTournamentChatAnnouncement(Number(tournamentId), announcement, 'system', systemUserId);
            } catch (e) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω—Å –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞:', e.message);
            }
            
            res.json({
                success: true,
                lobby: result.lobby,
                invitations: result.invitations,
                message: '–õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏' 
            });
        }
    }

    // üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    static async recreateMatchLobby(req, res) {
        try {
            const { tournamentId, matchId } = req.params;
            const { matchFormat } = req.body || {};
            const userId = req.user.id;

            const isAdmin = await req.checkTournamentAccess(tournamentId, userId);
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏ –º–∞—Ç—á–∞' 
                });
            }

            const result = await MatchLobbyService.recreateLobby(matchId, tournamentId, matchFormat);

            const io = req.app.get('io');
            if (io) {
                result.invitations.forEach(invitation => {
                    io.to(`user_${invitation.user_id}`).emit('match_lobby_invite', {
                        lobbyId: result.lobby.id,
                        matchId,
                        tournamentId
                    });
                });
            }

            // üì® –î—É–±–ª–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç (–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ, –±–µ–∑ –∏–∫–æ–Ω–æ–∫, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ)
            try {
                const baseUrl = process.env.PUBLIC_WEB_URL || 'https://1337community.com';
                const lobbyUrl = `${baseUrl}/match-lobby/${result.lobby.id}`;
                const tournamentUrl = `${baseUrl}/tournaments/${tournamentId}`;

                const tRes = await pool.query('SELECT name FROM tournaments WHERE id = $1', [tournamentId]);
                const tournamentName = tRes.rows[0]?.name || `–¢—É—Ä–Ω–∏—Ä #${tournamentId}`;

                const team1Name = result.match?.team1_name || '–ö–æ–º–∞–Ω–¥–∞ 1';
                const team2Name = result.match?.team2_name || '–ö–æ–º–∞–Ω–¥–∞ 2';
                const team1Id = result.match?.team1_id;
                const team2Id = result.match?.team2_id;

                const metadataBase = {
                    type: 'match_lobby_invite',
                    tournament_id: Number(tournamentId),
                    match_id: Number(matchId),
                    lobby_id: Number(result.lobby.id),
                    actions: [
                        { type: 'open_lobby', label: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–æ–±–±–∏', action: 'open_lobby', style: 'primary', url: lobbyUrl, target: '_blank' }
                    ]
                };

                await Promise.all(result.invitations.map(async (inv) => {
                    const uRes = await pool.query('SELECT username FROM users WHERE id = $1', [inv.user_id]);
                    const username = uRes.rows[0]?.username || '—É—á–∞—Å—Ç–Ω–∏–∫';
                    const opponentName = inv.team_id && team1Id && team2Id
                        ? (Number(inv.team_id) === Number(team1Id) ? team2Name : team1Name)
                        : (team1Name && team2Name ? `${team1Name} / ${team2Name}` : '—Å–æ–ø–µ—Ä–Ω–∏–∫');

                    const message = `–ü—Ä–∏–≤–µ—Ç, ${username}! –¢—É—Ä–Ω–∏—Ä [${tournamentName}](${tournamentUrl}), –≤–∞—à –º–∞—Ç—á –ø—Ä–æ—Ç–∏–≤ "${opponentName}" –æ–∂–∏–¥–∞–µ—Ç. [–õ–æ–±–±–∏ –º–∞—Ç—á–∞](${lobbyUrl}).`;

                    await sendSystemNotification(inv.user_id, message, 'match_lobby_invite_interactive', metadataBase);
                }));
            } catch (e) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏:', e.message);
            }

            // üí¨ –ê–Ω–æ–Ω—Å –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const systemUserId = await ensureSystemUser();
                const baseUrl = process.env.NODE_ENV === 'production'
                    ? 'https://1337community.com'
                    : 'http://localhost:3000';
                const lobbyUrl = `${baseUrl}/match-lobby/${result.lobby.id}`;
                const announcement = `üì¢ –õ–æ–±–±–∏ –¥–ª—è –º–∞—Ç—á–∞ ID ${matchId} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: ${lobbyUrl}`;
                await sendTournamentChatAnnouncement(Number(tournamentId), announcement, 'system', systemUserId);
            } catch (e) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω—Å –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ (–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ):', e.message);
            }

            res.json({
                success: true,
                lobby: result.lobby,
                invitations: result.invitations,
                message: '–õ–æ–±–±–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã'
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏:', error);
            res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏' });
        }
    }
    
    // üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏
    static async getLobbyInfo(req, res) {
        try {
            const { lobbyId } = req.params;
            const userId = req.user.id;
            
            const lobby = await MatchLobbyService.getLobbyInfo(lobbyId, userId);
            
            // ‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ –ª–æ–±–±–∏
            const isExpired = MatchLobbyService.isLobbyExpired(lobby);
            
            if (isExpired) {
                return res.status(410).json({
                    success: false,
                    expired: true,
                    error: '–õ–æ–±–±–∏ —É—Å—Ç–∞—Ä–µ–ª–æ (—Å–æ–∑–¥–∞–Ω–æ –±–æ–ª–µ–µ 1 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)',
                    message: '–≠—Ç–æ –ª–æ–±–±–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ.'
                });
            }
            
            res.json({
                success: true,
                lobby,
                expired: false
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–±–±–∏' 
            });
        }
    }
    
    // ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    static async setReadyStatus(req, res) {
        try {
            const { lobbyId } = req.params;
            const { ready } = req.body;
            const userId = req.user.id;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            await MatchLobbyService.setPlayerReady(lobbyId, userId, ready);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            const io = req.app.get('io');
            if (io) {
                io.to(`lobby_${lobbyId}`).emit('lobby_update_player_ready', {
                    userId,
                    ready: Boolean(ready)
                });
                
                await MatchLobbyService.broadcastLobbyUpdate(io, lobbyId);
            }
            
            res.json({
                success: true,
                ready: Boolean(ready),
                message: ready ? '–í—ã –≥–æ—Ç–æ–≤—ã' : '–í—ã –Ω–µ –≥–æ—Ç–æ–≤—ã'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏' 
            });
        }
    }
    
    // üé≤ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ
    static async setFirstPicker(req, res) {
        try {
            const { lobbyId } = req.params;
            const { teamId } = req.body;
            const userId = req.user.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const lobbyInfo = await MatchLobbyService.getLobbyInfo(lobbyId, userId);

            // üõ°Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–æ–ª–µ–π: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ –ª–æ–±–±–∏ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫, –æ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ –∫–∞–ø–∏—Ç–∞–Ω (–±–µ–∑ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π)
            if (lobbyInfo.user_invited) {
                return res.status(403).json({ 
                    error: '–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ª–æ–±–±–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏—è –≤ –ª–æ–±–±–∏' 
                });
            }

            const isAdmin = await req.checkTournamentAccess(lobbyInfo.tournament_id, userId);
            
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ' 
                });
            }
            
            const lobby = await MatchLobbyService.setFirstPicker(
                lobbyId, 
                teamId, 
                userId
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            const io = req.app.get('io');
            if (io) {
                await MatchLobbyService.broadcastLobbyUpdate(io, lobbyId);
            }
            
            res.json({
                success: true,
                lobby,
                message: '–ü–µ—Ä–≤—ã–π –≤—ã–±–∏—Ä–∞—é—â–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–∏—Ä–∞—é—â–µ–≥–æ' 
            });
        }
    }
    
    // üöÄ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–∏–∫/–±–∞–Ω (–∞–¥–º–∏–Ω —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω—ã)
    static async startPickBan(req, res) {
        try {
            const { lobbyId } = req.params;
            const userId = req.user.id;
            
            const lobbyInfo = await MatchLobbyService.getLobbyInfo(lobbyId, userId);
            
            if (!lobbyInfo) {
                return res.status(404).json({ 
                    error: '–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' 
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: –∞–¥–º–∏–Ω —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã
            const isAdmin = await req.checkTournamentAccess(lobbyInfo.tournament_id, userId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–º
            const isCaptain = lobbyInfo.team1_participants?.find(p => p.user_id === userId && p.is_captain) ||
                             lobbyInfo.team2_participants?.find(p => p.user_id === userId && p.is_captain);
            
            if (!isAdmin && !isCaptain) {
                return res.status(403).json({ 
                    error: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É' 
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
            if (!lobbyInfo.match_format) {
                return res.status(400).json({ 
                    error: '–§–æ—Ä–º–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω' 
                });
            }
            
            if (!lobbyInfo.team1_ready || !lobbyInfo.team2_ready) {
                return res.status(400).json({ 
                    error: '–û–±–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã' 
                });
            }
            
            if (lobbyInfo.status !== 'ready' && lobbyInfo.status !== 'waiting') {
                return res.status(400).json({ 
                    error: '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' 
                });
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É
            const lobby = await MatchLobbyService.startPickBanProcedure(lobbyId);
            
            // WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const io = req.app.get('io');
            if (io) {
                await MatchLobbyService.broadcastLobbyUpdate(io, lobbyId);
            }
            
            res.json({
                success: true,
                lobby,
                message: 'üöÄ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç –∑–∞–ø—É—â–µ–Ω–∞!'
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã' 
            });
        }
    }
    
    // üó∫Ô∏è –í—ã–±–æ—Ä –∏–ª–∏ –±–∞–Ω –∫–∞—Ä—Ç—ã
    static async selectMap(req, res) {
        try {
            const { lobbyId } = req.params;
            const { mapName, action } = req.body;
            const userId = req.user.id;
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            if (!['pick', 'ban'].includes(action)) {
                return res.status(400).json({ 
                    error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "pick" –∏–ª–∏ "ban"' 
                });
            }
            
            const result = await MatchLobbyService.selectMap(
                lobbyId, 
                userId, 
                mapName, 
                action
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            const io = req.app.get('io');
            if (io) {
                await MatchLobbyService.broadcastLobbyUpdate(io, lobbyId);
                
                if (result.completed) {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–¥–∞—ë–º tournamentId –∏ matchId, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–π—Ç–∏
                    try {
                        const lobbyInfo = await MatchLobbyService.getLobbyInfo(lobbyId, req.user.id);
                        io.to(`lobby_${lobbyId}`).emit('lobby_completed', {
                            lobbyId,
                            tournamentId: lobbyInfo.tournament_id,
                            matchId: lobbyInfo.match_id,
                            message: '–í—ã–±–æ—Ä –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'
                        });
                    } catch (_) {
                        io.to(`lobby_${lobbyId}`).emit('lobby_completed', {
                            lobbyId,
                            message: '–í—ã–±–æ—Ä –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'
                        });
                    }
                }
            }
            
            res.json({
                success: true,
                completed: result.completed,
                nextTurn: result.nextTurn,
                message: `–ö–∞—Ä—Ç–∞ ${mapName} ${action === 'pick' ? '–≤—ã–±—Ä–∞–Ω–∞' : '–∑–∞–±–∞–Ω–µ–Ω–∞'}`
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç—ã' 
            });
        }
    }
    
    // üì° WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏
    static async handleSocketConnection(io, socket) {
        socket.on('join_lobby', async (data) => {
            try {
                const { lobbyId, userId } = data;
                
                if (!lobbyId || !userId) {
                    socket.emit('error', { 
                        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å lobbyId –∏ userId' 
                    });
                    return;
                }
                
                await MatchLobbyService.subscribeToLobby(io, socket, lobbyId, userId);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–±–±–∏:', error);
                socket.emit('error', { 
                    message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–±–±–∏' 
                });
            }
        });
        
        socket.on('leave_lobby', (data) => {
            const { lobbyId } = data;
            if (lobbyId) {
                socket.leave(`lobby_${lobbyId}`);
                console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –ª–æ–±–±–∏ ${lobbyId}`);
            }
        });
    }
    // üì® –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –ª–æ–±–±–∏
    static async resendLobbyInvitations(req, res) {
        try {
            const { tournamentId, lobbyId } = req.params;
            const userId = req.user.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            const isAdmin = await req.checkTournamentAccess(tournamentId, userId);
            if (!isAdmin) {
                return res.status(403).json({ 
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–±–±–∏' 
                });
            }
            
            const io = req.app.get('io');
            const result = await MatchLobbyService.resendLobbyInvitations(lobbyId, io);
            
            res.json({
                success: true,
                invitationsSent: result.invitationsSent,
                message: `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ (${result.invitationsSent} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π' 
            });
        }
    }

    // üîé –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    static async getUserActiveLobby(req, res) {
        try {
            const { tournamentId } = req.params;
            const userId = req.user.id;
            
            const lobby = await MatchLobbyService.getUserActiveLobbyInTournament(userId, tournamentId);
            
            if (!lobby) {
                return res.json({
                    success: true,
                    hasLobby: false
                });
            }
            
            res.json({
                success: true,
                hasLobby: true,
                lobby: {
                    id: lobby.id,
                    match_id: lobby.match_id,
                    status: lobby.status,
                    expired: lobby.expired,
                    age_hours: lobby.age_hours
                }
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–±–±–∏:', error);
            res.status(500).json({ 
                error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–±–±–∏' 
            });
        }
    }
}

module.exports = MatchLobbyController; 