/**
 * üèÜ ACHIEVEMENTS CONTROLLER
 * API –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ MVP
 * @version 1.0.0
 */

const AchievementRewardsService = require('../services/tournament/AchievementRewardsService');

class AchievementsController {
    /**
     * üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ MVP
     * GET /api/achievements/global-leaderboard?limit=50&sort=global_mvp_score
     */
    async getGlobalLeaderboard(req, res) {
        try {
            const { limit = 50, sort = 'global_mvp_score' } = req.query;

            console.log(`üåç [AchievementsController] –ó–∞–ø—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞, –ª–∏–º–∏—Ç: ${limit}, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ${sort}`);

            const leaderboard = await AchievementRewardsService.getGlobalLeaderboard(
                parseInt(limit),
                sort
            );

            return res.json({
                success: true,
                leaderboard,
                total: leaderboard.length
            });

        } catch (error) {
            console.error(`‚ùå [AchievementsController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:`, error);
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞',
                message: error.message
            });
        }
    }

    /**
     * üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * GET /api/achievements/user/:userId
     */
    async getUserAchievements(req, res) {
        try {
            const { userId } = req.params;

            console.log(`üë§ [AchievementsController] –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

            const achievements = await AchievementRewardsService.getUserAchievements(parseInt(userId));

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ–¥–∞–ª–∏
            const medals = {
                gold: achievements.filter(a => a.rank === 1).length,
                silver: achievements.filter(a => a.rank === 2).length,
                bronze: achievements.filter(a => a.rank === 3).length,
                mvp: achievements.filter(a => a.achievement_type === 'mvp').length
            };

            return res.json({
                success: true,
                achievements,
                medals,
                total: achievements.length
            });

        } catch (error) {
            console.error(`‚ùå [AchievementsController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:`, error);
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
                message: error.message
            });
        }
    }

    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * GET /api/achievements/user/:userId/rank
     */
    async getUserGlobalRank(req, res) {
        try {
            const { userId } = req.params;

            console.log(`üìä [AchievementsController] –ó–∞–ø—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

            const rank = await AchievementRewardsService.getUserGlobalRank(parseInt(userId));

            if (!rank) {
                return res.json({
                    success: true,
                    hasRank: false,
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö'
                });
            }

            return res.json({
                success: true,
                hasRank: true,
                rank: parseInt(rank)
            });

        } catch (error) {
            console.error(`‚ùå [AchievementsController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞:`, error);
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞',
                message: error.message
            });
        }
    }

    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥
     * GET /api/achievements/rewards-config
     */
    async getRewardsConfig(req, res) {
        try {
            const pool = require('../db');
            
            const result = await pool.query(`
                SELECT * FROM achievement_rewards_config
                WHERE is_active = TRUE
                ORDER BY rank_1_reward DESC
            `);

            return res.json({
                success: true,
                config: result.rows
            });

        } catch (error) {
            console.error(`‚ùå [AchievementsController] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:`, error);
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥',
                message: error.message
            });
        }
    }
}

module.exports = new AchievementsController();

