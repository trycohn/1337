/**
 * üèÜ –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞ MVP –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node recalculate_mvp.js
 */

const MVPCalculator = require('./services/mvpCalculator');
const pool = require('./db');

async function recalculateAllMVP() {
    console.log('üèÜ [MVP Recalculator] –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç MVP –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π...');
    
    const client = await pool.connect();
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π —Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        const matchesResult = await client.query(`
            SELECT DISTINCT
                mm.matchid,
                mm.our_match_id,
                m.source_type
            FROM matchzy_matches mm
            JOIN matches m ON m.id = mm.our_match_id
            WHERE mm.our_match_id IS NOT NULL
              AND m.source_type IN ('tournament', 'custom')
              AND EXISTS (
                  SELECT 1 FROM matchzy_players mp 
                  WHERE mp.matchid = mm.matchid
              )
            ORDER BY mm.matchid
        `);
        
        const matches = matchesResult.rows;
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        
        if (matches.length === 0) {
            console.log('‚ÑπÔ∏è –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞');
            return;
        }
        
        let processed = 0;
        let errors = 0;
        
        for (const match of matches) {
            try {
                console.log(`\n‚è≥ [${processed + 1}/${matches.length}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º matchid=${match.matchid} (our_match_id=${match.our_match_id})...`);
                
                const result = await MVPCalculator.calculateMatchMVP(match.matchid);
                
                if (result?.mvp) {
                    console.log(`   ‚úÖ MVP: ${result.mvp.name} (${result.mvp.mvp_score.toFixed(2)} –æ—á–∫–æ–≤)`);
                    processed++;
                } else {
                    console.log(`   ‚ö†Ô∏è MVP –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`);
                }
                
            } catch (error) {
                console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ matchid=${match.matchid}:`, error.message);
                errors++;
            }
        }
        
        console.log('\n' + '='.repeat(60));
        console.log('‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ç—á–µ–π: ${processed}/${matches.length}`);
        if (errors > 0) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–æ–∫: ${errors}`);
        }
        console.log('='.repeat(60));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 MVP
        console.log('\nüèÜ –¢–û–ü-5 MVP –ø–æ –≤—Å–µ–º –º–∞—Ç—á–∞–º:');
        const topMVPResult = await client.query(`
            SELECT 
                u.username,
                mp.name as ingame_name,
                ROUND(mvp.mvp_score::numeric, 2) as mvp_score,
                ROUND(mvp.s_base::numeric, 2) as s_base,
                ROUND(mvp.s_impact::numeric, 2) as s_impact,
                mvp.our_match_id as match_id
            FROM match_player_mvp mvp
            LEFT JOIN users u ON u.id = mvp.user_id
            LEFT JOIN matchzy_players mp 
                ON mp.matchid = mvp.matchzy_matchid 
                AND mp.mapnumber = mvp.mapnumber 
                AND mp.steamid64 = mvp.steamid64
            ORDER BY mvp.mvp_score DESC
            LIMIT 5
        `);
        
        topMVPResult.rows.forEach((row, idx) => {
            console.log(`${idx + 1}. ${row.username || row.ingame_name} - ${row.mvp_score} –æ—á–∫–æ–≤ (Match #${row.match_id})`);
        });
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        throw error;
    } finally {
        client.release();
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
recalculateAllMVP()
    .then(() => {
        console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
        process.exit(1);
    });

