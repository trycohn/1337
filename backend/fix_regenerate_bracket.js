// backend/fix_regenerate_bracket.js
// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
// –ü—Ä–æ–±–ª–µ–º–∞: invalid input syntax for type integer - –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è JSON –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ ID

const pool = require('./db');
const { generateBracket } = require('./bracketGenerator');

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
 */
async function diagnoseParticipantsData(tournamentId) {
    console.log(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í –î–õ–Ø –¢–£–†–ù–ò–†–ê ${tournamentId}`);
    console.log('='*60);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
    const tournamentResult = await pool.query('SELECT * FROM tournaments WHERE id = $1', [tournamentId]);
    if (tournamentResult.rows.length === 0) {
        throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    const tournament = tournamentResult.rows[0];
    
    console.log(`üìã –¢—É—Ä–Ω–∏—Ä: "${tournament.name}"`);
    console.log(`   - –¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${tournament.participant_type}`);
    console.log(`   - –§–æ—Ä–º–∞—Ç: ${tournament.format}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –º–∞—Ä—à—Ä—É—Ç–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    let participants;
    if (tournament.participant_type === 'solo') {
        const participantsResult = await pool.query(
            'SELECT id, name FROM tournament_participants WHERE tournament_id = $1',
            [tournamentId]
        );
        participants = participantsResult.rows;
    } else {
        const participantsResult = await pool.query(
            'SELECT id, name FROM tournament_teams WHERE tournament_id = $1',
            [tournamentId]
        );
        participants = participantsResult.rows;
    }
    
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participants.forEach((participant, index) => {
        console.log(`   ${index + 1}. ID: ${participant.id} (—Ç–∏–ø: ${typeof participant.id}), Name: "${participant.name}"`);
        console.log(`      –í–µ—Å—å –æ–±—ä–µ–∫—Ç:`, JSON.stringify(participant));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID
        if (typeof participant.id !== 'number' || isNaN(participant.id)) {
            console.log(`      ‚ùå –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô ID!`);
        } else {
            console.log(`      ‚úÖ ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    const invalidParticipants = participants.filter(p => typeof p.id !== 'number' || isNaN(p.id));
    
    if (invalidParticipants.length > 0) {
        console.log(`‚ùå –ù–ê–ô–î–ï–ù–´ –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ï –£–ß–ê–°–¢–ù–ò–ö–ò:`);
        invalidParticipants.forEach((p, index) => {
            console.log(`   ${index + 1}. ID: ${p.id} (${typeof p.id}), Name: ${p.name}`);
        });
        
        return {
            success: false,
            error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
            invalidParticipants,
            participants
        };
    }
    
    console.log(`‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID`);
    
    return {
        success: true,
        participants,
        tournament
    };
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
async function fixParticipantsData(tournamentId) {
    console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í –î–õ–Ø –¢–£–†–ù–ò–†–ê ${tournamentId}`);
    
    const diagnosis = await diagnoseParticipantsData(tournamentId);
    
    if (diagnosis.success) {
        console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
        return diagnosis;
    }
    
    console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    const fixedParticipants = diagnosis.participants.map(participant => {
        if (typeof participant.id !== 'number' || isNaN(participant.id)) {
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏
            if (typeof participant.id === 'string') {
                try {
                    const parsed = JSON.parse(participant.id);
                    if (parsed && typeof parsed.id === 'number') {
                        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞: "${participant.id}" -> ${parsed.id}`);
                        return {
                            id: parsed.id,
                            name: participant.name || parsed.name
                        };
                    }
                } catch (e) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤–æ–π ID –¥—Ä—É–≥–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                    const numericMatch = participant.id.match(/\\\"id\\\":(\\d+)/);
                    if (numericMatch) {
                        const extractedId = parseInt(numericMatch[1]);
                        console.log(`üîß –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Å—Ç—Ä–æ–∫–∏: "${participant.id}" -> ${extractedId}`);
                        return {
                            id: extractedId,
                            name: participant.name
                        };
                    }
                }
            }
            
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞:`, participant);
            return null;
        }
        
        return participant;
    }).filter(Boolean);
    
    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${fixedParticipants.length} –∏–∑ ${diagnosis.participants.length}`);
    
    return {
        success: fixedParticipants.length === diagnosis.participants.length,
        participants: fixedParticipants,
        tournament: diagnosis.tournament,
        fixedCount: fixedParticipants.length,
        originalCount: diagnosis.participants.length
    };
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
 */
async function safeRegenerateBracket(tournamentId, thirdPlaceMatch = false) {
    console.log(`üöÄ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–ï–†–ï–ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–£–†–ù–ò–†–ù–û–ô –°–ï–¢–ö–ò ${tournamentId}`);
    console.log('='*70);
    
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        
        // 1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const participantsFix = await fixParticipantsData(tournamentId);
        if (!participantsFix.success) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantsFix.fixedCount}/${participantsFix.originalCount}`);
        }
        
        const { participants, tournament } = participantsFix;
        
        // 2. –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç—á–µ–π
        console.log(`üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}...`);
        const deleteResult = await client.query('DELETE FROM matches WHERE tournament_id = $1', [tournamentId]);
        console.log(`   –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} –º–∞—Ç—á–µ–π`);
        
        // 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Ç–∫–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        console.log(`üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É:`);
        console.log(`   - –§–æ—Ä–º–∞—Ç: ${tournament.format}`);
        console.log(`   - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}`);
        console.log(`   - –ú–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ: ${thirdPlaceMatch}`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
        participants.forEach((p, index) => {
            if (typeof p.id !== 'number' || isNaN(p.id)) {
                throw new Error(`–£—á–∞—Å—Ç–Ω–∏–∫ ${index + 1} –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: ${p.id} (${typeof p.id})`);
            }
        });
        
        console.log(`‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—à–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É
        const matches = await generateBracket(tournament.format, tournamentId, participants, thirdPlaceMatch);
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${matches.length} –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π`);
        
        await client.query('COMMIT');
        
        return {
            success: true,
            message: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞',
            matchesCount: matches.length,
            participantsCount: participants.length,
            fixedParticipants: participantsFix.fixedCount !== participantsFix.originalCount
        };
        
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
}

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ 59
 */
async function diagnoseTournament59() {
    console.log(`üîç –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–£–†–ù–ò–†–ê 59`);
    return await diagnoseParticipantsData(59);
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ 59
 */
async function fixTournament59() {
    console.log(`üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–£–†–ù–ò–†–ê 59`);
    return await safeRegenerateBracket(59, false);
}

module.exports = {
    diagnoseParticipantsData,
    fixParticipantsData,
    safeRegenerateBracket,
    diagnoseTournament59,
    fixTournament59
};

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    diagnoseTournament59()
        .then(result => {
            console.log('\\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
            console.log(JSON.stringify(result, null, 2));
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –û–®–ò–ë–ö–ê:', error);
            process.exit(1);
        });
} 