// backend/fix_tournament_59_specific.js
// –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ 59 —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π

const pool = require('./db');

async function fixTournament59() {
    console.log('üîß –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–£–†–ù–ò–†–ê 59');
    console.log('='*50);

    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        // 1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        console.log('\nüîç 1. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø');
        console.log('-'*30);
        
        const matches = await client.query(`
            SELECT id, round, match_number, team1_id, team2_id, winner_team_id, 
                   next_match_id, status
            FROM matches 
            WHERE tournament_id = 59 
            ORDER BY round, match_number
        `);

        console.log('üìã –¢–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ 59:');
        matches.rows.forEach(match => {
            console.log(`   –ú–∞—Ç—á ${match.id}: round=${match.round}, ` +
                       `team1=${match.team1_id}, team2=${match.team2_id}, ` +
                       `winner=${match.winner_team_id}, next=${match.next_match_id}`);
        });

        // 2. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        console.log('\nüîç 2. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –°–¢–†–£–ö–¢–£–†–´');
        console.log('-'*30);
        
        const nextMatchCounts = {};
        matches.rows.forEach(match => {
            if (match.next_match_id) {
                nextMatchCounts[match.next_match_id] = (nextMatchCounts[match.next_match_id] || 0) + 1;
            }
        });

        console.log('üìä –°—á–µ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π:');
        Object.entries(nextMatchCounts).forEach(([nextMatchId, count]) => {
            const status = count > 2 ? '‚ùå –ü–ï–†–ï–ü–û–õ–ù–ï–ù–ò–ï' : '‚úÖ';
            console.log(`   –ú–∞—Ç—á ${nextMatchId}: ${count} –≤—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π ${status}`);
        });

        // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–∞—Ç—á–∏
        const problematicMatches = Object.entries(nextMatchCounts)
            .filter(([_, count]) => count > 2)
            .map(([matchId, count]) => ({ matchId: parseInt(matchId), count }));

        if (problematicMatches.length === 0) {
            console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!');
            await client.query('ROLLBACK');
            return;
        }

        console.log(`\nüö® –ù–∞–π–¥–µ–Ω–æ ${problematicMatches.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–∞—Ç—á–µ–π`);

        // 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –º–∞—Ç—á–∞
        for (const problem of problematicMatches) {
            console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç—á ${problem.matchId} (${problem.count} –≤—Ö–æ–¥—è—â–∏—Ö)`);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏, –≤–µ–¥—É—â–∏–µ –≤ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
            const incomingMatches = await client.query(`
                SELECT id, round, match_number, team1_id, team2_id, winner_team_id
                FROM matches 
                WHERE tournament_id = 59 AND next_match_id = $1
                ORDER BY round, match_number
            `, [problem.matchId]);

            console.log(`   üìã –í—Ö–æ–¥—è—â–∏–µ –º–∞—Ç—á–∏:`);
            incomingMatches.rows.forEach((match, index) => {
                console.log(`      ${index+1}. –ú–∞—Ç—á ${match.id}: round=${match.round}, ` +
                           `winner=${match.winner_team_id}`);
            });

            // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –º–∞—Ç—á
            await client.query(
                'UPDATE matches SET team1_id = NULL, team2_id = NULL WHERE id = $1',
                [problem.matchId]
            );

            console.log(`   üßπ –û—á–∏—â–µ–Ω –º–∞—Ç—á ${problem.matchId}`);

            // –†–∞–∑–º–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ (—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏)
            const completedMatches = incomingMatches.rows.filter(m => m.winner_team_id !== null);
            
            if (completedMatches.length > 0) {
                // –†–∞–∑–º–µ—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ team1
                await client.query(
                    'UPDATE matches SET team1_id = $1 WHERE id = $2',
                    [completedMatches[0].winner_team_id, problem.matchId]
                );
                console.log(`   ‚úÖ –†–∞–∑–º–µ—â–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ${completedMatches[0].winner_team_id} –≤ team1`);

                if (completedMatches.length > 1) {
                    // –†–∞–∑–º–µ—â–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ team2
                    await client.query(
                        'UPDATE matches SET team2_id = $1 WHERE id = $2',
                        [completedMatches[1].winner_team_id, problem.matchId]
                    );
                    console.log(`   ‚úÖ –†–∞–∑–º–µ—â–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ${completedMatches[1].winner_team_id} –≤ team2`);
                }
            }

            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –¥—Ä—É–≥–∏–µ —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Ç—á–∏ –∏–ª–∏ –æ–±–Ω—É–ª—è–µ–º
            if (incomingMatches.rows.length > 2) {
                const excessMatches = incomingMatches.rows.slice(2);
                
                for (const excessMatch of excessMatches) {
                    // –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á —Ç–æ–≥–æ –∂–µ —Ä–∞—É–Ω–¥–∞
                    const alternativeMatch = await client.query(`
                        SELECT id FROM matches 
                        WHERE tournament_id = 59 
                        AND round = (SELECT round FROM matches WHERE id = $1) + 1
                        AND id != $1
                        AND (team1_id IS NULL OR team2_id IS NULL)
                        LIMIT 1
                    `, [problem.matchId]);

                    if (alternativeMatch.rows.length > 0) {
                        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á
                        await client.query(
                            'UPDATE matches SET next_match_id = $1 WHERE id = $2',
                            [alternativeMatch.rows[0].id, excessMatch.id]
                        );
                        console.log(`   üîÑ –ú–∞—Ç—á ${excessMatch.id} –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –º–∞—Ç—á ${alternativeMatch.rows[0].id}`);
                    } else {
                        // –û–±–Ω—É–ª—è–µ–º next_match_id
                        await client.query(
                            'UPDATE matches SET next_match_id = NULL WHERE id = $1',
                            [excessMatch.id]
                        );
                        console.log(`   üîÑ –ú–∞—Ç—á ${excessMatch.id} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞`);
                    }
                }
            }
        }

        // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        console.log('\nüîç 5. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê');
        console.log('-'*30);
        
        const finalMatches = await client.query(`
            SELECT id, round, match_number, team1_id, team2_id, winner_team_id, 
                   next_match_id, status
            FROM matches 
            WHERE tournament_id = 59 
            ORDER BY round, match_number
        `);

        const finalNextMatchCounts = {};
        finalMatches.rows.forEach(match => {
            if (match.next_match_id) {
                finalNextMatchCounts[match.next_match_id] = (finalNextMatchCounts[match.next_match_id] || 0) + 1;
            }
        });

        console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π:');
        Object.entries(finalNextMatchCounts).forEach(([nextMatchId, count]) => {
            const status = count > 2 ? '‚ùå –í–°–ï –ï–©–ï –ü–ï–†–ï–ü–û–õ–ù–ï–ù–ò–ï' : '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û';
            console.log(`   –ú–∞—Ç—á ${nextMatchId}: ${count} –≤—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π ${status}`);
        });

        const stillProblematic = Object.values(finalNextMatchCounts).some(count => count > 2);
        
        if (stillProblematic) {
            console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ —Ä–µ—à–µ–Ω—ã, –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π');
            await client.query('ROLLBACK');
            return false;
        } else {
            console.log('‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è');
            await client.query('COMMIT');
            
            console.log('\nüéâ –¢–£–†–ù–ò–† 59 –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù!');
            console.log('üìã –ò—Ç–æ–≥–æ–≤—ã–µ –º–∞—Ç—á–∏:');
            finalMatches.rows.forEach(match => {
                console.log(`   –ú–∞—Ç—á ${match.id}: round=${match.round}, ` +
                           `team1=${match.team1_id}, team2=${match.team2_id}, ` +
                           `winner=${match.winner_team_id}, next=${match.next_match_id}`);
            });
            
            return true;
        }

    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ 59:', error);
        return false;
    } finally {
        client.release();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = { fixTournament59 };

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    fixTournament59().then(success => {
        if (success) {
            console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        } else {
            console.log('\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
            process.exit(1);
        }
    }).catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
} 