const pool = require('../../db');

class TeamRepository {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ ID
     */
    static async getById(teamId) {
        const result = await pool.query('SELECT * FROM tournament_teams WHERE id = $1', [teamId]);
        return result.rows[0] || null;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
     */
    static async create(teamData) {
        const { tournament_id, name, creator_id } = teamData;

        const result = await pool.query(
            `INSERT INTO tournament_teams (tournament_id, name, creator_id)
             VALUES ($1, $2, $3) RETURNING *`,
            [tournament_id, name, creator_id]
        );

        return result.rows[0];
    }

    /**
     * üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞
     * @param {number} teamId - ID –∫–æ–º–∞–Ω–¥—ã
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} participantId - ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {boolean} isCaptain - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–ø–∏—Ç–∞–Ω–æ–º
     * @param {number} captainRating - –†–µ–π—Ç–∏–Ω–≥ –∫–∞–ø–∏—Ç–∞–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
     */
    static async addMember(teamId, userId, participantId, isCaptain = false, captainRating = null) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –ï—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞, —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            if (isCaptain) {
                await client.query(
                    'UPDATE tournament_team_members SET is_captain = FALSE WHERE team_id = $1',
                    [teamId]
                );
            }
            
            const result = await client.query(
                `INSERT INTO tournament_team_members (team_id, user_id, participant_id, is_captain, captain_rating)
                 VALUES ($1, $2, $3, $4, $5) RETURNING *`,
                [teamId, userId, participantId, isCaptain, captainRating]
            );
            
            await client.query('COMMIT');
            console.log(`‚úÖ TeamRepository: –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ ${userId} –≤ –∫–æ–º–∞–Ω–¥—É ${teamId}${isCaptain ? ' (–∫–∞–ø–∏—Ç–∞–Ω)' : ''}`);
            return result.rows[0];
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É:`, error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üÜï –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ö–ê–ü–ò–¢–ê–ù–ê –ö–û–ú–ê–ù–î–´
     * @param {number} teamId - ID –∫–æ–º–∞–Ω–¥—ã
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç –∫–∞–ø–∏—Ç–∞–Ω–æ–º
     * @param {number} captainRating - –†–µ–π—Ç–∏–Ω–≥ –∫–∞–ø–∏—Ç–∞–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º –∫–∞–ø–∏—Ç–∞–Ω–µ
     */
    static async setCaptain(teamId, userId, captainRating = null) {
        console.log(`üëë [TeamRepository] –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã ${teamId}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`);
        
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π —Ä—É—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            const memberResult = await client.query(`
                SELECT 
                    ttm.id,
                    ttm.user_id,
                    ttm.participant_id,
                    u.username,
                    -- üÜï –†–£–ß–ù–´–ï –†–ï–ô–¢–ò–ù–ì–ò –£–ß–ê–°–¢–ù–ò–ö–ê (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                    tp.faceit_elo,
                    tp.cs2_premier_rank,
                    -- üÜï –†–ï–ô–¢–ò–ù–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (—Ä–µ–∑–µ—Ä–≤)
                    u.faceit_elo as user_faceit_elo,
                    u.cs2_premier_rank as user_premier_rank,
                    -- üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
                    tp.name as participant_name,
                    u.email as user_email
                FROM tournament_team_members ttm
                LEFT JOIN users u ON ttm.user_id = u.id  
                LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
                WHERE ttm.team_id = $1 AND ttm.user_id = $2
            `, [teamId, userId]);
            
            if (memberResult.rows.length === 0) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
            }
            
            const member = memberResult.rows[0];
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π —Ä—É—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            let finalCaptainRating = captainRating;
            if (finalCaptainRating === null) {
                // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
                const tournamentResult = await client.query(`
                    SELECT mix_rating_type 
                    FROM tournaments t
                    JOIN tournament_teams tt ON t.id = tt.tournament_id
                    WHERE tt.id = $1
                `, [teamId]);
                
                const ratingType = tournamentResult.rows[0]?.mix_rating_type || 'faceit';
                
                // üÜï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Æ –†–£–ß–ù–´–• –†–ï–ô–¢–ò–ù–ì–û–í
                if (ratingType === 'faceit') {
                    // –ü–†–ò–û–†–ò–¢–ï–¢: —Ä—É—á–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Üí —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –¥–µ—Ñ–æ–ª—Ç
                    if (member.faceit_elo && !isNaN(parseInt(member.faceit_elo)) && parseInt(member.faceit_elo) > 0) {
                        finalCaptainRating = parseInt(member.faceit_elo);
                    } else if (member.user_faceit_elo && !isNaN(parseInt(member.user_faceit_elo)) && parseInt(member.user_faceit_elo) > 0) {
                        finalCaptainRating = parseInt(member.user_faceit_elo);
                    } else {
                        finalCaptainRating = 1000; // –¥–µ—Ñ–æ–ª—Ç –¥–ª—è FACEIT
                    }
                } else {
                    // –ü–†–ò–û–†–ò–¢–ï–¢: —Ä—É—á–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Üí —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –¥–µ—Ñ–æ–ª—Ç
                    if (member.cs2_premier_rank && !isNaN(parseInt(member.cs2_premier_rank)) && parseInt(member.cs2_premier_rank) > 0) {
                        finalCaptainRating = parseInt(member.cs2_premier_rank);
                    } else if (member.user_premier_rank && !isNaN(parseInt(member.user_premier_rank)) && parseInt(member.user_premier_rank) > 0) {
                        finalCaptainRating = parseInt(member.user_premier_rank);
                    } else {
                        finalCaptainRating = 5; // –¥–µ—Ñ–æ–ª—Ç –¥–ª—è Premier
                    }
                }
                
                console.log(`üìä [setCaptain] –†–∞—Å—Å—á–∏—Ç–∞–Ω —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–ø–∏—Ç–∞–Ω–∞: ${finalCaptainRating} (—Ç–∏–ø: ${ratingType}), —Ä—É—á–Ω–æ–π: ${member.faceit_elo || member.cs2_premier_rank}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${member.user_faceit_elo || member.user_premier_rank}`);
            }
            
            // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ø–∏—Ç–∞–Ω–∞ —Å–æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            await client.query(`
                UPDATE tournament_team_members 
                SET is_captain = FALSE, captain_rating = NULL 
                WHERE team_id = $1
            `, [teamId]);
            
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞
            await client.query(`
                UPDATE tournament_team_members 
                SET is_captain = TRUE, captain_rating = $1 
                WHERE team_id = $2 AND user_id = $3
            `, [finalCaptainRating, teamId, userId]);
            
            await client.query('COMMIT');
            
            const captainInfo = {
                team_id: teamId,
                user_id: userId,
                username: member.username,
                participant_name: member.participant_name,
                is_captain: true,
                captain_rating: finalCaptainRating,
                manual_rating_used: Boolean(member.faceit_elo || member.cs2_premier_rank) // üÜï –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
            };
            
            console.log(`‚úÖ [TeamRepository] –ö–∞–ø–∏—Ç–∞–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω: ${member.username} (—Ä–µ–π—Ç–∏–Ω–≥: ${finalCaptainRating}, —Ä—É—á–Ω–æ–π: ${captainInfo.manual_rating_used})`);
            
            return captainInfo;
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [TeamRepository] –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞:`, error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ø–∏—Ç–∞–Ω–µ –∫–æ–º–∞–Ω–¥—ã
     * @param {number} teamId - ID –∫–æ–º–∞–Ω–¥—ã
     */
    static async getTeamCaptain(teamId) {
        const result = await pool.query(`
            SELECT 
                ttm.*,
                u.username,
                u.avatar_url,
                tp.name as participant_name,
                tp.faceit_elo,
                tp.cs2_premier_rank,
                u.faceit_elo as user_faceit_elo,
                u.cs2_premier_rank as user_cs2_premier_rank
            FROM tournament_team_members ttm
            LEFT JOIN users u ON ttm.user_id = u.id
            LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
            WHERE ttm.team_id = $1 AND ttm.is_captain = TRUE
        `, [teamId]);
        
        return result.rows[0] || null;
    }

    /**
     * üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ö–ê–ü–ò–¢–ê–ù–ê –ü–û –†–ï–ô–¢–ò–ù–ì–£
     * @param {number} teamId - ID –∫–æ–º–∞–Ω–¥—ã
     * @param {string} ratingType - –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ ('faceit' –∏–ª–∏ 'premier')
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º –∫–∞–ø–∏—Ç–∞–Ω–µ
     */
    static async autoAssignCaptain(teamId, ratingType = 'faceit') {
        console.log(`üéØ [TeamRepository] –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${teamId} (—Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞: ${ratingType})`);
        
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π —Ä—É—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            const membersResult = await client.query(`
                SELECT 
                    ttm.id,
                    ttm.user_id,
                    ttm.participant_id,
                    ttm.is_captain,
                    u.username,
                    -- üÜï –†–£–ß–ù–´–ï –†–ï–ô–¢–ò–ù–ì–ò –£–ß–ê–°–¢–ù–ò–ö–ê (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                    tp.faceit_elo,
                    tp.cs2_premier_rank,
                    -- üÜï –†–ï–ô–¢–ò–ù–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (—Ä–µ–∑–µ—Ä–≤)
                    u.faceit_elo as user_faceit_elo,
                    u.cs2_premier_rank as user_premier_rank,
                    -- üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø
                    tp.name as participant_name,
                    u.email as user_email
                FROM tournament_team_members ttm
                LEFT JOIN users u ON ttm.user_id = u.id  
                LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
                WHERE ttm.team_id = $1
                ORDER BY ttm.id
            `, [teamId]);
            
            if (membersResult.rows.length === 0) {
                throw new Error('–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
            }
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π —Ä—É—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            let bestMember = null;
            let bestRating = -1;
            
            for (const member of membersResult.rows) {
                let rating = 0;
                let usedManualRating = false;
                
                if (ratingType === 'faceit') {
                    // üÜï –ü–†–ò–û–†–ò–¢–ï–¢: —Ä—É—á–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Üí —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –¥–µ—Ñ–æ–ª—Ç
                    if (member.faceit_elo && !isNaN(parseInt(member.faceit_elo)) && parseInt(member.faceit_elo) > 0) {
                        rating = parseInt(member.faceit_elo);
                        usedManualRating = true;
                    } else if (member.user_faceit_elo && !isNaN(parseInt(member.user_faceit_elo)) && parseInt(member.user_faceit_elo) > 0) {
                        rating = parseInt(member.user_faceit_elo);
                    } else {
                        rating = 1000; // –¥–µ—Ñ–æ–ª—Ç –¥–ª—è FACEIT
                    }
                } else {
                    // üÜï –ü–†–ò–û–†–ò–¢–ï–¢: —Ä—É—á–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Üí —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –¥–µ—Ñ–æ–ª—Ç
                    if (member.cs2_premier_rank && !isNaN(parseInt(member.cs2_premier_rank)) && parseInt(member.cs2_premier_rank) > 0) {
                        rating = parseInt(member.cs2_premier_rank);
                        usedManualRating = true;
                    } else if (member.user_premier_rank && !isNaN(parseInt(member.user_premier_rank)) && parseInt(member.user_premier_rank) > 0) {
                        rating = parseInt(member.user_premier_rank);
                    } else {
                        rating = 5; // –¥–µ—Ñ–æ–ª—Ç –¥–ª—è Premier
                    }
                }
                
                console.log(`üìä [autoAssignCaptain] –£—á–∞—Å—Ç–Ω–∏–∫ ${member.username}: —Ä–µ–π—Ç–∏–Ω–≥ ${rating} (—Ä—É—á–Ω–æ–π: ${usedManualRating}), —Ä—É—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: faceit_elo=${member.faceit_elo}, cs2_premier_rank=${member.cs2_premier_rank}`);
                
                if (rating > bestRating) {
                    bestRating = rating;
                    bestMember = member;
                    bestMember.usedManualRating = usedManualRating; // üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥
                } else if (rating === bestRating) {
                    // üîß –¢–∞–π-–±—Ä–µ–π–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º; –∏–Ω–∞—á–µ —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
                    const candidateRegistered = !!member.user_id;
                    const currentRegistered = !!(bestMember && bestMember.user_id);
                    if (candidateRegistered && !currentRegistered) {
                        bestMember = member;
                        bestMember.usedManualRating = usedManualRating;
                    } else if (candidateRegistered === currentRegistered) {
                        // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–≤–Ω—ã—Ö –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                        if (Math.random() < 0.5) {
                            bestMember = member;
                            bestMember.usedManualRating = usedManualRating;
                        }
                    }
                }
            }
            
            if (!bestMember) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ —Ä–æ–ª—å –∫–∞–ø–∏—Ç–∞–Ω–∞');
            }
            
            // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ø–∏—Ç–∞–Ω–∞ —Å–æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            await client.query(`
                UPDATE tournament_team_members 
                SET is_captain = FALSE, captain_rating = NULL 
                WHERE team_id = $1
            `, [teamId]);
            
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞
            await client.query(`
                UPDATE tournament_team_members 
                SET is_captain = TRUE, captain_rating = $1 
                WHERE team_id = $2 AND user_id = $3
            `, [bestRating, teamId, bestMember.user_id]);
            
            await client.query('COMMIT');
            
            const captainInfo = {
                team_id: teamId,
                user_id: bestMember.user_id,
                username: bestMember.username,
                participant_name: bestMember.participant_name,
                is_captain: true,
                captain_rating: bestRating,
                manual_rating_used: bestMember.usedManualRating, // üÜï –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
                rating_type: ratingType
            };
            
            console.log(`‚úÖ [TeamRepository] –ê–≤—Ç–æ–∫–∞–ø–∏—Ç–∞–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω: ${bestMember.username} (—Ä–µ–π—Ç–∏–Ω–≥: ${bestRating}, —Ä—É—á–Ω–æ–π: ${bestMember.usedManualRating})`);
            
            return captainInfo;
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [TeamRepository] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞:`, error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã
     * @param {number} teamId - ID –∫–æ–º–∞–Ω–¥—ã
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async isUserCaptain(teamId, userId) {
        const result = await pool.query(
            'SELECT EXISTS(SELECT 1 FROM tournament_team_members WHERE team_id = $1 AND user_id = $2 AND is_captain = TRUE) as is_captain',
            [teamId, userId]
        );

        return result.rows[0].is_captain;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
     */
    static async getMembersCount(teamId) {
        const result = await pool.query(
            'SELECT COUNT(*) as count FROM tournament_team_members WHERE team_id = $1',
            [teamId]
        );

        return parseInt(result.rows[0].count);
    }

    /**
     * üîß –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤)
     */
    static async getMembers(teamId) {
        const result = await pool.query(`
            SELECT 
                ttm.*,
                u.username,
                u.avatar_url,
                tp.name as participant_name,
                tp.faceit_elo,
                tp.cs2_premier_rank,
                u.faceit_elo as user_faceit_elo,
                u.cs2_premier_rank as user_cs2_premier_rank
            FROM tournament_team_members ttm
            LEFT JOIN users u ON ttm.user_id = u.id
            LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
            WHERE ttm.team_id = $1
            ORDER BY ttm.is_captain DESC, tp.created_at ASC
        `, [teamId]);

        return result.rows;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
     */
    static async removeMember(teamId, userId) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —É–¥–∞–ª—è–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–ø–∏—Ç–∞–Ω–æ–º
            const memberInfo = await client.query(
                'SELECT is_captain FROM tournament_team_members WHERE team_id = $1 AND user_id = $2',
                [teamId, userId]
            );
            
            const wasCaptain = memberInfo.rows[0]?.is_captain || false;
            
            // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            const result = await client.query(
            'DELETE FROM tournament_team_members WHERE team_id = $1 AND user_id = $2 RETURNING *',
            [teamId, userId]
        );

            // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª –∫–∞–ø–∏—Ç–∞–Ω–æ–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ
            if (wasCaptain) {
                const remainingMembers = await client.query(
                    'SELECT COUNT(*) as count FROM tournament_team_members WHERE team_id = $1',
                    [teamId]
                );
                
                if (parseInt(remainingMembers.rows[0].count) > 0) {
                    // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    await client.query(`
                        UPDATE tournament_team_members 
                        SET is_captain = TRUE 
                        WHERE team_id = $1 
                        AND id = (
                            SELECT ttm.id 
                            FROM tournament_team_members ttm
                            LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
                            LEFT JOIN users u ON ttm.user_id = u.id
                            WHERE ttm.team_id = $1
                            ORDER BY 
                                COALESCE(tp.faceit_elo, u.faceit_elo, 1000) DESC,
                                tp.created_at ASC
                            LIMIT 1
                        )
                    `, [teamId]);
                    
                    console.log(`üîÑ TeamRepository: –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã ${teamId}`);
                }
            }
            
            await client.query('COMMIT');
            console.log(`‚úÖ TeamRepository: –£–¥–∞–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ ${userId} –∏–∑ –∫–æ–º–∞–Ω–¥—ã ${teamId}`);
        return result.rows[0] || null;
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã:`, error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {object} client - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    static async deleteAllByTournamentId(tournamentId, client = pool) {
        console.log(`üóëÔ∏è TeamRepository: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ (—Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
            await client.query(
                'DELETE FROM tournament_team_members ttm USING tournament_teams tt WHERE ttm.team_id = tt.id AND tt.tournament_id = $1',
                [tournamentId]
            );
            
            // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
            const result = await client.query(
                'DELETE FROM tournament_teams WHERE tournament_id = $1',
                [tournamentId]
            );
            
            console.log(`‚úÖ TeamRepository: –£–¥–∞–ª–µ–Ω–æ ${result.rowCount} –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            return result.rowCount;
            
        } catch (error) {
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            throw error;
        }
    }

    /**
     * üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤)
     */
    static async getByTournamentId(tournamentId) {
        console.log(`üîç TeamRepository: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} —Å –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏`);
        
        try {
            const result = await pool.query(`
                SELECT 
                    tt.*,
                    
                    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ø–∏—Ç–∞–Ω–µ
                    captain.user_id as captain_user_id,
                    captain.participant_id as captain_participant_id,
                    captain.captain_rating,
                    captain_user.username as captain_username,
                    captain_user.avatar_url as captain_avatar_url,
                    captain_participant.name as captain_name,
                    
                    -- –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                    COALESCE(
                        json_agg(
                            json_build_object(
                                'id', ttm.id,
                                'user_id', ttm.user_id,
                                'participant_id', ttm.participant_id,
                                'is_captain', ttm.is_captain,
                                'captain_rating', ttm.captain_rating,
                                'username', u.username,
                                'avatar_url', u.avatar_url,
                                'name', COALESCE(tp.name, u.username),
                                'faceit_elo', tp.faceit_elo,
                                'cs2_premier_rank', tp.cs2_premier_rank,
                                'user_faceit_elo', u.faceit_elo,
                                'user_cs2_premier_rank', u.cs2_premier_rank,
                                'faceit_rating', tp.faceit_elo,
                                'premier_rating', tp.cs2_premier_rank,
                                'user_faceit_rating', u.faceit_elo,
                                'user_premier_rating', u.cs2_premier_rank
                            ) ORDER BY ttm.is_captain DESC, tp.created_at ASC
                        ) FILTER (WHERE ttm.id IS NOT NULL), 
                        '[]'
                    ) as members
                    
                FROM tournament_teams tt
                
                -- JOIN —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
                LEFT JOIN tournament_team_members ttm ON tt.id = ttm.team_id
                LEFT JOIN users u ON ttm.user_id = u.id
                LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
                
                -- JOIN —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã
                LEFT JOIN tournament_team_members captain ON (
                    tt.id = captain.team_id AND captain.is_captain = TRUE
                )
                LEFT JOIN users captain_user ON captain.user_id = captain_user.id
                LEFT JOIN tournament_participants captain_participant ON captain.participant_id = captain_participant.id
                
                WHERE tt.tournament_id = $1
                GROUP BY 
                    tt.id, 
                    captain.user_id, captain.participant_id, captain.captain_rating,
                    captain_user.username, captain_user.avatar_url,
                    captain_participant.name
                ORDER BY tt.id
            `, [tournamentId]);
            
            console.log(`‚úÖ TeamRepository: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            return result.rows;
            
        } catch (error) {
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            throw error;
        }
    }

    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getCaptainStats(tournamentId) {
        const result = await pool.query(`
            SELECT 
                COUNT(*) as total_captains,
                ROUND(AVG(ttm.captain_rating)) as average_captain_rating,
                MAX(ttm.captain_rating) as highest_captain_rating,
                MIN(ttm.captain_rating) as lowest_captain_rating
            FROM tournament_teams tt
            JOIN tournament_team_members ttm ON tt.id = ttm.team_id
            WHERE tt.tournament_id = $1 AND ttm.is_captain = TRUE
        `, [tournamentId]);
        
        return result.rows[0];
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ ID
     * @param {number} teamId - ID –∫–æ–º–∞–Ω–¥—ã
     * @returns {Object} –£–¥–∞–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
     */
    static async deleteById(teamId) {
        console.log(`üóëÔ∏è TeamRepository: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${teamId}`);
        
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            await client.query(
                'DELETE FROM tournament_team_members WHERE team_id = $1',
                [teamId]
            );
            
            // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
            const result = await client.query(
                'DELETE FROM tournament_teams WHERE id = $1 RETURNING *',
                [teamId]
            );
            
            await client.query('COMMIT');
            
            console.log(`‚úÖ TeamRepository: –ö–æ–º–∞–Ω–¥–∞ ${teamId} —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            return result.rows[0] || null;
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ${teamId}:`, error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üÜï –ú–ê–°–°–û–í–û–ï –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ö–ê–ü–ò–¢–ê–ù–û–í –î–õ–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ö–û–ú–ê–ù–î
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {string} ratingType - –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ ('faceit' –∏–ª–∏ 'premier')
     * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
     */
    static async assignCaptainsForExistingTeams(tournamentId, ratingType = 'faceit') {
        console.log(`üëë [TeamRepository] –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} (—Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞: ${ratingType})`);
        
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ –±–µ–∑ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
            const teamsResult = await client.query(`
                SELECT DISTINCT tt.id, tt.name
                FROM tournament_teams tt
                WHERE tt.tournament_id = $1
                AND NOT EXISTS (
                    SELECT 1 FROM tournament_team_members ttm 
                    WHERE ttm.team_id = tt.id AND ttm.is_captain = TRUE
                )
                ORDER BY tt.id
            `, [tournamentId]);
            
            let assignedCount = 0;
            const results = [];
            
            for (const team of teamsResult.rows) {
                try {
                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π —Ä—É—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
                    const membersResult = await client.query(`
                        SELECT 
                            ttm.id,
                            ttm.user_id,
                            ttm.participant_id,
                            u.username,
                            -- üÜï –†–£–ß–ù–´–ï –†–ï–ô–¢–ò–ù–ì–ò –£–ß–ê–°–¢–ù–ò–ö–ê (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                            tp.faceit_elo,
                            tp.cs2_premier_rank,
                            -- üÜï –†–ï–ô–¢–ò–ù–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (—Ä–µ–∑–µ—Ä–≤)
                            u.faceit_elo as user_faceit_elo,
                            u.cs2_premier_rank as user_premier_rank,
                            tp.name as participant_name
                        FROM tournament_team_members ttm
                        LEFT JOIN users u ON ttm.user_id = u.id  
                        LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
                        WHERE ttm.team_id = $1
                    `, [team.id]);
                    
                    if (membersResult.rows.length === 0) {
                        console.log(`‚ö†Ô∏è [assignCaptainsForExistingTeams] –ö–æ–º–∞–Ω–¥–∞ ${team.name} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                        continue;
                    }
                    
                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π —Ä—É—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
                    let bestMember = null;
                    let bestRating = -1;
                    
                    for (const member of membersResult.rows) {
                        let rating = 0;
                        let usedManualRating = false;
                        
                        if (ratingType === 'faceit') {
                            // üÜï –ü–†–ò–û–†–ò–¢–ï–¢: —Ä—É—á–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Üí —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –¥–µ—Ñ–æ–ª—Ç
                            if (member.faceit_elo && !isNaN(parseInt(member.faceit_elo)) && parseInt(member.faceit_elo) > 0) {
                                rating = parseInt(member.faceit_elo);
                                usedManualRating = true;
                            } else if (member.user_faceit_elo && !isNaN(parseInt(member.user_faceit_elo)) && parseInt(member.user_faceit_elo) > 0) {
                                rating = parseInt(member.user_faceit_elo);
                            } else {
                                rating = 1000;
                            }
                        } else {
                            // üÜï –ü–†–ò–û–†–ò–¢–ï–¢: —Ä—É—á–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Üí —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –¥–µ—Ñ–æ–ª—Ç
                            if (member.cs2_premier_rank && !isNaN(parseInt(member.cs2_premier_rank)) && parseInt(member.cs2_premier_rank) > 0) {
                                rating = parseInt(member.cs2_premier_rank);
                                usedManualRating = true;
                            } else if (member.user_premier_rank && !isNaN(parseInt(member.user_premier_rank)) && parseInt(member.user_premier_rank) > 0) {
                                rating = parseInt(member.user_premier_rank);
                            } else {
                                rating = 5;
                            }
                        }
                        
                        if (rating > bestRating) {
                            bestRating = rating;
                            bestMember = member;
                            bestMember.usedManualRating = usedManualRating;
                        } else if (rating === bestRating) {
                            // üîß –¢–∞–π-–±—Ä–µ–π–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º; –∏–Ω–∞—á–µ —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
                            const candidateRegistered = !!member.user_id;
                            const currentRegistered = !!(bestMember && bestMember.user_id);
                            if (candidateRegistered && !currentRegistered) {
                                bestMember = member;
                                bestMember.usedManualRating = usedManualRating;
                            } else if (candidateRegistered === currentRegistered) {
                                if (Math.random() < 0.5) {
                                    bestMember = member;
                                    bestMember.usedManualRating = usedManualRating;
                                }
                            }
                        }
                    }
                    
                    if (bestMember) {
                        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
                        await client.query(`
                            UPDATE tournament_team_members 
                            SET is_captain = TRUE, captain_rating = $1 
                            WHERE team_id = $2 AND user_id = $3
                        `, [bestRating, team.id, bestMember.user_id]);
                        
                        assignedCount++;
                        results.push({
                            team_id: team.id,
                            team_name: team.name,
                            captain_username: bestMember.username,
                            captain_rating: bestRating,
                            manual_rating_used: bestMember.usedManualRating
                        });
                        
                        console.log(`‚úÖ [assignCaptainsForExistingTeams] –ö–æ–º–∞–Ω–¥–∞ "${team.name}": –∫–∞–ø–∏—Ç–∞–Ω ${bestMember.username} (—Ä–µ–π—Ç–∏–Ω–≥: ${bestRating}, —Ä—É—á–Ω–æ–π: ${bestMember.usedManualRating})`);
                    }
                    
                } catch (error) {
                    console.error(`‚ùå [assignCaptainsForExistingTeams] –û—à–∏–±–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${team.name}:`, error);
                }
            }
            
            await client.query('COMMIT');
            
            const stats = {
                total_teams: teamsResult.rows.length,
                assigned_captains: assignedCount,
                success_rate: teamsResult.rows.length > 0 ? Math.round((assignedCount / teamsResult.rows.length) * 100) : 0,
                results: results,
                manual_ratings_used: results.filter(r => r.manual_rating_used).length // üÜï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
            };
            
            console.log(`üéâ [assignCaptainsForExistingTeams] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${assignedCount}/${teamsResult.rows.length} –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ, –∏–∑ –Ω–∏—Ö ${stats.manual_ratings_used} —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏`);
            
            return stats;
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå [assignCaptainsForExistingTeams] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
            throw error;
        } finally {
            client.release();
        }
    }
}

module.exports = TeamRepository; 