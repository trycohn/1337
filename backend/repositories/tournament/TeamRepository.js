const pool = require('../../db');

class TeamRepository {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ ID
     */
    static async getById(teamId) {
        const result = await pool.query('SELECT * FROM tournament_teams WHERE id = $1', [teamId]);
        return result.rows[0] || null;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
     */
    static async create(teamData) {
        const { tournament_id, name, creator_id } = teamData;

        const result = await pool.query(
            `INSERT INTO tournament_teams (tournament_id, name, creator_id)
             VALUES ($1, $2, $3) RETURNING *`,
            [tournament_id, name, creator_id]
        );

        return result.rows[0];
    }

    /**
     * üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–∞
     * @param {number} teamId - ID –∫–æ–º–∞–Ω–¥—ã
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} participantId - ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {boolean} isCaptain - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–ø–∏—Ç–∞–Ω–æ–º
     * @param {number} captainRating - –†–µ–π—Ç–∏–Ω–≥ –∫–∞–ø–∏—Ç–∞–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
     */
    static async addMember(teamId, userId, participantId, isCaptain = false, captainRating = null) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –ï—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞, —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            if (isCaptain) {
                await client.query(
                    'UPDATE tournament_team_members SET is_captain = FALSE WHERE team_id = $1',
                    [teamId]
                );
            }
            
            const result = await client.query(
                `INSERT INTO tournament_team_members (team_id, user_id, participant_id, is_captain, captain_rating)
                 VALUES ($1, $2, $3, $4, $5) RETURNING *`,
                [teamId, userId, participantId, isCaptain, captainRating]
            );
            
            await client.query('COMMIT');
            console.log(`‚úÖ TeamRepository: –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ ${userId} –≤ –∫–æ–º–∞–Ω–¥—É ${teamId}${isCaptain ? ' (–∫–∞–ø–∏—Ç–∞–Ω)' : ''}`);
            return result.rows[0];
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É:`, error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üÜï –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
     * @param {number} teamId - ID –∫–æ–º–∞–Ω–¥—ã
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–º
     * @param {number} captainRating - –†–µ–π—Ç–∏–Ω–≥ –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞
     */
    static async setCaptain(teamId, userId, captainRating = null) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã
            const memberCheck = await client.query(
                'SELECT id FROM tournament_team_members WHERE team_id = $1 AND user_id = $2',
                [teamId, userId]
            );
            
            if (memberCheck.rows.length === 0) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã');
            }
            
            // –£–±–∏—Ä–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–æ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            await client.query(
                'UPDATE tournament_team_members SET is_captain = FALSE WHERE team_id = $1',
                [teamId]
            );
            
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞
            const result = await client.query(
                `UPDATE tournament_team_members 
                 SET is_captain = TRUE, captain_rating = $3
                 WHERE team_id = $1 AND user_id = $2 
                 RETURNING *`,
                [teamId, userId, captainRating]
            );
            
            await client.query('COMMIT');
            console.log(`‚úÖ TeamRepository: –ù–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–Ω ${userId} –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${teamId}`);
            return result.rows[0];
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞:`, error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ø–∏—Ç–∞–Ω–µ –∫–æ–º–∞–Ω–¥—ã
     * @param {number} teamId - ID –∫–æ–º–∞–Ω–¥—ã
     */
    static async getTeamCaptain(teamId) {
        const result = await pool.query(`
            SELECT 
                ttm.*,
                u.username,
                u.avatar_url,
                tp.name as participant_name,
                tp.faceit_elo,
                tp.cs2_premier_rank,
                u.faceit_elo as user_faceit_elo,
                u.cs2_premier_rank as user_cs2_premier_rank
            FROM tournament_team_members ttm
            LEFT JOIN users u ON ttm.user_id = u.id
            LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
            WHERE ttm.team_id = $1 AND ttm.is_captain = TRUE
        `, [teamId]);
        
        return result.rows[0] || null;
    }

    /**
     * üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –ø–æ –Ω–∞–∏–≤—ã—Å—à–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
     * @param {number} teamId - ID –∫–æ–º–∞–Ω–¥—ã
     * @param {string} ratingType - –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ ('faceit' –∏–ª–∏ 'premier')
     */
    static async autoAssignCaptain(teamId, ratingType = 'faceit') {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª–µ–π —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            let orderBy = '';
            if (ratingType === 'faceit') {
                orderBy = `
                    COALESCE(tp.faceit_elo, u.faceit_elo, 1000) DESC,
                    ttm.created_at ASC
                `;
            } else {
                orderBy = `
                    COALESCE(tp.cs2_premier_rank, u.cs2_premier_rank, 5) DESC,
                    ttm.created_at ASC
                `;
            }
            
            // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            const result = await client.query(`
                SELECT 
                    ttm.*,
                    COALESCE(tp.faceit_elo, u.faceit_elo, 1000) as faceit_rating,
                    COALESCE(tp.cs2_premier_rank, u.cs2_premier_rank, 5) as premier_rating
                FROM tournament_team_members ttm
                LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
                LEFT JOIN users u ON ttm.user_id = u.id
                WHERE ttm.team_id = $1
                ORDER BY ${orderBy}
                LIMIT 1
            `, [teamId]);
            
            if (result.rows.length === 0) {
                throw new Error('–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–º');
            }
            
            const newCaptain = result.rows[0];
            const captainRating = ratingType === 'faceit' ? newCaptain.faceit_rating : newCaptain.premier_rating;
            
            // –£–±–∏—Ä–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω—Å—Ç–≤–æ —É –≤—Å–µ—Ö
            await client.query(
                'UPDATE tournament_team_members SET is_captain = FALSE WHERE team_id = $1',
                [teamId]
            );
            
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞
            await client.query(
                'UPDATE tournament_team_members SET is_captain = TRUE, captain_rating = $2 WHERE id = $1',
                [newCaptain.id, captainRating]
            );
            
            await client.query('COMMIT');
            console.log(`‚úÖ TeamRepository: –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω –∫–∞–ø–∏—Ç–∞–Ω ${newCaptain.user_id} –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${teamId} (—Ä–µ–π—Ç–∏–Ω–≥: ${captainRating})`);
            
            return await this.getTeamCaptain(teamId);
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞:`, error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã
     * @param {number} teamId - ID –∫–æ–º–∞–Ω–¥—ã
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async isUserCaptain(teamId, userId) {
        const result = await pool.query(
            'SELECT EXISTS(SELECT 1 FROM tournament_team_members WHERE team_id = $1 AND user_id = $2 AND is_captain = TRUE) as is_captain',
            [teamId, userId]
        );
        
        return result.rows[0].is_captain;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
     */
    static async getMembersCount(teamId) {
        const result = await pool.query(
            'SELECT COUNT(*) as count FROM tournament_team_members WHERE team_id = $1',
            [teamId]
        );

        return parseInt(result.rows[0].count);
    }

    /**
     * üîß –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤)
     */
    static async getMembers(teamId) {
        const result = await pool.query(`
            SELECT 
                ttm.*,
                u.username,
                u.avatar_url,
                tp.name as participant_name,
                tp.faceit_elo,
                tp.cs2_premier_rank,
                u.faceit_elo as user_faceit_elo,
                u.cs2_premier_rank as user_cs2_premier_rank
            FROM tournament_team_members ttm
            LEFT JOIN users u ON ttm.user_id = u.id
            LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
            WHERE ttm.team_id = $1
            ORDER BY ttm.is_captain DESC, ttm.created_at ASC
        `, [teamId]);

        return result.rows;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
     */
    static async removeMember(teamId, userId) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —É–¥–∞–ª—è–µ–º—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–ø–∏—Ç–∞–Ω–æ–º
            const memberInfo = await client.query(
                'SELECT is_captain FROM tournament_team_members WHERE team_id = $1 AND user_id = $2',
                [teamId, userId]
            );
            
            const wasCaptain = memberInfo.rows[0]?.is_captain || false;
            
            // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            const result = await client.query(
                'DELETE FROM tournament_team_members WHERE team_id = $1 AND user_id = $2 RETURNING *',
                [teamId, userId]
            );
            
            // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª –∫–∞–ø–∏—Ç–∞–Ω–æ–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ
            if (wasCaptain) {
                const remainingMembers = await client.query(
                    'SELECT COUNT(*) as count FROM tournament_team_members WHERE team_id = $1',
                    [teamId]
                );
                
                if (parseInt(remainingMembers.rows[0].count) > 0) {
                    // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    await client.query(`
                        UPDATE tournament_team_members 
                        SET is_captain = TRUE 
                        WHERE team_id = $1 
                        AND id = (
                            SELECT ttm.id 
                            FROM tournament_team_members ttm
                            LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
                            LEFT JOIN users u ON ttm.user_id = u.id
                            WHERE ttm.team_id = $1
                            ORDER BY 
                                COALESCE(tp.faceit_elo, u.faceit_elo, 1000) DESC,
                                ttm.created_at ASC
                            LIMIT 1
                        )
                    `, [teamId]);
                    
                    console.log(`üîÑ TeamRepository: –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã ${teamId}`);
                }
            }
            
            await client.query('COMMIT');
            console.log(`‚úÖ TeamRepository: –£–¥–∞–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ ${userId} –∏–∑ –∫–æ–º–∞–Ω–¥—ã ${teamId}`);
            return result.rows[0] || null;
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã:`, error);
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {object} client - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    static async deleteAllByTournamentId(tournamentId, client = pool) {
        console.log(`üóëÔ∏è TeamRepository: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ (—Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
            await client.query(
                'DELETE FROM tournament_team_members ttm USING tournament_teams tt WHERE ttm.team_id = tt.id AND tt.tournament_id = $1',
                [tournamentId]
            );
            
            // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
            const result = await client.query(
                'DELETE FROM tournament_teams WHERE tournament_id = $1',
                [tournamentId]
            );
            
            console.log(`‚úÖ TeamRepository: –£–¥–∞–ª–µ–Ω–æ ${result.rowCount} –∫–æ–º–∞–Ω–¥ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            return result.rowCount;
            
        } catch (error) {
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            throw error;
        }
    }

    /**
     * üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤)
     */
    static async getByTournamentId(tournamentId) {
        console.log(`üîç TeamRepository: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} —Å –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏`);
        
        try {
            const result = await pool.query(`
                SELECT 
                    tt.*,
                    
                    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ø–∏—Ç–∞–Ω–µ
                    captain.user_id as captain_user_id,
                    captain.participant_id as captain_participant_id,
                    captain.captain_rating,
                    captain_user.username as captain_username,
                    captain_user.avatar_url as captain_avatar_url,
                    captain_participant.name as captain_name,
                    
                    -- –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                    COALESCE(
                        json_agg(
                            json_build_object(
                                'id', ttm.id,
                                'user_id', ttm.user_id,
                                'participant_id', ttm.participant_id,
                                'is_captain', ttm.is_captain,
                                'captain_rating', ttm.captain_rating,
                                'username', u.username,
                                'avatar_url', u.avatar_url,
                                'name', COALESCE(tp.name, u.username),
                                'faceit_elo', tp.faceit_elo,
                                'cs2_premier_rank', tp.cs2_premier_rank,
                                'user_faceit_elo', u.faceit_elo,
                                'user_cs2_premier_rank', u.cs2_premier_rank,
                                'faceit_rating', tp.faceit_elo,
                                'premier_rating', tp.cs2_premier_rank,
                                'user_faceit_rating', u.faceit_elo,
                                'user_premier_rating', u.cs2_premier_rank
                            ) ORDER BY ttm.is_captain DESC, ttm.created_at ASC
                        ) FILTER (WHERE ttm.id IS NOT NULL), 
                        '[]'
                    ) as members
                    
                FROM tournament_teams tt
                
                -- JOIN —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
                LEFT JOIN tournament_team_members ttm ON tt.id = ttm.team_id
                LEFT JOIN users u ON ttm.user_id = u.id
                LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
                
                -- JOIN —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã
                LEFT JOIN tournament_team_members captain ON (
                    tt.id = captain.team_id AND captain.is_captain = TRUE
                )
                LEFT JOIN users captain_user ON captain.user_id = captain_user.id
                LEFT JOIN tournament_participants captain_participant ON captain.participant_id = captain_participant.id
                
                WHERE tt.tournament_id = $1
                GROUP BY 
                    tt.id, 
                    captain.user_id, captain.participant_id, captain.captain_rating,
                    captain_user.username, captain_user.avatar_url,
                    captain_participant.name
                ORDER BY tt.id
            `, [tournamentId]);
            
            console.log(`‚úÖ TeamRepository: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            return result.rows;
            
        } catch (error) {
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
            throw error;
        }
    }

    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getCaptainStats(tournamentId) {
        const result = await pool.query(`
            SELECT 
                COUNT(*) as total_captains,
                ROUND(AVG(ttm.captain_rating)) as average_captain_rating,
                MAX(ttm.captain_rating) as highest_captain_rating,
                MIN(ttm.captain_rating) as lowest_captain_rating
            FROM tournament_teams tt
            JOIN tournament_team_members ttm ON tt.id = ttm.team_id
            WHERE tt.tournament_id = $1 AND ttm.is_captain = TRUE
        `, [tournamentId]);
        
        return result.rows[0];
    }

    /**
     * üÜï –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {string} ratingType - –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–∞
     */
    static async assignCaptainsForExistingTeams(tournamentId, ratingType = 'faceit') {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ –±–µ–∑ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
            const teams = await client.query(`
                SELECT tt.id as team_id
                FROM tournament_teams tt
                LEFT JOIN tournament_team_members captain ON (
                    tt.id = captain.team_id AND captain.is_captain = TRUE
                )
                WHERE tt.tournament_id = $1 AND captain.id IS NULL
            `, [tournamentId]);
            
            let assignedCount = 0;
            
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
            for (const team of teams.rows) {
                try {
                    await this.autoAssignCaptain(team.team_id, ratingType);
                    assignedCount++;
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${team.team_id}:`, error.message);
                }
            }
            
            await client.query('COMMIT');
            console.log(`‚úÖ TeamRepository: –ù–∞–∑–Ω–∞—á–µ–Ω–æ ${assignedCount} –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
            
            return {
                total_teams: teams.rows.length,
                assigned_captains: assignedCount
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå TeamRepository: –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–≤:`, error);
            throw error;
        } finally {
            client.release();
        }
    }
}

module.exports = TeamRepository; 