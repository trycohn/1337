const pool = require('../../db');

class TournamentRepository {
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static async getAllWithParticipantCount() {
        const result = await pool.query(`
            SELECT 
                t.*, 
                CASE 
                  WHEN t.participant_type = 'solo' THEN (
                    SELECT COUNT(*) FROM tournament_participants tp WHERE tp.tournament_id = t.id
                  )
                  WHEN t.participant_type = 'team' THEN (
                    SELECT COUNT(*) FROM tournament_teams tt WHERE tt.tournament_id = t.id
                  )
                  ELSE 0
                END AS participant_count,
                -- –ë–µ—Ä—ë–º –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ: –¥–ª—è –Ω–µ-MIX –º–æ–∂–µ—Ç –±—ã—Ç—å 0
                t.players_count AS players_count
            FROM tournaments t
            ORDER BY t.created_at DESC
        `);
        
        return result.rows;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ ID
     */
    static async getById(tournamentId) {
        const result = await pool.query('SELECT * FROM tournaments WHERE id = $1', [tournamentId]);
        return result.rows[0] || null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ ID —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
     */
    static async getByIdWithCreator(tournamentId) {
        const result = await pool.query(`
            SELECT 
                t.*,
                u.username as creator_username,
                u.avatar_url as creator_avatar_url
            FROM tournaments t
            LEFT JOIN users u ON t.created_by = u.id
            WHERE t.id = $1
        `, [tournamentId]);
        
        return result.rows[0] || null;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async create(tournamentData) {
        const {
            name, game, format, created_by, status, participant_type,
            max_participants, start_date, description, bracket_type, team_size, mix_rating_type,
            full_double_elimination,
            require_faceit_linked = false,
            require_steam_linked = false,
            is_series_final = false
        } = tournamentData;

        const result = await pool.query(
            `INSERT INTO tournaments
             (name, game, format, created_by, status, participant_type, max_participants, start_date, description, bracket_type, team_size, mix_rating_type, full_double_elimination, require_faceit_linked, require_steam_linked, is_series_final)
             VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) RETURNING *`,
            [name, game, format, created_by, status, participant_type, max_participants, start_date, description, bracket_type, team_size, mix_rating_type, full_double_elimination || false, !!require_faceit_linked, !!require_steam_linked, !!is_series_final]
        );

        return result.rows[0];
    }

    /**
     * üÜï –ó–∞–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–±–æ—Ä–æ—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–ª–∞ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)
     */
    static async setFinalQualifiers(finalTournamentId, qualifiers) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            await client.query('DELETE FROM tournament_qualifiers WHERE final_tournament_id = $1', [finalTournamentId]);

            for (const q of qualifiers) {
                const qualifierId = parseInt(q.qualifier_tournament_id);
                const slots = Math.max(1, Math.min(3, parseInt(q.slots || 1)));
                if (!qualifierId || qualifierId === finalTournamentId) continue;
                await client.query(
                    `INSERT INTO tournament_qualifiers (final_tournament_id, qualifier_tournament_id, slots)
                     VALUES ($1, $2, $3)
                     ON CONFLICT (final_tournament_id, qualifier_tournament_id) DO UPDATE SET slots = EXCLUDED.slots`,
                    [finalTournamentId, qualifierId, slots]
                );
            }

            await client.query('COMMIT');
            return { success: true };
        } catch (e) {
            await client.query('ROLLBACK');
            throw e;
        } finally {
            client.release();
        }
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–±–æ—Ä–æ—á–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–ª–∞
     */
    static async getFinalQualifiers(finalTournamentId) {
        const res = await pool.query(
            `SELECT q.qualifier_tournament_id, q.slots, t.name as qualifier_name, t.status
             FROM tournament_qualifiers q
             LEFT JOIN tournaments t ON t.id = q.qualifier_tournament_id
             WHERE q.final_tournament_id = $1
             ORDER BY q.id ASC`,
            [finalTournamentId]
        );
        return res.rows;
    }

    /**
     * üÜï –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –¥–∞–Ω–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–±–æ—Ä–æ—á–Ω—ã–º
     */
    static async getFinalsByQualifier(qualifierTournamentId) {
        const res = await pool.query(
            `SELECT q.final_tournament_id AS id, t.name, t.created_by, t.is_series_final, q.slots
             FROM tournament_qualifiers q
             JOIN tournaments t ON t.id = q.final_tournament_id
             WHERE q.qualifier_tournament_id = $1`,
            [qualifierTournamentId]
        );
        return res.rows;
    }

    /**
     * üÜï –ü–æ–∏—Å–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/ID —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —Å—Ç–∞—Ç—É—Å–∞
     */
    static async searchTournaments(query, status, limit = 20) {
        const q = `%${query}%`;
        const clauses = [];
        const params = [];

        // –∏–º—è/ID
        clauses.push('(LOWER(t.name) LIKE LOWER($1) OR CAST(t.id AS TEXT) LIKE $1)');
        params.push(q);

        if (status && ['registration','active','in_progress','completed'].includes(status)) {
            clauses.push('t.status = $2');
            params.push(status);
        }

        const where = clauses.length ? `WHERE ${clauses.join(' AND ')}` : '';
        const sql = `
            SELECT t.id, t.name, t.status, t.game, t.format
            FROM tournaments t
            ${where}
            ORDER BY t.created_at DESC
            LIMIT ${Math.max(1, Math.min(100, parseInt(limit) || 20))}
        `;
        const res = await pool.query(sql, params);
        return res.rows;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async update(tournamentId, updateData) {
        const { name, game, format, participant_type, max_participants, start_date, description } = updateData;

        const result = await pool.query(
            'UPDATE tournaments SET name = $1, game = $2, format = $3, participant_type = $4, max_participants = $5, start_date = $6, description = $7 WHERE id = $8 RETURNING *',
            [name, game, format, participant_type, max_participants, start_date, description, tournamentId]
        );

        return result.rows[0];
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async delete(tournamentId) {
        const result = await pool.query('DELETE FROM tournaments WHERE id = $1 RETURNING *', [tournamentId]);
        return result.rows[0];
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateStatus(tournamentId, status) {
        let sql = 'UPDATE tournaments SET status = $1';
        const values = [status, tournamentId];

        // –ï—Å–ª–∏ —Å—Ç–∞–≤–∏–º completed ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –º–æ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (status === 'completed') {
            sql += ', completed_at = COALESCE(completed_at, CURRENT_TIMESTAMP)';
        }
        sql += ' WHERE id = $2 RETURNING *';

        const result = await pool.query(sql, values);
        return result.rows[0];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
     */
    static async getGames() {
        console.log('üéÆ TournamentRepository: –í—ã–ø–æ–ª–Ω—è—é SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä');
        try {
            const result = await pool.query('SELECT id, name FROM games ORDER BY name');
            console.log(`‚úÖ TournamentRepository: SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—É—á–µ–Ω–æ ${result.rows.length} –∑–∞–ø–∏—Å–µ–π`);
            console.log('üìä TournamentRepository: –ü–µ—Ä–≤—ã–µ 3 –∏–≥—Ä—ã:', result.rows.slice(0, 3));
            return result.rows;
        } catch (error) {
            console.error('‚ùå TournamentRepository: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–≥—Ä:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getAdmins(tournamentId) {
        try {
            const result = await pool.query(`
                SELECT 
                    ta.id,
                    ta.user_id,
                    ta.permissions,
                    ta.assigned_at,
                    u.username,
                    u.avatar_url
                FROM tournament_admins ta
                LEFT JOIN users u ON ta.user_id = u.id
                WHERE ta.tournament_id = $1
                ORDER BY ta.assigned_at ASC
            `, [tournamentId]);
            
            return result.rows;
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error.message);
            return [];
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async isAdmin(tournamentId, userId) {
        try {
            const result = await pool.query(
                'SELECT * FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
                [tournamentId, userId]
            );
            return result.rows.length > 0;
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤:`, error.message);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
     */
    static async getTeamsWithMembers(tournamentId) {
        try {
            // üÜï –°–ù–ê–ß–ê–õ–ê –ü–û–õ–£–ß–ê–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –¢–£–†–ù–ò–†–ï –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
            const tournamentResult = await pool.query(
                'SELECT mix_rating_type FROM tournaments WHERE id = $1',
                [tournamentId]
            );
            
            const ratingType = tournamentResult.rows[0]?.mix_rating_type || 'faceit';
            console.log(`üìä [getTeamsWithMembers] –¢—É—Ä–Ω–∏—Ä ${tournamentId}: —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ = ${ratingType}`);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞
            const teamsResult = await pool.query(
                `SELECT tt.id, tt.tournament_id, tt.name, tt.creator_id
                 FROM tournament_teams tt
                 WHERE tt.tournament_id = $1
                 ORDER BY tt.id`,
                [tournamentId]
            );

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ü–û–õ–ù–´–ú–ò –ø–æ–ª—è–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
            const teams = await Promise.all(teamsResult.rows.map(async (team) => {
                const membersResult = await pool.query(
                    `SELECT tm.team_id, tm.user_id, tm.participant_id, tm.is_captain, tm.captain_rating,
                            COALESCE(tp.name, u.username) AS name, u.username, u.avatar_url,
                            COALESCE(tp.name, u.username) AS display_name,
                            tp.faceit_elo, tp.cs2_premier_rank,
                            u.faceit_elo as user_faceit_elo, u.cs2_premier_rank as user_premier_rank,
                            u.faceit_elo as user_faceit_rating, u.cs2_premier_rank as user_premier_rating
                     FROM tournament_team_members tm
                     LEFT JOIN tournament_participants tp ON tm.participant_id = tp.id
                     LEFT JOIN users u ON tm.user_id = u.id
                     WHERE tm.team_id = $1
                     ORDER BY tm.is_captain DESC, tm.participant_id`,
                    [team.id]
                );

                // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã
                const members = membersResult.rows;
                let averageRatingFaceit = 0;
                let averageRatingPremier = 0;
                
                if (members.length > 0) {
                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –≤ MixTeamService.normalizeParticipantRating
                    const faceitRatings = members.map(member => {
                        // FACEIT –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: faceit_elo -> user_faceit_elo -> faceit_rating -> user_faceit_rating -> 1000
                        console.log(`üîç [getTeamsWithMembers] –£—á–∞—Å—Ç–Ω–∏–∫ ${member.display_name || member.name}:`, {
                            faceit_elo: member.faceit_elo,
                            user_faceit_elo: member.user_faceit_elo,
                            faceit_rating: member.faceit_rating,
                            user_faceit_rating: member.user_faceit_rating
                        });
                        
                        let rating;
                        if (member.faceit_elo && !isNaN(parseInt(member.faceit_elo)) && parseInt(member.faceit_elo) > 0) {
                            rating = parseInt(member.faceit_elo);
                            console.log(`‚úÖ [getTeamsWithMembers] ${member.display_name || member.name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º faceit_elo = ${rating}`);
                            return rating;
                        } else if (member.user_faceit_elo && !isNaN(parseInt(member.user_faceit_elo)) && parseInt(member.user_faceit_elo) > 0) {
                            rating = parseInt(member.user_faceit_elo);
                            console.log(`‚úÖ [getTeamsWithMembers] ${member.display_name || member.name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º user_faceit_elo = ${rating}`);
                            return rating;
                        } else if (member.faceit_rating && !isNaN(parseInt(member.faceit_rating)) && parseInt(member.faceit_rating) > 0) {
                            rating = parseInt(member.faceit_rating);
                            console.log(`‚úÖ [getTeamsWithMembers] ${member.display_name || member.name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º faceit_rating = ${rating}`);
                            return rating;
                        } else if (member.user_faceit_rating && !isNaN(parseInt(member.user_faceit_rating)) && parseInt(member.user_faceit_rating) > 0) {
                            rating = parseInt(member.user_faceit_rating);
                            console.log(`‚úÖ [getTeamsWithMembers] ${member.display_name || member.name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º user_faceit_rating = ${rating}`);
                            return rating;
                        } else {
                            rating = 1000; // –î–µ—Ñ–æ–ª—Ç –¥–ª—è FACEIT
                            console.log(`‚ö†Ô∏è [getTeamsWithMembers] ${member.display_name || member.name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç FACEIT = ${rating}`);
                            return rating;
                        }
                    });
                    
                    console.log(`üìä [getTeamsWithMembers] –ö–æ–º–∞–Ω–¥–∞ "${team.name}": —Ä–µ–π—Ç–∏–Ω–≥–∏ FACEIT [${faceitRatings.join(', ')}]`);
                    averageRatingFaceit = Math.round(faceitRatings.reduce((sum, rating) => sum + rating, 0) / faceitRatings.length);
                    console.log(`üìä [getTeamsWithMembers] –ö–æ–º–∞–Ω–¥–∞ "${team.name}": —Å—Ä–µ–¥–Ω–∏–π FACEIT = ${averageRatingFaceit}`);
                    
                    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –≤ MixTeamService.normalizeParticipantRating
                    const premierRatings = members.map(member => {
                        // Premier –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: cs2_premier_rank -> user_premier_rank -> premier_rank -> premier_rating -> user_premier_rating -> 5
                        console.log(`üîç [getTeamsWithMembers] –£—á–∞—Å—Ç–Ω–∏–∫ ${member.name} Premier:`, {
                            cs2_premier_rank: member.cs2_premier_rank,
                            user_premier_rank: member.user_premier_rank,
                            premier_rank: member.premier_rank,
                            premier_rating: member.premier_rating,
                            user_premier_rating: member.user_premier_rating
                        });
                        
                        let rating;
                        if (member.cs2_premier_rank && !isNaN(parseInt(member.cs2_premier_rank)) && parseInt(member.cs2_premier_rank) > 0) {
                            rating = parseInt(member.cs2_premier_rank);
                            console.log(`‚úÖ [getTeamsWithMembers] ${member.name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º cs2_premier_rank = ${rating}`);
                            return rating;
                        } else if (member.user_premier_rank && !isNaN(parseInt(member.user_premier_rank)) && parseInt(member.user_premier_rank) > 0) {
                            rating = parseInt(member.user_premier_rank);
                            console.log(`‚úÖ [getTeamsWithMembers] ${member.name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º user_premier_rank = ${rating}`);
                            return rating;
                        } else if (member.premier_rank && !isNaN(parseInt(member.premier_rank)) && parseInt(member.premier_rank) > 0) {
                            rating = parseInt(member.premier_rank);
                            console.log(`‚úÖ [getTeamsWithMembers] ${member.name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º premier_rank = ${rating}`);
                            return rating;
                        } else if (member.premier_rating && !isNaN(parseInt(member.premier_rating)) && parseInt(member.premier_rating) > 0) {
                            rating = parseInt(member.premier_rating);
                            console.log(`‚úÖ [getTeamsWithMembers] ${member.name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º premier_rating = ${rating}`);
                            return rating;
                        } else if (member.user_premier_rating && !isNaN(parseInt(member.user_premier_rating)) && parseInt(member.user_premier_rating) > 0) {
                            rating = parseInt(member.user_premier_rating);
                            console.log(`‚úÖ [getTeamsWithMembers] ${member.name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º user_premier_rating = ${rating}`);
                            return rating;
                        } else {
                            rating = 5; // –î–µ—Ñ–æ–ª—Ç –¥–ª—è Premier
                            console.log(`‚ö†Ô∏è [getTeamsWithMembers] ${member.name}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç Premier = ${rating}`);
                            return rating;
                        }
                    });
                    
                    console.log(`üìä [getTeamsWithMembers] –ö–æ–º–∞–Ω–¥–∞ "${team.name}": —Ä–µ–π—Ç–∏–Ω–≥–∏ Premier [${premierRatings.join(', ')}]`);
                    averageRatingPremier = Math.round(premierRatings.reduce((sum, rating) => sum + rating, 0) / premierRatings.length);
                    console.log(`üìä [getTeamsWithMembers] –ö–æ–º–∞–Ω–¥–∞ "${team.name}": —Å—Ä–µ–¥–Ω–∏–π Premier = ${averageRatingPremier}`);
                }

                // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: averageRating –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç—É—Ä–Ω–∏—Ä–∞
                const averageRating = ratingType === 'premier' ? averageRatingPremier : averageRatingFaceit;

                console.log(`üìä [getTeamsWithMembers] –ö–æ–º–∞–Ω–¥–∞ "${team.name}": FACEIT=${averageRatingFaceit}, Premier=${averageRatingPremier}, –∏—Ç–æ–≥–æ–≤—ã–π (${ratingType})=${averageRating}`);

                // üÜï –ê–≤–∞—Ç–∞—Ä –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = –∞–≤–∞—Ç–∞—Ä –∫–∞–ø–∏—Ç–∞–Ω–∞ (–∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞)
                const captain = members.find(m => m.is_captain) || members[0];
                const captainAvatar = captain?.avatar_url || null;

                return {
                    ...team,
                    members: members,
                    averageRatingFaceit: averageRatingFaceit,
                    averageRatingPremier: averageRatingPremier,
                    averageRating: averageRating,
                    ratingType: ratingType,
                    avatar_url: captainAvatar,
                    logo_url: team.logo_url || captainAvatar
                };
            }));

            return teams;
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error.message);
            return [];
        }
    }

    /**
     * üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateGame(tournamentId, game) {
        const result = await pool.query(
            'UPDATE tournaments SET game = $1 WHERE id = $2 RETURNING *',
            [game, tournamentId]
        );
        return result.rows[0];
    }

    /**
     * üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateFormat(tournamentId, format) {
        const result = await pool.query(
            'UPDATE tournaments SET format = $1 WHERE id = $2 RETURNING *',
            [format, tournamentId]
        );
        return result.rows[0];
    }

    /**
     * üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateStartDate(tournamentId, startDate) {
        const result = await pool.query(
            'UPDATE tournaments SET start_date = $1 WHERE id = $2 RETURNING *',
            [startDate, tournamentId]
        );
        return result.rows[0];
    }

    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getParticipantsCount(tournamentId) {
        const result = await pool.query(
            'SELECT COUNT(*) as count FROM tournament_participants WHERE tournament_id = $1',
            [tournamentId]
        );
        return parseInt(result.rows[0].count);
    }

    /**
     * üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async getTeamsCount(tournamentId) {
        const result = await pool.query(
            'SELECT COUNT(*) as count FROM tournament_teams WHERE tournament_id = $1',
            [tournamentId]
        );
        return parseInt(result.rows[0].count);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async deleteTeams(tournamentId) {
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        await pool.query(
            'DELETE FROM tournament_team_members WHERE team_id IN (SELECT id FROM tournament_teams WHERE tournament_id = $1)',
            [tournamentId]
        );
        
        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
        const result = await pool.query(
            'DELETE FROM tournament_teams WHERE tournament_id = $1',
            [tournamentId]
        );
        
        return result.rowCount;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateDescription(tournamentId, description) {
        const result = await pool.query(
            'UPDATE tournaments SET description = $1 WHERE id = $2 RETURNING *',
            [description, tournamentId]
        );
        return result.rows[0];
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateFullDescription(tournamentId, fullDescription) {
        const result = await pool.query(
            'UPDATE tournaments SET full_description = $1 WHERE id = $2 RETURNING *',
            [fullDescription, tournamentId]
        );
        return result.rows[0];
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateRules(tournamentId, rules) {
        const result = await pool.query(
            'UPDATE tournaments SET rules = $1 WHERE id = $2 RETURNING *',
            [rules, tournamentId]
        );
        return result.rows[0];
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updatePrizePool(tournamentId, prizePool) {
        const result = await pool.query(
            'UPDATE tournaments SET prize_pool = $1 WHERE id = $2 RETURNING *',
            [prizePool, tournamentId]
        );
        return result.rows[0];
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
     */
    static async updateTeamSize(tournamentId, teamSize) {
        const result = await pool.query(
            'UPDATE tournaments SET team_size = $1 WHERE id = $2 RETURNING *',
            [teamSize, tournamentId]
        );
        return result.rows[0];
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
     */
    static async updateMixRatingType(tournamentId, mixRatingType) {
        const result = await pool.query(
            'UPDATE tournaments SET mix_rating_type = $1 WHERE id = $2 RETURNING *',
            [mixRatingType, tournamentId]
        );
        return result.rows[0];
    }

    /**
     * üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è MIX —Ç—É—Ä–Ω–∏—Ä–æ–≤
     */
    static async updateMixLinkRequirements(tournamentId, requireFaceitLinked, requireSteamLinked) {
        const result = await pool.query(
            'UPDATE tournaments SET require_faceit_linked = $1, require_steam_linked = $2 WHERE id = $3 RETURNING *',
            [!!requireFaceitLinked, !!requireSteamLinked, tournamentId]
        );
        return result.rows[0];
    }

    /**
     * –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async resetMatchResults(tournamentId, userId) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            const countResult = await client.query(
                'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1 AND winner_team_id IS NOT NULL', 
                [tournamentId]
            );
            const matchesWithResultsCount = parseInt(countResult.rows[0].count);
            
            // –û—á–∏—â–∞–µ–º –í–°–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π
            await client.query(`
                UPDATE matches 
                SET winner_team_id = NULL, 
                    score1 = NULL, 
                    score2 = NULL, 
                    maps_data = NULL
                WHERE tournament_id = $1
            `, [tournamentId]);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∫–∏
            // (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
            
            // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 'active'
            await client.query(
                'UPDATE tournaments SET status = $1 WHERE id = $2',
                ['active', tournamentId]
            );
            
            await client.query('COMMIT');
            
            return {
                message: `–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ${matchesWithResultsCount} –º–∞—Ç—á–µ–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∫–∏`,
                clearedCount: matchesWithResultsCount,
                statusChanged: true,
                newStatus: 'active',
                structureRestored: true
            };
            
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async updateParticipantType(tournamentId, participantType) {
        console.log(`üîÑ TournamentRepository: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ '${participantType}'`);
        
        const result = await pool.query(
            'UPDATE tournaments SET participant_type = $1 WHERE id = $2 RETURNING *',
            [participantType, tournamentId]
        );
        
        console.log(`‚úÖ TournamentRepository: —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '${participantType}'`);
        return result.rows[0];
    }

    /**
     * üèÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     */
    static async updateBracketType(tournamentId, bracketType) {
        console.log(`üèÜ [TournamentRepository.updateBracketType] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ "${bracketType}"`);
        
        const result = await pool.query(
            'UPDATE tournaments SET bracket_type = $1 WHERE id = $2 RETURNING *',
            [bracketType, tournamentId]
        );
        
        if (result.rows.length === 0) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        return result.rows[0];
    }

    /**
     * üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–∫—Å-—Ç—É—Ä–Ω–∏—Ä–æ–≤
     */
    static async updateTeamSize(tournamentId, teamSize) {
        console.log(`üë• [TournamentRepository.updateTeamSize] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –Ω–∞ ${teamSize}`);
        
        const result = await pool.query(
            'UPDATE tournaments SET team_size = $1 WHERE id = $2 RETURNING *',
            [teamSize, tournamentId]
        );
        
        if (result.rows.length === 0) {
            throw new Error('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        return result.rows[0];
    }

    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ
     */
    static async getMatchesCount(tournamentId) {
        console.log(`üìä [TournamentRepository.getMatchesCount] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const result = await pool.query(
            'SELECT COUNT(*) as count FROM matches WHERE tournament_id = $1',
            [tournamentId]
        );
        
        return parseInt(result.rows[0].count, 10);
    }

    /**
     * üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static async deleteMatches(tournamentId) {
        console.log(`üóëÔ∏è [TournamentRepository.deleteMatches] –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
        
        const result = await pool.query(
            'DELETE FROM matches WHERE tournament_id = $1',
            [tournamentId]
        );
        
        console.log(`‚úÖ [TournamentRepository.deleteMatches] –£–¥–∞–ª–µ–Ω–æ ${result.rowCount} –º–∞—Ç—á–µ–π`);
        
        return result.rowCount;
    }
}

module.exports = TournamentRepository;