// backend/bracketGenerator.js
const { generateSingleEliminationBracket } = require('./bracketGenerators/singleEliminationV2');
const { generateDoubleEliminationBracket } = require('./bracketGenerators/doubleElimination');

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {string} format - –§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ (single_elimination, double_elimination –∏ —Ç.–¥.)
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ [{ id, name }]
 * @param {boolean} thirdPlaceMatch - –ù—É–∂–µ–Ω –ª–∏ –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ
 * @returns {Array} - –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
 */
const generateBracket = async (format, tournamentId, participants, thirdPlaceMatch) => {
    console.log('üö® [bracketGenerator.js] –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê:');
    console.log('üö® format:', format, '(type:', typeof format, ')');
    console.log('üö® tournamentId:', tournamentId, '(type:', typeof tournamentId, ')');
    console.log('üö® participants:', typeof participants === 'object' ? 'IS OBJECT' : typeof participants);
    console.log('üö® participants.length:', Array.isArray(participants) ? participants.length : 'NOT ARRAY!');
    console.log('üö® participants[0]:', Array.isArray(participants) && participants[0] ? participants[0] : 'UNDEFINED');
    console.log('üö® thirdPlaceMatch:', thirdPlaceMatch, '(type:', typeof thirdPlaceMatch, ')');
    
    if (!Array.isArray(participants)) {
        console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: participants –ù–ï –Ø–í–õ–Ø–ï–¢–°–Ø –ú–ê–°–°–ò–í–û–ú!');
        console.error('üö® –ó–Ω–∞—á–µ–Ω–∏–µ participants:', participants);
        throw new Error(`participants –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º, –ø–æ–ª—É—á–µ–Ω: ${typeof participants}`);
    }
    
    console.log(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏: —Ñ–æ—Ä–º–∞—Ç=${format}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤=${participants.length}, –º–∞—Ç—á –∑–∞ 3-–µ –º–µ—Å—Ç–æ=${thirdPlaceMatch}`);
    
    switch (format.toLowerCase()) {
        case 'mix':
        case 'single_elimination':
            return await generateSingleEliminationBracket(tournamentId, participants, thirdPlaceMatch);
        case 'double_elimination':
            return await generateDoubleEliminationBracket(tournamentId, participants, thirdPlaceMatch);
        default:
            throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞: ${format}`);
    }
};

module.exports = {
    generateBracket
};