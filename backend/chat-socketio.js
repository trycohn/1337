const jwt = require('jsonwebtoken');
const pool = require('./db');

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const MAX_RECONNECT_ATTEMPTS = 3;
// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const RECONNECT_DELAY = 2000;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î —Å –∑–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–ø—ã—Ç–æ–∫
async function retryQuery(queryFn, maxAttempts = MAX_RECONNECT_ATTEMPTS, delay = RECONNECT_DELAY) {
  let lastError;
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      return await queryFn();
    } catch (err) {
      lastError = err;
      console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err.message);
      if (attempt < maxAttempts) {
        console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay/1000} —Å–µ–∫...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  throw lastError; // –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π Socket.IO –¥–ª—è —á–∞—Ç–∞
function setupChatSocketIO(io) {
  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É JWT –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  io.use((socket, next) => {
    const token = socket.handshake.query.token;
    if (!token) {
      return next(new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'));
    }
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      socket.userId = decoded.id;
      next();
    } catch (err) {
      return next(new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'));
    }
  });

  io.on('connection', socket => {
    console.log('üéâ [SOCKETIO-CHAT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É:', {
      userId: socket.userId,
      socketId: socket.id,
      connectTime: new Date().toISOString(),
      transport: socket.conn?.transport?.name,
      clientIP: socket.handshake?.address
    });

    // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–∞–º
    let roomsJoined = false;

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞
    socket.on('join_tournament_chat', (tournamentId) => {
      socket.join(`chat_tournament_${tournamentId}`);
      console.log(`üèÜ [SOCKETIO-CHAT] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É:`, {
        userId: socket.userId,
        socketId: socket.id,
        tournamentId: tournamentId,
        room: `chat_tournament_${tournamentId}`,
        timestamp: new Date().toISOString()
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞
    socket.on('join_chat', (chatId) => {
      socket.join(`chat_${chatId}`);
      console.log(`üí¨ [SOCKETIO-CHAT] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É:`, {
        userId: socket.userId,
        socketId: socket.id,
        chatId: chatId,
        room: `chat_${chatId}`,
        timestamp: new Date().toISOString()
      });
    });

    const userId = socket.userId;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–Ω–∞—Ç–∞–º —á–∞—Ç–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    const joinUserChatRooms = async () => {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —á–∞—Ç–æ–≤
        const result = await retryQuery(() => 
          pool.query('SELECT chat_id FROM chat_participants WHERE user_id = $1', [userId])
        );
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç–µ
        result.rows.forEach(row => {
          socket.join(`chat_${row.chat_id}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        const systemChatResult = await retryQuery(() => 
          pool.query(`
            SELECT c.id 
            FROM chats c
            JOIN chat_participants cp ON c.id = cp.chat_id
            WHERE c.name = $1 AND cp.user_id = $2 AND c.type = 'system'
            LIMIT 1`, 
            ['1337community', userId]
          )
        );
        
        // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–µ–º—É
        if (systemChatResult.rows.length > 0) {
          const systemChatId = systemChatResult.rows[0].id;
          socket.join(`chat_${systemChatId}`);
          console.log(`üí¨ [SOCKETIO-CHAT] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É —á–∞—Ç—É:`, {
            userId: userId,
            socketId: socket.id,
            systemChatId: systemChatId,
            room: `chat_${systemChatId}`,
            timestamp: new Date().toISOString()
          });
        } else {
          console.log(`‚ö†Ô∏è [SOCKETIO-CHAT] –°–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:`, {
            userId: userId,
            socketId: socket.id,
            timestamp: new Date().toISOString()
          });
        }
        
        roomsJoined = true;
        return true;
      } catch (err) {
        console.error('‚ùå [SOCKETIO-CHAT] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–∞–º —á–∞—Ç–æ–≤:', {
          userId: userId,
          socketId: socket.id,
          error: err.message,
          stack: err.stack,
          timestamp: new Date().toISOString()
        });
        socket.emit('chat_connection_error', {
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —á–∞—Ç–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        });
        return false;
      }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const ensureRoomsJoined = async () => {
      if (!roomsJoined) {
        return await joinUserChatRooms();
      }
      return true;
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–∞–º
    joinUserChatRooms().catch(err => {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–∞–º —á–∞—Ç–æ–≤:', err);
    });

    // –°–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    socket.on('reconnect_chat_rooms', async () => {
      console.log(`üîÑ [SOCKETIO-CHAT] –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:`, {
        userId: userId,
        socketId: socket.id,
        timestamp: new Date().toISOString()
      });
      try {
        await joinUserChatRooms();
        socket.emit('rooms_reconnected', { success: true });
        console.log(`‚úÖ [SOCKETIO-CHAT] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:`, {
          userId: userId,
          socketId: socket.id,
          timestamp: new Date().toISOString()
        });
      } catch (err) {
        console.error('‚ùå [SOCKETIO-CHAT] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', {
          userId: userId,
          socketId: socket.id,
          error: err.message,
          stack: err.stack,
          timestamp: new Date().toISOString()
        });
        socket.emit('rooms_reconnected', { 
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–∞–º —á–∞—Ç–æ–≤'
        });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç
    socket.on('message', async payload => {
      console.log('üìù [SOCKETIO-CHAT] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
        userId: socket.userId,
        socketId: socket.id,
        payload: payload,
        timestamp: new Date().toISOString()
      });
      const { chat_id } = payload;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!(await ensureRoomsJoined())) {
        socket.emit('message_error', { 
          error: '–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —á–∞—Ç–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.' 
        });
        return;
      }
      
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—ë–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
      socket.join(`chat_${chat_id}`);
      const { chat_id: id, content, message_type = 'text' } = payload;
      if (!id || !content) return;
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        const participantCheck = await retryQuery(() => 
          pool.query(
            'SELECT * FROM chat_participants WHERE chat_id = $1 AND user_id = $2',
            [chat_id, socket.userId]
          )
        );
        
        if (participantCheck.rows.length === 0) {
          socket.emit('message_error', { error: '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞' });
          return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        const result = await retryQuery(() => 
          pool.query(
            'INSERT INTO messages (chat_id, sender_id, content, message_type) VALUES ($1, $2, $3, $4) RETURNING *',
            [chat_id, socket.userId, content, message_type]
          )
        );
        
        const message = result.rows[0];

        // –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        const userInfo = await retryQuery(() => 
          pool.query(
            'SELECT username, avatar_url FROM users WHERE id = $1',
            [socket.userId]
          )
        );
        
        message.sender_username = userInfo.rows[0].username;
        message.sender_avatar = userInfo.rows[0].avatar_url;

        // –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞
        io.to(`chat_${chat_id}`).emit('message', message);
        console.log('üì§ [SOCKETIO-CHAT] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
          userId: socket.userId,
          socketId: socket.id,
          chatId: chat_id,
          room: `chat_${chat_id}`,
          messageId: message.id,
          messageType: message.message_type,
          timestamp: new Date().toISOString()
        });
      } catch (err) {
        console.error('‚ùå [SOCKETIO-CHAT] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
          userId: socket.userId,
          socketId: socket.id,
          chatId: payload.chat_id,
          error: err.message,
          stack: err.stack,
          timestamp: new Date().toISOString()
        });
        socket.emit('message_error', { 
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' 
        });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    socket.on('tournament_message', async payload => {
      console.log('Socket.IO: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ tournament_message –æ—Ç userId =', socket.userId, 'payload =', payload);
      const { tournamentId, content } = payload;
      if (!tournamentId || !content) return;
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        const result = await pool.query(
          'INSERT INTO tournament_messages (tournament_id, sender_id, content) VALUES ($1, $2, $3) RETURNING *',
          [tournamentId, socket.userId, content]
        );
        const message = result.rows[0];
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        const userInfo = await pool.query(
          'SELECT username, avatar_url FROM users WHERE id = $1',
          [socket.userId]
        );
        message.sender_username = userInfo.rows[0].username;
        message.sender_avatar = userInfo.rows[0].avatar_url;
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        io.to(`chat_tournament_${tournamentId}`).emit('tournament_message', message);
        console.log('Socket.IO: —Å–æ–±—ã—Ç–∏–µ tournament_message –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ room', `chat_tournament_${tournamentId}`, message);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', err);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('read_status', async payload => {
      const { message_id } = payload;
      if (!message_id) return;
      try {
        // –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        const msgRes = await pool.query(
          'SELECT chat_id, sender_id FROM messages WHERE id = $1',
          [message_id]
        );
        if (msgRes.rows.length === 0) return;

        const { chat_id, sender_id } = msgRes.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞
        const participantCheck = await pool.query(
          'SELECT * FROM chat_participants WHERE chat_id = $1 AND user_id = $2',
          [chat_id, userId]
        );
        if (participantCheck.rows.length === 0) return;

        // –û–±–Ω–æ–≤–ª—è—é –∏–ª–∏ —Å–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        let readAt;
        const client = await pool.connect();
        try {
          await client.query('BEGIN');
          const updateRes = await client.query(
            'UPDATE message_status SET is_read = TRUE, read_at = CURRENT_TIMESTAMP WHERE message_id = $1 AND user_id = $2 RETURNING read_at',
            [message_id, userId]
          );
          if (updateRes.rows.length > 0) {
            readAt = updateRes.rows[0].read_at;
          } else {
            const insertRes = await client.query(
              'INSERT INTO message_status (message_id, user_id, is_read, read_at) VALUES ($1, $2, TRUE, CURRENT_TIMESTAMP) RETURNING read_at',
              [message_id, userId]
            );
            readAt = insertRes.rows[0].read_at;
          }
          await client.query('COMMIT');
        } catch (error) {
          await client.query('ROLLBACK');
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è:', error);
        } finally {
          client.release();
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
        io.to(`chat_${chat_id}`).emit('read_status', {
          message_id,
          chat_id,
          user_id: userId,
          is_read: true,
          read_at: readAt
        });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è:', err);
      }
    });
  });
}

module.exports = { setupChatSocketIO }; 