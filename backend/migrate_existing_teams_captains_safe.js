const pool = require('./db');

/**
 * üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–ö–†–ò–ü–¢ –ú–ò–ì–†–ê–¶–ò–ò: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
 * 
 * v2.0 - –û–±–Ω–æ–≤–ª–µ–Ω —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
 */

async function migrateExistingTeamsCaptainsSafe() {
    const startTime = Date.now();
    console.log(`üöÄ [SAFE MIGRATION v2.0] –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π —Ä—É—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...`);
    
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
        const columnsCheck = await client.query(`
            SELECT 
                column_name,
                data_type,
                is_nullable,
                column_default
            FROM information_schema.columns 
            WHERE table_name = 'tournament_team_members' 
            AND column_name IN ('is_captain', 'captain_rating')
            ORDER BY column_name
        `);
        
        if (columnsCheck.rows.length !== 2) {
            throw new Error('–ö–æ–ª–æ–Ω–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é.');
        }
        
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω—ã:', columnsCheck.rows);
        
        // 2. –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const teamsWithoutCaptains = await client.query(`
            SELECT DISTINCT 
                tt.id as team_id, 
                tt.tournament_id, 
                tt.name as team_name,
                t.name as tournament_name,
                t.mix_rating_type,
                COUNT(ttm.id) as members_count
            FROM tournament_teams tt
            LEFT JOIN tournaments t ON tt.tournament_id = t.id
            LEFT JOIN tournament_team_members ttm ON tt.id = ttm.team_id
            WHERE NOT EXISTS (
                SELECT 1 FROM tournament_team_members captain 
                WHERE captain.team_id = tt.id 
                AND captain.is_captain = TRUE
            )
            GROUP BY tt.id, tt.tournament_id, tt.name, t.name, t.mix_rating_type
            HAVING COUNT(ttm.id) > 0
            ORDER BY tt.tournament_id, tt.id
        `);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –±–µ–∑ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤: ${teamsWithoutCaptains.rows.length}`);
        
        if (teamsWithoutCaptains.rows.length === 0) {
            await client.query('COMMIT');
            console.log('üéâ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –∏–º–µ—é—Ç –∫–∞–ø–∏—Ç–∞–Ω–æ–≤!');
            return;
        }
        
        let assignedCaptains = 0;
        let captainsWithManualRatings = 0;
        const migrationResults = [];
        
        // 3. –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
        for (const team of teamsWithoutCaptains.rows) {
            console.log(`\nüëë –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${team.team_id}: "${team.team_name}" (—Ç—É—Ä–Ω–∏—Ä: "${team.tournament_name}")`);
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Å –ü–û–õ–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
            const members = await client.query(`
                SELECT 
                    ttm.id,
                    ttm.user_id,
                    ttm.participant_id,
                    u.username,
                    tp.name as participant_name,
                    -- üÜï –†–£–ß–ù–´–ï –†–ï–ô–¢–ò–ù–ì–ò –£–ß–ê–°–¢–ù–ò–ö–ê (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                    tp.faceit_elo,
                    tp.cs2_premier_rank,
                    -- üÜï –†–ï–ô–¢–ò–ù–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (—Ä–µ–∑–µ—Ä–≤)
                    u.faceit_elo as user_faceit_elo,
                    u.cs2_premier_rank as user_cs2_premier_rank,
                    -- üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
                    tp.faceit_rating,
                    tp.premier_rank,
                    tp.premier_rating,
                    u.faceit_rating as user_faceit_rating,
                    u.premier_rating as user_premier_rating
                FROM tournament_team_members ttm
                LEFT JOIN users u ON ttm.user_id = u.id  
                LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
                WHERE ttm.team_id = $1
                ORDER BY ttm.id
            `, [team.team_id]);
            
            if (members.rows.length === 0) {
                console.log('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                continue;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é faceit)
            const ratingType = team.mix_rating_type || 'faceit';
            console.log(`üìä –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç—É—Ä–Ω–∏—Ä–∞: ${ratingType}`);
            
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π —Ä—É—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            let bestMember = null;
            let bestRating = -1;
            let bestMemberUsedManualRating = false;
            
            console.log(`üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${members.rows.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã:`);
            
            for (const member of members.rows) {
                let rating = 0;
                let usedManualRating = false;
                let ratingSource = '';
                
                if (ratingType === 'faceit') {
                    // üÜï –ü–†–ò–û–†–ò–¢–ï–¢: —Ä—É—á–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Üí —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –ø–æ–ª—è ‚Üí –¥–µ—Ñ–æ–ª—Ç
                    if (member.faceit_elo && !isNaN(parseInt(member.faceit_elo)) && parseInt(member.faceit_elo) > 0) {
                        rating = parseInt(member.faceit_elo);
                        usedManualRating = true;
                        ratingSource = '—Ä—É—á–Ω–æ–π (—É—á–∞—Å—Ç–Ω–∏–∫)';
                    } else if (member.user_faceit_elo && !isNaN(parseInt(member.user_faceit_elo)) && parseInt(member.user_faceit_elo) > 0) {
                        rating = parseInt(member.user_faceit_elo);
                        ratingSource = '–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
                    } else if (member.faceit_rating && !isNaN(parseInt(member.faceit_rating)) && parseInt(member.faceit_rating) > 0) {
                        rating = parseInt(member.faceit_rating);
                        ratingSource = '—Ä–µ–∑–µ—Ä–≤ (—É—á–∞—Å—Ç–Ω–∏–∫)';
                    } else if (member.user_faceit_rating && !isNaN(parseInt(member.user_faceit_rating)) && parseInt(member.user_faceit_rating) > 0) {
                        rating = parseInt(member.user_faceit_rating);
                        ratingSource = '—Ä–µ–∑–µ—Ä–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)';
                    } else {
                        rating = 1000; // –¥–µ—Ñ–æ–ª—Ç –¥–ª—è FACEIT
                        ratingSource = '–¥–µ—Ñ–æ–ª—Ç FACEIT';
                    }
                } else {
                    // üÜï –ü–†–ò–û–†–ò–¢–ï–¢: —Ä—É—á–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Üí —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –ø–æ–ª—è ‚Üí –¥–µ—Ñ–æ–ª—Ç
                    if (member.cs2_premier_rank && !isNaN(parseInt(member.cs2_premier_rank)) && parseInt(member.cs2_premier_rank) > 0) {
                        rating = parseInt(member.cs2_premier_rank);
                        usedManualRating = true;
                        ratingSource = '—Ä—É—á–Ω–æ–π (—É—á–∞—Å—Ç–Ω–∏–∫)';
                    } else if (member.user_cs2_premier_rank && !isNaN(parseInt(member.user_cs2_premier_rank)) && parseInt(member.user_cs2_premier_rank) > 0) {
                        rating = parseInt(member.user_cs2_premier_rank);
                        ratingSource = '–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
                    } else if (member.premier_rank && !isNaN(parseInt(member.premier_rank)) && parseInt(member.premier_rank) > 0) {
                        rating = parseInt(member.premier_rank);
                        ratingSource = '—Ä–µ–∑–µ—Ä–≤ (—É—á–∞—Å—Ç–Ω–∏–∫)';
                    } else if (member.premier_rating && !isNaN(parseInt(member.premier_rating)) && parseInt(member.premier_rating) > 0) {
                        rating = parseInt(member.premier_rating);
                        ratingSource = '—Ä–µ–∑–µ—Ä–≤ (—É—á–∞—Å—Ç–Ω–∏–∫ 2)';
                    } else if (member.user_premier_rating && !isNaN(parseInt(member.user_premier_rating)) && parseInt(member.user_premier_rating) > 0) {
                        rating = parseInt(member.user_premier_rating);
                        ratingSource = '—Ä–µ–∑–µ—Ä–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)';
                    } else {
                        rating = 5; // –¥–µ—Ñ–æ–ª—Ç –¥–ª—è Premier
                        ratingSource = '–¥–µ—Ñ–æ–ª—Ç Premier';
                    }
                }
                
                console.log(`   üë§ ${member.username}: —Ä–µ–π—Ç–∏–Ω–≥ ${rating} (${ratingSource}${usedManualRating ? ', —Ä—É—á–Ω–æ–π ‚úèÔ∏è' : ''})`);
                
                if (rating > bestRating) {
                    bestRating = rating;
                    bestMember = member;
                    bestMemberUsedManualRating = usedManualRating;
                }
            }
            
            if (bestMember) {
                // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞ –ü–†–û–°–¢–´–ú UPDATE (–±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤)
                await client.query(`
                    UPDATE tournament_team_members 
                    SET 
                        is_captain = TRUE,
                        captain_rating = $1
                    WHERE id = $2
                `, [bestRating, bestMember.id]);
                
                assignedCaptains++;
                if (bestMemberUsedManualRating) {
                    captainsWithManualRatings++;
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                migrationResults.push({
                    team_id: team.team_id,
                    team_name: team.team_name,
                    tournament_name: team.tournament_name,
                    captain_username: bestMember.username,
                    captain_rating: bestRating,
                    manual_rating_used: bestMemberUsedManualRating,
                    rating_type: ratingType
                });
                
                console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –∫–∞–ø–∏—Ç–∞–Ω: ${bestMember.username} (—Ä–µ–π—Ç–∏–Ω–≥: ${bestRating}${bestMemberUsedManualRating ? ', —Ä—É—á–Ω–æ–π ‚úèÔ∏è' : ''})`);
            } else {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞');
            }
        }
        
        await client.query('COMMIT');
        
        const duration = Date.now() - startTime;
        console.log(`\nüéâ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø v2.0 –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ ${duration}ms:`);
        console.log(`   üëë –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤: ${assignedCaptains}`);
        console.log(`   ‚úèÔ∏è –ö–∞–ø–∏—Ç–∞–Ω–æ–≤ —Å —Ä—É—á–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏: ${captainsWithManualRatings} (${Math.round((captainsWithManualRatings / assignedCaptains) * 100)}%)`);
        console.log(`   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${teamsWithoutCaptains.rows.length}`);
        console.log(`   ‚úÖ –ë–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏`);
        
        // üÜï –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–£–†–ù–ò–†–ê–ú
        console.log(`\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–£–†–ù–ò–†–ê–ú:`);
        
        const tournamentStats = migrationResults.reduce((acc, result) => {
            const key = `${result.tournament_name} (${result.rating_type})`;
            if (!acc[key]) {
                acc[key] = {
                    total_captains: 0,
                    manual_ratings: 0,
                    teams: []
                };
            }
            acc[key].total_captains++;
            if (result.manual_rating_used) acc[key].manual_ratings++;
            acc[key].teams.push({
                team_name: result.team_name,
                captain: result.captain_username,
                rating: result.captain_rating,
                manual: result.manual_rating_used
            });
            return acc;
        }, {});
        
        Object.entries(tournamentStats).forEach(([tournamentName, stats]) => {
            console.log(`\nüèÜ ${tournamentName}:`);
            console.log(`   üëë –ö–∞–ø–∏—Ç–∞–Ω–æ–≤: ${stats.total_captains}`);
            console.log(`   ‚úèÔ∏è –° —Ä—É—á–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏: ${stats.manual_ratings} (${Math.round((stats.manual_ratings / stats.total_captains) * 100)}%)`);
            console.log(`   üìã –ö–æ–º–∞–Ω–¥—ã:`);
            
            stats.teams.forEach(team => {
                console.log(`      ‚Ä¢ ${team.team_name}: ${team.captain} (${team.rating}${team.manual ? ' ‚úèÔ∏è' : ''})`);
            });
        });
        
        console.log(`\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–ò –†–£–ß–ù–´–• –†–ï–ô–¢–ò–ù–ì–û–í:`);
        console.log(`   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏: ${Math.round((assignedCaptains / teamsWithoutCaptains.rows.length) * 100)}%`);
        console.log(`   ‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä—É—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: ${Math.round((captainsWithManualRatings / assignedCaptains) * 100)}%`);
        console.log(`   üéÆ –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏!`);
        
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        throw error;
    } finally {
        client.release();
    }
}

// –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
    migrateExistingTeamsCaptainsSafe()
        .then(() => {
            console.log('üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ v2.0 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { migrateExistingTeamsCaptainsSafe }; 