const pool = require('./db');

/**
 * üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–ö–†–ò–ü–¢ –ú–ò–ì–†–ê–¶–ò–ò: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
 * 
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
 */

async function migrateExistingTeamsCaptainsSafe() {
    const startTime = Date.now();
    console.log(`üöÄ [SAFE MIGRATION] –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤...`);
    
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
        const columnsCheck = await client.query(`
            SELECT 
                column_name,
                data_type,
                is_nullable,
                column_default
            FROM information_schema.columns 
            WHERE table_name = 'tournament_team_members' 
            AND column_name IN ('is_captain', 'captain_rating')
            ORDER BY column_name
        `);
        
        if (columnsCheck.rows.length !== 2) {
            throw new Error('–ö–æ–ª–æ–Ω–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é.');
        }
        
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω—ã:', columnsCheck.rows);
        
        // 2. –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
        const teamsWithoutCaptains = await client.query(`
            SELECT DISTINCT 
                tt.id as team_id, 
                tt.tournament_id, 
                tt.name as team_name,
                t.mix_rating_type,
                COUNT(ttm.id) as members_count
            FROM tournament_teams tt
            LEFT JOIN tournaments t ON tt.tournament_id = t.id
            LEFT JOIN tournament_team_members ttm ON tt.id = ttm.team_id
            WHERE NOT EXISTS (
                SELECT 1 FROM tournament_team_members captain 
                WHERE captain.team_id = tt.id 
                AND captain.is_captain = TRUE
            )
            GROUP BY tt.id, tt.tournament_id, tt.name, t.mix_rating_type
            HAVING COUNT(ttm.id) > 0
            ORDER BY tt.id
        `);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –±–µ–∑ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤: ${teamsWithoutCaptains.rows.length}`);
        
        if (teamsWithoutCaptains.rows.length === 0) {
            await client.query('COMMIT');
            console.log('üéâ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –∏–º–µ—é—Ç –∫–∞–ø–∏—Ç–∞–Ω–æ–≤!');
            return;
        }
        
        let assignedCaptains = 0;
        
        // 3. –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
        for (const team of teamsWithoutCaptains.rows) {
            console.log(`\nüëë –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${team.team_id}: "${team.team_name}"`);
            
            // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
            const members = await client.query(`
                SELECT 
                    ttm.id,
                    ttm.user_id,
                    ttm.participant_id,
                    u.username,
                    u.faceit_elo,
                    u.cs2_premier_rank,
                    tp.faceit_elo as participant_faceit_elo,
                    tp.cs2_premier_rank as participant_premier_rank
                FROM tournament_team_members ttm
                LEFT JOIN users u ON ttm.user_id = u.id  
                LEFT JOIN tournament_participants tp ON ttm.participant_id = tp.id
                WHERE ttm.team_id = $1
                ORDER BY ttm.id
            `, [team.team_id]);
            
            if (members.rows.length === 0) {
                console.log('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                continue;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é faceit)
            const ratingType = team.mix_rating_type || 'faceit';
            
            // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            let bestMember = null;
            let bestRating = -1;
            
            for (const member of members.rows) {
                let rating = 0;
                
                if (ratingType === 'faceit') {
                    rating = parseInt(member.participant_faceit_elo) || 
                            parseInt(member.faceit_elo) || 
                            1000;
                } else {
                    rating = parseInt(member.participant_premier_rank) || 
                            parseInt(member.cs2_premier_rank) || 
                            5;
                }
                
                if (rating > bestRating) {
                    bestRating = rating;
                    bestMember = member;
                }
            }
            
            if (bestMember) {
                // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞ –ü–†–û–°–¢–´–ú UPDATE (–±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤)
                await client.query(`
                    UPDATE tournament_team_members 
                    SET 
                        is_captain = TRUE,
                        captain_rating = $1
                    WHERE id = $2
                `, [bestRating, bestMember.id]);
                
                assignedCaptains++;
                console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –∫–∞–ø–∏—Ç–∞–Ω: ${bestMember.username} (—Ä–µ–π—Ç–∏–Ω–≥: ${bestRating})`);
            } else {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞');
            }
        }
        
        await client.query('COMMIT');
        
        const duration = Date.now() - startTime;
        console.log(`\nüéâ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ ${duration}ms:`);
        console.log(`   üëë –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤: ${assignedCaptains}`);
        console.log(`   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${teamsWithoutCaptains.rows.length}`);
        console.log(`   ‚úÖ –ë–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏`);
        
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        throw error;
    } finally {
        client.release();
    }
}

// –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
    migrateExistingTeamsCaptainsSafe()
        .then(() => {
            console.log('üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { migrateExistingTeamsCaptainsSafe }; 