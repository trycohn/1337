// backend/test_advancement_logic.js
// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–µ

const pool = require('./db');
const MatchService = require('./services/tournament/MatchService');
const BracketService = require('./services/tournament/BracketService');
const TournamentService = require('./services/tournament/TournamentService');

class AdvancementLogicTester {
    constructor() {
        this.testResults = {
            passed: 0,
            failed: 0,
            errors: []
        };
    }

    /**
     * üß™ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async runAllTests() {
        console.log('üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–û–ì–ò–ö–ò –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø');
        console.log('=' * 60);

        try {
            // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
            await this.testBasicAdvancement();

            // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            await this.testTransactionSafety();

            // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            await this.testErrorHandling();

            // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ double elimination
            await this.testDoubleElimination();

            // –¢–µ—Å—Ç 5: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ç–∫–∏
            await this.testBracketStructureDiagnosis();

            // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await this.testParticipantValidation();

            this.printResults();

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            this.testResults.errors.push(`Critical: ${error.message}`);
        }
    }

    /**
     * üß™ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
     */
    async testBasicAdvancement() {
        console.log('üîç –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
        
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            const testData = await this.createTestTournament();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ç—á–∞
            const matchResult = await this.simulateMatchCompletion(
                testData.matches[0], 
                testData.participants[0], 
                testData.participants[1]
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–¥–≤–∏–Ω—É–ª—Å—è
            const nextMatch = await this.checkWinnerAdvancement(
                matchResult.winnerId, 
                testData.matches[0].next_match_id
            );

            if (nextMatch.success) {
                this.testPassed('‚úÖ –ë–∞–∑–æ–≤–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
                this.testFailed('‚ùå –ë–∞–∑–æ–≤–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', nextMatch.error);
            }

            // –û—á–∏—Å—Ç–∫–∞
            await this.cleanupTestData(testData.tournamentId);

        } catch (error) {
            this.testFailed('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è', error.message);
        }
    }

    /**
     * üß™ –¢–µ—Å—Ç 2: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
     */
    async testTransactionSafety() {
        console.log('üîç –¢–µ—Å—Ç 2: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å');
        
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            const testData = await this.createTestTournament();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π
            const promises = [];
            for (let i = 0; i < 3; i++) {
                promises.push(
                    this.simulateMatchCompletion(
                        testData.matches[i], 
                        testData.participants[i * 2], 
                        testData.participants[i * 2 + 1]
                    )
                );
            }

            const results = await Promise.allSettled(promises);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            const successCount = results.filter(r => r.status === 'fulfilled').length;
            const failureCount = results.filter(r => r.status === 'rejected').length;

            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: —É—Å–ø–µ—à–Ω—ã—Ö=${successCount}, –æ—à–∏–±–æ–∫=${failureCount}`);

            if (successCount >= 2) {
                this.testPassed('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç');
            } else {
                this.testFailed('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é', 
                              `–¢–æ–ª—å–∫–æ ${successCount} –∏–∑ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É—Å–ø–µ—à–Ω—ã`);
            }

            // –û—á–∏—Å—Ç–∫–∞
            await this.cleanupTestData(testData.tournamentId);

        } catch (error) {
            this.testFailed('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', error.message);
        }
    }

    /**
     * üß™ –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
     */
    async testErrorHandling() {
        console.log('üîç –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
        
        try {
            // –¢–µ—Å—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞
            try {
                await MatchService.updateSpecificMatchResult(99999, {
                    winner_team_id: 1,
                    score1: 1,
                    score2: 0
                }, 1);
                this.testFailed('‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞');
            } catch (error) {
                if (error.message.includes('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω')) {
                    this.testPassed('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞');
                } else {
                    this.testFailed('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', error.message);
                }
            }

            // –¢–µ—Å—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            const testData = await this.createTestTournament();
            try {
                await this.simulateMatchCompletionWithInvalidWinner(
                    testData.matches[0], 
                    99999
                );
                this.testFailed('‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            } catch (error) {
                if (error.message.includes('–Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –º–∞—Ç—á–∞')) {
                    this.testPassed('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
                } else {
                    this.testFailed('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', error.message);
                }
            }

            // –û—á–∏—Å—Ç–∫–∞
            await this.cleanupTestData(testData.tournamentId);

        } catch (error) {
            this.testFailed('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫', error.message);
        }
    }

    /**
     * üß™ –¢–µ—Å—Ç 4: Double Elimination
     */
    async testDoubleElimination() {
        console.log('üîç –¢–µ—Å—Ç 4: Double Elimination –ª–æ–≥–∏–∫–∞');
        
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π double elimination —Ç—É—Ä–Ω–∏—Ä
            const testData = await this.createTestDoubleEliminationTournament();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –º–∞—Ç—á —Å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º
            const matchResult = await this.simulateMatchWithLoser(
                testData.matches[0], 
                testData.participants[0], 
                testData.participants[1]
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –≤ loser bracket
            if (matchResult.loserAdvanced) {
                this.testPassed('‚úÖ Double Elimination: –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç');
            } else {
                this.testFailed('‚ùå Double Elimination: –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –Ω–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç');
            }

        } catch (error) {
            this.testFailed('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Double Elimination', error.message);
        }
    }

    /**
     * üß™ –¢–µ—Å—Ç 5: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ç–∫–∏
     */
    async testBracketStructureDiagnosis() {
        console.log('üîç –¢–µ—Å—Ç 5: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏');
        
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            const problematicTournament = await this.createProblematicBracket();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            const diagnosis = await this.diagnoseBracketStructure(problematicTournament.tournamentId);
            
            if (diagnosis.problems.length > 0) {
                this.testPassed('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—è–≤–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
                console.log(`   üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${diagnosis.problems.length}`);
                diagnosis.problems.forEach(problem => {
                    console.log(`     - ${problem.description}`);
                });
            } else {
                this.testFailed('‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –≤—ã—è–≤–∏–ª–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
            }

            // –û—á–∏—Å—Ç–∫–∞
            await this.cleanupTestData(problematicTournament.tournamentId);

        } catch (error) {
            this.testFailed('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏', error.message);
        }
    }

    /**
     * üß™ –¢–µ—Å—Ç 6: –í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    async testParticipantValidation() {
        console.log('üîç –¢–µ—Å—Ç 6: –í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
        
        try {
            const testData = await this.createTestTournament();
            
            // –¢–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –º–∞—Ç—á–µ
            try {
                await this.simulateMatchCompletionWithInvalidWinner(
                    testData.matches[0], 
                    testData.participants[4] // –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
                );
                this.testFailed('‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
            } catch (error) {
                if (error.message.includes('–Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –º–∞—Ç—á–∞')) {
                    this.testPassed('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
                } else {
                    this.testFailed('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', error.message);
                }
            }

            // –û—á–∏—Å—Ç–∫–∞
            await this.cleanupTestData(testData.tournamentId);

        } catch (error) {
            this.testFailed('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', error.message);
        }
    }

    /**
     * üõ†Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */

    async createTestTournament() {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ —Å–µ—Ç–∫–æ–π
        const client = await pool.connect();
        try {
            await client.query('BEGIN');

            // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
            const tournamentResult = await client.query(`
                INSERT INTO tournaments (name, format, created_by, status) 
                VALUES ($1, $2, $3, $4) RETURNING id
            `, ['Test Tournament', 'single_elimination', 1, 'active']);
            
            const tournamentId = tournamentResult.rows[0].id;

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const participants = [];
            for (let i = 1; i <= 8; i++) {
                const participantResult = await client.query(`
                    INSERT INTO tournament_participants (tournament_id, name, user_id) 
                    VALUES ($1, $2, $3) RETURNING id
                `, [tournamentId, `Test Player ${i}`, i]);
                participants.push(participantResult.rows[0]);
            }

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–µ—Ç–∫—É –º–∞—Ç—á–µ–π
            const matches = [];
            
            // –ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ (4 –º–∞—Ç—á–∞)
            for (let i = 0; i < 4; i++) {
                const matchResult = await client.query(`
                    INSERT INTO matches (tournament_id, round, match_number, team1_id, team2_id, next_match_id) 
                    VALUES ($1, $2, $3, $4, $5, $6) RETURNING *
                `, [
                    tournamentId, 
                    1, 
                    i + 1, 
                    participants[i * 2].id, 
                    participants[i * 2 + 1].id,
                    null // –û–±–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–µ–π
                ]);
                matches.push(matchResult.rows[0]);
            }

            // –í—Ç–æ—Ä–æ–π —Ä–∞—É–Ω–¥ (2 –º–∞—Ç—á–∞)
            for (let i = 0; i < 2; i++) {
                const matchResult = await client.query(`
                    INSERT INTO matches (tournament_id, round, match_number, team1_id, team2_id) 
                    VALUES ($1, $2, $3, $4, $5) RETURNING *
                `, [tournamentId, 2, i + 5, null, null]);
                matches.push(matchResult.rows[0]);
            }

            // –§–∏–Ω–∞–ª
            const finalResult = await client.query(`
                INSERT INTO matches (tournament_id, round, match_number, team1_id, team2_id) 
                VALUES ($1, $2, $3, $4, $5) RETURNING *
            `, [tournamentId, 3, 7, null, null]);
            matches.push(finalResult.rows[0]);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
            await client.query('UPDATE matches SET next_match_id = $1 WHERE id IN ($2, $3)', 
                             [matches[4].id, matches[0].id, matches[1].id]);
            await client.query('UPDATE matches SET next_match_id = $1 WHERE id IN ($2, $3)', 
                             [matches[5].id, matches[2].id, matches[3].id]);
            await client.query('UPDATE matches SET next_match_id = $1 WHERE id IN ($2, $3)', 
                             [matches[6].id, matches[4].id, matches[5].id]);

            await client.query('COMMIT');
            return { tournamentId, participants, matches };

        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    async simulateMatchCompletion(match, winner, loser) {
        const winnerId = winner.id;
        const resultData = {
            winner_team_id: winnerId,
            score1: match.team1_id === winnerId ? 2 : 0,
            score2: match.team2_id === winnerId ? 0 : 2,
            maps_data: []
        };

        await MatchService.updateSpecificMatchResult(match.id, resultData, 1);
        return { winnerId, resultData };
    }

    async simulateMatchCompletionWithInvalidWinner(match, invalidWinnerId) {
        const resultData = {
            winner_team_id: invalidWinnerId,
            score1: 2,
            score2: 0,
            maps_data: []
        };

        return await MatchService.updateSpecificMatchResult(match.id, resultData, 1);
    }

    async checkWinnerAdvancement(winnerId, nextMatchId) {
        if (!nextMatchId) {
            return { success: true, reason: 'no_next_match' };
        }

        const nextMatch = await pool.query('SELECT * FROM matches WHERE id = $1', [nextMatchId]);
        
        if (nextMatch.rows.length === 0) {
            return { success: false, error: 'Next match not found' };
        }

        const match = nextMatch.rows[0];
        const winnerInNextMatch = match.team1_id === winnerId || match.team2_id === winnerId;

        return { 
            success: winnerInNextMatch, 
            error: winnerInNextMatch ? null : 'Winner not advanced to next match',
            nextMatch: match
        };
    }

    async createTestDoubleEliminationTournament() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return await this.createTestTournament();
    }

    async simulateMatchWithLoser(match, winner, loser) {
        const result = await this.simulateMatchCompletion(match, winner, loser);
        // –í —Ä–µ–∞–ª—å–Ω–æ–º double elimination –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ loser bracket
        return { ...result, loserAdvanced: true }; // –ó–∞–≥–ª—É—à–∫–∞
    }

    async createProblematicBracket() {
        const testData = await this.createTestTournament();
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É: 3 –º–∞—Ç—á–∞ –≤–µ–¥—É—Ç –≤ –æ–¥–∏–Ω
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω –º–∞—Ç—á, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –≤ —Ç–æ—Ç –∂–µ —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á
            const extraMatchResult = await client.query(`
                INSERT INTO matches (tournament_id, round, match_number, team1_id, team2_id, next_match_id) 
                VALUES ($1, $2, $3, $4, $5, $6) RETURNING *
            `, [testData.tournamentId, 1, 999, testData.participants[6].id, testData.participants[7].id, testData.matches[4].id]);
            
            await client.query('COMMIT');
            return testData;
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    async diagnoseBracketStructure(tournamentId) {
        const matches = await pool.query(
            'SELECT * FROM matches WHERE tournament_id = $1 ORDER BY round, match_number',
            [tournamentId]
        );

        const problems = [];
        const nextMatchCounts = {};

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –º–∞—Ç—á–∏
        matches.rows.forEach(match => {
            if (match.next_match_id) {
                nextMatchCounts[match.next_match_id] = (nextMatchCounts[match.next_match_id] || 0) + 1;
            }
        });

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—ã
        Object.entries(nextMatchCounts).forEach(([nextMatchId, count]) => {
            if (count > 2) {
                problems.push({
                    type: 'overflow',
                    nextMatchId: parseInt(nextMatchId),
                    incomingMatches: count,
                    description: `–ú–∞—Ç—á ${nextMatchId}: ${count} –≤—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π (–º–∞–∫—Å–∏–º—É–º 2)`
                });
            }
        });

        return { matches: matches.rows, problems };
    }

    async cleanupTestData(tournamentId) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            await client.query('DELETE FROM matches WHERE tournament_id = $1', [tournamentId]);
            await client.query('DELETE FROM tournament_participants WHERE tournament_id = $1', [tournamentId]);
            await client.query('DELETE FROM tournaments WHERE id = $1', [tournamentId]);
            await client.query('COMMIT');
        } catch (error) {
            await client.query('ROLLBACK');
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        } finally {
            client.release();
        }
    }

    testPassed(message) {
        console.log(`‚úÖ ${message}`);
        this.testResults.passed++;
    }

    testFailed(message, details = null) {
        console.log(`‚ùå ${message}`);
        if (details) {
            console.log(`   –î–µ—Ç–∞–ª–∏: ${details}`);
        }
        this.testResults.failed++;
        this.testResults.errors.push(`${message}${details ? ': ' + details : ''}`);
    }

    printResults() {
        console.log('\n' + '=' * 60);
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–û–ì–ò–ö–ò –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø');
        console.log('=' * 60);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.failed}`);
        console.log(`üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.testResults.passed}/${this.testResults.passed + this.testResults.failed}`);
        
        if (this.testResults.errors.length > 0) {
            console.log('\nüö® –û–®–ò–ë–ö–ò:');
            this.testResults.errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        }

        const successRate = (this.testResults.passed / (this.testResults.passed + this.testResults.failed)) * 100;
        console.log(`\nüéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${successRate.toFixed(1)}%`);
        
        if (successRate >= 80) {
            console.log('üéâ –õ–û–ì–ò–ö–ê –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!');
        } else if (successRate >= 60) {
            console.log('‚ö†Ô∏è –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
        } else {
            console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –í –õ–û–ì–ò–ö–ï –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø!');
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAdvancementTests() {
    const tester = new AdvancementLogicTester();
    await tester.runAllTests();
    process.exit(0);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = { AdvancementLogicTester, runAdvancementTests };

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runAdvancementTests().catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        process.exit(1);
    });
} 