// notifications.js

const pool = require('./db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const sendNotification = async (userId, notification) => {
  try {
    const app = global.app || require('./server');
    const io = app.get('io');
    if (!io) {
      console.error('‚ùå socket.io instance not found');
      return;
    }
    io.to(`user_${userId}`).emit('notification', notification);
    console.log(`üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, notification);

    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç
    const systemChatName = '1337community';
    try {
      const chatRes = await pool.query('SELECT id FROM chats WHERE name = $1', [systemChatName]);
      if (chatRes.rows.length > 0) {
        const systemChatId = chatRes.rows[0].id;
        
        // –î–æ–±–∞–≤–ª—è–µ–º notification_id –∏ type –≤ content_meta –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        const contentMeta = {
          notification_id: notification.id,
          type: notification.type,
          timestamp: new Date()
        };
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if (notification.tournament_id) {
          contentMeta.tournament_id = notification.tournament_id;
        }
        if (notification.requester_id) {
          contentMeta.requester_id = notification.requester_id;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID –∑–∞–ø—Ä–æ—Å–∞
        if (notification.type === 'friend_request') {
          try {
            const friendReqResult = await pool.query(
              `SELECT id FROM friends 
               WHERE user_id = $1 AND friend_id = $2 AND status = 'pending'`,
              [notification.requester_id, notification.user_id]
            );
            if (friendReqResult.rows.length > 0) {
              contentMeta.request_id = friendReqResult.rows[0].id;
            }
          } catch (err) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞—è–≤–∫–∏ –¥—Ä—É–∂–±—ã:', err);
          }
        }
        
        const msgRes = await pool.query(
          'INSERT INTO messages (chat_id, sender_id, content, message_type, content_meta) VALUES ($1, NULL, $2, $3, $4) RETURNING *',
          [systemChatId, notification.message, 'announcement', contentMeta]
        );
        const newMsg = msgRes.rows[0];
        io.to(`chat_${systemChatId}`).emit('message', newMsg);
        console.log(`üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${systemChatId}:`, newMsg);
      }
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç:', e);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Socket.IO:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
const broadcastNotification = (notification) => {
  try {
    const app = global.app || require('./server');
    const io = app.get('io');
    if (!io) {
      console.error('‚ùå socket.io instance not found');
      return;
    }
    io.emit('broadcast', notification);
    console.log(`üì¢ –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:`, notification);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Socket.IO:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞
const broadcastTournamentUpdate = (tournamentId, tournamentData) => {
  try {
    const app = global.app || require('./server');
    const io = app.get('io');
    if (!io) {
      console.error('‚ùå socket.io instance not found');
      return;
    }
    io.to(`tournament_${tournamentId}`).emit('tournament_update', tournamentData);
    console.log(`üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Socket.IO`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} —á–µ—Ä–µ–∑ Socket.IO:`, error);
  }
};

module.exports = { sendNotification, broadcastNotification, broadcastTournamentUpdate };