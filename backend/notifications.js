// notifications.js

const pool = require('./db');
const websocketMonitor = require('./utils/tournament/websocketMonitor');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const sendNotification = async (userId, notification) => {
  try {
    console.log(`üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, JSON.stringify(notification, null, 2));
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    const app = global.app;
    if (!app) {
      console.log(`‚ö†Ô∏è [sendNotification] Global app –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Socket.IO —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç
    } else {
      const io = app.get('io');
      if (!io) {
        console.log(`‚ö†Ô∏è [sendNotification] Socket.IO instance –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      } else {
        try {
          io.to(`user_${userId}`).emit('notification', notification);
          console.log(`üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} —á–µ—Ä–µ–∑ WebSocket`);
        } catch (socketError) {
          console.warn(`‚ö†Ô∏è [sendNotification] –û—à–∏–±–∫–∞ Socket.IO –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, socketError.message);
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (notification.user_id !== userId) {
        console.error(`‚ùå –û–®–ò–ë–ö–ê: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${userId}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (${notification.user_id})`);
        return;
      }

      // –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const systemChatName = '1337community';
      const chatRes = await pool.query(`
        SELECT c.id FROM chats c
        JOIN chat_participants cp ON c.id = cp.chat_id
        WHERE c.name = $1 AND cp.user_id = $2 AND c.type = 'system'
        LIMIT 1
      `, [systemChatName, userId]);
      
      if (chatRes.rows.length === 0) {
        console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.`);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const createChatRes = await pool.query(
          "INSERT INTO chats (name, type) VALUES ($1, 'system') RETURNING id",
          [systemChatName]
        );
        
        const systemChatId = createChatRes.rows[0].id;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await pool.query(
          `INSERT INTO chat_participants (chat_id, user_id, is_pinned)
           VALUES ($1, $2, true)`,
          [systemChatId, userId]
        );
        
        // –°—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π ID —á–∞—Ç–∞
        const contentMeta = {
          notification_id: notification.id,
          type: notification.type,
          timestamp: new Date()
        };
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if (notification.tournament_id) {
          contentMeta.tournament_id = notification.tournament_id;
        }
        if (notification.requester_id) {
          contentMeta.requester_id = notification.requester_id;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID –∑–∞–ø—Ä–æ—Å–∞
        if (notification.type === 'friend_request') {
          try {
            const friendReqResult = await pool.query(
              `SELECT id FROM friends 
               WHERE user_id = $1 AND friend_id = $2 AND status = 'pending'`,
              [notification.requester_id, notification.user_id]
            );
            if (friendReqResult.rows.length > 0) {
              contentMeta.request_id = friendReqResult.rows[0].id;
            }
          } catch (err) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞—è–≤–∫–∏ –¥—Ä—É–∂–±—ã:', err);
          }
        }
        
        const msgRes = await pool.query(
          'INSERT INTO messages (chat_id, sender_id, content, message_type, content_meta) VALUES ($1, NULL, $2, $3, $4) RETURNING *',
          [systemChatId, notification.message, 'announcement', contentMeta]
        );
        
        const newMsg = msgRes.rows[0];
        
        // üîß –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –í –ß–ê–¢
        if (app && app.get('io')) {
          try {
            app.get('io').to(`chat_${systemChatId}`).emit('message', newMsg);
          } catch (chatSocketError) {
            console.warn(`‚ö†Ô∏è [sendNotification] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${systemChatId}:`, chatSocketError.message);
          }
        }
        
        console.log(`üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç ${systemChatId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return;
      }
      
      const systemChatId = chatRes.rows[0].id;
      
      // –î–æ–±–∞–≤–ª—è–µ–º notification_id –∏ type –≤ content_meta –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      const contentMeta = {
        notification_id: notification.id,
        type: notification.type,
        timestamp: new Date()
      };
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
      if (notification.tournament_id) {
        contentMeta.tournament_id = notification.tournament_id;
      }
      if (notification.requester_id) {
        contentMeta.requester_id = notification.requester_id;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID –∑–∞–ø—Ä–æ—Å–∞
      if (notification.type === 'friend_request') {
        try {
          const friendReqResult = await pool.query(
            `SELECT id FROM friends 
             WHERE user_id = $1 AND friend_id = $2 AND status = 'pending'`,
            [notification.requester_id, notification.user_id]
          );
          if (friendReqResult.rows.length > 0) {
            contentMeta.request_id = friendReqResult.rows[0].id;
          }
        } catch (err) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞—è–≤–∫–∏ –¥—Ä—É–∂–±—ã:', err);
        }
      }
      
      const msgRes = await pool.query(
        'INSERT INTO messages (chat_id, sender_id, content, message_type, content_meta) VALUES ($1, NULL, $2, $3, $4) RETURNING *',
        [systemChatId, notification.message, 'announcement', contentMeta]
      );
      const newMsg = msgRes.rows[0];
      
      // üîß –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –í –ö–û–ú–ù–ê–¢–£ –ß–ê–¢–ê
      if (app && app.get('io')) {
        try {
          app.get('io').to(`chat_${systemChatId}`).emit('message', newMsg);
        } catch (chatSocketError) {
          console.warn(`‚ö†Ô∏è [sendNotification] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${systemChatId}:`, chatSocketError.message);
        }
      }
      
      console.log(`üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç ${systemChatId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —á–∞—Ç:', e);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    // –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
const broadcastNotification = (notification) => {
  try {
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    const app = global.app;
    if (!app) {
      console.log(`‚ö†Ô∏è [broadcastNotification] Global app –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`);
      return;
    }
    
    const io = app.get('io');
    if (!io) {
      console.log(`‚ö†Ô∏è [broadcastNotification] Socket.IO instance –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    try {
      io.emit('broadcast', notification);
      console.log(`üì¢ –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:`, notification);
    } catch (socketError) {
      console.warn(`‚ö†Ô∏è [broadcastNotification] –û—à–∏–±–∫–∞ Socket.IO:`, socketError.message);
    }
    
  } catch (error) {
    console.warn(`‚ö†Ô∏è [broadcastNotification] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, error.message);
    // –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞
const broadcastTournamentUpdate = (tournamentId, tournamentData, sourceFunction = 'unknown') => {
  try {
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π
    const app = global.app;
    if (!app) {
      console.log(`‚ö†Ô∏è [broadcastTournamentUpdate] Global app –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Socket.IO —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
      return false;
    }
    
    const io = app.get('io');
    if (!io) {
      console.log(`‚ö†Ô∏è [broadcastTournamentUpdate] Socket.IO instance –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}`);
      return false;
    }

    // üÜï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ß–ï–†–ï–ó –ú–û–ù–ò–¢–û–†
    const eventId = websocketMonitor.logBroadcast(tournamentId, 'tournament_update', tournamentData, sourceFunction);
    
    // üîß –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ê–ô–ú–ê–£–¢ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
    const broadcastPromise = new Promise((resolve, reject) => {
      try {
        // üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ï–¢–ê–î–ê–ù–ù–´–ï –ö –°–û–ë–´–¢–ò–Æ
        const enhancedData = {
          ...tournamentData,
          _metadata: {
            eventId,
            timestamp: new Date().toISOString(),
            source: sourceFunction,
            updateType: determineUpdateType(tournamentData)
          }
        };

        io.to(`tournament_${tournamentId}`).emit('tournament_update', enhancedData);
        resolve();
      } catch (error) {
        reject(error);
      }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ 3 —Å–µ–∫—É–Ω–¥—ã
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Broadcast timeout')), 3000);
    });
    
    Promise.race([broadcastPromise, timeoutPromise])
      .then(() => {
        console.log(`‚úÖ [broadcastTournamentUpdate] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Socket.IO (eventId: ${eventId})`);
        
        // üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ê–í–ö–ò (–≤ —Ñ–æ–Ω–µ)
        setTimeout(async () => {
          const roomSize = io.sockets.adapter.rooms.get(`tournament_${tournamentId}`)?.size || 0;
          if (roomSize > 0) {
            const deliveryResult = await websocketMonitor.verifyEventDelivery(eventId, roomSize, 2000);
            if (!deliveryResult.success) {
              console.warn(`‚ö†Ô∏è [broadcastTournamentUpdate] –ù–µ –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ ${eventId}:`, deliveryResult);
            }
          }
        }, 500);
      })
      .catch((error) => {
        console.warn(`‚ö†Ô∏è [broadcastTournamentUpdate] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error.message);
      });

    return true;
      
  } catch (error) {
    console.warn(`‚ö†Ô∏è [broadcastTournamentUpdate] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error.message);
    // –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    return false;
  }
};

// üÜï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–õ–Ø –ë–û–õ–ï–ï –≠–§–§–ï–ö–¢–ò–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –ù–ê –§–†–û–ù–¢–ï–ù–î–ï
const determineUpdateType = (tournamentData) => {
  if (tournamentData.status) {
    return 'status_change';
  } else if (tournamentData.participants) {
    return 'participants_update';
  } else if (tournamentData.matches) {
    return 'matches_update';
  } else if (tournamentData.teams || tournamentData.mixed_teams) {
    return 'teams_update';
  } else {
    return 'general_update';
  }
};

module.exports = { sendNotification, broadcastNotification, broadcastTournamentUpdate };