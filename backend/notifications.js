// notifications.js

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const sendNotification = (userId, notification) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const app = global.app || require('./server');
    // –ü–æ–ª—É—á–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const connectedClients = app.get('connectedClients');
    
    if (!connectedClients) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
      return;
    }
    
    const ws = connectedClients.get(userId);
    
    if (ws && ws.readyState === 1) { // 1 = WebSocket.OPEN
      ws.send(JSON.stringify({
        type: 'notification',
        data: notification
      }));
      console.log(`üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, notification);
    } else {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
const broadcastNotification = (notification) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const app = global.app || require('./server');
    // –ü–æ–ª—É—á–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const wss = app.get('wss');
    
    if (!wss) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å WebSocket —Å–µ—Ä–≤–µ—Ä');
      return;
    }
    
    wss.clients.forEach((client) => {
      if (client.readyState === 1) { // 1 = WebSocket.OPEN
        client.send(JSON.stringify({
          type: 'broadcast',
          data: notification
        }));
      }
    });
    
    console.log(`üì¢ –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:`, notification);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞
const broadcastTournamentUpdate = (tournamentId, tournamentData) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const app = global.app || require('./server');
    // –ü–æ–ª—É—á–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const wss = app.get('wss');
    const tournamentClients = app.get('tournamentClients') || new Map();
    
    if (!wss) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å WebSocket —Å–µ—Ä–≤–µ—Ä');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏—Ö —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
    const clients = tournamentClients.get(tournamentId) || [];
    console.log(`üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –¥–ª—è ${clients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞
    wss.clients.forEach((client) => {
      if (client.readyState === 1) { // 1 = WebSocket.OPEN
        if (client.tournamentId === tournamentId) {
          client.send(JSON.stringify({
            type: 'tournament_update',
            tournamentId: tournamentId,
            data: tournamentData
          }));
        }
      }
    });
    
    console.log(`üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`, error);
  }
};

module.exports = { sendNotification, broadcastNotification, broadcastTournamentUpdate };