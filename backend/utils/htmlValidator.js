/**
 * üõ°Ô∏è –£–¢–ò–õ–ò–¢–ê –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò HTML –ö–û–ù–¢–ï–ù–¢–ê
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç XSS –∞—Ç–∞–∫ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ backend
 */

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * @param {string} html - HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {Object} options - –û–ø—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ { isValid, errors, sanitizedContent }
 */
function validateHtmlContent(html, options = {}) {
    const {
        maxLength = 10000,
        allowedTags = [
            'p', 'br', 'strong', 'em', 'u', 's', 'sub', 'sup',
            'ul', 'ol', 'li', 'blockquote', 'a', 'h3', 'h4', 'h5', 'h6'
        ],
        fieldName = '–∫–æ–Ω—Ç–µ–Ω—Ç'
    } = options;

    const errors = [];
    let isValid = true;

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    if (!html || typeof html !== 'string') {
        return {
            isValid: true,
            errors: [],
            sanitizedContent: ''
        };
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (html.length > maxLength) {
        errors.push(`${fieldName} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É (${maxLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
        isValid = false;
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const dangerousPatterns = [
        {
            pattern: /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <script>'
        },
        {
            pattern: /javascript:/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è javascript: –ø—Ä–æ—Ç–æ–∫–æ–ª–∞'
        },
        {
            pattern: /vbscript:/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è vbscript: –ø—Ä–æ—Ç–æ–∫–æ–ª–∞'
        },
        {
            pattern: /data:(?!image\/(?:png|jpe?g|gif|svg\+xml|webp);base64,)/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è data: –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º'
        },
        {
            pattern: /on\w+\s*=/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã JavaScript –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (onclick, onload –∏ —Ç.–¥.)'
        },
        {
            pattern: /<iframe\b[^>]*>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <iframe>'
        },
        {
            pattern: /<object\b[^>]*>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <object>'
        },
        {
            pattern: /<embed\b[^>]*>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <embed>'
        },
        {
            pattern: /<form\b[^>]*>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <form>'
        },
        {
            pattern: /<input\b[^>]*>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <input>'
        },
        {
            pattern: /<textarea\b[^>]*>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <textarea>'
        },
        {
            pattern: /<select\b[^>]*>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <select>'
        },
        {
            pattern: /<button\b[^>]*>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <button>'
        },
        {
            pattern: /<style\b[^>]*>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <style>'
        },
        {
            pattern: /<link\b[^>]*>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <link>'
        },
        {
            pattern: /<meta\b[^>]*>/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ç–µ–≥ <meta>'
        },
        {
            pattern: /expression\s*\(/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CSS expression'
        },
        {
            pattern: /import\s*\(/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è import()'
        },
        {
            pattern: /eval\s*\(/gi,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è eval()'
        }
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    for (const { pattern, message } of dangerousPatterns) {
        if (pattern.test(html)) {
            errors.push(`‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${message}`);
            isValid = false;
        }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ (–±–∞–∑–æ–≤–∞—è)
    const tagPattern = /<(\/?)\s*([a-zA-Z][a-zA-Z0-9]*)\b[^>]*>/gi;
    let tagMatch;
    const foundTags = new Set();

    while ((tagMatch = tagPattern.exec(html)) !== null) {
        const tagName = tagMatch[2].toLowerCase();
        foundTags.add(tagName);
        
        if (!allowedTags.includes(tagName)) {
            errors.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π HTML —Ç–µ–≥: <${tagName}>`);
            isValid = false;
        }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML (–±–∞–∑–æ–≤–∞—è)
    const openTags = [];
    const tagStructurePattern = /<(\/?)\s*([a-zA-Z][a-zA-Z0-9]*)\b[^>]*\/?>/gi;
    let structureMatch;

    while ((structureMatch = tagStructurePattern.exec(html)) !== null) {
        const isClosing = structureMatch[1] === '/';
        const tagName = structureMatch[2].toLowerCase();
        const isSelfClosing = structureMatch[0].endsWith('/>') || ['br', 'img', 'hr'].includes(tagName);

        if (isClosing) {
            if (openTags.length === 0 || openTags[openTags.length - 1] !== tagName) {
                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                console.warn(`‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ </${tagName}>`);
            } else {
                openTags.pop();
            }
        } else if (!isSelfClosing) {
            openTags.push(tagName);
        }
    }

    // 6. –ë–∞–∑–æ–≤–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ –æ–ø–∞—Å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    let sanitizedContent = html;
    
    if (!isValid) {
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é
        sanitizedContent = html
            .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
            .replace(/javascript:/gi, '')
            .replace(/vbscript:/gi, '')
            .replace(/on\w+\s*=\s*["'][^"']*["']/gi, '')
            .replace(/<(iframe|object|embed|form|input|textarea|select|button|style|link|meta)\b[^>]*>/gi, '')
            .replace(/expression\s*\([^)]*\)/gi, '')
            .replace(/import\s*\([^)]*\)/gi, '')
            .replace(/eval\s*\([^)]*\)/gi, '');
    }

    return {
        isValid,
        errors,
        sanitizedContent,
        foundTags: Array.from(foundTags),
        warnings: openTags.length > 0 ? [`–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏: ${openTags.join(', ')}`] : []
    };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateTournamentDescription(description) {
    return validateHtmlContent(description, {
        maxLength: 3000,
        fieldName: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞'
    });
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {string} rules - –†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateTournamentRules(rules) {
    return validateHtmlContent(rules, {
        maxLength: 5000,
        fieldName: '–†–µ–≥–ª–∞–º–µ–Ω—Ç —Ç—É—Ä–Ω–∏—Ä–∞'
    });
}

/**
 * Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
 * @param {string} field - –ü–æ–ª–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @param {Object} options - –û–ø—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function validateHtmlMiddleware(field, options = {}) {
    return (req, res, next) => {
        const content = req.body[field];
        
        if (!content) {
            return next(); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        }

        const validation = validateHtmlContent(content, options);
        
        if (!validation.isValid) {
            return res.status(400).json({
                error: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                details: validation.errors,
                field: field
            });
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if (validation.warnings && validation.warnings.length > 0) {
            console.warn(`‚ö†Ô∏è HTML –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è ${field}:`, validation.warnings);
        }

        // –ó–∞–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        req.body[field] = validation.sanitizedContent;
        
        next();
    };
}

module.exports = {
    validateHtmlContent,
    validateTournamentDescription,
    validateTournamentRules,
    validateHtmlMiddleware
};