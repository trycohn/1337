/**
 * üßÆ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ú–û–î–£–õ–¨ –¢–£–†–ù–ò–†–ù–û–ô –°–ï–¢–ö–ò
 * 
 * –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ Single Elimination —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
 */

/**
 * üìä –ë–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è Single Elimination
 */
class BracketMath {
    
    /**
     * üéØ –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
     * @param {number} participantCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
     * @returns {Object} - –ü–æ–ª–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
     */
    static calculateSingleEliminationParams(participantCount, options = {}) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!Number.isInteger(participantCount) || participantCount < 2) {
            throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º >= 2');
        }
        
        if (participantCount > 1024) {
            throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 1024');
        }
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∏–∂–∞–π—à—É—é –≤—ã—à–µ—Å—Ç–æ—è—â—É—é —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏
        // –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Single Elimination —Å bye-–ø—Ä–æ—Ö–æ–¥–∞–º–∏
        const upperPowerOfTwo = Math.pow(2, Math.ceil(Math.log2(participantCount)));
        const byesNeeded = upperPowerOfTwo - participantCount;
        
        // üÜï –†–∞—Å—á–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã upperPowerOfTwo, –Ω—É–∂–Ω—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
        const lowerPowerOfTwo = upperPowerOfTwo / 2;
        const needsPreliminaryRound = participantCount > lowerPowerOfTwo;
        
        let preliminaryMatches = 0;
        let preliminaryParticipants = 0;
        let firstRoundByes = 0;
        let actualParticipants = participantCount; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–∫–ª—é—á–∞–µ–º –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        
        if (needsPreliminaryRound) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
            preliminaryParticipants = (participantCount - lowerPowerOfTwo) * 2;
            preliminaryMatches = preliminaryParticipants / 2;
            firstRoundByes = lowerPowerOfTwo - preliminaryMatches;
            
            console.log(`üéØ [bracketMath] –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥: ${preliminaryMatches} –º–∞—Ç—á–µ–π –¥–ª—è ${preliminaryParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            console.log(`üéØ [bracketMath] Bye-–ø—Ä–æ—Ö–æ–¥—ã –≤ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥: ${firstRoundByes} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        } else {
            // –ü—Ä–æ—Å—Ç—ã–µ bye-–ø—Ä–æ—Ö–æ–¥—ã –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ
            firstRoundByes = byesNeeded;
            console.log(`üéØ [bracketMath] Bye-–ø—Ä–æ—Ö–æ–¥—ã: ${firstRoundByes} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥`);
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞
        const totalRounds = Math.ceil(Math.log2(participantCount)) + (needsPreliminaryRound ? 1 : 0);
        const firstRoundMatches = needsPreliminaryRound 
            ? lowerPowerOfTwo / 2  // –ü–æ—Å–ª–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
            : Math.ceil((participantCount - firstRoundByes) / 2); // –° —É—á–µ—Ç–æ–º bye-–ø—Ä–æ—Ö–æ–¥–æ–≤
        
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π = —É—á–∞—Å—Ç–Ω–∏–∫–∏ - 1 (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ)
        const totalMatches = participantCount - 1 + (needsPreliminaryRound ? preliminaryMatches : 0);
        
        // –†–∞—Å—á–µ—Ç –º–∞—Ç—á–µ–π –ø–æ —Ä–∞—É–Ω–¥–∞–º —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        const matchesByRound = this._calculateMatchesByRoundWithByes(
            participantCount, 
            upperPowerOfTwo, 
            needsPreliminaryRound, 
            preliminaryMatches,
            firstRoundByes
        );
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Ç—á–∞ –∑–∞ 3-–µ –º–µ—Å—Ç–æ
        const hasThirdPlaceMatch = options.thirdPlaceMatch === true;
        const totalMatchesWithThirdPlace = totalMatches + (hasThirdPlaceMatch ? 1 : 0);
        
        return {
            // –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            originalParticipantCount: participantCount,
            actualParticipants, // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã
            excludedParticipants: 0, // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
            upperPowerOfTwo,
            lowerPowerOfTwo,
            
            // üÜï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ bye-–ø—Ä–æ—Ö–æ–¥–∞—Ö –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–∞—Ö
            byesNeeded,
            firstRoundByes,
            needsPreliminaryRound,
            preliminaryMatches,
            preliminaryParticipants,
            
            // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∫–∏
            rounds: totalRounds,
            totalMatches,
            totalMatchesWithThirdPlace,
            firstRoundMatches,
            finalMatch: 1,
            
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞—É–Ω–¥–∞–º
            matchesByRound,
            roundNames: this._generateRoundNames(totalRounds, needsPreliminaryRound),
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
            hasThirdPlaceMatch,
            thirdPlaceMatch: hasThirdPlaceMatch ? 1 : 0,
            
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            isValid: this._validateParamsWithByes(participantCount, totalRounds, totalMatches),
            generatedAt: new Date().toISOString()
        };
    }
    
    /**
     * üî¢ –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –ø–æ —Ä–∞—É–Ω–¥–∞–º
     * @param {number} participants - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—Ç—á–µ–π –≤ –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ
     */
    static _calculateMatchesByRound(participants) {
        const rounds = Math.log2(participants);
        const matchesByRound = [];
        
        for (let round = 1; round <= rounds; round++) {
            const matchesInRound = participants / Math.pow(2, round);
            matchesByRound.push({
                round,
                matchCount: matchesInRound,
                participantsInRound: matchesInRound * 2
            });
        }
        
        return matchesByRound;
    }
    
    /**
     * üÜï –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –ø–æ —Ä–∞—É–Ω–¥–∞–º —Å —É—á–µ—Ç–æ–º bye-–ø—Ä–æ—Ö–æ–¥–æ–≤
     * @param {number} participantCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {number} upperPowerOfTwo - –ë–ª–∏–∂–∞–π—à–∞—è –≤—ã—à–µ—Å—Ç–æ—è—â–∞—è —Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏
     * @param {boolean} needsPreliminaryRound - –ù—É–∂–µ–Ω –ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
     * @param {number} preliminaryMatches - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
     * @param {number} firstRoundByes - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ bye-–ø—Ä–æ—Ö–æ–¥–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—Ç—á–µ–π –≤ –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ
     */
    static _calculateMatchesByRoundWithByes(participantCount, upperPowerOfTwo, needsPreliminaryRound, preliminaryMatches, firstRoundByes) {
        const matchesByRound = [];
        let currentRound = 1;
        
        // üÜï –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        if (needsPreliminaryRound) {
            matchesByRound.push({
                round: 0, // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ = —Ä–∞—É–Ω–¥ 0
                roundName: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π',
                matchCount: preliminaryMatches,
                participantsInRound: preliminaryMatches * 2,
                winnersAdvancing: preliminaryMatches,
                byesInRound: 0
            });
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—É–Ω–¥—ã
        let remainingParticipants = participantCount;
        if (needsPreliminaryRound) {
            // –ü–æ—Å–ª–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è: bye-—É—á–∞—Å—Ç–Ω–∏–∫–∏ + –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
            remainingParticipants = firstRoundByes + preliminaryMatches;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—É–Ω–¥—ã –¥–æ —Ñ–∏–Ω–∞–ª–∞
        while (remainingParticipants > 1) {
            const byesInThisRound = needsPreliminaryRound && currentRound === 1 ? firstRoundByes : 0;
            const activeParticipants = remainingParticipants - byesInThisRound;
            const matchesInRound = Math.floor(activeParticipants / 2);
            const winnersAdvancing = matchesInRound + byesInThisRound;
            
            matchesByRound.push({
                round: currentRound,
                roundName: this._getRoundName(currentRound, needsPreliminaryRound, participantCount),
                matchCount: matchesInRound,
                participantsInRound: activeParticipants,
                winnersAdvancing: winnersAdvancing,
                byesInRound: byesInThisRound
            });
            
            remainingParticipants = winnersAdvancing;
            currentRound++;
        }
        
        return matchesByRound;
    }
    
    /**
     * üè∑Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞—É–Ω–¥–æ–≤
     * @param {number} totalRounds - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
     * @param {boolean} hasPreliminaryRound - –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
     * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ä–∞—É–Ω–¥–æ–≤
     */
    static _generateRoundNames(totalRounds, hasPreliminaryRound = false) {
        const names = {};
        const mainRounds = hasPreliminaryRound ? totalRounds - 1 : totalRounds;
        
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (hasPreliminaryRound) {
            names[0] = '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥';
        }
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—É–Ω–¥—ã
        for (let round = 1; round <= mainRounds; round++) {
            const remainingRounds = mainRounds - round;
            names[round] = this._getRoundName(round, hasPreliminaryRound, 0, remainingRounds);
        }
        
        return names;
    }
    
    /**
     * üÜï –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞
     * @param {number} round - –ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
     * @param {boolean} hasPreliminaryRound - –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
     * @param {number} participantCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {number} remainingRounds - –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–∞—É–Ω–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @returns {string} - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
     */
    static _getRoundName(round, hasPreliminaryRound = false, participantCount = 0, remainingRounds = null) {
        if (round === 0) {
            return '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥';
        }
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ä–∞—É–Ω–¥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (remainingRounds !== null) {
            const remaining = remainingRounds;
            
            switch (remaining) {
                case 0:
                    return '–§–∏–Ω–∞–ª';
                case 1:
                    return '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª';
                case 2:
                    return '–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª';
                case 3:
                    return '1/8 —Ñ–∏–Ω–∞–ª–∞';
                case 4:
                    return '1/16 —Ñ–∏–Ω–∞–ª–∞';
                default:
                    return `–†–∞—É–Ω–¥ ${round}`;
            }
        }
        
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—É–Ω–¥–∞
        const adjustedRound = hasPreliminaryRound ? round - 1 : round;
        
        switch (adjustedRound) {
            case 1:
                return participantCount <= 4 ? '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª' : '–†–∞—É–Ω–¥ 1';
            case 2:
                return '–§–∏–Ω–∞–ª';
            default:
                return `–†–∞—É–Ω–¥ ${round}`;
        }
    }
    
    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     * @param {number} participants - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {number} rounds - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
     * @param {number} totalMatches - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
     * @returns {boolean} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    static _validateParams(participants, rounds, totalMatches) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏
        const isPowerOfTwo = (participants & (participants - 1)) === 0;
        if (!isPowerOfTwo) return false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤
        const expectedRounds = Math.log2(participants);
        if (rounds !== expectedRounds) return false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π
        const expectedMatches = participants - 1;
        if (totalMatches !== expectedMatches) return false;
        
        return true;
    }
    
    /**
     * üÜï –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º bye-–ø—Ä–æ—Ö–æ–¥–æ–≤
     * @param {number} participantCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {number} totalRounds - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
     * @param {number} totalMatches - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
     * @returns {boolean} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    static _validateParamsWithByes(participantCount, totalRounds, totalMatches) {
        // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤ —Ç—É—Ä–Ω–∏—Ä–µ –Ω–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∏ - 1 –º–∞—Ç—á
        const expectedMatches = participantCount - 1;
        if (totalMatches !== expectedMatches) {
            console.warn(`‚ö†Ô∏è [bracketMath] –í–∞–ª–∏–¥–∞—Ü–∏—è: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${expectedMatches} –º–∞—Ç—á–µ–π, –ø–æ–ª—É—á–µ–Ω–æ ${totalMatches}`);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤
        const minRounds = Math.ceil(Math.log2(participantCount));
        if (totalRounds < minRounds) {
            console.warn(`‚ö†Ô∏è [bracketMath] –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞—É–Ω–¥–æ–≤. –ú–∏–Ω–∏–º—É–º ${minRounds}, –ø–æ–ª—É—á–µ–Ω–æ ${totalRounds}`);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤ (–Ω–µ –±–æ–ª–µ–µ —á–µ–º minRounds + 1 –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ)
        const maxRounds = minRounds + 1;
        if (totalRounds > maxRounds) {
            console.warn(`‚ö†Ô∏è [bracketMath] –í–∞–ª–∏–¥–∞—Ü–∏—è: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–æ–≤. –ú–∞–∫—Å–∏–º—É–º ${maxRounds}, –ø–æ–ª—É—á–µ–Ω–æ ${totalRounds}`);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (participantCount < 2 || participantCount > 1024) {
            console.warn(`‚ö†Ô∏è [bracketMath] –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantCount}`);
            return false;
        }
        
        console.log(`‚úÖ [bracketMath] –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${participantCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, ${totalRounds} —Ä–∞—É–Ω–¥–æ–≤, ${totalMatches} –º–∞—Ç—á–µ–π`);
        return true;
    }
    
    /**
     * üé≤ –†–∞—Å—á–µ—Ç –ø–æ—Å–µ–≤–∞ (seeding) –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {number} participantCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ—Å–µ–≤–∞
     */
    static generateSeedingPositions(participantCount) {
        if (!Number.isInteger(participantCount) || participantCount < 2) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ—Å–µ–≤–∞');
        }
        
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–æ —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏
        const powerOfTwo = Math.pow(2, Math.floor(Math.log2(participantCount)));
        const actualParticipants = Math.min(participantCount, powerOfTwo);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Å–µ–≤
        const seeds = [];
        for (let i = 1; i <= actualParticipants; i++) {
            seeds.push(i);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ—Å–µ–≤–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
        return this._applySeedingAlgorithm(seeds);
    }
    
    /**
     * üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ—Å–µ–≤–∞
     * @param {Array} seeds - –ú–∞—Å—Å–∏–≤ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ—Å–µ–≤–∞
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –ø–∞—Ä –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
     */
    static _applySeedingAlgorithm(seeds) {
        const n = seeds.length;
        const pairs = [];
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—Å–µ–≤–∞: 1 vs n, 2 vs n-1, –∏ —Ç.–¥.
        for (let i = 0; i < n / 2; i++) {
            pairs.push({
                matchNumber: i + 1,
                seed1: seeds[i],
                seed2: seeds[n - 1 - i],
                round: 1
            });
        }
        
        return pairs;
    }
    
    /**
     * üìà –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Ä–∞—É–Ω–¥–æ–≤
     * @param {number} participants - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @returns {Array} - –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è –ø–æ —Ä–∞—É–Ω–¥–∞–º
     */
    static calculateRoundProgression(participants) {
        const rounds = Math.log2(participants);
        const progression = [];
        
        for (let round = 1; round <= rounds; round++) {
            const participantsInRound = participants / Math.pow(2, round - 1);
            const matchesInRound = participantsInRound / 2;
            const winnersAdvancing = matchesInRound;
            
            progression.push({
                round,
                participantsInRound,
                matchesInRound,
                winnersAdvancing,
                isLastRound: round === rounds
            });
        }
        
        return progression;
    }
    
    /**
     * üéØ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤
     * @param {number} soloParticipants - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {number} teamSize - –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
     * @returns {Object} - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞
     */
    static calculateMixTournamentParams(soloParticipants, teamSize = 5) {
        if (!Number.isInteger(soloParticipants) || soloParticipants < teamSize) {
            throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ä–∞–∑–º–µ—Ä–æ–º ${teamSize}`);
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        const fullTeams = Math.floor(soloParticipants / teamSize);
        const remainingParticipants = soloParticipants % teamSize;
        
        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–æ —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏
        const powerOfTwo = Math.pow(2, Math.floor(Math.log2(fullTeams)));
        const actualTeams = Math.min(fullTeams, powerOfTwo);
        const playersInTournament = actualTeams * teamSize;
        const excludedPlayers = soloParticipants - playersInTournament;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥
        const bracketParams = this.calculateSingleEliminationParams(actualTeams);
        
        return {
            ...bracketParams,
            // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞
            soloParticipants,
            teamSize,
            fullTeamsAvailable: fullTeams,
            actualTeams,
            playersInTournament,
            excludedPlayers,
            remainingParticipants,
            teamsExcluded: fullTeams - actualTeams
        };
    }
}

module.exports = {
    BracketMath,
    
    // –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    calculateSingleEliminationParams: BracketMath.calculateSingleEliminationParams.bind(BracketMath),
    generateSeedingPositions: BracketMath.generateSeedingPositions.bind(BracketMath),
    calculateMixTournamentParams: BracketMath.calculateMixTournamentParams.bind(BracketMath)
}; 