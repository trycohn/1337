/**
 * üé≤ –ê–õ–ì–û–†–ò–¢–ú–´ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í
 * 
 * –ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * –ø–æ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–µ —Å —É—á–µ—Ç–æ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–≤, —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –∏ –±–∞–ª–∞–Ω—Å–∞
 */

/**
 * üèÜ –¢–∏–ø—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
const SEEDING_TYPES = {
    RANDOM: 'random',           // –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    RANKING: 'ranking',         // –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É (FACEIT/CS2 Premier)
    MANUAL: 'manual',           // –†—É—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º
    BALANCED: 'balanced',       // –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ —Å–∏–ª–µ
    SNAKE_DRAFT: 'snake_draft'  // –ó–º–µ–π–∫–∞ (–¥–ª—è –∫–æ–º–∞–Ω–¥)
};

/**
 * üéØ –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
class SeedingAlgorithms {
    
    /**
     * üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
     * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {number} maxParticipants - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Å—Ç–µ–ø–µ–Ω—å –¥–≤–æ–π–∫–∏)
     * @returns {Array} - –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static randomSeeding(participants, maxParticipants) {
        this._validateParticipants(participants);
        
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const selectedParticipants = participants.slice(0, maxParticipants);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º Fisher-Yates –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        const shuffled = [...selectedParticipants];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        
        console.log(`üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${shuffled.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        return this._addSeedingInfo(shuffled, 'random');
    }
    
    /**
     * üèÜ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
     * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {number} maxParticipants - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * @param {Object} options - –û–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     * @returns {Array} - –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static rankingSeeding(participants, maxParticipants, options = {}) {
        this._validateParticipants(participants);
        
        const { ratingType = 'faceit_elo', direction = 'desc' } = options;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        const sorted = [...participants].sort((a, b) => {
            const ratingA = this._getRating(a, ratingType);
            const ratingB = this._getRating(b, ratingType);
            
            if (direction === 'desc') {
                return ratingB - ratingA; // –û—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É
            } else {
                return ratingA - ratingB; // –û—Ç –Ω–∏–∑—à–µ–≥–æ –∫ –≤—ã—Å—à–µ–º—É
            }
        });
        
        // –ë–µ—Ä–µ–º —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const selectedParticipants = sorted.slice(0, maxParticipants);
        
        console.log(`üèÜ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (${ratingType}): ${selectedParticipants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        return this._addSeedingInfo(selectedParticipants, 'ranking', { ratingType, direction });
    }
    
    /**
     * ‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {number} maxParticipants - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * @param {Object} options - –û–ø—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
     * @returns {Array} - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static balancedSeeding(participants, maxParticipants, options = {}) {
        this._validateParticipants(participants);
        
        const { ratingType = 'faceit_elo' } = options;
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        const sorted = this.rankingSeeding(participants, maxParticipants, { 
            ratingType, 
            direction: 'desc' 
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –∑–º–µ–π–∫–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        const balanced = this._applySnakeDraft(sorted);
        
        console.log(`‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${balanced.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        return this._addSeedingInfo(balanced, 'balanced', { ratingType });
    }
    
    /**
     * üêç –ê–ª–≥–æ—Ä–∏—Ç–º –∑–º–µ–π–∫–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @param {Array} participants - –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
     * @returns {Array} - –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
     */
    static _applySnakeDraft(participants) {
        const n = participants.length;
        const groups = Math.ceil(Math.log2(n)); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
        const groupSize = Math.ceil(n / groups);
        
        const result = [];
        const groups_array = [];
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã
        for (let i = 0; i < groups; i++) {
            groups_array.push([]);
        }
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–º–µ–π–∫–æ–π
        let currentGroup = 0;
        let direction = 1; // 1 = –≤–ø–µ—Ä–µ–¥, -1 = –Ω–∞–∑–∞–¥
        
        for (let i = 0; i < participants.length; i++) {
            groups_array[currentGroup].push(participants[i]);
            
            currentGroup += direction;
            
            // –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫—Ä–∞—è
            if (currentGroup >= groups || currentGroup < 0) {
                direction *= -1;
                currentGroup += direction;
            }
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for (let group of groups_array) {
            result.push(...group);
        }
        
        return result;
    }
    
    /**
     * üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤
     * @param {Array} soloParticipants - –û–¥–∏–Ω–æ—á–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {number} teamSize - –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
     * @param {number} maxTeams - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
     * @param {Object} options - –û–ø—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
     */
    static mixTournamentSeeding(soloParticipants, teamSize = 5, maxTeams, options = {}) {
        this._validateParticipants(soloParticipants);
        
        const { 
            ratingType = 'faceit_elo',
            balanceTeams = true,
            seedingType = 'balanced'
        } = options;
        
        const totalPlayersNeeded = maxTeams * teamSize;
        
        let selectedParticipants;
        
        // –í—ã–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        switch (seedingType) {
            case 'random':
                selectedParticipants = this.randomSeeding(soloParticipants, totalPlayersNeeded);
                break;
            case 'ranking':
                selectedParticipants = this.rankingSeeding(soloParticipants, totalPlayersNeeded, { ratingType });
                break;
            case 'balanced':
            default:
                selectedParticipants = this.balancedSeeding(soloParticipants, totalPlayersNeeded, { ratingType });
                break;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        const teams = this._formTeams(selectedParticipants, teamSize, maxTeams, balanceTeams);
        const excludedParticipants = soloParticipants.slice(totalPlayersNeeded);
        
        console.log(`üéØ –ú–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${teams.length} –∫–æ–º–∞–Ω–¥ –∏–∑ ${selectedParticipants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${excludedParticipants.length}`);
        
        return {
            teams,
            excludedParticipants,
            seedingInfo: {
                type: 'mix',
                teamSize,
                maxTeams,
                balanceTeams,
                ratingType,
                generatedAt: new Date().toISOString()
            }
        };
    }
    
    /**
     * üë• –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {number} teamSize - –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
     * @param {number} maxTeams - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
     * @param {boolean} balance - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥—ã
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥
     */
    static _formTeams(participants, teamSize, maxTeams, balance = true) {
        const teams = [];
        
        if (balance) {
            // –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
            const playersPerTeam = Array.from({ length: maxTeams }, () => []);
            
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∑–º–µ–π–∫–æ–π –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            for (let i = 0; i < participants.length; i++) {
                const teamIndex = i % maxTeams;
                const player = participants[i];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ
                player.teamRole = playersPerTeam[teamIndex].length === 0 ? 'captain' : 'member';
                
                playersPerTeam[teamIndex].push(player);
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
            for (let i = 0; i < maxTeams; i++) {
                if (playersPerTeam[i].length === teamSize) {
                    teams.push({
                        id: i + 1,
                        name: `–ö–æ–º–∞–Ω–¥–∞ ${i + 1}`,
                        players: playersPerTeam[i],
                        captain: playersPerTeam[i].find(p => p.teamRole === 'captain'),
                        averageRating: this._calculateTeamAverageRating(playersPerTeam[i])
                    });
                }
            }
        } else {
            // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
            for (let i = 0; i < maxTeams; i++) {
                const startIndex = i * teamSize;
                const teamPlayers = participants.slice(startIndex, startIndex + teamSize);
                
                if (teamPlayers.length === teamSize) {
                    teams.push({
                        id: i + 1,
                        name: `–ö–æ–º–∞–Ω–¥–∞ ${i + 1}`,
                        players: teamPlayers,
                        captain: teamPlayers[0],
                        averageRating: this._calculateTeamAverageRating(teamPlayers)
                    });
                }
            }
        }
        
        return teams;
    }
    
    /**
     * üìä –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã
     * @param {Array} players - –ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã
     * @param {string} ratingType - –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞
     * @returns {number} - –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
     */
    static _calculateTeamAverageRating(players, ratingType = 'faceit_elo') {
        if (!players || players.length === 0) return 0;
        
        const ratings = players.map(player => this._getRating(player, ratingType));
        const validRatings = ratings.filter(rating => rating > 0);
        
        if (validRatings.length === 0) return 0;
        
        return Math.round(validRatings.reduce((sum, rating) => sum + rating, 0) / validRatings.length);
    }
    
    /**
     * üî¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
     * @param {Object} participant - –£—á–∞—Å—Ç–Ω–∏–∫
     * @param {string} ratingType - –¢–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞
     * @returns {number} - –†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞
     */
    static _getRating(participant, ratingType) {
        switch (ratingType) {
            case 'faceit_elo':
                return participant.faceit_elo || 0;
            case 'cs2_premier_rank':
                return participant.cs2_premier_rank || 0;
            default:
                return participant.faceit_elo || participant.cs2_premier_rank || 0;
        }
    }
    
    /**
     * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     * @param {Array} participants - –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    static _validateParticipants(participants) {
        if (!Array.isArray(participants)) {
            throw new Error('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞');
        }
        
        if (participants.length < 2) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∫–∏ (–º–∏–Ω–∏–º—É–º 2)');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        participants.forEach((participant, index) => {
            if (!participant.id) {
                throw new Error(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${index + 1} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID`);
            }
            if (!participant.name && !participant.username) {
                throw new Error(`–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${index + 1} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è`);
            }
        });
    }
    
    /**
     * üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {string} seedingType - –¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @param {Object} metadata - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     * @returns {Array} - –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
     */
    static _addSeedingInfo(participants, seedingType, metadata = {}) {
        return participants.map((participant, index) => ({
            ...participant,
            seedNumber: index + 1,
            seedingType,
            seedingMetadata: {
                ...metadata,
                position: index + 1,
                total: participants.length,
                generatedAt: new Date().toISOString()
            }
        }));
    }
    
    /**
     * üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {Array} customOrder - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ (–º–∞—Å—Å–∏–≤ ID)
     * @param {number} maxParticipants - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * @returns {Array} - –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
     */
    static manualSeeding(participants, customOrder, maxParticipants) {
        this._validateParticipants(participants);
        
        if (!Array.isArray(customOrder)) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
        }
        
        const participantMap = new Map(participants.map(p => [p.id, p]));
        const orderedParticipants = [];
        
        // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        for (const participantId of customOrder) {
            if (participantMap.has(participantId)) {
                orderedParticipants.push(participantMap.get(participantId));
                participantMap.delete(participantId);
            }
        }
        
        // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        orderedParticipants.push(...Array.from(participantMap.values()));
        
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const finalParticipants = orderedParticipants.slice(0, maxParticipants);
        
        console.log(`‚úèÔ∏è –†—É—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${finalParticipants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        return this._addSeedingInfo(finalParticipants, 'manual');
    }
}

/**
 * üéØ –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
 */
class SeedingFactory {
    
    /**
     * üè≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
     * @param {string} seedingType - –¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @param {Array} participants - –£—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {number} maxParticipants - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * @param {Object} options - –û–ø—Ü–∏–∏
     * @returns {Array|Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     */
    static createSeeding(seedingType, participants, maxParticipants, options = {}) {
        switch (seedingType) {
            case SEEDING_TYPES.RANDOM:
                return SeedingAlgorithms.randomSeeding(participants, maxParticipants);
                
            case SEEDING_TYPES.RANKING:
                return SeedingAlgorithms.rankingSeeding(participants, maxParticipants, options);
                
            case SEEDING_TYPES.BALANCED:
                return SeedingAlgorithms.balancedSeeding(participants, maxParticipants, options);
                
            case SEEDING_TYPES.MANUAL:
                return SeedingAlgorithms.manualSeeding(participants, options.customOrder, maxParticipants);
                
            default:
                console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${seedingType}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ`);
                return SeedingAlgorithms.randomSeeding(participants, maxParticipants);
        }
    }
    
    /**
     * üéÆ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –º–∏–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞
     * @param {Array} soloParticipants - –û–¥–∏–Ω–æ—á–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
     * @param {number} teamSize - –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
     * @param {number} maxTeams - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
     * @param {Object} options - –û–ø—Ü–∏–∏
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
     */
    static createMixSeeding(soloParticipants, teamSize, maxTeams, options = {}) {
        return SeedingAlgorithms.mixTournamentSeeding(soloParticipants, teamSize, maxTeams, options);
    }
}

module.exports = {
    SeedingAlgorithms,
    SeedingFactory,
    SEEDING_TYPES,
    
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    randomSeeding: SeedingAlgorithms.randomSeeding.bind(SeedingAlgorithms),
    rankingSeeding: SeedingAlgorithms.rankingSeeding.bind(SeedingAlgorithms),
    balancedSeeding: SeedingAlgorithms.balancedSeeding.bind(SeedingAlgorithms),
    mixTournamentSeeding: SeedingAlgorithms.mixTournamentSeeding.bind(SeedingAlgorithms)
}; 