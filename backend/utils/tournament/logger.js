const pool = require('../../db');

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} event_type - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
 * @param {object} event_data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
async function logTournamentEvent(tournamentId, userId, event_type, event_data = {}) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ tournament_logs
        const tableExists = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'tournament_logs'
            );
        `);

        if (!tableExists.rows[0].exists) {
            console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ tournament_logs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
            return;
        }

        await pool.query(
            `INSERT INTO tournament_logs (tournament_id, user_id, event_type, event_data, created_at) 
             VALUES ($1, $2, $3, $4, NOW())`,
            [tournamentId, userId, event_type, JSON.stringify(event_data)]
        );

        console.log(`üìù –°–æ–±—ã—Ç–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${event_type} –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    } catch (error) {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error.message);
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 */
async function getTournamentLogs(tournamentId, options = {}) {
    try {
        const { limit = 50, offset = 0 } = options;
        
        const result = await pool.query(`
            SELECT 
                tl.id,
                tl.tournament_id,
                tl.user_id,
                tl.event_type,
                tl.event_data,
                tl.created_at,
                u.username
            FROM tournament_logs tl
            LEFT JOIN users u ON tl.user_id = u.id
            WHERE tl.tournament_id = $1
            ORDER BY tl.created_at DESC
            LIMIT $2 OFFSET $3
        `, [tournamentId, limit, offset]);

        return result.rows.map(log => ({
            ...log,
            event_data: typeof log.event_data === 'string' ? JSON.parse(log.event_data) : log.event_data
        }));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        return [];
    }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
 * @param {number} daysToKeep - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
 */
async function cleanupOldLogs(daysToKeep = 90) {
    try {
        const result = await pool.query(
            `DELETE FROM tournament_logs 
             WHERE created_at < NOW() - INTERVAL '${daysToKeep} days'`
        );

        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.rowCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤`);
        return result.rowCount;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤:', error);
        return 0;
    }
}

module.exports = {
    logTournamentEvent,
    getTournamentLogs,
    cleanupOldLogs
}; 