const pool = require('../../db');

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} messageType - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è ('announcement', 'system', 'warning')
 */
async function sendTournamentChatAnnouncement(tournamentId, message, messageType = 'announcement') {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ tournament_messages
        const tableExists = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'tournament_messages'
            );
        `);

        if (!tableExists.rows[0].exists) {
            console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ tournament_messages –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è');
            return null;
        }

        // –ü–æ–ª—É—á–∞–µ–º ID —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        let systemUserId = null;
        try {
            const systemUserResult = await pool.query(
                "SELECT id FROM users WHERE username = 'system' OR username = '1337' LIMIT 1"
            );
            if (systemUserResult.rows.length > 0) {
                systemUserId = systemUserResult.rows[0].id;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const result = await pool.query(
            `INSERT INTO tournament_messages (tournament_id, sender_id, message, message_type, created_at) 
             VALUES ($1, $2, $3, $4, NOW()) RETURNING *`,
            [tournamentId, systemUserId, message, messageType]
        );

        console.log(`üí¨ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}: ${message}`);
        return result.rows[0];

    } catch (error) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞:', error.message);
        return null;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} requestingUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ —Å–ø–∏—Å–æ–∫
 */
async function getTournamentChatParticipants(tournamentId, requestingUserId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
        const isParticipant = await checkTournamentParticipation(tournamentId, requestingUserId);
        
        if (!isParticipant) {
            throw new Error('–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞');
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
        const result = await pool.query(`
            SELECT DISTINCT
                u.id,
                u.username,
                u.avatar_url,
                tp.name as participant_name,
                CASE 
                    WHEN t.created_by = u.id THEN 'creator'
                    WHEN ta.user_id IS NOT NULL THEN 'admin'
                    ELSE 'participant'
                END as role
            FROM tournament_participants tp
            LEFT JOIN users u ON tp.user_id = u.id
            LEFT JOIN tournaments t ON tp.tournament_id = t.id
            LEFT JOIN tournament_admins ta ON ta.tournament_id = tp.tournament_id AND ta.user_id = u.id
            WHERE tp.tournament_id = $1
            ORDER BY 
                CASE 
                    WHEN t.created_by = u.id THEN 1
                    WHEN ta.user_id IS NOT NULL THEN 2
                    ELSE 3
                END,
                u.username
        `, [tournamentId]);

        return result.rows;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} requestingUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 */
async function getTournamentChatMessages(tournamentId, requestingUserId, options = {}) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
        const isParticipant = await checkTournamentParticipation(tournamentId, requestingUserId);
        
        if (!isParticipant) {
            throw new Error('–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞');
        }

        const { limit = 50, offset = 0 } = options;

        const result = await pool.query(`
            SELECT 
                tm.id,
                tm.tournament_id,
                tm.sender_id,
                tm.message,
                tm.message_type,
                tm.created_at,
                u.username,
                u.avatar_url,
                tp.name as participant_name
            FROM tournament_messages tm
            LEFT JOIN users u ON tm.sender_id = u.id
            LEFT JOIN tournament_participants tp ON tp.tournament_id = tm.tournament_id AND tp.user_id = tm.sender_id
            WHERE tm.tournament_id = $1
            ORDER BY tm.created_at DESC
            LIMIT $2 OFFSET $3
        `, [tournamentId, limit, offset]);

        return result.rows.reverse(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        throw error;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function checkTournamentParticipation(tournamentId, userId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç—É—Ä–Ω–∏—Ä–∞
        const creatorResult = await pool.query(
            'SELECT id FROM tournaments WHERE id = $1 AND created_by = $2',
            [tournamentId, userId]
        );

        if (creatorResult.rows.length > 0) {
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç—É—Ä–Ω–∏—Ä–∞
        const adminResult = await pool.query(
            'SELECT id FROM tournament_admins WHERE tournament_id = $1 AND user_id = $2',
            [tournamentId, userId]
        );

        if (adminResult.rows.length > 0) {
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ç—É—Ä–Ω–∏—Ä–∞
        const participantResult = await pool.query(
            'SELECT id FROM tournament_participants WHERE tournament_id = $1 AND user_id = $2',
            [tournamentId, userId]
        );

        return participantResult.rows.length > 0;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ:', error);
        return false;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {number} tournamentId - ID —Ç—É—Ä–Ω–∏—Ä–∞
 * @param {string} eventType - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
 * @param {object} eventData - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 */
async function sendTournamentEventNotification(tournamentId, eventType, eventData = {}) {
    try {
        const messages = {
            'tournament_started': `üöÄ –¢—É—Ä–Ω–∏—Ä "${eventData.tournamentName}" –Ω–∞—á–∞–ª—Å—è!`,
            'bracket_generated': `ü•ä –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤.`,
            'match_result_updated': `‚öΩ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${eventData.team1} vs ${eventData.team2}`,
            'participant_joined': `üëã –ö —Ç—É—Ä–Ω–∏—Ä—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: ${eventData.participantName}`,
            'participant_left': `üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Ç—É—Ä–Ω–∏—Ä: ${eventData.participantName}`,
            'admin_assigned': `üõ°Ô∏è –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω: ${eventData.adminName}`,
            'tournament_completed': `üèÜ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!`
        };

        const message = messages[eventType] || `üì¢ –°–æ–±—ã—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: ${eventType}`;

        return await sendTournamentChatAnnouncement(tournamentId, message, 'system');

    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', error.message);
        return null;
    }
}

module.exports = {
    sendTournamentChatAnnouncement,
    getTournamentChatParticipants,
    getTournamentChatMessages,
    checkTournamentParticipation,
    sendTournamentEventNotification
}; 