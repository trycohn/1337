/**
 * üîí Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥–∞–º –º–∞—Ç—á–µ–π
 * –†–∞–∑—Ä–µ—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ CS2 —Å–µ—Ä–≤–µ—Ä–∞–º –ø–æ IP –∏–∑ .env
 */

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤
 */
function getAllowedIPs() {
    // IP –∞–¥—Ä–µ—Å–∞ –∏–∑ .env (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    const envIPs = process.env.CS2_SERVER_IPS || '';
    const serverIPs = envIPs.split(',').map(ip => ip.trim()).filter(ip => ip);
    
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    const devIPs = ['127.0.0.1', '::1', 'localhost'];
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º
    return [...serverIPs, ...devIPs];
}

/**
 * Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–æ–Ω—Ñ–∏–≥–æ–≤ –º–∞—Ç—á–µ–π
 * –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã —Å IP –∏–∑ .env (CS2_SERVER_IPS)
 */
function protectMatchConfigs(req, res, next) {
    console.log(`\nüîê [ServerAuth] ========== –ó–ê–ü–†–û–° –ö /lobby ==========`);
    console.log(`üîê [ServerAuth] URL: ${req.originalUrl}`);
    console.log(`üîê [ServerAuth] –ú–µ—Ç–æ–¥: ${req.method}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP (—É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ Nginx)
    const clientIP = req.ip || req.connection.remoteAddress;
    const realIP = req.headers['x-real-ip'] || req.headers['x-forwarded-for'] || clientIP;
    
    console.log(`üîê [ServerAuth] Client IP: ${clientIP}`);
    console.log(`üîê [ServerAuth] X-Real-IP: ${req.headers['x-real-ip'] || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`üîê [ServerAuth] X-Forwarded-For: ${req.headers['x-forwarded-for'] || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP
    const allowedIPs = getAllowedIPs();
    
    console.log(`üîê [ServerAuth] CS2_SERVER_IPS –∏–∑ .env: "${process.env.CS2_SERVER_IPS || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"`);
    console.log(`üîê [ServerAuth] –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IPs: ${allowedIPs.join(', ')}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ IP
    const ipsToCheck = [clientIP, realIP, req.headers['x-real-ip'], req.headers['x-forwarded-for']?.split(',')[0]?.trim()].filter(Boolean);
    
    console.log(`üîê [ServerAuth] –ü—Ä–æ–≤–µ—Ä—è–µ–º IPs: ${ipsToCheck.join(', ')}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∞–¥—Ä–µ—Å
    const isAllowed = ipsToCheck.some(ip => allowedIPs.includes(ip));
    
    if (isAllowed) {
        console.log(`‚úÖ [ServerAuth] –î–æ—Å—Ç—É–ø –†–ê–ó–†–ï–®–ï–ù –¥–ª—è IP: ${clientIP}`);
        console.log(`üîê [ServerAuth] ===========================================\n`);
        return next();
    }
    
    // –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
    console.warn(`‚õî [ServerAuth] –î–æ—Å—Ç—É–ø –ó–ê–ü–†–ï–©–ï–ù –¥–ª—è IP: ${clientIP}`);
    console.warn(`üîê [ServerAuth] ===========================================\n`);
    return res.status(403).json({ 
        error: 'Access denied',
        message: 'Only authorized CS2 servers can access match configs',
        debug: {
            your_ip: clientIP,
            allowed_ips: allowedIPs,
            env_set: !!process.env.CS2_SERVER_IPS
        }
    });
}

module.exports = {
    protectMatchConfigs,
    getAllowedIPs
};

