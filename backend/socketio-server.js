const { Server } = require('socket.io');
const jwt = require('jsonwebtoken');
const pool = require('./db');

let io = null;

// üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
function createSocketServer(httpServer) {
  console.log('üöÄ [Socket.IO] –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä...');
  
  io = new Server(httpServer, {
    // üéØ –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    cors: {
      origin: process.env.NODE_ENV === 'production' 
        ? ['https://1337community.com', 'https://www.1337community.com']
        : ['http://localhost:3000', 'http://localhost:3001'],
      methods: ['GET', 'POST'],
      credentials: true
    },
    
    // üöÄ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
    transports: ['polling', 'websocket'],
    
    // ‚öôÔ∏è –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    pingTimeout: 60000,
    pingInterval: 25000,
    maxHttpBufferSize: 1e6,
    allowEIO3: true,
    
    // üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    serveClient: false,
    
    // üîß –ü—É—Ç—å
    path: '/socket.io/'
  });

  // üîê Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  io.use(async (socket, next) => {
    try {
      console.log('üîç [Socket.IO] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const token = socket.handshake.auth?.token || 
                   socket.handshake.query?.token ||
                   socket.handshake.headers?.authorization?.replace('Bearer ', '');
      
      if (!token) {
        console.log('‚ùå [Socket.IO] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return next(new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      const result = await pool.query('SELECT id, username, role FROM users WHERE id = $1', [decoded.id]);
      
      if (result.rows.length === 0) {
        console.log('‚ùå [Socket.IO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return next(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      socket.userId = decoded.id;
      socket.user = result.rows[0];
      
      console.log(`‚úÖ [Socket.IO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${socket.user.username} (${socket.userId})`);
      next();
    } catch (error) {
      console.error('‚ùå [Socket.IO] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
      next(new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'));
    }
  });

  // üéØ –°–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  io.on('connection', (socket) => {
    console.log(`üéâ [Socket.IO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω: ${socket.user.username} (${socket.id})`);
    
    // üèÜ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É
    socket.on('join_tournament', (tournamentId) => {
      const roomName = `tournament_${tournamentId}`;
      socket.join(roomName);
      console.log(`üèÜ [Socket.IO] ${socket.user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É ${tournamentId}`);
    });

    // üí¨ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
    socket.on('join_chat', async (chatId) => {
      const roomName = `chat_${chatId}`;
      socket.join(roomName);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const clientsInRoom = await io.in(roomName).allSockets();
      console.log(`üí¨ [Socket.IO] ${socket.user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É ${chatId}, –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomName} —Ç–µ–ø–µ—Ä—å ${clientsInRoom.size} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    });

    // üì® –°–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞
    socket.on('send_message', async (data) => {
      try {
        console.log(`üì® [Socket.IO] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${socket.user.username}:`, data);
        const { chatId, content, type = 'text' } = data;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ —á–∞—Ç–µ
        const participantCheck = await pool.query(
          'SELECT * FROM chat_participants WHERE chat_id = $1 AND user_id = $2',
          [chatId, socket.userId]
        );
        
        console.log(`üîç [Socket.IO] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ ${chatId}: –Ω–∞–π–¥–µ–Ω–æ ${participantCheck.rows.length} –∑–∞–ø–∏—Å–µ–π`);
        
        if (participantCheck.rows.length === 0) {
          console.log(`‚ùå [Socket.IO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user.username} –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ ${chatId}`);
          socket.emit('error', { message: '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞' });
          return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const result = await pool.query(
          'INSERT INTO messages (chat_id, sender_id, content, message_type) VALUES ($1, $2, $3, $4) RETURNING *',
          [chatId, socket.userId, content, type]
        );
        
        const message = result.rows[0];
        message.sender_username = socket.user.username;
        message.sender_avatar = socket.user.avatar_url;

        console.log(`üíæ [Socket.IO] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:`, message);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
        const roomName = `chat_${chatId}`;
        const clientsInRoom = await io.in(roomName).allSockets();
        console.log(`üì° [Socket.IO] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ new_message –≤ –∫–æ–º–Ω–∞—Ç—É ${roomName}, –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clientsInRoom.size}`);
        
        io.to(roomName).emit('new_message', message);
        console.log(`‚úÖ [Socket.IO] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
      } catch (error) {
        console.error('‚ùå [Socket.IO] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
      }
    });

    // üèÜ –°–æ–æ–±—â–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    socket.on('tournament_message', async (data) => {
      try {
        const { tournamentId, content } = data;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const result = await pool.query(
          'INSERT INTO tournament_messages (tournament_id, sender_id, content) VALUES ($1, $2, $3) RETURNING *',
          [tournamentId, socket.userId, content]
        );
        
        const message = result.rows[0];
        message.sender_username = socket.user.username;
        message.sender_avatar = socket.user.avatar_url;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞
        io.to(`tournament_${tournamentId}`).emit('tournament_message', message);
        console.log(`üèÜ [Socket.IO] –°–æ–æ–±—â–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${tournamentId}`);
      } catch (error) {
        console.error('‚ùå [Socket.IO] –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
      }
    });

    // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    socket.on('update_tournament', (data) => {
      const { tournamentId, ...updateData } = data;
      io.to(`tournament_${tournamentId}`).emit('tournament_updated', updateData);
      console.log(`üîÑ [Socket.IO] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    });

    // üö™ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    socket.on('disconnect', (reason) => {
      console.log(`üö™ [Socket.IO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω: ${socket.user.username} (${reason})`);
    });

    // ‚ùå –û—à–∏–±–∫–∞
    socket.on('error', (error) => {
      console.error(`‚ùå [Socket.IO] –û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${socket.user.username}:`, error);
    });
  });

  console.log('‚úÖ [Socket.IO] –°–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  return io;
}

// üéØ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
function getIO() {
  if (!io) {
    throw new Error('Socket.IO —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
  return io;
}

function broadcastToTournament(tournamentId, event, data) {
  if (io) {
    io.to(`tournament_${tournamentId}`).emit(event, data);
  }
}

function broadcastToChat(chatId, event, data) {
  if (io) {
    io.to(`chat_${chatId}`).emit(event, data);
  }
}

module.exports = {
  createSocketServer,
  getIO,
  broadcastToTournament,
  broadcastToChat
}; 