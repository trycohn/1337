const { Server } = require('socket.io');
const jwt = require('jsonwebtoken');
const pool = require('./db');

let io = null;

// üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
function createSocketServer(httpServer) {
  console.log('üöÄ [Socket.IO] –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä...');
  
  io = new Server(httpServer, {
    // üéØ –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    cors: {
      origin: process.env.NODE_ENV === 'production' 
        ? ['https://1337community.com', 'https://www.1337community.com']
        : ['http://localhost:3000', 'http://localhost:3001'],
      methods: ['GET', 'POST'],
      credentials: true
    },
    
    // üöÄ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã: –≤—Ä–µ–º–µ–Ω–Ω–æ —Ç–æ–ª—å–∫–æ polling, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å WS-–æ—à–∏–±–∫–∏ –±–µ–∑ —Ä–µ–±–∏–ª–¥–∞ —Ñ—Ä–æ–Ω—Ç–∞
    transports: ['polling'],
    
    // ‚öôÔ∏è –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    pingTimeout: 30000,
    pingInterval: 20000,
    maxHttpBufferSize: 1e6,
    allowEIO3: false,
    // ‚ùå –ó–∞–ø—Ä–µ—â–∞–µ–º upgrade –¥–æ WebSocket ‚Äî –∫–ª–∏–µ–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ WS
    allowUpgrades: false,
    
    // üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    serveClient: false,
    
    // üîß –ü—É—Ç—å (–∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –±–µ–∑ —Ö–≤–æ—Å—Ç–æ–≤–æ–≥–æ —Å–ª—ç—à–∞)
    path: '/socket.io',

    // üîΩ –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ HTTP handshake (–¥–∞—ë—Ç –º–µ–Ω—å—à–∏–π –≤–µ—Å /socket.io/?)
    perMessageDeflate: {
      threshold: 1024,
      zlibDeflateOptions: { level: 6 },
      zlibInflateOptions: { chunkSize: 16 * 1024 }
    }
  });

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ handshake / transport
  io.engine.on('connection', (rawSocket) => {
    try {
      const transport = rawSocket.transport && rawSocket.transport.name;
      const sid = rawSocket.id;
      const url = rawSocket.request && rawSocket.request.url;
      console.log(`[ENGINE.IO] connection sid=${sid} transport=${transport} url=${url}`);

      rawSocket.on('upgrade', (to) => {
        console.log(`[ENGINE.IO] upgrade sid=${sid} -> ${to && to.name}`);
      });
      rawSocket.on('close', (reason) => {
        console.log(`[ENGINE.IO] close sid=${sid} reason=${reason}`);
      });
    } catch (e) {
      console.log('[ENGINE.IO] connection log error:', e.message);
    }
  });

  io.engine.on('connection_error', (err) => {
    console.log('[ENGINE.IO] connection_error', err && err.code, err && err.message);
  });

  // üîê Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  io.use(async (socket, next) => {
    try {
      console.log('üîç [Socket.IO] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const token = socket.handshake.auth?.token || 
                   socket.handshake.query?.token ||
                   socket.handshake.headers?.authorization?.replace('Bearer ', '');
      
      if (!token) {
        console.log('‚ùå [Socket.IO] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return next(new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      const result = await pool.query('SELECT id, username, role FROM users WHERE id = $1', [decoded.id]);
      
      if (result.rows.length === 0) {
        console.log('‚ùå [Socket.IO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return next(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      socket.userId = decoded.id;
      socket.user = result.rows[0];
      
      console.log(`‚úÖ [Socket.IO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${socket.user.username} (${socket.userId})`);
      next();
    } catch (error) {
      console.error('‚ùå [Socket.IO] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
      next(new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'));
    }
  });

  // üéØ –°–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  io.on('connection', (socket) => {
    console.log(`üéâ [Socket.IO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω: ${socket.user.username} (${socket.id})`);
    
    // üë§ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const userRoomName = `user_${socket.userId}`;
    socket.join(userRoomName);
    io.in(userRoomName).allSockets().then((set) => {
      const size = set ? set.size : 0;
      console.log(`üë§ [Socket.IO] ${socket.user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ ${userRoomName}; –∫–ª–∏–µ–Ω—Ç–æ–≤: ${size}`);
    }).catch(() => {
      console.log(`üë§ [Socket.IO] ${socket.user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ ${userRoomName}`);
    });
    
    // üèÜ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É
    socket.on('join_tournament', (tournamentId) => {
      const roomName = `tournament_${tournamentId}`;
      socket.join(roomName);
      console.log(`üèÜ [Socket.IO] ${socket.user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É ${tournamentId}`);
    });

    // üí¨ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
    socket.on('join_chat', async (chatId) => {
      const roomName = `chat_${chatId}`;
      socket.join(roomName);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const clientsInRoom = await io.in(roomName).allSockets();
      console.log(`üí¨ [Socket.IO] ${socket.user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É ${chatId}, –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomName} —Ç–µ–ø–µ—Ä—å ${clientsInRoom.size} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
    });

    // üì® –°–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞
    socket.on('send_message', async (data) => {
      try {
        console.log(`üì® [Socket.IO] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${socket.user.username}:`, data);
        const { chatId, content, type = 'text' } = data;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ —á–∞—Ç–µ
        const participantCheck = await pool.query(
          'SELECT * FROM chat_participants WHERE chat_id = $1 AND user_id = $2',
          [chatId, socket.userId]
        );
        
        console.log(`üîç [Socket.IO] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ ${chatId}: –Ω–∞–π–¥–µ–Ω–æ ${participantCheck.rows.length} –∑–∞–ø–∏—Å–µ–π`);
        
        if (participantCheck.rows.length === 0) {
          console.log(`‚ùå [Socket.IO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user.username} –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ ${chatId}`);
          socket.emit('error', { message: '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞' });
          return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const result = await pool.query(
          'INSERT INTO messages (chat_id, sender_id, content, message_type) VALUES ($1, $2, $3, $4) RETURNING *',
          [chatId, socket.userId, content, type]
        );
        
        const message = result.rows[0];
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        const userResult = await pool.query(
          'SELECT username, avatar_url FROM users WHERE id = $1',
          [socket.userId]
        );
        
        if (userResult.rows.length > 0) {
          message.sender_username = userResult.rows[0].username;
          message.sender_avatar = userResult.rows[0].avatar_url;
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ socket
          message.sender_username = socket.user.username;
          message.sender_avatar = socket.user.avatar_url;
        }

        console.log(`üíæ [Socket.IO] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:`, message);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
        const roomName = `chat_${chatId}`;
        const clientsInRoom = await io.in(roomName).allSockets();
        console.log(`üì° [Socket.IO] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ new_message –≤ –∫–æ–º–Ω–∞—Ç—É ${roomName}, –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clientsInRoom.size}`);
        
        io.to(roomName).emit('new_message', message);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
        try {
          const participants = await pool.query(
            'SELECT user_id FROM chat_participants WHERE chat_id = $1',
            [chatId]
          );
          
          console.log(`üîî [Socket.IO] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${participants.rows.length} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞`);
          
          for (const participant of participants.rows) {
            const userSockets = await io.in(`user_${participant.user_id}`).allSockets();
            if (userSockets.size > 0) {
              io.to(`user_${participant.user_id}`).emit('new_message', message);
              console.log(`üì± [Socket.IO] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${participant.user_id}`);
            }
          }
        } catch (error) {
          console.error('‚ùå [Socket.IO] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }

        console.log(`‚úÖ [Socket.IO] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
      } catch (error) {
        console.error('‚ùå [Socket.IO] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
      }
    });

    // üèÜ –°–æ–æ–±—â–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    socket.on('tournament_message', async (data) => {
      try {
        const { tournamentId, content } = data;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const result = await pool.query(
          'INSERT INTO tournament_messages (tournament_id, sender_id, content) VALUES ($1, $2, $3) RETURNING *',
          [tournamentId, socket.userId, content]
        );
        
        const message = result.rows[0];
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        const userResult = await pool.query(
          'SELECT username, avatar_url FROM users WHERE id = $1',
          [socket.userId]
        );
        
        if (userResult.rows.length > 0) {
          message.sender_username = userResult.rows[0].username;
          message.sender_avatar = userResult.rows[0].avatar_url;
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ socket
          message.sender_username = socket.user.username;
          message.sender_avatar = socket.user.avatar_url;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞
        io.to(`tournament_${tournamentId}`).emit('tournament_message', message);
        console.log(`üèÜ [Socket.IO] –°–æ–æ–±—â–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${tournamentId}`);
      } catch (error) {
        console.error('‚ùå [Socket.IO] –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
      }
    });

    // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    socket.on('update_tournament', (data) => {
      const { tournamentId, ...updateData } = data;
      io.to(`tournament_${tournamentId}`).emit('tournament_updated', updateData);
      console.log(`üîÑ [Socket.IO] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    });

    // üìñ –°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    socket.on('messages_read', (data) => {
      console.log(`üìñ [Socket.IO] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ messages_read –æ—Ç ${socket.user.username}:`, data);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRoomName = `user_${socket.userId}`;
      
      io.to(userRoomName).emit('messages_read', data);
      console.log(`üìñ [Socket.IO] –°–æ–±—ã—Ç–∏–µ messages_read –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É ${userRoomName}`);
    });

    // üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏ –º–∞—Ç—á–∞
    socket.on('join_lobby', async (data) => {
      try {
        console.log(`üéÆ [Socket.IO] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–±–±–∏ –æ—Ç ${socket.user.username}:`, data);
        const { lobbyId } = data || {};
        if (!lobbyId) {
          socket.emit('error', { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å lobbyId' });
          return;
        }

        const MatchLobbyService = require('./services/matchLobby/MatchLobbyService');
        // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø –∏ —Å—Ä–∞–∑—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–º –∫ –∫–æ–º–Ω–∞—Ç–µ + –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const lobby = await MatchLobbyService.getLobbyInfo(lobbyId, socket.userId);
        if (!lobby.user_invited) {
          socket.emit('error', { message: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–±–±–∏' });
          return;
        }
        const roomName = `lobby_${lobbyId}`;
        socket.join(roomName);
        console.log(`üéÆ [Socket.IO] ${socket.user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏ ${roomName}`);
        socket.emit('lobby_state', lobby);
        // Heartbeat
        try {
          const pool = require('./db');
          await pool.query(
            `INSERT INTO admin_lobby_presence(lobby_id, user_id, last_seen)
             VALUES ($1, $2, CURRENT_TIMESTAMP)
             ON CONFLICT (lobby_id, user_id)
             DO UPDATE SET last_seen = EXCLUDED.last_seen`,
            [lobbyId, socket.userId]
          );
        } catch (_) {}

        // –û—Ç–¥–µ–ª—å–Ω–∞—è –∞–¥–º–∏–Ω‚Äë–∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω‚Äë–ª–æ–±–±–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        const adminRoom = `admin_lobby_${lobbyId}`;
        socket.join(adminRoom);
        try {
          const io = socket.server;
          const sockets = await io.in(adminRoom).allSockets();
          io.to(adminRoom).emit('admin_lobby_presence', { lobbyId: Number(lobbyId), onlineCount: sockets.size });
        } catch (_) {}
      } catch (error) {
        console.error('‚ùå [Socket.IO] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–±–±–∏:', error);
        socket.emit('error', { message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–±–±–∏' });
      }
    });

    // üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω-–ª–æ–±–±–∏ (–∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—Ç—á–∏)
    socket.on('join_admin_lobby', async (data) => {
      try {
        console.log(`üéÆ [Socket.IO] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω-–ª–æ–±–±–∏ –æ—Ç ${socket.user.username}:`, data);
        const { lobbyId } = data || {};
        if (!lobbyId) {
          socket.emit('error', { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å lobbyId' });
          return;
        }

        const pool = require('./db');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø: –ø—Ä–∏–≥–ª–∞—à–µ–Ω –∏–ª–∏ –∞–¥–º–∏–Ω
        const inviteCheck = await pool.query(
          `SELECT i.*, aml.status, aml.created_by
           FROM admin_lobby_invitations i
           JOIN admin_match_lobbies aml ON aml.id = i.lobby_id
           WHERE i.lobby_id = $1 AND i.user_id = $2
           LIMIT 1`,
          [lobbyId, socket.userId]
        );
        
        const isCreator = inviteCheck.rows[0]?.created_by === socket.userId;
        const isAdmin = socket.user.role === 'admin';
        
        if (!inviteCheck.rows[0] && !isAdmin && !isCreator) {
          socket.emit('error', { message: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–±–±–∏' });
          return;
        }

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
        const roomName = `admin_lobby_${lobbyId}`;
        socket.join(roomName);
        console.log(`üéÆ [Socket.IO] ${socket.user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∞–¥–º–∏–Ω-–ª–æ–±–±–∏ ${roomName}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–±–±–∏
        const lobbyRes = await pool.query('SELECT * FROM admin_match_lobbies WHERE id = $1', [lobbyId]);
        if (lobbyRes.rows[0]) {
          socket.emit('lobby_state', lobbyRes.rows[0]);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ
        try {
          await pool.query(
            `INSERT INTO admin_lobby_presence(lobby_id, user_id, last_seen)
             VALUES ($1, $2, CURRENT_TIMESTAMP)
             ON CONFLICT (lobby_id, user_id)
             DO UPDATE SET last_seen = EXCLUDED.last_seen`,
            [lobbyId, socket.userId]
          );
        } catch (_) {}
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–Ω–ª–∞–π–Ω
        try {
          const io = socket.server;
          const sockets = await io.in(roomName).allSockets();
          io.to(roomName).emit('admin_lobby_presence', { lobbyId: Number(lobbyId), onlineCount: sockets.size });
        } catch (_) {}
        
      } catch (error) {
        console.error('‚ùå [Socket.IO] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω-–ª–æ–±–±–∏:', error);
        socket.emit('error', { message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–±–±–∏' });
      }
    });

    // üéÆ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ª–æ–±–±–∏ –º–∞—Ç—á–∞
    socket.on('leave_lobby', (data) => {
      const { lobbyId } = data;
      if (lobbyId) {
        socket.leave(`lobby_${lobbyId}`);
        console.log(`üëã [Socket.IO] ${socket.user.username} –ø–æ–∫–∏–Ω—É–ª –ª–æ–±–±–∏ ${lobbyId}`);
        const adminRoom = `admin_lobby_${lobbyId}`;
        socket.leave(adminRoom);
        try {
          const io = socket.server;
          io.in(adminRoom).allSockets().then((s) => {
            io.to(adminRoom).emit('admin_lobby_presence', { lobbyId: Number(lobbyId), onlineCount: s.size });
          });
        } catch (_) {}
        // Heartbeat (—Ñ–∏–∫—Å –≤–Ω–µ—à–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞)
        try {
          const pool = require('./db');
          pool.query(
            `UPDATE admin_lobby_presence SET last_seen = CURRENT_TIMESTAMP WHERE lobby_id = $1 AND user_id = $2`,
            [lobbyId, socket.userId]
          ).catch(() => {});
        } catch (_) {}
      }
    });

    // üö™ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    socket.on('disconnect', (reason) => {
      console.log(`üö™ [Socket.IO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω: ${socket.user.username} (${reason})`);
    });

    // ‚ùå –û—à–∏–±–∫–∞
    socket.on('error', (error) => {
      console.error(`‚ùå [Socket.IO] –û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${socket.user.username}:`, error);
    });
  });

  console.log('‚úÖ [Socket.IO] –°–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  return io;
}

// üéØ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
function getIO() {
  if (!io) {
    throw new Error('Socket.IO —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
  return io;
}

function broadcastToTournament(tournamentId, event, data) {
  if (io) {
    io.to(`tournament_${tournamentId}`).emit(event, data);
  }
}

function broadcastToChat(chatId, event, data) {
  if (io) {
    io.to(`chat_${chatId}`).emit(event, data);
  }
}

module.exports = {
  createSocketServer,
  getIO,
  broadcastToTournament,
  broadcastToChat
}; 