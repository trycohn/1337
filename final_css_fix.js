#!/usr/bin/env node

/**
 * üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• CSS –ü–†–û–ë–õ–ï–ú
 * –ü—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
 */

const fs = require('fs');
const glob = require('glob');

console.log('üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï CSS –ü–†–û–ë–õ–ï–ú');
console.log('='.repeat(50));

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ CSS —Ñ–∞–π–ª—ã
const files = glob.sync('frontend/src/components/**/*.css');

let totalFixed = 0;

files.forEach(filePath => {
    try {
        let content = fs.readFileSync(filePath, 'utf8');
        let originalContent = content;
        let fixedCount = 0;
        
        console.log(`üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${filePath}`);
        
        // –ü—Ä–æ—Å—Ç–æ–µ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
        // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ /* /* REMOVED ANIMATION: ... */ */ –Ω–∞ /* REMOVED ANIMATION: ... */
        content = content.replace(/\/\* \/\* REMOVED ANIMATION: ([^*]+(?:\*[^\/])*)\*\/ \*\//g, (match, p1) => {
            fixedCount++;
            return `/* REMOVED ANIMATION: ${p1.trim()} */`;
        });
        
        // –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–∏–ø–∞ /* REMOVED ANIMATION: ... */ REMOVED ANIMATION: ... */
        content = content.replace(/\/\* REMOVED ANIMATION: ([^*]+) \*\/ REMOVED ANIMATION: ([^*]+(?:\*[^\/])*) \*\//g, (match, p1, p2) => {
            fixedCount++;
            return `/* REMOVED ANIMATION: ${p2.trim()} */`;
        });
        
        if (content !== originalContent) {
            // –°–æ–∑–¥–∞–µ–º backup
            const backupPath = `${filePath}.final-backup.${Date.now()}`;
            fs.writeFileSync(backupPath, originalContent, 'utf8');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            fs.writeFileSync(filePath, content, 'utf8');
            
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
            console.log(`üì¶ Backup: ${backupPath}`);
            console.log(`üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}`);
            totalFixed += fixedCount;
        } else {
            console.log(`‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: ${filePath}`);
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: ${filePath}:`, error.message);
    }
});

console.log('='.repeat(50));
console.log(`‚úÖ –ó–ê–í–ï–†–®–ï–ù–û! –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFixed}`); 