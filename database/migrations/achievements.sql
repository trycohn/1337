-- ==============================================
-- –ú–ò–ì–†–ê–¶–ò–ò –î–õ–Ø –°–ò–°–¢–ï–ú–´ –î–û–°–¢–ò–ñ–ï–ù–ò–ô
-- ==============================================

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
CREATE TABLE IF NOT EXISTS achievement_categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    icon VARCHAR(20),
    description TEXT,
    sort_order INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
CREATE TABLE IF NOT EXISTS achievements (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    icon VARCHAR(20) DEFAULT 'üèÜ',
    category_id INTEGER REFERENCES achievement_categories(id),
    rarity VARCHAR(20) DEFAULT 'common' CHECK (rarity IN ('common', 'rare', 'epic', 'legendary')),
    xp_reward INTEGER DEFAULT 0,
    conditions JSONB, -- JSON —Å —É—Å–ª–æ–≤–∏—è–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    is_active BOOLEAN DEFAULT true,
    is_hidden BOOLEAN DEFAULT false, -- –°–∫—Ä—ã—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è)
    unlock_order INTEGER, -- –ü–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
CREATE TABLE IF NOT EXISTS user_achievements (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    achievement_id INTEGER NOT NULL REFERENCES achievements(id) ON DELETE CASCADE,
    unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    progress JSONB, -- JSON —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    is_new BOOLEAN DEFAULT true, -- –û—Ç–º–µ—Ç–∫–∞ –æ —Ç–æ–º, —á—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–µ (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    notified_at TIMESTAMP, -- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω
    UNIQUE(user_id, achievement_id)
);

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
CREATE TABLE IF NOT EXISTS user_progress (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE UNIQUE,
    total_xp INTEGER DEFAULT 0,
    level INTEGER DEFAULT 1,
    tournaments_created INTEGER DEFAULT 0,
    tournaments_won INTEGER DEFAULT 0,
    tournaments_participated INTEGER DEFAULT 0,
    matches_won INTEGER DEFAULT 0,
    matches_lost INTEGER DEFAULT 0,
    matches_draw INTEGER DEFAULT 0,
    friends_count INTEGER DEFAULT 0,
    messages_sent INTEGER DEFAULT 0,
    daily_streak_current INTEGER DEFAULT 0,
    daily_streak_longest INTEGER DEFAULT 0,
    last_login_date DATE,
    profile_completion_percentage INTEGER DEFAULT 0,
    steam_connected BOOLEAN DEFAULT false,
    faceit_connected BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
CREATE TABLE IF NOT EXISTS achievement_action_logs (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    action_type VARCHAR(100) NOT NULL,
    action_data JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ==============================================
-- –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–ê–ë–õ–ò–¶
-- ==============================================

-- –®–∞–≥ 1: –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ achievement_categories
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievement_categories' AND column_name = 'name') THEN
        ALTER TABLE achievement_categories ADD COLUMN name VARCHAR(100) NOT NULL DEFAULT '–ö–∞—Ç–µ–≥–æ—Ä–∏—è';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievement_categories' AND column_name = 'icon') THEN
        ALTER TABLE achievement_categories ADD COLUMN icon VARCHAR(50) DEFAULT 'üèÜ';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievement_categories' AND column_name = 'description') THEN
        ALTER TABLE achievement_categories ADD COLUMN description TEXT;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievement_categories' AND column_name = 'sort_order') THEN
        ALTER TABLE achievement_categories ADD COLUMN sort_order INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievement_categories' AND column_name = 'created_at') THEN
        ALTER TABLE achievement_categories ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievement_categories' AND column_name = 'updated_at') THEN
        ALTER TABLE achievement_categories ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
    END IF;
END $$;

-- –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ achievements
DO $$ 
BEGIN
    -- –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ title (–∏–∑ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π)
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'title') THEN
        -- –£–±–∏—Ä–∞–µ–º NOT NULL constraint —Å title –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        ALTER TABLE achievements ALTER COLUMN title DROP NOT NULL;
    ELSE
        -- –î–æ–±–∞–≤–ª—è–µ–º title –∫–∞–∫ nullable –ø–æ–ª–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        ALTER TABLE achievements ADD COLUMN title VARCHAR(255);
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ category (–∏–∑ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π)
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'category') THEN
        -- –£–±–∏—Ä–∞–µ–º NOT NULL constraint —Å category –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        ALTER TABLE achievements ALTER COLUMN category DROP NOT NULL;
    ELSE
        -- –î–æ–±–∞–≤–ª—è–µ–º category –∫–∞–∫ nullable –ø–æ–ª–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        ALTER TABLE achievements ADD COLUMN category VARCHAR(255);
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ condition_type (–∏–∑ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π)
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'condition_type') THEN
        -- –£–±–∏—Ä–∞–µ–º NOT NULL constraint —Å condition_type –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        ALTER TABLE achievements ALTER COLUMN condition_type DROP NOT NULL;
    ELSE
        -- –î–æ–±–∞–≤–ª—è–µ–º condition_type –∫–∞–∫ nullable –ø–æ–ª–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        ALTER TABLE achievements ADD COLUMN condition_type VARCHAR(255);
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ condition_value (–∏–∑ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π)
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'condition_value') THEN
        -- –£–±–∏—Ä–∞–µ–º NOT NULL constraint —Å condition_value –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        ALTER TABLE achievements ALTER COLUMN condition_value DROP NOT NULL;
    ELSE
        -- –î–æ–±–∞–≤–ª—è–µ–º condition_value –∫–∞–∫ nullable –ø–æ–ª–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        ALTER TABLE achievements ADD COLUMN condition_value INTEGER;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'name') THEN
        ALTER TABLE achievements ADD COLUMN name VARCHAR(255) NOT NULL DEFAULT '–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'description') THEN
        ALTER TABLE achievements ADD COLUMN description TEXT DEFAULT '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'icon') THEN
        ALTER TABLE achievements ADD COLUMN icon VARCHAR(50) DEFAULT 'üèÜ';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'rarity') THEN
        ALTER TABLE achievements ADD COLUMN rarity VARCHAR(20) DEFAULT 'common';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'xp_reward') THEN
        ALTER TABLE achievements ADD COLUMN xp_reward INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'conditions') THEN
        ALTER TABLE achievements ADD COLUMN conditions JSONB DEFAULT '{}';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'is_active') THEN
        ALTER TABLE achievements ADD COLUMN is_active BOOLEAN DEFAULT TRUE;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'is_hidden') THEN
        ALTER TABLE achievements ADD COLUMN is_hidden BOOLEAN DEFAULT FALSE;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'unlock_order') THEN
        ALTER TABLE achievements ADD COLUMN unlock_order INTEGER;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'created_at') THEN
        ALTER TABLE achievements ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'updated_at') THEN
        ALTER TABLE achievements ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
    END IF;
END $$;

-- –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º category_id –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievements' AND column_name = 'category_id') THEN
        ALTER TABLE achievements ADD COLUMN category_id INTEGER;
    END IF;
END $$;

-- –®–∞–≥ 4: –î–æ–±–∞–≤–ª—è–µ–º foreign key constraint –æ—Ç–¥–µ–ª—å–Ω–æ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name LIKE '%achievements_category_id_fkey%' 
        AND table_name = 'achievements'
    ) THEN
        ALTER TABLE achievements ADD CONSTRAINT achievements_category_id_fkey FOREIGN KEY (category_id) REFERENCES achievement_categories(id);
    END IF;
END $$;

-- –®–∞–≥ 5: –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ rarity, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º CHECK constraint
DO $$
BEGIN
    -- –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è rarity –Ω–∞ 'common'
    UPDATE achievements 
    SET rarity = 'common' 
    WHERE rarity IS NULL OR rarity NOT IN ('common', 'rare', 'epic', 'legendary');
    
    -- –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º CHECK constraint
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name LIKE '%achievements_rarity_check%' 
        AND table_name = 'achievements'
    ) THEN
        ALTER TABLE achievements ADD CONSTRAINT achievements_rarity_check CHECK (rarity IN ('common', 'rare', 'epic', 'legendary'));
    END IF;
END $$;

-- –®–∞–≥ 6: –û–±–Ω–æ–≤–ª—è–µ–º user_achievements
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_achievements' AND column_name = 'user_id') THEN
        ALTER TABLE user_achievements ADD COLUMN user_id INTEGER NOT NULL DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_achievements' AND column_name = 'achievement_id') THEN
        ALTER TABLE user_achievements ADD COLUMN achievement_id INTEGER NOT NULL DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_achievements' AND column_name = 'unlocked_at') THEN
        ALTER TABLE user_achievements ADD COLUMN unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_achievements' AND column_name = 'progress') THEN
        ALTER TABLE user_achievements ADD COLUMN progress JSONB DEFAULT '{}';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_achievements' AND column_name = 'is_new') THEN
        ALTER TABLE user_achievements ADD COLUMN is_new BOOLEAN DEFAULT TRUE;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_achievements' AND column_name = 'notified_at') THEN
        ALTER TABLE user_achievements ADD COLUMN notified_at TIMESTAMP;
    END IF;
END $$;

-- –®–∞–≥ 7: –û–±–Ω–æ–≤–ª—è–µ–º user_progress
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'user_id') THEN
        ALTER TABLE user_progress ADD COLUMN user_id INTEGER NOT NULL DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'total_xp') THEN
        ALTER TABLE user_progress ADD COLUMN total_xp INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'level') THEN
        ALTER TABLE user_progress ADD COLUMN level INTEGER DEFAULT 1;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'tournaments_created') THEN
        ALTER TABLE user_progress ADD COLUMN tournaments_created INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'tournaments_won') THEN
        ALTER TABLE user_progress ADD COLUMN tournaments_won INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'tournaments_participated') THEN
        ALTER TABLE user_progress ADD COLUMN tournaments_participated INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'matches_won') THEN
        ALTER TABLE user_progress ADD COLUMN matches_won INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'matches_lost') THEN
        ALTER TABLE user_progress ADD COLUMN matches_lost INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'matches_draw') THEN
        ALTER TABLE user_progress ADD COLUMN matches_draw INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'friends_count') THEN
        ALTER TABLE user_progress ADD COLUMN friends_count INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'messages_sent') THEN
        ALTER TABLE user_progress ADD COLUMN messages_sent INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'daily_streak_current') THEN
        ALTER TABLE user_progress ADD COLUMN daily_streak_current INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'daily_streak_longest') THEN
        ALTER TABLE user_progress ADD COLUMN daily_streak_longest INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'last_login_date') THEN
        ALTER TABLE user_progress ADD COLUMN last_login_date DATE;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'profile_completion_percentage') THEN
        ALTER TABLE user_progress ADD COLUMN profile_completion_percentage INTEGER DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'steam_connected') THEN
        ALTER TABLE user_progress ADD COLUMN steam_connected BOOLEAN DEFAULT FALSE;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'faceit_connected') THEN
        ALTER TABLE user_progress ADD COLUMN faceit_connected BOOLEAN DEFAULT FALSE;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'created_at') THEN
        ALTER TABLE user_progress ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'user_progress' AND column_name = 'updated_at') THEN
        ALTER TABLE user_progress ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
    END IF;
END $$;

-- –®–∞–≥ 8: –û–±–Ω–æ–≤–ª—è–µ–º achievement_action_logs
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievement_action_logs' AND column_name = 'user_id') THEN
        ALTER TABLE achievement_action_logs ADD COLUMN user_id INTEGER NOT NULL DEFAULT 0;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievement_action_logs' AND column_name = 'action_type') THEN
        ALTER TABLE achievement_action_logs ADD COLUMN action_type VARCHAR(100) NOT NULL DEFAULT 'unknown';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievement_action_logs' AND column_name = 'action_data') THEN
        ALTER TABLE achievement_action_logs ADD COLUMN action_data JSONB DEFAULT '{}';
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'achievement_action_logs' AND column_name = 'created_at') THEN
        ALTER TABLE achievement_action_logs ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
    END IF;
END $$;

-- –®–∞–≥ 9: –î–æ–±–∞–≤–ª—è–µ–º UNIQUE constraint –¥–ª—è user_achievements
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'user_achievements_user_achievement_unique' 
        AND table_name = 'user_achievements'
    ) THEN
        ALTER TABLE user_achievements ADD CONSTRAINT user_achievements_user_achievement_unique UNIQUE (user_id, achievement_id);
    END IF;
END $$;

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
CREATE INDEX IF NOT EXISTS idx_achievements_category ON achievements(category_id);
CREATE INDEX IF NOT EXISTS idx_achievements_rarity ON achievements(rarity);
CREATE INDEX IF NOT EXISTS idx_achievements_active ON achievements(is_active);
CREATE INDEX IF NOT EXISTS idx_user_achievements_user ON user_achievements(user_id);
CREATE INDEX IF NOT EXISTS idx_user_achievements_achievement ON user_achievements(achievement_id);
CREATE INDEX IF NOT EXISTS idx_user_achievements_unlocked ON user_achievements(unlocked_at);
CREATE INDEX IF NOT EXISTS idx_user_progress_level ON user_progress(level);
CREATE INDEX IF NOT EXISTS idx_user_progress_xp ON user_progress(total_xp);
CREATE INDEX IF NOT EXISTS idx_user_action ON achievement_action_logs(user_id, action_type);
CREATE INDEX IF NOT EXISTS idx_action_created_at ON achievement_action_logs(created_at);

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
DROP TRIGGER IF EXISTS update_achievement_categories_updated_at ON achievement_categories CASCADE;
CREATE TRIGGER update_achievement_categories_updated_at 
    BEFORE UPDATE ON achievement_categories 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_achievements_updated_at ON achievements CASCADE;
CREATE TRIGGER update_achievements_updated_at 
    BEFORE UPDATE ON achievements 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_user_progress_updated_at ON user_progress CASCADE;
CREATE TRIGGER update_user_progress_updated_at 
    BEFORE UPDATE ON user_progress 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ XP
CREATE OR REPLACE FUNCTION calculate_level_from_xp(xp INTEGER)
RETURNS INTEGER AS $$
BEGIN
    IF xp < 1000 THEN
        RETURN 1;
    END IF;
    
    -- –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π: –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ XP
    RETURN LEAST(100, FLOOR(SQRT(xp / 1000)) + 1);
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CREATE OR REPLACE FUNCTION update_user_progress(
    p_user_id INTEGER,
    p_action_type VARCHAR(100),
    p_action_data JSONB DEFAULT '{}'::jsonb
)
RETURNS VOID AS $$
DECLARE
    current_progress user_progress%ROWTYPE;
    old_level INTEGER;
    new_level INTEGER;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    SELECT * INTO current_progress 
    FROM user_progress 
    WHERE user_id = p_user_id;
    
    IF NOT FOUND THEN
        INSERT INTO user_progress (user_id) VALUES (p_user_id);
        SELECT * INTO current_progress 
        FROM user_progress 
        WHERE user_id = p_user_id;
    END IF;
    
    old_level := current_progress.level;
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    CASE p_action_type
        WHEN 'tournament_created' THEN
            UPDATE user_progress 
            SET tournaments_created = tournaments_created + 1,
                total_xp = total_xp + 100
            WHERE user_id = p_user_id;
            
        WHEN 'tournament_won' THEN
            UPDATE user_progress 
            SET tournaments_won = tournaments_won + 1,
                total_xp = total_xp + 500
            WHERE user_id = p_user_id;
            
        WHEN 'tournament_participated' THEN
            UPDATE user_progress 
            SET tournaments_participated = tournaments_participated + 1,
                total_xp = total_xp + 50
            WHERE user_id = p_user_id;
            
        WHEN 'match_won' THEN
            UPDATE user_progress 
            SET matches_won = matches_won + 1,
                total_xp = total_xp + 25
            WHERE user_id = p_user_id;
            
        WHEN 'match_lost' THEN
            UPDATE user_progress 
            SET matches_lost = matches_lost + 1,
                total_xp = total_xp + 10
            WHERE user_id = p_user_id;
            
        WHEN 'match_draw' THEN
            UPDATE user_progress 
            SET matches_draw = matches_draw + 1,
                total_xp = total_xp + 15
            WHERE user_id = p_user_id;
            
        WHEN 'friend_added' THEN
            UPDATE user_progress 
            SET friends_count = friends_count + 1,
                total_xp = total_xp + 20
            WHERE user_id = p_user_id;
            
        WHEN 'message_sent' THEN
            UPDATE user_progress 
            SET messages_sent = messages_sent + 1,
                total_xp = total_xp + 1
            WHERE user_id = p_user_id;
            
        WHEN 'daily_login' THEN
            UPDATE user_progress 
            SET daily_streak_current = CASE 
                    WHEN last_login_date = CURRENT_DATE - INTERVAL '1 day' 
                    THEN daily_streak_current + 1
                    ELSE 1
                END,
                daily_streak_longest = GREATEST(daily_streak_longest, 
                    CASE 
                        WHEN last_login_date = CURRENT_DATE - INTERVAL '1 day' 
                        THEN daily_streak_current + 1
                        ELSE 1
                    END),
                last_login_date = CURRENT_DATE,
                total_xp = total_xp + (daily_streak_current * 5)
            WHERE user_id = p_user_id;
            
        WHEN 'profile_updated' THEN
            -- –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            DECLARE
                completion_percentage INTEGER;
            BEGIN
                SELECT CASE 
                    WHEN COUNT(*) = 0 THEN 0
                    ELSE ROUND((COUNT(CASE WHEN 
                        (username IS NOT NULL AND username != '') OR
                        (email IS NOT NULL AND email != '') OR
                        (first_name IS NOT NULL AND first_name != '') OR
                        (last_name IS NOT NULL AND last_name != '') OR
                        (bio IS NOT NULL AND bio != '') OR
                        (avatar_url IS NOT NULL AND avatar_url != '') OR
                        (steam_id IS NOT NULL AND steam_id != '') OR
                        (faceit_username IS NOT NULL AND faceit_username != '')
                        THEN 1 END) * 100.0 / 8))
                END INTO completion_percentage
                FROM users WHERE id = p_user_id;
                
                UPDATE user_progress 
                SET profile_completion_percentage = completion_percentage,
                    total_xp = total_xp + GREATEST(0, completion_percentage - current_progress.profile_completion_percentage)
                WHERE user_id = p_user_id;
            END;
            
        WHEN 'steam_connected' THEN
            UPDATE user_progress 
            SET steam_connected = true,
                total_xp = total_xp + 100
            WHERE user_id = p_user_id;
            
        WHEN 'faceit_connected' THEN
            UPDATE user_progress 
            SET faceit_connected = true,
                total_xp = total_xp + 100
            WHERE user_id = p_user_id;
    END CASE;
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ XP
    SELECT total_xp INTO current_progress.total_xp 
    FROM user_progress WHERE user_id = p_user_id;
    
    new_level := calculate_level_from_xp(current_progress.total_xp);
    
    UPDATE user_progress 
    SET level = new_level 
    WHERE user_id = p_user_id;
    
    -- –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    INSERT INTO achievement_action_logs (user_id, action_type, action_data)
    VALUES (p_user_id, p_action_type, p_action_data);
    
    -- –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    IF new_level > old_level THEN
        INSERT INTO achievement_action_logs (user_id, action_type, action_data)
        VALUES (p_user_id, 'level_up', jsonb_build_object('old_level', old_level, 'new_level', new_level));
    END IF;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
CREATE OR REPLACE FUNCTION check_and_unlock_achievements(p_user_id INTEGER)
RETURNS TABLE(achievement_id INTEGER, achievement_name VARCHAR, newly_unlocked BOOLEAN) AS $$
DECLARE
    achievement_record RECORD;
    user_stats user_progress%ROWTYPE;
    conditions_met BOOLEAN;
    is_unlocked BOOLEAN;
    is_new_unlock BOOLEAN;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SELECT * INTO user_stats FROM user_progress WHERE user_id = p_user_id;
    
    -- –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, —Å–æ–∑–¥–∞–µ–º –µ—ë
    IF NOT FOUND THEN
        PERFORM update_user_progress(p_user_id, 'profile_created');
        SELECT * INTO user_stats FROM user_progress WHERE user_id = p_user_id;
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    FOR achievement_record IN 
        SELECT a.* FROM achievements a 
        WHERE a.is_active = true
        ORDER BY a.unlock_order NULLS LAST, a.id
    LOOP
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ
        SELECT EXISTS(
            SELECT 1 FROM user_achievements 
            WHERE user_id = p_user_id AND achievement_id = achievement_record.id
        ) INTO is_unlocked;
        
        -- –ï—Å–ª–∏ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        IF is_unlocked THEN
            CONTINUE;
        END IF;
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        conditions_met := false;
        
        -- –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        CASE achievement_record.name
            WHEN '–ü–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä' THEN
                conditions_met := user_stats.tournaments_created >= 1;
            WHEN '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å' THEN
                conditions_met := user_stats.tournaments_won >= 1;
            WHEN '–û–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫' THEN
                conditions_met := user_stats.tournaments_participated >= 10;
            WHEN '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞' THEN
                conditions_met := user_stats.friends_count >= 5;
            WHEN '–ë–æ–ª—Ç—É–Ω' THEN
                conditions_met := user_stats.messages_sent >= 100;
            WHEN '–ü—Ä–µ–¥–∞–Ω–Ω—ã–π' THEN
                conditions_met := user_stats.daily_streak_current >= 7;
            WHEN '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü' THEN
                conditions_met := user_stats.daily_streak_longest >= 30;
            WHEN '–£—Ä–æ–≤–µ–Ω—å 10' THEN
                conditions_met := user_stats.level >= 10;
            WHEN '–ú–∞—Å—Ç–µ—Ä' THEN
                conditions_met := user_stats.level >= 50;
            WHEN '–õ–µ–≥–µ–Ω–¥–∞' THEN
                conditions_met := user_stats.level >= 100;
            WHEN '–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å' THEN
                conditions_met := user_stats.profile_completion_percentage >= 100;
            WHEN 'Steam –ø–æ–¥–∫–ª—é—á–µ–Ω' THEN
                conditions_met := user_stats.steam_connected = true;
            WHEN 'FACEIT –ø–æ–¥–∫–ª—é—á–µ–Ω' THEN
                conditions_met := user_stats.faceit_connected = true;
            ELSE
                -- –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º JSONB
                IF achievement_record.conditions IS NOT NULL THEN
                    -- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ JSONB —É—Å–ª–æ–≤–∏–π
                    conditions_met := false;
                END IF;
        END CASE;
        
        -- –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        IF conditions_met THEN
            INSERT INTO user_achievements (user_id, achievement_id)
            VALUES (p_user_id, achievement_record.id);
            
            -- –î–æ–±–∞–≤–ª—è–µ–º XP –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            UPDATE user_progress 
            SET total_xp = total_xp + achievement_record.xp_reward
            WHERE user_id = p_user_id;
            
            -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
            achievement_id := achievement_record.id;
            achievement_name := achievement_record.name;
            newly_unlocked := true;
            RETURN NEXT;
        END IF;
    END LOOP;
    
    RETURN;
END;
$$ LANGUAGE plpgsql;

-- =================================================================== 
-- –í–°–¢–ê–í–ö–ê –ë–ê–ó–û–í–´–• –î–ê–ù–ù–´–• (–¢–û–õ–¨–ö–û –ü–û–°–õ–ï –í–°–ï–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–¢–†–£–ö–¢–£–†–´)
-- ===================================================================

-- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM achievement_categories WHERE name = '–¢—É—Ä–Ω–∏—Ä—ã') THEN
        INSERT INTO achievement_categories (name, icon, description, sort_order) 
        VALUES ('–¢—É—Ä–Ω–∏—Ä—ã', 'üèÜ', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç—É—Ä–Ω–∏—Ä–∞–º–∏', 1);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM achievement_categories WHERE name = '–ú–∞—Ç—á–∏') THEN
        INSERT INTO achievement_categories (name, icon, description, sort_order) 
        VALUES ('–ú–∞—Ç—á–∏', '‚öîÔ∏è', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –º–∞—Ç—á–∞—Ö –∏ –∏–≥—Ä–∞—Ö', 2);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM achievement_categories WHERE name = '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ') THEN
        INSERT INTO achievement_categories (name, icon, description, sort_order) 
        VALUES ('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', 'üë•', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è', 3);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM achievement_categories WHERE name = '–°–µ—Ä–∏–∏') THEN
        INSERT INTO achievement_categories (name, icon, description, sort_order) 
        VALUES ('–°–µ—Ä–∏–∏', 'üî•', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ', 4);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM achievement_categories WHERE name = '–û—Å–æ–±—ã–µ') THEN
        INSERT INTO achievement_categories (name, icon, description, sort_order) 
        VALUES ('–û—Å–æ–±—ã–µ', 'üíé', '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ —Ä–µ–¥–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 5);
    END IF;
END $$;

-- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
DO $$
DECLARE
    cat_tournaments INTEGER;
    cat_matches INTEGER;
    cat_social INTEGER;
    cat_streaks INTEGER;
    cat_special INTEGER;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    SELECT id INTO cat_tournaments FROM achievement_categories WHERE name = '–¢—É—Ä–Ω–∏—Ä—ã';
    SELECT id INTO cat_matches FROM achievement_categories WHERE name = '–ú–∞—Ç—á–∏';
    SELECT id INTO cat_social FROM achievement_categories WHERE name = '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ';
    SELECT id INTO cat_streaks FROM achievement_categories WHERE name = '–°–µ—Ä–∏–∏';
    SELECT id INTO cat_special FROM achievement_categories WHERE name = '–û—Å–æ–±—ã–µ';
    
    -- –í—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    IF NOT EXISTS (SELECT 1 FROM achievements WHERE name = '–ü–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä') THEN
        INSERT INTO achievements (name, description, icon, category_id, rarity, xp_reward, conditions)
        VALUES ('–ü–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä', '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä', 'üéØ', cat_tournaments, 'common', 100, '{"tournaments_created": 1}'::jsonb);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM achievements WHERE name = '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä') THEN
        INSERT INTO achievements (name, description, icon, category_id, rarity, xp_reward, conditions)
        VALUES ('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä', '–°–æ–∑–¥–∞–π—Ç–µ 5 —Ç—É—Ä–Ω–∏—Ä–æ–≤', 'üìã', cat_tournaments, 'rare', 250, '{"tournaments_created": 5}'::jsonb);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM achievements WHERE name = '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞') THEN
        INSERT INTO achievements (name, description, icon, category_id, rarity, xp_reward, conditions)
        VALUES ('–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞', '–í—ã–∏–≥—Ä–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä', 'ü•á', cat_tournaments, 'rare', 200, '{"tournaments_won": 1}'::jsonb);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM achievements WHERE name = '–ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å') THEN
        INSERT INTO achievements (name, description, icon, category_id, rarity, xp_reward, conditions)
        VALUES ('–ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å', '–í—ã–∏–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á', 'ü©∏', cat_matches, 'common', 50, '{"matches_won": 1}'::jsonb);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM achievements WHERE name = '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π') THEN
        INSERT INTO achievements (name, description, icon, category_id, rarity, xp_reward, conditions)
        VALUES ('–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–î–æ–±–∞–≤—å—Ç–µ 5 –¥—Ä—É–∑–µ–π', 'üëã', cat_social, 'common', 75, '{"friends_count": 5}'::jsonb);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM achievements WHERE name = '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ') THEN
        INSERT INTO achievements (name, description, icon, category_id, rarity, xp_reward, conditions)
        VALUES ('–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ', '–ó–∞—Ö–æ–¥–∏—Ç–µ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥', 'üìÖ', cat_streaks, 'common', 60, '{"daily_streak_current": 3}'::jsonb);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM achievements WHERE name = 'Steam –ø–æ–¥–∫–ª—é—á–µ–Ω') THEN
        INSERT INTO achievements (name, description, icon, category_id, rarity, xp_reward, conditions)
        VALUES ('Steam –ø–æ–¥–∫–ª—é—á–µ–Ω', '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ Steam –∞–∫–∫–∞—É–Ω—Ç', 'üéÆ', cat_special, 'common', 100, '{"steam_connected": true}'::jsonb);
    END IF;
END $$;

-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
COMMENT ON TABLE achievement_categories IS '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏';
COMMENT ON TABLE achievements IS '–û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π';
COMMENT ON TABLE user_achievements IS '–°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏';
COMMENT ON TABLE user_progress IS '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
COMMENT ON TABLE achievement_action_logs IS '–õ–æ–≥–∏ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞';

COMMENT ON FUNCTION update_user_progress IS '–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π';
COMMENT ON FUNCTION check_and_unlock_achievements IS '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
COMMENT ON FUNCTION calculate_level_from_xp IS '–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ XP'; 