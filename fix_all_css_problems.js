#!/usr/bin/env node

/**
 * üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö CSS –ø—Ä–æ–±–ª–µ–º
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

console.log('üîß –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• CSS –ü–†–û–ë–õ–ï–ú');
console.log('='.repeat(50));

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ CSS —Ñ–∞–π–ª—ã –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
const cssFiles = [
    'frontend/src/components/**/*.css',
    'frontend/src/components/tournament/**/*.css'
];

let totalFixed = 0;

cssFiles.forEach(pattern => {
    try {
        const files = glob.sync(pattern);
        
        files.forEach(filePath => {
            try {
                let content = fs.readFileSync(filePath, 'utf8');
                let originalContent = content;
                let fixedCount = 0;
                
                console.log(`üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${filePath}`);
                
                // –ü–∞—Ç—Ç–µ—Ä–Ω 1: /* REMOVED ANIMATION: */ REMOVED ANIMATION: something; */
                const pattern1 = /\/\* REMOVED ANIMATION: \*\/ REMOVED ANIMATION: ([^}*]+); \*\//g;
                content = content.replace(pattern1, (match, p1) => {
                    fixedCount++;
                    return `/* REMOVED ANIMATION: ${p1.trim()}; */`;
                });
                
                // –ü–∞—Ç—Ç–µ—Ä–Ω 2: /* REMOVED ANIMATION: something */ */
                const pattern2 = /\/\* REMOVED ANIMATION: ([^*]+) \*\/ \*\//g;
                content = content.replace(pattern2, (match, p1) => {
                    fixedCount++;
                    return `/* REMOVED ANIMATION: ${p1.trim()} */`;
                });
                
                // –ü–∞—Ç—Ç–µ—Ä–Ω 3: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ REMOVED ANIMATION
                const pattern3 = /\/\* REMOVED ANIMATION: \*\/ REMOVED ANIMATION: \/\* REMOVED ANIMATION: ([^}*]+) \*\/ \*\/ \*\//g;
                content = content.replace(pattern3, (match, p1) => {
                    fixedCount++;
                    return `/* REMOVED ANIMATION: ${p1.trim()} */`;
                });
                
                // –ü–∞—Ç—Ç–µ—Ä–Ω 4: REMOVED ANIMATION: –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                const pattern4 = /REMOVED ANIMATION: ([^;]+);/g;
                content = content.replace(pattern4, (match, p1) => {
                    if (!match.includes('/*')) {
                        fixedCount++;
                        return `/* REMOVED ANIMATION: ${p1.trim()}; */`;
                    }
                    return match;
                });
                
                // –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                if (content !== originalContent) {
                    // –°–æ–∑–¥–∞–µ–º backup
                    const backupPath = `${filePath}.universal-fix-backup.${Date.now()}`;
                    fs.writeFileSync(backupPath, originalContent, 'utf8');
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    fs.writeFileSync(filePath, content, 'utf8');
                    
                    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
                    console.log(`üì¶ Backup: ${backupPath}`);
                    console.log(`üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${fixedCount}`);
                    totalFixed += fixedCount;
                } else {
                    console.log(`‚úÖ –§–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: ${filePath}`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
            }
        });
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É ${pattern}:`, error.message);
    }
});

console.log('='.repeat(50));
console.log(`‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!`);
console.log(`üéØ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${totalFixed}`); 