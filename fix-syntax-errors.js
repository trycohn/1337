const fs = require('fs');
const path = require('path');

const FILE_PATH = 'frontend/src/components/TournamentDetails.js';

console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ TournamentDetails.js');

function fixSyntaxErrors() {
    try {
        let content = fs.readFileSync(FILE_PATH, 'utf8');
        
        console.log('üìñ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä:', Math.round(content.length / 1024), 'KB');
        
        // 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫');
        
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å 4 –ª–∏—à–Ω–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏ –ø–µ—Ä–µ–¥ export
        const endPattern = /\s*\}\s*\}\s*\}\s*\}\s*export default TournamentDetails;/;
        if (content.match(endPattern)) {
            content = content.replace(endPattern, '\n}\n\nexport default TournamentDetails;');
            console.log('‚úÖ –£–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ (4 —à—Ç.)');
        } else {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            const altPattern = /(\s*\}\s*){2,}\s*export default TournamentDetails;/;
            if (content.match(altPattern)) {
                content = content.replace(altPattern, '\n}\n\nexport default TournamentDetails;');
                console.log('‚úÖ –£–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω)');
            }
        }
        
        // 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ—Ä–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å isCounterStrike2
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ isCounterStrike2');
        
        // –ò—â–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ isCounterStrike2 –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const brokenCS2Pattern = /\s+if \(tournament && isCounterStrike2\(tournament\.game\) && maps\.length > 0\) \{\s+\/\/ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –ø–æ –ø–æ–±–µ–¥–∞–º –Ω–∞ –∫–∞—Ä—Ç–∞—Ö/;
        if (content.match(brokenCS2Pattern)) {
            // –≠—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ isCounterStrike2 - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç');
        }
        
        // 3. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Å–∫–æ–±–æ–∫
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ–±–æ–∫');
        
        const openBraces = (content.match(/\{/g) || []).length;
        const closeBraces = (content.match(/\}/g) || []).length;
        
        console.log(`–û—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫: ${openBraces}`);
        console.log(`–ó–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫: ${closeBraces}`);
        console.log(`–î–∏—Å–±–∞–ª–∞–Ω—Å: ${openBraces - closeBraces}`);
        
        if (openBraces !== closeBraces) {
            console.log('‚ö†Ô∏è –î–∏—Å–±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
            
            if (closeBraces > openBraces) {
                // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ - —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ
                const excess = closeBraces - openBraces;
                console.log(`–£–¥–∞–ª—è–µ–º ${excess} –ª–∏—à–Ω–∏—Ö –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫`);
                
                // –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏ –ø–µ—Ä–µ–¥ export
                const lines = content.split('\n');
                const exportIndex = lines.findIndex(line => line.includes('export default'));
                
                if (exportIndex !== -1) {
                    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏ –ø–µ—Ä–µ–¥ export
                    let removed = 0;
                    for (let i = exportIndex - 1; i >= 0 && removed < excess; i--) {
                        if (lines[i].trim() === '}') {
                            lines.splice(i, 1);
                            removed++;
                        }
                    }
                    content = lines.join('\n');
                    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${removed} –ª–∏—à–Ω–∏—Ö –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫`);
                }
            }
        }
        
        // 4. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å JSX —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ JSX —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞');
        
        // –ò—â–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
        const jsxElements = content.match(/<[a-zA-Z][^>]*>/g) || [];
        const closingElements = content.match(/<\/[a-zA-Z][^>]*>/g) || [];
        
        console.log(`JSX –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤: ${jsxElements.length}`);
        console.log(`JSX –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤: ${closingElements.length}`);
        
        // 5. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        const functionNames = ['addMap', 'removeMap', 'updateMapScore', 'updateMapSelection'];
        functionNames.forEach(funcName => {
            const pattern = new RegExp(`const ${funcName} = `, 'g');
            const matches = content.match(pattern);
            if (matches && matches.length > 1) {
                console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${matches.length} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π ${funcName}`);
                // –ù–µ —É–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
            }
        });
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(FILE_PATH, content, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const finalOpenBraces = (content.match(/\{/g) || []).length;
        const finalCloseBraces = (content.match(/\}/g) || []).length;
        
        console.log('‚úÖ –í—Å–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
        console.log('üìù –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω:', FILE_PATH);
        console.log('üîç –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä:', Math.round(content.length / 1024), 'KB');
        console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫:');
        console.log(`   - –û—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö: ${finalOpenBraces}`);
        console.log(`   - –ó–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö: ${finalCloseBraces}`);
        console.log(`   - –ë–∞–ª–∞–Ω—Å: ${finalOpenBraces === finalCloseBraces ? '‚úÖ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã' : '‚ùå –ù–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã'}`);
        
        return finalOpenBraces === finalCloseBraces;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫:', error);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
if (fixSyntaxErrors()) {
    console.log('\nüéØ –£–°–ü–ï–•! –í—Å–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
    console.log('üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å npm run build –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
    console.log('\nüìã –ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:');
    console.log('   1. ‚úÖ –£–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞');
    console.log('   2. ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —Å–∫–æ–±–æ–∫');
    console.log('   3. ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω JSX —Å–∏–Ω—Ç–∞–∫—Å–∏—Å');
    console.log('   4. ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏');
    console.log('   5. ‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏');
} else {
    console.log('\n‚ùå –û–®–ò–ë–ö–ê! –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
    console.log('üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞');
} 