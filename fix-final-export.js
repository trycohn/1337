const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
const filePath = path.join(__dirname, 'frontend', 'src', 'components', 'TournamentDetails.js');

console.log('üîß –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –≠–ö–°–ü–û–†–¢–ê');
console.log('===================================');

try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    let content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    console.log(`üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –°—Ç—Ä–æ–∫: ${lines.length}`);
    
    // –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π </section>
    let sectionIndex = -1;
    for (let i = lines.length - 1; i >= 0; i--) {
        if (lines[i].trim() === '</section>') {
            sectionIndex = i;
            console.log(`üéØ –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π </section> –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
            break;
        }
    }
    
    if (sectionIndex === -1) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω </section>');
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–æ </section> + –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    const newLines = lines.slice(0, sectionIndex + 1);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    newLines.push('    );');
    newLines.push('}');
    newLines.push('');
    newLines.push('export default TournamentDetails;');
    
    console.log(`üìä –û–±—Ä–µ–∑–∞–µ–º —Ñ–∞–π–ª —Å ${lines.length} –¥–æ ${newLines.length} —Å—Ç—Ä–æ–∫`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫
    const newContent = newLines.join('\n');
    const openBraces = (newContent.match(/\{/g) || []).length;
    const closeBraces = (newContent.match(/\}/g) || []).length;
    
    console.log(`üìä –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏: ${openBraces}`);
    console.log(`üìä –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏: ${closeBraces}`);
    
    if (openBraces !== closeBraces) {
        const missing = openBraces - closeBraces;
        console.log(`üîß –î–æ–±–∞–≤–ª—è–µ–º ${missing} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –ø–µ—Ä–µ–¥ export
        const exportIndex = newLines.length - 1;
        for (let i = 0; i < missing; i++) {
            newLines.splice(exportIndex, 0, '}');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const finalContent = newLines.join('\n');
        const finalOpenBraces = (finalContent.match(/\{/g) || []).length;
        const finalCloseBraces = (finalContent.match(/\}/g) || []).length;
        
        console.log(`üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finalOpenBraces}:${finalCloseBraces}`);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(filePath, finalContent, 'utf8');
    } else {
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫ —É–∂–µ –∏–¥–µ–∞–ª—å–Ω—ã–π');
        fs.writeFileSync(filePath, newContent, 'utf8');
    }
    
    console.log(`‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${newLines.length}`);
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
}

console.log('üéâ –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!'); 