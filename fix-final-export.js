const fs = require('fs');

const FILE_PATH = 'frontend/src/components/TournamentDetails.js';

console.log('üö® –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: export default –Ω–∞ –Ω–µ–≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ');

function fixExportLevel() {
    try {
        let content = fs.readFileSync(FILE_PATH, 'utf8');
        
        console.log('üìñ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä:', Math.round(content.length / 1024), 'KB');
        
        // 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –ø–µ—Ä–µ–¥ export
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é —Å–∫–æ–±–∫—É –ø–µ—Ä–µ–¥ export');
        
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å –ª–∏—à–Ω–µ–π —Å–∫–æ–±–∫–æ–π
        const wrongEndPattern = /(\s*<\/section>\s*\);\s*\}\s*)\}\s*(export default TournamentDetails;)/;
        
        if (content.match(wrongEndPattern)) {
            content = content.replace(wrongEndPattern, '$1\n\n$2');
            console.log('‚úÖ –£–±—Ä–∞–Ω–∞ –ª–∏—à–Ω—è—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –ø–µ—Ä–µ–¥ export');
        } else {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            const altPattern = /(;\s*\}\s*)\}\s*(export default)/;
            if (content.match(altPattern)) {
                content = content.replace(altPattern, '$1\n\n$2');
                console.log('‚úÖ –£–±—Ä–∞–Ω–∞ –ª–∏—à–Ω—è—è —Å–∫–æ–±–∫–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫)');
            } else {
                console.log('‚ùì –õ–∏—à–Ω—è—è —Å–∫–æ–±–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
            }
        }
        
        // 2. –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ export –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
        const lines = content.split('\n');
        const exportLineIndex = lines.findIndex(line => line.trim().startsWith('export default'));
        
        if (exportLineIndex !== -1) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥ export –Ω–µ—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –±–ª–æ–∫–æ–≤
            let braceBalance = 0;
            for (let i = 0; i < exportLineIndex; i++) {
                const line = lines[i];
                braceBalance += (line.match(/\{/g) || []).length;
                braceBalance -= (line.match(/\}/g) || []).length;
            }
            
            console.log(`–ë–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫ –¥–æ export: ${braceBalance}`);
            
            if (braceBalance !== 0) {
                console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –¥–∏—Å–±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫: ${braceBalance}`);
                
                if (braceBalance > 0) {
                    // –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ export
                    const missingBraces = '}\n'.repeat(braceBalance);
                    lines.splice(exportLineIndex, 0, missingBraces);
                    content = lines.join('\n');
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${braceBalance} –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –ø–µ—Ä–µ–¥ export`);
                } else if (braceBalance < 0) {
                    // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ - —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ
                    const excessBraces = Math.abs(braceBalance);
                    let removed = 0;
                    
                    for (let i = exportLineIndex - 1; i >= 0 && removed < excessBraces; i--) {
                        if (lines[i].trim() === '}') {
                            lines.splice(i, 1);
                            removed++;
                            exportLineIndex--; // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
                        }
                    }
                    
                    content = lines.join('\n');
                    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${removed} –ª–∏—à–Ω–∏—Ö –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫`);
                }
            }
        }
        
        // 3. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        const finalLines = content.split('\n');
        const finalExportIndex = finalLines.findIndex(line => line.trim().startsWith('export default'));
        
        if (finalExportIndex !== -1) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏
            const beforeExport = finalLines.slice(Math.max(0, finalExportIndex - 3), finalExportIndex);
            console.log('üìã –°—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ export:');
            beforeExport.forEach((line, index) => {
                console.log(`   ${finalExportIndex - beforeExport.length + index + 1}: ${line.trim()}`);
            });
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(FILE_PATH, content, 'utf8');
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const finalOpenBraces = (content.match(/\{/g) || []).length;
        const finalCloseBraces = (content.match(/\}/g) || []).length;
        
        console.log('‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!');
        console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(content.length / 1024)} KB`);
        console.log(`   - –û—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫: ${finalOpenBraces}`);
        console.log(`   - –ó–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫: ${finalCloseBraces}`);
        console.log(`   - –ë–∞–ª–∞–Ω—Å: ${finalOpenBraces === finalCloseBraces ? '‚úÖ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã' : '‚ùå –î–∏—Å–±–∞–ª–∞–Ω—Å: ' + (finalOpenBraces - finalCloseBraces)}`);
        
        return finalOpenBraces === finalCloseBraces;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ export:', error);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
if (fixExportLevel()) {
    console.log('\nüéØ –£–°–ü–ï–•! export default —Ç–µ–ø–µ—Ä—å –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ');
    console.log('üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å npm run build');
} else {
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å export');
    console.log('üõ†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
} 