// üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –ö–û–ù–°–û–õ–ò –ë–†–ê–£–ó–ï–†–ê
// –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞

console.log('üîç –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –¢–£–†–ù–ò–†–ê...\n');

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
function getTournamentData() {
    // –ò—â–µ–º React Fiber –≤ DOM —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    const tournamentElements = document.querySelectorAll('[class*="tournament"], [class*="Tournament"]');
    
    for (let element of tournamentElements) {
        const reactFiber = element._reactInternalFiber || element._reactInternals;
        if (reactFiber) {
            // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
            let current = reactFiber;
            while (current) {
                if (current.memoizedProps && (current.memoizedProps.tournament || current.memoizedProps.matches)) {
                    return {
                        tournament: current.memoizedProps.tournament,
                        matches: current.memoizedProps.matches || current.memoizedProps.tournament?.matches
                    };
                }
                current = current.return;
            }
        }
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ window –æ–±—ä–µ–∫—Ç—ã
    if (window.React && window.React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) {
        console.log('üîç –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ React internals...');
    }
    
    return null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function diagnoseTournament() {
    const data = getTournamentData();
    
    if (!data || !data.tournament) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
        console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞');
        return;
    }
    
    const { tournament, matches } = data;
    const tournamentMatches = matches || tournament.matches || [];
    
    console.log('üéØ –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–£–†–ù–ò–†–ï');
    console.log('=' .repeat(50));
    console.log(`üìã –ù–∞–∑–≤–∞–Ω–∏–µ: ${tournament.name}`);
    console.log(`üìä ID: ${tournament.id}`);
    console.log(`üìà –°—Ç–∞—Ç—É—Å: ${tournament.status}`);
    console.log(`üéÆ –§–æ—Ä–º–∞—Ç: ${tournament.format || tournament.bracket_type}`);
    console.log(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${tournament.participants?.length || 0}`);
    console.log(`üèÜ –ö–æ–º–∞–Ω–¥: ${tournament.teams?.length || 0}`);
    console.log(`‚öîÔ∏è –ú–∞—Ç—á–µ–π: ${tournamentMatches.length}`);
    
    if (tournamentMatches.length === 0) {
        console.log('‚ùå –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        return;
    }
    
    // –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –ú–ê–¢–ß–ï–ô');
    console.log('=' .repeat(50));
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusGroups = tournamentMatches.reduce((acc, match) => {
        const status = match.status || 'undefined';
        if (!acc[status]) acc[status] = [];
        acc[status].push(match);
        return acc;
    }, {});
    
    console.log('üìä –ú–∞—Ç—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    Object.entries(statusGroups).forEach(([status, matches]) => {
        console.log(`  ${status}: ${matches.length} –º–∞—Ç—á–µ–π`);
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º (state)
    const stateGroups = tournamentMatches.reduce((acc, match) => {
        const state = match.state || 'undefined';
        if (!acc[state]) acc[state] = [];
        acc[state].push(match);
        return acc;
    }, {});
    
    console.log('\nüìä –ú–∞—Ç—á–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º (state):');
    Object.entries(stateGroups).forEach(([state, matches]) => {
        console.log(`  ${state}: ${matches.length} –º–∞—Ç—á–µ–π`);
    });
    
    // –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
    const completedMatches = tournamentMatches.filter(match => {
        const hasValidState = match.state === 'DONE' || match.state === 'SCORE_DONE' || match.status === 'completed';
        const hasScore = (match.score1 !== null && match.score1 !== undefined) || 
                        (match.score2 !== null && match.score2 !== undefined);
        const hasWinner = match.winner_team_id !== null && match.winner_team_id !== undefined;
        
        return hasValidState || hasScore || hasWinner;
    });
    
    console.log(`\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${completedMatches.length}`);
    
    // –ü–æ–∏—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞
    console.log('\nüèÜ –ê–ù–ê–õ–ò–ó –§–ò–ù–ê–õ–¨–ù–û–ì–û –ú–ê–¢–ß–ê');
    console.log('=' .repeat(50));
    
    const finalMatch = tournamentMatches.find(match => 
        match.bracket_type === 'grand_final' || 
        match.is_final === true ||
        (match.round && parseInt(match.round) === Math.max(...tournamentMatches.map(m => parseInt(m.round) || 0)))
    );
    
    if (finalMatch) {
        console.log('üéØ –ù–∞–π–¥–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á:', {
            id: finalMatch.id,
            match_number: finalMatch.match_number,
            round: finalMatch.round,
            bracket_type: finalMatch.bracket_type,
            is_final: finalMatch.is_final,
            status: finalMatch.status,
            state: finalMatch.state,
            team1_id: finalMatch.team1_id,
            team2_id: finalMatch.team2_id,
            winner_team_id: finalMatch.winner_team_id,
            score1: finalMatch.score1,
            score2: finalMatch.score2,
            maps_data: finalMatch.maps_data
        });
        
        // –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞
        console.log('\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞:');
        
        const getParticipantName = (teamId) => {
            if (!teamId) return '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
            
            // –ü–æ–∏—Å–∫ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
            if (tournament.teams) {
                const team = tournament.teams.find(t => t.id === teamId);
                if (team) return `${team.name} (–ö–æ–º–∞–Ω–¥–∞ ID: ${teamId})`;
            }
            
            // –ü–æ–∏—Å–∫ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
            if (tournament.participants) {
                const participant = tournament.participants.find(p => p.id === teamId);
                if (participant) return `${participant.name || participant.username} (–£—á–∞—Å—Ç–Ω–∏–∫ ID: ${teamId})`;
            }
            
            return `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π (ID: ${teamId})`;
        };
        
        console.log(`  üîµ –ö–æ–º–∞–Ω–¥–∞ 1: ${getParticipantName(finalMatch.team1_id)}`);
        console.log(`  üî¥ –ö–æ–º–∞–Ω–¥–∞ 2: ${getParticipantName(finalMatch.team2_id)}`);
        console.log(`  üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${getParticipantName(finalMatch.winner_team_id)}`);
        
    } else {
        console.log('‚ùå –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç—á–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—É–Ω–¥–æ–º
        const maxRound = Math.max(...tournamentMatches.map(m => parseInt(m.round) || 0));
        const lastRoundMatches = tournamentMatches.filter(m => parseInt(m.round) === maxRound);
        
        console.log(`\nüîç –ú–∞—Ç—á–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—É–Ω–¥–∞ (${maxRound}):`);
        lastRoundMatches.forEach((match, index) => {
            console.log(`  –ú–∞—Ç—á ${index + 1}:`, {
                id: match.id,
                bracket_type: match.bracket_type,
                status: match.status,
                winner_team_id: match.winner_team_id
            });
        });
    }
    
    // –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
    console.log('\nüìã –í–°–ï –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ú–ê–¢–ß–ò');
    console.log('=' .repeat(50));
    
    completedMatches.forEach((match, index) => {
        const getParticipantName = (teamId) => {
            if (!teamId) return 'BYE';
            
            if (tournament.teams) {
                const team = tournament.teams.find(t => t.id === teamId);
                if (team) return team.name;
            }
            
            if (tournament.participants) {
                const participant = tournament.participants.find(p => p.id === teamId);
                if (participant) return participant.name || participant.username;
            }
            
            return `ID:${teamId}`;
        };
        
        const winner = getParticipantName(match.winner_team_id);
        const team1 = getParticipantName(match.team1_id);
        const team2 = getParticipantName(match.team2_id);
        
        console.log(`${index + 1}. –ú–∞—Ç—á #${match.match_number || match.id} (${match.bracket_type || 'unknown'}):`, {
            —É—á–∞—Å—Ç–Ω–∏–∫–∏: `${team1} vs ${team2}`,
            —Å—á–µ—Ç: `${match.score1 || 0}:${match.score2 || 0}`,
            –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: winner,
            —Å—Ç–∞—Ç—É—Å: match.status,
            —Å–æ—Å—Ç–æ—è–Ω–∏–µ: match.state,
            —Ä–∞—É–Ω–¥: match.round,
            –∫–∞—Ä—Ç—ã: match.maps_data ? `${match.maps_data.length} –∫–∞—Ä—Ç` : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        });
        
        // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç
        if (match.maps_data && match.maps_data.length > 0) {
            console.log(`    üó∫Ô∏è –ö–∞—Ä—Ç—ã:`);
            match.maps_data.forEach((map, mapIndex) => {
                console.log(`      ${mapIndex + 1}. ${map.map_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞'}: ${map.team1_score || 0}:${map.team2_score || 0}`);
            });
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–µ–π
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–†–û–ë–õ–ï–ú–´');
    console.log('=' .repeat(50));
    
    const duplicateMatches = [];
    const seenPairs = new Set();
    
    completedMatches.forEach(match => {
        const pair1 = `${match.team1_id}-${match.team2_id}`;
        const pair2 = `${match.team2_id}-${match.team1_id}`;
        
        if (seenPairs.has(pair1) || seenPairs.has(pair2)) {
            duplicateMatches.push(match);
        } else {
            seenPairs.add(pair1);
        }
    });
    
    if (duplicateMatches.length > 0) {
        console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –º–∞—Ç—á–∏ –º–µ–∂–¥—É —Ç–µ–º–∏ –∂–µ –∫–æ–º–∞–Ω–¥–∞–º–∏:');
        duplicateMatches.forEach(match => {
            console.log(`  –ú–∞—Ç—á #${match.match_number}: ${match.team1_id} vs ${match.team2_id}`);
        });
    } else {
        console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    const matchesWithoutWinner = completedMatches.filter(m => !m.winner_team_id);
    if (matchesWithoutWinner.length > 0) {
        console.log(`‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: ${matchesWithoutWinner.length}`);
    }
    
    const matchesWithoutScore = completedMatches.filter(m => 
        (m.score1 === null || m.score1 === undefined) && 
        (m.score2 === null || m.score2 === undefined)
    );
    if (matchesWithoutScore.length > 0) {
        console.log(`‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –±–µ–∑ —Å—á–µ—Ç–∞: ${matchesWithoutScore.length}`);
    }
    
    console.log('\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log('üí° –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log('   - window.tournamentData = data; // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é');
    console.log('   - console.table(completedMatches); // –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç—á–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    window.tournamentData = data;
    window.completedMatches = completedMatches;
    window.finalMatch = finalMatch;
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
try {
    diagnoseTournament();
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞');
}