/**
 * üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–ê–ë–õ–ò–ß–ù–´–• –°–¢–†–£–ö–¢–£–† DOUBLE ELIMINATION
 * 
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥—Ä–∞—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
 * –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ Double Elimination
 */

const { 
    getDoubleEliminationStructure, 
    validateStructure, 
    getSupportedSizes,
    calculateTargetLosersRound,
    DOUBLE_ELIMINATION_STRUCTURES 
} = require('./backend/utils/tournament/doubleEliminationStructures');

/**
 * üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
 */
function testAllSizes() {
    console.log('üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–ê–ë–õ–ò–ß–ù–´–• –°–¢–†–£–ö–¢–£–† DOUBLE ELIMINATION ===\n');
    
    const supportedSizes = getSupportedSizes();
    console.log(`üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${supportedSizes.join(', ')}\n`);
    
    let allValid = true;
    
    for (const size of supportedSizes) {
        console.log(`üèÜ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            const structure = getDoubleEliminationStructure(size);
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º
            const validation = validateStructure(structure);
            
            if (validation.isValid) {
                console.log(`  ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`);
                console.log(`     Winners: ${structure.winnersStructure.join('+')} = ${validation.statistics.winnersMatches}`);
                console.log(`     Losers:  ${structure.losersStructure.join('+')} = ${validation.statistics.losersMatches}`);
                console.log(`     Grand Final: ${validation.statistics.grandFinalMatches}`);
                console.log(`     –ò—Ç–æ–≥–æ: ${validation.statistics.totalMatches} –º–∞—Ç—á–µ–π`);
                console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${structure.description}`);
            } else {
                console.log(`  ‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`);
                validation.errors.forEach(error => console.log(`     - ${error}`));
                allValid = false;
            }
            
        } catch (error) {
            console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            allValid = false;
        }
        
        console.log('');
    }
    
    return allValid;
}

/**
 * üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ Winners ‚Üí Losers
 */
function testWinnersToLosersMapping() {
    console.log('üéØ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–ü–ü–ò–ù–ì–ê WINNERS ‚Üí LOSERS ===\n');
    
    const testSizes = [4, 8, 16, 32];
    
    for (const size of testSizes) {
        console.log(`üèÜ –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è ${size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
        
        const structure = getDoubleEliminationStructure(size);
        
        for (let winnersRound = 1; winnersRound <= structure.winnersRounds; winnersRound++) {
            const targetLosersRound = calculateTargetLosersRound(winnersRound, structure);
            
            if (targetLosersRound) {
                console.log(`  Winners R${winnersRound} ‚Üí Losers R${targetLosersRound}`);
            } else {
                console.log(`  Winners R${winnersRound} ‚Üí –ù–ï–¢ –°–í–Ø–ó–ò (–æ—à–∏–±–∫–∞!)`);
            }
        }
        
        console.log('');
    }
}

/**
 * üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 */
function testExpectedValues() {
    console.log('üìä === –°–†–ê–í–ù–ï–ù–ò–ï –° –û–ñ–ò–î–ê–ï–ú–´–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò ===\n');
    
    const expectedValues = {
        4: { winners: 3, losers: 2, total: 7 },
        8: { winners: 7, losers: 6, total: 15 },
        16: { winners: 15, losers: 14, total: 31 },
        32: { winners: 31, losers: 30, total: 63 },
        64: { winners: 63, losers: 62, total: 127 },
        128: { winners: 127, losers: 126, total: 255 }
    };
    
    let allMatch = true;
    
    for (const [size, expected] of Object.entries(expectedValues)) {
        const sizeNum = parseInt(size);
        console.log(`üèÜ –ü—Ä–æ–≤–µ—Ä–∫–∞ ${size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
        
        const structure = getDoubleEliminationStructure(sizeNum);
        const validation = validateStructure(structure);
        
        const winnersMatches = validation.statistics.winnersMatches;
        const losersMatches = validation.statistics.losersMatches;
        const totalMatches = validation.statistics.totalMatches;
        
        const winnersOk = winnersMatches === expected.winners;
        const losersOk = losersMatches === expected.losers;
        const totalOk = totalMatches === expected.total;
        
        console.log(`  Winners: ${winnersMatches} ${winnersOk ? '‚úÖ' : '‚ùå'} (–æ–∂–∏–¥–∞–ª–æ—Å—å ${expected.winners})`);
        console.log(`  Losers:  ${losersMatches} ${losersOk ? '‚úÖ' : '‚ùå'} (–æ–∂–∏–¥–∞–ª–æ—Å—å ${expected.losers})`);
        console.log(`  –ò—Ç–æ–≥–æ:   ${totalMatches} ${totalOk ? '‚úÖ' : '‚ùå'} (–æ–∂–∏–¥–∞–ª–æ—Å—å ${expected.total})`);
        
        if (!winnersOk || !losersOk || !totalOk) {
            allMatch = false;
        }
        
        console.log('');
    }
    
    return allMatch;
}

/**
 * üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
function runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Double Elimination —Å—Ç—Ä—É–∫—Ç—É—Ä...\n');
    
    const test1 = testAllSizes();
    const test2 = testExpectedValues();
    testWinnersToLosersMapping();
    
    console.log('üìã === –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä: ${test1 ? '–ü–†–û–ô–î–ï–ù–ê' : '–ü–†–û–í–ê–õ–ï–ù–ê'}`);
    console.log(`‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏: ${test2 ? '–ü–†–û–ô–î–ï–ù–ê' : '–ü–†–û–í–ê–õ–ï–ù–ê'}`);
    
    if (test1 && test2) {
        console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –¢–∞–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
        return true;
    } else {
        console.log('\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.');
        return false;
    }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runAllTests();
}

module.exports = {
    testAllSizes,
    testWinnersToLosersMapping,
    testExpectedValues,
    runAllTests
}; 