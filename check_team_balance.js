/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–∞–Ω–¥
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node check_team_balance.js
 */

// –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –±–∞–ª–∞–Ω—Å–∞
const testParticipants = [
    { name: 'HighSkill1', faceit_elo: 3000 },
    { name: 'HighSkill2', faceit_elo: 2800 },
    { name: 'HighSkill3', faceit_elo: 2600 },
    { name: 'MidSkill1', faceit_elo: 2000 },
    { name: 'MidSkill2', faceit_elo: 1800 },
    { name: 'MidSkill3', faceit_elo: 1600 },
    { name: 'MidSkill4', faceit_elo: 1400 },
    { name: 'LowSkill1', faceit_elo: 1200 },
    { name: 'LowSkill2', faceit_elo: 1000 },
    { name: 'LowSkill3', faceit_elo: 800 },
    { name: 'LowSkill4', faceit_elo: 600 },
    { name: 'VeryLowSkill1', faceit_elo: 400 },
    { name: 'VeryLowSkill2', faceit_elo: 200 },
    { name: 'VeryLowSkill3', faceit_elo: 100 }
];

function calculateTeamAverage(team) {
    const ratings = team.map(member => member.faceit_elo);
    return ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length;
}

function checkTeamBalance(teams) {
    const teamAverages = teams.map(team => calculateTeamAverage(team));
    const minAvg = Math.min(...teamAverages);
    const maxAvg = Math.max(...teamAverages);
    const percentageDiff = ((maxAvg - minAvg) / minAvg) * 100;
    
    return {
        teamAverages,
        minAvg,
        maxAvg,
        percentageDiff,
        isBalanced: percentageDiff <= 20
    };
}

function distributePlayersToTeams(participants, teamSize) {
    const sorted = [...participants].sort((a, b) => b.faceit_elo - a.faceit_elo);
    const teamsCount = Math.floor(participants.length / teamSize);
    const teams = Array.from({ length: teamsCount }, () => []);
    
    // –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –∑–º–µ–π–∫–∏
    for (let i = 0; i < sorted.length; i++) {
        if (teams[i % teamsCount].length < teamSize) {
            teams[i % teamsCount].push(sorted[i]);
        }
    }
    
    return teams.filter(team => team.length === teamSize);
}

function testTeamBalance() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–û–ù–¢–†–û–õ–Ø –ë–ê–õ–ê–ù–°–ê –ö–û–ú–ê–ù–î');
    console.log('=' * 60);
    
    const teamSize = 2;
    const teams = distributePlayersToTeams(testParticipants, teamSize);
    
    console.log(`üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${testParticipants.length}`);
    console.log(`üë• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ${teamSize}`);
    console.log(`üèÜ –ö–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–Ω–æ: ${teams.length}`);
    console.log();
    
    teams.forEach((team, index) => {
        const avgRating = calculateTeamAverage(team);
        console.log(`–ö–æ–º–∞–Ω–¥–∞ ${index + 1}: ${team.map(p => `${p.name}(${p.faceit_elo})`).join(', ')} - –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${Math.round(avgRating)}`);
    });
    
    console.log();
    const balance = checkTeamBalance(teams);
    console.log(`‚öñÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –ë–ê–õ–ê–ù–°–ê:`);
    console.log(`   - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${Math.round(balance.minAvg)}`);
    console.log(`   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${Math.round(balance.maxAvg)}`);
    console.log(`   - –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${Math.round(balance.percentageDiff)}%`);
    console.log(`   - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã (‚â§20%): ${balance.isBalanced ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    
    const quality = balance.percentageDiff <= 10 ? '–û—Ç–ª–∏—á–Ω—ã–π' : 
                   balance.percentageDiff <= 20 ? '–•–æ—Ä–æ—à–∏–π' : 
                   balance.percentageDiff <= 30 ? '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π' : '–ü–ª–æ—Ö–æ–π';
    console.log(`   - –ö–∞—á–µ—Å—Ç–≤–æ –±–∞–ª–∞–Ω—Å–∞: ${quality}`);
    
    console.log();
    console.log('üéØ –û–ñ–ò–î–ê–ù–ò–Ø –û–¢ –°–ò–°–¢–ï–ú–´ v4:');
    console.log('   - –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ‚â§20%');
    console.log('   - –í —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –ª–æ–≥–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ');
    console.log('   - API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–ª–∞–Ω—Å–∞');
    
    return balance;
}

if (require.main === module) {
    testTeamBalance();
}

module.exports = { testTeamBalance, checkTeamBalance, calculateTeamAverage }; 