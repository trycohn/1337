/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test_webhook.js
 */

const https = require('https');

const data = JSON.stringify({
  event: 'series_end',
  matchid: 999888777,
  winner: {
    side: '3',
    team: 'team1'
  },
  team1_series_score: 1,
  team2_series_score: 0,
  time_until_restore: 10
});

const options = {
  hostname: '1337community.com',
  port: 443,
  path: '/api/matchzy/match-end',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': data.length,
    'Authorization': 'Bearer 2a262f61e1138fb19445e5aa64c75f9f25bc85581666f00605e3da99245f2f59'
  }
};

console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook...\n');
console.log('URL:', `https://${options.hostname}${options.path}`);
console.log('Headers:', options.headers);
console.log('Body:', data);
console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...\n');

const req = https.request(options, (res) => {
  console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
  console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:`, res.headers);
  
  let responseData = '';
  
  res.on('data', (chunk) => {
    responseData += chunk;
  });
  
  res.on('end', () => {
    console.log(`üì• –û—Ç–≤–µ—Ç:`, responseData);
    console.log('\n‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
    
    if (res.statusCode === 200) {
      console.log('\nüéâ Backend –ø–æ–ª—É—á–∏–ª webhook! –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏: pm2 logs 1337-backend');
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    }
  });
});

req.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook:', error.message);
});

req.write(data);
req.end();
