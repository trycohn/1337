// üîç –ü–†–û–°–¢–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ü–¢
// –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—É—Ä–Ω–∏—Ä–∞

console.log('üîç –ü–†–û–°–¢–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–£–†–ù–ò–†–ê');
console.log('=' .repeat(40));

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
function findTournamentData() {
    // 1. –ü–æ–∏—Å–∫ –≤ React DevTools
    if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
        console.log('üîç React DevTools –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
    }
    
    // 2. –ü–æ–∏—Å–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const globalVars = ['tournament', 'tournamentData', 'matches', 'currentTournament'];
    for (const varName of globalVars) {
        if (window[varName]) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${varName}`);
            return window[varName];
        }
    }
    
    // 3. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DOM —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-–∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    const elementsWithData = document.querySelectorAll('[data-tournament], [data-matches], [data-tournament-id]');
    if (elementsWithData.length > 0) {
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${elementsWithData.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-–∞—Ç—Ä–∏–±—É—Ç–∞–º–∏`);
        for (const el of elementsWithData) {
            console.log('  –≠–ª–µ–º–µ–Ω—Ç:', el.tagName, el.className);
            if (el.dataset.tournament) {
                try {
                    return JSON.parse(el.dataset.tournament);
                } catch (e) {
                    console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON');
                }
            }
        }
    }
    
    // 4. –ü–æ–∏—Å–∫ –≤ localStorage/sessionStorage
    const storageKeys = ['tournament', 'tournamentData', 'currentTournament'];
    for (const key of storageKeys) {
        const data = localStorage.getItem(key) || sessionStorage.getItem(key);
        if (data) {
            try {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ storage: ${key}`);
                return JSON.parse(data);
            } catch (e) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${key}`);
            }
        }
    }
    
    return null;
}

// –ê–Ω–∞–ª–∏–∑ URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç—É—Ä–Ω–∏—Ä–∞
function getTournamentIdFromUrl() {
    const url = window.location.href;
    const matches = url.match(/tournament[s]?\/(\d+)/i);
    if (matches) {
        const tournamentId = parseInt(matches[1]);
        console.log(`üîç ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ URL: ${tournamentId}`);
        return tournamentId;
    }
    return null;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
function runDiagnosis() {
    console.log(`üìç –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${window.location.href}`);
    
    const tournamentId = getTournamentIdFromUrl();
    if (tournamentId) {
        console.log(`üéØ –¢—É—Ä–Ω–∏—Ä ID: ${tournamentId}`);
    }
    
    // –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
    const tournamentData = findTournamentData();
    
    if (!tournamentData) {
        console.log('‚ùå –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        console.log('\nüí° –†–£–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É Elements –≤ DevTools');
        console.log('2. –ù–∞–π–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "tournament"');
        console.log('3. –í –∫–æ–Ω—Å–æ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: $0._reactInternalFiber –∏–ª–∏ $0._reactInternals');
        console.log('4. –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ: Object.keys(window).filter(key => key.includes("tournament"))');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        const windowKeys = Object.keys(window).filter(key => 
            key.toLowerCase().includes('tournament') || 
            key.toLowerCase().includes('match') ||
            key.toLowerCase().includes('react')
        );
        
        if (windowKeys.length > 0) {
            console.log('\nüîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ window:');
            windowKeys.forEach(key => console.log(`  - window.${key}`));
        }
        
        return;
    }
    
    // –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\n‚úÖ –î–ê–ù–ù–´–ï –¢–£–†–ù–ò–†–ê –ù–ê–ô–î–ï–ù–´');
    console.log('=' .repeat(40));
    
    if (tournamentData.tournament) {
        const t = tournamentData.tournament;
        console.log(`üìã –ù–∞–∑–≤–∞–Ω–∏–µ: ${t.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`üìä ID: ${t.id || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`üìà –°—Ç–∞—Ç—É—Å: ${t.status || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`üéÆ –§–æ—Ä–º–∞—Ç: ${t.format || t.bracket_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        
        const matches = t.matches || tournamentData.matches || [];
        console.log(`‚öîÔ∏è –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: ${matches.length}`);
        
        if (matches.length > 0) {
            // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
            const statuses = {};
            const states = {};
            let withWinners = 0;
            let withScores = 0;
            
            matches.forEach(match => {
                statuses[match.status || 'undefined'] = (statuses[match.status || 'undefined'] || 0) + 1;
                states[match.state || 'undefined'] = (states[match.state || 'undefined'] || 0) + 1;
                
                if (match.winner_team_id) withWinners++;
                if (match.score1 !== null && match.score1 !== undefined || 
                    match.score2 !== null && match.score2 !== undefined) withScores++;
            });
            
            console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π:');
            console.log('  –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:', statuses);
            console.log('  –ü–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:', states);
            console.log(`  –° –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏: ${withWinners}`);
            console.log(`  –°–æ —Å—á–µ—Ç–æ–º: ${withScores}`);
            
            // –ü–æ–∏—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞
            const finalCandidates = matches.filter(match => 
                match.bracket_type === 'grand_final' || 
                match.is_final === true ||
                match.bracket_type === 'final' ||
                (match.round && parseInt(match.round) === Math.max(...matches.map(m => parseInt(m.round) || 0)))
            );
            
            console.log(`\nüèÜ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏: ${finalCandidates.length}`);
            finalCandidates.forEach((match, index) => {
                console.log(`  ${index + 1}. –ú–∞—Ç—á #${match.match_number || match.id}:`, {
                    bracket_type: match.bracket_type,
                    round: match.round,
                    status: match.status,
                    winner: match.winner_team_id ? `ID:${match.winner_team_id}` : '–ù–µ—Ç'
                });
            });
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    window.diagnosisData = tournamentData;
    console.log('\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ window.diagnosisData');
    console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ console.table(window.diagnosisData.tournament.matches) –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ç—á–µ–π');
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
try {
    runDiagnosis();
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
console.log('\nüõ†Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´:');
console.log('‚Ä¢ Object.keys(window).filter(k => k.includes("tournament")) - –ø–æ–∏—Å–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
console.log('‚Ä¢ document.querySelectorAll("[class*=tournament]") - –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
console.log('‚Ä¢ JSON.stringify(window.diagnosisData, null, 2) - –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ JSON');