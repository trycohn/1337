const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
const filePath = path.join(__dirname, 'frontend', 'src', 'components', 'TournamentDetails.js');

console.log('üîß –£–ú–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TournamentDetails.js');
console.log('==========================================');

try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    let content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    console.log(`üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –°—Ç—Ä–æ–∫: ${lines.length}`);
    
    // –ù–∞–π–¥–µ–º —Ñ—É–Ω–∫—Ü–∏—é TournamentDetails
    let functionStart = -1;
    for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes('function TournamentDetails()')) {
            functionStart = i;
            console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è TournamentDetails –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
            break;
        }
    }
    
    if (functionStart === -1) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è TournamentDetails');
    }
    
    // –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π return –≤ —Ñ—É–Ω–∫—Ü–∏–∏
    let lastReturnIndex = -1;
    for (let i = functionStart; i < lines.length; i++) {
        if (lines[i].trim().includes('return (')) {
            lastReturnIndex = i;
            console.log(`üéØ –ù–∞–π–¥–µ–Ω return –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}: "${lines[i].trim()}"`);
        }
    }
    
    if (lastReturnIndex === -1) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω return –≤ —Ñ—É–Ω–∫—Ü–∏–∏');
    }
    
    // –ù–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π </section>
    let sectionIndex = -1;
    for (let i = lastReturnIndex; i < lines.length; i++) {
        if (lines[i].trim() === '</section>') {
            sectionIndex = i;
            console.log(`üéØ –ù–∞–π–¥–µ–Ω </section> –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
            break;
        }
    }
    
    if (sectionIndex === -1) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω </section> –ø–æ—Å–ª–µ return');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const newLines = lines.slice(0, sectionIndex + 1);
    newLines.push('    );'); // –ó–∞–∫—Ä—ã–≤–∞–µ–º return (
    newLines.push('}');      // –ó–∞–∫—Ä—ã–≤–∞–µ–º function TournamentDetails() {
    newLines.push('');
    newLines.push('export default TournamentDetails;');
    
    const newContent = newLines.join('\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫
    const openBraces = (newContent.match(/\{/g) || []).length;
    const closeBraces = (newContent.match(/\}/g) || []).length;
    const openParens = (newContent.match(/\(/g) || []).length;
    const closeParens = (newContent.match(/\)/g) || []).length;
    
    console.log(`üìä –°–∫–æ–±–∫–∏ { }: ${openBraces}:${closeBraces}`);
    console.log(`üìä –°–∫–æ–±–∫–∏ ( ): ${openParens}:${closeParens}`);
    console.log(`üìä –°—Ç—Ä–æ–∫ –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ: ${newLines.length}`);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(filePath, newContent, 'utf8');
    
    console.log(`‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –†–∞–∑–º–µ—Ä: ${newContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
}

console.log('üéâ –£–ú–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!'); 