#!/usr/bin/env node

/**
 * üöÄ –°–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –∏–∑ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
 * 
 * –ü—Ä–æ–±–ª–µ–º–∞: –ê–Ω–∏–º–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –≤—ã–∑—ã–≤–∞—é—Ç –ª–∞–≥–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 * –†–µ—à–µ–Ω–∏–µ: –£–±–∏—Ä–∞–µ–º –≤—Å–µ transition, animation, transform —Å–≤–æ–π—Å—Ç–≤–∞
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ CSS —Ñ–∞–π–ª—ã –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
 * 2. –£–¥–∞–ª—è–µ—Ç/–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏
 * 3. –°–æ–∑–¥–∞–µ—Ç backup —Ñ–∞–π–ª—ã
 * 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ –£–î–ê–õ–ï–ù–ò–ï –ê–ù–ò–ú–ê–¶–ò–ô –ò–ó –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù');
console.log('='.repeat(50));

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
const modalCssFiles = [
    'frontend/src/components/modals/TeamModal.css',
    'frontend/src/components/tournament/modals/MatchResultModal.css',
    'frontend/src/components/styles/ParticipantsModal.css',
    'frontend/src/components/tournament/modals/MatchDetailsModal.css',
    'frontend/src/components/modals/TeamSelectionModal.css',
    'frontend/src/components/tournament/modals/ParticipantSearchModal.css',
    'frontend/src/components/tournament/modals/ParticipationConfirmModal.css',
    'frontend/src/components/AttachmentModal.css',
    'frontend/src/components/modals/CreateTeamModal.css',
    'frontend/src/components/tournament/modals/AddParticipantModal.css',
    'frontend/src/components/tournament/modals/ThirdPlaceMatchModal.css'
];

// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
const animationPatterns = [
    /transition\s*:\s*[^;]+;/gi,
    /animation\s*:\s*[^;]+;/gi,
    /transform\s*:\s*[^;]+;/gi,
    /-webkit-transition\s*:\s*[^;]+;/gi,
    /-webkit-animation\s*:\s*[^;]+;/gi,
    /-webkit-transform\s*:\s*[^;]+;/gi,
    /-moz-transition\s*:\s*[^;]+;/gi,
    /-moz-animation\s*:\s*[^;]+;/gi,
    /-moz-transform\s*:\s*[^;]+;/gi,
    /-o-transition\s*:\s*[^;]+;/gi,
    /-o-animation\s*:\s*[^;]+;/gi,
    /-o-transform\s*:\s*[^;]+;/gi,
    /-ms-transition\s*:\s*[^;]+;/gi,
    /-ms-animation\s*:\s*[^;]+;/gi,
    /-ms-transform\s*:\s*[^;]+;/gi,
    /animation-[a-z-]+\s*:\s*[^;]+;/gi,
    /transition-[a-z-]+\s*:\s*[^;]+;/gi,
    /@keyframes\s+[^{]+\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/gi
];

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è backup —Ñ–∞–π–ª–∞
function createBackup(filePath) {
    const backupPath = `${filePath}.no-animations-backup.${Date.now()}`;
    fs.copyFileSync(filePath, backupPath);
    console.log(`üì¶ Backup —Å–æ–∑–¥–∞–Ω: ${backupPath}`);
    return backupPath;
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –∏–∑ CSS –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function removeAnimations(cssContent, filePath) {
    let modifiedContent = cssContent;
    let removedCount = 0;
    let removedItems = [];

    animationPatterns.forEach(pattern => {
        const matches = cssContent.match(pattern);
        if (matches) {
            matches.forEach(match => {
                const commentedMatch = `/* REMOVED ANIMATION: ${match.trim()} */`;
                modifiedContent = modifiedContent.replace(match, commentedMatch);
                removedItems.push(match.trim());
                removedCount++;
            });
        }
    });

    return {
        content: modifiedContent,
        removedCount,
        removedItems
    };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
async function processModalFiles() {
    let totalFilesProcessed = 0;
    let totalAnimationsRemoved = 0;
    const processResults = [];

    for (const filePath of modalCssFiles) {
        console.log(`\nüîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${filePath}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if (!fs.existsSync(filePath)) {
            console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
            continue;
        }

        try {
            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            const originalContent = fs.readFileSync(filePath, 'utf8');
            
            // –°–æ–∑–¥–∞–µ–º backup
            const backupPath = createBackup(filePath);
            
            // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
            const result = removeAnimations(originalContent, filePath);
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            fs.writeFileSync(filePath, result.content, 'utf8');
            
            const fileResult = {
                filePath,
                backupPath,
                removedCount: result.removedCount,
                removedItems: result.removedItems
            };
            
            processResults.push(fileResult);
            totalFilesProcessed++;
            totalAnimationsRemoved += result.removedCount;
            
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${result.removedCount} –∞–Ω–∏–º–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–æ`);
            
            if (result.removedItems.length > 0) {
                console.log(`üìã –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏:`);
                result.removedItems.forEach(item => {
                    console.log(`   ‚Ä¢ ${item}`);
                });
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filePath}:`, error.message);
        }
    }

    return {
        totalFilesProcessed,
        totalAnimationsRemoved,
        processResults
    };
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
function generateReport(results) {
    console.log(`\nüìä –û–¢–ß–ï–¢ –û–ë –£–î–ê–õ–ï–ù–ò–ò –ê–ù–ò–ú–ê–¶–ò–ô`);
    console.log('='.repeat(40));
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.totalFilesProcessed}`);
    console.log(`üé¨ –£–¥–∞–ª–µ–Ω–æ –∞–Ω–∏–º–∞—Ü–∏–π: ${results.totalAnimationsRemoved}`);
    
    if (results.processResults.length > 0) {
        console.log(`\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ñ–∞–π–ª–∞–º:`);
        results.processResults.forEach(result => {
            console.log(`   ${path.basename(result.filePath)}: ${result.removedCount} –∞–Ω–∏–º–∞—Ü–∏–π`);
        });
        
        console.log(`\nüîÑ –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ backup —Ñ–∞–π–ª—ã:`);
        results.processResults.forEach(result => {
            if (result.removedCount > 0) {
                console.log(`   cp "${result.backupPath}" "${result.filePath}"`);
            }
        });
    }
    
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    console.log(`   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ frontend –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
    console.log(`   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω`);
    console.log(`   3. Backup —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
    console.log(`   4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è`);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è CSS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function createOptimizedModalCSS() {
    const optimizedCSS = `
/* üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–¢–ò–õ–ò –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù –ë–ï–ó –ê–ù–ò–ú–ê–¶–ò–ô */

/* –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    /* –£–î–ê–õ–ï–ù–´ –í–°–ï –ê–ù–ò–ú–ê–¶–ò–ò –î–õ–Ø –ü–û–í–´–®–ï–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò */
}

.modal-content {
    background: #1a1a1a;
    border-radius: 8px;
    padding: 20px;
    max-width: 90vw;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    /* –£–î–ê–õ–ï–ù–´ –í–°–ï –ê–ù–ò–ú–ê–¶–ò–ò –î–õ–Ø –ü–û–í–´–®–ï–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò */
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    border-bottom: 1px solid #333;
    padding-bottom: 10px;
}

.modal-close {
    background: transparent;
    border: none;
    color: #fff;
    font-size: 24px;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    /* –£–î–ê–õ–ï–ù–´ –í–°–ï –ê–ù–ò–ú–ê–¶–ò–ò –î–õ–Ø –ü–û–í–´–®–ï–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò */
}

.modal-close:hover {
    color: #ff4444;
    /* –ù–ï–¢ TRANSITION - –ú–ì–ù–û–í–ï–ù–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï */
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö */
.modal-button {
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    /* –£–î–ê–õ–ï–ù–´ –í–°–ï –ê–ù–ò–ú–ê–¶–ò–ò –î–õ–Ø –ü–û–í–´–®–ï–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò */
}

.modal-button:hover {
    opacity: 0.8;
    /* –ù–ï–¢ TRANSITION - –ú–ì–ù–û–í–ï–ù–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï */
}

.modal-button-primary {
    background: #4CAF50;
    color: white;
}

.modal-button-secondary {
    background: #f44336;
    color: white;
}

.modal-button-neutral {
    background: #666;
    color: white;
}
`;

    fs.writeFileSync('frontend/src/components/modal-optimized.css', optimizedCSS, 'utf8');
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—Ç–∏–ª–µ–π: frontend/src/components/modal-optimized.css`);
}

// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
(async () => {
    try {
        console.log(`üîç –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${modalCssFiles.length} —Ñ–∞–π–ª–æ–≤ CSS –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω\n`);
        
        const results = await processModalFiles();
        generateReport(results);
        
        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CSS —Ñ–∞–π–ª
        createOptimizedModalCSS();
        
        console.log(`\n‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê`);
        console.log(`üöÄ –ê–Ω–∏–º–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —É–ª—É—á—à–∏—Ç—å—Å—è!`);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
})(); 