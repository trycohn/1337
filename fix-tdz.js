const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TDZ –æ—à–∏–±–∫–∏ fetchCreatorInfo...');

const filePath = path.join(__dirname, 'frontend', 'src', 'components', 'TournamentDetails.js');

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
let content = fs.readFileSync(filePath, 'utf8');

// –£–¥–∞–ª—è–µ–º Unicode BOM –µ—Å–ª–∏ –µ—Å—Ç—å
content = content.replace(/^\uFEFF/, '');

// –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ fetchCreatorInfo
const fetchCreatorInfoMatch = content.match(/(    \/\/ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞[\s\S]*?    \}, \[tournament\]\);)/);

if (fetchCreatorInfoMatch) {
    const fetchCreatorInfoDefinition = fetchCreatorInfoMatch[1];
    console.log('–ù–∞–π–¥–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ fetchCreatorInfo');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    content = content.replace(fetchCreatorInfoDefinition, '');
    
    // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ checkParticipation)
    const insertionPoint = content.indexOf('    }, [tournament?.participants, user?.id]);');
    
    if (insertionPoint !== -1) {
        const insertAfter = insertionPoint + '    }, [tournament?.participants, user?.id]);'.length;
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        const newDefinition = `
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ü–ï–†–ï–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º)
    const fetchCreatorInfo = useCallback(async (creatorId) => {
        if (!creatorId) return;
        
        try {
            console.log(\`–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ (ID: \${creatorId}) –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\`);
            const response = await api.get(\`/api/users/profile/\${creatorId}\`);
            
            if (response.data) {
                console.log(\`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î:\`, response.data);
                setCreator(response.data);
                
                const cacheKey = \`user_\${creatorId}\`;
                localStorage.setItem(cacheKey, JSON.stringify(response.data));
                localStorage.setItem(\`\${cacheKey}_timestamp\`, Date.now().toString());
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –ë–î:', error);
            
            if (tournament && tournament.participants && Array.isArray(tournament.participants)) {
                const creatorFromParticipants = tournament.participants.find(
                    participant => participant.user_id === creatorId || participant.id === creatorId
                );
                
                if (creatorFromParticipants) {
                    const creatorInfo = {
                        id: creatorId,
                        username: creatorFromParticipants.name || creatorFromParticipants.username || \`–£—á–∞—Å—Ç–Ω–∏–∫ #\${creatorId}\`,
                        avatar_url: creatorFromParticipants.avatar_url || null,
                        fromParticipants: true
                    };
                    setCreator(creatorInfo);
                    return;
                }
            }
            
            setCreator({
                id: creatorId,
                username: \`–°–æ–∑–¥–∞—Ç–µ–ª—å #\${creatorId}\`,
                avatar_url: null,
                isError: true
            });
        }
    }, [tournament]);`;
        
        content = content.slice(0, insertAfter) + newDefinition + content.slice(insertAfter);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(filePath, content, 'utf8');
        
        console.log('‚úÖ TDZ –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞! fetchCreatorInfo –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ.');
    } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏');
    }
} else {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ fetchCreatorInfo');
}

console.log('üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–∞.'); 