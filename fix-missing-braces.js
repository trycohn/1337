const fs = require('fs');

const FILE_PATH = 'frontend/src/components/TournamentDetails.js';

console.log('üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –°–ö–û–ë–û–ö: –ë–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫ –≤ TournamentDetails.js');

function addMissingBraces() {
    try {
        let content = fs.readFileSync(FILE_PATH, 'utf8');
        
        console.log('üìñ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä:', Math.round(content.length / 1024), 'KB');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫
        const openBraces = (content.match(/\{/g) || []).length;
        const closeBraces = (content.match(/\}/g) || []).length;
        const missingBraces = openBraces - closeBraces;
        
        console.log(`üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫:`);
        console.log(`   - –û—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö: ${openBraces}`);
        console.log(`   - –ó–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö: ${closeBraces}`);
        console.log(`   - –î–∏—Å–±–∞–ª–∞–Ω—Å: ${missingBraces}`);
        
        if (missingBraces > 0) {
            console.log(`üîß –î–æ–±–∞–≤–ª—è—é ${missingBraces} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫`);
            
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é export
            const lines = content.split('\n');
            const exportIndex = lines.findIndex(line => line.trim().startsWith('export default'));
            
            if (exportIndex !== -1) {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –ø–µ—Ä–µ–¥ export
                const missingBracesLines = Array(missingBraces).fill('}');
                lines.splice(exportIndex, 0, ...missingBracesLines, '');
                
                content = lines.join('\n');
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${missingBraces} –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –ø–µ—Ä–µ–¥ export`);
            } else {
                // –ï—Å–ª–∏ export –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                content += '\n' + '}\n'.repeat(missingBraces);
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${missingBraces} –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞`);
            }
        } else if (missingBraces < 0) {
            console.log(`‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫: ${Math.abs(missingBraces)}`);
            return false;
        } else {
            console.log('‚úÖ –°–∫–æ–±–∫–∏ —É–∂–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã');
            return true;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(FILE_PATH, content, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const finalOpenBraces = (content.match(/\{/g) || []).length;
        const finalCloseBraces = (content.match(/\}/g) || []).length;
        
        console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(content.length / 1024)} KB`);
        console.log(`   - –û—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫: ${finalOpenBraces}`);
        console.log(`   - –ó–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫: ${finalCloseBraces}`);
        console.log(`   - –ë–∞–ª–∞–Ω—Å: ${finalOpenBraces === finalCloseBraces ? '‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã!' : '‚ùå –î–∏—Å–±–∞–ª–∞–Ω—Å: ' + (finalOpenBraces - finalCloseBraces)}`);
        
        return finalOpenBraces === finalCloseBraces;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫:', error);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
if (addMissingBraces()) {
    console.log('\nüéØ –£–°–ü–ï–•! –í—Å–µ —Å–∫–æ–±–∫–∏ –∏–¥–µ–∞–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('üöÄ –¢–µ–ø–µ—Ä—å npm run build –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫');
} else {
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ–±–∫–∏');
} 