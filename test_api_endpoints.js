#!/usr/bin/env node

/**
 * üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoints –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–æ—É—Ç–æ–≤ /api/tournaments/:id/generate-bracket
 * 2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–æ—É—Ç–æ–≤ /api/tournaments/:id/regenerate-bracket
 * 3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 * 4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
 */

const http = require('http');
const https = require('https');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const SERVER_URL = 'http://localhost:3001'; // Backend —Å–µ—Ä–≤–µ—Ä
const TEST_TOURNAMENT_ID = 1; // ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const TEST_TOKEN = 'test-token'; // –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(method, path, data = null, token = null) {
    return new Promise((resolve, reject) => {
        const url = new URL(path, SERVER_URL);
        const options = {
            method: method,
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'Test-API-Endpoints/1.0'
            }
        };

        if (token) {
            options.headers['Authorization'] = `Bearer ${token}`;
        }

        if (data) {
            const jsonData = JSON.stringify(data);
            options.headers['Content-Length'] = Buffer.byteLength(jsonData);
        }

        console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${method} ${url.href}`);
        console.log(`üì§ –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, options.headers);
        if (data) console.log(`üì§ –î–∞–Ω–Ω—ã–µ:`, data);

        const req = http.request(url, options, (res) => {
            let responseData = '';
            
            res.on('data', chunk => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const parsed = JSON.parse(responseData);
                    resolve({
                        status: res.statusCode,
                        headers: res.headers,
                        data: parsed
                    });
                } catch (e) {
                    resolve({
                        status: res.statusCode,
                        headers: res.headers,
                        data: responseData
                    });
                }
            });
        });

        req.on('error', reject);

        if (data) {
            req.write(JSON.stringify(data));
        }
        
        req.end();
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
    console.log('üéØ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò API ENDPOINTS –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ï–¢–ö–ò');
    console.log('=' + '='.repeat(60));
    
    try {
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        console.log('\nüì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞');
        try {
            const healthCheck = await makeRequest('GET', '/health');
            console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: —Å—Ç–∞—Ç—É—Å ${healthCheck.status}`);
        } catch (error) {
            console.log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error.message);
            return;
        }

        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—É—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
        console.log('\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞');
        try {
            const tournamentResponse = await makeRequest('GET', `/api/tournaments/${TEST_TOURNAMENT_ID}`);
            console.log(`üìä –°—Ç–∞—Ç—É—Å: ${tournamentResponse.status}`);
            if (tournamentResponse.status === 200) {
                console.log(`‚úÖ –¢—É—Ä–Ω–∏—Ä –Ω–∞–π–¥–µ–Ω: ${tournamentResponse.data.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
            } else {
                console.log(`‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞:`, tournamentResponse.data);
            }
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:`, error.message);
        }

        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—É—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        console.log('\nüîÑ –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)');
        try {
            const generateResponse = await makeRequest('POST', `/api/tournaments/${TEST_TOURNAMENT_ID}/generate-bracket`, {
                thirdPlaceMatch: false
            });
            console.log(`üìä –°—Ç–∞—Ç—É—Å: ${generateResponse.status}`);
            console.log(`üì§ –û—Ç–≤–µ—Ç:`, generateResponse.data);
            
            if (generateResponse.status === 401) {
                console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è`);
            } else {
                console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${generateResponse.status}`);
            }
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`, error.message);
        }

        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—É—Ç–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        console.log('\nüîÑ –¢–µ—Å—Ç 4: –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)');
        try {
            const regenerateResponse = await makeRequest('POST', `/api/tournaments/${TEST_TOURNAMENT_ID}/regenerate-bracket`, {
                shuffle: true,
                thirdPlaceMatch: false
            });
            console.log(`üìä –°—Ç–∞—Ç—É—Å: ${regenerateResponse.status}`);
            console.log(`üì§ –û—Ç–≤–µ—Ç:`, regenerateResponse.data);
            
            if (regenerateResponse.status === 401) {
                console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è`);
            } else {
                console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${regenerateResponse.status}`);
            }
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:`, error.message);
        }

        // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        console.log('\nüîê –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º');
        try {
            const tokenResponse = await makeRequest('POST', `/api/tournaments/${TEST_TOURNAMENT_ID}/generate-bracket`, {
                thirdPlaceMatch: false
            }, 'invalid-token');
            console.log(`üìä –°—Ç–∞—Ç—É—Å: ${tokenResponse.status}`);
            console.log(`üì§ –û—Ç–≤–µ—Ç:`, tokenResponse.data);
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º:`, error.message);
        }

        console.log('\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
        console.log('=' + '='.repeat(60));
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runTests().catch(console.error);
}

module.exports = { runTests, makeRequest }; 